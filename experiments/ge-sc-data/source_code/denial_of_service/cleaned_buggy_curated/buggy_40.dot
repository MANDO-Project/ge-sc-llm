digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n50-function_definition-8-12", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ require(b <= a, \"SafeMath: subtraction overflow\");\n67-expression_statement-9-9", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
77 [label="9_ uint256 c = a - b;\n77-new_variable-10-10", method="sub(uint256 a,uint256 b)", type_label=new_variable];
85 [label="10_ return c;\n85-return-11-11", method="sub(uint256 a,uint256 b)", type_label=return];
87 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n87-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
104 [label="13_ if_a == 0\n104-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
1692 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
109 [label="14_ return 0;\n109-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
111 [label="16_ uint256 c = a * b;\n111-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
119 [label="17_ require(c / a == b, \"SafeMath: multiplication overflow\");\n119-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
131 [label="18_ return c;\n131-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
133 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n133-function_definition-21-25", method="div(uint256 a,uint256 b)", type_label=function_definition];
150 [label="21_ require(b > 0, \"SafeMath: division by zero\");\n150-expression_statement-22-22", method="div(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="22_ uint256 c = a / b;\n160-new_variable-23-23", method="div(uint256 a,uint256 b)", type_label=new_variable];
168 [label="23_ return c;\n168-return-24-24", method="div(uint256 a,uint256 b)", type_label=return];
170 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n170-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
187 [label="26_ require(b != 0, \"SafeMath: modulo by zero\");\n187-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
197 [label="27_ return a % b;\n197-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
204 [label="31_ function totalSupply() external view returns (uint256);\n204-function_definition-32-32", method="totalSupply()", type_label=function_definition];
212 [label="32_ function balanceOf(address account) external view returns (uint256);\n212-function_definition-33-33", method="balanceOf(address account)", type_label=function_definition];
224 [label="33_ function transfer(address recipient, uint256 amount) external returns (bool);\n224-function_definition-34-34", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
239 [label="34_ function allowance(address owner, address spender) external view returns (uint256);\n239-function_definition-35-35", method="allowance(address owner,address spender)", type_label=function_definition];
255 [label="35_ function approve(address spender, uint256 amount) external returns (bool);\n255-function_definition-36-36", method="approve(address spender,uint256 amount)", type_label=function_definition];
270 [label="36_ function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n270-function_definition-37-37", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
328 [label="42_ bool public payedOut_unchk9 = false;\n328-new_variable-43-43", method="", type_label=new_variable];
335 [label="43_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n335-function_definition-44-47", method="withdrawLeftOver_unchk9()", type_label=function_definition];
339 [label="44_ require(payedOut_unchk9);\n339-expression_statement-45-45", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
344 [label="45_ msg.sender.send(address(this).balance);\n344-expression_statement-46-46", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
357 [label="47_ mapping (address => uint256) private _balances;\n357-new_variable-48-48", method="", type_label=new_variable];
364 [label="48_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n364-function_definition-49-51", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
372 [label="49_ callee.call.value(1 ether);\n372-expression_statement-50-50", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
382 [label="51_ mapping (address => mapping (address => uint256)) private _allowances;\n382-new_variable-52-52", method="", type_label=new_variable];
391 [label="52_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n391-function_definition-53-57", method="bug_unchk19()", type_label=function_definition];
395 [label="53_ address payable addr_unchk19;\n395-new_variable-54-54", method="bug_unchk19()", type_label=new_variable];
400 [label="54_ if_!addr_unchk19.send (10 ether) || 1==1\n400-if-55-56", method="bug_unchk19()", type_label=if];
1988 [label="54_ end_if", method="bug_unchk19()", type_label=end_if];
416 [label="57_ uint256 private _totalSupply;\n416-new_variable-58-58", method="", type_label=new_variable];
421 [label="58_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n421-function_definition-59-61", method="totalSupply()", type_label=function_definition];
430 [label="59_ return _totalSupply;\n430-return-60-60", method="totalSupply()", type_label=return];
432 [label="61_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n432-function_definition-62-64", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
440 [label="62_ callee.send(5 ether);\n440-expression_statement-63-63", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
448 [label="64_ function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n448-function_definition-65-67", method="balanceOf(address account)", type_label=function_definition];
461 [label="65_ return _balances[account];\n461-return-66-66", method="balanceOf(address account)", type_label=return];
465 [label="67_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n465-function_definition-68-72", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
481 [label="68_ uint64 subpot_unchk46 = 3 ether;\n481-new_variable-69-69", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
488 [label="69_ winner_unchk46.send(subpot_unchk46);\n488-expression_statement-70-70", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
495 [label="70_ subpot_unchk46= 0;\n495-expression_statement-71-71", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
499 [label="72_ function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n499-function_definition-73-76", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
515 [label="73_ _transfer(msg.sender, recipient, amount);\n515-expression_statement-74-74", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
526 [label="74_ return true;\n526-return-75-75", method="transfer(address recipient,uint256 amount)", type_label=return];
529 [label="76_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n529-function_definition-77-85", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
533 [label="77_ address payable addr_unchk4;\n533-new_variable-78-78", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
538 [label="78_ if\n538-if-79-84", method="UncheckedExternalCall_unchk4()", type_label=if];
2126 [label="78_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
549 [label="85_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n549-function_definition-86-88", method="allowance(address owner,address spender)", type_label=function_definition];
566 [label="86_ return _allowances[owner][spender];\n566-return-87-87", method="allowance(address owner,address spender)", type_label=return];
572 [label="88_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n572-function_definition-89-93", method="bug_unchk7()", type_label=function_definition];
576 [label="89_ address payable addr_unchk7;\n576-new_variable-90-90", method="bug_unchk7()", type_label=new_variable];
581 [label="90_ if_!addr_unchk7.send (10 ether) || 1==1\n581-if-91-92", method="bug_unchk7()", type_label=if];
2169 [label="90_ end_if", method="bug_unchk7()", type_label=end_if];
597 [label="93_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n597-function_definition-94-97", method="approve(address spender,uint256 value)", type_label=function_definition];
613 [label="94_ _approve(msg.sender, spender, value);\n613-expression_statement-95-95", method="approve(address spender,uint256 value)", type_label=expression_statement];
624 [label="95_ return true;\n624-return-96-96", method="approve(address spender,uint256 value)", type_label=return];
627 [label="97_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n627-function_definition-98-100", method="my_func_unchk23(address payable dst)", type_label=function_definition];
636 [label="98_ dst.send(msg.value);\n636-expression_statement-99-99", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
645 [label="100_ function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n645-function_definition-101-105", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
665 [label="101_ _transfer(sender, recipient, amount);\n665-expression_statement-102-102", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
674 [label="102_ _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n674-expression_statement-103-103", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
696 [label="103_ return true;\n696-return-104-104", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=return];
699 [label="105_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n699-function_definition-106-108", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
707 [label="106_ callee.send(5 ether);\n707-expression_statement-107-107", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
715 [label="108_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n715-function_definition-109-112", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
731 [label="109_ _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n731-expression_statement-110-110", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
753 [label="110_ return true;\n753-return-111-111", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
756 [label="112_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n756-function_definition-113-120", method="bug_unchk30()", type_label=function_definition];
760 [label="113_ uint receivers_unchk30;\n760-new_variable-114-114", method="bug_unchk30()", type_label=new_variable];
765 [label="114_ address payable addr_unchk30;\n765-new_variable-115-115", method="bug_unchk30()", type_label=new_variable];
770 [label="115_ if\n770-if-116-119", method="bug_unchk30()", type_label=if];
2358 [label="115_ end_if", method="bug_unchk30()", type_label=end_if];
780 [label="116_ receivers_unchk30 +=1;\n780-expression_statement-117-117", method="bug_unchk30()", type_label=expression_statement];
787 [label="120_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n787-function_definition-121-124", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
803 [label="121_ _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n803-expression_statement-122-122", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
825 [label="122_ return true;\n825-return-123-123", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
828 [label="124_ bool public payedOut_unchk8 = false;\n828-new_variable-125-125", method="", type_label=new_variable];
835 [label="125_ address payable public winner_unchk8;\n835-new_variable-126-126", method="", type_label=new_variable];
840 [label="126_ uint public winAmount_unchk8;\n840-new_variable-127-127", method="", type_label=new_variable];
845 [label="127_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n845-function_definition-128-132", method="sendToWinner_unchk8()", type_label=function_definition];
849 [label="128_ require(!payedOut_unchk8);\n849-expression_statement-129-129", method="sendToWinner_unchk8()", type_label=expression_statement];
855 [label="129_ winner_unchk8.send(winAmount_unchk8);\n855-expression_statement-130-130", method="sendToWinner_unchk8()", type_label=expression_statement];
862 [label="130_ payedOut_unchk8 = true;\n862-expression_statement-131-131", method="sendToWinner_unchk8()", type_label=expression_statement];
867 [label="132_ function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n867-function_definition-133-139", method="_transfer(address sender,address recipient,uint256 amount)", type_label=function_definition];
883 [label="133_ require(sender != address(0), \"ERC20: transfer from the zero address\");\n883-expression_statement-134-134", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
895 [label="134_ require(recipient != address(0), \"ERC20: transfer to the zero address\");\n895-expression_statement-135-135", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
907 [label="135_ _balances[sender] = _balances[sender].sub(amount);\n907-expression_statement-136-136", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
920 [label="136_ _balances[recipient] = _balances[recipient].add(amount);\n920-expression_statement-137-137", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
941 [label="139_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n941-function_definition-140-141", method="bug_unchk39(address payable addr)", type_label=function_definition];
949 [label="140_ addr.send (4 ether);\n949-expression_statement-141-141", method="bug_unchk39(address payable addr)", type_label=expression_statement];
957 [label="141_ function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n957-function_definition-142-147", method="_mint(address account,uint256 amount)", type_label=function_definition];
969 [label="142_ require(account != address(0), \"ERC20: mint to the zero address\");\n969-expression_statement-143-143", method="_mint(address account,uint256 amount)", type_label=expression_statement];
981 [label="143_ _totalSupply = _totalSupply.add(amount);\n981-expression_statement-144-144", method="_mint(address account,uint256 amount)", type_label=expression_statement];
990 [label="144_ _balances[account] = _balances[account].add(amount);\n990-expression_statement-145-145", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1013 [label="147_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1013-function_definition-148-150", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1022 [label="148_ dst.call.value(msg.value)(\"\");\n1022-expression_statement-149-149", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1037 [label="150_ function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n1037-function_definition-151-156", method="_burn(address account,uint256 value)", type_label=function_definition];
1049 [label="151_ require(account != address(0), \"ERC20: burn from the zero address\");\n1049-expression_statement-152-152", method="_burn(address account,uint256 value)", type_label=expression_statement];
1061 [label="152_ _totalSupply = _totalSupply.sub(value);\n1061-expression_statement-153-153", method="_burn(address account,uint256 value)", type_label=expression_statement];
1070 [label="153_ _balances[account] = _balances[account].sub(value);\n1070-expression_statement-154-154", method="_burn(address account,uint256 value)", type_label=expression_statement];
1093 [label="156_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1093-function_definition-157-159", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1102 [label="157_ dst.send(msg.value);\n1102-expression_statement-158-158", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1111 [label="159_ function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n1111-function_definition-160-165", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
1127 [label="160_ require(owner != address(0), \"ERC20: approve from the zero address\");\n1127-expression_statement-161-161", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1139 [label="161_ require(spender != address(0), \"ERC20: approve to the zero address\");\n1139-expression_statement-162-162", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1151 [label="162_ _allowances[owner][spender] = value;\n1151-expression_statement-163-163", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1167 [label="165_ bool public payedOut_unchk44 = false;\n1167-new_variable-166-166", method="", type_label=new_variable];
1174 [label="166_ address payable public winner_unchk44;\n1174-new_variable-167-167", method="", type_label=new_variable];
1179 [label="167_ uint public winAmount_unchk44;\n1179-new_variable-168-168", method="", type_label=new_variable];
1184 [label="168_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1184-function_definition-169-173", method="sendToWinner_unchk44()", type_label=function_definition];
1188 [label="169_ require(!payedOut_unchk44);\n1188-expression_statement-170-170", method="sendToWinner_unchk44()", type_label=expression_statement];
1194 [label="170_ winner_unchk44.send(winAmount_unchk44);\n1194-expression_statement-171-171", method="sendToWinner_unchk44()", type_label=expression_statement];
1201 [label="171_ payedOut_unchk44 = true;\n1201-expression_statement-172-172", method="sendToWinner_unchk44()", type_label=expression_statement];
1206 [label="173_ function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n1206-function_definition-174-177", method="_burnFrom(address account,uint256 amount)", type_label=function_definition];
1218 [label="174_ _burn(account, amount);\n1218-expression_statement-175-175", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
1225 [label="175_ _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n1225-expression_statement-176-176", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
1247 [label="177_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1247-function_definition-178-186", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1251 [label="178_ address payable addr_unchk40;\n1251-new_variable-179-179", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1256 [label="179_ if\n1256-if-180-185", method="UncheckedExternalCall_unchk40()", type_label=if];
2844 [label="179_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1273 [label="188_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n1273-function_definition-189-191", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
1281 [label="189_ callee.send(5 ether);\n1281-expression_statement-190-190", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
1289 [label="191_ string private _name;\n1289-new_variable-192-192", method="", type_label=new_variable];
1294 [label="192_ bool public payedOut_unchk20 = false;\n1294-new_variable-193-193", method="", type_label=new_variable];
1301 [label="193_ address payable public winner_unchk20;\n1301-new_variable-194-194", method="", type_label=new_variable];
1306 [label="194_ uint public winAmount_unchk20;\n1306-new_variable-195-195", method="", type_label=new_variable];
1311 [label="195_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n1311-function_definition-196-200", method="sendToWinner_unchk20()", type_label=function_definition];
1315 [label="196_ require(!payedOut_unchk20);\n1315-expression_statement-197-197", method="sendToWinner_unchk20()", type_label=expression_statement];
1321 [label="197_ winner_unchk20.send(winAmount_unchk20);\n1321-expression_statement-198-198", method="sendToWinner_unchk20()", type_label=expression_statement];
1328 [label="198_ payedOut_unchk20 = true;\n1328-expression_statement-199-199", method="sendToWinner_unchk20()", type_label=expression_statement];
1333 [label="200_ string private _symbol;\n1333-new_variable-201-201", method="", type_label=new_variable];
1338 [label="201_ bool public payedOut_unchk32 = false;\n1338-new_variable-202-202", method="", type_label=new_variable];
1345 [label="202_ address payable public winner_unchk32;\n1345-new_variable-203-203", method="", type_label=new_variable];
1350 [label="203_ uint public winAmount_unchk32;\n1350-new_variable-204-204", method="", type_label=new_variable];
1355 [label="204_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n1355-function_definition-205-209", method="sendToWinner_unchk32()", type_label=function_definition];
1359 [label="205_ require(!payedOut_unchk32);\n1359-expression_statement-206-206", method="sendToWinner_unchk32()", type_label=expression_statement];
1365 [label="206_ winner_unchk32.send(winAmount_unchk32);\n1365-expression_statement-207-207", method="sendToWinner_unchk32()", type_label=expression_statement];
1372 [label="207_ payedOut_unchk32 = true;\n1372-expression_statement-208-208", method="sendToWinner_unchk32()", type_label=expression_statement];
1377 [label="209_ uint8 private _decimals;\n1377-new_variable-210-210", method="", type_label=new_variable];
1396 [label="211_ _name = name;\n1396-expression_statement-212-212", method="", type_label=expression_statement];
1400 [label="212_ _symbol = symbol;\n1400-expression_statement-213-213", method="", type_label=expression_statement];
1404 [label="213_ _decimals = decimals;\n1404-expression_statement-214-214", method="", type_label=expression_statement];
1408 [label="215_ bool public payedOut_unchk33 = false;\n1408-new_variable-216-216", method="", type_label=new_variable];
1415 [label="216_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1415-function_definition-217-220", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1419 [label="217_ require(payedOut_unchk33);\n1419-expression_statement-218-218", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1424 [label="218_ msg.sender.send(address(this).balance);\n1424-expression_statement-219-219", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1437 [label="220_ function name() public view returns (string memory) {\n        return _name;\n    }\n1437-function_definition-221-223", method="name()", type_label=function_definition];
1446 [label="221_ return _name;\n1446-return-222-222", method="name()", type_label=return];
1448 [label="223_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1448-function_definition-224-225", method="bug_unchk27(address payable addr)", type_label=function_definition];
1456 [label="224_ addr.send (42 ether);\n1456-expression_statement-225-225", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1464 [label="225_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n1464-function_definition-226-228", method="symbol()", type_label=function_definition];
1473 [label="226_ return _symbol;\n1473-return-227-227", method="symbol()", type_label=return];
1475 [label="228_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n1475-function_definition-229-233", method="bug_unchk31()", type_label=function_definition];
1479 [label="229_ address payable addr_unchk31;\n1479-new_variable-230-230", method="bug_unchk31()", type_label=new_variable];
1484 [label="230_ if_!addr_unchk31.send (10 ether) || 1==1\n1484-if-231-232", method="bug_unchk31()", type_label=if];
3072 [label="230_ end_if", method="bug_unchk31()", type_label=end_if];
1500 [label="233_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n1500-function_definition-234-236", method="decimals()", type_label=function_definition];
1509 [label="234_ return _decimals;\n1509-return-235-235", method="decimals()", type_label=return];
1511 [label="236_ bool public payedOut_unchk45 = false;\n1511-new_variable-237-237", method="", type_label=new_variable];
1518 [label="237_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n1518-function_definition-238-241", method="withdrawLeftOver_unchk45()", type_label=function_definition];
1522 [label="238_ require(payedOut_unchk45);\n1522-expression_statement-239-239", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1527 [label="239_ msg.sender.send(address(this).balance);\n1527-expression_statement-240-240", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1550 [label="243_ ERC20Detailed(\"SimpleSwap Coin\", \"SWAP\", 8)\n1550-expression_statement-244-244", method="", type_label=expression_statement];
1561 [label="244_ _mint(msg.sender, 100000000 * (10 ** 8));\n1561-expression_statement-245-245", method="", type_label=expression_statement];
1575 [label="246_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n1575-function_definition-247-249", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
1583 [label="247_ callee.call.value(1 ether);\n1583-expression_statement-248-248", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
548;
785;
1266;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
87 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 1692  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1692 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 1692  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
335 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 1988  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
421 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
432 -> 440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
465 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
499 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
526 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
529 -> 533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
533 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
566 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
572 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
576 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 2169  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
597 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
627 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
699 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
753 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
756 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
760 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 780  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2358 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 2358  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
787 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
828 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
867 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
941 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1013 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 1070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1093 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1139 -> 1151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 1174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1174 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1184 -> 1188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1188 -> 1194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1194 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1206 -> 1218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1218 -> 1225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1251 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 1281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1289 -> 1294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1294 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 1315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1315 -> 1321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 1328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1333 -> 1338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1338 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1345 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1355 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1359 -> 1365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1365 -> 1372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1396 -> 1400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1400 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1415 -> 1419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1419 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1437 -> 1446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1446 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1448 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1464 -> 1473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1473 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1475 -> 1479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1479 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1484 -> 3072  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1500 -> 1509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1509 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1518 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1522 -> 1527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1575 -> 1583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
548 -> 2126  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
785 -> 2358  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1266 -> 2844  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
