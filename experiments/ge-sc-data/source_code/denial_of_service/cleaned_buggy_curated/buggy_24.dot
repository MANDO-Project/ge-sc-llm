digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n50-function_definition-8-10", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ return sub(a, b, \"SafeMath: subtraction overflow\");\n67-return-9-9", method="sub(uint256 a,uint256 b)", type_label=return];
77 [label="10_ function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n77-function_definition-11-15", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
98 [label="11_ require(b <= a, errorMessage);\n98-expression_statement-12-12", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
107 [label="12_ uint256 c = a - b;\n107-new_variable-13-13", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=new_variable];
115 [label="13_ return c;\n115-return-14-14", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
117 [label="15_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n117-function_definition-16-23", method="mul(uint256 a,uint256 b)", type_label=function_definition];
134 [label="16_ if_a == 0\n134-if-17-19", method="mul(uint256 a,uint256 b)", type_label=if];
5008 [label="16_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
139 [label="17_ return 0;\n139-return-18-18", method="mul(uint256 a,uint256 b)", type_label=return];
141 [label="19_ uint256 c = a * b;\n141-new_variable-20-20", method="mul(uint256 a,uint256 b)", type_label=new_variable];
149 [label="20_ require(c / a == b, \"SafeMath: multiplication overflow\");\n149-expression_statement-21-21", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
161 [label="21_ return c;\n161-return-22-22", method="mul(uint256 a,uint256 b)", type_label=return];
163 [label="23_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n163-function_definition-24-26", method="div(uint256 a,uint256 b)", type_label=function_definition];
180 [label="24_ return div(a, b, \"SafeMath: division by zero\");\n180-return-25-25", method="div(uint256 a,uint256 b)", type_label=return];
190 [label="26_ function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n190-function_definition-27-31", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
211 [label="27_ require(b > 0, errorMessage);\n211-expression_statement-28-28", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
220 [label="28_ uint256 c = a / b;\n220-new_variable-29-29", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=new_variable];
228 [label="29_ return c;\n228-return-30-30", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
230 [label="31_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n230-function_definition-32-34", method="mod(uint256 a,uint256 b)", type_label=function_definition];
247 [label="32_ return mod(a, b, \"SafeMath: modulo by zero\");\n247-return-33-33", method="mod(uint256 a,uint256 b)", type_label=return];
257 [label="34_ function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n257-function_definition-35-38", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
278 [label="35_ require(b != 0, errorMessage);\n278-expression_statement-36-36", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
287 [label="36_ return a % b;\n287-return-37-37", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
303 [label="42_ struct User {\n        uint256 totalInvestCount;\n        uint256 totalInvestAmount;\n        uint256 totalStaticCommissionWithdrawAmount;\n        uint256 totalDynamicCommissionWithdrawAmount;\n        uint256 totalWithdrawAmount;\n        uint256 downlineCount;\n        uint256 nodeCount;\n        uint256 totalDownlineInvestAmount;\n        uint256 currentInvestTime;\n        uint256 currentInvestAmount;\n        uint256 currentInvestCycle;\n        uint256 currentlevel;\n        uint256 currentStaticCommissionRatio;\n        uint256 currentStaticCommissionWithdrawAmount;\n        uint256 staticCommissionBalance;\n        uint256 dynamicCommissionBalance;\n        uint256 calcDynamicCommissionAmount;\n        address sponsorAddress;\n    }\n303-expression_statement-43-62", method="User()", type_label=expression_statement];
377 [label="62_ struct InvestRecord {\n        uint256 time;\n        uint256 amount;\n        uint256 cycle;\n    }\n377-expression_statement-63-67", method="InvestRecord()", type_label=expression_statement];
391 [label="67_ struct CommissionRecord {\n        uint256 time;\n        uint256 amount;\n    }\n391-expression_statement-68-71", method="CommissionRecord()", type_label=expression_statement];
401 [label="71_ function bug_unchk18() public{\nuint receivers_unchk18;\naddress payable addr_unchk18;\nif (!addr_unchk18.send(42 ether))\n	{receivers_unchk18 +=1;}\nelse\n	{revert();}\n}\n401-function_definition-72-79", method="bug_unchk18()", type_label=function_definition];
405 [label="72_ uint receivers_unchk18;\n405-new_variable-73-73", method="bug_unchk18()", type_label=new_variable];
410 [label="73_ address payable addr_unchk18;\n410-new_variable-74-74", method="bug_unchk18()", type_label=new_variable];
415 [label="74_ if\n415-if-75-78", method="bug_unchk18()", type_label=if];
5289 [label="74_ end_if", method="bug_unchk18()", type_label=end_if];
425 [label="75_ receivers_unchk18 +=1;\n425-expression_statement-76-76", method="bug_unchk18()", type_label=expression_statement];
432 [label="79_ uint256 private constant ONE_ETH = 1 ether;\n432-new_variable-80-80", method="", type_label=new_variable];
439 [label="80_ function withdrawBal_unchk29 () public{\n	uint Balances_unchk29 = 0;\n	msg.sender.send(Balances_unchk29);}\n439-function_definition-81-83", method="withdrawBal_unchk29()", type_label=function_definition];
443 [label="81_ uint Balances_unchk29 = 0;\n443-new_variable-82-82", method="withdrawBal_unchk29()", type_label=new_variable];
449 [label="82_ msg.sender.send(Balances_unchk29);\n449-expression_statement-83-83", method="withdrawBal_unchk29()", type_label=expression_statement];
458 [label="83_ uint256 private constant ONE_DAY = 1 days;\n458-new_variable-84-84", method="", type_label=new_variable];
465 [label="84_ function bug_unchk6() public{\nuint receivers_unchk6;\naddress payable addr_unchk6;\nif (!addr_unchk6.send(42 ether))\n	{receivers_unchk6 +=1;}\nelse\n	{revert();}\n}\n465-function_definition-85-92", method="bug_unchk6()", type_label=function_definition];
469 [label="85_ uint receivers_unchk6;\n469-new_variable-86-86", method="bug_unchk6()", type_label=new_variable];
474 [label="86_ address payable addr_unchk6;\n474-new_variable-87-87", method="bug_unchk6()", type_label=new_variable];
479 [label="87_ if\n479-if-88-91", method="bug_unchk6()", type_label=if];
5353 [label="87_ end_if", method="bug_unchk6()", type_label=end_if];
489 [label="88_ receivers_unchk6 +=1;\n489-expression_statement-89-89", method="bug_unchk6()", type_label=expression_statement];
496 [label="92_ address private constant GENESIS_USER_ADDRESS = 0xe00d13D53Ba180EAD5F4838BD56b15629026A8C9;\n496-new_variable-93-93", method="", type_label=new_variable];
502 [label="93_ function UncheckedExternalCall_unchk16 () public\n{  address payable addr_unchk16;\n   if (! addr_unchk16.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n502-function_definition-94-102", method="UncheckedExternalCall_unchk16()", type_label=function_definition];
506 [label="94_ address payable addr_unchk16;\n506-new_variable-95-95", method="UncheckedExternalCall_unchk16()", type_label=new_variable];
511 [label="95_ if\n511-if-96-101", method="UncheckedExternalCall_unchk16()", type_label=if];
5385 [label="95_ end_if", method="UncheckedExternalCall_unchk16()", type_label=end_if];
522 [label="102_ address private constant ENGINEER_ADDRESS = 0xddf0bB01f81059CCdB3D5bF5b1C7Bd540aDDFEac;\n522-new_variable-103-103", method="", type_label=new_variable];
528 [label="103_ function my_func_uncheck24(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n528-function_definition-104-106", method="my_func_uncheck24(address payable dst)", type_label=function_definition];
537 [label="104_ dst.call.value(msg.value)(\"\");\n537-expression_statement-105-105", method="my_func_uncheck24(address payable dst)", type_label=expression_statement];
552 [label="106_ bool private initialized = false;\n552-new_variable-107-107", method="", type_label=new_variable];
559 [label="107_ function withdrawBal_unchk5 () public{\n	uint64 Balances_unchk5 = 0;\n	msg.sender.send(Balances_unchk5);}\n559-function_definition-108-110", method="withdrawBal_unchk5()", type_label=function_definition];
563 [label="108_ uint64 Balances_unchk5 = 0;\n563-new_variable-109-109", method="withdrawBal_unchk5()", type_label=new_variable];
569 [label="109_ msg.sender.send(Balances_unchk5);\n569-expression_statement-110-110", method="withdrawBal_unchk5()", type_label=expression_statement];
578 [label="110_ address public owner;\n578-new_variable-111-111", method="", type_label=new_variable];
583 [label="111_ function bug_unchk15(address payable addr) public\n      {addr.send (42 ether); }\n583-function_definition-112-113", method="bug_unchk15(address payable addr)", type_label=function_definition];
591 [label="112_ addr.send (42 ether);\n591-expression_statement-113-113", method="bug_unchk15(address payable addr)", type_label=expression_statement];
599 [label="113_ uint256 public totalInvestCount;\n599-new_variable-114-114", method="", type_label=new_variable];
604 [label="114_ function UncheckedExternalCall_unchk28 () public\n{  address payable addr_unchk28;\n   if (! addr_unchk28.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n604-function_definition-115-123", method="UncheckedExternalCall_unchk28()", type_label=function_definition];
608 [label="115_ address payable addr_unchk28;\n608-new_variable-116-116", method="UncheckedExternalCall_unchk28()", type_label=new_variable];
613 [label="116_ if\n613-if-117-122", method="UncheckedExternalCall_unchk28()", type_label=if];
5487 [label="116_ end_if", method="UncheckedExternalCall_unchk28()", type_label=end_if];
624 [label="123_ uint256 public totalInvestAmount;\n624-new_variable-124-124", method="", type_label=new_variable];
629 [label="124_ function cash_unchk34(uint roundIndex, uint subpotIndex, address payable winner_unchk34) public{\n        uint64 subpot_unchk34 = 10 ether;\n        winner_unchk34.send(subpot_unchk34);   \n        subpot_unchk34= 0;\n}\n629-function_definition-125-129", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=function_definition];
645 [label="125_ uint64 subpot_unchk34 = 10 ether;\n645-new_variable-126-126", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=new_variable];
652 [label="126_ winner_unchk34.send(subpot_unchk34);\n652-expression_statement-127-127", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=expression_statement];
659 [label="127_ subpot_unchk34= 0;\n659-expression_statement-128-128", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=expression_statement];
663 [label="129_ uint256 public totalStaticCommissionWithdrawAmount;\n663-new_variable-130-130", method="", type_label=new_variable];
668 [label="130_ bool public payedOut_unchk21 = false;\n668-new_variable-131-131", method="", type_label=new_variable];
675 [label="131_ function withdrawLeftOver_unchk21() public {\n        require(payedOut_unchk21);\n        msg.sender.send(address(this).balance);\n    }\n675-function_definition-132-135", method="withdrawLeftOver_unchk21()", type_label=function_definition];
679 [label="132_ require(payedOut_unchk21);\n679-expression_statement-133-133", method="withdrawLeftOver_unchk21()", type_label=expression_statement];
684 [label="133_ msg.sender.send(address(this).balance);\n684-expression_statement-134-134", method="withdrawLeftOver_unchk21()", type_label=expression_statement];
697 [label="135_ uint256 public totalDynamicCommissionWithdrawAmount;\n697-new_variable-136-136", method="", type_label=new_variable];
702 [label="136_ function cash_unchk10(uint roundIndex, uint subpotIndex,address payable winner_unchk10) public{\n        uint64 subpot_unchk10 = 10 ether;\n        winner_unchk10.send(subpot_unchk10);   \n        subpot_unchk10= 0;\n}\n702-function_definition-137-141", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=function_definition];
718 [label="137_ uint64 subpot_unchk10 = 10 ether;\n718-new_variable-138-138", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=new_variable];
725 [label="138_ winner_unchk10.send(subpot_unchk10);\n725-expression_statement-139-139", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=expression_statement];
732 [label="139_ subpot_unchk10= 0;\n732-expression_statement-140-140", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=expression_statement];
736 [label="141_ uint256 public totalWithdrawAmount;\n736-new_variable-142-142", method="", type_label=new_variable];
741 [label="142_ function my_func_unchk47(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n741-function_definition-143-145", method="my_func_unchk47(address payable dst)", type_label=function_definition];
750 [label="143_ dst.send(msg.value);\n750-expression_statement-144-144", method="my_func_unchk47(address payable dst)", type_label=expression_statement];
759 [label="145_ uint256 public totalUserCount;\n759-new_variable-146-146", method="", type_label=new_variable];
764 [label="146_ function cash_unchk22(uint roundIndex, uint subpotIndex, address payable winner_unchk22)public{\n        uint64 subpot_unchk22 = 10 ether;\n        winner_unchk22.send(subpot_unchk22);   \n        subpot_unchk22= 0;\n}\n764-function_definition-147-151", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=function_definition];
780 [label="147_ uint64 subpot_unchk22 = 10 ether;\n780-new_variable-148-148", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=new_variable];
787 [label="148_ winner_unchk22.send(subpot_unchk22);\n787-expression_statement-149-149", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
794 [label="149_ subpot_unchk22= 0;\n794-expression_statement-150-150", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
798 [label="151_ uint256 public engineerFunds;\n798-new_variable-152-152", method="", type_label=new_variable];
803 [label="152_ function my_func_uncheck12(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n803-function_definition-153-155", method="my_func_uncheck12(address payable dst)", type_label=function_definition];
812 [label="153_ dst.call.value(msg.value)(\"\");\n812-expression_statement-154-154", method="my_func_uncheck12(address payable dst)", type_label=expression_statement];
827 [label="155_ uint256 public engineerWithdrawAmount;\n827-new_variable-156-156", method="", type_label=new_variable];
832 [label="156_ function my_func_unchk11(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n832-function_definition-157-159", method="my_func_unchk11(address payable dst)", type_label=function_definition];
841 [label="157_ dst.send(msg.value);\n841-expression_statement-158-158", method="my_func_unchk11(address payable dst)", type_label=expression_statement];
850 [label="159_ uint256 public operatorFunds;\n850-new_variable-160-160", method="", type_label=new_variable];
855 [label="160_ function callnotchecked_unchk1(address payable callee) public {\n    callee.call.value(2 ether);\n  }\n855-function_definition-161-163", method="callnotchecked_unchk1(address payable callee)", type_label=function_definition];
863 [label="161_ callee.call.value(2 ether);\n863-expression_statement-162-162", method="callnotchecked_unchk1(address payable callee)", type_label=expression_statement];
873 [label="163_ uint256 public operatorWithdrawAmount;\n873-new_variable-164-164", method="", type_label=new_variable];
878 [label="164_ function withdrawBal_unchk41 () public{\n	uint64 Balances_unchk41 = 0;\n	msg.sender.send(Balances_unchk41);}\n878-function_definition-165-167", method="withdrawBal_unchk41()", type_label=function_definition];
882 [label="165_ uint64 Balances_unchk41 = 0;\n882-new_variable-166-166", method="withdrawBal_unchk41()", type_label=new_variable];
888 [label="166_ msg.sender.send(Balances_unchk41);\n888-expression_statement-167-167", method="withdrawBal_unchk41()", type_label=expression_statement];
897 [label="167_ mapping (address => User) private userMapping;\n897-new_variable-168-168", method="", type_label=new_variable];
905 [label="168_ function bug_unchk42() public{\nuint receivers_unchk42;\naddress payable addr_unchk42;\nif (!addr_unchk42.send(42 ether))\n	{receivers_unchk42 +=1;}\nelse\n	{revert();}\n}\n905-function_definition-169-176", method="bug_unchk42()", type_label=function_definition];
909 [label="169_ uint receivers_unchk42;\n909-new_variable-170-170", method="bug_unchk42()", type_label=new_variable];
914 [label="170_ address payable addr_unchk42;\n914-new_variable-171-171", method="bug_unchk42()", type_label=new_variable];
919 [label="171_ if\n919-if-172-175", method="bug_unchk42()", type_label=if];
5793 [label="171_ end_if", method="bug_unchk42()", type_label=end_if];
929 [label="172_ receivers_unchk42 +=1;\n929-expression_statement-173-173", method="bug_unchk42()", type_label=expression_statement];
936 [label="176_ mapping (uint256 => address) private addressMapping;\n936-new_variable-177-177", method="", type_label=new_variable];
943 [label="177_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n943-function_definition-178-180", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
951 [label="178_ callee.send(5 ether);\n951-expression_statement-179-179", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
959 [label="180_ mapping (address => InvestRecord[9]) private investRecordMapping;\n959-new_variable-181-181", method="", type_label=new_variable];
969 [label="181_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n969-function_definition-182-186", method="bug_unchk43()", type_label=function_definition];
973 [label="182_ address payable addr_unchk43;\n973-new_variable-183-183", method="bug_unchk43()", type_label=new_variable];
978 [label="183_ if_!addr_unchk43.send (10 ether) || 1==1\n978-if-184-185", method="bug_unchk43()", type_label=if];
5852 [label="183_ end_if", method="bug_unchk43()", type_label=end_if];
994 [label="186_ mapping (address => CommissionRecord[9]) private staticCommissionRecordMapping;\n994-new_variable-187-187", method="", type_label=new_variable];
1004 [label="187_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1004-function_definition-188-190", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
1013 [label="188_ dst.call.value(msg.value)(\"\");\n1013-expression_statement-189-189", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
1028 [label="190_ mapping (address => CommissionRecord[9]) private dynamicCommissionRecordMapping;\n1028-new_variable-191-191", method="", type_label=new_variable];
1038 [label="191_ function initialize() public {\n        require(!initialized, \"already initialized\");\n        owner = msg.sender;\n        userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n        initialized = true;\n    }\n1038-function_definition-192-197", method="initialize()", type_label=function_definition];
1042 [label="192_ require(!initialized, \"already initialized\");\n1042-expression_statement-193-193", method="initialize()", type_label=expression_statement];
1051 [label="193_ owner = msg.sender;\n1051-expression_statement-194-194", method="initialize()", type_label=expression_statement];
1057 [label="194_ userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n1057-expression_statement-195-195", method="initialize()", type_label=expression_statement];
1102 [label="195_ initialized = true;\n1102-expression_statement-196-196", method="initialize()", type_label=expression_statement];
1107 [label="197_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n1107-function_definition-198-200", method="withdrawBal_unchk17()", type_label=function_definition];
1111 [label="198_ uint64 Balances_unchk17 = 0;\n1111-new_variable-199-199", method="withdrawBal_unchk17()", type_label=new_variable];
1117 [label="199_ msg.sender.send(Balances_unchk17);\n1117-expression_statement-200-200", method="withdrawBal_unchk17()", type_label=expression_statement];
1128 [label="201_ initialize();\n1128-expression_statement-202-202", method="", type_label=expression_statement];
1131 [label="203_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n1131-function_definition-204-206", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
1139 [label="204_ callee.call.value(1 ether);\n1139-expression_statement-205-205", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
1149 [label="206_ modifier onlyOwner() {\n        require(msg.sender == owner, \"onlyOwner\");\n        _;\n    }\n1149-expression_statement-207-210", method="", type_label=expression_statement];
1152 [label="207_ require(msg.sender == owner, \"onlyOwner\");\n1152-expression_statement-208-208", method="", type_label=expression_statement];
1164 [label="208_ _;\n1164-expression_statement-209-209", method="", type_label=expression_statement];
1166 [label="210_ modifier onlyEngineer() {\n        require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n        _;\n    }\n1166-expression_statement-211-214", method="", type_label=expression_statement];
1169 [label="211_ require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n1169-expression_statement-212-212", method="", type_label=expression_statement];
1181 [label="212_ _;\n1181-expression_statement-213-213", method="", type_label=expression_statement];
1183 [label="214_ function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n        owner = newOwner;\n    }\n1183-function_definition-215-218", method="transferOwnership(address newOwner)", type_label=function_definition];
1190 [label="214_ onlyOwner\n1190-expression_statement-215-215", method="transferOwnership(address newOwner)", type_label=expression_statement];
1193 [label="215_ require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n1193-expression_statement-216-216", method="transferOwnership(address newOwner)", type_label=expression_statement];
1205 [label="216_ owner = newOwner;\n1205-expression_statement-217-217", method="transferOwnership(address newOwner)", type_label=expression_statement];
1209 [label="218_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n1209-function_definition-219-220", method="bug_unchk3(address payable addr)", type_label=function_definition];
1217 [label="219_ addr.send (42 ether);\n1217-expression_statement-220-220", method="bug_unchk3(address payable addr)", type_label=expression_statement];
1225 [label="220_ function getLevelByInvestAmount(uint256 investAmount) private pure returns (uint256 level) {\n        if (investAmount >= ONE_ETH.mul(11)) {\n            level = 3;\n        } else if (investAmount >= ONE_ETH.mul(6)) {\n            level = 2;\n        } else {\n            level = 1;\n        }\n    }\n1225-function_definition-221-229", method="getLevelByInvestAmount(uint256 investAmount)", type_label=function_definition];
1239 [label="221_ if\n1239-if-222-228", method="getLevelByInvestAmount(uint256 investAmount)", type_label=if];
6113 [label="221_ end_if", method="getLevelByInvestAmount(uint256 investAmount)", type_label=end_if];
1249 [label="222_ level = 3;\n1249-expression_statement-223-223", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1253 [label="223_ if\n1253-if-224-228", method="getLevelByInvestAmount(uint256 investAmount)", type_label=if];
1263 [label="224_ level = 2;\n1263-expression_statement-225-225", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1268 [label="226_ level = 1;\n1268-expression_statement-227-227", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1272 [label="229_ bool public payedOut_unchk9 = false;\n1272-new_variable-230-230", method="", type_label=new_variable];
1279 [label="230_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n1279-function_definition-231-234", method="withdrawLeftOver_unchk9()", type_label=function_definition];
1283 [label="231_ require(payedOut_unchk9);\n1283-expression_statement-232-232", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
1288 [label="232_ msg.sender.send(address(this).balance);\n1288-expression_statement-233-233", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
1301 [label="234_ function isInvestExpired(User memory user) private view returns (bool expired) {\n        expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n    }\n1301-function_definition-235-237", method="isInvestExpired(User memory user)", type_label=function_definition];
1316 [label="235_ expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n1316-expression_statement-236-236", method="isInvestExpired(User memory user)", type_label=expression_statement];
1337 [label="237_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n1337-function_definition-238-240", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
1345 [label="238_ callee.call.value(1 ether);\n1345-expression_statement-239-239", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
1355 [label="240_ function getAbortInvestAmount(User memory user) private view returns (uint256 amount) {\n        uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n        require(commissionDays >= 3, \"Invest time must >= 3days\");\n        uint256 lossRatio = 15;\n        if (commissionDays >= 60) {\n            lossRatio = 5;\n        } else if (commissionDays >= 30) {\n            lossRatio = 10;\n        }\n        amount = user.currentInvestAmount;\n        amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n    }\n1355-function_definition-241-252", method="getAbortInvestAmount(User memory user)", type_label=function_definition];
1370 [label="241_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n1370-new_variable-242-242", method="getAbortInvestAmount(User memory user)", type_label=new_variable];
1388 [label="242_ require(commissionDays >= 3, \"Invest time must >= 3days\");\n1388-expression_statement-243-243", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1398 [label="243_ uint256 lossRatio = 15;\n1398-new_variable-244-244", method="getAbortInvestAmount(User memory user)", type_label=new_variable];
1404 [label="244_ if_commissionDays >= 60\n1404-if-245-249", method="getAbortInvestAmount(User memory user)", type_label=if];
6278 [label="244_ end_if", method="getAbortInvestAmount(User memory user)", type_label=end_if];
1409 [label="245_ lossRatio = 5;\n1409-expression_statement-246-246", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1413 [label="246_ if_commissionDays >= 30\n1413-if-247-249", method="getAbortInvestAmount(User memory user)", type_label=if];
1418 [label="247_ lossRatio = 10;\n1418-expression_statement-248-248", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1422 [label="249_ amount = user.currentInvestAmount;\n1422-expression_statement-250-250", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1428 [label="250_ amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n1428-expression_statement-251-251", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1449 [label="252_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n1449-function_definition-253-257", method="bug_unchk19()", type_label=function_definition];
1453 [label="253_ address payable addr_unchk19;\n1453-new_variable-254-254", method="bug_unchk19()", type_label=new_variable];
1458 [label="254_ if_!addr_unchk19.send (10 ether) || 1==1\n1458-if-255-256", method="bug_unchk19()", type_label=if];
6332 [label="254_ end_if", method="bug_unchk19()", type_label=end_if];
1474 [label="257_ function getStaticCommissionRatio(uint256 level, uint256 investCycle) private pure returns (uint256 ratio) {\n        if (level == 1) {\n            if (investCycle == 30) {\n                ratio = 7;\n            } else if(investCycle == 60) {\n                ratio = 8;\n            } else {\n                ratio = 9;\n            }\n        } else if (level == 2) {\n            if (investCycle == 30) {\n                ratio = 8;\n            } else if(investCycle == 60) {\n                ratio = 9;\n            } else {\n                ratio = 10;\n            }\n        } else {\n            if (investCycle == 30) {\n                ratio = 11;\n            } else if(investCycle == 60) {\n                ratio = 12;\n            } else {\n                ratio = 13;\n            }\n        }\n    }\n1474-function_definition-258-284", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=function_definition];
1492 [label="258_ if_level == 1\n1492-if-259-283", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6366 [label="258_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1497 [label="259_ if_investCycle == 30\n1497-if-260-266", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6371 [label="259_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1502 [label="260_ ratio = 7;\n1502-expression_statement-261-261", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1506 [label="261_ if_investCycle == 60\n1506-if-262-266", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1511 [label="262_ ratio = 8;\n1511-expression_statement-263-263", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1516 [label="264_ ratio = 9;\n1516-expression_statement-265-265", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1520 [label="266_ if_level == 2\n1520-if-267-283", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1525 [label="267_ if_investCycle == 30\n1525-if-268-274", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6399 [label="267_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1530 [label="268_ ratio = 8;\n1530-expression_statement-269-269", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1534 [label="269_ if_investCycle == 60\n1534-if-270-274", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1539 [label="270_ ratio = 9;\n1539-expression_statement-271-271", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1544 [label="272_ ratio = 10;\n1544-expression_statement-273-273", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1549 [label="275_ if_investCycle == 30\n1549-if-276-282", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6423 [label="275_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1554 [label="276_ ratio = 11;\n1554-expression_statement-277-277", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1558 [label="277_ if_investCycle == 60\n1558-if-278-282", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1563 [label="278_ ratio = 12;\n1563-expression_statement-279-279", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1568 [label="280_ ratio = 13;\n1568-expression_statement-281-281", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1572 [label="284_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n1572-function_definition-285-287", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
1580 [label="285_ callee.send(5 ether);\n1580-expression_statement-286-286", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
1588 [label="287_ function getDynamicCommissionRatio(User memory user, uint256 depth) private pure returns (uint256 ratio) {\n        if (user.currentlevel == 1) {\n            if (depth == 1) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else if (user.currentlevel == 2) {\n            if (depth == 1) {\n                ratio = 70;\n            } else if (depth == 2) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else {\n            if (depth == 1) {\n                ratio = 100;\n            } else if (depth == 2) {\n                ratio = 70;\n            } else if (depth == 3) {\n                ratio = 50;\n            } else if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }\n        }\n    }\n1588-function_definition-288-318", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=function_definition];
1607 [label="288_ if_user.currentlevel == 1\n1607-if-289-317", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6481 [label="288_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1614 [label="289_ if_depth == 1\n1614-if-290-294", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6488 [label="289_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1619 [label="290_ ratio = 50;\n1619-expression_statement-291-291", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1624 [label="292_ ratio = 0;\n1624-expression_statement-293-293", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1628 [label="294_ if_user.currentlevel == 2\n1628-if-295-317", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1635 [label="295_ if_depth == 1\n1635-if-296-302", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6509 [label="295_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1640 [label="296_ ratio = 70;\n1640-expression_statement-297-297", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1644 [label="297_ if_depth == 2\n1644-if-298-302", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1649 [label="298_ ratio = 50;\n1649-expression_statement-299-299", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1654 [label="300_ ratio = 0;\n1654-expression_statement-301-301", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1659 [label="303_ if_depth == 1\n1659-if-304-316", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6533 [label="303_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1664 [label="304_ ratio = 100;\n1664-expression_statement-305-305", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1668 [label="305_ if_depth == 2\n1668-if-306-316", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1673 [label="306_ ratio = 70;\n1673-expression_statement-307-307", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1677 [label="307_ if_depth == 3\n1677-if-308-316", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1682 [label="308_ ratio = 50;\n1682-expression_statement-309-309", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1686 [label="309_ if_depth >= 4 && depth <= 10\n1686-if-310-316", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1695 [label="310_ ratio = 10;\n1695-expression_statement-311-311", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1699 [label="311_ if_depth >= 11 && depth <= 20\n1699-if-312-316", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1708 [label="312_ ratio = 5;\n1708-expression_statement-313-313", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1713 [label="314_ ratio = 1;\n1713-expression_statement-315-315", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1717 [label="318_ bool public payedOut_unchk20 = false;\n1717-new_variable-319-319", method="", type_label=new_variable];
1724 [label="319_ address payable public winner_unchk20;\n1724-new_variable-320-320", method="", type_label=new_variable];
1729 [label="320_ uint public winAmount_unchk20;\n1729-new_variable-321-321", method="", type_label=new_variable];
1734 [label="321_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n1734-function_definition-322-326", method="sendToWinner_unchk20()", type_label=function_definition];
1738 [label="322_ require(!payedOut_unchk20);\n1738-expression_statement-323-323", method="sendToWinner_unchk20()", type_label=expression_statement];
1744 [label="323_ winner_unchk20.send(winAmount_unchk20);\n1744-expression_statement-324-324", method="sendToWinner_unchk20()", type_label=expression_statement];
1751 [label="324_ payedOut_unchk20 = true;\n1751-expression_statement-325-325", method="sendToWinner_unchk20()", type_label=expression_statement];
1756 [label="326_ function getAvaliableStaticCommissionAmount(User memory user) private view returns (uint256 amount) {\n        if (user.currentInvestAmount == 0) {\n            amount = 0;\n        } else {\n            uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n            if (commissionDays > user.currentInvestCycle) {\n                commissionDays = user.currentInvestCycle;\n            }\n            amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n            amount = amount.div(1000);\n            amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n        }\n    }\n1756-function_definition-327-339", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=function_definition];
1771 [label="327_ if_user.currentInvestAmount == 0\n1771-if-328-338", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=if];
6645 [label="327_ end_if", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=end_if];
1778 [label="328_ amount = 0;\n1778-expression_statement-329-329", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1783 [label="330_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n1783-new_variable-331-331", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=new_variable];
1801 [label="331_ if_commissionDays > user.currentInvestCycle\n1801-if-332-334", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=if];
6675 [label="331_ end_if", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=end_if];
1808 [label="332_ commissionDays = user.currentInvestCycle;\n1808-expression_statement-333-333", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1814 [label="334_ amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n1814-expression_statement-335-335", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1832 [label="335_ amount = amount.div(1000);\n1832-expression_statement-336-336", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1841 [label="336_ amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n1841-expression_statement-337-337", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1852 [label="339_ bool public payedOut_unchk32 = false;\n1852-new_variable-340-340", method="", type_label=new_variable];
1859 [label="340_ address payable public winner_unchk32;\n1859-new_variable-341-341", method="", type_label=new_variable];
1864 [label="341_ uint public winAmount_unchk32;\n1864-new_variable-342-342", method="", type_label=new_variable];
1869 [label="342_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n1869-function_definition-343-347", method="sendToWinner_unchk32()", type_label=function_definition];
1873 [label="343_ require(!payedOut_unchk32);\n1873-expression_statement-344-344", method="sendToWinner_unchk32()", type_label=expression_statement];
1879 [label="344_ winner_unchk32.send(winAmount_unchk32);\n1879-expression_statement-345-345", method="sendToWinner_unchk32()", type_label=expression_statement];
1886 [label="345_ payedOut_unchk32 = true;\n1886-expression_statement-346-346", method="sendToWinner_unchk32()", type_label=expression_statement];
1891 [label="347_ function addInvestRecord(address userAddress, uint256 time, uint256 amount, uint256 cycle) private {\n        InvestRecord[9] storage records = investRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            InvestRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = InvestRecord(time, amount, cycle);\n    }\n1891-function_definition-348-355", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=function_definition];
1911 [label="348_ InvestRecord[9] storage records = investRecordMapping[userAddress];\n1911-new_variable-349-349", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=new_variable];
1922 [label="349_ for(i > 0;;--i)\n1922-for-350-353", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=for];
6796 [label="349_ end_loop", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=end_loop];
1933 [label="349_ --i\n1933-expression_statement-350-350", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
1936 [label="350_ InvestRecord memory prevRecord = records[i - 1];\n1936-new_variable-351-351", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=new_variable];
1947 [label="351_ records[i] = prevRecord;\n1947-expression_statement-352-352", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
1953 [label="353_ records[0] = InvestRecord(time, amount, cycle);\n1953-expression_statement-354-354", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
1966 [label="355_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n1966-function_definition-356-358", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
1974 [label="356_ callee.send(5 ether);\n1974-expression_statement-357-357", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
1982 [label="358_ function addStaticCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }\n1982-function_definition-359-366", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=function_definition];
1998 [label="359_ CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n1998-new_variable-360-360", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2009 [label="360_ for(i > 0;;--i)\n2009-for-361-364", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=for];
6883 [label="360_ end_loop", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=end_loop];
2020 [label="360_ --i\n2020-expression_statement-361-361", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2023 [label="361_ CommissionRecord memory prevRecord = records[i - 1];\n2023-new_variable-362-362", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2034 [label="362_ records[i] = prevRecord;\n2034-expression_statement-363-363", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2040 [label="364_ records[0] = CommissionRecord(time, amount);\n2040-expression_statement-365-365", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2051 [label="366_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n2051-function_definition-367-371", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
2067 [label="367_ uint64 subpot_unchk46 = 3 ether;\n2067-new_variable-368-368", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
2074 [label="368_ winner_unchk46.send(subpot_unchk46);\n2074-expression_statement-369-369", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
2081 [label="369_ subpot_unchk46= 0;\n2081-expression_statement-370-370", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
2085 [label="371_ function addDynamicCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }\n2085-function_definition-372-379", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=function_definition];
2101 [label="372_ CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n2101-new_variable-373-373", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2112 [label="373_ for(i > 0;;--i)\n2112-for-374-377", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=for];
6986 [label="373_ end_loop", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=end_loop];
2123 [label="373_ --i\n2123-expression_statement-374-374", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2126 [label="374_ CommissionRecord memory prevRecord = records[i - 1];\n2126-new_variable-375-375", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2137 [label="375_ records[i] = prevRecord;\n2137-expression_statement-376-376", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2143 [label="377_ records[0] = CommissionRecord(time, amount);\n2143-expression_statement-378-378", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2154 [label="379_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n2154-function_definition-380-388", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
2158 [label="380_ address payable addr_unchk4;\n2158-new_variable-381-381", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
2163 [label="381_ if\n2163-if-382-387", method="UncheckedExternalCall_unchk4()", type_label=if];
7037 [label="381_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
2174 [label="388_ function invest(address sponsorAddress, uint256 investCycle) external payable {\n        User storage sponsor = userMapping[sponsorAddress];\n        require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n        require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n        uint256 investAmount = msg.value.div(ONE_ETH);\n        investAmount = investAmount.mul(ONE_ETH);\n        require(investAmount == msg.value, \"Invest amount is not integer\");\n        require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n        User memory user = userMapping[msg.sender];\n        uint256 level = getLevelByInvestAmount(investAmount);\n        if (user.totalInvestCount > 0) {\n            require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n            require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n            require(user.currentInvestTime == 0, \"Invalid state\");\n            require(user.currentInvestCycle == 0, \"Invalid state\");\n            require(user.currentlevel == 0, \"Invalid state\");\n            require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n            require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n            user.totalInvestCount = user.totalInvestCount.add(1);\n            user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n            user.currentInvestTime = now;\n            user.currentInvestAmount = investAmount;\n            user.currentInvestCycle = investCycle;\n            user.currentlevel = level;\n            user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n            userMapping[msg.sender] = user;\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        } else {\n            userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n            addressMapping[totalUserCount] = msg.sender;\n            totalUserCount = totalUserCount.add(1);\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.downlineCount = sponsor.downlineCount.add(1);\n                if (addressWalker == sponsorAddress) {\n                    sponsor.nodeCount = sponsor.nodeCount.add(1);\n                }\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        }\n        addInvestRecord(msg.sender, now, investAmount, investCycle);\n        totalInvestCount = totalInvestCount.add(1);\n        totalInvestAmount = totalInvestAmount.add(investAmount);\n        engineerFunds = engineerFunds.add(investAmount.div(50));\n        operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n    }\n2174-function_definition-389-444", method="invest(address sponsorAddress,uint256 investCycle)", type_label=function_definition];
2187 [label="389_ User storage sponsor = userMapping[sponsorAddress];\n2187-new_variable-390-390", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2196 [label="390_ require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n2196-expression_statement-391-391", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2208 [label="391_ require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n2208-expression_statement-392-392", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2226 [label="392_ uint256 investAmount = msg.value.div(ONE_ETH);\n2226-new_variable-393-393", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2239 [label="393_ investAmount = investAmount.mul(ONE_ETH);\n2239-expression_statement-394-394", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2248 [label="394_ require(investAmount == msg.value, \"Invest amount is not integer\");\n2248-expression_statement-395-395", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2260 [label="395_ require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n2260-expression_statement-396-396", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2284 [label="396_ User memory user = userMapping[msg.sender];\n2284-new_variable-397-397", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2295 [label="397_ uint256 level = getLevelByInvestAmount(investAmount);\n2295-new_variable-398-398", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2304 [label="398_ if_user.totalInvestCount > 0\n2304-if-399-438", method="invest(address sponsorAddress,uint256 investCycle)", type_label=if];
7178 [label="398_ end_if", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_if];
2311 [label="399_ require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n2311-expression_statement-400-400", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2323 [label="400_ require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n2323-expression_statement-401-401", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2335 [label="401_ require(user.currentInvestTime == 0, \"Invalid state\");\n2335-expression_statement-402-402", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2347 [label="402_ require(user.currentInvestCycle == 0, \"Invalid state\");\n2347-expression_statement-403-403", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2359 [label="403_ require(user.currentlevel == 0, \"Invalid state\");\n2359-expression_statement-404-404", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2371 [label="404_ require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n2371-expression_statement-405-405", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2383 [label="405_ require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n2383-expression_statement-406-406", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2395 [label="406_ user.totalInvestCount = user.totalInvestCount.add(1);\n2395-expression_statement-407-407", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2408 [label="407_ user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n2408-expression_statement-408-408", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2421 [label="408_ user.currentInvestTime = now;\n2421-expression_statement-409-409", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2427 [label="409_ user.currentInvestAmount = investAmount;\n2427-expression_statement-410-410", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2433 [label="410_ user.currentInvestCycle = investCycle;\n2433-expression_statement-411-411", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2439 [label="411_ user.currentlevel = level;\n2439-expression_statement-412-412", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2445 [label="412_ user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n2445-expression_statement-413-413", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2456 [label="413_ userMapping[msg.sender] = user;\n2456-expression_statement-414-414", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2464 [label="414_ address addressWalker = sponsorAddress;\n2464-new_variable-415-415", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2470 [label="415_ while\n2470-while-416-420", method="invest(address sponsorAddress,uint256 investCycle)", type_label=while];
7344 [label="415_ end_loop", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_loop];
2475 [label="416_ sponsor = userMapping[addressWalker];\n2475-expression_statement-417-417", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2481 [label="417_ sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n2481-expression_statement-418-418", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2494 [label="418_ addressWalker = sponsor.sponsorAddress;\n2494-expression_statement-419-419", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2501 [label="421_ userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n2501-expression_statement-422-425", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2551 [label="425_ addressMapping[totalUserCount] = msg.sender;\n2551-expression_statement-426-426", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2559 [label="426_ totalUserCount = totalUserCount.add(1);\n2559-expression_statement-427-427", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2568 [label="427_ address addressWalker = sponsorAddress;\n2568-new_variable-428-428", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2574 [label="428_ while\n2574-while-429-437", method="invest(address sponsorAddress,uint256 investCycle)", type_label=while];
7448 [label="428_ end_loop", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_loop];
2579 [label="429_ sponsor = userMapping[addressWalker];\n2579-expression_statement-430-430", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2585 [label="430_ sponsor.downlineCount = sponsor.downlineCount.add(1);\n2585-expression_statement-431-431", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2598 [label="431_ if_addressWalker == sponsorAddress\n2598-if-432-434", method="invest(address sponsorAddress,uint256 investCycle)", type_label=if];
7472 [label="431_ end_if", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_if];
2603 [label="432_ sponsor.nodeCount = sponsor.nodeCount.add(1);\n2603-expression_statement-433-433", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2616 [label="434_ sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n2616-expression_statement-435-435", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2629 [label="435_ addressWalker = sponsor.sponsorAddress;\n2629-expression_statement-436-436", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2635 [label="438_ addInvestRecord(msg.sender, now, investAmount, investCycle);\n2635-expression_statement-439-439", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2648 [label="439_ totalInvestCount = totalInvestCount.add(1);\n2648-expression_statement-440-440", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2657 [label="440_ totalInvestAmount = totalInvestAmount.add(investAmount);\n2657-expression_statement-441-441", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2666 [label="441_ engineerFunds = engineerFunds.add(investAmount.div(50));\n2666-expression_statement-442-442", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2680 [label="442_ operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n2680-expression_statement-443-443", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2699 [label="444_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n2699-function_definition-445-449", method="bug_unchk7()", type_label=function_definition];
2703 [label="445_ address payable addr_unchk7;\n2703-new_variable-446-446", method="bug_unchk7()", type_label=new_variable];
2708 [label="446_ if_!addr_unchk7.send (10 ether) || 1==1\n2708-if-447-448", method="bug_unchk7()", type_label=if];
7582 [label="446_ end_if", method="bug_unchk7()", type_label=end_if];
2724 [label="449_ function userWithdraw() external {\n        User storage user = userMapping[msg.sender];\n        if (user.currentInvestAmount > 0) {\n            uint256 avaliableIA = user.currentInvestAmount;\n            if (!isInvestExpired(user)) {\n                avaliableIA = getAbortInvestAmount(user);\n            }\n            uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n            user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n            user.currentInvestTime = 0;\n            user.currentInvestAmount = 0;\n            user.currentInvestCycle = 0;\n            user.currentlevel = 0;\n            user.currentStaticCommissionRatio = 0;\n            user.currentStaticCommissionWithdrawAmount = 0;\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n            msg.sender.transfer(avaliableIA);\n        }\n    }\n2724-function_definition-450-469", method="userWithdraw()", type_label=function_definition];
2728 [label="450_ User storage user = userMapping[msg.sender];\n2728-new_variable-451-451", method="userWithdraw()", type_label=new_variable];
2739 [label="451_ if_user.currentInvestAmount > 0\n2739-if-452-468", method="userWithdraw()", type_label=if];
7613 [label="451_ end_if", method="userWithdraw()", type_label=end_if];
2746 [label="452_ uint256 avaliableIA = user.currentInvestAmount;\n2746-new_variable-453-453", method="userWithdraw()", type_label=new_variable];
2754 [label="453_ if\n2754-if-454-456", method="userWithdraw()", type_label=if];
7628 [label="453_ end_if", method="userWithdraw()", type_label=end_if];
2761 [label="454_ avaliableIA = getAbortInvestAmount(user);\n2761-expression_statement-455-455", method="userWithdraw()", type_label=expression_statement];
2768 [label="456_ uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n2768-new_variable-457-457", method="userWithdraw()", type_label=new_variable];
2777 [label="457_ user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n2777-expression_statement-458-458", method="userWithdraw()", type_label=expression_statement];
2790 [label="458_ user.currentInvestTime = 0;\n2790-expression_statement-459-459", method="userWithdraw()", type_label=expression_statement];
2796 [label="459_ user.currentInvestAmount = 0;\n2796-expression_statement-460-460", method="userWithdraw()", type_label=expression_statement];
2802 [label="460_ user.currentInvestCycle = 0;\n2802-expression_statement-461-461", method="userWithdraw()", type_label=expression_statement];
2808 [label="461_ user.currentlevel = 0;\n2808-expression_statement-462-462", method="userWithdraw()", type_label=expression_statement];
2814 [label="462_ user.currentStaticCommissionRatio = 0;\n2814-expression_statement-463-463", method="userWithdraw()", type_label=expression_statement];
2820 [label="463_ user.currentStaticCommissionWithdrawAmount = 0;\n2820-expression_statement-464-464", method="userWithdraw()", type_label=expression_statement];
2826 [label="464_ user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n2826-expression_statement-465-465", method="userWithdraw()", type_label=expression_statement];
2839 [label="465_ totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n2839-expression_statement-466-466", method="userWithdraw()", type_label=expression_statement];
2848 [label="466_ msg.sender.transfer(avaliableIA);\n2848-expression_statement-467-467", method="userWithdraw()", type_label=expression_statement];
2857 [label="469_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n2857-function_definition-470-472", method="my_func_unchk23(address payable dst)", type_label=function_definition];
2866 [label="470_ dst.send(msg.value);\n2866-expression_statement-471-471", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
2875 [label="472_ function userWithdrawCommission() external {\n        User storage user = userMapping[msg.sender];\n        uint256 avaliableDCB = user.dynamicCommissionBalance;\n        uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n        uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n        uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n        if (avaliableWithdrawAmount >= ONE_ETH.div(10)) {\n            user.staticCommissionBalance = 0;\n            user.dynamicCommissionBalance = 0;\n            user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n            user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n            totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n            if (avaliableSCB > 0) {\n                addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n            }\n            msg.sender.transfer(avaliableWithdrawAmount);\n        }\n    }\n2875-function_definition-473-494", method="userWithdrawCommission()", type_label=function_definition];
2879 [label="473_ User storage user = userMapping[msg.sender];\n2879-new_variable-474-474", method="userWithdrawCommission()", type_label=new_variable];
2890 [label="474_ uint256 avaliableDCB = user.dynamicCommissionBalance;\n2890-new_variable-475-475", method="userWithdrawCommission()", type_label=new_variable];
2898 [label="475_ uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n2898-new_variable-476-476", method="userWithdrawCommission()", type_label=new_variable];
2907 [label="476_ uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n2907-new_variable-477-477", method="userWithdrawCommission()", type_label=new_variable];
2920 [label="477_ uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n2920-new_variable-478-478", method="userWithdrawCommission()", type_label=new_variable];
2931 [label="478_ if\n2931-if-479-493", method="userWithdrawCommission()", type_label=if];
7805 [label="478_ end_if", method="userWithdrawCommission()", type_label=end_if];
2941 [label="479_ user.staticCommissionBalance = 0;\n2941-expression_statement-480-480", method="userWithdrawCommission()", type_label=expression_statement];
2947 [label="480_ user.dynamicCommissionBalance = 0;\n2947-expression_statement-481-481", method="userWithdrawCommission()", type_label=expression_statement];
2953 [label="481_ user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n2953-expression_statement-482-482", method="userWithdrawCommission()", type_label=expression_statement];
2966 [label="482_ user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n2966-expression_statement-483-483", method="userWithdrawCommission()", type_label=expression_statement];
2979 [label="483_ user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n2979-expression_statement-484-484", method="userWithdrawCommission()", type_label=expression_statement];
2992 [label="484_ user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n2992-expression_statement-485-485", method="userWithdrawCommission()", type_label=expression_statement];
3005 [label="485_ totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n3005-expression_statement-486-486", method="userWithdrawCommission()", type_label=expression_statement];
3014 [label="486_ totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n3014-expression_statement-487-487", method="userWithdrawCommission()", type_label=expression_statement];
3023 [label="487_ totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n3023-expression_statement-488-488", method="userWithdrawCommission()", type_label=expression_statement];
3032 [label="488_ if_avaliableSCB > 0\n3032-if-489-491", method="userWithdrawCommission()", type_label=if];
7906 [label="488_ end_if", method="userWithdrawCommission()", type_label=end_if];
3037 [label="489_ addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n3037-expression_statement-490-490", method="userWithdrawCommission()", type_label=expression_statement];
3048 [label="491_ msg.sender.transfer(avaliableWithdrawAmount);\n3048-expression_statement-492-492", method="userWithdrawCommission()", type_label=expression_statement];
3057 [label="494_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n3057-function_definition-495-497", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
3065 [label="495_ callee.send(5 ether);\n3065-expression_statement-496-496", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
3073 [label="497_ function engineerWithdraw() external onlyEngineer {\n        uint256 avaliableAmount = engineerFunds;\n        if (avaliableAmount > 0) {\n            engineerFunds = 0;\n            engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }\n3073-function_definition-498-505", method="engineerWithdraw()", type_label=function_definition];
3076 [label="497_ onlyEngineer\n3076-expression_statement-498-498", method="engineerWithdraw()", type_label=expression_statement];
3079 [label="498_ uint256 avaliableAmount = engineerFunds;\n3079-new_variable-499-499", method="engineerWithdraw()", type_label=new_variable];
3085 [label="499_ if_avaliableAmount > 0\n3085-if-500-504", method="engineerWithdraw()", type_label=if];
7959 [label="499_ end_if", method="engineerWithdraw()", type_label=end_if];
3090 [label="500_ engineerFunds = 0;\n3090-expression_statement-501-501", method="engineerWithdraw()", type_label=expression_statement];
3094 [label="501_ engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n3094-expression_statement-502-502", method="engineerWithdraw()", type_label=expression_statement];
3103 [label="502_ msg.sender.transfer(avaliableAmount);\n3103-expression_statement-503-503", method="engineerWithdraw()", type_label=expression_statement];
3112 [label="505_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n3112-function_definition-506-513", method="bug_unchk30()", type_label=function_definition];
3116 [label="506_ uint receivers_unchk30;\n3116-new_variable-507-507", method="bug_unchk30()", type_label=new_variable];
3121 [label="507_ address payable addr_unchk30;\n3121-new_variable-508-508", method="bug_unchk30()", type_label=new_variable];
3126 [label="508_ if\n3126-if-509-512", method="bug_unchk30()", type_label=if];
8000 [label="508_ end_if", method="bug_unchk30()", type_label=end_if];
3136 [label="509_ receivers_unchk30 +=1;\n3136-expression_statement-510-510", method="bug_unchk30()", type_label=expression_statement];
3143 [label="513_ function operatorWithdraw() external onlyOwner {\n        uint256 avaliableAmount = operatorFunds;\n        if (avaliableAmount > 0) {\n            operatorFunds = 0;\n            operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }\n3143-function_definition-514-521", method="operatorWithdraw()", type_label=function_definition];
3146 [label="513_ onlyOwner\n3146-expression_statement-514-514", method="operatorWithdraw()", type_label=expression_statement];
3149 [label="514_ uint256 avaliableAmount = operatorFunds;\n3149-new_variable-515-515", method="operatorWithdraw()", type_label=new_variable];
3155 [label="515_ if_avaliableAmount > 0\n3155-if-516-520", method="operatorWithdraw()", type_label=if];
8029 [label="515_ end_if", method="operatorWithdraw()", type_label=end_if];
3160 [label="516_ operatorFunds = 0;\n3160-expression_statement-517-517", method="operatorWithdraw()", type_label=expression_statement];
3164 [label="517_ operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n3164-expression_statement-518-518", method="operatorWithdraw()", type_label=expression_statement];
3173 [label="518_ msg.sender.transfer(avaliableAmount);\n3173-expression_statement-519-519", method="operatorWithdraw()", type_label=expression_statement];
3182 [label="521_ bool public payedOut_unchk8 = false;\n3182-new_variable-522-522", method="", type_label=new_variable];
3189 [label="522_ address payable public winner_unchk8;\n3189-new_variable-523-523", method="", type_label=new_variable];
3194 [label="523_ uint public winAmount_unchk8;\n3194-new_variable-524-524", method="", type_label=new_variable];
3199 [label="524_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n3199-function_definition-525-529", method="sendToWinner_unchk8()", type_label=function_definition];
3203 [label="525_ require(!payedOut_unchk8);\n3203-expression_statement-526-526", method="sendToWinner_unchk8()", type_label=expression_statement];
3209 [label="526_ winner_unchk8.send(winAmount_unchk8);\n3209-expression_statement-527-527", method="sendToWinner_unchk8()", type_label=expression_statement];
3216 [label="527_ payedOut_unchk8 = true;\n3216-expression_statement-528-528", method="sendToWinner_unchk8()", type_label=expression_statement];
3221 [label="529_ function getSummary() public view returns (uint256[11] memory) {\n        return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n    }\n3221-function_definition-530-538", method="getSummary()", type_label=function_definition];
3232 [label="530_ return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n3232-return-531-537", method="getSummary()", type_label=return];
3250 [label="538_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n3250-function_definition-539-540", method="bug_unchk39(address payable addr)", type_label=function_definition];
3258 [label="539_ addr.send (4 ether);\n3258-expression_statement-540-540", method="bug_unchk39(address payable addr)", type_label=expression_statement];
3266 [label="540_ function getUserByAddress(address userAddress) public view returns(uint256[16] memory,\n                                                                       address) {\n        User memory user = userMapping[userAddress];\n        return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n    }\n3266-function_definition-541-557", method="getUserByAddress(address userAddress)", type_label=function_definition];
3284 [label="542_ User memory user = userMapping[userAddress];\n3284-new_variable-543-543", method="getUserByAddress(address userAddress)", type_label=new_variable];
3293 [label="543_ return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n3293-return-544-556", method="getUserByAddress(address userAddress)", type_label=return];
3355 [label="557_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n3355-function_definition-558-560", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
3364 [label="558_ dst.call.value(msg.value)(\"\");\n3364-expression_statement-559-559", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
3379 [label="560_ function getUserByIndex(uint256 index) external view onlyOwner returns(uint256[16] memory,\n                                                                           address) {\n        return getUserByAddress(addressMapping[index]);\n    }\n3379-function_definition-561-564", method="getUserByIndex(uint256 index)", type_label=function_definition];
3387 [label="560_ onlyOwner\n3387-expression_statement-561-561", method="getUserByIndex(uint256 index)", type_label=expression_statement];
3399 [label="562_ return getUserByAddress(addressMapping[index]);\n3399-return-563-563", method="getUserByIndex(uint256 index)", type_label=return];
3406 [label="564_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n3406-function_definition-565-567", method="my_func_unchk35(address payable dst)", type_label=function_definition];
3415 [label="565_ dst.send(msg.value);\n3415-expression_statement-566-566", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
3424 [label="567_ function getInvestRecords(address userAddress) external view returns(uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory) {\n        InvestRecord[9] memory records = investRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n    }\n3424-function_definition-568-587", method="getInvestRecords(address userAddress)", type_label=function_definition];
3479 [label="576_ InvestRecord[9] memory records = investRecordMapping[userAddress];\n3479-new_variable-577-577", method="getInvestRecords(address userAddress)", type_label=new_variable];
3490 [label="577_ return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n3490-return-578-586", method="getInvestRecords(address userAddress)", type_label=return];
3636 [label="587_ bool public payedOut_unchk44 = false;\n3636-new_variable-588-588", method="", type_label=new_variable];
3643 [label="588_ address payable public winner_unchk44;\n3643-new_variable-589-589", method="", type_label=new_variable];
3648 [label="589_ uint public winAmount_unchk44;\n3648-new_variable-590-590", method="", type_label=new_variable];
3653 [label="590_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n3653-function_definition-591-595", method="sendToWinner_unchk44()", type_label=function_definition];
3657 [label="591_ require(!payedOut_unchk44);\n3657-expression_statement-592-592", method="sendToWinner_unchk44()", type_label=expression_statement];
3663 [label="592_ winner_unchk44.send(winAmount_unchk44);\n3663-expression_statement-593-593", method="sendToWinner_unchk44()", type_label=expression_statement];
3670 [label="593_ payedOut_unchk44 = true;\n3670-expression_statement-594-594", method="sendToWinner_unchk44()", type_label=expression_statement];
3675 [label="595_ function getStaticCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory) {\n        CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }\n3675-function_definition-596-615", method="getStaticCommissionRecords(address userAddress)", type_label=function_definition];
3730 [label="604_ CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n3730-new_variable-605-605", method="getStaticCommissionRecords(address userAddress)", type_label=new_variable];
3741 [label="605_ return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n3741-return-606-614", method="getStaticCommissionRecords(address userAddress)", type_label=return];
3842 [label="615_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n3842-function_definition-616-624", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
3846 [label="616_ address payable addr_unchk40;\n3846-new_variable-617-617", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
3851 [label="617_ if\n3851-if-618-623", method="UncheckedExternalCall_unchk40()", type_label=if];
8725 [label="617_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
3862 [label="624_ function getDynamicCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory) {\n        CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }\n3862-function_definition-625-644", method="getDynamicCommissionRecords(address userAddress)", type_label=function_definition];
3917 [label="633_ CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n3917-new_variable-634-634", method="getDynamicCommissionRecords(address userAddress)", type_label=new_variable];
3928 [label="634_ return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n3928-return-635-643", method="getDynamicCommissionRecords(address userAddress)", type_label=return];
4029 [label="644_ bool public payedOut_unchk33 = false;\n4029-new_variable-645-645", method="", type_label=new_variable];
4036 [label="645_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n4036-function_definition-646-649", method="withdrawLeftOver_unchk33()", type_label=function_definition];
4040 [label="646_ require(payedOut_unchk33);\n4040-expression_statement-647-647", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
4045 [label="647_ msg.sender.send(address(this).balance);\n4045-expression_statement-648-648", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
4058 [label="649_ function calcDynamicCommission() external onlyOwner {\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }\n4058-function_definition-650-697", method="calcDynamicCommission()", type_label=function_definition];
4061 [label="649_ onlyOwner\n4061-expression_statement-650-650", method="calcDynamicCommission()", type_label=expression_statement];
4064 [label="650_ for(i < totalUserCount;;++i)\n4064-for-651-654", method="calcDynamicCommission()", type_label=for];
8938 [label="650_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4075 [label="650_ ++i\n4075-expression_statement-651-651", method="calcDynamicCommission()", type_label=expression_statement];
4078 [label="651_ User storage user = userMapping[addressMapping[i]];\n4078-new_variable-652-652", method="calcDynamicCommission()", type_label=new_variable];
4089 [label="652_ user.calcDynamicCommissionAmount = 0;\n4089-expression_statement-653-653", method="calcDynamicCommission()", type_label=expression_statement];
4095 [label="654_ for(i < totalUserCount;;++i)\n4095-for-655-688", method="calcDynamicCommission()", type_label=for];
8969 [label="654_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4106 [label="654_ ++i\n4106-expression_statement-655-655", method="calcDynamicCommission()", type_label=expression_statement];
4109 [label="655_ User memory user = userMapping[addressMapping[i]];\n4109-new_variable-656-656", method="calcDynamicCommission()", type_label=new_variable];
4120 [label="656_ if_user.currentInvestAmount > 0\n4120-if-657-687", method="calcDynamicCommission()", type_label=if];
8994 [label="656_ end_if", method="calcDynamicCommission()", type_label=end_if];
4127 [label="657_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n4127-new_variable-658-658", method="calcDynamicCommission()", type_label=new_variable];
4145 [label="658_ if_commissionDays >= 1 && commissionDays <= user.currentInvestCycle\n4145-if-659-686", method="calcDynamicCommission()", type_label=if];
9019 [label="658_ end_if", method="calcDynamicCommission()", type_label=end_if];
4156 [label="659_ uint256 depth = 1;\n4156-new_variable-660-660", method="calcDynamicCommission()", type_label=new_variable];
4162 [label="660_ address addressWalker = user.sponsorAddress;\n4162-new_variable-661-661", method="calcDynamicCommission()", type_label=new_variable];
4170 [label="661_ while\n4170-while-662-685", method="calcDynamicCommission()", type_label=while];
9044 [label="661_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4175 [label="662_ User storage sponsor = userMapping[addressWalker];\n4175-new_variable-663-663", method="calcDynamicCommission()", type_label=new_variable];
4184 [label="663_ if_sponsor.currentInvestAmount > 0\n4184-if-664-682", method="calcDynamicCommission()", type_label=if];
9058 [label="663_ end_if", method="calcDynamicCommission()", type_label=end_if];
4191 [label="664_ uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n4191-new_variable-665-665", method="calcDynamicCommission()", type_label=new_variable];
4202 [label="665_ if_dynamicCommissionRatio > 0\n4202-if-666-681", method="calcDynamicCommission()", type_label=if];
9076 [label="665_ end_if", method="calcDynamicCommission()", type_label=end_if];
4207 [label="666_ uint256 dynamicCA = sponsor.currentInvestAmount;\n4207-new_variable-667-667", method="calcDynamicCommission()", type_label=new_variable];
4215 [label="667_ if_dynamicCA > user.currentInvestAmount\n4215-if-668-670", method="calcDynamicCommission()", type_label=if];
9089 [label="667_ end_if", method="calcDynamicCommission()", type_label=end_if];
4222 [label="668_ dynamicCA = user.currentInvestAmount;\n4222-expression_statement-669-669", method="calcDynamicCommission()", type_label=expression_statement];
4228 [label="670_ dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n4228-expression_statement-671-671", method="calcDynamicCommission()", type_label=expression_statement];
4239 [label="671_ dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n4239-expression_statement-672-672", method="calcDynamicCommission()", type_label=expression_statement];
4248 [label="672_ if_sponsor.currentlevel == 1\n4248-if-673-679", method="calcDynamicCommission()", type_label=if];
9122 [label="672_ end_if", method="calcDynamicCommission()", type_label=end_if];
4255 [label="673_ dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n4255-expression_statement-674-674", method="calcDynamicCommission()", type_label=expression_statement];
4273 [label="674_ if_sponsor.currentlevel == 2\n4273-if-675-679", method="calcDynamicCommission()", type_label=if];
4280 [label="675_ dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n4280-expression_statement-676-676", method="calcDynamicCommission()", type_label=expression_statement];
4299 [label="677_ dynamicCA = dynamicCA.div(1000 * 100);\n4299-expression_statement-678-678", method="calcDynamicCommission()", type_label=expression_statement];
4310 [label="679_ sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n4310-expression_statement-680-680", method="calcDynamicCommission()", type_label=expression_statement];
4323 [label="682_ addressWalker = sponsor.sponsorAddress;\n4323-expression_statement-683-683", method="calcDynamicCommission()", type_label=expression_statement];
4329 [label="683_ depth = depth.add(1);\n4329-expression_statement-684-684", method="calcDynamicCommission()", type_label=expression_statement];
4338 [label="688_ for(i < totalUserCount;;++i)\n4338-for-689-696", method="calcDynamicCommission()", type_label=for];
9212 [label="688_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4349 [label="688_ ++i\n4349-expression_statement-689-689", method="calcDynamicCommission()", type_label=expression_statement];
4352 [label="689_ address userAddress = addressMapping[i];\n4352-new_variable-690-690", method="calcDynamicCommission()", type_label=new_variable];
4360 [label="690_ User storage user = userMapping[userAddress];\n4360-new_variable-691-691", method="calcDynamicCommission()", type_label=new_variable];
4369 [label="691_ if_user.calcDynamicCommissionAmount > 0\n4369-if-692-695", method="calcDynamicCommission()", type_label=if];
9243 [label="691_ end_if", method="calcDynamicCommission()", type_label=end_if];
4376 [label="692_ user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n4376-expression_statement-693-693", method="calcDynamicCommission()", type_label=expression_statement];
4391 [label="693_ addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n4391-expression_statement-694-694", method="calcDynamicCommission()", type_label=expression_statement];
4402 [label="697_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n4402-function_definition-698-699", method="bug_unchk27(address payable addr)", type_label=function_definition];
4410 [label="698_ addr.send (42 ether);\n4410-expression_statement-699-699", method="bug_unchk27(address payable addr)", type_label=expression_statement];
4418 [label="699_ function calcDynamicCommissionBegin(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n    }\n4418-function_definition-700-705", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=function_definition];
4429 [label="699_ onlyOwner\n4429-expression_statement-700-700", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4432 [label="700_ for(i < (index + length);;++i)\n4432-for-701-704", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=for];
9306 [label="700_ end_loop", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=end_loop];
4446 [label="700_ ++i\n4446-expression_statement-701-701", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4449 [label="701_ User storage user = userMapping[addressMapping[i]];\n4449-new_variable-702-702", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=new_variable];
4460 [label="702_ user.calcDynamicCommissionAmount = 0;\n4460-expression_statement-703-703", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4466 [label="705_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n4466-function_definition-706-710", method="bug_unchk31()", type_label=function_definition];
4470 [label="706_ address payable addr_unchk31;\n4470-new_variable-707-707", method="bug_unchk31()", type_label=new_variable];
4475 [label="707_ if_!addr_unchk31.send (10 ether) || 1==1\n4475-if-708-709", method="bug_unchk31()", type_label=if];
9349 [label="707_ end_if", method="bug_unchk31()", type_label=end_if];
4491 [label="710_ function calcDynamicCommissionRange(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n    }\n4491-function_definition-711-746", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=function_definition];
4502 [label="710_ onlyOwner\n4502-expression_statement-711-711", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4505 [label="711_ for(i < (index + length);;++i)\n4505-for-712-745", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=for];
9379 [label="711_ end_loop", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_loop];
4519 [label="711_ ++i\n4519-expression_statement-712-712", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4522 [label="712_ User memory user = userMapping[addressMapping[i]];\n4522-new_variable-713-713", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4533 [label="713_ if_user.currentInvestAmount > 0\n4533-if-714-744", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9407 [label="713_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4540 [label="714_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n4540-new_variable-715-715", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4558 [label="715_ if_commissionDays >= 1 && commissionDays <= user.currentInvestCycle\n4558-if-716-743", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9432 [label="715_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4569 [label="716_ uint256 depth = 1;\n4569-new_variable-717-717", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4575 [label="717_ address addressWalker = user.sponsorAddress;\n4575-new_variable-718-718", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4583 [label="718_ while\n4583-while-719-742", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=while];
9457 [label="718_ end_loop", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_loop];
4588 [label="719_ User storage sponsor = userMapping[addressWalker];\n4588-new_variable-720-720", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4597 [label="720_ if_sponsor.currentInvestAmount > 0\n4597-if-721-739", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9471 [label="720_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4604 [label="721_ uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n4604-new_variable-722-722", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4615 [label="722_ if_dynamicCommissionRatio > 0\n4615-if-723-738", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9489 [label="722_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4620 [label="723_ uint256 dynamicCA = sponsor.currentInvestAmount;\n4620-new_variable-724-724", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4628 [label="724_ if_dynamicCA > user.currentInvestAmount\n4628-if-725-727", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9502 [label="724_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4635 [label="725_ dynamicCA = user.currentInvestAmount;\n4635-expression_statement-726-726", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4641 [label="727_ dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n4641-expression_statement-728-728", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4652 [label="728_ dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n4652-expression_statement-729-729", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4661 [label="729_ if_sponsor.currentlevel == 1\n4661-if-730-736", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9535 [label="729_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4668 [label="730_ dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n4668-expression_statement-731-731", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4686 [label="731_ if_sponsor.currentlevel == 2\n4686-if-732-736", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
4693 [label="732_ dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n4693-expression_statement-733-733", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4712 [label="734_ dynamicCA = dynamicCA.div(1000 * 100);\n4712-expression_statement-735-735", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4723 [label="736_ sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n4723-expression_statement-737-737", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4736 [label="739_ addressWalker = sponsor.sponsorAddress;\n4736-expression_statement-740-740", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4742 [label="740_ depth = depth.add(1);\n4742-expression_statement-741-741", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4751 [label="746_ bool public payedOut_unchk45 = false;\n4751-new_variable-747-747", method="", type_label=new_variable];
4758 [label="747_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n4758-function_definition-748-751", method="withdrawLeftOver_unchk45()", type_label=function_definition];
4762 [label="748_ require(payedOut_unchk45);\n4762-expression_statement-749-749", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
4767 [label="749_ msg.sender.send(address(this).balance);\n4767-expression_statement-750-750", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
4780 [label="751_ function calcDynamicCommissionEnd(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }\n4780-function_definition-752-761", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=function_definition];
4791 [label="751_ onlyOwner\n4791-expression_statement-752-752", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
4794 [label="752_ for(i < (index + length);;++i)\n4794-for-753-760", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=for];
9668 [label="752_ end_loop", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=end_loop];
4808 [label="752_ ++i\n4808-expression_statement-753-753", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
4811 [label="753_ address userAddress = addressMapping[i];\n4811-new_variable-754-754", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=new_variable];
4819 [label="754_ User storage user = userMapping[userAddress];\n4819-new_variable-755-755", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=new_variable];
4828 [label="755_ if_user.calcDynamicCommissionAmount > 0\n4828-if-756-759", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=if];
9702 [label="755_ end_if", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=end_if];
4835 [label="756_ user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n4835-expression_statement-757-757", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
4850 [label="757_ addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n4850-expression_statement-758-758", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
4861 [label="761_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n4861-function_definition-762-764", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
4869 [label="762_ callee.call.value(1 ether);\n4869-expression_statement-763-763", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
430;
494;
521;
623;
934;
2173;
3141;
3861;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
77 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
117 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 139  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
134 -> 5008  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5008 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 5008  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
139 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
163 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
190 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
230 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
257 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
303 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 425  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5289 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 5289  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
439 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 489  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5353 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 5353  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
502 -> 506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
506 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
608 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
741 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
878 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 929  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5793 -> 936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 5793  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
943 -> 951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 5852  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1004 -> 1013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 1051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1051 -> 1057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1057 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1131 -> 1139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1152 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1169 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1183 -> 1193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1193 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1209 -> 1217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1225 -> 1239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1239 -> 1249  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1239 -> 1253  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6113 -> 1272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1249 -> 6113  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1253 -> 1263  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1253 -> 1268  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1263 -> 6113  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1268 -> 6113  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1279 -> 1283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1337 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1355 -> 1370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1370 -> 1388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1388 -> 1398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1398 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1409  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1404 -> 1413  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6278 -> 1422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1409 -> 6278  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1413 -> 1418  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1413 -> 6278  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1418 -> 6278  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1422 -> 1428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1449 -> 1453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1453 -> 1458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1458 -> 6332  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1474 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1497  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1492 -> 1520  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1497 -> 1502  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1497 -> 1506  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6371 -> 1520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1502 -> 6371  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1506 -> 1511  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1506 -> 1516  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1511 -> 6371  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1516 -> 6371  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1520 -> 1525  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1520 -> 1549  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1525 -> 6366  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1525 -> 1530  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1525 -> 1534  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6399 -> 1549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1530 -> 6399  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1534 -> 1539  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1534 -> 1544  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1539 -> 6399  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1544 -> 6399  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1549 -> 6366  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1549 -> 1554  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1549 -> 1558  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6423 -> 1572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1554 -> 6423  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1558 -> 1563  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1558 -> 1568  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1563 -> 6423  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1568 -> 6423  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1572 -> 1580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 1614  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1607 -> 1628  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1614 -> 1619  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1614 -> 1624  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6488 -> 1628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1619 -> 6488  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1624 -> 6488  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1628 -> 1635  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1628 -> 1659  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1635 -> 6481  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1635 -> 1640  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1635 -> 1644  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6509 -> 1659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 6509  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1644 -> 1649  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1644 -> 1654  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1649 -> 6509  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1654 -> 6509  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1659 -> 6481  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1659 -> 1664  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1659 -> 1668  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6533 -> 1717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1664 -> 6533  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1668 -> 1673  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1668 -> 1677  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1673 -> 6533  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1677 -> 1682  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1677 -> 1686  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1682 -> 6533  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1686 -> 1695  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1686 -> 1699  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1695 -> 6533  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1699 -> 1708  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1699 -> 1713  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1708 -> 6533  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1713 -> 6533  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1717 -> 1724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1724 -> 1729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1734 -> 1738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1738 -> 1744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1744 -> 1751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1756 -> 1771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1771 -> 1778  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1771 -> 1783  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6645 -> 1852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1778 -> 6645  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1783 -> 1801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1801 -> 1808  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1801 -> 6675  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6675 -> 1814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1808 -> 6675  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1814 -> 1832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1832 -> 1841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1841 -> 6645  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1852 -> 1859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1859 -> 1864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1869 -> 1873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1873 -> 1879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1879 -> 1886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1891 -> 1911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1911 -> 1922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1922 -> 1936  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1922 -> 6796  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6796 -> 1953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1933 -> 1922  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1936 -> 1947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1947 -> 1933  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1966 -> 1974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1982 -> 1998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1998 -> 2009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2009 -> 2023  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2009 -> 6883  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6883 -> 2040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2020 -> 2009  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2023 -> 2034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2034 -> 2020  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2051 -> 2067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2067 -> 2074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2074 -> 2081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2085 -> 2101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2101 -> 2112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2112 -> 2126  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2112 -> 6986  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6986 -> 2143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2123 -> 2112  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2126 -> 2137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2137 -> 2123  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2154 -> 2158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2158 -> 2163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2174 -> 2187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2187 -> 2196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2196 -> 2208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2208 -> 2226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2226 -> 2239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2239 -> 2248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2248 -> 2260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2260 -> 2284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2284 -> 2295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2295 -> 2304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2304 -> 2311  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2304 -> 2501  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2311 -> 2323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2323 -> 2335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2335 -> 2347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2347 -> 2359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2359 -> 2371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2371 -> 2383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2383 -> 2395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2395 -> 2408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2408 -> 2421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2421 -> 2427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2427 -> 2433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2433 -> 2439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2439 -> 2445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2445 -> 2456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2456 -> 2464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2464 -> 2470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2470 -> 2475  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2470 -> 7344  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7344 -> 2501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2475 -> 2481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2481 -> 2494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2494 -> 2470  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2501 -> 2551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2551 -> 2559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2559 -> 2568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2568 -> 2574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2574 -> 7178  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2574 -> 2579  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2574 -> 7448  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7448 -> 2635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2579 -> 2585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2585 -> 2598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2598 -> 2603  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2598 -> 7472  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7472 -> 2616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2603 -> 7472  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2616 -> 2629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2629 -> 2574  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2635 -> 2648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2648 -> 2657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2657 -> 2666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2666 -> 2680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2699 -> 2703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2703 -> 2708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2708 -> 7582  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2724 -> 2728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2728 -> 2739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2739 -> 2746  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2739 -> 7613  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7613 -> 2857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2746 -> 2754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2754 -> 2761  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2754 -> 7628  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7628 -> 2768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2761 -> 7628  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2768 -> 2777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2777 -> 2790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2790 -> 2796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2796 -> 2802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2802 -> 2808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2808 -> 2814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2814 -> 2820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2820 -> 2826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2826 -> 2839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2839 -> 2848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2848 -> 7613  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2857 -> 2866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2875 -> 2879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2879 -> 2890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2890 -> 2898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2898 -> 2907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2907 -> 2920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2920 -> 2931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2931 -> 2941  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2931 -> 7805  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7805 -> 3057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2941 -> 2947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2947 -> 2953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2953 -> 2966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2966 -> 2979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2979 -> 2992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2992 -> 3005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3005 -> 3014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3014 -> 3023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3023 -> 3032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3032 -> 3037  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3032 -> 7906  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7906 -> 3048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3037 -> 7906  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3048 -> 7805  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3057 -> 3065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3073 -> 3079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3079 -> 3085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3085 -> 3090  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3085 -> 7959  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7959 -> 3112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3090 -> 3094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3094 -> 3103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3103 -> 7959  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3112 -> 3116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3116 -> 3121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3121 -> 3126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3126 -> 3136  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
8000 -> 3143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3136 -> 8000  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3143 -> 3149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3149 -> 3155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3155 -> 3160  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3155 -> 8029  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8029 -> 3182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3160 -> 3164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3164 -> 3173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3173 -> 8029  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3182 -> 3189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3189 -> 3194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3199 -> 3203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3203 -> 3209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3209 -> 3216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3221 -> 3232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3232 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3250 -> 3258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3266 -> 3284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3284 -> 3293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3293 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3355 -> 3364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3379 -> 3399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3399 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3406 -> 3415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3424 -> 3479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3479 -> 3490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3490 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3636 -> 3643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3643 -> 3648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3653 -> 3657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3657 -> 3663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3663 -> 3670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3675 -> 3730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3730 -> 3741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3741 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3842 -> 3846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3846 -> 3851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3862 -> 3917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3917 -> 3928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3928 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4036 -> 4040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4040 -> 4045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4058 -> 4064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4064 -> 4078  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4064 -> 8938  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8938 -> 4095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4075 -> 4064  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4078 -> 4089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4089 -> 4075  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4095 -> 4109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4095 -> 8969  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8969 -> 4338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4106 -> 4095  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4109 -> 4120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4120 -> 4127  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4120 -> 8994  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8994 -> 4106  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4127 -> 4145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4145 -> 4156  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4145 -> 9019  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4156 -> 4162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4162 -> 4170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4170 -> 4175  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4170 -> 9044  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9044 -> 4106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4175 -> 4184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4184 -> 4191  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4184 -> 9058  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4191 -> 4202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4202 -> 4207  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4202 -> 9076  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9076 -> 4323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4207 -> 4215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4215 -> 4222  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4215 -> 9089  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9089 -> 4228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4222 -> 9089  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4228 -> 4239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4239 -> 4248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4248 -> 4255  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4248 -> 4273  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9122 -> 4310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4255 -> 9122  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4273 -> 4280  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4273 -> 4299  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4280 -> 9122  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4299 -> 9122  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4310 -> 9076  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4323 -> 4329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4329 -> 4170  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4338 -> 4352  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4338 -> 9212  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9212 -> 4402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4349 -> 4338  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4352 -> 4360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4360 -> 4369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4369 -> 4376  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4369 -> 9243  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9243 -> 4349  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
9243 -> 4349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
4376 -> 4391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4391 -> 9243  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4402 -> 4410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4418 -> 4432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4432 -> 4449  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4432 -> 9306  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9306 -> 4466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4446 -> 4432  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4449 -> 4460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4460 -> 4446  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4466 -> 4470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4470 -> 4475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4475 -> 9349  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4491 -> 4505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4505 -> 4522  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4505 -> 9379  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9379 -> 4751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4519 -> 4505  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4522 -> 4533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4533 -> 4540  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4533 -> 9407  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9407 -> 4519  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4540 -> 4558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4558 -> 4569  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4558 -> 9432  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4569 -> 4575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4575 -> 4583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4583 -> 4588  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4583 -> 9457  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9457 -> 4519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4588 -> 4597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4597 -> 4604  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4597 -> 9471  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4604 -> 4615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4615 -> 4620  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4615 -> 9489  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9489 -> 4736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4620 -> 4628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4628 -> 4635  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4628 -> 9502  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9502 -> 4641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4635 -> 9502  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4641 -> 4652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4652 -> 4661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4661 -> 4668  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4661 -> 4686  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9535 -> 4723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4668 -> 9535  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4686 -> 4693  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4686 -> 4712  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4693 -> 9535  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4712 -> 9535  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4723 -> 9489  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4736 -> 4742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4742 -> 4583  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4758 -> 4762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4762 -> 4767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4780 -> 4794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4794 -> 4811  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4794 -> 9668  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9668 -> 4861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4808 -> 4794  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4811 -> 4819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4819 -> 4828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4828 -> 4835  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4828 -> 9702  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9702 -> 4808  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
9702 -> 4808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
4835 -> 4850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4850 -> 9702  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4861 -> 4869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 5289  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
494 -> 5353  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
521 -> 5385  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
623 -> 5487  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
934 -> 5793  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2173 -> 7037  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3141 -> 8000  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3861 -> 8725  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
