digraph  {
13 [label="2_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n13-function_definition-3-5", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
21 [label="3_ callee.send(5 ether);\n21-expression_statement-4-4", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
29 [label="5_ address payable public owner;\n29-new_variable-6-6", method="", type_label=new_variable];
34 [label="6_ struct GameInfo {\n    uint256 timestamp;\n    uint32 odd_homeTeam;\n    uint32 odd_drawTeam; \n    uint32 odd_awayTeam;\n    uint32 odd_over;\n    uint32 odd_under;\n    uint32 odd_homeTeamAndDraw;\n    uint32 odd_homeAndAwayTeam;\n    uint32 odd_awayTeamAndDraw;\n    uint8  open_status;\n    bool   isDone;\n  }\n34-expression_statement-7-19", method="GameInfo()", type_label=expression_statement];
80 [label="19_ bool public payedOut_unchk20 = false;\n80-new_variable-20-20", method="", type_label=new_variable];
87 [label="20_ address payable public winner_unchk20;\n87-new_variable-21-21", method="", type_label=new_variable];
92 [label="21_ uint public winAmount_unchk20;\n92-new_variable-22-22", method="", type_label=new_variable];
97 [label="22_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n97-function_definition-23-27", method="sendToWinner_unchk20()", type_label=function_definition];
101 [label="23_ require(!payedOut_unchk20);\n101-expression_statement-24-24", method="sendToWinner_unchk20()", type_label=expression_statement];
107 [label="24_ winner_unchk20.send(winAmount_unchk20);\n107-expression_statement-25-25", method="sendToWinner_unchk20()", type_label=expression_statement];
114 [label="25_ payedOut_unchk20 = true;\n114-expression_statement-26-26", method="sendToWinner_unchk20()", type_label=expression_statement];
119 [label="27_ mapping(uint64 => GameInfo) public gameList;\n119-new_variable-28-28", method="", type_label=new_variable];
127 [label="28_ struct BetFixture {\n    address payable player;\n    uint256 stake;\n    uint32  odd;\n    uint16  selectedTeam;\n  }\n127-expression_statement-29-34", method="BetFixture()", type_label=expression_statement];
145 [label="34_ bool public payedOut_unchk32 = false;\n145-new_variable-35-35", method="", type_label=new_variable];
152 [label="35_ address payable public winner_unchk32;\n152-new_variable-36-36", method="", type_label=new_variable];
157 [label="36_ uint public winAmount_unchk32;\n157-new_variable-37-37", method="", type_label=new_variable];
162 [label="37_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n162-function_definition-38-42", method="sendToWinner_unchk32()", type_label=function_definition];
166 [label="38_ require(!payedOut_unchk32);\n166-expression_statement-39-39", method="sendToWinner_unchk32()", type_label=expression_statement];
172 [label="39_ winner_unchk32.send(winAmount_unchk32);\n172-expression_statement-40-40", method="sendToWinner_unchk32()", type_label=expression_statement];
179 [label="40_ payedOut_unchk32 = true;\n179-expression_statement-41-41", method="sendToWinner_unchk32()", type_label=expression_statement];
184 [label="42_ mapping(uint64 => BetFixture[]) public betList;\n184-new_variable-43-43", method="", type_label=new_variable];
193 [label="43_ bool public payedOut_unchk44 = false;\n193-new_variable-44-44", method="", type_label=new_variable];
200 [label="44_ address payable public winner_unchk44;\n200-new_variable-45-45", method="", type_label=new_variable];
205 [label="45_ uint public winAmount_unchk44;\n205-new_variable-46-46", method="", type_label=new_variable];
210 [label="46_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n210-function_definition-47-51", method="sendToWinner_unchk44()", type_label=function_definition];
214 [label="47_ require(!payedOut_unchk44);\n214-expression_statement-48-48", method="sendToWinner_unchk44()", type_label=expression_statement];
220 [label="48_ winner_unchk44.send(winAmount_unchk44);\n220-expression_statement-49-49", method="sendToWinner_unchk44()", type_label=expression_statement];
227 [label="49_ payedOut_unchk44 = true;\n227-expression_statement-50-50", method="sendToWinner_unchk44()", type_label=expression_statement];
238 [label="52_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n238-function_definition-53-61", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
242 [label="53_ address payable addr_unchk40;\n242-new_variable-54-54", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
247 [label="54_ if\n247-if-55-60", method="UncheckedExternalCall_unchk40()", type_label=if];
1915 [label="54_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
268 [label="62_ bool public payedOut_unchk33 = false;\n268-new_variable-63-63", method="", type_label=new_variable];
275 [label="63_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n275-function_definition-64-67", method="withdrawLeftOver_unchk33()", type_label=function_definition];
279 [label="64_ require(payedOut_unchk33);\n279-expression_statement-65-65", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
284 [label="65_ msg.sender.send(address(this).balance);\n284-expression_statement-66-66", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
307 [label="68_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n307-function_definition-69-70", method="bug_unchk27(address payable addr)", type_label=function_definition];
315 [label="69_ addr.send (42 ether);\n315-expression_statement-70-70", method="bug_unchk27(address payable addr)", type_label=expression_statement];
345 [label="71_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n345-function_definition-72-76", method="bug_unchk31()", type_label=function_definition];
349 [label="72_ address payable addr_unchk31;\n349-new_variable-73-73", method="bug_unchk31()", type_label=new_variable];
354 [label="73_ if_!addr_unchk31.send (10 ether) || 1==1\n354-if-74-75", method="bug_unchk31()", type_label=if];
2022 [label="73_ end_if", method="bug_unchk31()", type_label=end_if];
416 [label="77_ bool public payedOut_unchk45 = false;\n416-new_variable-78-78", method="", type_label=new_variable];
423 [label="78_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n423-function_definition-79-82", method="withdrawLeftOver_unchk45()", type_label=function_definition];
427 [label="79_ require(payedOut_unchk45);\n427-expression_statement-80-80", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
432 [label="80_ msg.sender.send(address(this).balance);\n432-expression_statement-81-81", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
483 [label="83_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n483-function_definition-84-86", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
491 [label="84_ callee.call.value(1 ether);\n491-expression_statement-85-85", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
517 [label="88_ owner   = msg.sender;\n517-expression_statement-89-89", method="", type_label=expression_statement];
523 [label="90_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n523-function_definition-91-93", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
531 [label="91_ callee.send(5 ether);\n531-expression_statement-92-92", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
539 [label="93_ function setOpenStatus(uint64 _fixtureId, uint8 _open_status) external onlyOwner {\n    gameList[_fixtureId].open_status = _open_status;\n  }\n539-function_definition-94-96", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=function_definition];
550 [label="93_ onlyOwner\n550-expression_statement-94-94", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=expression_statement];
553 [label="94_ gameList[_fixtureId].open_status = _open_status;\n553-expression_statement-95-95", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=expression_statement];
561 [label="96_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n561-function_definition-97-101", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
577 [label="97_ uint64 subpot_unchk46 = 3 ether;\n577-new_variable-98-98", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
584 [label="98_ winner_unchk46.send(subpot_unchk46);\n584-expression_statement-99-99", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
591 [label="99_ subpot_unchk46= 0;\n591-expression_statement-100-100", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
595 [label="101_ function changeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw ) external onlyOwner {\n    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n    gameList[_fixtureId].odd_over            = _odd_over;\n    gameList[_fixtureId].odd_under           = _odd_under;\n    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n    emit ChangeOdd (_fixtureId, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw);\n  }\n595-function_definition-102-112", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=function_definition];
634 [label="101_ onlyOwner\n634-expression_statement-102-102", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
637 [label="102_ gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n637-expression_statement-103-103", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
645 [label="103_ gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n645-expression_statement-104-104", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
653 [label="104_ gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n653-expression_statement-105-105", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
661 [label="105_ gameList[_fixtureId].odd_over            = _odd_over;\n661-expression_statement-106-106", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
669 [label="106_ gameList[_fixtureId].odd_under           = _odd_under;\n669-expression_statement-107-107", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
677 [label="107_ gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n677-expression_statement-108-108", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
685 [label="108_ gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n685-expression_statement-109-109", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
693 [label="109_ gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n693-expression_statement-110-110", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
721 [label="112_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n721-function_definition-113-121", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
725 [label="113_ address payable addr_unchk4;\n725-new_variable-114-114", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
730 [label="114_ if\n730-if-115-120", method="UncheckedExternalCall_unchk4()", type_label=if];
2398 [label="114_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
741 [label="121_ function setGameInfo (uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status ) external onlyOwner {\n    gameList[_fixtureId].timestamp           = _timestamp;\n    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n    gameList[_fixtureId].odd_over            = _odd_over;\n    gameList[_fixtureId].odd_under           = _odd_under;\n    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n    gameList[_fixtureId].open_status         = _open_status;\n    gameList[_fixtureId].isDone              = false;\n    emit SetGame(_fixtureId, _timestamp, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw, _open_status);\n  }\n741-function_definition-122-135", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=function_definition];
788 [label="121_ onlyOwner\n788-expression_statement-122-122", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
791 [label="122_ gameList[_fixtureId].timestamp           = _timestamp;\n791-expression_statement-123-123", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
799 [label="123_ gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n799-expression_statement-124-124", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
807 [label="124_ gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n807-expression_statement-125-125", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
815 [label="125_ gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n815-expression_statement-126-126", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
823 [label="126_ gameList[_fixtureId].odd_over            = _odd_over;\n823-expression_statement-127-127", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
831 [label="127_ gameList[_fixtureId].odd_under           = _odd_under;\n831-expression_statement-128-128", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
839 [label="128_ gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n839-expression_statement-129-129", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
847 [label="129_ gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n847-expression_statement-130-130", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
855 [label="130_ gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n855-expression_statement-131-131", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
863 [label="131_ gameList[_fixtureId].open_status         = _open_status;\n863-expression_statement-132-132", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
871 [label="132_ gameList[_fixtureId].isDone              = false;\n871-expression_statement-133-133", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
904 [label="135_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n904-function_definition-136-140", method="bug_unchk7()", type_label=function_definition];
908 [label="136_ address payable addr_unchk7;\n908-new_variable-137-137", method="bug_unchk7()", type_label=new_variable];
913 [label="137_ if_!addr_unchk7.send (10 ether) || 1==1\n913-if-138-139", method="bug_unchk7()", type_label=if];
2581 [label="137_ end_if", method="bug_unchk7()", type_label=end_if];
929 [label="140_ function placeBet(uint64 _fixtureId, uint16 _selectedTeam, uint32 _odd) external payable  {\n    uint stake = msg.value;\n    require(stake >= .001 ether);\n    require(_odd != 0 );\n    if (_selectedTeam == 1 ) {\n      require(gameList[_fixtureId].odd_homeTeam == _odd);\n    } else if ( _selectedTeam == 2) {\n      require(gameList[_fixtureId].odd_drawTeam == _odd);\n    } else if ( _selectedTeam == 3) {\n      require(gameList[_fixtureId].odd_awayTeam == _odd);\n    } else if ( _selectedTeam == 4) {\n      require(gameList[_fixtureId].odd_over == _odd);\n    } else if ( _selectedTeam == 5) {\n      require(gameList[_fixtureId].odd_under == _odd);\n    } else if ( _selectedTeam == 6) {\n      require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);\n    } else if ( _selectedTeam == 7) {\n      require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);\n    } else if ( _selectedTeam == 8) {\n      require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);\n    } else {\n      revert();\n    }\n    require(gameList[_fixtureId].open_status == 3);\n    require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );\n    betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));\n    emit NewStake(msg.sender, _fixtureId, _selectedTeam, stake, _odd );\n  }\n929-function_definition-141-168", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=function_definition];
946 [label="141_ uint stake = msg.value;\n946-new_variable-142-142", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=new_variable];
954 [label="142_ require(stake >= .001 ether);\n954-expression_statement-143-143", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
962 [label="143_ require(_odd != 0 );\n962-expression_statement-144-144", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
969 [label="144_ if__selectedTeam == 1\n969-if-145-163", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
2637 [label="144_ end_if", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=end_if];
974 [label="145_ require(gameList[_fixtureId].odd_homeTeam == _odd);\n974-expression_statement-146-146", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
985 [label="146_ if__selectedTeam == 2\n985-if-147-163", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
990 [label="147_ require(gameList[_fixtureId].odd_drawTeam == _odd);\n990-expression_statement-148-148", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1001 [label="148_ if__selectedTeam == 3\n1001-if-149-163", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1006 [label="149_ require(gameList[_fixtureId].odd_awayTeam == _odd);\n1006-expression_statement-150-150", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1017 [label="150_ if__selectedTeam == 4\n1017-if-151-163", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1022 [label="151_ require(gameList[_fixtureId].odd_over == _odd);\n1022-expression_statement-152-152", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1033 [label="152_ if__selectedTeam == 5\n1033-if-153-163", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1038 [label="153_ require(gameList[_fixtureId].odd_under == _odd);\n1038-expression_statement-154-154", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1049 [label="154_ if__selectedTeam == 6\n1049-if-155-163", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1054 [label="155_ require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);\n1054-expression_statement-156-156", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1065 [label="156_ if__selectedTeam == 7\n1065-if-157-163", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1070 [label="157_ require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);\n1070-expression_statement-158-158", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1081 [label="158_ if__selectedTeam == 8\n1081-if-159-163", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1086 [label="159_ require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);\n1086-expression_statement-160-160", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1100 [label="163_ require(gameList[_fixtureId].open_status == 3);\n1100-expression_statement-164-164", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1111 [label="164_ require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );\n1111-expression_statement-165-165", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1126 [label="165_ betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));\n1126-expression_statement-166-166", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1160 [label="168_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1160-function_definition-169-171", method="my_func_unchk23(address payable dst)", type_label=function_definition];
1169 [label="169_ dst.send(msg.value);\n1169-expression_statement-170-170", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
1178 [label="171_ function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable {\n    require(gameList[_fixtureId].open_status == 3);\n    require(gameList[_fixtureId].isDone == false);\n    require(betList[_fixtureId][0].player != address(0) );\n    for (uint i= 0 ; i < betList[_fixtureId].length; i++){\n      uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;\n      uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;\n      if ( (selectedTeam == 1 && _homeDrawAway == 1) \n        || (selectedTeam == 2 && _homeDrawAway == 2) \n        || (selectedTeam == 3 && _homeDrawAway == 3) \n        || (selectedTeam == 4 && _overUnder == 1) \n        || (selectedTeam == 5 && _overUnder == 2) \n        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )\n        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )\n        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) ) \n        ){ \n        betList[_fixtureId][i].player.transfer(returnEth);\n      }\n    }\n    gameList[_fixtureId].open_status = 5;\n    gameList[_fixtureId].isDone = true;  \n    emit GivePrizeMoney( _fixtureId,  _homeDrawAway,  _overUnder);\n  }\n1178-function_definition-172-194", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=function_definition];
1193 [label="171_ onlyOwner\n1193-expression_statement-172-172", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1197 [label="172_ require(gameList[_fixtureId].open_status == 3);\n1197-expression_statement-173-173", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1208 [label="173_ require(gameList[_fixtureId].isDone == false);\n1208-expression_statement-174-174", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1220 [label="174_ require(betList[_fixtureId][0].player != address(0) );\n1220-expression_statement-175-175", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1235 [label="175_ for(i < betList[_fixtureId].length;;i++)\n1235-for-176-190", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=for];
2903 [label="175_ end_loop", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=end_loop];
1250 [label="175_ i++\n1250-expression_statement-176-176", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1253 [label="176_ uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;\n1253-new_variable-177-177", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=new_variable];
1265 [label="177_ uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;\n1265-new_variable-178-178", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=new_variable];
1288 [label="178_ if_(selectedTeam == 1 && _homeDrawAway == 1) \n        || (selectedTeam == 2 && _homeDrawAway == 2) \n        || (selectedTeam == 3 && _homeDrawAway == 3) \n        || (selectedTeam == 4 && _overUnder == 1) \n        || (selectedTeam == 5 && _overUnder == 2) \n        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )\n        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )\n        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) )\n1288-if-179-189", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=if];
2956 [label="178_ end_if", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=end_if];
1376 [label="187_ betList[_fixtureId][i].player.transfer(returnEth);\n1376-expression_statement-188-188", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1389 [label="190_ gameList[_fixtureId].open_status = 5;\n1389-expression_statement-191-191", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1397 [label="191_ gameList[_fixtureId].isDone = true;\n1397-expression_statement-192-192", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1414 [label="194_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n1414-function_definition-195-197", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
1422 [label="195_ callee.send(5 ether);\n1422-expression_statement-196-196", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
1430 [label="197_ modifier onlyOwner {\n    require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n    _;\n  }\n1430-expression_statement-198-201", method="", type_label=expression_statement];
1433 [label="198_ require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n1433-expression_statement-199-199", method="", type_label=expression_statement];
1445 [label="199_ _;\n1445-expression_statement-200-200", method="", type_label=expression_statement];
1447 [label="201_ function getBalance() external view returns(uint){\n    return address(this).balance;\n  }\n1447-function_definition-202-204", method="getBalance()", type_label=function_definition];
1456 [label="202_ return address(this).balance;\n1456-return-203-203", method="getBalance()", type_label=return];
1462 [label="204_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n1462-function_definition-205-212", method="bug_unchk30()", type_label=function_definition];
1466 [label="205_ uint receivers_unchk30;\n1466-new_variable-206-206", method="bug_unchk30()", type_label=new_variable];
1471 [label="206_ address payable addr_unchk30;\n1471-new_variable-207-207", method="bug_unchk30()", type_label=new_variable];
1476 [label="207_ if\n1476-if-208-211", method="bug_unchk30()", type_label=if];
3144 [label="207_ end_if", method="bug_unchk30()", type_label=end_if];
1486 [label="208_ receivers_unchk30 +=1;\n1486-expression_statement-209-209", method="bug_unchk30()", type_label=expression_statement];
1493 [label="212_ function deposit(uint256 _eth) external payable{\n    emit Deposit(msg.sender, _eth);\n  }\n1493-function_definition-213-215", method="deposit(uint256 _eth)", type_label=function_definition];
1510 [label="215_ bool public payedOut_unchk8 = false;\n1510-new_variable-216-216", method="", type_label=new_variable];
1517 [label="216_ address payable public winner_unchk8;\n1517-new_variable-217-217", method="", type_label=new_variable];
1522 [label="217_ uint public winAmount_unchk8;\n1522-new_variable-218-218", method="", type_label=new_variable];
1527 [label="218_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1527-function_definition-219-223", method="sendToWinner_unchk8()", type_label=function_definition];
1531 [label="219_ require(!payedOut_unchk8);\n1531-expression_statement-220-220", method="sendToWinner_unchk8()", type_label=expression_statement];
1537 [label="220_ winner_unchk8.send(winAmount_unchk8);\n1537-expression_statement-221-221", method="sendToWinner_unchk8()", type_label=expression_statement];
1544 [label="221_ payedOut_unchk8 = true;\n1544-expression_statement-222-222", method="sendToWinner_unchk8()", type_label=expression_statement];
1549 [label="223_ function changeOwner(address payable _newOwner ) external onlyOwner {\n    owner = _newOwner;\n  }\n1549-function_definition-224-226", method="changeOwner(address payable _newOwner)", type_label=function_definition];
1556 [label="223_ onlyOwner\n1556-expression_statement-224-224", method="changeOwner(address payable _newOwner)", type_label=expression_statement];
1559 [label="224_ owner = _newOwner;\n1559-expression_statement-225-225", method="changeOwner(address payable _newOwner)", type_label=expression_statement];
1563 [label="226_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1563-function_definition-227-228", method="bug_unchk39(address payable addr)", type_label=function_definition];
1571 [label="227_ addr.send (4 ether);\n1571-expression_statement-228-228", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1583 [label="229_ owner.transfer(msg.value);\n1583-expression_statement-230-230", method="", type_label=expression_statement];
1592 [label="231_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1592-function_definition-232-234", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1601 [label="232_ dst.call.value(msg.value)(\"\");\n1601-expression_statement-233-233", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1616 [label="234_ function withdraw(uint256 _amount) external payable onlyOwner {\n    require(_amount > 0 && _amount <= address(this).balance );\n    owner.transfer(_amount);\n    emit Withdraw(owner, _amount);\n  }\n1616-function_definition-235-239", method="withdraw(uint256 _amount)", type_label=function_definition];
1624 [label="234_ onlyOwner\n1624-expression_statement-235-235", method="withdraw(uint256 _amount)", type_label=expression_statement];
1627 [label="235_ require(_amount > 0 && _amount <= address(this).balance );\n1627-expression_statement-236-236", method="withdraw(uint256 _amount)", type_label=expression_statement];
1642 [label="236_ owner.transfer(_amount);\n1642-expression_statement-237-237", method="withdraw(uint256 _amount)", type_label=expression_statement];
1655 [label="239_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1655-function_definition-240-242", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1664 [label="240_ dst.send(msg.value);\n1664-expression_statement-241-241", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
257;
740;
1098;
1491;
13 -> 21  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 87  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 92  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
97 -> 101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
145 -> 152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
152 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
275 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
354 -> 2022  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
423 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
721 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
741 -> 791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
791 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
831 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
839 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
908 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
913 -> 2581  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
929 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
946 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
954 -> 962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
962 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 974  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
969 -> 985  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2637 -> 1100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
974 -> 2637  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
985 -> 990  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
985 -> 1001  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
990 -> 2637  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1001 -> 1006  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1001 -> 1017  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1006 -> 2637  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1017 -> 1022  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1017 -> 1033  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1022 -> 2637  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1033 -> 1038  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1033 -> 1049  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1038 -> 2637  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1049 -> 1054  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1049 -> 1065  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1054 -> 2637  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1065 -> 1070  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1065 -> 1081  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1070 -> 2637  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1081 -> 1086  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1086 -> 2637  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1100 -> 1111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 1169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1178 -> 1197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 1208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 1253  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1235 -> 2903  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2903 -> 1389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 1235  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1253 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1288 -> 1376  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1288 -> 2956  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2956 -> 1250  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2956 -> 1250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
1376 -> 2956  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1389 -> 1397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1414 -> 1422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1433 -> 1445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1456 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1462 -> 1466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1466 -> 1471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1471 -> 1476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1476 -> 1486  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3144 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 3144  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1510 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1517 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1527 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1537 -> 1544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1549 -> 1559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> 1571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1592 -> 1601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1616 -> 1627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1627 -> 1642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1655 -> 1664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
257 -> 1915  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
740 -> 2398  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1098 -> 2637  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1491 -> 3144  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
