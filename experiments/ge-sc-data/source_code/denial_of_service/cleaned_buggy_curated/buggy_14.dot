digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
1462 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ require(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n56-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ require(b > 0);\n73-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
80 [label="12_ uint256 c = a / b;\n80-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
88 [label="13_ return c;\n88-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
90 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n90-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
107 [label="16_ require(b <= a);\n107-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
114 [label="17_ uint256 c = a - b;\n114-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
122 [label="18_ return c;\n122-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
124 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n124-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
141 [label="21_ uint256 c = a + b;\n141-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
149 [label="22_ require(c >= a);\n149-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
156 [label="23_ return c;\n156-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
158 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n158-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
175 [label="26_ require(b != 0);\n175-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
182 [label="27_ return a % b;\n182-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
189 [label="31_ function totalSupply() external view returns (uint256);\n189-function_definition-32-32", method="totalSupply()", type_label=function_definition];
197 [label="32_ function balanceOf(address who) external view returns (uint256);\n197-function_definition-33-33", method="balanceOf(address who)", type_label=function_definition];
209 [label="33_ function transfer(address to, uint256 value) external returns (bool);\n209-function_definition-34-34", method="transfer(address to,uint256 value)", type_label=function_definition];
224 [label="34_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n224-function_definition-35-35", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
243 [label="35_ function approve(address spender, uint256 value) external returns (bool);\n243-function_definition-36-36", method="approve(address spender,uint256 value)", type_label=function_definition];
258 [label="36_ function allowance(address owner, address spender) external view returns (uint256);\n258-function_definition-37-37", method="allowance(address owner,address spender)", type_label=function_definition];
323 [label="43_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n323-function_definition-44-48", method="bug_unchk19()", type_label=function_definition];
327 [label="44_ address payable addr_unchk19;\n327-new_variable-45-45", method="bug_unchk19()", type_label=new_variable];
332 [label="45_ if_!addr_unchk19.send (10 ether) || 1==1\n332-if-46-47", method="bug_unchk19()", type_label=if];
1764 [label="45_ end_if", method="bug_unchk19()", type_label=end_if];
348 [label="48_ uint8 constant DECIMALS = 18;\n348-new_variable-49-49", method="", type_label=new_variable];
353 [label="49_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n353-function_definition-50-52", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
361 [label="50_ callee.send(5 ether);\n361-expression_statement-51-51", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
369 [label="52_ uint256 private _totalSupply;\n369-new_variable-53-53", method="", type_label=new_variable];
374 [label="53_ string private _name;\n374-new_variable-54-54", method="", type_label=new_variable];
379 [label="54_ string private _symbol;\n379-new_variable-55-55", method="", type_label=new_variable];
384 [label="55_ bool public payedOut_unchk20 = false;\n384-new_variable-56-56", method="", type_label=new_variable];
391 [label="56_ address payable public winner_unchk20;\n391-new_variable-57-57", method="", type_label=new_variable];
396 [label="57_ uint public winAmount_unchk20;\n396-new_variable-58-58", method="", type_label=new_variable];
401 [label="58_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n401-function_definition-59-63", method="sendToWinner_unchk20()", type_label=function_definition];
405 [label="59_ require(!payedOut_unchk20);\n405-expression_statement-60-60", method="sendToWinner_unchk20()", type_label=expression_statement];
411 [label="60_ winner_unchk20.send(winAmount_unchk20);\n411-expression_statement-61-61", method="sendToWinner_unchk20()", type_label=expression_statement];
418 [label="61_ payedOut_unchk20 = true;\n418-expression_statement-62-62", method="sendToWinner_unchk20()", type_label=expression_statement];
423 [label="63_ mapping (address => uint256) private _balances;\n423-new_variable-64-64", method="", type_label=new_variable];
430 [label="64_ bool public payedOut_unchk32 = false;\n430-new_variable-65-65", method="", type_label=new_variable];
437 [label="65_ address payable public winner_unchk32;\n437-new_variable-66-66", method="", type_label=new_variable];
442 [label="66_ uint public winAmount_unchk32;\n442-new_variable-67-67", method="", type_label=new_variable];
447 [label="67_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n447-function_definition-68-72", method="sendToWinner_unchk32()", type_label=function_definition];
451 [label="68_ require(!payedOut_unchk32);\n451-expression_statement-69-69", method="sendToWinner_unchk32()", type_label=expression_statement];
457 [label="69_ winner_unchk32.send(winAmount_unchk32);\n457-expression_statement-70-70", method="sendToWinner_unchk32()", type_label=expression_statement];
464 [label="70_ payedOut_unchk32 = true;\n464-expression_statement-71-71", method="sendToWinner_unchk32()", type_label=expression_statement];
469 [label="72_ mapping (address => mapping (address => uint256)) private _allowed;\n469-new_variable-73-73", method="", type_label=new_variable];
478 [label="73_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n478-function_definition-74-76", method="totalSupply()", type_label=function_definition];
487 [label="74_ return _totalSupply;\n487-return-75-75", method="totalSupply()", type_label=return];
489 [label="76_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n489-function_definition-77-85", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
493 [label="77_ address payable addr_unchk4;\n493-new_variable-78-78", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
498 [label="78_ if\n498-if-79-84", method="UncheckedExternalCall_unchk4()", type_label=if];
1930 [label="78_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
509 [label="85_ function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n509-function_definition-86-88", method="balanceOf(address owner)", type_label=function_definition];
522 [label="86_ return _balances[owner];\n522-return-87-87", method="balanceOf(address owner)", type_label=return];
526 [label="88_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n526-function_definition-89-93", method="bug_unchk7()", type_label=function_definition];
530 [label="89_ address payable addr_unchk7;\n530-new_variable-90-90", method="bug_unchk7()", type_label=new_variable];
535 [label="90_ if_!addr_unchk7.send (10 ether) || 1==1\n535-if-91-92", method="bug_unchk7()", type_label=if];
1967 [label="90_ end_if", method="bug_unchk7()", type_label=end_if];
551 [label="93_ function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n551-function_definition-94-97", method="transfer(address to,uint256 value)", type_label=function_definition];
567 [label="94_ _transfer(msg.sender, to, value);\n567-expression_statement-95-95", method="transfer(address to,uint256 value)", type_label=expression_statement];
578 [label="95_ return true;\n578-return-96-96", method="transfer(address to,uint256 value)", type_label=return];
581 [label="97_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n581-function_definition-98-100", method="my_func_unchk23(address payable dst)", type_label=function_definition];
590 [label="98_ dst.send(msg.value);\n590-expression_statement-99-99", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
599 [label="100_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n         _transfer(from, to, value);\n         _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n         return true;\n    }\n599-function_definition-101-105", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
619 [label="101_ _transfer(from, to, value);\n619-expression_statement-102-102", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
628 [label="102_ _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n628-expression_statement-103-103", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
650 [label="103_ return true;\n650-return-104-104", method="transferFrom(address from,address to,uint256 value)", type_label=return];
653 [label="105_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n653-function_definition-106-108", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
661 [label="106_ callee.send(5 ether);\n661-expression_statement-107-107", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
669 [label="108_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n669-function_definition-109-112", method="approve(address spender,uint256 value)", type_label=function_definition];
685 [label="109_ _approve(msg.sender, spender, value);\n685-expression_statement-110-110", method="approve(address spender,uint256 value)", type_label=expression_statement];
696 [label="110_ return true;\n696-return-111-111", method="approve(address spender,uint256 value)", type_label=return];
699 [label="112_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n699-function_definition-113-120", method="bug_unchk30()", type_label=function_definition];
703 [label="113_ uint receivers_unchk30;\n703-new_variable-114-114", method="bug_unchk30()", type_label=new_variable];
708 [label="114_ address payable addr_unchk30;\n708-new_variable-115-115", method="bug_unchk30()", type_label=new_variable];
713 [label="115_ if\n713-if-116-119", method="bug_unchk30()", type_label=if];
2145 [label="115_ end_if", method="bug_unchk30()", type_label=end_if];
723 [label="116_ receivers_unchk30 +=1;\n723-expression_statement-117-117", method="bug_unchk30()", type_label=expression_statement];
730 [label="120_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n730-function_definition-121-123", method="allowance(address owner,address spender)", type_label=function_definition];
747 [label="121_ return _allowed[owner][spender];\n747-return-122-122", method="allowance(address owner,address spender)", type_label=return];
753 [label="123_ bool public payedOut_unchk8 = false;\n753-new_variable-124-124", method="", type_label=new_variable];
760 [label="124_ address payable public winner_unchk8;\n760-new_variable-125-125", method="", type_label=new_variable];
765 [label="125_ uint public winAmount_unchk8;\n765-new_variable-126-126", method="", type_label=new_variable];
770 [label="126_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n770-function_definition-127-131", method="sendToWinner_unchk8()", type_label=function_definition];
774 [label="127_ require(!payedOut_unchk8);\n774-expression_statement-128-128", method="sendToWinner_unchk8()", type_label=expression_statement];
780 [label="128_ winner_unchk8.send(winAmount_unchk8);\n780-expression_statement-129-129", method="sendToWinner_unchk8()", type_label=expression_statement];
787 [label="129_ payedOut_unchk8 = true;\n787-expression_statement-130-130", method="sendToWinner_unchk8()", type_label=expression_statement];
792 [label="131_ function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n792-function_definition-132-134", method="burn(uint256 value)", type_label=function_definition];
800 [label="132_ _burn(msg.sender, value);\n800-expression_statement-133-133", method="burn(uint256 value)", type_label=expression_statement];
809 [label="134_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n809-function_definition-135-136", method="bug_unchk39(address payable addr)", type_label=function_definition];
817 [label="135_ addr.send (4 ether);\n817-expression_statement-136-136", method="bug_unchk39(address payable addr)", type_label=expression_statement];
825 [label="136_ function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n825-function_definition-137-142", method="_mint(address account,uint256 value)", type_label=function_definition];
837 [label="137_ require(account != address(0));\n837-expression_statement-138-138", method="_mint(address account,uint256 value)", type_label=expression_statement];
846 [label="138_ _totalSupply = _totalSupply.add(value);\n846-expression_statement-139-139", method="_mint(address account,uint256 value)", type_label=expression_statement];
855 [label="139_ _balances[account] = _balances[account].add(value);\n855-expression_statement-140-140", method="_mint(address account,uint256 value)", type_label=expression_statement];
878 [label="142_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n878-function_definition-143-145", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
887 [label="143_ dst.call.value(msg.value)(\"\");\n887-expression_statement-144-144", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
902 [label="145_ function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n902-function_definition-146-151", method="_transfer(address from,address to,uint256 value)", type_label=function_definition];
918 [label="146_ require(to != address(0));\n918-expression_statement-147-147", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
927 [label="147_ _balances[from] = _balances[from].sub(value);\n927-expression_statement-148-148", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
940 [label="148_ _balances[to] = _balances[to].add(value);\n940-expression_statement-149-149", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
961 [label="151_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n961-function_definition-152-154", method="my_func_unchk35(address payable dst)", type_label=function_definition];
970 [label="152_ dst.send(msg.value);\n970-expression_statement-153-153", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
979 [label="154_ function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n979-function_definition-155-160", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
995 [label="155_ require(spender != address(0));\n995-expression_statement-156-156", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1004 [label="156_ require(owner != address(0));\n1004-expression_statement-157-157", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1013 [label="157_ _allowed[owner][spender] = value;\n1013-expression_statement-158-158", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1029 [label="160_ bool public payedOut_unchk44 = false;\n1029-new_variable-161-161", method="", type_label=new_variable];
1036 [label="161_ address payable public winner_unchk44;\n1036-new_variable-162-162", method="", type_label=new_variable];
1041 [label="162_ uint public winAmount_unchk44;\n1041-new_variable-163-163", method="", type_label=new_variable];
1046 [label="163_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1046-function_definition-164-168", method="sendToWinner_unchk44()", type_label=function_definition];
1050 [label="164_ require(!payedOut_unchk44);\n1050-expression_statement-165-165", method="sendToWinner_unchk44()", type_label=expression_statement];
1056 [label="165_ winner_unchk44.send(winAmount_unchk44);\n1056-expression_statement-166-166", method="sendToWinner_unchk44()", type_label=expression_statement];
1063 [label="166_ payedOut_unchk44 = true;\n1063-expression_statement-167-167", method="sendToWinner_unchk44()", type_label=expression_statement];
1068 [label="168_ function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n1068-function_definition-169-174", method="_burn(address account,uint256 value)", type_label=function_definition];
1080 [label="169_ require(account != address(0));\n1080-expression_statement-170-170", method="_burn(address account,uint256 value)", type_label=expression_statement];
1089 [label="170_ _totalSupply = _totalSupply.sub(value);\n1089-expression_statement-171-171", method="_burn(address account,uint256 value)", type_label=expression_statement];
1098 [label="171_ _balances[account] = _balances[account].sub(value);\n1098-expression_statement-172-172", method="_burn(address account,uint256 value)", type_label=expression_statement];
1121 [label="174_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1121-function_definition-175-183", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1125 [label="175_ address payable addr_unchk40;\n1125-new_variable-176-176", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1130 [label="176_ if\n1130-if-177-182", method="UncheckedExternalCall_unchk40()", type_label=if];
2562 [label="176_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1147 [label="185_ string private _name;\n1147-new_variable-186-186", method="", type_label=new_variable];
1152 [label="186_ string private _symbol;\n1152-new_variable-187-187", method="", type_label=new_variable];
1157 [label="187_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n1157-function_definition-188-190", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
1165 [label="188_ callee.send(5 ether);\n1165-expression_statement-189-189", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
1173 [label="190_ uint8 private _decimals;\n1173-new_variable-191-191", method="", type_label=new_variable];
1192 [label="192_ _name = name;\n1192-expression_statement-193-193", method="", type_label=expression_statement];
1196 [label="193_ _symbol = symbol;\n1196-expression_statement-194-194", method="", type_label=expression_statement];
1200 [label="194_ _decimals = decimals;\n1200-expression_statement-195-195", method="", type_label=expression_statement];
1204 [label="196_ bool public payedOut_unchk33 = false;\n1204-new_variable-197-197", method="", type_label=new_variable];
1211 [label="197_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1211-function_definition-198-201", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1215 [label="198_ require(payedOut_unchk33);\n1215-expression_statement-199-199", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1220 [label="199_ msg.sender.send(address(this).balance);\n1220-expression_statement-200-200", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1233 [label="201_ function name() public view returns (string memory) {\n        return _name;\n    }\n1233-function_definition-202-204", method="name()", type_label=function_definition];
1242 [label="202_ return _name;\n1242-return-203-203", method="name()", type_label=return];
1244 [label="204_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1244-function_definition-205-206", method="bug_unchk27(address payable addr)", type_label=function_definition];
1252 [label="205_ addr.send (42 ether);\n1252-expression_statement-206-206", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1260 [label="206_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n1260-function_definition-207-209", method="symbol()", type_label=function_definition];
1269 [label="207_ return _symbol;\n1269-return-208-208", method="symbol()", type_label=return];
1271 [label="209_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n1271-function_definition-210-214", method="bug_unchk31()", type_label=function_definition];
1275 [label="210_ address payable addr_unchk31;\n1275-new_variable-211-211", method="bug_unchk31()", type_label=new_variable];
1280 [label="211_ if_!addr_unchk31.send (10 ether) || 1==1\n1280-if-212-213", method="bug_unchk31()", type_label=if];
2712 [label="211_ end_if", method="bug_unchk31()", type_label=end_if];
1296 [label="214_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n1296-function_definition-215-217", method="decimals()", type_label=function_definition];
1305 [label="215_ return _decimals;\n1305-return-216-216", method="decimals()", type_label=return];
1307 [label="217_ bool public payedOut_unchk45 = false;\n1307-new_variable-218-218", method="", type_label=new_variable];
1314 [label="218_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n1314-function_definition-219-222", method="withdrawLeftOver_unchk45()", type_label=function_definition];
1318 [label="219_ require(payedOut_unchk45);\n1318-expression_statement-220-220", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1323 [label="220_ msg.sender.send(address(this).balance);\n1323-expression_statement-221-221", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1345 [label="224_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n1345-function_definition-225-229", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
1361 [label="225_ uint64 subpot_unchk46 = 3 ether;\n1361-new_variable-226-226", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
1368 [label="226_ winner_unchk46.send(subpot_unchk46);\n1368-expression_statement-227-227", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
1375 [label="227_ subpot_unchk46= 0;\n1375-expression_statement-228-228", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
1379 [label="229_ uint8 public constant DECIMALS = 18;\n1379-new_variable-230-230", method="", type_label=new_variable];
1385 [label="230_ uint256 public constant INITIAL_SUPPLY = 50000000000 * (10 ** uint256(DECIMALS));\n1385-new_variable-231-231", method="", type_label=new_variable];
1399 [label="231_ ERC20Detailed(\"SaveWon\", \"SVW\", DECIMALS)\n1399-expression_statement-232-232", method="", type_label=expression_statement];
1410 [label="232_ _mint(msg.sender, INITIAL_SUPPLY);\n1410-expression_statement-233-233", method="", type_label=expression_statement];
1419 [label="234_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n1419-function_definition-235-237", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
1427 [label="235_ callee.call.value(1 ether);\n1427-expression_statement-236-236", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
508;
728;
1140;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 1462  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1462 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 1462  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
90 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
124 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
156 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
158 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
323 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
332 -> 1764  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
353 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
423 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
489 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
526 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 1967  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
551 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
581 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
619 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
628 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
653 -> 661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
699 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
708 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 723  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2145 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 2145  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
730 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
753 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
760 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
774 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
878 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
902 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 1041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1046 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 1089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1089 -> 1098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1121 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1125 -> 1130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1147 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1157 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 1196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1196 -> 1200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1211 -> 1215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1233 -> 1242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1242 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1244 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1269 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1271 -> 1275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1275 -> 1280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1280 -> 2712  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1296 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1305 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1314 -> 1318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1318 -> 1323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1345 -> 1361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1361 -> 1368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1368 -> 1375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1379 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1419 -> 1427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 1930  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
728 -> 2145  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1140 -> 2562  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
