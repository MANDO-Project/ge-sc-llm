digraph  {
13 [label="2_ bool public payedOut_unchk33 = false;\n13-new_variable-3-3", method="", type_label=new_variable];
20 [label="3_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n20-function_definition-4-7", method="withdrawLeftOver_unchk33()", type_label=function_definition];
24 [label="4_ require(payedOut_unchk33);\n24-expression_statement-5-5", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
29 [label="5_ msg.sender.send(address(this).balance);\n29-expression_statement-6-6", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
48 [label="8_ function _setMetadata(bytes memory metadata) internal {\n        emit MetadataSet(metadata);\n    }\n48-function_definition-9-11", method="_setMetadata(bytes memory metadata)", type_label=function_definition];
60 [label="11_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n60-function_definition-12-14", method="withdrawBal_unchk17()", type_label=function_definition];
64 [label="12_ uint64 Balances_unchk17 = 0;\n64-new_variable-13-13", method="withdrawBal_unchk17()", type_label=new_variable];
70 [label="13_ msg.sender.send(Balances_unchk17);\n70-expression_statement-14-14", method="withdrawBal_unchk17()", type_label=expression_statement];
82 [label="16_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n82-function_definition-17-19", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
90 [label="17_ callee.send(5 ether);\n90-expression_statement-18-18", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
98 [label="19_ address private _operator;\n98-new_variable-20-20", method="", type_label=new_variable];
103 [label="20_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n103-function_definition-21-25", method="bug_unchk43()", type_label=function_definition];
107 [label="21_ address payable addr_unchk43;\n107-new_variable-22-22", method="bug_unchk43()", type_label=new_variable];
112 [label="22_ if_!addr_unchk43.send (10 ether) || 1==1\n112-if-23-24", method="bug_unchk43()", type_label=if];
1849 [label="22_ end_if", method="bug_unchk43()", type_label=end_if];
128 [label="25_ bool private _status;\n128-new_variable-26-26", method="", type_label=new_variable];
133 [label="26_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n133-function_definition-27-28", method="bug_unchk27(address payable addr)", type_label=function_definition];
141 [label="27_ addr.send (42 ether);\n141-expression_statement-28-28", method="bug_unchk27(address payable addr)", type_label=expression_statement];
159 [label="29_ function _setOperator(address operator) internal {\n        require(_operator != operator, \"cannot set same operator\");\n        _operator = operator;\n        emit OperatorUpdated(operator, hasActiveOperator());\n    }\n159-function_definition-30-34", method="_setOperator(address operator)", type_label=function_definition];
167 [label="30_ require(_operator != operator, \"cannot set same operator\");\n167-expression_statement-31-31", method="_setOperator(address operator)", type_label=expression_statement];
177 [label="31_ _operator = operator;\n177-expression_statement-32-32", method="_setOperator(address operator)", type_label=expression_statement];
188 [label="34_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n188-function_definition-35-37", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
196 [label="35_ callee.call.value(1 ether);\n196-expression_statement-36-36", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
206 [label="37_ function _transferOperator(address operator) internal {\n        require(_operator != address(0), \"operator not set\");\n        _setOperator(operator);\n    }\n206-function_definition-38-41", method="_transferOperator(address operator)", type_label=function_definition];
214 [label="38_ require(_operator != address(0), \"operator not set\");\n214-expression_statement-39-39", method="_transferOperator(address operator)", type_label=expression_statement];
226 [label="39_ _setOperator(operator);\n226-expression_statement-40-40", method="_transferOperator(address operator)", type_label=expression_statement];
231 [label="41_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n231-function_definition-42-43", method="bug_unchk3(address payable addr)", type_label=function_definition];
239 [label="42_ addr.send (42 ether);\n239-expression_statement-43-43", method="bug_unchk3(address payable addr)", type_label=expression_statement];
247 [label="43_ function _renounceOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _operator = address(0);\n        _status = false;\n        emit OperatorUpdated(address(0), false);\n    }\n247-function_definition-44-49", method="_renounceOperator()", type_label=function_definition];
251 [label="44_ require(hasActiveOperator(), \"only when operator active\");\n251-expression_statement-45-45", method="_renounceOperator()", type_label=expression_statement];
260 [label="45_ _operator = address(0);\n260-expression_statement-46-46", method="_renounceOperator()", type_label=expression_statement];
266 [label="46_ _status = false;\n266-expression_statement-47-47", method="_renounceOperator()", type_label=expression_statement];
280 [label="49_ bool public payedOut_unchk9 = false;\n280-new_variable-50-50", method="", type_label=new_variable];
287 [label="50_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n287-function_definition-51-54", method="withdrawLeftOver_unchk9()", type_label=function_definition];
291 [label="51_ require(payedOut_unchk9);\n291-expression_statement-52-52", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
296 [label="52_ msg.sender.send(address(this).balance);\n296-expression_statement-53-53", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
309 [label="54_ function _activateOperator() internal {\n        require(!hasActiveOperator(), \"only when operator not active\");\n        _status = true;\n        emit OperatorUpdated(_operator, true);\n    }\n309-function_definition-55-59", method="_activateOperator()", type_label=function_definition];
313 [label="55_ require(!hasActiveOperator(), \"only when operator not active\");\n313-expression_statement-56-56", method="_activateOperator()", type_label=expression_statement];
323 [label="56_ _status = true;\n323-expression_statement-57-57", method="_activateOperator()", type_label=expression_statement];
335 [label="59_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n335-function_definition-60-62", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
343 [label="60_ callee.call.value(1 ether);\n343-expression_statement-61-61", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
353 [label="62_ function _deactivateOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _status = false;\n        emit OperatorUpdated(_operator, false);\n    }\n353-function_definition-63-67", method="_deactivateOperator()", type_label=function_definition];
357 [label="63_ require(hasActiveOperator(), \"only when operator active\");\n357-expression_statement-64-64", method="_deactivateOperator()", type_label=expression_statement];
366 [label="64_ _status = false;\n366-expression_statement-65-65", method="_deactivateOperator()", type_label=expression_statement];
378 [label="67_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n378-function_definition-68-72", method="bug_unchk19()", type_label=function_definition];
382 [label="68_ address payable addr_unchk19;\n382-new_variable-69-69", method="bug_unchk19()", type_label=new_variable];
387 [label="69_ if_!addr_unchk19.send (10 ether) || 1==1\n387-if-70-71", method="bug_unchk19()", type_label=if];
2124 [label="69_ end_if", method="bug_unchk19()", type_label=end_if];
403 [label="72_ function getOperator() public view returns (address operator) {\n        operator = _operator;\n    }\n403-function_definition-73-75", method="getOperator()", type_label=function_definition];
413 [label="73_ operator = _operator;\n413-expression_statement-74-74", method="getOperator()", type_label=expression_statement];
417 [label="75_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n417-function_definition-76-78", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
425 [label="76_ callee.send(5 ether);\n425-expression_statement-77-77", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
433 [label="78_ function isOperator(address caller) public view returns (bool ok) {\n        return (caller == getOperator());\n    }\n433-function_definition-79-81", method="isOperator(address caller)", type_label=function_definition];
447 [label="79_ return (caller == getOperator());\n447-return-80-80", method="isOperator(address caller)", type_label=return];
453 [label="81_ bool public payedOut_unchk20 = false;\n453-new_variable-82-82", method="", type_label=new_variable];
460 [label="82_ address payable public winner_unchk20;\n460-new_variable-83-83", method="", type_label=new_variable];
465 [label="83_ uint public winAmount_unchk20;\n465-new_variable-84-84", method="", type_label=new_variable];
470 [label="84_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n470-function_definition-85-89", method="sendToWinner_unchk20()", type_label=function_definition];
474 [label="85_ require(!payedOut_unchk20);\n474-expression_statement-86-86", method="sendToWinner_unchk20()", type_label=expression_statement];
480 [label="86_ winner_unchk20.send(winAmount_unchk20);\n480-expression_statement-87-87", method="sendToWinner_unchk20()", type_label=expression_statement];
487 [label="87_ payedOut_unchk20 = true;\n487-expression_statement-88-88", method="sendToWinner_unchk20()", type_label=expression_statement];
492 [label="89_ function hasActiveOperator() public view returns (bool ok) {\n        return _status;\n    }\n492-function_definition-90-92", method="hasActiveOperator()", type_label=function_definition];
502 [label="90_ return _status;\n502-return-91-91", method="hasActiveOperator()", type_label=return];
504 [label="92_ bool public payedOut_unchk32 = false;\n504-new_variable-93-93", method="", type_label=new_variable];
511 [label="93_ address payable public winner_unchk32;\n511-new_variable-94-94", method="", type_label=new_variable];
516 [label="94_ uint public winAmount_unchk32;\n516-new_variable-95-95", method="", type_label=new_variable];
521 [label="95_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n521-function_definition-96-100", method="sendToWinner_unchk32()", type_label=function_definition];
525 [label="96_ require(!payedOut_unchk32);\n525-expression_statement-97-97", method="sendToWinner_unchk32()", type_label=expression_statement];
531 [label="97_ winner_unchk32.send(winAmount_unchk32);\n531-expression_statement-98-98", method="sendToWinner_unchk32()", type_label=expression_statement];
538 [label="98_ payedOut_unchk32 = true;\n538-expression_statement-99-99", method="sendToWinner_unchk32()", type_label=expression_statement];
543 [label="100_ function isActiveOperator(address caller) public view returns (bool ok) {\n        return (isOperator(caller) && hasActiveOperator());\n    }\n543-function_definition-101-103", method="isActiveOperator(address caller)", type_label=function_definition];
557 [label="101_ return (isOperator(caller) && hasActiveOperator());\n557-return-102-102", method="isActiveOperator(address caller)", type_label=return];
566 [label="103_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n566-function_definition-104-106", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
574 [label="104_ callee.send(5 ether);\n574-expression_statement-105-105", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
585 [label="108_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n585-function_definition-109-113", method="bug_unchk31()", type_label=function_definition];
589 [label="109_ address payable addr_unchk31;\n589-new_variable-110-110", method="bug_unchk31()", type_label=new_variable];
594 [label="110_ if_!addr_unchk31.send (10 ether) || 1==1\n594-if-111-112", method="bug_unchk31()", type_label=if];
2331 [label="110_ end_if", method="bug_unchk31()", type_label=end_if];
620 [label="114_ bool public payedOut_unchk45 = false;\n620-new_variable-115-115", method="", type_label=new_variable];
627 [label="115_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n627-function_definition-116-119", method="withdrawLeftOver_unchk45()", type_label=function_definition];
631 [label="116_ require(payedOut_unchk45);\n631-expression_statement-117-117", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
636 [label="117_ msg.sender.send(address(this).balance);\n636-expression_statement-118-118", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
655 [label="120_ function _setMultiHashFormat(uint8 hashFunction, uint8 digestSize) internal {\n        emit HashFormatSet(hashFunction, digestSize);\n    }\n655-function_definition-121-123", method="_setMultiHashFormat(uint8 hashFunction,uint8 digestSize)", type_label=function_definition];
673 [label="123_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n673-function_definition-124-128", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
689 [label="124_ uint64 subpot_unchk46 = 3 ether;\n689-new_variable-125-125", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
696 [label="125_ winner_unchk46.send(subpot_unchk46);\n696-expression_statement-126-126", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
703 [label="126_ subpot_unchk46= 0;\n703-expression_statement-127-127", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
707 [label="128_ function _submitHash(bytes32 hash) internal {\n        emit HashSubmitted(hash);\n    }\n707-function_definition-129-131", method="_submitHash(bytes32 hash)", type_label=function_definition];
719 [label="131_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n719-function_definition-132-140", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
723 [label="132_ address payable addr_unchk4;\n723-new_variable-133-133", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
728 [label="133_ if\n728-if-134-139", method="UncheckedExternalCall_unchk4()", type_label=if];
2465 [label="133_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
742 [label="142_ struct MultiHash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 digestSize;\n    }\n742-expression_statement-143-147", method="MultiHash()", type_label=expression_statement];
756 [label="147_ function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {\n        bytes memory out = new bytes(34);\n        out[0] = byte(multihash.hashFunction);\n        out[1] = byte(multihash.digestSize);\n        uint8 i;\n        for (i = 0; i < 32; i++) {\n          out[i+2] = multihash.hash[i];\n        }\n        return out;\n    }\n756-function_definition-148-157", method="_combineMultiHash(MultiHash memory multihash)", type_label=function_definition];
770 [label="148_ bytes memory out = new bytes(34);\n770-new_variable-149-149", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
781 [label="149_ out[0] = byte(multihash.hashFunction);\n781-expression_statement-150-150", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
791 [label="150_ out[1] = byte(multihash.digestSize);\n791-expression_statement-151-151", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
801 [label="151_ uint8 i;\n801-new_variable-152-152", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
806 [label="152_ for(i < 32;;i++)\n806-for-153-155", method="_combineMultiHash(MultiHash memory multihash)", type_label=for];
2543 [label="152_ end_loop", method="_combineMultiHash(MultiHash memory multihash)", type_label=end_loop];
815 [label="152_ i++\n815-expression_statement-153-153", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
818 [label="153_ out[i+2] = multihash.hash[i];\n818-expression_statement-154-154", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
830 [label="155_ return out;\n830-return-156-156", method="_combineMultiHash(MultiHash memory multihash)", type_label=return];
832 [label="157_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n832-function_definition-158-162", method="bug_unchk7()", type_label=function_definition];
836 [label="158_ address payable addr_unchk7;\n836-new_variable-159-159", method="bug_unchk7()", type_label=new_variable];
841 [label="159_ if_!addr_unchk7.send (10 ether) || 1==1\n841-if-160-161", method="bug_unchk7()", type_label=if];
2578 [label="159_ end_if", method="bug_unchk7()", type_label=end_if];
857 [label="162_ function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {\n        require(source.length == 34, \"length of source must be 34\");\n        uint8 hashFunction = uint8(source[0]);\n        uint8 digestSize = uint8(source[1]);\n        bytes32 hash;\n        assembly {\n          hash := mload(add(source, 34))\n        }\n        return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n    }\n857-function_definition-163-176", method="_splitMultiHash(bytes memory source)", type_label=function_definition];
871 [label="163_ require(source.length == 34, \"length of source must be 34\");\n871-expression_statement-164-164", method="_splitMultiHash(bytes memory source)", type_label=expression_statement];
883 [label="164_ uint8 hashFunction = uint8(source[0]);\n883-new_variable-165-165", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
893 [label="165_ uint8 digestSize = uint8(source[1]);\n893-new_variable-166-166", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
903 [label="166_ bytes32 hash;\n903-new_variable-167-167", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
921 [label="170_ return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n921-return-171-175", method="_splitMultiHash(bytes memory source)", type_label=return];
935 [label="176_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n935-function_definition-177-179", method="my_func_unchk23(address payable dst)", type_label=function_definition];
944 [label="177_ dst.send(msg.value);\n944-expression_statement-178-178", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
974 [label="182_ function create(bytes calldata initData) external returns (address instance);\n974-function_definition-183-183", method="create(bytes calldata initData)", type_label=function_definition];
986 [label="183_ function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);\n986-function_definition-184-184", method="createSalty(bytes calldata initData,bytes32 salt)", type_label=function_definition];
1002 [label="184_ function getInitSelector() external view returns (bytes4 initSelector);\n1002-function_definition-185-185", method="getInitSelector()", type_label=function_definition];
1011 [label="185_ function getInstanceRegistry() external view returns (address instanceRegistry);\n1011-function_definition-186-186", method="getInstanceRegistry()", type_label=function_definition];
1020 [label="186_ function getTemplate() external view returns (address template);\n1020-function_definition-187-187", method="getTemplate()", type_label=function_definition];
1029 [label="187_ function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);\n1029-function_definition-188-188", method="getSaltyInstance(bytes calldata,bytes32 salt)", type_label=function_definition];
1045 [label="188_ function getNextInstance(bytes calldata) external view returns (address instance);\n1045-function_definition-189-189", method="getNextInstance(bytes calldata)", type_label=function_definition];
1057 [label="189_ function getInstanceCreator(address instance) external view returns (address creator);\n1057-function_definition-190-190", method="getInstanceCreator(address instance)", type_label=function_definition];
1070 [label="190_ function getInstanceType() external view returns (bytes4 instanceType);\n1070-function_definition-191-191", method="getInstanceType()", type_label=function_definition];
1079 [label="191_ function getInstanceCount() external view returns (uint256 count);\n1079-function_definition-192-192", method="getInstanceCount()", type_label=function_definition];
1088 [label="192_ function getInstance(uint256 index) external view returns (address instance);\n1088-function_definition-193-193", method="getInstance(uint256 index)", type_label=function_definition];
1101 [label="193_ function getInstances() external view returns (address[] memory instances);\n1101-function_definition-194-194", method="getInstances()", type_label=function_definition];
1111 [label="194_ function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n1111-function_definition-195-195", method="getPaginatedInstances(uint256 startIndex,uint256 endIndex)", type_label=function_definition];
1132 [label="197_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1132-function_definition-198-200", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
1141 [label="198_ dst.call.value(msg.value)(\"\");\n1141-expression_statement-199-199", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
1156 [label="200_ address private _factory;\n1156-new_variable-201-201", method="", type_label=new_variable];
1161 [label="201_ modifier initializeTemplate() {\n        _factory = msg.sender;\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n1161-expression_statement-202-208", method="", type_label=expression_statement];
1164 [label="202_ _factory = msg.sender;\n1164-expression_statement-203-203", method="", type_label=expression_statement];
1170 [label="203_ uint32 codeSize;\n1170-new_variable-204-204", method="", type_label=new_variable];
1184 [label="205_ require(codeSize == 0, \"must be called within contract constructor\");\n1184-expression_statement-206-206", method="", type_label=expression_statement];
1194 [label="206_ _;\n1194-expression_statement-207-207", method="", type_label=expression_statement];
1196 [label="208_ function getCreator() public view returns (address creator) {\n        creator = iFactory(_factory).getInstanceCreator(address(this));\n    }\n1196-function_definition-209-211", method="getCreator()", type_label=function_definition];
1206 [label="209_ creator = iFactory(_factory).getInstanceCreator(address(this));\n1206-expression_statement-210-210", method="getCreator()", type_label=expression_statement];
1220 [label="211_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n1220-function_definition-212-214", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
1228 [label="212_ callee.send(5 ether);\n1228-expression_statement-213-213", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
1236 [label="214_ function isCreator(address caller) public view returns (bool ok) {\n        ok = (caller == getCreator());\n    }\n1236-function_definition-215-217", method="isCreator(address caller)", type_label=function_definition];
1250 [label="215_ ok = (caller == getCreator());\n1250-expression_statement-216-216", method="isCreator(address caller)", type_label=expression_statement];
1258 [label="217_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n1258-function_definition-218-225", method="bug_unchk30()", type_label=function_definition];
1262 [label="218_ uint receivers_unchk30;\n1262-new_variable-219-219", method="bug_unchk30()", type_label=new_variable];
1267 [label="219_ address payable addr_unchk30;\n1267-new_variable-220-220", method="bug_unchk30()", type_label=new_variable];
1272 [label="220_ if\n1272-if-221-224", method="bug_unchk30()", type_label=if];
3009 [label="220_ end_if", method="bug_unchk30()", type_label=end_if];
1282 [label="221_ receivers_unchk30 +=1;\n1282-expression_statement-222-222", method="bug_unchk30()", type_label=expression_statement];
1289 [label="225_ function getFactory() public view returns (address factory) {\n        factory = _factory;\n    }\n1289-function_definition-226-228", method="getFactory()", type_label=function_definition];
1299 [label="226_ factory = _factory;\n1299-expression_statement-227-227", method="getFactory()", type_label=expression_statement];
1303 [label="228_ bool public payedOut_unchk8 = false;\n1303-new_variable-229-229", method="", type_label=new_variable];
1310 [label="229_ address payable public winner_unchk8;\n1310-new_variable-230-230", method="", type_label=new_variable];
1315 [label="230_ uint public winAmount_unchk8;\n1315-new_variable-231-231", method="", type_label=new_variable];
1320 [label="231_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1320-function_definition-232-236", method="sendToWinner_unchk8()", type_label=function_definition];
1324 [label="232_ require(!payedOut_unchk8);\n1324-expression_statement-233-233", method="sendToWinner_unchk8()", type_label=expression_statement];
1330 [label="233_ winner_unchk8.send(winAmount_unchk8);\n1330-expression_statement-234-234", method="sendToWinner_unchk8()", type_label=expression_statement];
1337 [label="234_ payedOut_unchk8 = true;\n1337-expression_statement-235-235", method="sendToWinner_unchk8()", type_label=expression_statement];
1360 [label="238_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n1360-function_definition-239-241", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
1368 [label="239_ callee.call.value(1 ether);\n1368-expression_statement-240-240", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
1392 [label="242_ function initialize(\n        address operator,\n        bytes memory multihash,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n        if (multihash.length != 0) {\n            MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);\n            ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);\n            ProofHashes._submitHash(multihashObj.hash);\n        }\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n        emit Initialized(operator, multihash, metadata);\n    }\n1392-function_definition-243-261", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=function_definition];
1407 [label="246_ initializeTemplate()\n1407-expression_statement-247-247", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1410 [label="247_ if_operator != address(0)\n1410-if-248-251", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3147 [label="247_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1417 [label="248_ Operated._setOperator(operator);\n1417-expression_statement-249-249", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1424 [label="249_ Operated._activateOperator();\n1424-expression_statement-250-250", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1429 [label="251_ if_multihash.length != 0\n1429-if-252-256", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3166 [label="251_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1436 [label="252_ MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);\n1436-new_variable-253-253", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=new_variable];
1449 [label="253_ ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);\n1449-expression_statement-254-254", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1462 [label="254_ ProofHashes._submitHash(multihashObj.hash);\n1462-expression_statement-255-255", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1471 [label="256_ if_metadata.length != 0\n1471-if-257-259", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3208 [label="256_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1478 [label="257_ EventMetadata._setMetadata(metadata);\n1478-expression_statement-258-258", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1493 [label="261_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1493-function_definition-262-263", method="bug_unchk39(address payable addr)", type_label=function_definition];
1501 [label="262_ addr.send (4 ether);\n1501-expression_statement-263-263", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1509 [label="263_ function submitHash(bytes32 multihash) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        ProofHashes._submitHash(multihash);\n    }\n1509-function_definition-264-267", method="submitHash(bytes32 multihash)", type_label=function_definition];
1517 [label="264_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1517-expression_statement-265-265", method="submitHash(bytes32 multihash)", type_label=expression_statement];
1541 [label="265_ ProofHashes._submitHash(multihash);\n1541-expression_statement-266-266", method="submitHash(bytes32 multihash)", type_label=expression_statement];
1548 [label="267_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1548-function_definition-268-270", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1557 [label="268_ dst.call.value(msg.value)(\"\");\n1557-expression_statement-269-269", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1572 [label="270_ function setMetadata(bytes memory metadata) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        EventMetadata._setMetadata(metadata);\n    }\n1572-function_definition-271-274", method="setMetadata(bytes memory metadata)", type_label=function_definition];
1580 [label="271_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1580-expression_statement-272-272", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1604 [label="272_ EventMetadata._setMetadata(metadata);\n1604-expression_statement-273-273", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1611 [label="274_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1611-function_definition-275-277", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1620 [label="275_ dst.send(msg.value);\n1620-expression_statement-276-276", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1629 [label="277_ function transferOperator(address operator) public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._transferOperator(operator);\n    }\n1629-function_definition-278-281", method="transferOperator(address operator)", type_label=function_definition];
1637 [label="278_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1637-expression_statement-279-279", method="transferOperator(address operator)", type_label=expression_statement];
1652 [label="279_ Operated._transferOperator(operator);\n1652-expression_statement-280-280", method="transferOperator(address operator)", type_label=expression_statement];
1659 [label="281_ bool public payedOut_unchk44 = false;\n1659-new_variable-282-282", method="", type_label=new_variable];
1666 [label="282_ address payable public winner_unchk44;\n1666-new_variable-283-283", method="", type_label=new_variable];
1671 [label="283_ uint public winAmount_unchk44;\n1671-new_variable-284-284", method="", type_label=new_variable];
1676 [label="284_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1676-function_definition-285-289", method="sendToWinner_unchk44()", type_label=function_definition];
1680 [label="285_ require(!payedOut_unchk44);\n1680-expression_statement-286-286", method="sendToWinner_unchk44()", type_label=expression_statement];
1686 [label="286_ winner_unchk44.send(winAmount_unchk44);\n1686-expression_statement-287-287", method="sendToWinner_unchk44()", type_label=expression_statement];
1693 [label="287_ payedOut_unchk44 = true;\n1693-expression_statement-288-288", method="sendToWinner_unchk44()", type_label=expression_statement];
1698 [label="289_ function renounceOperator() public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._renounceOperator();\n    }\n1698-function_definition-290-293", method="renounceOperator()", type_label=function_definition];
1702 [label="290_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1702-expression_statement-291-291", method="renounceOperator()", type_label=expression_statement];
1717 [label="291_ Operated._renounceOperator();\n1717-expression_statement-292-292", method="renounceOperator()", type_label=expression_statement];
1722 [label="293_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1722-function_definition-294-302", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1726 [label="294_ address payable addr_unchk40;\n1726-new_variable-295-295", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1731 [label="295_ if\n1731-if-296-301", method="UncheckedExternalCall_unchk40()", type_label=if];
3468 [label="295_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
738;
1287;
1485;
1741;
20 -> 24  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
24 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
103 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 1849  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
133 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
260 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 2124  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
403 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
453 -> 460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
504 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
566 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 2331  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
627 -> 631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
631 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
756 -> 770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
791 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
801 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 818  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
806 -> 2543  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2543 -> 830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 806  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
818 -> 815  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
830 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
832 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 2578  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
857 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
935 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 1141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 1161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1164 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1184 -> 1194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1196 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 1250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1258 -> 1262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1262 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 1272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1272 -> 1282  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3009 -> 1289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1282 -> 3009  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1289 -> 1299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1303 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1320 -> 1324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1324 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1330 -> 1337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1360 -> 1368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 1417  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1410 -> 3147  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3147 -> 1429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1417 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1424 -> 3147  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1429 -> 1436  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1429 -> 3166  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3166 -> 1471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1436 -> 1449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1449 -> 1462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1462 -> 3166  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1471 -> 1478  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1471 -> 3208  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3208 -> 1485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1478 -> 3208  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1493 -> 1501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1509 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1517 -> 1541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1548 -> 1557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 1580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1580 -> 1604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1611 -> 1620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1629 -> 1637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1637 -> 1652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1659 -> 1666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1666 -> 1671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1676 -> 1680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1680 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 1693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1698 -> 1702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1702 -> 1717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1722 -> 1726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1726 -> 1731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
738 -> 2465  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1287 -> 3009  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1741 -> 3468  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
