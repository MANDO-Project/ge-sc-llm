digraph  {
13 [label="3_ function bug_unchk42() public{\nuint receivers_unchk42;\naddress payable addr_unchk42;\nif (!addr_unchk42.send(42 ether))\n	{receivers_unchk42 +=1;}\nelse\n	{revert();}\n}\n13-function_definition-4-11", method="bug_unchk42()", type_label=function_definition];
17 [label="4_ uint receivers_unchk42;\n17-new_variable-5-5", method="bug_unchk42()", type_label=new_variable];
22 [label="5_ address payable addr_unchk42;\n22-new_variable-6-6", method="bug_unchk42()", type_label=new_variable];
27 [label="6_ if\n27-if-7-10", method="bug_unchk42()", type_label=if];
1335 [label="6_ end_if", method="bug_unchk42()", type_label=end_if];
37 [label="7_ receivers_unchk42 +=1;\n37-expression_statement-8-8", method="bug_unchk42()", type_label=expression_statement];
44 [label="11_ bool private stopped;\n44-new_variable-12-12", method="", type_label=new_variable];
49 [label="12_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n49-function_definition-13-15", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
57 [label="13_ callee.send(5 ether);\n57-expression_statement-14-14", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
65 [label="15_ address private _owner;\n65-new_variable-16-16", method="", type_label=new_variable];
70 [label="16_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n70-function_definition-17-21", method="bug_unchk43()", type_label=function_definition];
74 [label="17_ address payable addr_unchk43;\n74-new_variable-18-18", method="bug_unchk43()", type_label=new_variable];
79 [label="18_ if_!addr_unchk43.send (10 ether) || 1==1\n79-if-19-20", method="bug_unchk43()", type_label=if];
1387 [label="18_ end_if", method="bug_unchk43()", type_label=end_if];
95 [label="21_ address private _master;\n95-new_variable-22-22", method="", type_label=new_variable];
100 [label="22_ bool public payedOut_unchk44 = false;\n100-new_variable-23-23", method="", type_label=new_variable];
107 [label="23_ address payable public winner_unchk44;\n107-new_variable-24-24", method="", type_label=new_variable];
112 [label="24_ uint public winAmount_unchk44;\n112-new_variable-25-25", method="", type_label=new_variable];
117 [label="25_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n117-function_definition-26-30", method="sendToWinner_unchk44()", type_label=function_definition];
121 [label="26_ require(!payedOut_unchk44);\n121-expression_statement-27-27", method="sendToWinner_unchk44()", type_label=expression_statement];
127 [label="27_ winner_unchk44.send(winAmount_unchk44);\n127-expression_statement-28-28", method="sendToWinner_unchk44()", type_label=expression_statement];
134 [label="28_ payedOut_unchk44 = true;\n134-expression_statement-29-29", method="sendToWinner_unchk44()", type_label=expression_statement];
141 [label="31_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n141-function_definition-32-40", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
145 [label="32_ address payable addr_unchk40;\n145-new_variable-33-33", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
150 [label="33_ if\n150-if-34-39", method="UncheckedExternalCall_unchk40()", type_label=if];
1458 [label="33_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
163 [label="41_ bool public payedOut_unchk33 = false;\n163-new_variable-42-42", method="", type_label=new_variable];
170 [label="42_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n170-function_definition-43-46", method="withdrawLeftOver_unchk33()", type_label=function_definition];
174 [label="43_ require(payedOut_unchk33);\n174-expression_statement-44-44", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
179 [label="44_ msg.sender.send(address(this).balance);\n179-expression_statement-45-45", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
202 [label="47_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n202-function_definition-48-49", method="bug_unchk27(address payable addr)", type_label=function_definition];
210 [label="48_ addr.send (42 ether);\n210-expression_statement-49-49", method="bug_unchk27(address payable addr)", type_label=expression_statement];
230 [label="52_ stopped = false;\n230-expression_statement-53-53", method="", type_label=expression_statement];
235 [label="53_ _owner = msg.sender;\n235-expression_statement-54-54", method="", type_label=expression_statement];
241 [label="54_ _master = msg.sender;\n241-expression_statement-55-55", method="", type_label=expression_statement];
263 [label="58_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n263-function_definition-59-61", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
271 [label="59_ callee.call.value(1 ether);\n271-expression_statement-60-60", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
281 [label="61_ function owner() public view returns (address)\n    {\n        return _owner;\n    }\n281-function_definition-62-65", method="owner()", type_label=function_definition];
290 [label="63_ return _owner;\n290-return-64-64", method="owner()", type_label=return];
292 [label="65_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n292-function_definition-66-67", method="bug_unchk3(address payable addr)", type_label=function_definition];
300 [label="66_ addr.send (42 ether);\n300-expression_statement-67-67", method="bug_unchk3(address payable addr)", type_label=expression_statement];
308 [label="67_ function master() public view returns (address)\n    {\n        return _master;\n    }\n308-function_definition-68-71", method="master()", type_label=function_definition];
317 [label="69_ return _master;\n317-return-70-70", method="master()", type_label=return];
319 [label="71_ bool public payedOut_unchk9 = false;\n319-new_variable-72-72", method="", type_label=new_variable];
326 [label="72_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n326-function_definition-73-76", method="withdrawLeftOver_unchk9()", type_label=function_definition];
330 [label="73_ require(payedOut_unchk9);\n330-expression_statement-74-74", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
335 [label="74_ msg.sender.send(address(this).balance);\n335-expression_statement-75-75", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
348 [label="76_ modifier onlyOwner()\n    {\n        require(isOwner());\n        _;\n    }\n348-expression_statement-77-81", method="", type_label=expression_statement];
351 [label="78_ require(isOwner());\n351-expression_statement-79-79", method="", type_label=expression_statement];
357 [label="79_ _;\n357-expression_statement-80-80", method="", type_label=expression_statement];
359 [label="81_ modifier onlyMaster()\n    {\n        require(isMaster() || isOwner());\n        _;\n    }\n359-expression_statement-82-86", method="", type_label=expression_statement];
362 [label="83_ require(isMaster() || isOwner());\n362-expression_statement-84-84", method="", type_label=expression_statement];
371 [label="84_ _;\n371-expression_statement-85-85", method="", type_label=expression_statement];
373 [label="86_ modifier onlyWhenNotStopped()\n    {\n        require(!isStopped());\n        _;\n    }\n373-expression_statement-87-91", method="", type_label=expression_statement];
376 [label="88_ require(!isStopped());\n376-expression_statement-89-89", method="", type_label=expression_statement];
383 [label="89_ _;\n383-expression_statement-90-90", method="", type_label=expression_statement];
385 [label="91_ function isOwner() public view returns (bool)\n    {\n        return msg.sender == _owner;\n    }\n385-function_definition-92-95", method="isOwner()", type_label=function_definition];
394 [label="93_ return msg.sender == _owner;\n394-return-94-94", method="isOwner()", type_label=return];
400 [label="95_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n400-function_definition-96-98", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
408 [label="96_ callee.call.value(1 ether);\n408-expression_statement-97-97", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
418 [label="98_ function isMaster() public view returns (bool)\n    {\n        return msg.sender == _master;\n    }\n418-function_definition-99-102", method="isMaster()", type_label=function_definition];
427 [label="100_ return msg.sender == _master;\n427-return-101-101", method="isMaster()", type_label=return];
433 [label="102_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n433-function_definition-103-107", method="bug_unchk19()", type_label=function_definition];
437 [label="103_ address payable addr_unchk19;\n437-new_variable-104-104", method="bug_unchk19()", type_label=new_variable];
442 [label="104_ if_!addr_unchk19.send (10 ether) || 1==1\n442-if-105-106", method="bug_unchk19()", type_label=if];
1750 [label="104_ end_if", method="bug_unchk19()", type_label=end_if];
458 [label="107_ function transferOwnership(address newOwner) external onlyOwner\n    {\n        _transferOwnership(newOwner);\n    }\n458-function_definition-108-111", method="transferOwnership(address newOwner)", type_label=function_definition];
465 [label="107_ onlyOwner\n465-expression_statement-108-108", method="transferOwnership(address newOwner)", type_label=expression_statement];
468 [label="109_ _transferOwnership(newOwner);\n468-expression_statement-110-110", method="transferOwnership(address newOwner)", type_label=expression_statement];
473 [label="111_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n473-function_definition-112-114", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
481 [label="112_ callee.send(5 ether);\n481-expression_statement-113-113", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
489 [label="114_ function transferMasterRole(address newMaster) external onlyOwner\n    {\n        _transferMasterRole(newMaster);\n    }\n489-function_definition-115-118", method="transferMasterRole(address newMaster)", type_label=function_definition];
496 [label="114_ onlyOwner\n496-expression_statement-115-115", method="transferMasterRole(address newMaster)", type_label=expression_statement];
499 [label="116_ _transferMasterRole(newMaster);\n499-expression_statement-117-117", method="transferMasterRole(address newMaster)", type_label=expression_statement];
504 [label="118_ bool public payedOut_unchk20 = false;\n504-new_variable-119-119", method="", type_label=new_variable];
511 [label="119_ address payable public winner_unchk20;\n511-new_variable-120-120", method="", type_label=new_variable];
516 [label="120_ uint public winAmount_unchk20;\n516-new_variable-121-121", method="", type_label=new_variable];
521 [label="121_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n521-function_definition-122-126", method="sendToWinner_unchk20()", type_label=function_definition];
525 [label="122_ require(!payedOut_unchk20);\n525-expression_statement-123-123", method="sendToWinner_unchk20()", type_label=expression_statement];
531 [label="123_ winner_unchk20.send(winAmount_unchk20);\n531-expression_statement-124-124", method="sendToWinner_unchk20()", type_label=expression_statement];
538 [label="124_ payedOut_unchk20 = true;\n538-expression_statement-125-125", method="sendToWinner_unchk20()", type_label=expression_statement];
543 [label="126_ function isStopped() public view returns (bool)\n    {\n        return stopped;\n    }\n543-function_definition-127-130", method="isStopped()", type_label=function_definition];
552 [label="128_ return stopped;\n552-return-129-129", method="isStopped()", type_label=return];
554 [label="130_ bool public payedOut_unchk32 = false;\n554-new_variable-131-131", method="", type_label=new_variable];
561 [label="131_ address payable public winner_unchk32;\n561-new_variable-132-132", method="", type_label=new_variable];
566 [label="132_ uint public winAmount_unchk32;\n566-new_variable-133-133", method="", type_label=new_variable];
571 [label="133_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n571-function_definition-134-138", method="sendToWinner_unchk32()", type_label=function_definition];
575 [label="134_ require(!payedOut_unchk32);\n575-expression_statement-135-135", method="sendToWinner_unchk32()", type_label=expression_statement];
581 [label="135_ winner_unchk32.send(winAmount_unchk32);\n581-expression_statement-136-136", method="sendToWinner_unchk32()", type_label=expression_statement];
588 [label="136_ payedOut_unchk32 = true;\n588-expression_statement-137-137", method="sendToWinner_unchk32()", type_label=expression_statement];
593 [label="138_ function stop() public onlyOwner\n    {\n        _stop();\n    }\n593-function_definition-139-142", method="stop()", type_label=function_definition];
596 [label="138_ onlyOwner\n596-expression_statement-139-139", method="stop()", type_label=expression_statement];
599 [label="140_ _stop();\n599-expression_statement-141-141", method="stop()", type_label=expression_statement];
602 [label="142_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n602-function_definition-143-145", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
610 [label="143_ callee.send(5 ether);\n610-expression_statement-144-144", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
618 [label="145_ function start() public onlyOwner\n    {\n        _start();\n    }\n618-function_definition-146-149", method="start()", type_label=function_definition];
621 [label="145_ onlyOwner\n621-expression_statement-146-146", method="start()", type_label=expression_statement];
624 [label="147_ _start();\n624-expression_statement-148-148", method="start()", type_label=expression_statement];
627 [label="149_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n627-function_definition-150-154", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
643 [label="150_ uint64 subpot_unchk46 = 3 ether;\n643-new_variable-151-151", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
650 [label="151_ winner_unchk46.send(subpot_unchk46);\n650-expression_statement-152-152", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
657 [label="152_ subpot_unchk46= 0;\n657-expression_statement-153-153", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
661 [label="154_ function _transferOwnership(address newOwner) internal\n    {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n661-function_definition-155-160", method="_transferOwnership(address newOwner)", type_label=function_definition];
669 [label="156_ require(newOwner != address(0));\n669-expression_statement-157-157", method="_transferOwnership(address newOwner)", type_label=expression_statement];
684 [label="158_ _owner = newOwner;\n684-expression_statement-159-159", method="_transferOwnership(address newOwner)", type_label=expression_statement];
688 [label="160_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n688-function_definition-161-169", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
692 [label="161_ address payable addr_unchk4;\n692-new_variable-162-162", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
697 [label="162_ if\n697-if-163-168", method="UncheckedExternalCall_unchk4()", type_label=if];
2005 [label="162_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
708 [label="169_ function _transferMasterRole(address newMaster) internal\n    {\n        require(newMaster != address(0));\n        emit MasterRoleTransferred(_master, newMaster);\n        _master = newMaster;\n    }\n708-function_definition-170-175", method="_transferMasterRole(address newMaster)", type_label=function_definition];
716 [label="171_ require(newMaster != address(0));\n716-expression_statement-172-172", method="_transferMasterRole(address newMaster)", type_label=expression_statement];
731 [label="173_ _master = newMaster;\n731-expression_statement-174-174", method="_transferMasterRole(address newMaster)", type_label=expression_statement];
735 [label="175_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n735-function_definition-176-180", method="bug_unchk7()", type_label=function_definition];
739 [label="176_ address payable addr_unchk7;\n739-new_variable-177-177", method="bug_unchk7()", type_label=new_variable];
744 [label="177_ if_!addr_unchk7.send (10 ether) || 1==1\n744-if-178-179", method="bug_unchk7()", type_label=if];
2052 [label="177_ end_if", method="bug_unchk7()", type_label=end_if];
760 [label="180_ function _stop() internal\n    {\n        emit Stopped();\n        stopped = true;\n    }\n760-function_definition-181-185", method="_stop()", type_label=function_definition];
766 [label="183_ stopped = true;\n766-expression_statement-184-184", method="_stop()", type_label=expression_statement];
771 [label="185_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n771-function_definition-186-188", method="my_func_unchk23(address payable dst)", type_label=function_definition];
780 [label="186_ dst.send(msg.value);\n780-expression_statement-187-187", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
789 [label="188_ function _start() internal\n    {\n        emit Started();\n        stopped = false;\n    }\n789-function_definition-189-193", method="_start()", type_label=function_definition];
795 [label="191_ stopped = false;\n795-expression_statement-192-192", method="_start()", type_label=expression_statement];
800 [label="193_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n800-function_definition-194-196", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
808 [label="194_ callee.send(5 ether);\n808-expression_statement-195-195", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
822 [label="199_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n822-function_definition-200-202", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
831 [label="200_ dst.call.value(msg.value)(\"\");\n831-expression_statement-201-201", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
846 [label="202_ mapping(string => string) private btc;\n846-new_variable-203-203", method="", type_label=new_variable];
853 [label="203_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n853-function_definition-204-206", method="withdrawBal_unchk17()", type_label=function_definition];
857 [label="204_ uint64 Balances_unchk17 = 0;\n857-new_variable-205-205", method="withdrawBal_unchk17()", type_label=new_variable];
863 [label="205_ msg.sender.send(Balances_unchk17);\n863-expression_statement-206-206", method="withdrawBal_unchk17()", type_label=expression_statement];
872 [label="206_ mapping(string => address) private eth;\n872-new_variable-207-207", method="", type_label=new_variable];
879 [label="207_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n879-function_definition-208-212", method="bug_unchk31()", type_label=function_definition];
883 [label="208_ address payable addr_unchk31;\n883-new_variable-209-209", method="bug_unchk31()", type_label=new_variable];
888 [label="209_ if_!addr_unchk31.send (10 ether) || 1==1\n888-if-210-211", method="bug_unchk31()", type_label=if];
2196 [label="209_ end_if", method="bug_unchk31()", type_label=end_if];
918 [label="213_ bool public payedOut_unchk45 = false;\n918-new_variable-214-214", method="", type_label=new_variable];
925 [label="214_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n925-function_definition-215-218", method="withdrawLeftOver_unchk45()", type_label=function_definition];
929 [label="215_ require(payedOut_unchk45);\n929-expression_statement-216-216", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
934 [label="216_ msg.sender.send(address(this).balance);\n934-expression_statement-217-217", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
957 [label="219_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n957-function_definition-220-222", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
965 [label="220_ callee.call.value(1 ether);\n965-expression_statement-221-221", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
981 [label="223_ function version() external pure returns(string memory)\n    {\n        return '1.0.0';\n    }\n981-function_definition-224-227", method="version()", type_label=function_definition];
990 [label="225_ return '1.0.0';\n990-return-226-226", method="version()", type_label=return];
993 [label="227_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n993-function_definition-228-235", method="bug_unchk30()", type_label=function_definition];
997 [label="228_ uint receivers_unchk30;\n997-new_variable-229-229", method="bug_unchk30()", type_label=new_variable];
1002 [label="229_ address payable addr_unchk30;\n1002-new_variable-230-230", method="bug_unchk30()", type_label=new_variable];
1007 [label="230_ if\n1007-if-231-234", method="bug_unchk30()", type_label=if];
2315 [label="230_ end_if", method="bug_unchk30()", type_label=end_if];
1017 [label="231_ receivers_unchk30 +=1;\n1017-expression_statement-232-232", method="bug_unchk30()", type_label=expression_statement];
1024 [label="235_ function getAddress(string calldata account) external view returns (string memory, address)\n    {\n        return (btc[account], eth[account]);\n    }\n1024-function_definition-236-239", method="getAddress(string calldata account)", type_label=function_definition];
1040 [label="237_ return (btc[account], eth[account]);\n1040-return-238-238", method="getAddress(string calldata account)", type_label=return];
1048 [label="239_ bool public payedOut_unchk8 = false;\n1048-new_variable-240-240", method="", type_label=new_variable];
1055 [label="240_ address payable public winner_unchk8;\n1055-new_variable-241-241", method="", type_label=new_variable];
1060 [label="241_ uint public winAmount_unchk8;\n1060-new_variable-242-242", method="", type_label=new_variable];
1065 [label="242_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1065-function_definition-243-247", method="sendToWinner_unchk8()", type_label=function_definition];
1069 [label="243_ require(!payedOut_unchk8);\n1069-expression_statement-244-244", method="sendToWinner_unchk8()", type_label=expression_statement];
1075 [label="244_ winner_unchk8.send(winAmount_unchk8);\n1075-expression_statement-245-245", method="sendToWinner_unchk8()", type_label=expression_statement];
1082 [label="245_ payedOut_unchk8 = true;\n1082-expression_statement-246-246", method="sendToWinner_unchk8()", type_label=expression_statement];
1087 [label="247_ function setAddress(string calldata account, string calldata btcAddress, address ethAddress) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(account).length > 0);\n        btc[account] = btcAddress;\n        eth[account] = ethAddress;\n        emit SetAddress(account, btcAddress, ethAddress);\n    }\n1087-function_definition-248-254", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=function_definition];
1102 [label="247_ onlyMaster\n1102-expression_statement-248-248", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
1104 [label="247_ onlyWhenNotStopped\n1104-expression_statement-248-248", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
1107 [label="249_ require(bytes(account).length > 0);\n1107-expression_statement-250-250", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
1118 [label="250_ btc[account] = btcAddress;\n1118-expression_statement-251-251", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
1124 [label="251_ eth[account] = ethAddress;\n1124-expression_statement-252-252", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
1138 [label="254_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1138-function_definition-255-256", method="bug_unchk39(address payable addr)", type_label=function_definition];
1146 [label="255_ addr.send (4 ether);\n1146-expression_statement-256-256", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1154 [label="256_ function updateAccount(string calldata from, string calldata to) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(from).length > 0);\n        require(bytes(to).length > 0);\n        btc[to] = btc[from];\n        eth[to] = eth[from];\n        btc[from] = '';\n        eth[from] = address(0);\n        emit UpdateAddress(from, to);\n    }\n1154-function_definition-257-266", method="updateAccount(string calldata from,string calldata to)", type_label=function_definition];
1165 [label="256_ onlyMaster\n1165-expression_statement-257-257", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1167 [label="256_ onlyWhenNotStopped\n1167-expression_statement-257-257", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1170 [label="258_ require(bytes(from).length > 0);\n1170-expression_statement-259-259", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1181 [label="259_ require(bytes(to).length > 0);\n1181-expression_statement-260-260", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1192 [label="260_ btc[to] = btc[from];\n1192-expression_statement-261-261", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1200 [label="261_ eth[to] = eth[from];\n1200-expression_statement-262-262", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1208 [label="262_ btc[from] = '';\n1208-expression_statement-263-263", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1215 [label="263_ eth[from] = address(0);\n1215-expression_statement-264-264", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1229 [label="266_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1229-function_definition-267-269", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1238 [label="267_ dst.call.value(msg.value)(\"\");\n1238-expression_statement-268-268", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1253 [label="269_ function deleteAccount(string calldata account) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(account).length > 0);\n        btc[account] = '';\n        eth[account] = address(0);\n        emit DeleteAddress(account);\n    }\n1253-function_definition-270-276", method="deleteAccount(string calldata account)", type_label=function_definition];
1260 [label="269_ onlyMaster\n1260-expression_statement-270-270", method="deleteAccount(string calldata account)", type_label=expression_statement];
1262 [label="269_ onlyWhenNotStopped\n1262-expression_statement-270-270", method="deleteAccount(string calldata account)", type_label=expression_statement];
1265 [label="271_ require(bytes(account).length > 0);\n1265-expression_statement-272-272", method="deleteAccount(string calldata account)", type_label=expression_statement];
1276 [label="272_ btc[account] = '';\n1276-expression_statement-273-273", method="deleteAccount(string calldata account)", type_label=expression_statement];
1283 [label="273_ eth[account] = address(0);\n1283-expression_statement-274-274", method="deleteAccount(string calldata account)", type_label=expression_statement];
1295 [label="276_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1295-function_definition-277-279", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1304 [label="277_ dst.send(msg.value);\n1304-expression_statement-278-278", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
42;
160;
707;
1022;
13 -> 17  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
17 -> 22  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
22 -> 27  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
27 -> 37  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1335 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 1335  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
49 -> 57  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
70 -> 74  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
74 -> 79  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 1387  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
95 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
117 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
145 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
281 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
290 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
292 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
326 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
351 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
394 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
400 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
433 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
442 -> 1750  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
458 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
552 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
554 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
627 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
692 -> 697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
708 -> 716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 2052  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
760 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
771 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
800 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
853 -> 857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
879 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
888 -> 2196  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
925 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
990 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
993 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 1007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1007 -> 1017  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2315 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 2315  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1024 -> 1040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1040 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1048 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1065 -> 1069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1069 -> 1075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 1082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 1104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1154 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1170 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 1192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 1200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1200 -> 1208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 1215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1229 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 1283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 1335  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
160 -> 1458  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
707 -> 2005  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1022 -> 2315  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
