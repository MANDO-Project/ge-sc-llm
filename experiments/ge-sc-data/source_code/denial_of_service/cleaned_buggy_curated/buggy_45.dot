digraph  {
13 [label="2_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n13-function_definition-3-5", method="my_func_unchk35(address payable dst)", type_label=function_definition];
22 [label="3_ dst.send(msg.value);\n22-expression_statement-4-4", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
37 [label="6_ bool public payedOut_unchk44 = false;\n37-new_variable-7-7", method="", type_label=new_variable];
44 [label="7_ address payable public winner_unchk44;\n44-new_variable-8-8", method="", type_label=new_variable];
49 [label="8_ uint public winAmount_unchk44;\n49-new_variable-9-9", method="", type_label=new_variable];
54 [label="9_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n54-function_definition-10-14", method="sendToWinner_unchk44()", type_label=function_definition];
58 [label="10_ require(!payedOut_unchk44);\n58-expression_statement-11-11", method="sendToWinner_unchk44()", type_label=expression_statement];
64 [label="11_ winner_unchk44.send(winAmount_unchk44);\n64-expression_statement-12-12", method="sendToWinner_unchk44()", type_label=expression_statement];
71 [label="12_ payedOut_unchk44 = true;\n71-expression_statement-13-13", method="sendToWinner_unchk44()", type_label=expression_statement];
82 [label="15_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n82-function_definition-16-24", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
86 [label="16_ address payable addr_unchk40;\n86-new_variable-17-17", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
91 [label="17_ if\n91-if-18-23", method="UncheckedExternalCall_unchk40()", type_label=if];
1355 [label="17_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
104 [label="25_ bool public payedOut_unchk33 = false;\n104-new_variable-26-26", method="", type_label=new_variable];
111 [label="26_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n111-function_definition-27-30", method="withdrawLeftOver_unchk33()", type_label=function_definition];
115 [label="27_ require(payedOut_unchk33);\n115-expression_statement-28-28", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
120 [label="28_ msg.sender.send(address(this).balance);\n120-expression_statement-29-29", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
139 [label="31_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n139-function_definition-32-33", method="bug_unchk27(address payable addr)", type_label=function_definition];
147 [label="32_ addr.send (42 ether);\n147-expression_statement-33-33", method="bug_unchk27(address payable addr)", type_label=expression_statement];
161 [label="34_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n161-function_definition-35-39", method="bug_unchk31()", type_label=function_definition];
165 [label="35_ address payable addr_unchk31;\n165-new_variable-36-36", method="bug_unchk31()", type_label=new_variable];
170 [label="36_ if_!addr_unchk31.send (10 ether) || 1==1\n170-if-37-38", method="bug_unchk31()", type_label=if];
1434 [label="36_ end_if", method="bug_unchk31()", type_label=end_if];
196 [label="40_ bool public payedOut_unchk45 = false;\n196-new_variable-41-41", method="", type_label=new_variable];
203 [label="41_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n203-function_definition-42-45", method="withdrawLeftOver_unchk45()", type_label=function_definition];
207 [label="42_ require(payedOut_unchk45);\n207-expression_statement-43-43", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
212 [label="43_ msg.sender.send(address(this).balance);\n212-expression_statement-44-44", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
235 [label="46_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n235-function_definition-47-49", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
243 [label="47_ callee.call.value(1 ether);\n243-expression_statement-48-48", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
272 [label="58_ struct Guess {\n        mapping (address => PaidStatus) players;\n        uint guesses_number;\n    }\n272-expression_statement-59-62", method="Guess()", type_label=expression_statement];
285 [label="62_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n285-function_definition-63-65", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
294 [label="63_ dst.call.value(msg.value)(\"\");\n294-expression_statement-64-64", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
309 [label="65_ address payable public owner;\n309-new_variable-66-66", method="", type_label=new_variable];
314 [label="66_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n314-function_definition-67-69", method="withdrawBal_unchk17()", type_label=function_definition];
318 [label="67_ uint64 Balances_unchk17 = 0;\n318-new_variable-68-68", method="withdrawBal_unchk17()", type_label=new_variable];
324 [label="68_ msg.sender.send(Balances_unchk17);\n324-expression_statement-69-69", method="withdrawBal_unchk17()", type_label=expression_statement];
333 [label="69_ address public oracle;\n333-new_variable-70-70", method="", type_label=new_variable];
338 [label="70_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n338-function_definition-71-73", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
346 [label="71_ callee.call.value(1 ether);\n346-expression_statement-72-72", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
356 [label="73_ State public state;\n356-new_variable-74-74", method="", type_label=new_variable];
362 [label="74_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n362-function_definition-75-76", method="bug_unchk3(address payable addr)", type_label=function_definition];
370 [label="75_ addr.send (42 ether);\n370-expression_statement-76-76", method="bug_unchk3(address payable addr)", type_label=expression_statement];
378 [label="76_ mapping (uint => Guess) public guesses;\n378-new_variable-77-77", method="", type_label=new_variable];
386 [label="77_ bool public payedOut_unchk9 = false;\n386-new_variable-78-78", method="", type_label=new_variable];
393 [label="78_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n393-function_definition-79-82", method="withdrawLeftOver_unchk9()", type_label=function_definition];
397 [label="79_ require(payedOut_unchk9);\n397-expression_statement-80-80", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
402 [label="80_ msg.sender.send(address(this).balance);\n402-expression_statement-81-81", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
415 [label="82_ uint256 public bet;\n415-new_variable-83-83", method="", type_label=new_variable];
420 [label="83_ uint256 splitJackpot;\n420-new_variable-84-84", method="", type_label=new_variable];
424 [label="84_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n424-function_definition-85-87", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
432 [label="85_ callee.call.value(1 ether);\n432-expression_statement-86-86", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
442 [label="87_ uint public result;\n442-new_variable-88-88", method="", type_label=new_variable];
447 [label="88_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n447-function_definition-89-93", method="bug_unchk19()", type_label=function_definition];
451 [label="89_ address payable addr_unchk19;\n451-new_variable-90-90", method="bug_unchk19()", type_label=new_variable];
456 [label="90_ if_!addr_unchk19.send (10 ether) || 1==1\n456-if-91-92", method="bug_unchk19()", type_label=if];
1720 [label="90_ end_if", method="bug_unchk19()", type_label=end_if];
472 [label="93_ uint256 public initialPrice;\n472-new_variable-94-94", method="", type_label=new_variable];
477 [label="94_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n477-function_definition-95-97", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
485 [label="95_ callee.send(5 ether);\n485-expression_statement-96-96", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
493 [label="97_ uint256 public finalPrice;\n493-new_variable-98-98", method="", type_label=new_variable];
498 [label="98_ bool public payedOut_unchk20 = false;\n498-new_variable-99-99", method="", type_label=new_variable];
505 [label="99_ address payable public winner_unchk20;\n505-new_variable-100-100", method="", type_label=new_variable];
510 [label="100_ uint public winAmount_unchk20;\n510-new_variable-101-101", method="", type_label=new_variable];
515 [label="101_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n515-function_definition-102-106", method="sendToWinner_unchk20()", type_label=function_definition];
519 [label="102_ require(!payedOut_unchk20);\n519-expression_statement-103-103", method="sendToWinner_unchk20()", type_label=expression_statement];
525 [label="103_ winner_unchk20.send(winAmount_unchk20);\n525-expression_statement-104-104", method="sendToWinner_unchk20()", type_label=expression_statement];
532 [label="104_ payedOut_unchk20 = true;\n532-expression_statement-105-105", method="sendToWinner_unchk20()", type_label=expression_statement];
537 [label="106_ uint constant UP = 1;\n537-new_variable-107-107", method="", type_label=new_variable];
542 [label="107_ bool public payedOut_unchk32 = false;\n542-new_variable-108-108", method="", type_label=new_variable];
549 [label="108_ address payable public winner_unchk32;\n549-new_variable-109-109", method="", type_label=new_variable];
554 [label="109_ uint public winAmount_unchk32;\n554-new_variable-110-110", method="", type_label=new_variable];
559 [label="110_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n559-function_definition-111-115", method="sendToWinner_unchk32()", type_label=function_definition];
563 [label="111_ require(!payedOut_unchk32);\n563-expression_statement-112-112", method="sendToWinner_unchk32()", type_label=expression_statement];
569 [label="112_ winner_unchk32.send(winAmount_unchk32);\n569-expression_statement-113-113", method="sendToWinner_unchk32()", type_label=expression_statement];
576 [label="113_ payedOut_unchk32 = true;\n576-expression_statement-114-114", method="sendToWinner_unchk32()", type_label=expression_statement];
581 [label="115_ uint constant DOWN = 0;\n581-new_variable-116-116", method="", type_label=new_variable];
586 [label="116_ modifier byPlayer(){\n        require(msg.sender != oracle);\n        _;\n    }\n586-expression_statement-117-120", method="", type_label=expression_statement];
589 [label="117_ require(msg.sender != oracle);\n589-expression_statement-118-118", method="", type_label=expression_statement];
598 [label="118_ _;\n598-expression_statement-119-119", method="", type_label=expression_statement];
600 [label="120_ modifier byOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n600-expression_statement-121-124", method="", type_label=expression_statement];
603 [label="121_ require(msg.sender == owner);\n603-expression_statement-122-122", method="", type_label=expression_statement];
612 [label="122_ _;\n612-expression_statement-123-123", method="", type_label=expression_statement];
614 [label="124_ modifier byOracle(){\n        require(msg.sender == oracle);\n        _;\n    }\n614-expression_statement-125-128", method="", type_label=expression_statement];
617 [label="125_ require(msg.sender == oracle);\n617-expression_statement-126-126", method="", type_label=expression_statement];
626 [label="126_ _;\n626-expression_statement-127-127", method="", type_label=expression_statement];
628 [label="128_ modifier inState(State expected) {\n        require(state == expected);\n        _;\n    }\n628-expression_statement-129-132", method="", type_label=expression_statement];
636 [label="129_ require(state == expected);\n636-expression_statement-130-130", method="", type_label=expression_statement];
643 [label="130_ _;\n643-expression_statement-131-131", method="", type_label=expression_statement];
651 [label="133_ require(_bet > 0);\n651-expression_statement-134-134", method="", type_label=expression_statement];
658 [label="134_ owner = msg.sender;\n658-expression_statement-135-135", method="", type_label=expression_statement];
664 [label="135_ state = State.SETUP;\n664-expression_statement-136-136", method="", type_label=expression_statement];
670 [label="136_ bet = _bet;\n670-expression_statement-137-137", method="", type_label=expression_statement];
678 [label="139_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n678-function_definition-140-142", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
686 [label="140_ callee.send(5 ether);\n686-expression_statement-141-141", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
694 [label="142_ function setOracle(address _oracle) public payable byOwner inState(State.SETUP) {\n        oracle = _oracle;\n        emit OracleSet(oracle);\n    }\n694-function_definition-143-146", method="setOracle(address _oracle)", type_label=function_definition];
702 [label="142_ byOwner\n702-expression_statement-143-143", method="setOracle(address _oracle)", type_label=expression_statement];
704 [label="142_ inState(State.SETUP)\n704-expression_statement-143-143", method="setOracle(address _oracle)", type_label=expression_statement];
711 [label="143_ oracle = _oracle;\n711-expression_statement-144-144", method="setOracle(address _oracle)", type_label=expression_statement];
719 [label="146_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n719-function_definition-147-151", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
735 [label="147_ uint64 subpot_unchk46 = 3 ether;\n735-new_variable-148-148", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
742 [label="148_ winner_unchk46.send(subpot_unchk46);\n742-expression_statement-149-149", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
749 [label="149_ subpot_unchk46= 0;\n749-expression_statement-150-150", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
753 [label="151_ function setInitialPrice(uint256 _value) public payable byOracle inState(State.SETUP) {\n        initialPrice = _value;\n        state = State.OPEN;\n        emit GameOpened(initialPrice);\n    }\n753-function_definition-152-156", method="setInitialPrice(uint256 _value)", type_label=function_definition];
761 [label="151_ byOracle\n761-expression_statement-152-152", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
763 [label="151_ inState(State.SETUP)\n763-expression_statement-152-152", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
770 [label="152_ initialPrice = _value;\n770-expression_statement-153-153", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
774 [label="153_ state = State.OPEN;\n774-expression_statement-154-154", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
784 [label="156_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n784-function_definition-157-165", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
788 [label="157_ address payable addr_unchk4;\n788-new_variable-158-158", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
793 [label="158_ if\n793-if-159-164", method="UncheckedExternalCall_unchk4()", type_label=if];
2057 [label="158_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
804 [label="165_ function closeGame() public byOwner inState(State.OPEN){\n        state = State.CLOSED;\n        emit GameClosed();\n    }\n804-function_definition-166-169", method="closeGame()", type_label=function_definition];
807 [label="165_ byOwner\n807-expression_statement-166-166", method="closeGame()", type_label=expression_statement];
809 [label="165_ inState(State.OPEN)\n809-expression_statement-166-166", method="closeGame()", type_label=expression_statement];
816 [label="166_ state = State.CLOSED;\n816-expression_statement-167-167", method="closeGame()", type_label=expression_statement];
824 [label="169_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n824-function_definition-170-174", method="bug_unchk7()", type_label=function_definition];
828 [label="170_ address payable addr_unchk7;\n828-new_variable-171-171", method="bug_unchk7()", type_label=new_variable];
833 [label="171_ if_!addr_unchk7.send (10 ether) || 1==1\n833-if-172-173", method="bug_unchk7()", type_label=if];
2097 [label="171_ end_if", method="bug_unchk7()", type_label=end_if];
849 [label="174_ function betUp() public payable byPlayer inState(State.OPEN){\n        require(msg.value == (bet*0.001 ether));\n        guesses[UP].guesses_number++;\n        guesses[UP].players[msg.sender] = PaidStatus.NOT_PAID;\n        emit PlayerBet(msg.sender, UP);\n    }\n849-function_definition-175-180", method="betUp()", type_label=function_definition];
853 [label="174_ byPlayer\n853-expression_statement-175-175", method="betUp()", type_label=expression_statement];
855 [label="174_ inState(State.OPEN)\n855-expression_statement-175-175", method="betUp()", type_label=expression_statement];
862 [label="175_ require(msg.value == (bet*0.001 ether));\n862-expression_statement-176-176", method="betUp()", type_label=expression_statement];
875 [label="176_ guesses[UP].guesses_number++;\n875-expression_statement-177-177", method="betUp()", type_label=expression_statement];
876 [label="176_ guesses[UP].guesses_number++\n876-expression_statement-177-177", method="betUp()", type_label=expression_statement];
882 [label="177_ guesses[UP].players[msg.sender] = PaidStatus.NOT_PAID;\n882-expression_statement-178-178", method="betUp()", type_label=expression_statement];
904 [label="180_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n904-function_definition-181-183", method="my_func_unchk23(address payable dst)", type_label=function_definition];
913 [label="181_ dst.send(msg.value);\n913-expression_statement-182-182", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
922 [label="183_ function betDown() public payable byPlayer inState(State.OPEN){\n        require(msg.value == (bet*0.001 ether));\n        guesses[DOWN].guesses_number++;\n        guesses[DOWN].players[msg.sender] = PaidStatus.NOT_PAID;\n        emit PlayerBet(msg.sender, DOWN);\n    }\n922-function_definition-184-189", method="betDown()", type_label=function_definition];
926 [label="183_ byPlayer\n926-expression_statement-184-184", method="betDown()", type_label=expression_statement];
928 [label="183_ inState(State.OPEN)\n928-expression_statement-184-184", method="betDown()", type_label=expression_statement];
935 [label="184_ require(msg.value == (bet*0.001 ether));\n935-expression_statement-185-185", method="betDown()", type_label=expression_statement];
948 [label="185_ guesses[DOWN].guesses_number++;\n948-expression_statement-186-186", method="betDown()", type_label=expression_statement];
949 [label="185_ guesses[DOWN].guesses_number++\n949-expression_statement-186-186", method="betDown()", type_label=expression_statement];
955 [label="186_ guesses[DOWN].players[msg.sender] = PaidStatus.NOT_PAID;\n955-expression_statement-187-187", method="betDown()", type_label=expression_statement];
977 [label="189_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n977-function_definition-190-192", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
985 [label="190_ callee.send(5 ether);\n985-expression_statement-191-191", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
993 [label="192_ function setFinalPrice(uint256 _value) public payable byOracle inState(State.CLOSED) {\n        finalPrice = _value;\n        emit FinalPriceSet(finalPrice);\n        if(finalPrice > initialPrice){\n            result = UP;\n        }else{\n            result = DOWN;\n        }\n        if(guesses[result].guesses_number > 0){\n            state = State.PLAYERS_WIN;\n            splitJackpot = getBalance()/guesses[result].guesses_number;\n            emit PlayersWin(result, splitJackpot);\n        }else{\n            state = State.OWNER_WIN;\n            emit OwnerWins(owner);\n        }\n    }\n993-function_definition-193-209", method="setFinalPrice(uint256 _value)", type_label=function_definition];
1001 [label="192_ byOracle\n1001-expression_statement-193-193", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1003 [label="192_ inState(State.CLOSED)\n1003-expression_statement-193-193", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1010 [label="193_ finalPrice = _value;\n1010-expression_statement-194-194", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1018 [label="195_ if_finalPrice > initialPrice\n1018-if-196-200", method="setFinalPrice(uint256 _value)", type_label=if];
2282 [label="195_ end_if", method="setFinalPrice(uint256 _value)", type_label=end_if];
1023 [label="196_ result = UP;\n1023-expression_statement-197-197", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1028 [label="198_ result = DOWN;\n1028-expression_statement-199-199", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1032 [label="200_ if_guesses[result].guesses_number > 0\n1032-if-201-208", method="setFinalPrice(uint256 _value)", type_label=if];
2296 [label="200_ end_if", method="setFinalPrice(uint256 _value)", type_label=end_if];
1041 [label="201_ state = State.PLAYERS_WIN;\n1041-expression_statement-202-202", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1047 [label="202_ splitJackpot = getBalance()/guesses[result].guesses_number;\n1047-expression_statement-203-203", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1065 [label="205_ state = State.OWNER_WIN;\n1065-expression_statement-206-206", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1075 [label="209_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n1075-function_definition-210-217", method="bug_unchk30()", type_label=function_definition];
1079 [label="210_ uint receivers_unchk30;\n1079-new_variable-211-211", method="bug_unchk30()", type_label=new_variable];
1084 [label="211_ address payable addr_unchk30;\n1084-new_variable-212-212", method="bug_unchk30()", type_label=new_variable];
1089 [label="212_ if\n1089-if-213-216", method="bug_unchk30()", type_label=if];
2353 [label="212_ end_if", method="bug_unchk30()", type_label=end_if];
1099 [label="213_ receivers_unchk30 +=1;\n1099-expression_statement-214-214", method="bug_unchk30()", type_label=expression_statement];
1106 [label="217_ function collectOwnerWinnings() public byOwner inState(State.OWNER_WIN){\n        selfdestruct(owner);\n    }\n1106-function_definition-218-220", method="collectOwnerWinnings()", type_label=function_definition];
1109 [label="217_ byOwner\n1109-expression_statement-218-218", method="collectOwnerWinnings()", type_label=expression_statement];
1111 [label="217_ inState(State.OWNER_WIN)\n1111-expression_statement-218-218", method="collectOwnerWinnings()", type_label=expression_statement];
1118 [label="218_ selfdestruct(owner);\n1118-expression_statement-219-219", method="collectOwnerWinnings()", type_label=expression_statement];
1123 [label="220_ bool public payedOut_unchk8 = false;\n1123-new_variable-221-221", method="", type_label=new_variable];
1130 [label="221_ address payable public winner_unchk8;\n1130-new_variable-222-222", method="", type_label=new_variable];
1135 [label="222_ uint public winAmount_unchk8;\n1135-new_variable-223-223", method="", type_label=new_variable];
1140 [label="223_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1140-function_definition-224-228", method="sendToWinner_unchk8()", type_label=function_definition];
1144 [label="224_ require(!payedOut_unchk8);\n1144-expression_statement-225-225", method="sendToWinner_unchk8()", type_label=expression_statement];
1150 [label="225_ winner_unchk8.send(winAmount_unchk8);\n1150-expression_statement-226-226", method="sendToWinner_unchk8()", type_label=expression_statement];
1157 [label="226_ payedOut_unchk8 = true;\n1157-expression_statement-227-227", method="sendToWinner_unchk8()", type_label=expression_statement];
1162 [label="228_ function collectPlayerWinnings() public byPlayer inState(State.PLAYERS_WIN){\n        if(guesses[result].players[msg.sender] == PaidStatus.NOT_PAID){\n            guesses[result].players[msg.sender] = PaidStatus.PAID;\n            msg.sender.transfer(splitJackpot);\n        } else revert();\n    }\n1162-function_definition-229-234", method="collectPlayerWinnings()", type_label=function_definition];
1165 [label="228_ byPlayer\n1165-expression_statement-229-229", method="collectPlayerWinnings()", type_label=expression_statement];
1167 [label="228_ inState(State.PLAYERS_WIN)\n1167-expression_statement-229-229", method="collectPlayerWinnings()", type_label=expression_statement];
1174 [label="229_ if_guesses[result].players[msg.sender] == PaidStatus.NOT_PAID\n1174-if-230-233", method="collectPlayerWinnings()", type_label=if];
2438 [label="229_ end_if", method="collectPlayerWinnings()", type_label=end_if];
1189 [label="230_ guesses[result].players[msg.sender] = PaidStatus.PAID;\n1189-expression_statement-231-231", method="collectPlayerWinnings()", type_label=expression_statement];
1203 [label="231_ msg.sender.transfer(splitJackpot);\n1203-expression_statement-232-232", method="collectPlayerWinnings()", type_label=expression_statement];
1214 [label="234_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1214-function_definition-235-236", method="bug_unchk39(address payable addr)", type_label=function_definition];
1222 [label="235_ addr.send (4 ether);\n1222-expression_statement-236-236", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1230 [label="236_ function getBalance() private view returns (uint256){\n        return address(this).balance;\n    }\n1230-function_definition-237-239", method="getBalance()", type_label=function_definition];
1239 [label="237_ return address(this).balance;\n1239-return-238-238", method="getBalance()", type_label=return];
1245 [label="239_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1245-function_definition-240-242", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1254 [label="240_ dst.call.value(msg.value)(\"\");\n1254-expression_statement-241-241", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
101;
803;
1071;
1104;
1213;
13 -> 22  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 49  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 58  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
58 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 71  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 86  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
86 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
111 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 1434  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
203 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
338 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 1720  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
477 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
542 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
569 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
603 -> 612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
694 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
753 -> 770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
784 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
804 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 2097  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
849 -> 862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
853 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
926 -> 928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
977 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 1010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1001 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 1023  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1018 -> 1028  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2282 -> 1032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1023 -> 2282  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1028 -> 2282  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1032 -> 1041  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1032 -> 1065  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1041 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1079 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1089 -> 1099  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2353 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 2353  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1106 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1109 -> 1111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1123 -> 1130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1130 -> 1135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1140 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1150 -> 1157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1174 -> 1189  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1174 -> 1189  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=1, label=neg_next];
2438 -> 1214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 2438  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1214 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1230 -> 1239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1239 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1245 -> 1254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 1355  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
803 -> 2057  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1071 -> 2296  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1104 -> 2353  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1213 -> 2438  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
