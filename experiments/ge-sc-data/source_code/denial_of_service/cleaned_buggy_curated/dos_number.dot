digraph  {
13 [label="2_ uint numElements = 0;\n13-new_variable-3-3", method="", type_label=new_variable];
18 [label="3_ uint[] array;\n18-new_variable-4-4", method="", type_label=new_variable];
23 [label="4_ function insertNnumbers(uint value,uint numbers) public {\n        for(uint i=0;i<numbers;i++) {\n            if(numElements == array.length) {\n                array.length += 1;\n            }\n            array[numElements++] = value;\n        }\n    }\n23-function_definition-5-12", method="insertNnumbers(uint value,uint numbers)", type_label=function_definition];
35 [label="5_ for(i<numbers;;i++)\n35-for-6-11", method="insertNnumbers(uint value,uint numbers)", type_label=for];
163 [label="5_ end_loop", method="insertNnumbers(uint value,uint numbers)", type_label=end_loop];
46 [label="5_ i++\n46-expression_statement-6-6", method="insertNnumbers(uint value,uint numbers)", type_label=expression_statement];
49 [label="6_ if_numElements == array.length\n49-if-7-9", method="insertNnumbers(uint value,uint numbers)", type_label=if];
177 [label="6_ end_if", method="insertNnumbers(uint value,uint numbers)", type_label=end_if];
56 [label="7_ array.length += 1;\n56-expression_statement-8-8", method="insertNnumbers(uint value,uint numbers)", type_label=expression_statement];
62 [label="9_ array[numElements++] = value;\n62-expression_statement-10-10", method="insertNnumbers(uint value,uint numbers)", type_label=expression_statement];
66 [label="9_ numElements++\n66-expression_statement-10-10", method="insertNnumbers(uint value,uint numbers)", type_label=expression_statement];
69 [label="12_ function clear() public {\n        require(numElements>1500);\n        numElements = 0;\n    }\n69-function_definition-13-16", method="clear()", type_label=function_definition];
73 [label="13_ require(numElements>1500);\n73-expression_statement-14-14", method="clear()", type_label=expression_statement];
80 [label="14_ numElements = 0;\n80-expression_statement-15-15", method="clear()", type_label=expression_statement];
84 [label="16_ function clearDOS() public {\n        require(numElements>1500);\n        array = new uint[](0);\n        numElements = 0;\n    }\n84-function_definition-17-21", method="clearDOS()", type_label=function_definition];
88 [label="17_ require(numElements>1500);\n88-expression_statement-18-18", method="clearDOS()", type_label=expression_statement];
95 [label="18_ array = new uint[](0);\n95-expression_statement-19-19", method="clearDOS()", type_label=expression_statement];
105 [label="19_ numElements = 0;\n105-expression_statement-20-20", method="clearDOS()", type_label=expression_statement];
109 [label="21_ function getLengthArray() public view returns(uint) {\n        return numElements;\n    }\n109-function_definition-22-24", method="getLengthArray()", type_label=function_definition];
118 [label="22_ return numElements;\n118-return-23-23", method="getLengthArray()", type_label=return];
120 [label="24_ function getRealLengthArray() public view returns(uint) {\n        return array.length;\n    }\n120-function_definition-25-27", method="getRealLengthArray()", type_label=function_definition];
129 [label="25_ return array.length;\n129-return-26-26", method="getRealLengthArray()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 35  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 49  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
35 -> 163  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
163 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
46 -> 35  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
49 -> 56  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
49 -> 177  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
177 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
56 -> 177  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
62 -> 46  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
69 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
84 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
118 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
120 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
