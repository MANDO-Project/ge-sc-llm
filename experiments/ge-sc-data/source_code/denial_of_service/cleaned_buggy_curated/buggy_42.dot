digraph  {
13 [label="2_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n13-function_definition-3-4", method="bug_unchk3(address payable addr)", type_label=function_definition];
21 [label="3_ addr.send (42 ether);\n21-expression_statement-4-4", method="bug_unchk3(address payable addr)", type_label=expression_statement];
29 [label="4_ address public owner;\n29-new_variable-5-5", method="", type_label=new_variable];
34 [label="5_ bool public payedOut_unchk9 = false;\n34-new_variable-6-6", method="", type_label=new_variable];
41 [label="6_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n41-function_definition-7-10", method="withdrawLeftOver_unchk9()", type_label=function_definition];
45 [label="7_ require(payedOut_unchk9);\n45-expression_statement-8-8", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
50 [label="8_ msg.sender.send(address(this).balance);\n50-expression_statement-9-9", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
63 [label="10_ address public newOwner;\n63-new_variable-11-11", method="", type_label=new_variable];
68 [label="11_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n68-function_definition-12-16", method="bug_unchk31()", type_label=function_definition];
72 [label="12_ address payable addr_unchk31;\n72-new_variable-13-13", method="bug_unchk31()", type_label=new_variable];
77 [label="13_ if_!addr_unchk31.send (10 ether) || 1==1\n77-if-14-15", method="bug_unchk31()", type_label=if];
1452 [label="13_ end_if", method="bug_unchk31()", type_label=end_if];
105 [label="18_ owner = msg.sender;\n105-expression_statement-19-19", method="", type_label=expression_statement];
111 [label="20_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n111-function_definition-21-29", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
115 [label="21_ address payable addr_unchk4;\n115-new_variable-22-22", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
120 [label="22_ if\n120-if-23-28", method="UncheckedExternalCall_unchk4()", type_label=if];
1495 [label="22_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
131 [label="29_ modifier onlyOwner {\n        require(msg.sender == owner || msg.sender == address(this));\n        _;\n    }\n131-expression_statement-30-33", method="", type_label=expression_statement];
134 [label="30_ require(msg.sender == owner || msg.sender == address(this));\n134-expression_statement-31-31", method="", type_label=expression_statement];
151 [label="31_ _;\n151-expression_statement-32-32", method="", type_label=expression_statement];
153 [label="33_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n153-function_definition-34-36", method="transferOwnership(address _newOwner)", type_label=function_definition];
160 [label="33_ onlyOwner\n160-expression_statement-34-34", method="transferOwnership(address _newOwner)", type_label=expression_statement];
163 [label="34_ newOwner = _newOwner;\n163-expression_statement-35-35", method="transferOwnership(address _newOwner)", type_label=expression_statement];
167 [label="36_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n167-function_definition-37-41", method="bug_unchk7()", type_label=function_definition];
171 [label="37_ address payable addr_unchk7;\n171-new_variable-38-38", method="bug_unchk7()", type_label=new_variable];
176 [label="38_ if_!addr_unchk7.send (10 ether) || 1==1\n176-if-39-40", method="bug_unchk7()", type_label=if];
1551 [label="38_ end_if", method="bug_unchk7()", type_label=end_if];
195 [label="43_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n195-function_definition-44-51", method="mul(uint256 a,uint256 b)", type_label=function_definition];
212 [label="44_ if_a == 0\n212-if-45-47", method="mul(uint256 a,uint256 b)", type_label=if];
1587 [label="44_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
217 [label="45_ return 0;\n217-return-46-46", method="mul(uint256 a,uint256 b)", type_label=return];
219 [label="47_ uint256 c = a * b;\n219-new_variable-48-48", method="mul(uint256 a,uint256 b)", type_label=new_variable];
227 [label="48_ assert(c / a == b);\n227-expression_statement-49-49", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
236 [label="49_ return c;\n236-return-50-50", method="mul(uint256 a,uint256 b)", type_label=return];
238 [label="51_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n238-function_definition-52-55", method="div(uint256 a,uint256 b)", type_label=function_definition];
255 [label="52_ uint256 c = a / b;\n255-new_variable-53-53", method="div(uint256 a,uint256 b)", type_label=new_variable];
263 [label="53_ return c;\n263-return-54-54", method="div(uint256 a,uint256 b)", type_label=return];
265 [label="55_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n265-function_definition-56-59", method="sub(uint256 a,uint256 b)", type_label=function_definition];
282 [label="56_ assert(b <= a);\n282-expression_statement-57-57", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
289 [label="57_ return a - b;\n289-return-58-58", method="sub(uint256 a,uint256 b)", type_label=return];
293 [label="59_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n293-function_definition-60-64", method="add(uint256 a,uint256 b)", type_label=function_definition];
310 [label="60_ uint256 c = a + b;\n310-new_variable-61-61", method="add(uint256 a,uint256 b)", type_label=new_variable];
318 [label="61_ assert(c >= a);\n318-expression_statement-62-62", method="add(uint256 a,uint256 b)", type_label=expression_statement];
325 [label="62_ return c;\n325-return-63-63", method="add(uint256 a,uint256 b)", type_label=return];
327 [label="64_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n327-function_definition-65-69", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
344 [label="65_ uint256 c = add(a,m);\n344-new_variable-66-66", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
355 [label="66_ uint256 d = sub(c,1);\n355-new_variable-67-67", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
366 [label="67_ return mul(div(d,m),m);\n366-return-68-68", method="ceil(uint256 a,uint256 m)", type_label=return];
381 [label="71_ function balanceOf(address who) external view returns (uint256);\n381-function_definition-72-72", method="balanceOf(address who)", type_label=function_definition];
393 [label="72_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n393-function_definition-73-75", method="my_func_unchk23(address payable dst)", type_label=function_definition];
402 [label="73_ dst.send(msg.value);\n402-expression_statement-74-74", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
411 [label="75_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n411-function_definition-76-76", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
430 [label="76_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n430-function_definition-77-79", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
438 [label="77_ callee.send(5 ether);\n438-expression_statement-78-78", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
446 [label="79_ function transfer(address to, uint256 value) external returns (bool);\n446-function_definition-80-80", method="transfer(address to,uint256 value)", type_label=function_definition];
461 [label="80_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n461-function_definition-81-88", method="bug_unchk30()", type_label=function_definition];
465 [label="81_ uint receivers_unchk30;\n465-new_variable-82-82", method="bug_unchk30()", type_label=new_variable];
470 [label="82_ address payable addr_unchk30;\n470-new_variable-83-83", method="bug_unchk30()", type_label=new_variable];
475 [label="83_ if\n475-if-84-87", method="bug_unchk30()", type_label=if];
1850 [label="83_ end_if", method="bug_unchk30()", type_label=end_if];
485 [label="84_ receivers_unchk30 +=1;\n485-expression_statement-85-85", method="bug_unchk30()", type_label=expression_statement];
498 [label="90_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n498-function_definition-91-93", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
506 [label="91_ callee.call.value(1 ether);\n506-expression_statement-92-92", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
516 [label="93_ Token public token;\n516-new_variable-94-94", method="", type_label=new_variable];
522 [label="94_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n522-function_definition-95-99", method="bug_unchk19()", type_label=function_definition];
526 [label="95_ address payable addr_unchk19;\n526-new_variable-96-96", method="bug_unchk19()", type_label=new_variable];
531 [label="96_ if_!addr_unchk19.send (10 ether) || 1==1\n531-if-97-98", method="bug_unchk19()", type_label=if];
1906 [label="96_ end_if", method="bug_unchk19()", type_label=end_if];
547 [label="99_ bool lock;\n547-new_variable-100-100", method="", type_label=new_variable];
551 [label="100_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n551-function_definition-101-103", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
559 [label="101_ callee.send(5 ether);\n559-expression_statement-102-102", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
567 [label="103_ uint256 public stakeTokens;\n567-new_variable-104-104", method="", type_label=new_variable];
572 [label="104_ bool public payedOut_unchk20 = false;\n572-new_variable-105-105", method="", type_label=new_variable];
579 [label="105_ address payable public winner_unchk20;\n579-new_variable-106-106", method="", type_label=new_variable];
584 [label="106_ uint public winAmount_unchk20;\n584-new_variable-107-107", method="", type_label=new_variable];
589 [label="107_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n589-function_definition-108-112", method="sendToWinner_unchk20()", type_label=function_definition];
593 [label="108_ require(!payedOut_unchk20);\n593-expression_statement-109-109", method="sendToWinner_unchk20()", type_label=expression_statement];
599 [label="109_ winner_unchk20.send(winAmount_unchk20);\n599-expression_statement-110-110", method="sendToWinner_unchk20()", type_label=expression_statement];
606 [label="110_ payedOut_unchk20 = true;\n606-expression_statement-111-111", method="sendToWinner_unchk20()", type_label=expression_statement];
611 [label="112_ uint256 private basePercent = 200;\n611-new_variable-113-113", method="", type_label=new_variable];
622 [label="114_ bool public payedOut_unchk32 = false;\n622-new_variable-115-115", method="", type_label=new_variable];
629 [label="115_ address payable public winner_unchk32;\n629-new_variable-116-116", method="", type_label=new_variable];
634 [label="116_ uint public winAmount_unchk32;\n634-new_variable-117-117", method="", type_label=new_variable];
639 [label="117_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n639-function_definition-118-122", method="sendToWinner_unchk32()", type_label=function_definition];
643 [label="118_ require(!payedOut_unchk32);\n643-expression_statement-119-119", method="sendToWinner_unchk32()", type_label=expression_statement];
649 [label="119_ winner_unchk32.send(winAmount_unchk32);\n649-expression_statement-120-120", method="sendToWinner_unchk32()", type_label=expression_statement];
656 [label="120_ payedOut_unchk32 = true;\n656-expression_statement-121-121", method="sendToWinner_unchk32()", type_label=expression_statement];
661 [label="122_ uint256 public stakeTime = 1814400;\n661-new_variable-123-123", method="", type_label=new_variable];
667 [label="123_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n667-function_definition-124-126", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
675 [label="124_ callee.send(5 ether);\n675-expression_statement-125-125", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
683 [label="126_ uint public stakePercentage = 30;\n683-new_variable-127-127", method="", type_label=new_variable];
689 [label="127_ bool public payedOut_unchk45 = false;\n689-new_variable-128-128", method="", type_label=new_variable];
696 [label="128_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n696-function_definition-129-132", method="withdrawLeftOver_unchk45()", type_label=function_definition];
700 [label="129_ require(payedOut_unchk45);\n700-expression_statement-130-130", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
705 [label="130_ msg.sender.send(address(this).balance);\n705-expression_statement-131-131", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
732 [label="133_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n732-function_definition-134-136", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
740 [label="134_ callee.call.value(1 ether);\n740-expression_statement-135-135", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
764 [label="137_ struct stake{\n        uint256 time;\n        bool redeem;\n        uint256 tokens;\n    }\n764-expression_statement-138-142", method="stake()", type_label=expression_statement];
778 [label="142_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n778-function_definition-143-147", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
794 [label="143_ uint64 subpot_unchk46 = 3 ether;\n794-new_variable-144-144", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
801 [label="144_ winner_unchk46.send(subpot_unchk46);\n801-expression_statement-145-145", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
808 [label="145_ subpot_unchk46= 0;\n808-expression_statement-146-146", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
812 [label="147_ mapping(address => stake) staker;\n812-new_variable-148-148", method="", type_label=new_variable];
825 [label="149_ token = Token(tokenContractAddress);\n825-expression_statement-150-150", method="", type_label=expression_statement];
832 [label="150_ owner = msg.sender;\n832-expression_statement-151-151", method="", type_label=expression_statement];
838 [label="151_ stakeTokens = 500 * 10 ** uint(10);\n838-expression_statement-152-152", method="", type_label=expression_statement];
848 [label="153_ bool public payedOut_unchk8 = false;\n848-new_variable-154-154", method="", type_label=new_variable];
855 [label="154_ address payable public winner_unchk8;\n855-new_variable-155-155", method="", type_label=new_variable];
860 [label="155_ uint public winAmount_unchk8;\n860-new_variable-156-156", method="", type_label=new_variable];
865 [label="156_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n865-function_definition-157-161", method="sendToWinner_unchk8()", type_label=function_definition];
869 [label="157_ require(!payedOut_unchk8);\n869-expression_statement-158-158", method="sendToWinner_unchk8()", type_label=expression_statement];
875 [label="158_ winner_unchk8.send(winAmount_unchk8);\n875-expression_statement-159-159", method="sendToWinner_unchk8()", type_label=expression_statement];
882 [label="159_ payedOut_unchk8 = true;\n882-expression_statement-160-160", method="sendToWinner_unchk8()", type_label=expression_statement];
887 [label="161_ function startStaking() public{\n        require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));\n        require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));\n        staker[msg.sender].time = now;\n        staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;\n        emit stakingstarted(msg.sender, staker[msg.sender].tokens, staker[msg.sender].time);\n    }\n887-function_definition-162-168", method="startStaking()", type_label=function_definition];
891 [label="162_ require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));\n891-expression_statement-163-163", method="startStaking()", type_label=expression_statement];
910 [label="163_ require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));\n910-expression_statement-164-164", method="startStaking()", type_label=expression_statement];
933 [label="164_ staker[msg.sender].time = now;\n933-expression_statement-165-165", method="startStaking()", type_label=expression_statement];
943 [label="165_ staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;\n943-expression_statement-166-166", method="startStaking()", type_label=expression_statement];
983 [label="168_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n983-function_definition-169-170", method="bug_unchk39(address payable addr)", type_label=function_definition];
991 [label="169_ addr.send (4 ether);\n991-expression_statement-170-170", method="bug_unchk39(address payable addr)", type_label=expression_statement];
999 [label="170_ function redeem() public{\n        require(!lock);\n        require(!staker[msg.sender].redeem);\n        require(staker[msg.sender].time + stakeTime <= now);\n        require(token.transfer(msg.sender,staker[msg.sender].tokens));\n        require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));\n        emit tokensRedeemed(msg.sender, staker[msg.sender].tokens, staker[msg.sender].tokens * stakePercentage * 100 / 10000);\n        staker[msg.sender].redeem = true;\n        staker[msg.sender].tokens = 0;\n    }\n999-function_definition-171-180", method="redeem()", type_label=function_definition];
1003 [label="171_ require(!lock);\n1003-expression_statement-172-172", method="redeem()", type_label=expression_statement];
1009 [label="172_ require(!staker[msg.sender].redeem);\n1009-expression_statement-173-173", method="redeem()", type_label=expression_statement];
1021 [label="173_ require(staker[msg.sender].time + stakeTime <= now);\n1021-expression_statement-174-174", method="redeem()", type_label=expression_statement];
1036 [label="174_ require(token.transfer(msg.sender,staker[msg.sender].tokens));\n1036-expression_statement-175-175", method="redeem()", type_label=expression_statement];
1056 [label="175_ require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));\n1056-expression_statement-176-176", method="redeem()", type_label=expression_statement];
1112 [label="177_ staker[msg.sender].redeem = true;\n1112-expression_statement-178-178", method="redeem()", type_label=expression_statement];
1123 [label="178_ staker[msg.sender].tokens = 0;\n1123-expression_statement-179-179", method="redeem()", type_label=expression_statement];
1133 [label="180_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1133-function_definition-181-183", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1142 [label="181_ dst.call.value(msg.value)(\"\");\n1142-expression_statement-182-182", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1157 [label="183_ function changeStakeTokens(uint256 _NewTokensThreshold) public onlyOwner{\n        stakeTokens = _NewTokensThreshold * 10 ** uint(10);\n    }\n1157-function_definition-184-186", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=function_definition];
1164 [label="183_ onlyOwner\n1164-expression_statement-184-184", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=expression_statement];
1167 [label="184_ stakeTokens = _NewTokensThreshold * 10 ** uint(10);\n1167-expression_statement-185-185", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=expression_statement];
1177 [label="186_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1177-function_definition-187-189", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1186 [label="187_ dst.send(msg.value);\n1186-expression_statement-188-188", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1195 [label="189_ function changeStakeTime(uint256 _newStakeTime) public onlyOwner{\n        stakeTime = _newStakeTime;\n    }\n1195-function_definition-190-192", method="changeStakeTime(uint256 _newStakeTime)", type_label=function_definition];
1202 [label="189_ onlyOwner\n1202-expression_statement-190-190", method="changeStakeTime(uint256 _newStakeTime)", type_label=expression_statement];
1205 [label="190_ stakeTime = _newStakeTime;\n1205-expression_statement-191-191", method="changeStakeTime(uint256 _newStakeTime)", type_label=expression_statement];
1209 [label="192_ bool public payedOut_unchk44 = false;\n1209-new_variable-193-193", method="", type_label=new_variable];
1216 [label="193_ address payable public winner_unchk44;\n1216-new_variable-194-194", method="", type_label=new_variable];
1221 [label="194_ uint public winAmount_unchk44;\n1221-new_variable-195-195", method="", type_label=new_variable];
1226 [label="195_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1226-function_definition-196-200", method="sendToWinner_unchk44()", type_label=function_definition];
1230 [label="196_ require(!payedOut_unchk44);\n1230-expression_statement-197-197", method="sendToWinner_unchk44()", type_label=expression_statement];
1236 [label="197_ winner_unchk44.send(winAmount_unchk44);\n1236-expression_statement-198-198", method="sendToWinner_unchk44()", type_label=expression_statement];
1243 [label="198_ payedOut_unchk44 = true;\n1243-expression_statement-199-199", method="sendToWinner_unchk44()", type_label=expression_statement];
1248 [label="200_ function changeStakingPercentage(uint _newStakePercentage) public onlyOwner{\n        stakePercentage = _newStakePercentage;\n    }\n1248-function_definition-201-203", method="changeStakingPercentage(uint _newStakePercentage)", type_label=function_definition];
1255 [label="200_ onlyOwner\n1255-expression_statement-201-201", method="changeStakingPercentage(uint _newStakePercentage)", type_label=expression_statement];
1258 [label="201_ stakePercentage = _newStakePercentage;\n1258-expression_statement-202-202", method="changeStakingPercentage(uint _newStakePercentage)", type_label=expression_statement];
1262 [label="203_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1262-function_definition-204-212", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1266 [label="204_ address payable addr_unchk40;\n1266-new_variable-205-205", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1271 [label="205_ if\n1271-if-206-211", method="UncheckedExternalCall_unchk40()", type_label=if];
2646 [label="205_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1282 [label="212_ function lockWithdrawals() public onlyOwner{\n        lock = true;\n    }\n1282-function_definition-213-215", method="lockWithdrawals()", type_label=function_definition];
1285 [label="212_ onlyOwner\n1285-expression_statement-213-213", method="lockWithdrawals()", type_label=expression_statement];
1288 [label="213_ lock = true;\n1288-expression_statement-214-214", method="lockWithdrawals()", type_label=expression_statement];
1293 [label="215_ bool public payedOut_unchk33 = false;\n1293-new_variable-216-216", method="", type_label=new_variable];
1300 [label="216_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1300-function_definition-217-220", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1304 [label="217_ require(payedOut_unchk33);\n1304-expression_statement-218-218", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1309 [label="218_ msg.sender.send(address(this).balance);\n1309-expression_statement-219-219", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1322 [label="220_ function findOnePercent(uint256 value) private view returns (uint256)  {\n        uint256 roundValue = value.ceil(basePercent);\n        uint256 onePercent = roundValue.mul(basePercent).div(10000);\n        return onePercent;\n    }\n1322-function_definition-221-225", method="findOnePercent(uint256 value)", type_label=function_definition];
1335 [label="221_ uint256 roundValue = value.ceil(basePercent);\n1335-new_variable-222-222", method="findOnePercent(uint256 value)", type_label=new_variable];
1346 [label="222_ uint256 onePercent = roundValue.mul(basePercent).div(10000);\n1346-new_variable-223-223", method="findOnePercent(uint256 value)", type_label=new_variable];
1362 [label="223_ return onePercent;\n1362-return-224-224", method="findOnePercent(uint256 value)", type_label=return];
1364 [label="225_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1364-function_definition-226-227", method="bug_unchk27(address payable addr)", type_label=function_definition];
1372 [label="226_ addr.send (42 ether);\n1372-expression_statement-227-227", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
130;
492;
490;
1281;
13 -> 21  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
41 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 1452  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
111 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
153 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
176 -> 1551  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
195 -> 212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
212 -> 217  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
212 -> 1587  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1587 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
217 -> 1587  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
217 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
219 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
238 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
265 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
293 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
325 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
327 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
393 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
475 -> 485  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1850 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
485 -> 1850  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
498 -> 506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
526 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 1906  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
551 -> 559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
667 -> 675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
683 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
778 -> 794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
794 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
801 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
848 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
887 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
933 -> 943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 1021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1157 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1177 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1209 -> 1216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1216 -> 1221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1226 -> 1230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1230 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 1243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1248 -> 1258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1262 -> 1266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1266 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1282 -> 1288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1300 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1335 -> 1346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1346 -> 1362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1362 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1364 -> 1372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 1495  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
490 -> 1850  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1281 -> 2646  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
