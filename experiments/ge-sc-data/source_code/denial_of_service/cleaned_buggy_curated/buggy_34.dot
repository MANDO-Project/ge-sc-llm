digraph  {
13 [label="2_ function cash_unchk22(uint roundIndex, uint subpotIndex, address payable winner_unchk22)public{\n        uint64 subpot_unchk22 = 10 ether;\n        winner_unchk22.send(subpot_unchk22);   \n        subpot_unchk22= 0;\n}\n13-function_definition-3-7", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=function_definition];
29 [label="3_ uint64 subpot_unchk22 = 10 ether;\n29-new_variable-4-4", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=new_variable];
36 [label="4_ winner_unchk22.send(subpot_unchk22);\n36-expression_statement-5-5", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
43 [label="5_ subpot_unchk22= 0;\n43-expression_statement-6-6", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
47 [label="7_ address payable public owner;\n47-new_variable-8-8", method="", type_label=new_variable];
52 [label="8_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n52-function_definition-9-13", method="bug_unchk31()", type_label=function_definition];
56 [label="9_ address payable addr_unchk31;\n56-new_variable-10-10", method="bug_unchk31()", type_label=new_variable];
61 [label="10_ if_!addr_unchk31.send (10 ether) || 1==1\n61-if-11-12", method="bug_unchk31()", type_label=if];
2161 [label="10_ end_if", method="bug_unchk31()", type_label=end_if];
89 [label="15_ owner = msg.sender;\n89-expression_statement-16-16", method="", type_label=expression_statement];
95 [label="17_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n95-function_definition-18-19", method="bug_unchk3(address payable addr)", type_label=function_definition];
103 [label="18_ addr.send (42 ether);\n103-expression_statement-19-19", method="bug_unchk3(address payable addr)", type_label=expression_statement];
111 [label="19_ modifier onlyOwner {\n       require(msg.sender == owner);\n       _;\n   }\n111-expression_statement-20-23", method="", type_label=expression_statement];
114 [label="20_ require(msg.sender == owner);\n114-expression_statement-21-21", method="", type_label=expression_statement];
123 [label="21_ _;\n123-expression_statement-22-22", method="", type_label=expression_statement];
125 [label="23_ function transferOwnership(address payable _newOwner) public onlyOwner {\n       owner = _newOwner;\n   }\n125-function_definition-24-26", method="transferOwnership(address payable _newOwner)", type_label=function_definition];
132 [label="23_ onlyOwner\n132-expression_statement-24-24", method="transferOwnership(address payable _newOwner)", type_label=expression_statement];
135 [label="24_ owner = _newOwner;\n135-expression_statement-25-25", method="transferOwnership(address payable _newOwner)", type_label=expression_statement];
139 [label="26_ bool public payedOut_unchk9 = false;\n139-new_variable-27-27", method="", type_label=new_variable];
146 [label="27_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n146-function_definition-28-31", method="withdrawLeftOver_unchk9()", type_label=function_definition];
150 [label="28_ require(payedOut_unchk9);\n150-expression_statement-29-29", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
155 [label="29_ msg.sender.send(address(this).balance);\n155-expression_statement-30-30", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
171 [label="33_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n171-function_definition-34-38", method="add(uint256 a,uint256 b)", type_label=function_definition];
188 [label="34_ uint256 c = a + b;\n188-new_variable-35-35", method="add(uint256 a,uint256 b)", type_label=new_variable];
196 [label="35_ require(c >= a, \"SafeMath: addition overflow\");\n196-expression_statement-36-36", method="add(uint256 a,uint256 b)", type_label=expression_statement];
206 [label="36_ return c;\n206-return-37-37", method="add(uint256 a,uint256 b)", type_label=return];
208 [label="38_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n208-function_definition-39-43", method="sub(uint256 a,uint256 b)", type_label=function_definition];
225 [label="39_ require(b <= a, \"SafeMath: subtraction overflow\");\n225-expression_statement-40-40", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
235 [label="40_ uint256 c = a - b;\n235-new_variable-41-41", method="sub(uint256 a,uint256 b)", type_label=new_variable];
243 [label="41_ return c;\n243-return-42-42", method="sub(uint256 a,uint256 b)", type_label=return];
245 [label="43_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n245-function_definition-44-51", method="mul(uint256 a,uint256 b)", type_label=function_definition];
262 [label="44_ if_a == 0\n262-if-45-47", method="mul(uint256 a,uint256 b)", type_label=if];
2362 [label="44_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
267 [label="45_ return 0;\n267-return-46-46", method="mul(uint256 a,uint256 b)", type_label=return];
269 [label="47_ uint256 c = a * b;\n269-new_variable-48-48", method="mul(uint256 a,uint256 b)", type_label=new_variable];
277 [label="48_ require(c / a == b, \"SafeMath: multiplication overflow\");\n277-expression_statement-49-49", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
289 [label="49_ return c;\n289-return-50-50", method="mul(uint256 a,uint256 b)", type_label=return];
291 [label="51_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n291-function_definition-52-56", method="div(uint256 a,uint256 b)", type_label=function_definition];
308 [label="52_ require(b > 0, \"SafeMath: division by zero\");\n308-expression_statement-53-53", method="div(uint256 a,uint256 b)", type_label=expression_statement];
318 [label="53_ uint256 c = a / b;\n318-new_variable-54-54", method="div(uint256 a,uint256 b)", type_label=new_variable];
326 [label="54_ return c;\n326-return-55-55", method="div(uint256 a,uint256 b)", type_label=return];
328 [label="56_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n328-function_definition-57-60", method="mod(uint256 a,uint256 b)", type_label=function_definition];
345 [label="57_ require(b != 0, \"SafeMath: modulo by zero\");\n345-expression_statement-58-58", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
355 [label="58_ return a % b;\n355-return-59-59", method="mod(uint256 a,uint256 b)", type_label=return];
370 [label="63_ function my_func_uncheck12(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n370-function_definition-64-66", method="my_func_uncheck12(address payable dst)", type_label=function_definition];
379 [label="64_ dst.call.value(msg.value)(\"\");\n379-expression_statement-65-65", method="my_func_uncheck12(address payable dst)", type_label=expression_statement];
394 [label="66_ mapping (address => transferMapping) private _balances;\n394-new_variable-67-67", method="", type_label=new_variable];
402 [label="67_ function my_func_unchk11(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n402-function_definition-68-70", method="my_func_unchk11(address payable dst)", type_label=function_definition];
411 [label="68_ dst.send(msg.value);\n411-expression_statement-69-69", method="my_func_unchk11(address payable dst)", type_label=expression_statement];
420 [label="70_ mapping (address => mapping (address => uint256)) private _allowances;\n420-new_variable-71-71", method="", type_label=new_variable];
429 [label="71_ function callnotchecked_unchk1(address payable callee) public {\n    callee.call.value(2 ether);\n  }\n429-function_definition-72-74", method="callnotchecked_unchk1(address payable callee)", type_label=function_definition];
437 [label="72_ callee.call.value(2 ether);\n437-expression_statement-73-73", method="callnotchecked_unchk1(address payable callee)", type_label=expression_statement];
447 [label="74_ uint256 private _totalSupply;\n447-new_variable-75-75", method="", type_label=new_variable];
452 [label="75_ function withdrawBal_unchk41 () public{\n	uint64 Balances_unchk41 = 0;\n	msg.sender.send(Balances_unchk41);}\n452-function_definition-76-78", method="withdrawBal_unchk41()", type_label=function_definition];
456 [label="76_ uint64 Balances_unchk41 = 0;\n456-new_variable-77-77", method="withdrawBal_unchk41()", type_label=new_variable];
462 [label="77_ msg.sender.send(Balances_unchk41);\n462-expression_statement-78-78", method="withdrawBal_unchk41()", type_label=expression_statement];
471 [label="78_ uint256 public _maxTotalSupply;\n471-new_variable-79-79", method="", type_label=new_variable];
476 [label="79_ function bug_unchk42() public{\nuint receivers_unchk42;\naddress payable addr_unchk42;\nif (!addr_unchk42.send(42 ether))\n	{receivers_unchk42 +=1;}\nelse\n	{revert();}\n}\n476-function_definition-80-87", method="bug_unchk42()", type_label=function_definition];
480 [label="80_ uint receivers_unchk42;\n480-new_variable-81-81", method="bug_unchk42()", type_label=new_variable];
485 [label="81_ address payable addr_unchk42;\n485-new_variable-82-82", method="bug_unchk42()", type_label=new_variable];
490 [label="82_ if\n490-if-83-86", method="bug_unchk42()", type_label=if];
2590 [label="82_ end_if", method="bug_unchk42()", type_label=end_if];
500 [label="83_ receivers_unchk42 +=1;\n500-expression_statement-84-84", method="bug_unchk42()", type_label=expression_statement];
507 [label="87_ string private _name = \"Lollypop\";\n507-new_variable-88-88", method="", type_label=new_variable];
514 [label="88_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n514-function_definition-89-91", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
522 [label="89_ callee.send(5 ether);\n522-expression_statement-90-90", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
530 [label="91_ string private _symbol = \"Lolly\";\n530-new_variable-92-92", method="", type_label=new_variable];
537 [label="92_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n537-function_definition-93-97", method="bug_unchk43()", type_label=function_definition];
541 [label="93_ address payable addr_unchk43;\n541-new_variable-94-94", method="bug_unchk43()", type_label=new_variable];
546 [label="94_ if_!addr_unchk43.send (10 ether) || 1==1\n546-if-95-96", method="bug_unchk43()", type_label=if];
2646 [label="94_ end_if", method="bug_unchk43()", type_label=end_if];
562 [label="97_ uint8 private _decimals= 18;\n562-new_variable-98-98", method="", type_label=new_variable];
568 [label="98_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n568-function_definition-99-101", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
577 [label="99_ dst.call.value(msg.value)(\"\");\n577-expression_statement-100-100", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
592 [label="101_ uint256 public maxAgeOfToken = 365 days;\n592-new_variable-102-102", method="", type_label=new_variable];
599 [label="102_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n599-function_definition-103-105", method="withdrawBal_unchk17()", type_label=function_definition];
603 [label="103_ uint64 Balances_unchk17 = 0;\n603-new_variable-104-104", method="withdrawBal_unchk17()", type_label=new_variable];
609 [label="104_ msg.sender.send(Balances_unchk17);\n609-expression_statement-105-105", method="withdrawBal_unchk17()", type_label=expression_statement];
618 [label="105_ uint256  public minAgeOfToken = 1 days;\n618-new_variable-106-106", method="", type_label=new_variable];
625 [label="106_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n625-function_definition-107-109", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
633 [label="107_ callee.call.value(1 ether);\n633-expression_statement-108-108", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
643 [label="109_ uint256 public perDayBonus = 100;\n643-new_variable-110-110", method="", type_label=new_variable];
649 [label="110_ struct  transferMapping{\n        uint256 amount;\n        uint256 time;\n    }\n649-expression_statement-111-114", method="transferMapping()", type_label=expression_statement];
661 [label="115_ _maxTotalSupply = 1000000000 * 10 ** 18;\n661-expression_statement-116-116", method="", type_label=expression_statement];
669 [label="116_ _totalSupply =  2000000 * 10 ** 18;\n669-expression_statement-117-117", method="", type_label=expression_statement];
677 [label="117_ _balances[msg.sender].amount = _totalSupply;\n677-expression_statement-118-118", method="", type_label=expression_statement];
687 [label="118_ _balances[msg.sender].time = now;\n687-expression_statement-119-119", method="", type_label=expression_statement];
697 [label="120_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n697-function_definition-121-123", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
705 [label="121_ callee.call.value(1 ether);\n705-expression_statement-122-122", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
715 [label="123_ function calculateBonus(uint256 timeElasped , uint256 amount) public view  returns(uint256){\n        uint256 totalDays = timeElasped.div(minAgeOfToken);\n        if(totalDays > maxAgeOfToken){\n            totalDays = maxAgeOfToken;\n        }\n        uint256 totalBonus = (totalDays *  amount).div(perDayBonus);\n        return totalBonus;\n    }\n715-function_definition-124-131", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=function_definition];
732 [label="124_ uint256 totalDays = timeElasped.div(minAgeOfToken);\n732-new_variable-125-125", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=new_variable];
743 [label="125_ if_totalDays > maxAgeOfToken\n743-if-126-128", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=if];
2843 [label="125_ end_if", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=end_if];
748 [label="126_ totalDays = maxAgeOfToken;\n748-expression_statement-127-127", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=expression_statement];
752 [label="128_ uint256 totalBonus = (totalDays *  amount).div(perDayBonus);\n752-new_variable-129-129", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=new_variable];
766 [label="129_ return totalBonus;\n766-return-130-130", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=return];
768 [label="131_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n768-function_definition-132-136", method="bug_unchk19()", type_label=function_definition];
772 [label="132_ address payable addr_unchk19;\n772-new_variable-133-133", method="bug_unchk19()", type_label=new_variable];
777 [label="133_ if_!addr_unchk19.send (10 ether) || 1==1\n777-if-134-135", method="bug_unchk19()", type_label=if];
2877 [label="133_ end_if", method="bug_unchk19()", type_label=end_if];
793 [label="136_ function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        uint256 senderTimeElasped = now - (_balances[sender].time);\n        uint256 recipientTimeElasped = now - (_balances[recipient].time);\n        if(senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)){\n            uint256 bonus = calculateBonus(senderTimeElasped , balanceOf(sender));\n            mint(sender , bonus);\n        }\n        if(recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient){\n             uint256 bonus = calculateBonus(recipientTimeElasped , balanceOf(recipient));\n             mint(recipient , bonus);\n        }\n        _balances[sender].amount = _balances[sender].amount.sub(amount);\n        _balances[recipient].amount = _balances[recipient].amount.add(amount);\n        _balances[sender].time = now;\n        _balances[recipient].time = now;\n        emit Transfer(sender, recipient, amount);\n    }\n793-function_definition-137-155", method="_transfer(address sender,address recipient,uint256 amount)", type_label=function_definition];
809 [label="137_ require(sender != address(0), \"ERC20: transfer from the zero address\");\n809-expression_statement-138-138", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
821 [label="138_ require(recipient != address(0), \"ERC20: transfer to the zero address\");\n821-expression_statement-139-139", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
833 [label="139_ uint256 senderTimeElasped = now - (_balances[sender].time);\n833-new_variable-140-140", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
846 [label="140_ uint256 recipientTimeElasped = now - (_balances[recipient].time);\n846-new_variable-141-141", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
859 [label="141_ if_senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)\n859-if-142-145", method="_transfer(address sender,address recipient,uint256 amount)", type_label=if];
2959 [label="141_ end_if", method="_transfer(address sender,address recipient,uint256 amount)", type_label=end_if];
869 [label="142_ uint256 bonus = calculateBonus(senderTimeElasped , balanceOf(sender));\n869-new_variable-143-143", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
883 [label="143_ mint(sender , bonus);\n883-expression_statement-144-144", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
890 [label="145_ if_recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient\n890-if-146-149", method="_transfer(address sender,address recipient,uint256 amount)", type_label=if];
2990 [label="145_ end_if", method="_transfer(address sender,address recipient,uint256 amount)", type_label=end_if];
904 [label="146_ uint256 bonus = calculateBonus(recipientTimeElasped , balanceOf(recipient));\n904-new_variable-147-147", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
918 [label="147_ mint(recipient , bonus);\n918-expression_statement-148-148", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
925 [label="149_ _balances[sender].amount = _balances[sender].amount.sub(amount);\n925-expression_statement-150-150", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
942 [label="150_ _balances[recipient].amount = _balances[recipient].amount.add(amount);\n942-expression_statement-151-151", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
959 [label="151_ _balances[sender].time = now;\n959-expression_statement-152-152", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
967 [label="152_ _balances[recipient].time = now;\n967-expression_statement-153-153", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
983 [label="155_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n983-function_definition-156-158", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
991 [label="156_ callee.send(5 ether);\n991-expression_statement-157-157", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
999 [label="158_ function name() public view returns (string memory) {\n        return _name;\n    }\n999-function_definition-159-161", method="name()", type_label=function_definition];
1008 [label="159_ return _name;\n1008-return-160-160", method="name()", type_label=return];
1010 [label="161_ bool public payedOut_unchk20 = false;\n1010-new_variable-162-162", method="", type_label=new_variable];
1017 [label="162_ address payable public winner_unchk20;\n1017-new_variable-163-163", method="", type_label=new_variable];
1022 [label="163_ uint public winAmount_unchk20;\n1022-new_variable-164-164", method="", type_label=new_variable];
1027 [label="164_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n1027-function_definition-165-169", method="sendToWinner_unchk20()", type_label=function_definition];
1031 [label="165_ require(!payedOut_unchk20);\n1031-expression_statement-166-166", method="sendToWinner_unchk20()", type_label=expression_statement];
1037 [label="166_ winner_unchk20.send(winAmount_unchk20);\n1037-expression_statement-167-167", method="sendToWinner_unchk20()", type_label=expression_statement];
1044 [label="167_ payedOut_unchk20 = true;\n1044-expression_statement-168-168", method="sendToWinner_unchk20()", type_label=expression_statement];
1049 [label="169_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n1049-function_definition-170-172", method="symbol()", type_label=function_definition];
1058 [label="170_ return _symbol;\n1058-return-171-171", method="symbol()", type_label=return];
1060 [label="172_ bool public payedOut_unchk32 = false;\n1060-new_variable-173-173", method="", type_label=new_variable];
1067 [label="173_ address payable public winner_unchk32;\n1067-new_variable-174-174", method="", type_label=new_variable];
1072 [label="174_ uint public winAmount_unchk32;\n1072-new_variable-175-175", method="", type_label=new_variable];
1077 [label="175_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n1077-function_definition-176-180", method="sendToWinner_unchk32()", type_label=function_definition];
1081 [label="176_ require(!payedOut_unchk32);\n1081-expression_statement-177-177", method="sendToWinner_unchk32()", type_label=expression_statement];
1087 [label="177_ winner_unchk32.send(winAmount_unchk32);\n1087-expression_statement-178-178", method="sendToWinner_unchk32()", type_label=expression_statement];
1094 [label="178_ payedOut_unchk32 = true;\n1094-expression_statement-179-179", method="sendToWinner_unchk32()", type_label=expression_statement];
1099 [label="180_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n1099-function_definition-181-183", method="decimals()", type_label=function_definition];
1108 [label="181_ return _decimals;\n1108-return-182-182", method="decimals()", type_label=return];
1110 [label="183_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n1110-function_definition-184-186", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
1118 [label="184_ callee.send(5 ether);\n1118-expression_statement-185-185", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
1126 [label="186_ modifier onlyLollypopAndOwner {\n        require(msg.sender == address(this) || msg.sender == owner);\n        _;\n    }\n1126-expression_statement-187-190", method="", type_label=expression_statement];
1129 [label="187_ require(msg.sender == address(this) || msg.sender == owner);\n1129-expression_statement-188-188", method="", type_label=expression_statement];
1146 [label="188_ _;\n1146-expression_statement-189-189", method="", type_label=expression_statement];
1148 [label="190_ bool public payedOut_unchk45 = false;\n1148-new_variable-191-191", method="", type_label=new_variable];
1155 [label="191_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n1155-function_definition-192-195", method="withdrawLeftOver_unchk45()", type_label=function_definition];
1159 [label="192_ require(payedOut_unchk45);\n1159-expression_statement-193-193", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1164 [label="193_ msg.sender.send(address(this).balance);\n1164-expression_statement-194-194", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1191 [label="196_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n1191-function_definition-197-199", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
1199 [label="197_ callee.call.value(1 ether);\n1199-expression_statement-198-198", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
1223 [label="200_ function mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account].amount = _balances[account].amount.add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n1223-function_definition-201-206", method="mint(address account,uint256 amount)", type_label=function_definition];
1235 [label="201_ require(account != address(0), \"ERC20: mint to the zero address\");\n1235-expression_statement-202-202", method="mint(address account,uint256 amount)", type_label=expression_statement];
1247 [label="202_ _totalSupply = _totalSupply.add(amount);\n1247-expression_statement-203-203", method="mint(address account,uint256 amount)", type_label=expression_statement];
1256 [label="203_ _balances[account].amount = _balances[account].amount.add(amount);\n1256-expression_statement-204-204", method="mint(address account,uint256 amount)", type_label=expression_statement];
1283 [label="206_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n1283-function_definition-207-211", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
1299 [label="207_ uint64 subpot_unchk46 = 3 ether;\n1299-new_variable-208-208", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
1306 [label="208_ winner_unchk46.send(subpot_unchk46);\n1306-expression_statement-209-209", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
1313 [label="209_ subpot_unchk46= 0;\n1313-expression_statement-210-210", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
1317 [label="211_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1317-function_definition-212-214", method="totalSupply()", type_label=function_definition];
1326 [label="212_ return _totalSupply;\n1326-return-213-213", method="totalSupply()", type_label=return];
1328 [label="214_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1328-function_definition-215-223", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
1332 [label="215_ address payable addr_unchk4;\n1332-new_variable-216-216", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
1337 [label="216_ if\n1337-if-217-222", method="UncheckedExternalCall_unchk4()", type_label=if];
3437 [label="216_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
1348 [label="223_ function balanceOf(address account) public view returns (uint256) {\n        return _balances[account].amount;\n    }\n1348-function_definition-224-226", method="balanceOf(address account)", type_label=function_definition];
1361 [label="224_ return _balances[account].amount;\n1361-return-225-225", method="balanceOf(address account)", type_label=return];
1367 [label="226_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n1367-function_definition-227-231", method="bug_unchk7()", type_label=function_definition];
1371 [label="227_ address payable addr_unchk7;\n1371-new_variable-228-228", method="bug_unchk7()", type_label=new_variable];
1376 [label="228_ if_!addr_unchk7.send (10 ether) || 1==1\n1376-if-229-230", method="bug_unchk7()", type_label=if];
3476 [label="228_ end_if", method="bug_unchk7()", type_label=end_if];
1392 [label="231_ function timeOf(address account) public view returns (uint256) {\n        return _balances[account].time;\n    }\n1392-function_definition-232-234", method="timeOf(address account)", type_label=function_definition];
1405 [label="232_ return _balances[account].time;\n1405-return-233-233", method="timeOf(address account)", type_label=return];
1411 [label="234_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1411-function_definition-235-237", method="my_func_unchk23(address payable dst)", type_label=function_definition];
1420 [label="235_ dst.send(msg.value);\n1420-expression_statement-236-236", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
1429 [label="237_ function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n1429-function_definition-238-241", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
1445 [label="238_ _transfer(msg.sender, recipient, amount);\n1445-expression_statement-239-239", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1456 [label="239_ return true;\n1456-return-240-240", method="transfer(address recipient,uint256 amount)", type_label=return];
1459 [label="241_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n1459-function_definition-242-244", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
1467 [label="242_ callee.send(5 ether);\n1467-expression_statement-243-243", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
1475 [label="244_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    require(receivers.length == amounts.length);\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n1475-function_definition-245-250", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
1489 [label="245_ require(receivers.length == amounts.length);\n1489-expression_statement-246-246", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1500 [label="246_ for(i < receivers.length;;i++)\n1500-for-247-249", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
3600 [label="246_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
1513 [label="246_ i++\n1513-expression_statement-247-247", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1516 [label="247_ transfer(receivers[i], amounts[i]);\n1516-expression_statement-248-248", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1527 [label="250_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n1527-function_definition-251-258", method="bug_unchk30()", type_label=function_definition];
1531 [label="251_ uint receivers_unchk30;\n1531-new_variable-252-252", method="bug_unchk30()", type_label=new_variable];
1536 [label="252_ address payable addr_unchk30;\n1536-new_variable-253-253", method="bug_unchk30()", type_label=new_variable];
1541 [label="253_ if\n1541-if-254-257", method="bug_unchk30()", type_label=if];
3641 [label="253_ end_if", method="bug_unchk30()", type_label=end_if];
1551 [label="254_ receivers_unchk30 +=1;\n1551-expression_statement-255-255", method="bug_unchk30()", type_label=expression_statement];
1558 [label="258_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n1558-function_definition-259-261", method="allowance(address owner,address spender)", type_label=function_definition];
1575 [label="259_ return _allowances[owner][spender];\n1575-return-260-260", method="allowance(address owner,address spender)", type_label=return];
1581 [label="261_ bool public payedOut_unchk8 = false;\n1581-new_variable-262-262", method="", type_label=new_variable];
1588 [label="262_ address payable public winner_unchk8;\n1588-new_variable-263-263", method="", type_label=new_variable];
1593 [label="263_ uint public winAmount_unchk8;\n1593-new_variable-264-264", method="", type_label=new_variable];
1598 [label="264_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1598-function_definition-265-269", method="sendToWinner_unchk8()", type_label=function_definition];
1602 [label="265_ require(!payedOut_unchk8);\n1602-expression_statement-266-266", method="sendToWinner_unchk8()", type_label=expression_statement];
1608 [label="266_ winner_unchk8.send(winAmount_unchk8);\n1608-expression_statement-267-267", method="sendToWinner_unchk8()", type_label=expression_statement];
1615 [label="267_ payedOut_unchk8 = true;\n1615-expression_statement-268-268", method="sendToWinner_unchk8()", type_label=expression_statement];
1620 [label="269_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n1620-function_definition-270-273", method="approve(address spender,uint256 value)", type_label=function_definition];
1636 [label="270_ _approve(msg.sender, spender, value);\n1636-expression_statement-271-271", method="approve(address spender,uint256 value)", type_label=expression_statement];
1647 [label="271_ return true;\n1647-return-272-272", method="approve(address spender,uint256 value)", type_label=return];
1650 [label="273_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1650-function_definition-274-275", method="bug_unchk39(address payable addr)", type_label=function_definition];
1658 [label="274_ addr.send (4 ether);\n1658-expression_statement-275-275", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1666 [label="275_ function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n1666-function_definition-276-280", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
1686 [label="276_ _transfer(sender, recipient, amount);\n1686-expression_statement-277-277", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1695 [label="277_ _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n1695-expression_statement-278-278", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1717 [label="278_ return true;\n1717-return-279-279", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=return];
1720 [label="280_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1720-function_definition-281-283", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1729 [label="281_ dst.call.value(msg.value)(\"\");\n1729-expression_statement-282-282", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1744 [label="283_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n1744-function_definition-284-287", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
1760 [label="284_ _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n1760-expression_statement-285-285", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1782 [label="285_ return true;\n1782-return-286-286", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
1785 [label="287_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1785-function_definition-288-290", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1794 [label="288_ dst.send(msg.value);\n1794-expression_statement-289-289", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1803 [label="290_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n1803-function_definition-291-294", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
1819 [label="291_ _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n1819-expression_statement-292-292", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1841 [label="292_ return true;\n1841-return-293-293", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
1844 [label="294_ bool public payedOut_unchk44 = false;\n1844-new_variable-295-295", method="", type_label=new_variable];
1851 [label="295_ address payable public winner_unchk44;\n1851-new_variable-296-296", method="", type_label=new_variable];
1856 [label="296_ uint public winAmount_unchk44;\n1856-new_variable-297-297", method="", type_label=new_variable];
1861 [label="297_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1861-function_definition-298-302", method="sendToWinner_unchk44()", type_label=function_definition];
1865 [label="298_ require(!payedOut_unchk44);\n1865-expression_statement-299-299", method="sendToWinner_unchk44()", type_label=expression_statement];
1871 [label="299_ winner_unchk44.send(winAmount_unchk44);\n1871-expression_statement-300-300", method="sendToWinner_unchk44()", type_label=expression_statement];
1878 [label="300_ payedOut_unchk44 = true;\n1878-expression_statement-301-301", method="sendToWinner_unchk44()", type_label=expression_statement];
1883 [label="302_ function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account].amount = _balances[account].amount.sub(value);\n        emit Transfer(account, address(0), value);\n    }\n1883-function_definition-303-308", method="_burn(address account,uint256 value)", type_label=function_definition];
1895 [label="303_ require(account != address(0), \"ERC20: burn from the zero address\");\n1895-expression_statement-304-304", method="_burn(address account,uint256 value)", type_label=expression_statement];
1907 [label="304_ _totalSupply = _totalSupply.sub(value);\n1907-expression_statement-305-305", method="_burn(address account,uint256 value)", type_label=expression_statement];
1916 [label="305_ _balances[account].amount = _balances[account].amount.sub(value);\n1916-expression_statement-306-306", method="_burn(address account,uint256 value)", type_label=expression_statement];
1943 [label="308_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1943-function_definition-309-317", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1947 [label="309_ address payable addr_unchk40;\n1947-new_variable-310-310", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1952 [label="310_ if\n1952-if-311-316", method="UncheckedExternalCall_unchk40()", type_label=if];
4052 [label="310_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1963 [label="317_ function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n1963-function_definition-318-323", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
1979 [label="318_ require(owner != address(0), \"ERC20: approve from the zero address\");\n1979-expression_statement-319-319", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1991 [label="319_ require(spender != address(0), \"ERC20: approve to the zero address\");\n1991-expression_statement-320-320", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
2003 [label="320_ _allowances[owner][spender] = value;\n2003-expression_statement-321-321", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
2019 [label="323_ bool public payedOut_unchk33 = false;\n2019-new_variable-324-324", method="", type_label=new_variable];
2026 [label="324_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n2026-function_definition-325-328", method="withdrawLeftOver_unchk33()", type_label=function_definition];
2030 [label="325_ require(payedOut_unchk33);\n2030-expression_statement-326-326", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
2035 [label="326_ msg.sender.send(address(this).balance);\n2035-expression_statement-327-327", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
2048 [label="328_ function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n2048-function_definition-329-332", method="_burnFrom(address account,uint256 amount)", type_label=function_definition];
2060 [label="329_ _burn(account, amount);\n2060-expression_statement-330-330", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
2067 [label="330_ _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n2067-expression_statement-331-331", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
2089 [label="332_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n2089-function_definition-333-334", method="bug_unchk27(address payable addr)", type_label=function_definition];
2097 [label="333_ addr.send (42 ether);\n2097-expression_statement-334-334", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
505;
1347;
1556;
1962;
13 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 43  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
52 -> 56  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
56 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
61 -> 2161  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
95 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
125 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
208 -> 225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
243 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
245 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 267  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
262 -> 2362  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2362 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 2362  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
267 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
269 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
291 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
328 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
370 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
402 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
429 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
485 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 500  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2590 -> 507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 2590  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
514 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 2646  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
568 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
603 -> 609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 748  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
743 -> 2843  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2843 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 2843  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
752 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
766 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
768 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
777 -> 2877  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
793 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
859 -> 869  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
859 -> 2959  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2959 -> 890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 2959  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
890 -> 904  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
890 -> 2990  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2990 -> 925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 2990  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
925 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1010 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 1031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1060 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 1072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 1081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1081 -> 1087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 1108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1108 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1110 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1126 -> 1148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1155 -> 1159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1159 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1191 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1223 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1299 -> 1306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1306 -> 1313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1317 -> 1326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1326 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1328 -> 1332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 1337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1348 -> 1361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1361 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1367 -> 1371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1371 -> 1376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 3476  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1392 -> 1405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1405 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1411 -> 1420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1445 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1456 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1459 -> 1467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1475 -> 1489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1489 -> 1500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1500 -> 1516  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1500 -> 3600  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3600 -> 1527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 1500  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1516 -> 1513  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1527 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1536 -> 1541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1541 -> 1551  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3641 -> 1558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1551 -> 3641  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1558 -> 1575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1575 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1581 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1598 -> 1602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1608 -> 1615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1620 -> 1636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1636 -> 1647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1647 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1650 -> 1658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1666 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 1695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1695 -> 1717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1717 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1720 -> 1729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1744 -> 1760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1760 -> 1782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1782 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1785 -> 1794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1819 -> 1841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1841 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1844 -> 1851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1851 -> 1856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1861 -> 1865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1865 -> 1871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1871 -> 1878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1883 -> 1895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1895 -> 1907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1907 -> 1916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1943 -> 1947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1947 -> 1952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1963 -> 1979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1979 -> 1991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1991 -> 2003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2026 -> 2030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2030 -> 2035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2048 -> 2060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2060 -> 2067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2089 -> 2097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 2590  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1347 -> 3437  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1556 -> 3641  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1962 -> 4052  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
