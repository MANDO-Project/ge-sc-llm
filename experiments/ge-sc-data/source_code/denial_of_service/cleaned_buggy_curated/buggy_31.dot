digraph  {
13 [label="2_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n13-function_definition-3-3", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
35 [label="5_ function signer() external view returns (address _signer);\n35-function_definition-6-6", method="signer()", type_label=function_definition];
47 [label="8_ function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        if (signature.length != 65) {\n            return (address(0));\n        }\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return address(0);\n        }\n        if (v != 27 && v != 28) {\n            return address(0);\n        }\n        return ecrecover(hash, v, r, s);\n    }\n47-function_definition-9-28", method="recover(bytes32 hash,bytes memory signature)", type_label=function_definition];
64 [label="9_ if_signature.length != 65\n64-if-10-12", method="recover(bytes32 hash,bytes memory signature)", type_label=if];
942 [label="9_ end_if", method="recover(bytes32 hash,bytes memory signature)", type_label=end_if];
71 [label="10_ return (address(0));\n71-return-11-11", method="recover(bytes32 hash,bytes memory signature)", type_label=return];
76 [label="12_ bytes32 r;\n76-new_variable-13-13", method="recover(bytes32 hash,bytes memory signature)", type_label=new_variable];
81 [label="13_ bytes32 s;\n81-new_variable-14-14", method="recover(bytes32 hash,bytes memory signature)", type_label=new_variable];
86 [label="14_ uint8 v;\n86-new_variable-15-15", method="recover(bytes32 hash,bytes memory signature)", type_label=new_variable];
131 [label="20_ if_uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n131-if-21-23", method="recover(bytes32 hash,bytes memory signature)", type_label=if];
1009 [label="20_ end_if", method="recover(bytes32 hash,bytes memory signature)", type_label=end_if];
138 [label="21_ return address(0);\n138-return-22-22", method="recover(bytes32 hash,bytes memory signature)", type_label=return];
142 [label="23_ if_v != 27 && v != 28\n142-if-24-26", method="recover(bytes32 hash,bytes memory signature)", type_label=if];
1020 [label="23_ end_if", method="recover(bytes32 hash,bytes memory signature)", type_label=end_if];
151 [label="24_ return address(0);\n151-return-25-25", method="recover(bytes32 hash,bytes memory signature)", type_label=return];
155 [label="26_ return ecrecover(hash, v, r, s);\n155-return-27-27", method="recover(bytes32 hash,bytes memory signature)", type_label=return];
169 [label="30_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n169-function_definition-31-35", method="bug_unchk7()", type_label=function_definition];
173 [label="31_ address payable addr_unchk7;\n173-new_variable-32-32", method="bug_unchk7()", type_label=new_variable];
178 [label="32_ if_!addr_unchk7.send (10 ether) || 1==1\n178-if-33-34", method="bug_unchk7()", type_label=if];
1056 [label="32_ end_if", method="bug_unchk7()", type_label=end_if];
194 [label="35_ address private _owner;\n194-new_variable-36-36", method="", type_label=new_variable];
199 [label="36_ bool public payedOut_unchk45 = false;\n199-new_variable-37-37", method="", type_label=new_variable];
206 [label="37_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n206-function_definition-38-41", method="withdrawLeftOver_unchk45()", type_label=function_definition];
210 [label="38_ require(payedOut_unchk45);\n210-expression_statement-39-39", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
215 [label="39_ msg.sender.send(address(this).balance);\n215-expression_statement-40-40", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
240 [label="43_ _owner = msg.sender;\n240-expression_statement-44-44", method="", type_label=expression_statement];
254 [label="46_ bool public payedOut_unchk8 = false;\n254-new_variable-47-47", method="", type_label=new_variable];
261 [label="47_ address payable public winner_unchk8;\n261-new_variable-48-48", method="", type_label=new_variable];
266 [label="48_ uint public winAmount_unchk8;\n266-new_variable-49-49", method="", type_label=new_variable];
271 [label="49_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n271-function_definition-50-54", method="sendToWinner_unchk8()", type_label=function_definition];
275 [label="50_ require(!payedOut_unchk8);\n275-expression_statement-51-51", method="sendToWinner_unchk8()", type_label=expression_statement];
281 [label="51_ winner_unchk8.send(winAmount_unchk8);\n281-expression_statement-52-52", method="sendToWinner_unchk8()", type_label=expression_statement];
288 [label="52_ payedOut_unchk8 = true;\n288-expression_statement-53-53", method="sendToWinner_unchk8()", type_label=expression_statement];
293 [label="54_ function owner() public view returns (address) {\n        return _owner;\n    }\n293-function_definition-55-57", method="owner()", type_label=function_definition];
302 [label="55_ return _owner;\n302-return-56-56", method="owner()", type_label=return];
304 [label="57_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n304-function_definition-58-59", method="bug_unchk39(address payable addr)", type_label=function_definition];
312 [label="58_ addr.send (4 ether);\n312-expression_statement-59-59", method="bug_unchk39(address payable addr)", type_label=expression_statement];
320 [label="59_ modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n320-expression_statement-60-63", method="", type_label=expression_statement];
323 [label="60_ require(isOwner(), \"Ownable: caller is not the owner\");\n323-expression_statement-61-61", method="", type_label=expression_statement];
332 [label="61_ _;\n332-expression_statement-62-62", method="", type_label=expression_statement];
334 [label="63_ function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n334-function_definition-64-66", method="isOwner()", type_label=function_definition];
343 [label="64_ return msg.sender == _owner;\n343-return-65-65", method="isOwner()", type_label=return];
349 [label="66_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n349-function_definition-67-69", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
358 [label="67_ dst.call.value(msg.value)(\"\");\n358-expression_statement-68-68", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
373 [label="69_ function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n373-function_definition-70-72", method="transferOwnership(address newOwner)", type_label=function_definition];
380 [label="69_ onlyOwner\n380-expression_statement-70-70", method="transferOwnership(address newOwner)", type_label=expression_statement];
383 [label="70_ _transferOwnership(newOwner);\n383-expression_statement-71-71", method="transferOwnership(address newOwner)", type_label=expression_statement];
388 [label="72_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n388-function_definition-73-75", method="my_func_unchk35(address payable dst)", type_label=function_definition];
397 [label="73_ dst.send(msg.value);\n397-expression_statement-74-74", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
406 [label="75_ function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n406-function_definition-76-80", method="_transferOwnership(address newOwner)", type_label=function_definition];
414 [label="76_ require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n414-expression_statement-77-77", method="_transferOwnership(address newOwner)", type_label=expression_statement];
432 [label="78_ _owner = newOwner;\n432-expression_statement-79-79", method="_transferOwnership(address newOwner)", type_label=expression_statement];
436 [label="80_ bool public payedOut_unchk44 = false;\n436-new_variable-81-81", method="", type_label=new_variable];
443 [label="81_ address payable public winner_unchk44;\n443-new_variable-82-82", method="", type_label=new_variable];
448 [label="82_ uint public winAmount_unchk44;\n448-new_variable-83-83", method="", type_label=new_variable];
453 [label="83_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n453-function_definition-84-88", method="sendToWinner_unchk44()", type_label=function_definition];
457 [label="84_ require(!payedOut_unchk44);\n457-expression_statement-85-85", method="sendToWinner_unchk44()", type_label=expression_statement];
463 [label="85_ winner_unchk44.send(winAmount_unchk44);\n463-expression_statement-86-86", method="sendToWinner_unchk44()", type_label=expression_statement];
470 [label="86_ payedOut_unchk44 = true;\n470-expression_statement-87-87", method="sendToWinner_unchk44()", type_label=expression_statement];
478 [label="90_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n478-function_definition-91-93", method="my_func_unchk23(address payable dst)", type_label=function_definition];
487 [label="91_ dst.send(msg.value);\n487-expression_statement-92-92", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
496 [label="93_ uint256 private _guardCounter;\n496-new_variable-94-94", method="", type_label=new_variable];
503 [label="95_ _guardCounter = 1;\n503-expression_statement-96-96", method="", type_label=expression_statement];
507 [label="97_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n507-function_definition-98-106", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
511 [label="98_ address payable addr_unchk40;\n511-new_variable-99-99", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
516 [label="99_ if\n516-if-100-105", method="UncheckedExternalCall_unchk40()", type_label=if];
1394 [label="99_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
527 [label="106_ modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n527-expression_statement-107-112", method="", type_label=expression_statement];
530 [label="107_ _guardCounter += 1;\n530-expression_statement-108-108", method="", type_label=expression_statement];
534 [label="108_ uint256 localCounter = _guardCounter;\n534-new_variable-109-109", method="", type_label=new_variable];
540 [label="109_ _;\n540-expression_statement-110-110", method="", type_label=expression_statement];
542 [label="110_ require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n542-expression_statement-111-111", method="", type_label=expression_statement];
561 [label="114_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n561-function_definition-115-117", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
569 [label="115_ callee.send(5 ether);\n569-expression_statement-116-116", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
577 [label="117_ IERC20 public token;\n577-new_variable-118-118", method="", type_label=new_variable];
583 [label="118_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n583-function_definition-119-126", method="bug_unchk30()", type_label=function_definition];
587 [label="119_ uint receivers_unchk30;\n587-new_variable-120-120", method="bug_unchk30()", type_label=new_variable];
592 [label="120_ address payable addr_unchk30;\n592-new_variable-121-121", method="bug_unchk30()", type_label=new_variable];
597 [label="121_ if\n597-if-122-125", method="bug_unchk30()", type_label=if];
1475 [label="121_ end_if", method="bug_unchk30()", type_label=end_if];
607 [label="122_ receivers_unchk30 +=1;\n607-expression_statement-123-123", method="bug_unchk30()", type_label=expression_statement];
614 [label="126_ address public relayer;\n614-new_variable-127-127", method="", type_label=new_variable];
619 [label="127_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n619-function_definition-128-130", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
627 [label="128_ callee.call.value(1 ether);\n627-expression_statement-129-129", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
657 [label="132_ relayer = _relayer;\n657-expression_statement-133-133", method="", type_label=expression_statement];
661 [label="133_ token = IERC20(_tokenAddress);\n661-expression_statement-134-134", method="", type_label=expression_statement];
668 [label="135_ bool public payedOut_unchk33 = false;\n668-new_variable-136-136", method="", type_label=new_variable];
675 [label="136_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n675-function_definition-137-140", method="withdrawLeftOver_unchk33()", type_label=function_definition];
679 [label="137_ require(payedOut_unchk33);\n679-expression_statement-138-138", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
684 [label="138_ msg.sender.send(address(this).balance);\n684-expression_statement-139-139", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
697 [label="140_ function execute(\n        address _to, \n        uint256 _value, \n        uint256 _fee, \n        bytes calldata _signature\n    ) nonReentrant external {\n        require(tx.origin == relayer, \"Invalid transaction origin\");\n        Marmo marmo = Marmo(msg.sender);\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                _to,\n                _value,\n                _fee\n            )\n        );\n        require(marmo.signer() == ECDSA.recover(hash, _signature), \"Invalid signature\");\n        require(token.transferFrom(msg.sender, _to, _value));\n        require(token.transferFrom(msg.sender, relayer, _fee));\n    }\n697-function_definition-141-159", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=function_definition];
715 [label="145_ nonReentrant\n715-expression_statement-146-146", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
719 [label="146_ require(tx.origin == relayer, \"Invalid transaction origin\");\n719-expression_statement-147-147", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
731 [label="147_ Marmo marmo = Marmo(msg.sender);\n731-new_variable-148-148", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=new_variable];
743 [label="148_ bytes32 hash = keccak256(\n            abi.encodePacked(\n                _to,\n                _value,\n                _fee\n            )\n        );\n743-new_variable-149-155", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=new_variable];
761 [label="155_ require(marmo.signer() == ECDSA.recover(hash, _signature), \"Invalid signature\");\n761-expression_statement-156-156", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
781 [label="156_ require(token.transferFrom(msg.sender, _to, _value));\n781-expression_statement-157-157", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
797 [label="157_ require(token.transferFrom(msg.sender, relayer, _fee));\n797-expression_statement-158-158", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
813 [label="159_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n813-function_definition-160-161", method="bug_unchk27(address payable addr)", type_label=function_definition];
821 [label="160_ addr.send (42 ether);\n821-expression_statement-161-161", method="bug_unchk27(address payable addr)", type_label=expression_statement];
829 [label="161_ function setRelayer(address _newRelayer) onlyOwner external {\n        require(_newRelayer != address(0));\n        emit NewRelayer(relayer, _newRelayer);\n        relayer = _newRelayer;\n    }\n829-function_definition-162-166", method="setRelayer(address _newRelayer)", type_label=function_definition];
835 [label="161_ onlyOwner\n835-expression_statement-162-162", method="setRelayer(address _newRelayer)", type_label=expression_statement];
839 [label="162_ require(_newRelayer != address(0));\n839-expression_statement-163-163", method="setRelayer(address _newRelayer)", type_label=expression_statement];
854 [label="164_ relayer = _newRelayer;\n854-expression_statement-165-165", method="setRelayer(address _newRelayer)", type_label=expression_statement];
858 [label="166_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n858-function_definition-167-171", method="bug_unchk31()", type_label=function_definition];
862 [label="167_ address payable addr_unchk31;\n862-new_variable-168-168", method="bug_unchk31()", type_label=new_variable];
867 [label="168_ if_!addr_unchk31.send (10 ether) || 1==1\n867-if-169-170", method="bug_unchk31()", type_label=if];
1745 [label="168_ end_if", method="bug_unchk31()", type_label=end_if];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
526;
612;
47 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 71  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
64 -> 942  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
942 -> 76  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
71 -> 942  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
71 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
76 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 86  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 138  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
131 -> 1009  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1009 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 1009  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
138 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
142 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
142 -> 1020  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1020 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 1020  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
169 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 1056  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
194 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
254 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
271 -> 275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
275 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
281 -> 288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
304 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
349 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
534 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 607  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1475 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 1475  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
619 -> 627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
867 -> 1745  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
526 -> 1394  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
612 -> 1475  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
