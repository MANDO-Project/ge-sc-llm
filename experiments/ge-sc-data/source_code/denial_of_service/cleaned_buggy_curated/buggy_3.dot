digraph  {
13 [label="2_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n13-function_definition-3-7", method="bug_unchk31()", type_label=function_definition];
17 [label="3_ address payable addr_unchk31;\n17-new_variable-4-4", method="bug_unchk31()", type_label=new_variable];
22 [label="4_ if_!addr_unchk31.send (10 ether) || 1==1\n22-if-5-6", method="bug_unchk31()", type_label=if];
1117 [label="4_ end_if", method="bug_unchk31()", type_label=end_if];
52 [label="8_ bool public payedOut_unchk45 = false;\n52-new_variable-9-9", method="", type_label=new_variable];
59 [label="9_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n59-function_definition-10-13", method="withdrawLeftOver_unchk45()", type_label=function_definition];
63 [label="10_ require(payedOut_unchk45);\n63-expression_statement-11-11", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
68 [label="11_ msg.sender.send(address(this).balance);\n68-expression_statement-12-12", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
95 [label="14_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n95-function_definition-15-17", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
103 [label="15_ callee.call.value(1 ether);\n103-expression_statement-16-16", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
127 [label="18_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n127-function_definition-19-21", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
135 [label="19_ callee.send(5 ether);\n135-expression_statement-20-20", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
143 [label="21_ uint256 public totalSupply;\n143-new_variable-22-22", method="", type_label=new_variable];
148 [label="22_ bool public payedOut_unchk20 = false;\n148-new_variable-23-23", method="", type_label=new_variable];
155 [label="23_ address payable public winner_unchk20;\n155-new_variable-24-24", method="", type_label=new_variable];
160 [label="24_ uint public winAmount_unchk20;\n160-new_variable-25-25", method="", type_label=new_variable];
165 [label="25_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n165-function_definition-26-30", method="sendToWinner_unchk20()", type_label=function_definition];
169 [label="26_ require(!payedOut_unchk20);\n169-expression_statement-27-27", method="sendToWinner_unchk20()", type_label=expression_statement];
175 [label="27_ winner_unchk20.send(winAmount_unchk20);\n175-expression_statement-28-28", method="sendToWinner_unchk20()", type_label=expression_statement];
182 [label="28_ payedOut_unchk20 = true;\n182-expression_statement-29-29", method="sendToWinner_unchk20()", type_label=expression_statement];
187 [label="30_ string public name;\n187-new_variable-31-31", method="", type_label=new_variable];
192 [label="31_ bool public payedOut_unchk32 = false;\n192-new_variable-32-32", method="", type_label=new_variable];
199 [label="32_ address payable public winner_unchk32;\n199-new_variable-33-33", method="", type_label=new_variable];
204 [label="33_ uint public winAmount_unchk32;\n204-new_variable-34-34", method="", type_label=new_variable];
209 [label="34_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n209-function_definition-35-39", method="sendToWinner_unchk32()", type_label=function_definition];
213 [label="35_ require(!payedOut_unchk32);\n213-expression_statement-36-36", method="sendToWinner_unchk32()", type_label=expression_statement];
219 [label="36_ winner_unchk32.send(winAmount_unchk32);\n219-expression_statement-37-37", method="sendToWinner_unchk32()", type_label=expression_statement];
226 [label="37_ payedOut_unchk32 = true;\n226-expression_statement-38-38", method="sendToWinner_unchk32()", type_label=expression_statement];
231 [label="39_ uint8 public decimals;\n231-new_variable-40-40", method="", type_label=new_variable];
236 [label="40_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n236-function_definition-41-43", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
244 [label="41_ callee.send(5 ether);\n244-expression_statement-42-42", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
252 [label="43_ string public symbol;\n252-new_variable-44-44", method="", type_label=new_variable];
257 [label="44_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n257-function_definition-45-49", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
273 [label="45_ uint64 subpot_unchk46 = 3 ether;\n273-new_variable-46-46", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
280 [label="46_ winner_unchk46.send(subpot_unchk46);\n280-expression_statement-47-47", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
287 [label="47_ subpot_unchk46= 0;\n287-expression_statement-48-48", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
291 [label="49_ address public owner;\n291-new_variable-50-50", method="", type_label=new_variable];
296 [label="50_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n296-function_definition-51-59", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
300 [label="51_ address payable addr_unchk4;\n300-new_variable-52-52", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
305 [label="52_ if\n305-if-53-58", method="UncheckedExternalCall_unchk4()", type_label=if];
1400 [label="52_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
316 [label="59_ mapping (address => uint256) internal balances;\n316-new_variable-60-60", method="", type_label=new_variable];
323 [label="60_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n323-function_definition-61-65", method="bug_unchk7()", type_label=function_definition];
327 [label="61_ address payable addr_unchk7;\n327-new_variable-62-62", method="bug_unchk7()", type_label=new_variable];
332 [label="62_ if_!addr_unchk7.send (10 ether) || 1==1\n332-if-63-64", method="bug_unchk7()", type_label=if];
1427 [label="62_ end_if", method="bug_unchk7()", type_label=end_if];
348 [label="65_ mapping (address => mapping (address => uint256)) internal allowed;\n348-new_variable-66-66", method="", type_label=new_variable];
357 [label="66_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n357-function_definition-67-69", method="my_func_unchk23(address payable dst)", type_label=function_definition];
366 [label="67_ dst.send(msg.value);\n366-expression_statement-68-68", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
375 [label="69_ bool isTransPaused=false;\n375-new_variable-70-70", method="", type_label=new_variable];
391 [label="74_ owner=msg.sender;\n391-expression_statement-75-75", method="", type_label=expression_statement];
397 [label="75_ if__initialAmount<=0\n397-if-76-82", method="", type_label=if];
1492 [label="75_ end_if", method="", type_label=end_if];
402 [label="76_ totalSupply = 100000000000000000;\n402-expression_statement-77-77", method="", type_label=expression_statement];
406 [label="77_ balances[owner]=totalSupply;\n406-expression_statement-78-78", method="", type_label=expression_statement];
413 [label="79_ totalSupply = _initialAmount;\n413-expression_statement-80-80", method="", type_label=expression_statement];
417 [label="80_ balances[owner]=_initialAmount;\n417-expression_statement-81-81", method="", type_label=expression_statement];
423 [label="82_ if__decimalUnits<=0\n423-if-83-87", method="", type_label=if];
1518 [label="82_ end_if", method="", type_label=end_if];
428 [label="83_ decimals=2;\n428-expression_statement-84-84", method="", type_label=expression_statement];
433 [label="85_ decimals = _decimalUnits;\n433-expression_statement-86-86", method="", type_label=expression_statement];
437 [label="87_ name = \"CareerOn Chain Token\";\n437-expression_statement-88-88", method="", type_label=expression_statement];
442 [label="88_ symbol = \"COT\";\n442-expression_statement-89-89", method="", type_label=expression_statement];
447 [label="90_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n447-function_definition-91-93", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
455 [label="91_ callee.send(5 ether);\n455-expression_statement-92-92", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
463 [label="93_ function transfer(\n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n        balances[msg.sender] -= _value; \n        balances[_to] += _value; \n		if(msg.sender==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(msg.sender, _to, _value); \n		}\n        return true;\n    }\n463-function_definition-94-111", method="transfer(address _to,uint256 _value)", type_label=function_definition];
480 [label="97_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n480-expression_statement-98-102", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
510 [label="102_ balances[msg.sender] -= _value;\n510-expression_statement-103-103", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
518 [label="103_ balances[_to] += _value;\n518-expression_statement-104-104", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
524 [label="104_ if_msg.sender==owner\n524-if-105-109", method="transfer(address _to,uint256 _value)", type_label=if];
1619 [label="104_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
552 [label="109_ return true;\n552-return-110-110", method="transfer(address _to,uint256 _value)", type_label=return];
555 [label="111_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n555-function_definition-112-119", method="bug_unchk30()", type_label=function_definition];
559 [label="112_ uint receivers_unchk30;\n559-new_variable-113-113", method="bug_unchk30()", type_label=new_variable];
564 [label="113_ address payable addr_unchk30;\n564-new_variable-114-114", method="bug_unchk30()", type_label=new_variable];
569 [label="114_ if\n569-if-115-118", method="bug_unchk30()", type_label=if];
1664 [label="114_ end_if", method="bug_unchk30()", type_label=end_if];
579 [label="115_ receivers_unchk30 +=1;\n579-expression_statement-116-116", method="bug_unchk30()", type_label=expression_statement];
586 [label="119_ function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n        balances[_to] += _value; \n        balances[_from] -= _value;  \n        allowed[_from][msg.sender] -= _value; \n        if(_from==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(_from, _to, _value); \n		}\n        return true;\n    }\n586-function_definition-120-140", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
607 [label="124_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n607-expression_statement-125-130", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
647 [label="130_ balances[_to] += _value;\n647-expression_statement-131-131", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
653 [label="131_ balances[_from] -= _value;\n653-expression_statement-132-132", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
659 [label="132_ allowed[_from][msg.sender] -= _value;\n659-expression_statement-133-133", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
669 [label="133_ if__from==owner\n669-if-134-138", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1764 [label="133_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
693 [label="138_ return true;\n693-return-139-139", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
696 [label="140_ bool public payedOut_unchk8 = false;\n696-new_variable-141-141", method="", type_label=new_variable];
703 [label="141_ address payable public winner_unchk8;\n703-new_variable-142-142", method="", type_label=new_variable];
708 [label="142_ uint public winAmount_unchk8;\n708-new_variable-143-143", method="", type_label=new_variable];
713 [label="143_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n713-function_definition-144-148", method="sendToWinner_unchk8()", type_label=function_definition];
717 [label="144_ require(!payedOut_unchk8);\n717-expression_statement-145-145", method="sendToWinner_unchk8()", type_label=expression_statement];
723 [label="145_ winner_unchk8.send(winAmount_unchk8);\n723-expression_statement-146-146", method="sendToWinner_unchk8()", type_label=expression_statement];
730 [label="146_ payedOut_unchk8 = true;\n730-expression_statement-147-147", method="sendToWinner_unchk8()", type_label=expression_statement];
735 [label="148_ function approve(address _spender, uint256 _value) public returns (bool success) \n    { \n        assert(msg.sender!=_spender && _value>0);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n735-function_definition-149-155", method="approve(address _spender,uint256 _value)", type_label=function_definition];
752 [label="150_ assert(msg.sender!=_spender && _value>0);\n752-expression_statement-151-151", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
765 [label="151_ allowed[msg.sender][_spender] = _value;\n765-expression_statement-152-152", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
785 [label="153_ return true;\n785-return-154-154", method="approve(address _spender,uint256 _value)", type_label=return];
788 [label="155_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n788-function_definition-156-157", method="bug_unchk39(address payable addr)", type_label=function_definition];
796 [label="156_ addr.send (4 ether);\n796-expression_statement-157-157", method="bug_unchk39(address payable addr)", type_label=expression_statement];
804 [label="157_ function allowance(\n        address _owner, \n        address _spender) public view returns (uint256 remaining) \n    {\n        return allowed[_owner][_spender]; \n    }\n804-function_definition-158-163", method="allowance(address _owner,address _spender)", type_label=function_definition];
822 [label="161_ return allowed[_owner][_spender];\n822-return-162-162", method="allowance(address _owner,address _spender)", type_label=return];
828 [label="163_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n828-function_definition-164-166", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
837 [label="164_ dst.call.value(msg.value)(\"\");\n837-expression_statement-165-165", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
852 [label="166_ function balanceOf(address accountAddr) public view returns (uint256) {\n        return balances[accountAddr];\n    }\n852-function_definition-167-169", method="balanceOf(address accountAddr)", type_label=function_definition];
865 [label="167_ return balances[accountAddr];\n865-return-168-168", method="balanceOf(address accountAddr)", type_label=return];
869 [label="169_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n869-function_definition-170-172", method="my_func_unchk35(address payable dst)", type_label=function_definition];
878 [label="170_ dst.send(msg.value);\n878-expression_statement-171-171", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
887 [label="172_ function changeOwner(address newOwner) public{\n        assert(msg.sender==owner && msg.sender!=newOwner);\n        balances[newOwner]=balances[owner];\n        balances[owner]=0;\n        owner=newOwner;\n        emit OwnerChang(msg.sender,newOwner,balances[owner]); \n    }\n887-function_definition-173-179", method="changeOwner(address newOwner)", type_label=function_definition];
895 [label="173_ assert(msg.sender==owner && msg.sender!=newOwner);\n895-expression_statement-174-174", method="changeOwner(address newOwner)", type_label=expression_statement];
910 [label="174_ balances[newOwner]=balances[owner];\n910-expression_statement-175-175", method="changeOwner(address newOwner)", type_label=expression_statement];
918 [label="175_ balances[owner]=0;\n918-expression_statement-176-176", method="changeOwner(address newOwner)", type_label=expression_statement];
924 [label="176_ owner=newOwner;\n924-expression_statement-177-177", method="changeOwner(address newOwner)", type_label=expression_statement];
940 [label="179_ bool public payedOut_unchk44 = false;\n940-new_variable-180-180", method="", type_label=new_variable];
947 [label="180_ address payable public winner_unchk44;\n947-new_variable-181-181", method="", type_label=new_variable];
952 [label="181_ uint public winAmount_unchk44;\n952-new_variable-182-182", method="", type_label=new_variable];
957 [label="182_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n957-function_definition-183-187", method="sendToWinner_unchk44()", type_label=function_definition];
961 [label="183_ require(!payedOut_unchk44);\n961-expression_statement-184-184", method="sendToWinner_unchk44()", type_label=expression_statement];
967 [label="184_ winner_unchk44.send(winAmount_unchk44);\n967-expression_statement-185-185", method="sendToWinner_unchk44()", type_label=expression_statement];
974 [label="185_ payedOut_unchk44 = true;\n974-expression_statement-186-186", method="sendToWinner_unchk44()", type_label=expression_statement];
979 [label="187_ function setPauseStatus(bool isPaused)public{\n        assert(msg.sender==owner);\n        isTransPaused=isPaused;\n    }\n979-function_definition-188-191", method="setPauseStatus(bool isPaused)", type_label=function_definition];
987 [label="188_ assert(msg.sender==owner);\n987-expression_statement-189-189", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
996 [label="189_ isTransPaused=isPaused;\n996-expression_statement-190-190", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1000 [label="191_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1000-function_definition-192-200", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1004 [label="192_ address payable addr_unchk40;\n1004-new_variable-193-193", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1009 [label="193_ if\n1009-if-194-199", method="UncheckedExternalCall_unchk40()", type_label=if];
2104 [label="193_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1020 [label="200_ function changeContractName(string memory _newName,string memory _newSymbol) public {\n        assert(msg.sender==owner);\n        name=_newName;\n        symbol=_newSymbol;\n    }\n1020-function_definition-201-205", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=function_definition];
1032 [label="201_ assert(msg.sender==owner);\n1032-expression_statement-202-202", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1041 [label="202_ name=_newName;\n1041-expression_statement-203-203", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1045 [label="203_ symbol=_newSymbol;\n1045-expression_statement-204-204", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1049 [label="205_ bool public payedOut_unchk33 = false;\n1049-new_variable-206-206", method="", type_label=new_variable];
1056 [label="206_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1056-function_definition-207-210", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1060 [label="207_ require(payedOut_unchk33);\n1060-expression_statement-208-208", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1065 [label="208_ msg.sender.send(address(this).balance);\n1065-expression_statement-209-209", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1084 [label="213_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1084-function_definition-214-215", method="bug_unchk27(address payable addr)", type_label=function_definition];
1092 [label="214_ addr.send (42 ether);\n1092-expression_statement-215-215", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
315;
542;
584;
685;
1019;
13 -> 17  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
17 -> 22  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
22 -> 1117  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
59 -> 63  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
63 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
143 -> 148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
148 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
257 -> 273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
273 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
332 -> 1427  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
357 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 402  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
397 -> 413  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1492 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
402 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 1492  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
413 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 1492  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
423 -> 428  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
423 -> 433  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1518 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 1518  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
433 -> 1518  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
437 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
552 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
555 -> 559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
569 -> 579  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1664 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 1664  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
586 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
696 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
785 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
788 -> 796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
804 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
828 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
869 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
887 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
947 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1020 -> 1032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1032 -> 1041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1041 -> 1045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1060 -> 1065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 1400  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
542 -> 1619  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
584 -> 1664  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
685 -> 1764  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1019 -> 2104  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
