digraph  {
13 [label="2_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n13-function_definition-3-7", method="bug_unchk31()", type_label=function_definition];
17 [label="3_ address payable addr_unchk31;\n17-new_variable-4-4", method="bug_unchk31()", type_label=new_variable];
22 [label="4_ if_!addr_unchk31.send (10 ether) || 1==1\n22-if-5-6", method="bug_unchk31()", type_label=if];
1084 [label="4_ end_if", method="bug_unchk31()", type_label=end_if];
52 [label="8_ bool public payedOut_unchk45 = false;\n52-new_variable-9-9", method="", type_label=new_variable];
59 [label="9_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n59-function_definition-10-13", method="withdrawLeftOver_unchk45()", type_label=function_definition];
63 [label="10_ require(payedOut_unchk45);\n63-expression_statement-11-11", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
68 [label="11_ msg.sender.send(address(this).balance);\n68-expression_statement-12-12", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
95 [label="14_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n95-function_definition-15-17", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
103 [label="15_ callee.call.value(1 ether);\n103-expression_statement-16-16", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
127 [label="18_ bool public payedOut_unchk20 = false;\n127-new_variable-19-19", method="", type_label=new_variable];
134 [label="19_ address payable public winner_unchk20;\n134-new_variable-20-20", method="", type_label=new_variable];
139 [label="20_ uint public winAmount_unchk20;\n139-new_variable-21-21", method="", type_label=new_variable];
144 [label="21_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n144-function_definition-22-26", method="sendToWinner_unchk20()", type_label=function_definition];
148 [label="22_ require(!payedOut_unchk20);\n148-expression_statement-23-23", method="sendToWinner_unchk20()", type_label=expression_statement];
154 [label="23_ winner_unchk20.send(winAmount_unchk20);\n154-expression_statement-24-24", method="sendToWinner_unchk20()", type_label=expression_statement];
161 [label="24_ payedOut_unchk20 = true;\n161-expression_statement-25-25", method="sendToWinner_unchk20()", type_label=expression_statement];
166 [label="26_ uint256 public totalSupply;\n166-new_variable-27-27", method="", type_label=new_variable];
171 [label="27_ bool public payedOut_unchk32 = false;\n171-new_variable-28-28", method="", type_label=new_variable];
178 [label="28_ address payable public winner_unchk32;\n178-new_variable-29-29", method="", type_label=new_variable];
183 [label="29_ uint public winAmount_unchk32;\n183-new_variable-30-30", method="", type_label=new_variable];
188 [label="30_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n188-function_definition-31-35", method="sendToWinner_unchk32()", type_label=function_definition];
192 [label="31_ require(!payedOut_unchk32);\n192-expression_statement-32-32", method="sendToWinner_unchk32()", type_label=expression_statement];
198 [label="32_ winner_unchk32.send(winAmount_unchk32);\n198-expression_statement-33-33", method="sendToWinner_unchk32()", type_label=expression_statement];
205 [label="33_ payedOut_unchk32 = true;\n205-expression_statement-34-34", method="sendToWinner_unchk32()", type_label=expression_statement];
210 [label="35_ string public name;\n210-new_variable-36-36", method="", type_label=new_variable];
215 [label="36_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n215-function_definition-37-39", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
223 [label="37_ callee.send(5 ether);\n223-expression_statement-38-38", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
231 [label="39_ uint8 public decimals;\n231-new_variable-40-40", method="", type_label=new_variable];
236 [label="40_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n236-function_definition-41-45", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
252 [label="41_ uint64 subpot_unchk46 = 3 ether;\n252-new_variable-42-42", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
259 [label="42_ winner_unchk46.send(subpot_unchk46);\n259-expression_statement-43-43", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
266 [label="43_ subpot_unchk46= 0;\n266-expression_statement-44-44", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
270 [label="45_ string public symbol;\n270-new_variable-46-46", method="", type_label=new_variable];
275 [label="46_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n275-function_definition-47-55", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
279 [label="47_ address payable addr_unchk4;\n279-new_variable-48-48", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
284 [label="48_ if\n284-if-49-54", method="UncheckedExternalCall_unchk4()", type_label=if];
1346 [label="48_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
295 [label="55_ address public owner;\n295-new_variable-56-56", method="", type_label=new_variable];
300 [label="56_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n300-function_definition-57-61", method="bug_unchk7()", type_label=function_definition];
304 [label="57_ address payable addr_unchk7;\n304-new_variable-58-58", method="bug_unchk7()", type_label=new_variable];
309 [label="58_ if_!addr_unchk7.send (10 ether) || 1==1\n309-if-59-60", method="bug_unchk7()", type_label=if];
1371 [label="58_ end_if", method="bug_unchk7()", type_label=end_if];
325 [label="61_ mapping (address => uint256) public balances;\n325-new_variable-62-62", method="", type_label=new_variable];
332 [label="62_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n332-function_definition-63-65", method="my_func_unchk23(address payable dst)", type_label=function_definition];
341 [label="63_ dst.send(msg.value);\n341-expression_statement-64-64", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
350 [label="65_ mapping (address => mapping (address => uint256)) public allowed;\n350-new_variable-66-66", method="", type_label=new_variable];
359 [label="66_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n359-function_definition-67-69", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
367 [label="67_ callee.send(5 ether);\n367-expression_statement-68-68", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
375 [label="69_ bool isTransPaused=false;\n375-new_variable-70-70", method="", type_label=new_variable];
391 [label="74_ owner=msg.sender;\n391-expression_statement-75-75", method="", type_label=expression_statement];
397 [label="75_ if__initialAmount<=0\n397-if-76-82", method="", type_label=if];
1459 [label="75_ end_if", method="", type_label=end_if];
402 [label="76_ totalSupply = 100000000000000000;\n402-expression_statement-77-77", method="", type_label=expression_statement];
406 [label="77_ balances[owner]=totalSupply;\n406-expression_statement-78-78", method="", type_label=expression_statement];
413 [label="79_ totalSupply = _initialAmount;\n413-expression_statement-80-80", method="", type_label=expression_statement];
417 [label="80_ balances[owner]=_initialAmount;\n417-expression_statement-81-81", method="", type_label=expression_statement];
423 [label="82_ if__decimalUnits<=0\n423-if-83-87", method="", type_label=if];
1485 [label="82_ end_if", method="", type_label=end_if];
428 [label="83_ decimals=2;\n428-expression_statement-84-84", method="", type_label=expression_statement];
433 [label="85_ decimals = _decimalUnits;\n433-expression_statement-86-86", method="", type_label=expression_statement];
437 [label="87_ name = \"CareerOn Chain Token\";\n437-expression_statement-88-88", method="", type_label=expression_statement];
442 [label="88_ symbol = \"COT\";\n442-expression_statement-89-89", method="", type_label=expression_statement];
447 [label="90_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n447-function_definition-91-98", method="bug_unchk30()", type_label=function_definition];
451 [label="91_ uint receivers_unchk30;\n451-new_variable-92-92", method="bug_unchk30()", type_label=new_variable];
456 [label="92_ address payable addr_unchk30;\n456-new_variable-93-93", method="bug_unchk30()", type_label=new_variable];
461 [label="93_ if\n461-if-94-97", method="bug_unchk30()", type_label=if];
1523 [label="93_ end_if", method="bug_unchk30()", type_label=end_if];
471 [label="94_ receivers_unchk30 +=1;\n471-expression_statement-95-95", method="bug_unchk30()", type_label=expression_statement];
478 [label="98_ function transfer(\n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n        balances[msg.sender] -= _value; \n        balances[_to] += _value; \n		if(msg.sender==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(msg.sender, _to, _value); \n		}\n        return true;\n    }\n478-function_definition-99-116", method="transfer(address _to,uint256 _value)", type_label=function_definition];
495 [label="102_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n495-expression_statement-103-107", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
525 [label="107_ balances[msg.sender] -= _value;\n525-expression_statement-108-108", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
533 [label="108_ balances[_to] += _value;\n533-expression_statement-109-109", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
539 [label="109_ if_msg.sender==owner\n539-if-110-114", method="transfer(address _to,uint256 _value)", type_label=if];
1601 [label="109_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
567 [label="114_ return true;\n567-return-115-115", method="transfer(address _to,uint256 _value)", type_label=return];
570 [label="116_ bool public payedOut_unchk8 = false;\n570-new_variable-117-117", method="", type_label=new_variable];
577 [label="117_ address payable public winner_unchk8;\n577-new_variable-118-118", method="", type_label=new_variable];
582 [label="118_ uint public winAmount_unchk8;\n582-new_variable-119-119", method="", type_label=new_variable];
587 [label="119_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n587-function_definition-120-124", method="sendToWinner_unchk8()", type_label=function_definition];
591 [label="120_ require(!payedOut_unchk8);\n591-expression_statement-121-121", method="sendToWinner_unchk8()", type_label=expression_statement];
597 [label="121_ winner_unchk8.send(winAmount_unchk8);\n597-expression_statement-122-122", method="sendToWinner_unchk8()", type_label=expression_statement];
604 [label="122_ payedOut_unchk8 = true;\n604-expression_statement-123-123", method="sendToWinner_unchk8()", type_label=expression_statement];
609 [label="124_ function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n        balances[_to] += _value; \n        balances[_from] -= _value;  \n        allowed[_from][msg.sender] -= _value; \n        if(_from==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(_from, _to, _value); \n		}\n        return true;\n    }\n609-function_definition-125-145", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
630 [label="129_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n630-expression_statement-130-135", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
670 [label="135_ balances[_to] += _value;\n670-expression_statement-136-136", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
676 [label="136_ balances[_from] -= _value;\n676-expression_statement-137-137", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
682 [label="137_ allowed[_from][msg.sender] -= _value;\n682-expression_statement-138-138", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
692 [label="138_ if__from==owner\n692-if-139-143", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1754 [label="138_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
716 [label="143_ return true;\n716-return-144-144", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
719 [label="145_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n719-function_definition-146-147", method="bug_unchk39(address payable addr)", type_label=function_definition];
727 [label="146_ addr.send (4 ether);\n727-expression_statement-147-147", method="bug_unchk39(address payable addr)", type_label=expression_statement];
735 [label="147_ function approve(address _spender, uint256 _value) public returns (bool success) \n    { \n        assert(msg.sender!=_spender && _value>0);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n735-function_definition-148-154", method="approve(address _spender,uint256 _value)", type_label=function_definition];
752 [label="149_ assert(msg.sender!=_spender && _value>0);\n752-expression_statement-150-150", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
765 [label="150_ allowed[msg.sender][_spender] = _value;\n765-expression_statement-151-151", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
785 [label="152_ return true;\n785-return-153-153", method="approve(address _spender,uint256 _value)", type_label=return];
788 [label="154_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n788-function_definition-155-157", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
797 [label="155_ dst.call.value(msg.value)(\"\");\n797-expression_statement-156-156", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
812 [label="157_ function allowance(\n        address _owner, \n        address _spender) public view returns (uint256 remaining) \n    {\n        return allowed[_owner][_spender]; \n    }\n812-function_definition-158-163", method="allowance(address _owner,address _spender)", type_label=function_definition];
830 [label="161_ return allowed[_owner][_spender];\n830-return-162-162", method="allowance(address _owner,address _spender)", type_label=return];
836 [label="163_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n836-function_definition-164-166", method="my_func_unchk35(address payable dst)", type_label=function_definition];
845 [label="164_ dst.send(msg.value);\n845-expression_statement-165-165", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
854 [label="166_ function changeOwner(address newOwner) public{\n        assert(msg.sender==owner && msg.sender!=newOwner);\n        balances[newOwner]=balances[owner];\n        balances[owner]=0;\n        owner=newOwner;\n        emit OwnerChang(msg.sender,newOwner,balances[owner]); \n    }\n854-function_definition-167-173", method="changeOwner(address newOwner)", type_label=function_definition];
862 [label="167_ assert(msg.sender==owner && msg.sender!=newOwner);\n862-expression_statement-168-168", method="changeOwner(address newOwner)", type_label=expression_statement];
877 [label="168_ balances[newOwner]=balances[owner];\n877-expression_statement-169-169", method="changeOwner(address newOwner)", type_label=expression_statement];
885 [label="169_ balances[owner]=0;\n885-expression_statement-170-170", method="changeOwner(address newOwner)", type_label=expression_statement];
891 [label="170_ owner=newOwner;\n891-expression_statement-171-171", method="changeOwner(address newOwner)", type_label=expression_statement];
907 [label="173_ bool public payedOut_unchk44 = false;\n907-new_variable-174-174", method="", type_label=new_variable];
914 [label="174_ address payable public winner_unchk44;\n914-new_variable-175-175", method="", type_label=new_variable];
919 [label="175_ uint public winAmount_unchk44;\n919-new_variable-176-176", method="", type_label=new_variable];
924 [label="176_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n924-function_definition-177-181", method="sendToWinner_unchk44()", type_label=function_definition];
928 [label="177_ require(!payedOut_unchk44);\n928-expression_statement-178-178", method="sendToWinner_unchk44()", type_label=expression_statement];
934 [label="178_ winner_unchk44.send(winAmount_unchk44);\n934-expression_statement-179-179", method="sendToWinner_unchk44()", type_label=expression_statement];
941 [label="179_ payedOut_unchk44 = true;\n941-expression_statement-180-180", method="sendToWinner_unchk44()", type_label=expression_statement];
946 [label="181_ function setPauseStatus(bool isPaused)public{\n        assert(msg.sender==owner);\n        isTransPaused=isPaused;\n    }\n946-function_definition-182-185", method="setPauseStatus(bool isPaused)", type_label=function_definition];
954 [label="182_ assert(msg.sender==owner);\n954-expression_statement-183-183", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
963 [label="183_ isTransPaused=isPaused;\n963-expression_statement-184-184", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
967 [label="185_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n967-function_definition-186-194", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
971 [label="186_ address payable addr_unchk40;\n971-new_variable-187-187", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
976 [label="187_ if\n976-if-188-193", method="UncheckedExternalCall_unchk40()", type_label=if];
2038 [label="187_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
987 [label="194_ function changeContractName(string memory _newName,string memory _newSymbol) public {\n        assert(msg.sender==owner);\n        name=_newName;\n        symbol=_newSymbol;\n    }\n987-function_definition-195-199", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=function_definition];
999 [label="195_ assert(msg.sender==owner);\n999-expression_statement-196-196", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1008 [label="196_ name=_newName;\n1008-expression_statement-197-197", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1012 [label="197_ symbol=_newSymbol;\n1012-expression_statement-198-198", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1016 [label="199_ bool public payedOut_unchk33 = false;\n1016-new_variable-200-200", method="", type_label=new_variable];
1023 [label="200_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1023-function_definition-201-204", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1027 [label="201_ require(payedOut_unchk33);\n1027-expression_statement-202-202", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1032 [label="202_ msg.sender.send(address(this).balance);\n1032-expression_statement-203-203", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1051 [label="207_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1051-function_definition-208-209", method="bug_unchk27(address payable addr)", type_label=function_definition];
1059 [label="208_ addr.send (42 ether);\n1059-expression_statement-209-209", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
294;
476;
557;
708;
986;
13 -> 17  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
17 -> 22  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
22 -> 1084  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
59 -> 63  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
63 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
148 -> 154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
198 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
275 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 1371  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
332 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 402  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
397 -> 413  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1459 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
402 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 1459  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
413 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 1459  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
423 -> 428  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
423 -> 433  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1485 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 1485  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
433 -> 1485  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
437 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 471  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1523 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 1523  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
478 -> 495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
533 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
570 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
591 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
682 -> 692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
716 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
719 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
785 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
788 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
836 -> 845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
924 -> 928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
934 -> 941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
946 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
954 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
971 -> 976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1023 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 1032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1051 -> 1059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 1346  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
476 -> 1523  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
557 -> 1601  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
708 -> 1754  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
986 -> 2038  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
