digraph  {
13 [label="2_ function totalSupply() public view returns (uint);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ bool public payedOut_unchk9 = false;\n21-new_variable-4-4", method="", type_label=new_variable];
28 [label="4_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n28-function_definition-5-8", method="withdrawLeftOver_unchk9()", type_label=function_definition];
32 [label="5_ require(payedOut_unchk9);\n32-expression_statement-6-6", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
37 [label="6_ msg.sender.send(address(this).balance);\n37-expression_statement-7-7", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
50 [label="8_ function balanceOf(address tokenOwner) public view returns (uint balance);\n50-function_definition-9-9", method="balanceOf(address tokenOwner)", type_label=function_definition];
63 [label="9_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n63-function_definition-10-12", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
71 [label="10_ callee.call.value(1 ether);\n71-expression_statement-11-11", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
81 [label="12_ function transfer(address to, uint tokens) public returns (bool success);\n81-function_definition-13-13", method="transfer(address to,uint tokens)", type_label=function_definition];
97 [label="13_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n97-function_definition-14-18", method="bug_unchk19()", type_label=function_definition];
101 [label="14_ address payable addr_unchk19;\n101-new_variable-15-15", method="bug_unchk19()", type_label=new_variable];
106 [label="15_ if_!addr_unchk19.send (10 ether) || 1==1\n106-if-16-17", method="bug_unchk19()", type_label=if];
1972 [label="15_ end_if", method="bug_unchk19()", type_label=end_if];
122 [label="18_ function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n122-function_definition-19-19", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
139 [label="19_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n139-function_definition-20-22", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
147 [label="20_ callee.send(5 ether);\n147-expression_statement-21-21", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
155 [label="22_ function approve(address spender, uint tokens) public returns (bool success);\n155-function_definition-23-23", method="approve(address spender,uint tokens)", type_label=function_definition];
171 [label="23_ bool public payedOut_unchk20 = false;\n171-new_variable-24-24", method="", type_label=new_variable];
178 [label="24_ address payable public winner_unchk20;\n178-new_variable-25-25", method="", type_label=new_variable];
183 [label="25_ uint public winAmount_unchk20;\n183-new_variable-26-26", method="", type_label=new_variable];
188 [label="26_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n188-function_definition-27-31", method="sendToWinner_unchk20()", type_label=function_definition];
192 [label="27_ require(!payedOut_unchk20);\n192-expression_statement-28-28", method="sendToWinner_unchk20()", type_label=expression_statement];
198 [label="28_ winner_unchk20.send(winAmount_unchk20);\n198-expression_statement-29-29", method="sendToWinner_unchk20()", type_label=expression_statement];
205 [label="29_ payedOut_unchk20 = true;\n205-expression_statement-30-30", method="sendToWinner_unchk20()", type_label=expression_statement];
210 [label="31_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n210-function_definition-32-32", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
230 [label="32_ bool public payedOut_unchk32 = false;\n230-new_variable-33-33", method="", type_label=new_variable];
237 [label="33_ address payable public winner_unchk32;\n237-new_variable-34-34", method="", type_label=new_variable];
242 [label="34_ uint public winAmount_unchk32;\n242-new_variable-35-35", method="", type_label=new_variable];
247 [label="35_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n247-function_definition-36-40", method="sendToWinner_unchk32()", type_label=function_definition];
251 [label="36_ require(!payedOut_unchk32);\n251-expression_statement-37-37", method="sendToWinner_unchk32()", type_label=expression_statement];
257 [label="37_ winner_unchk32.send(winAmount_unchk32);\n257-expression_statement-38-38", method="sendToWinner_unchk32()", type_label=expression_statement];
264 [label="38_ payedOut_unchk32 = true;\n264-expression_statement-39-39", method="sendToWinner_unchk32()", type_label=expression_statement];
303 [label="44_ function cash_unchk34(uint roundIndex, uint subpotIndex, address payable winner_unchk34) public{\n        uint64 subpot_unchk34 = 10 ether;\n        winner_unchk34.send(subpot_unchk34);   \n        subpot_unchk34= 0;\n}\n303-function_definition-45-49", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=function_definition];
319 [label="45_ uint64 subpot_unchk34 = 10 ether;\n319-new_variable-46-46", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=new_variable];
326 [label="46_ winner_unchk34.send(subpot_unchk34);\n326-expression_statement-47-47", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=expression_statement];
333 [label="47_ subpot_unchk34= 0;\n333-expression_statement-48-48", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=expression_statement];
337 [label="49_ string public name = \"Acunar\";\n337-new_variable-50-50", method="", type_label=new_variable];
344 [label="50_ bool public payedOut_unchk21 = false;\n344-new_variable-51-51", method="", type_label=new_variable];
351 [label="51_ function withdrawLeftOver_unchk21() public {\n        require(payedOut_unchk21);\n        msg.sender.send(address(this).balance);\n    }\n351-function_definition-52-55", method="withdrawLeftOver_unchk21()", type_label=function_definition];
355 [label="52_ require(payedOut_unchk21);\n355-expression_statement-53-53", method="withdrawLeftOver_unchk21()", type_label=expression_statement];
360 [label="53_ msg.sender.send(address(this).balance);\n360-expression_statement-54-54", method="withdrawLeftOver_unchk21()", type_label=expression_statement];
373 [label="55_ string public symbol = \"ACN\";\n373-new_variable-56-56", method="", type_label=new_variable];
380 [label="56_ function cash_unchk10(uint roundIndex, uint subpotIndex,address payable winner_unchk10) public{\n        uint64 subpot_unchk10 = 10 ether;\n        winner_unchk10.send(subpot_unchk10);   \n        subpot_unchk10= 0;\n}\n380-function_definition-57-61", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=function_definition];
396 [label="57_ uint64 subpot_unchk10 = 10 ether;\n396-new_variable-58-58", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=new_variable];
403 [label="58_ winner_unchk10.send(subpot_unchk10);\n403-expression_statement-59-59", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=expression_statement];
410 [label="59_ subpot_unchk10= 0;\n410-expression_statement-60-60", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=expression_statement];
414 [label="61_ uint public decimals = 0;\n414-new_variable-62-62", method="", type_label=new_variable];
420 [label="62_ function my_func_unchk47(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n420-function_definition-63-65", method="my_func_unchk47(address payable dst)", type_label=function_definition];
429 [label="63_ dst.send(msg.value);\n429-expression_statement-64-64", method="my_func_unchk47(address payable dst)", type_label=expression_statement];
438 [label="65_ uint public supply;\n438-new_variable-66-66", method="", type_label=new_variable];
443 [label="66_ function cash_unchk22(uint roundIndex, uint subpotIndex, address payable winner_unchk22)public{\n        uint64 subpot_unchk22 = 10 ether;\n        winner_unchk22.send(subpot_unchk22);   \n        subpot_unchk22= 0;\n}\n443-function_definition-67-71", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=function_definition];
459 [label="67_ uint64 subpot_unchk22 = 10 ether;\n459-new_variable-68-68", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=new_variable];
466 [label="68_ winner_unchk22.send(subpot_unchk22);\n466-expression_statement-69-69", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
473 [label="69_ subpot_unchk22= 0;\n473-expression_statement-70-70", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
477 [label="71_ address public founder;\n477-new_variable-72-72", method="", type_label=new_variable];
482 [label="72_ function my_func_uncheck12(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n482-function_definition-73-75", method="my_func_uncheck12(address payable dst)", type_label=function_definition];
491 [label="73_ dst.call.value(msg.value)(\"\");\n491-expression_statement-74-74", method="my_func_uncheck12(address payable dst)", type_label=expression_statement];
506 [label="75_ mapping(address => uint) public balances;\n506-new_variable-76-76", method="", type_label=new_variable];
513 [label="76_ function my_func_unchk11(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n513-function_definition-77-79", method="my_func_unchk11(address payable dst)", type_label=function_definition];
522 [label="77_ dst.send(msg.value);\n522-expression_statement-78-78", method="my_func_unchk11(address payable dst)", type_label=expression_statement];
531 [label="79_ mapping(address => mapping(address => uint)) allowed;\n531-new_variable-80-80", method="", type_label=new_variable];
569 [label="83_ supply = 200000000;\n569-expression_statement-84-84", method="", type_label=expression_statement];
573 [label="84_ founder = msg.sender;\n573-expression_statement-85-85", method="", type_label=expression_statement];
579 [label="85_ balances[founder] = supply;\n579-expression_statement-86-86", method="", type_label=expression_statement];
585 [label="87_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n585-function_definition-88-90", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
593 [label="88_ callee.send(5 ether);\n593-expression_statement-89-89", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
601 [label="90_ function allowance(address tokenOwner, address spender) view public returns(uint){\n        return allowed[tokenOwner][spender];\n    }\n601-function_definition-91-93", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
618 [label="91_ return allowed[tokenOwner][spender];\n618-return-92-92", method="allowance(address tokenOwner,address spender)", type_label=return];
624 [label="93_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n624-function_definition-94-98", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
640 [label="94_ uint64 subpot_unchk46 = 3 ether;\n640-new_variable-95-95", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
647 [label="95_ winner_unchk46.send(subpot_unchk46);\n647-expression_statement-96-96", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
654 [label="96_ subpot_unchk46= 0;\n654-expression_statement-97-97", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
658 [label="98_ function approve(address spender, uint tokens) public returns(bool){\n        require(balances[msg.sender] >= tokens);\n        require(tokens > 0);\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n658-function_definition-99-105", method="approve(address spender,uint tokens)", type_label=function_definition];
674 [label="99_ require(balances[msg.sender] >= tokens);\n674-expression_statement-100-100", method="approve(address spender,uint tokens)", type_label=expression_statement];
685 [label="100_ require(tokens > 0);\n685-expression_statement-101-101", method="approve(address spender,uint tokens)", type_label=expression_statement];
692 [label="101_ allowed[msg.sender][spender] = tokens;\n692-expression_statement-102-102", method="approve(address spender,uint tokens)", type_label=expression_statement];
712 [label="103_ return true;\n712-return-104-104", method="approve(address spender,uint tokens)", type_label=return];
715 [label="105_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n715-function_definition-106-114", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
719 [label="106_ address payable addr_unchk4;\n719-new_variable-107-107", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
724 [label="107_ if\n724-if-108-113", method="UncheckedExternalCall_unchk4()", type_label=if];
2590 [label="107_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
735 [label="114_ function transferFrom(address from, address to, uint tokens) public returns(bool){\n        require(allowed[from][to] >= tokens);\n        require(balances[from] >= tokens);\n        balances[from] -= tokens;\n        balances[to] += tokens;\n        allowed[from][to] -= tokens;\n        return true;\n    }\n735-function_definition-115-122", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
755 [label="115_ require(allowed[from][to] >= tokens);\n755-expression_statement-116-116", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
766 [label="116_ require(balances[from] >= tokens);\n766-expression_statement-117-117", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
775 [label="117_ balances[from] -= tokens;\n775-expression_statement-118-118", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
781 [label="118_ balances[to] += tokens;\n781-expression_statement-119-119", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
787 [label="119_ allowed[from][to] -= tokens;\n787-expression_statement-120-120", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
795 [label="120_ return true;\n795-return-121-121", method="transferFrom(address from,address to,uint tokens)", type_label=return];
798 [label="122_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n798-function_definition-123-127", method="bug_unchk7()", type_label=function_definition];
802 [label="123_ address payable addr_unchk7;\n802-new_variable-124-124", method="bug_unchk7()", type_label=new_variable];
807 [label="124_ if_!addr_unchk7.send (10 ether) || 1==1\n807-if-125-126", method="bug_unchk7()", type_label=if];
2673 [label="124_ end_if", method="bug_unchk7()", type_label=end_if];
823 [label="127_ function totalSupply() public view returns (uint){\n        return supply;\n    }\n823-function_definition-128-130", method="totalSupply()", type_label=function_definition];
832 [label="128_ return supply;\n832-return-129-129", method="totalSupply()", type_label=return];
834 [label="130_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n834-function_definition-131-133", method="my_func_unchk23(address payable dst)", type_label=function_definition];
843 [label="131_ dst.send(msg.value);\n843-expression_statement-132-132", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
852 [label="133_ function balanceOf(address tokenOwner) public view returns (uint balance){\n         return balances[tokenOwner];\n     }\n852-function_definition-134-136", method="balanceOf(address tokenOwner)", type_label=function_definition];
866 [label="134_ return balances[tokenOwner];\n866-return-135-135", method="balanceOf(address tokenOwner)", type_label=return];
870 [label="136_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n870-function_definition-137-139", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
878 [label="137_ callee.send(5 ether);\n878-expression_statement-138-138", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
886 [label="139_ function transfer(address to, uint tokens) public returns (bool success){\n         require(balances[msg.sender] >= tokens && tokens > 0);\n         balances[to] += tokens;\n         balances[msg.sender] -= tokens;\n         emit Transfer(msg.sender, to, tokens);\n         return true;\n     }\n886-function_definition-140-146", method="transfer(address to,uint tokens)", type_label=function_definition];
903 [label="140_ require(balances[msg.sender] >= tokens && tokens > 0);\n903-expression_statement-141-141", method="transfer(address to,uint tokens)", type_label=expression_statement];
918 [label="141_ balances[to] += tokens;\n918-expression_statement-142-142", method="transfer(address to,uint tokens)", type_label=expression_statement];
924 [label="142_ balances[msg.sender] -= tokens;\n924-expression_statement-143-143", method="transfer(address to,uint tokens)", type_label=expression_statement];
942 [label="144_ return true;\n942-return-145-145", method="transfer(address to,uint tokens)", type_label=return];
945 [label="146_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n945-function_definition-147-154", method="bug_unchk30()", type_label=function_definition];
949 [label="147_ uint receivers_unchk30;\n949-new_variable-148-148", method="bug_unchk30()", type_label=new_variable];
954 [label="148_ address payable addr_unchk30;\n954-new_variable-149-149", method="bug_unchk30()", type_label=new_variable];
959 [label="149_ if\n959-if-150-153", method="bug_unchk30()", type_label=if];
2825 [label="149_ end_if", method="bug_unchk30()", type_label=end_if];
969 [label="150_ receivers_unchk30 +=1;\n969-expression_statement-151-151", method="bug_unchk30()", type_label=expression_statement];
982 [label="156_ function callnotchecked_unchk1(address payable callee) public {\n    callee.call.value(2 ether);\n  }\n982-function_definition-157-159", method="callnotchecked_unchk1(address payable callee)", type_label=function_definition];
990 [label="157_ callee.call.value(2 ether);\n990-expression_statement-158-158", method="callnotchecked_unchk1(address payable callee)", type_label=expression_statement];
1000 [label="159_ address public admin;\n1000-new_variable-160-160", method="", type_label=new_variable];
1005 [label="160_ function withdrawBal_unchk41 () public{\n	uint64 Balances_unchk41 = 0;\n	msg.sender.send(Balances_unchk41);}\n1005-function_definition-161-163", method="withdrawBal_unchk41()", type_label=function_definition];
1009 [label="161_ uint64 Balances_unchk41 = 0;\n1009-new_variable-162-162", method="withdrawBal_unchk41()", type_label=new_variable];
1015 [label="162_ msg.sender.send(Balances_unchk41);\n1015-expression_statement-163-163", method="withdrawBal_unchk41()", type_label=expression_statement];
1024 [label="163_ address payable public deposit;\n1024-new_variable-164-164", method="", type_label=new_variable];
1029 [label="164_ function bug_unchk42() public{\nuint receivers_unchk42;\naddress payable addr_unchk42;\nif (!addr_unchk42.send(42 ether))\n	{receivers_unchk42 +=1;}\nelse\n	{revert();}\n}\n1029-function_definition-165-172", method="bug_unchk42()", type_label=function_definition];
1033 [label="165_ uint receivers_unchk42;\n1033-new_variable-166-166", method="bug_unchk42()", type_label=new_variable];
1038 [label="166_ address payable addr_unchk42;\n1038-new_variable-167-167", method="bug_unchk42()", type_label=new_variable];
1043 [label="167_ if\n1043-if-168-171", method="bug_unchk42()", type_label=if];
2909 [label="167_ end_if", method="bug_unchk42()", type_label=end_if];
1053 [label="168_ receivers_unchk42 +=1;\n1053-expression_statement-169-169", method="bug_unchk42()", type_label=expression_statement];
1060 [label="172_ uint tokenPrice = 0.0001 ether;\n1060-new_variable-173-173", method="", type_label=new_variable];
1066 [label="173_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n1066-function_definition-174-176", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
1074 [label="174_ callee.send(5 ether);\n1074-expression_statement-175-175", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
1082 [label="176_ uint public hardCap =21000 ether;\n1082-new_variable-177-177", method="", type_label=new_variable];
1089 [label="177_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n1089-function_definition-178-182", method="bug_unchk43()", type_label=function_definition];
1093 [label="178_ address payable addr_unchk43;\n1093-new_variable-179-179", method="bug_unchk43()", type_label=new_variable];
1098 [label="179_ if_!addr_unchk43.send (10 ether) || 1==1\n1098-if-180-181", method="bug_unchk43()", type_label=if];
2964 [label="179_ end_if", method="bug_unchk43()", type_label=end_if];
1114 [label="182_ uint public raisedAmount;\n1114-new_variable-183-183", method="", type_label=new_variable];
1119 [label="183_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1119-function_definition-184-186", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
1128 [label="184_ dst.call.value(msg.value)(\"\");\n1128-expression_statement-185-185", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
1143 [label="186_ uint public saleStart = now;\n1143-new_variable-187-187", method="", type_label=new_variable];
1149 [label="187_ uint public saleEnd = now + 14515200;\n1149-new_variable-188-188", method="", type_label=new_variable];
1157 [label="188_ uint public coinTradeStart = saleEnd + 15120000;\n1157-new_variable-189-189", method="", type_label=new_variable];
1165 [label="189_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n1165-function_definition-190-192", method="withdrawBal_unchk17()", type_label=function_definition];
1169 [label="190_ uint64 Balances_unchk17 = 0;\n1169-new_variable-191-191", method="withdrawBal_unchk17()", type_label=new_variable];
1175 [label="191_ msg.sender.send(Balances_unchk17);\n1175-expression_statement-192-192", method="withdrawBal_unchk17()", type_label=expression_statement];
1184 [label="192_ uint public maxInvestment = 30 ether;\n1184-new_variable-193-193", method="", type_label=new_variable];
1191 [label="193_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n1191-function_definition-194-196", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
1199 [label="194_ callee.call.value(1 ether);\n1199-expression_statement-195-195", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
1209 [label="196_ uint public minInvestment = 0.1 ether;\n1209-new_variable-197-197", method="", type_label=new_variable];
1222 [label="198_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n1222-function_definition-199-200", method="bug_unchk3(address payable addr)", type_label=function_definition];
1230 [label="199_ addr.send (42 ether);\n1230-expression_statement-200-200", method="bug_unchk3(address payable addr)", type_label=expression_statement];
1238 [label="200_ State public ieoState;\n1238-new_variable-201-201", method="", type_label=new_variable];
1244 [label="201_ modifier onlyAdmin(){\n        require(msg.sender == admin);\n        _;\n    }\n1244-expression_statement-202-205", method="", type_label=expression_statement];
1247 [label="202_ require(msg.sender == admin);\n1247-expression_statement-203-203", method="", type_label=expression_statement];
1256 [label="203_ _;\n1256-expression_statement-204-204", method="", type_label=expression_statement];
1258 [label="205_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n1258-function_definition-206-208", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
1266 [label="206_ callee.call.value(1 ether);\n1266-expression_statement-207-207", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
1296 [label="210_ deposit = _deposit;\n1296-expression_statement-211-211", method="", type_label=expression_statement];
1300 [label="211_ admin = msg.sender;\n1300-expression_statement-212-212", method="", type_label=expression_statement];
1306 [label="212_ ieoState = State.beforeStart;\n1306-expression_statement-213-213", method="", type_label=expression_statement];
1312 [label="214_ bool public payedOut_unchk8 = false;\n1312-new_variable-215-215", method="", type_label=new_variable];
1319 [label="215_ address payable public winner_unchk8;\n1319-new_variable-216-216", method="", type_label=new_variable];
1324 [label="216_ uint public winAmount_unchk8;\n1324-new_variable-217-217", method="", type_label=new_variable];
1329 [label="217_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1329-function_definition-218-222", method="sendToWinner_unchk8()", type_label=function_definition];
1333 [label="218_ require(!payedOut_unchk8);\n1333-expression_statement-219-219", method="sendToWinner_unchk8()", type_label=expression_statement];
1339 [label="219_ winner_unchk8.send(winAmount_unchk8);\n1339-expression_statement-220-220", method="sendToWinner_unchk8()", type_label=expression_statement];
1346 [label="220_ payedOut_unchk8 = true;\n1346-expression_statement-221-221", method="sendToWinner_unchk8()", type_label=expression_statement];
1351 [label="222_ function halt() public onlyAdmin{\n        ieoState = State.halted;\n    }\n1351-function_definition-223-225", method="halt()", type_label=function_definition];
1354 [label="222_ onlyAdmin\n1354-expression_statement-223-223", method="halt()", type_label=expression_statement];
1357 [label="223_ ieoState = State.halted;\n1357-expression_statement-224-224", method="halt()", type_label=expression_statement];
1363 [label="225_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1363-function_definition-226-227", method="bug_unchk39(address payable addr)", type_label=function_definition];
1371 [label="226_ addr.send (4 ether);\n1371-expression_statement-227-227", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1379 [label="227_ function unhalt() public onlyAdmin{\n        ieoState = State.running;\n    }\n1379-function_definition-228-230", method="unhalt()", type_label=function_definition];
1382 [label="227_ onlyAdmin\n1382-expression_statement-228-228", method="unhalt()", type_label=expression_statement];
1385 [label="228_ ieoState = State.running;\n1385-expression_statement-229-229", method="unhalt()", type_label=expression_statement];
1391 [label="230_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1391-function_definition-231-233", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1400 [label="231_ dst.call.value(msg.value)(\"\");\n1400-expression_statement-232-232", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1415 [label="233_ function changeDepositAddress(address payable newDeposit) public onlyAdmin{\n        deposit = newDeposit;\n    }\n1415-function_definition-234-236", method="changeDepositAddress(address payable newDeposit)", type_label=function_definition];
1422 [label="233_ onlyAdmin\n1422-expression_statement-234-234", method="changeDepositAddress(address payable newDeposit)", type_label=expression_statement];
1425 [label="234_ deposit = newDeposit;\n1425-expression_statement-235-235", method="changeDepositAddress(address payable newDeposit)", type_label=expression_statement];
1429 [label="236_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1429-function_definition-237-239", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1438 [label="237_ dst.send(msg.value);\n1438-expression_statement-238-238", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1447 [label="239_ function getCurrentState() public view returns(State){\n        if(ieoState == State.halted){\n            return State.halted;\n        }else if(block.timestamp < saleStart){\n            return State.beforeStart;\n        }else if(block.timestamp >= saleStart && block.timestamp <= saleEnd){\n            return State.running;\n        }else{\n            return State.afterEnd;\n        }\n    }\n1447-function_definition-240-250", method="getCurrentState()", type_label=function_definition];
1457 [label="240_ if_ieoState == State.halted\n1457-if-241-249", method="getCurrentState()", type_label=if];
3323 [label="240_ end_if", method="getCurrentState()", type_label=end_if];
1464 [label="241_ return State.halted;\n1464-return-242-242", method="getCurrentState()", type_label=return];
1468 [label="242_ if_block.timestamp < saleStart\n1468-if-243-249", method="getCurrentState()", type_label=if];
1475 [label="243_ return State.beforeStart;\n1475-return-244-244", method="getCurrentState()", type_label=return];
1479 [label="244_ if_block.timestamp >= saleStart && block.timestamp <= saleEnd\n1479-if-245-249", method="getCurrentState()", type_label=if];
1492 [label="245_ return State.running;\n1492-return-246-246", method="getCurrentState()", type_label=return];
1497 [label="247_ return State.afterEnd;\n1497-return-248-248", method="getCurrentState()", type_label=return];
1501 [label="250_ bool public payedOut_unchk44 = false;\n1501-new_variable-251-251", method="", type_label=new_variable];
1508 [label="251_ address payable public winner_unchk44;\n1508-new_variable-252-252", method="", type_label=new_variable];
1513 [label="252_ uint public winAmount_unchk44;\n1513-new_variable-253-253", method="", type_label=new_variable];
1518 [label="253_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1518-function_definition-254-258", method="sendToWinner_unchk44()", type_label=function_definition];
1522 [label="254_ require(!payedOut_unchk44);\n1522-expression_statement-255-255", method="sendToWinner_unchk44()", type_label=expression_statement];
1528 [label="255_ winner_unchk44.send(winAmount_unchk44);\n1528-expression_statement-256-256", method="sendToWinner_unchk44()", type_label=expression_statement];
1535 [label="256_ payedOut_unchk44 = true;\n1535-expression_statement-257-257", method="sendToWinner_unchk44()", type_label=expression_statement];
1540 [label="258_ function invest() payable public returns(bool){\n        ieoState = getCurrentState();\n        require(ieoState == State.running);\n        require(msg.value >= minInvestment && msg.value <= maxInvestment);\n        uint tokens = msg.value / tokenPrice;\n        require(raisedAmount + msg.value <= hardCap);\n        raisedAmount += msg.value;\n        balances[msg.sender] += tokens;\n        balances[founder] -= tokens;\n        deposit.transfer(msg.value); \n        emit Invest(msg.sender, msg.value, tokens);\n        return true;\n    }\n1540-function_definition-259-271", method="invest()", type_label=function_definition];
1549 [label="259_ ieoState = getCurrentState();\n1549-expression_statement-260-260", method="invest()", type_label=expression_statement];
1554 [label="260_ require(ieoState == State.running);\n1554-expression_statement-261-261", method="invest()", type_label=expression_statement];
1563 [label="261_ require(msg.value >= minInvestment && msg.value <= maxInvestment);\n1563-expression_statement-262-262", method="invest()", type_label=expression_statement];
1578 [label="262_ uint tokens = msg.value / tokenPrice;\n1578-new_variable-263-263", method="invest()", type_label=new_variable];
1588 [label="263_ require(raisedAmount + msg.value <= hardCap);\n1588-expression_statement-264-264", method="invest()", type_label=expression_statement];
1599 [label="264_ raisedAmount += msg.value;\n1599-expression_statement-265-265", method="invest()", type_label=expression_statement];
1605 [label="265_ balances[msg.sender] += tokens;\n1605-expression_statement-266-266", method="invest()", type_label=expression_statement];
1613 [label="266_ balances[founder] -= tokens;\n1613-expression_statement-267-267", method="invest()", type_label=expression_statement];
1619 [label="267_ deposit.transfer(msg.value);\n1619-expression_statement-268-268", method="invest()", type_label=expression_statement];
1640 [label="269_ return true;\n1640-return-270-270", method="invest()", type_label=return];
1643 [label="271_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1643-function_definition-272-280", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1647 [label="272_ address payable addr_unchk40;\n1647-new_variable-273-273", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1652 [label="273_ if\n1652-if-274-279", method="UncheckedExternalCall_unchk40()", type_label=if];
3518 [label="273_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1667 [label="281_ invest();\n1667-expression_statement-282-282", method="", type_label=expression_statement];
1670 [label="283_ bool public payedOut_unchk33 = false;\n1670-new_variable-284-284", method="", type_label=new_variable];
1677 [label="284_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1677-function_definition-285-288", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1681 [label="285_ require(payedOut_unchk33);\n1681-expression_statement-286-286", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1686 [label="286_ msg.sender.send(address(this).balance);\n1686-expression_statement-287-287", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1699 [label="288_ function burn() public returns(bool){\n        ieoState = getCurrentState();\n        require(ieoState == State.afterEnd);\n        balances[founder] = 0;\n    }\n1699-function_definition-289-293", method="burn()", type_label=function_definition];
1707 [label="289_ ieoState = getCurrentState();\n1707-expression_statement-290-290", method="burn()", type_label=expression_statement];
1712 [label="290_ require(ieoState == State.afterEnd);\n1712-expression_statement-291-291", method="burn()", type_label=expression_statement];
1721 [label="291_ balances[founder] = 0;\n1721-expression_statement-292-292", method="burn()", type_label=expression_statement];
1727 [label="293_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1727-function_definition-294-295", method="bug_unchk27(address payable addr)", type_label=function_definition];
1735 [label="294_ addr.send (42 ether);\n1735-expression_statement-295-295", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1743 [label="295_ function transfer(address to, uint value) public returns(bool){\n        require(block.timestamp > coinTradeStart);\n        super.transfer(to, value);\n    }\n1743-function_definition-296-299", method="transfer(address to,uint value)", type_label=function_definition];
1759 [label="296_ require(block.timestamp > coinTradeStart);\n1759-expression_statement-297-297", method="transfer(address to,uint value)", type_label=expression_statement];
1768 [label="297_ super.transfer(to, value);\n1768-expression_statement-298-298", method="transfer(address to,uint value)", type_label=expression_statement];
1777 [label="299_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n1777-function_definition-300-304", method="bug_unchk31()", type_label=function_definition];
1781 [label="300_ address payable addr_unchk31;\n1781-new_variable-301-301", method="bug_unchk31()", type_label=new_variable];
1786 [label="301_ if_!addr_unchk31.send (10 ether) || 1==1\n1786-if-302-303", method="bug_unchk31()", type_label=if];
3652 [label="301_ end_if", method="bug_unchk31()", type_label=end_if];
1802 [label="304_ function transferFrom(address _from, address _to, uint _value) public returns(bool){\n        require(block.timestamp > coinTradeStart);\n        super.transferFrom(_from, _to, _value);\n    }\n1802-function_definition-305-308", method="transferFrom(address _from,address _to,uint _value)", type_label=function_definition];
1822 [label="305_ require(block.timestamp > coinTradeStart);\n1822-expression_statement-306-306", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
1831 [label="306_ super.transferFrom(_from, _to, _value);\n1831-expression_statement-307-307", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
1842 [label="308_ bool public payedOut_unchk45 = false;\n1842-new_variable-309-309", method="", type_label=new_variable];
1849 [label="309_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n1849-function_definition-310-313", method="withdrawLeftOver_unchk45()", type_label=function_definition];
1853 [label="310_ require(payedOut_unchk45);\n1853-expression_statement-311-311", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1858 [label="311_ msg.sender.send(address(this).balance);\n1858-expression_statement-312-312", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
734;
976;
974;
1058;
1662;
28 -> 32  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
32 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
63 -> 71  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
97 -> 101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 1972  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
139 -> 147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
198 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
257 -> 264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
351 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
380 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
459 -> 466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
569 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
624 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
715 -> 719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
755 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
766 -> 775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
775 -> 781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
798 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 2673  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
823 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
834 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
870 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
903 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
945 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
954 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 969  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2825 -> 976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 2825  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
982 -> 990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 1015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1033 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 1053  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2909 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 2909  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1066 -> 1074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1089 -> 1093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1093 -> 1098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 2964  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1119 -> 1128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1143 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1169 -> 1175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1191 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1222 -> 1230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1238 -> 1244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1258 -> 1266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1296 -> 1300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1300 -> 1306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1312 -> 1319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1319 -> 1324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1329 -> 1333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1333 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 1346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1351 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1363 -> 1371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1379 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1391 -> 1400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1415 -> 1425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 1457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1457 -> 1464  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1457 -> 1468  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3323 -> 1501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1464 -> 3323  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1464 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1468 -> 1475  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1468 -> 1479  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1475 -> 3323  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1475 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1479 -> 1492  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1479 -> 1497  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1492 -> 3323  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1492 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1497 -> 3323  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1497 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1501 -> 1508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1508 -> 1513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1518 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1522 -> 1528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1528 -> 1535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1540 -> 1549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1549 -> 1554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1554 -> 1563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> 1578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1578 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1599 -> 1605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1605 -> 1613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1613 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1643 -> 1647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1647 -> 1652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1677 -> 1681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1681 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1699 -> 1707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1707 -> 1712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1712 -> 1721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1727 -> 1735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1743 -> 1759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1759 -> 1768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1777 -> 1781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1781 -> 1786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1786 -> 3652  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1802 -> 1822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1822 -> 1831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1849 -> 1853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1853 -> 1858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 2590  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
974 -> 2825  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1058 -> 2909  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1662 -> 3518  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
