digraph  {
13 [label="2_ function bug_unchk42() public{\nuint receivers_unchk42;\naddress payable addr_unchk42;\nif (!addr_unchk42.send(42 ether))\n	{receivers_unchk42 +=1;}\nelse\n	{revert();}\n}\n13-function_definition-3-10", method="bug_unchk42()", type_label=function_definition];
17 [label="3_ uint receivers_unchk42;\n17-new_variable-4-4", method="bug_unchk42()", type_label=new_variable];
22 [label="4_ address payable addr_unchk42;\n22-new_variable-5-5", method="bug_unchk42()", type_label=new_variable];
27 [label="5_ if\n27-if-6-9", method="bug_unchk42()", type_label=if];
1586 [label="5_ end_if", method="bug_unchk42()", type_label=end_if];
37 [label="6_ receivers_unchk42 +=1;\n37-expression_statement-7-7", method="bug_unchk42()", type_label=expression_statement];
44 [label="10_ address public owner;\n44-new_variable-11-11", method="", type_label=new_variable];
49 [label="11_ bool public payedOut_unchk33 = false;\n49-new_variable-12-12", method="", type_label=new_variable];
56 [label="12_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n56-function_definition-13-16", method="withdrawLeftOver_unchk33()", type_label=function_definition];
60 [label="13_ require(payedOut_unchk33);\n60-expression_statement-14-14", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
65 [label="14_ msg.sender.send(address(this).balance);\n65-expression_statement-15-15", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
90 [label="18_ owner = msg.sender;\n90-expression_statement-19-19", method="", type_label=expression_statement];
96 [label="20_ bool public payedOut_unchk9 = false;\n96-new_variable-21-21", method="", type_label=new_variable];
103 [label="21_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n103-function_definition-22-25", method="withdrawLeftOver_unchk9()", type_label=function_definition];
107 [label="22_ require(payedOut_unchk9);\n107-expression_statement-23-23", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
112 [label="23_ msg.sender.send(address(this).balance);\n112-expression_statement-24-24", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
125 [label="25_ modifier onlyOwner() {\n        require(msg.sender == owner, \"only the owner can call this\");\n        _;\n    }\n125-expression_statement-26-29", method="", type_label=expression_statement];
128 [label="26_ require(msg.sender == owner, \"only the owner can call this\");\n128-expression_statement-27-27", method="", type_label=expression_statement];
140 [label="27_ _;\n140-expression_statement-28-28", method="", type_label=expression_statement];
142 [label="29_ function changeOwner(address _newOwner) external onlyOwner {\n        owner = _newOwner;\n        emit OwnerChanged(msg.sender, _newOwner);\n    }\n142-function_definition-30-33", method="changeOwner(address _newOwner)", type_label=function_definition];
149 [label="29_ onlyOwner\n149-expression_statement-30-30", method="changeOwner(address _newOwner)", type_label=expression_statement];
152 [label="30_ owner = _newOwner;\n152-expression_statement-31-31", method="changeOwner(address _newOwner)", type_label=expression_statement];
164 [label="33_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n164-function_definition-34-36", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
172 [label="34_ callee.call.value(1 ether);\n172-expression_statement-35-35", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
188 [label="38_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n188-function_definition-39-41", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
196 [label="39_ callee.send(5 ether);\n196-expression_statement-40-40", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
204 [label="41_ bool public isActive = true;\n204-new_variable-42-42", method="", type_label=new_variable];
211 [label="42_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n211-function_definition-43-44", method="bug_unchk27(address payable addr)", type_label=function_definition];
219 [label="43_ addr.send (42 ether);\n219-expression_statement-44-44", method="bug_unchk27(address payable addr)", type_label=expression_statement];
233 [label="45_ modifier onlyActive() {\n        require(isActive, \"contract is stopped\");\n        _;\n    }\n233-expression_statement-46-49", method="", type_label=expression_statement];
236 [label="46_ require(isActive, \"contract is stopped\");\n236-expression_statement-47-47", method="", type_label=expression_statement];
244 [label="47_ _;\n244-expression_statement-48-48", method="", type_label=expression_statement];
246 [label="49_ function setIsActive(bool _isActive) external onlyOwner {\n        if (_isActive == isActive) return;\n        isActive = _isActive;\n        emit IsActiveChanged(_isActive);\n    }\n246-function_definition-50-54", method="setIsActive(bool _isActive)", type_label=function_definition];
253 [label="49_ onlyOwner\n253-expression_statement-50-50", method="setIsActive(bool _isActive)", type_label=expression_statement];
256 [label="50_ if__isActive == isActive\n256-if-51-51", method="setIsActive(bool _isActive)", type_label=if];
1815 [label="50_ end_if", method="setIsActive(bool _isActive)", type_label=end_if];
260 [label="50_ return;\n260-return-51-51", method="setIsActive(bool _isActive)", type_label=return];
261 [label="51_ isActive = _isActive;\n261-expression_statement-52-52", method="setIsActive(bool _isActive)", type_label=expression_statement];
269 [label="54_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n269-function_definition-55-59", method="bug_unchk19()", type_label=function_definition];
273 [label="55_ address payable addr_unchk19;\n273-new_variable-56-56", method="bug_unchk19()", type_label=new_variable];
278 [label="56_ if_!addr_unchk19.send (10 ether) || 1==1\n278-if-57-58", method="bug_unchk19()", type_label=if];
1837 [label="56_ end_if", method="bug_unchk19()", type_label=end_if];
297 [label="61_ uint16 public ASSET_TYPE;\n297-new_variable-62-62", method="", type_label=new_variable];
302 [label="62_ function sendFundsToSwap(uint256 _amount)\n        public   returns(bool success);\n302-function_definition-63-64", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
317 [label="66_ uint16 public ASSET_TYPE;\n317-new_variable-67-67", method="", type_label=new_variable];
322 [label="67_ function release(\n        address _pool,\n        address payable _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    )\n        external;\n322-function_definition-68-75", method="release(address _pool,address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
345 [label="75_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n345-function_definition-76-78", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
353 [label="76_ callee.send(5 ether);\n353-expression_statement-77-77", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
361 [label="78_ function returnFunds(\n        address payable _pool,\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    )\n        external;\n361-function_definition-79-86", method="returnFunds(address payable _pool,address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
384 [label="86_ bool public payedOut_unchk20 = false;\n384-new_variable-87-87", method="", type_label=new_variable];
391 [label="87_ address payable public winner_unchk20;\n391-new_variable-88-88", method="", type_label=new_variable];
396 [label="88_ uint public winAmount_unchk20;\n396-new_variable-89-89", method="", type_label=new_variable];
401 [label="89_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n401-function_definition-90-94", method="sendToWinner_unchk20()", type_label=function_definition];
405 [label="90_ require(!payedOut_unchk20);\n405-expression_statement-91-91", method="sendToWinner_unchk20()", type_label=expression_statement];
411 [label="91_ winner_unchk20.send(winAmount_unchk20);\n411-expression_statement-92-92", method="sendToWinner_unchk20()", type_label=expression_statement];
418 [label="92_ payedOut_unchk20 = true;\n418-expression_statement-93-93", method="sendToWinner_unchk20()", type_label=expression_statement];
435 [label="96_ uint256 constant private MAX_SWAP_AMOUNT_LIMIT = 1 << 240;\n435-new_variable-97-97", method="", type_label=new_variable];
443 [label="97_ uint16 public ASSET_TYPE;\n443-new_variable-98-98", method="", type_label=new_variable];
448 [label="98_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n448-function_definition-99-103", method="bug_unchk43()", type_label=function_definition];
452 [label="99_ address payable addr_unchk43;\n452-new_variable-100-100", method="bug_unchk43()", type_label=new_variable];
457 [label="100_ if_!addr_unchk43.send (10 ether) || 1==1\n457-if-101-102", method="bug_unchk43()", type_label=if];
2016 [label="100_ end_if", method="bug_unchk43()", type_label=end_if];
473 [label="103_ address payable public swapsContract;\n473-new_variable-104-104", method="", type_label=new_variable];
478 [label="104_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n478-function_definition-105-107", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
487 [label="105_ dst.call.value(msg.value)(\"\");\n487-expression_statement-106-106", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
502 [label="107_ uint256 public minSwapAmount;\n502-new_variable-108-108", method="", type_label=new_variable];
507 [label="108_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n507-function_definition-109-111", method="withdrawBal_unchk17()", type_label=function_definition];
511 [label="109_ uint64 Balances_unchk17 = 0;\n511-new_variable-110-110", method="withdrawBal_unchk17()", type_label=new_variable];
517 [label="110_ msg.sender.send(Balances_unchk17);\n517-expression_statement-111-111", method="withdrawBal_unchk17()", type_label=expression_statement];
526 [label="111_ uint256 public maxSwapAmount;\n526-new_variable-112-112", method="", type_label=new_variable];
531 [label="112_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n531-function_definition-113-115", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
539 [label="113_ callee.call.value(1 ether);\n539-expression_statement-114-114", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
549 [label="115_ bytes32 public paymentDetailsHash;\n549-new_variable-116-116", method="", type_label=new_variable];
554 [label="116_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n554-function_definition-117-121", method="bug_unchk31()", type_label=function_definition];
558 [label="117_ address payable addr_unchk31;\n558-new_variable-118-118", method="bug_unchk31()", type_label=new_variable];
563 [label="118_ if_!addr_unchk31.send (10 ether) || 1==1\n563-if-119-120", method="bug_unchk31()", type_label=if];
2122 [label="118_ end_if", method="bug_unchk31()", type_label=end_if];
589 [label="122_ bool public payedOut_unchk45 = false;\n589-new_variable-123-123", method="", type_label=new_variable];
596 [label="123_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n596-function_definition-124-127", method="withdrawLeftOver_unchk45()", type_label=function_definition];
600 [label="124_ require(payedOut_unchk45);\n600-expression_statement-125-125", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
605 [label="125_ msg.sender.send(address(this).balance);\n605-expression_statement-126-126", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
628 [label="128_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n628-function_definition-129-131", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
636 [label="129_ callee.call.value(1 ether);\n636-expression_statement-130-130", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
677 [label="140_ validateLimits(_minSwapAmount, _maxSwapAmount)\n677-expression_statement-141-141", method="", type_label=expression_statement];
683 [label="141_ validateSwapsContract(_swapsContract, _assetType)\n683-expression_statement-142-142", method="", type_label=expression_statement];
690 [label="143_ swapsContract = _swapsContract;\n690-expression_statement-144-144", method="", type_label=expression_statement];
694 [label="144_ paymentDetailsHash = _paymentDetailsHash;\n694-expression_statement-145-145", method="", type_label=expression_statement];
698 [label="145_ minSwapAmount = _minSwapAmount;\n698-expression_statement-146-146", method="", type_label=expression_statement];
702 [label="146_ maxSwapAmount = _maxSwapAmount;\n702-expression_statement-147-147", method="", type_label=expression_statement];
706 [label="147_ ASSET_TYPE = _assetType;\n706-expression_statement-148-148", method="", type_label=expression_statement];
710 [label="149_ bool public payedOut_unchk32 = false;\n710-new_variable-150-150", method="", type_label=new_variable];
717 [label="150_ address payable public winner_unchk32;\n717-new_variable-151-151", method="", type_label=new_variable];
722 [label="151_ uint public winAmount_unchk32;\n722-new_variable-152-152", method="", type_label=new_variable];
727 [label="152_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n727-function_definition-153-157", method="sendToWinner_unchk32()", type_label=function_definition];
731 [label="153_ require(!payedOut_unchk32);\n731-expression_statement-154-154", method="sendToWinner_unchk32()", type_label=expression_statement];
737 [label="154_ winner_unchk32.send(winAmount_unchk32);\n737-expression_statement-155-155", method="sendToWinner_unchk32()", type_label=expression_statement];
744 [label="155_ payedOut_unchk32 = true;\n744-expression_statement-156-156", method="sendToWinner_unchk32()", type_label=expression_statement];
749 [label="157_ function availableFunds() public view returns (uint256);\n749-function_definition-158-158", method="availableFunds()", type_label=function_definition];
757 [label="158_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n757-function_definition-159-161", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
765 [label="159_ callee.send(5 ether);\n765-expression_statement-160-160", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
773 [label="161_ function withdrawFunds(address payable _to, uint256 _amount)\n        public   returns (bool success);\n773-function_definition-162-163", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=function_definition];
789 [label="163_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n789-function_definition-164-168", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
805 [label="164_ uint64 subpot_unchk46 = 3 ether;\n805-new_variable-165-165", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
812 [label="165_ winner_unchk46.send(subpot_unchk46);\n812-expression_statement-166-166", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
819 [label="166_ subpot_unchk46= 0;\n819-expression_statement-167-167", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
823 [label="168_ function withdrawAllFunds(address payable _to) public onlyOwner returns (bool success) {\n        return withdrawFunds(_to, availableFunds());\n    }\n823-function_definition-169-171", method="withdrawAllFunds(address payable _to)", type_label=function_definition];
830 [label="168_ onlyOwner\n830-expression_statement-169-169", method="withdrawAllFunds(address payable _to)", type_label=expression_statement];
838 [label="169_ return withdrawFunds(_to, availableFunds());\n838-return-170-170", method="withdrawAllFunds(address payable _to)", type_label=return];
846 [label="171_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n846-function_definition-172-180", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
850 [label="172_ address payable addr_unchk4;\n850-new_variable-173-173", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
855 [label="173_ if\n855-if-174-179", method="UncheckedExternalCall_unchk4()", type_label=if];
2414 [label="173_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
866 [label="180_ function setLimits(\n        uint256 _minAmount,\n        uint256 _maxAmount\n    ) public onlyOwner validateLimits(_minAmount, _maxAmount) {\n        minSwapAmount = _minAmount;\n        maxSwapAmount = _maxAmount;\n        emit LimitsChanged(_minAmount, _maxAmount);\n    }\n866-function_definition-181-188", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=function_definition];
877 [label="183_ onlyOwner\n877-expression_statement-184-184", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
879 [label="183_ validateLimits(_minAmount, _maxAmount)\n879-expression_statement-184-184", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
886 [label="184_ minSwapAmount = _minAmount;\n886-expression_statement-185-185", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
890 [label="185_ maxSwapAmount = _maxAmount;\n890-expression_statement-186-186", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
900 [label="188_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n900-function_definition-189-193", method="bug_unchk7()", type_label=function_definition];
904 [label="189_ address payable addr_unchk7;\n904-new_variable-190-190", method="bug_unchk7()", type_label=new_variable];
909 [label="190_ if_!addr_unchk7.send (10 ether) || 1==1\n909-if-191-192", method="bug_unchk7()", type_label=if];
2468 [label="190_ end_if", method="bug_unchk7()", type_label=end_if];
925 [label="193_ function setSwapsContract(\n        address payable _swapsContract\n    ) public onlyOwner validateSwapsContract(_swapsContract, ASSET_TYPE) {\n        address oldSwapsContract = swapsContract;\n        swapsContract = _swapsContract;\n        emit SwapsContractChanged(oldSwapsContract, _swapsContract);\n    }\n925-function_definition-194-200", method="setSwapsContract(address payable _swapsContract)", type_label=function_definition];
932 [label="195_ onlyOwner\n932-expression_statement-196-196", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
934 [label="195_ validateSwapsContract(_swapsContract, ASSET_TYPE)\n934-expression_statement-196-196", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
941 [label="196_ address oldSwapsContract = swapsContract;\n941-new_variable-197-197", method="setSwapsContract(address payable _swapsContract)", type_label=new_variable];
947 [label="197_ swapsContract = _swapsContract;\n947-expression_statement-198-198", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
957 [label="200_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n957-function_definition-201-203", method="my_func_unchk23(address payable dst)", type_label=function_definition];
966 [label="201_ dst.send(msg.value);\n966-expression_statement-202-202", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
975 [label="203_ function sendFundsToSwap(uint256 _amount)\n        public   returns(bool success);\n975-function_definition-204-205", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
987 [label="205_ function releaseSwap(\n        address payable _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external onlyOwner {\n        RampInstantEscrowsPoolInterface(swapsContract).release(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n    }\n987-function_definition-206-219", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
1006 [label="210_ onlyOwner\n1006-expression_statement-211-211", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1009 [label="211_ RampInstantEscrowsPoolInterface(swapsContract).release(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n1009-expression_statement-212-218", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1029 [label="219_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n1029-function_definition-220-222", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
1037 [label="220_ callee.send(5 ether);\n1037-expression_statement-221-221", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
1045 [label="222_ function returnSwap(\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external onlyOwner {\n        RampInstantEscrowsPoolInterface(swapsContract).returnFunds(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n    }\n1045-function_definition-223-236", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
1064 [label="227_ onlyOwner\n1064-expression_statement-228-228", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1067 [label="228_ RampInstantEscrowsPoolInterface(swapsContract).returnFunds(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n1067-expression_statement-229-235", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1087 [label="236_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n1087-function_definition-237-244", method="bug_unchk30()", type_label=function_definition];
1091 [label="237_ uint receivers_unchk30;\n1091-new_variable-238-238", method="bug_unchk30()", type_label=new_variable];
1096 [label="238_ address payable addr_unchk30;\n1096-new_variable-239-239", method="bug_unchk30()", type_label=new_variable];
1101 [label="239_ if\n1101-if-240-243", method="bug_unchk30()", type_label=if];
2660 [label="239_ end_if", method="bug_unchk30()", type_label=end_if];
1111 [label="240_ receivers_unchk30 +=1;\n1111-expression_statement-241-241", method="bug_unchk30()", type_label=expression_statement];
1126 [label="247_ bool public payedOut_unchk8 = false;\n1126-new_variable-248-248", method="", type_label=new_variable];
1133 [label="248_ address payable public winner_unchk8;\n1133-new_variable-249-249", method="", type_label=new_variable];
1138 [label="249_ uint public winAmount_unchk8;\n1138-new_variable-250-250", method="", type_label=new_variable];
1143 [label="250_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1143-function_definition-251-255", method="sendToWinner_unchk8()", type_label=function_definition];
1147 [label="251_ require(!payedOut_unchk8);\n1147-expression_statement-252-252", method="sendToWinner_unchk8()", type_label=expression_statement];
1153 [label="252_ winner_unchk8.send(winAmount_unchk8);\n1153-expression_statement-253-253", method="sendToWinner_unchk8()", type_label=expression_statement];
1160 [label="253_ payedOut_unchk8 = true;\n1160-expression_statement-254-254", method="sendToWinner_unchk8()", type_label=expression_statement];
1165 [label="255_ modifier onlySwapsContract() {\n        require(msg.sender == swapsContract, \"only the swaps contract can call this\");\n        _;\n    }\n1165-expression_statement-256-259", method="", type_label=expression_statement];
1168 [label="256_ require(msg.sender == swapsContract, \"only the swaps contract can call this\");\n1168-expression_statement-257-257", method="", type_label=expression_statement];
1180 [label="257_ _;\n1180-expression_statement-258-258", method="", type_label=expression_statement];
1182 [label="259_ modifier isWithinLimits(uint256 _amount) {\n        require(_amount >= minSwapAmount && _amount <= maxSwapAmount, \"amount outside swap limits\");\n        _;\n    }\n1182-expression_statement-260-263", method="", type_label=expression_statement];
1189 [label="260_ require(_amount >= minSwapAmount && _amount <= maxSwapAmount, \"amount outside swap limits\");\n1189-expression_statement-261-261", method="", type_label=expression_statement];
1203 [label="261_ _;\n1203-expression_statement-262-262", method="", type_label=expression_statement];
1205 [label="263_ modifier validateLimits(uint256 _minAmount, uint256 _maxAmount) {\n        require(_minAmount <= _maxAmount, \"min limit over max limit\");\n        require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, \"maxAmount too high\");\n        _;\n    }\n1205-expression_statement-264-268", method="", type_label=expression_statement];
1216 [label="264_ require(_minAmount <= _maxAmount, \"min limit over max limit\");\n1216-expression_statement-265-265", method="", type_label=expression_statement];
1226 [label="265_ require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, \"maxAmount too high\");\n1226-expression_statement-266-266", method="", type_label=expression_statement];
1236 [label="266_ _;\n1236-expression_statement-267-267", method="", type_label=expression_statement];
1238 [label="268_ modifier validateSwapsContract(address payable _swapsContract, uint16 _assetType) {\n        require(_swapsContract != address(0), \"null swaps contract address\");\n        require(\n            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,\n            \"pool asset type doesn't match swap contract\"\n        );\n        _;\n    }\n1238-expression_statement-269-276", method="", type_label=expression_statement];
1249 [label="269_ require(_swapsContract != address(0), \"null swaps contract address\");\n1249-expression_statement-270-270", method="", type_label=expression_statement];
1261 [label="270_ require(\n            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,\n            \"pool asset type doesn't match swap contract\"\n        );\n1261-expression_statement-271-274", method="", type_label=expression_statement];
1277 [label="274_ _;\n1277-expression_statement-275-275", method="", type_label=expression_statement];
1285 [label="278_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n1285-function_definition-279-280", method="bug_unchk3(address payable addr)", type_label=function_definition];
1293 [label="279_ addr.send (42 ether);\n1293-expression_statement-280-280", method="bug_unchk3(address payable addr)", type_label=expression_statement];
1301 [label="280_ uint16 internal constant ETH_TYPE_ID = 1;\n1301-new_variable-281-281", method="", type_label=new_variable];
1324 [label="288_ RampInstantPool(\n            _swapsContract, _minSwapAmount, _maxSwapAmount, _paymentDetailsHash, ETH_TYPE_ID\n        )\n1324-expression_statement-289-291", method="", type_label=expression_statement];
1337 [label="292_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1337-function_definition-293-294", method="bug_unchk39(address payable addr)", type_label=function_definition];
1345 [label="293_ addr.send (4 ether);\n1345-expression_statement-294-294", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1353 [label="294_ function availableFunds() public view returns(uint256) {\n        return address(this).balance;\n    }\n1353-function_definition-295-297", method="availableFunds()", type_label=function_definition];
1362 [label="295_ return address(this).balance;\n1362-return-296-296", method="availableFunds()", type_label=return];
1368 [label="297_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1368-function_definition-298-300", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1377 [label="298_ dst.call.value(msg.value)(\"\");\n1377-expression_statement-299-299", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1392 [label="300_ function withdrawFunds(\n        address payable _to,\n        uint256 _amount\n    ) public onlyOwner returns (bool success) {\n        _to.transfer(_amount);   \n        return true;\n    }\n1392-function_definition-301-307", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=function_definition];
1403 [label="303_ onlyOwner\n1403-expression_statement-304-304", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=expression_statement];
1411 [label="304_ _to.transfer(_amount);\n1411-expression_statement-305-305", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=expression_statement];
1418 [label="305_ return true;\n1418-return-306-306", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=return];
1421 [label="307_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1421-function_definition-308-310", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1430 [label="308_ dst.send(msg.value);\n1430-expression_statement-309-309", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1439 [label="310_ function sendFundsToSwap(\n        uint256 _amount\n    ) public onlyActive onlySwapsContract isWithinLimits(_amount) returns(bool success) {\n        swapsContract.transfer(_amount);   \n        return true;\n    }\n1439-function_definition-311-316", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
1446 [label="312_ onlyActive\n1446-expression_statement-313-313", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1448 [label="312_ onlySwapsContract\n1448-expression_statement-313-313", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1450 [label="312_ isWithinLimits(_amount)\n1450-expression_statement-313-313", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1460 [label="313_ swapsContract.transfer(_amount);\n1460-expression_statement-314-314", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1467 [label="314_ return true;\n1467-return-315-315", method="sendFundsToSwap(uint256 _amount)", type_label=return];
1470 [label="316_ bool public payedOut_unchk44 = false;\n1470-new_variable-317-317", method="", type_label=new_variable];
1477 [label="317_ address payable public winner_unchk44;\n1477-new_variable-318-318", method="", type_label=new_variable];
1482 [label="318_ uint public winAmount_unchk44;\n1482-new_variable-319-319", method="", type_label=new_variable];
1487 [label="319_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1487-function_definition-320-324", method="sendToWinner_unchk44()", type_label=function_definition];
1491 [label="320_ require(!payedOut_unchk44);\n1491-expression_statement-321-321", method="sendToWinner_unchk44()", type_label=expression_statement];
1497 [label="321_ winner_unchk44.send(winAmount_unchk44);\n1497-expression_statement-322-322", method="sendToWinner_unchk44()", type_label=expression_statement];
1504 [label="322_ payedOut_unchk44 = true;\n1504-expression_statement-323-323", method="sendToWinner_unchk44()", type_label=expression_statement];
1513 [label="325_ require(msg.data.length == 0, \"invalid pool function called\");\n1513-expression_statement-326-326", method="", type_label=expression_statement];
1527 [label="326_ if_msg.sender != swapsContract\n1527-if-327-329", method="", type_label=if];
3086 [label="326_ end_if", method="", type_label=end_if];
1544 [label="330_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1544-function_definition-331-339", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1548 [label="331_ address payable addr_unchk40;\n1548-new_variable-332-332", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1553 [label="332_ if\n1553-if-333-338", method="UncheckedExternalCall_unchk40()", type_label=if];
3112 [label="332_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
42;
865;
1118;
1116;
1563;
13 -> 17  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
17 -> 22  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
22 -> 27  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
27 -> 37  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1586 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 1586  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
44 -> 49  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
56 -> 60  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 65  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
103 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
142 -> 152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
256 -> 260  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
256 -> 1815  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1815 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
260 -> 1815  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
260 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
269 -> 273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
273 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 1837  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
345 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 2016  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
478 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 2122  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
596 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
628 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
690 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
694 -> 698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
698 -> 702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
846 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 2468  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
925 -> 941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
941 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1045 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 1091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1091 -> 1096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 1111  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2660 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 2660  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1126 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1143 -> 1147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1147 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 1160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1168 -> 1180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1182 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1205 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1216 -> 1226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1226 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1249 -> 1261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1261 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1285 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1337 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1353 -> 1362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1362 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1368 -> 1377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1411 -> 1418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1418 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1421 -> 1430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1439 -> 1460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1446 -> 1448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 1450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1470 -> 1477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1477 -> 1482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1487 -> 1491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1491 -> 1497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1497 -> 1504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 1527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1527 -> 3086  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1544 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1548 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 1586  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
865 -> 2414  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1116 -> 2660  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1563 -> 3112  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
