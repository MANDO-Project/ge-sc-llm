digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
1649 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ assert(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n56-function_definition-11-14", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ uint256 c = a / b;\n73-new_variable-12-12", method="div(uint256 a,uint256 b)", type_label=new_variable];
81 [label="12_ return c;\n81-return-13-13", method="div(uint256 a,uint256 b)", type_label=return];
83 [label="14_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n83-function_definition-15-18", method="sub(uint256 a,uint256 b)", type_label=function_definition];
100 [label="15_ assert(b <= a);\n100-expression_statement-16-16", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
107 [label="16_ return a - b;\n107-return-17-17", method="sub(uint256 a,uint256 b)", type_label=return];
111 [label="18_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n111-function_definition-19-23", method="add(uint256 a,uint256 b)", type_label=function_definition];
128 [label="19_ uint256 c = a + b;\n128-new_variable-20-20", method="add(uint256 a,uint256 b)", type_label=new_variable];
136 [label="20_ assert(c >= a);\n136-expression_statement-21-21", method="add(uint256 a,uint256 b)", type_label=expression_statement];
143 [label="21_ return c;\n143-return-22-22", method="add(uint256 a,uint256 b)", type_label=return];
148 [label="25_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n148-function_definition-26-28", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
157 [label="26_ dst.call.value(msg.value)(\"\");\n157-expression_statement-27-27", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
172 [label="28_ address public owner;\n172-new_variable-29-29", method="", type_label=new_variable];
179 [label="30_ owner = msg.sender;\n179-expression_statement-31-31", method="", type_label=expression_statement];
185 [label="32_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n185-function_definition-33-35", method="withdrawBal_unchk17()", type_label=function_definition];
189 [label="33_ uint64 Balances_unchk17 = 0;\n189-new_variable-34-34", method="withdrawBal_unchk17()", type_label=new_variable];
195 [label="34_ msg.sender.send(Balances_unchk17);\n195-expression_statement-35-35", method="withdrawBal_unchk17()", type_label=expression_statement];
204 [label="35_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n204-expression_statement-36-39", method="", type_label=expression_statement];
207 [label="36_ require(msg.sender == owner);\n207-expression_statement-37-37", method="", type_label=expression_statement];
216 [label="37_ _;\n216-expression_statement-38-38", method="", type_label=expression_statement];
218 [label="39_ function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n218-function_definition-40-43", method="transferOwnership(address newOwner)", type_label=function_definition];
224 [label="39_ onlyOwner\n224-expression_statement-40-40", method="transferOwnership(address newOwner)", type_label=expression_statement];
228 [label="40_ require(newOwner != address(0));\n228-expression_statement-41-41", method="transferOwnership(address newOwner)", type_label=expression_statement];
237 [label="41_ owner = newOwner;\n237-expression_statement-42-42", method="transferOwnership(address newOwner)", type_label=expression_statement];
241 [label="43_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n241-function_definition-44-46", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
249 [label="44_ callee.call.value(1 ether);\n249-expression_statement-45-45", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
269 [label="49_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n269-function_definition-50-51", method="bug_unchk3(address payable addr)", type_label=function_definition];
277 [label="50_ addr.send (42 ether);\n277-expression_statement-51-51", method="bug_unchk3(address payable addr)", type_label=expression_statement];
285 [label="51_ function withdrawForUser(address payable _address,uint amount) onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\");\n        _address.transfer(amount);\n    }\n285-function_definition-52-55", method="withdrawForUser(address payable _address,uint amount)", type_label=function_definition];
295 [label="51_ onlyOwner\n295-expression_statement-52-52", method="withdrawForUser(address payable _address,uint amount)", type_label=expression_statement];
299 [label="52_ require(msg.sender == owner, \"only owner can use this method\");\n299-expression_statement-53-53", method="withdrawForUser(address payable _address,uint amount)", type_label=expression_statement];
311 [label="53_ _address.transfer(amount);\n311-expression_statement-54-54", method="withdrawForUser(address payable _address,uint amount)", type_label=expression_statement];
318 [label="55_ bool public payedOut_unchk9 = false;\n318-new_variable-56-56", method="", type_label=new_variable];
325 [label="56_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n325-function_definition-57-60", method="withdrawLeftOver_unchk9()", type_label=function_definition];
329 [label="57_ require(payedOut_unchk9);\n329-expression_statement-58-58", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
334 [label="58_ msg.sender.send(address(this).balance);\n334-expression_statement-59-59", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
347 [label="60_ function moveBrick(uint amount) onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(amount);\n    }\n347-function_definition-61-64", method="moveBrick(uint amount)", type_label=function_definition];
353 [label="60_ onlyOwner\n353-expression_statement-61-61", method="moveBrick(uint amount)", type_label=expression_statement];
357 [label="61_ require(msg.sender == owner, \"only owner can use this method\");\n357-expression_statement-62-62", method="moveBrick(uint amount)", type_label=expression_statement];
369 [label="62_ msg.sender.transfer(amount);\n369-expression_statement-63-63", method="moveBrick(uint amount)", type_label=expression_statement];
378 [label="64_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n378-function_definition-65-67", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
386 [label="65_ callee.call.value(1 ether);\n386-expression_statement-66-66", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
396 [label="67_ function moveBrickContracts() onlyOwner public\n    {\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n396-function_definition-68-72", method="moveBrickContracts()", type_label=function_definition];
398 [label="67_ onlyOwner\n398-expression_statement-68-68", method="moveBrickContracts()", type_label=expression_statement];
402 [label="69_ require(msg.sender == owner, \"only owner can use this method\");\n402-expression_statement-70-70", method="moveBrickContracts()", type_label=expression_statement];
414 [label="70_ msg.sender.transfer(address(this).balance);\n414-expression_statement-71-71", method="moveBrickContracts()", type_label=expression_statement];
427 [label="72_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n427-function_definition-73-77", method="bug_unchk19()", type_label=function_definition];
431 [label="73_ address payable addr_unchk19;\n431-new_variable-74-74", method="bug_unchk19()", type_label=new_variable];
436 [label="74_ if_!addr_unchk19.send (10 ether) || 1==1\n436-if-75-76", method="bug_unchk19()", type_label=if];
2055 [label="74_ end_if", method="bug_unchk19()", type_label=end_if];
452 [label="77_ function moveBrickClear() onlyOwner public {\n        require(msg.sender == owner, \"only owner can use this method\"); \n        selfdestruct(msg.sender);\n    }\n452-function_definition-78-81", method="moveBrickClear()", type_label=function_definition];
454 [label="77_ onlyOwner\n454-expression_statement-78-78", method="moveBrickClear()", type_label=expression_statement];
458 [label="78_ require(msg.sender == owner, \"only owner can use this method\");\n458-expression_statement-79-79", method="moveBrickClear()", type_label=expression_statement];
470 [label="79_ selfdestruct(msg.sender);\n470-expression_statement-80-80", method="moveBrickClear()", type_label=expression_statement];
477 [label="81_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n477-function_definition-82-84", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
485 [label="82_ callee.send(5 ether);\n485-expression_statement-83-83", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
493 [label="84_ function joinFlexible() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n493-function_definition-85-88", method="joinFlexible()", type_label=function_definition];
495 [label="84_ onlyOwner\n495-expression_statement-85-85", method="joinFlexible()", type_label=expression_statement];
499 [label="85_ require(msg.sender == owner, \"only owner can use this method\");\n499-expression_statement-86-86", method="joinFlexible()", type_label=expression_statement];
511 [label="86_ msg.sender.transfer(address(this).balance);\n511-expression_statement-87-87", method="joinFlexible()", type_label=expression_statement];
524 [label="88_ bool public payedOut_unchk20 = false;\n524-new_variable-89-89", method="", type_label=new_variable];
531 [label="89_ address payable public winner_unchk20;\n531-new_variable-90-90", method="", type_label=new_variable];
536 [label="90_ uint public winAmount_unchk20;\n536-new_variable-91-91", method="", type_label=new_variable];
541 [label="91_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n541-function_definition-92-96", method="sendToWinner_unchk20()", type_label=function_definition];
545 [label="92_ require(!payedOut_unchk20);\n545-expression_statement-93-93", method="sendToWinner_unchk20()", type_label=expression_statement];
551 [label="93_ winner_unchk20.send(winAmount_unchk20);\n551-expression_statement-94-94", method="sendToWinner_unchk20()", type_label=expression_statement];
558 [label="94_ payedOut_unchk20 = true;\n558-expression_statement-95-95", method="sendToWinner_unchk20()", type_label=expression_statement];
563 [label="96_ function joinFixed() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n563-function_definition-97-100", method="joinFixed()", type_label=function_definition];
565 [label="96_ onlyOwner\n565-expression_statement-97-97", method="joinFixed()", type_label=expression_statement];
569 [label="97_ require(msg.sender == owner, \"only owner can use this method\");\n569-expression_statement-98-98", method="joinFixed()", type_label=expression_statement];
581 [label="98_ msg.sender.transfer(address(this).balance);\n581-expression_statement-99-99", method="joinFixed()", type_label=expression_statement];
594 [label="100_ bool public payedOut_unchk32 = false;\n594-new_variable-101-101", method="", type_label=new_variable];
601 [label="101_ address payable public winner_unchk32;\n601-new_variable-102-102", method="", type_label=new_variable];
606 [label="102_ uint public winAmount_unchk32;\n606-new_variable-103-103", method="", type_label=new_variable];
611 [label="103_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n611-function_definition-104-108", method="sendToWinner_unchk32()", type_label=function_definition];
615 [label="104_ require(!payedOut_unchk32);\n615-expression_statement-105-105", method="sendToWinner_unchk32()", type_label=expression_statement];
621 [label="105_ winner_unchk32.send(winAmount_unchk32);\n621-expression_statement-106-106", method="sendToWinner_unchk32()", type_label=expression_statement];
628 [label="106_ payedOut_unchk32 = true;\n628-expression_statement-107-107", method="sendToWinner_unchk32()", type_label=expression_statement];
633 [label="108_ function staticBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n633-function_definition-109-112", method="staticBonus()", type_label=function_definition];
635 [label="108_ onlyOwner\n635-expression_statement-109-109", method="staticBonus()", type_label=expression_statement];
639 [label="109_ require(msg.sender == owner, \"only owner can use this method\");\n639-expression_statement-110-110", method="staticBonus()", type_label=expression_statement];
651 [label="110_ msg.sender.transfer(address(this).balance);\n651-expression_statement-111-111", method="staticBonus()", type_label=expression_statement];
664 [label="112_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n664-function_definition-113-115", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
672 [label="113_ callee.send(5 ether);\n672-expression_statement-114-114", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
680 [label="115_ function activeBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n680-function_definition-116-119", method="activeBonus()", type_label=function_definition];
682 [label="115_ onlyOwner\n682-expression_statement-116-116", method="activeBonus()", type_label=expression_statement];
686 [label="116_ require(msg.sender == owner, \"only owner can use this method\");\n686-expression_statement-117-117", method="activeBonus()", type_label=expression_statement];
698 [label="117_ msg.sender.transfer(address(this).balance);\n698-expression_statement-118-118", method="activeBonus()", type_label=expression_statement];
711 [label="119_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n711-function_definition-120-124", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
727 [label="120_ uint64 subpot_unchk46 = 3 ether;\n727-new_variable-121-121", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
734 [label="121_ winner_unchk46.send(subpot_unchk46);\n734-expression_statement-122-122", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
741 [label="122_ subpot_unchk46= 0;\n741-expression_statement-123-123", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
745 [label="124_ function teamAddBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n745-function_definition-125-128", method="teamAddBonus()", type_label=function_definition];
747 [label="124_ onlyOwner\n747-expression_statement-125-125", method="teamAddBonus()", type_label=expression_statement];
751 [label="125_ require(msg.sender == owner, \"only owner can use this method\");\n751-expression_statement-126-126", method="teamAddBonus()", type_label=expression_statement];
763 [label="126_ msg.sender.transfer(address(this).balance);\n763-expression_statement-127-127", method="teamAddBonus()", type_label=expression_statement];
776 [label="128_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n776-function_definition-129-137", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
780 [label="129_ address payable addr_unchk4;\n780-new_variable-130-130", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
785 [label="130_ if\n785-if-131-136", method="UncheckedExternalCall_unchk4()", type_label=if];
2404 [label="130_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
796 [label="137_ function staticBonusCacl() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n796-function_definition-138-141", method="staticBonusCacl()", type_label=function_definition];
798 [label="137_ onlyOwner\n798-expression_statement-138-138", method="staticBonusCacl()", type_label=expression_statement];
802 [label="138_ require(msg.sender == owner, \"only owner can use this method\");\n802-expression_statement-139-139", method="staticBonusCacl()", type_label=expression_statement];
814 [label="139_ msg.sender.transfer(address(this).balance);\n814-expression_statement-140-140", method="staticBonusCacl()", type_label=expression_statement];
827 [label="141_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n827-function_definition-142-146", method="bug_unchk7()", type_label=function_definition];
831 [label="142_ address payable addr_unchk7;\n831-new_variable-143-143", method="bug_unchk7()", type_label=new_variable];
836 [label="143_ if_!addr_unchk7.send (10 ether) || 1==1\n836-if-144-145", method="bug_unchk7()", type_label=if];
2455 [label="143_ end_if", method="bug_unchk7()", type_label=end_if];
852 [label="146_ function activeBonusCacl_1() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n852-function_definition-147-150", method="activeBonusCacl_1()", type_label=function_definition];
854 [label="146_ onlyOwner\n854-expression_statement-147-147", method="activeBonusCacl_1()", type_label=expression_statement];
858 [label="147_ require(msg.sender == owner, \"only owner can use this method\");\n858-expression_statement-148-148", method="activeBonusCacl_1()", type_label=expression_statement];
870 [label="148_ msg.sender.transfer(address(this).balance);\n870-expression_statement-149-149", method="activeBonusCacl_1()", type_label=expression_statement];
883 [label="150_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n883-function_definition-151-153", method="my_func_unchk23(address payable dst)", type_label=function_definition];
892 [label="151_ dst.send(msg.value);\n892-expression_statement-152-152", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
901 [label="153_ function activeBonusCacl_2() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n901-function_definition-154-157", method="activeBonusCacl_2()", type_label=function_definition];
903 [label="153_ onlyOwner\n903-expression_statement-154-154", method="activeBonusCacl_2()", type_label=expression_statement];
907 [label="154_ require(msg.sender == owner, \"only owner can use this method\");\n907-expression_statement-155-155", method="activeBonusCacl_2()", type_label=expression_statement];
919 [label="155_ msg.sender.transfer(address(this).balance);\n919-expression_statement-156-156", method="activeBonusCacl_2()", type_label=expression_statement];
932 [label="157_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n932-function_definition-158-160", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
940 [label="158_ callee.send(5 ether);\n940-expression_statement-159-159", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
948 [label="160_ function activeBonusCacl_3() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n948-function_definition-161-164", method="activeBonusCacl_3()", type_label=function_definition];
950 [label="160_ onlyOwner\n950-expression_statement-161-161", method="activeBonusCacl_3()", type_label=expression_statement];
954 [label="161_ require(msg.sender == owner, \"only owner can use this method\");\n954-expression_statement-162-162", method="activeBonusCacl_3()", type_label=expression_statement];
966 [label="162_ msg.sender.transfer(address(this).balance);\n966-expression_statement-163-163", method="activeBonusCacl_3()", type_label=expression_statement];
979 [label="164_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n979-function_definition-165-172", method="bug_unchk30()", type_label=function_definition];
983 [label="165_ uint receivers_unchk30;\n983-new_variable-166-166", method="bug_unchk30()", type_label=new_variable];
988 [label="166_ address payable addr_unchk30;\n988-new_variable-167-167", method="bug_unchk30()", type_label=new_variable];
993 [label="167_ if\n993-if-168-171", method="bug_unchk30()", type_label=if];
2612 [label="167_ end_if", method="bug_unchk30()", type_label=end_if];
1003 [label="168_ receivers_unchk30 +=1;\n1003-expression_statement-169-169", method="bug_unchk30()", type_label=expression_statement];
1010 [label="172_ function activeBonusCacl_4() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1010-function_definition-173-176", method="activeBonusCacl_4()", type_label=function_definition];
1012 [label="172_ onlyOwner\n1012-expression_statement-173-173", method="activeBonusCacl_4()", type_label=expression_statement];
1016 [label="173_ require(msg.sender == owner, \"only owner can use this method\");\n1016-expression_statement-174-174", method="activeBonusCacl_4()", type_label=expression_statement];
1028 [label="174_ msg.sender.transfer(address(this).balance);\n1028-expression_statement-175-175", method="activeBonusCacl_4()", type_label=expression_statement];
1041 [label="176_ bool public payedOut_unchk8 = false;\n1041-new_variable-177-177", method="", type_label=new_variable];
1048 [label="177_ address payable public winner_unchk8;\n1048-new_variable-178-178", method="", type_label=new_variable];
1053 [label="178_ uint public winAmount_unchk8;\n1053-new_variable-179-179", method="", type_label=new_variable];
1058 [label="179_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1058-function_definition-180-184", method="sendToWinner_unchk8()", type_label=function_definition];
1062 [label="180_ require(!payedOut_unchk8);\n1062-expression_statement-181-181", method="sendToWinner_unchk8()", type_label=expression_statement];
1068 [label="181_ winner_unchk8.send(winAmount_unchk8);\n1068-expression_statement-182-182", method="sendToWinner_unchk8()", type_label=expression_statement];
1075 [label="182_ payedOut_unchk8 = true;\n1075-expression_statement-183-183", method="sendToWinner_unchk8()", type_label=expression_statement];
1080 [label="184_ function activeBonusCacl_5() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1080-function_definition-185-188", method="activeBonusCacl_5()", type_label=function_definition];
1082 [label="184_ onlyOwner\n1082-expression_statement-185-185", method="activeBonusCacl_5()", type_label=expression_statement];
1086 [label="185_ require(msg.sender == owner, \"only owner can use this method\");\n1086-expression_statement-186-186", method="activeBonusCacl_5()", type_label=expression_statement];
1098 [label="186_ msg.sender.transfer(address(this).balance);\n1098-expression_statement-187-187", method="activeBonusCacl_5()", type_label=expression_statement];
1111 [label="188_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1111-function_definition-189-190", method="bug_unchk39(address payable addr)", type_label=function_definition];
1119 [label="189_ addr.send (4 ether);\n1119-expression_statement-190-190", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1127 [label="190_ function activeBonusCacl_6() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1127-function_definition-191-194", method="activeBonusCacl_6()", type_label=function_definition];
1129 [label="190_ onlyOwner\n1129-expression_statement-191-191", method="activeBonusCacl_6()", type_label=expression_statement];
1133 [label="191_ require(msg.sender == owner, \"only owner can use this method\");\n1133-expression_statement-192-192", method="activeBonusCacl_6()", type_label=expression_statement];
1145 [label="192_ msg.sender.transfer(address(this).balance);\n1145-expression_statement-193-193", method="activeBonusCacl_6()", type_label=expression_statement];
1158 [label="194_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1158-function_definition-195-197", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1167 [label="195_ dst.call.value(msg.value)(\"\");\n1167-expression_statement-196-196", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1182 [label="197_ function activeBonusCacl_7() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1182-function_definition-198-201", method="activeBonusCacl_7()", type_label=function_definition];
1184 [label="197_ onlyOwner\n1184-expression_statement-198-198", method="activeBonusCacl_7()", type_label=expression_statement];
1188 [label="198_ require(msg.sender == owner, \"only owner can use this method\");\n1188-expression_statement-199-199", method="activeBonusCacl_7()", type_label=expression_statement];
1200 [label="199_ msg.sender.transfer(address(this).balance);\n1200-expression_statement-200-200", method="activeBonusCacl_7()", type_label=expression_statement];
1213 [label="201_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1213-function_definition-202-204", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1222 [label="202_ dst.send(msg.value);\n1222-expression_statement-203-203", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1231 [label="204_ function activeBonusCacl_8() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1231-function_definition-205-208", method="activeBonusCacl_8()", type_label=function_definition];
1233 [label="204_ onlyOwner\n1233-expression_statement-205-205", method="activeBonusCacl_8()", type_label=expression_statement];
1237 [label="205_ require(msg.sender == owner, \"only owner can use this method\");\n1237-expression_statement-206-206", method="activeBonusCacl_8()", type_label=expression_statement];
1249 [label="206_ msg.sender.transfer(address(this).balance);\n1249-expression_statement-207-207", method="activeBonusCacl_8()", type_label=expression_statement];
1262 [label="208_ bool public payedOut_unchk44 = false;\n1262-new_variable-209-209", method="", type_label=new_variable];
1269 [label="209_ address payable public winner_unchk44;\n1269-new_variable-210-210", method="", type_label=new_variable];
1274 [label="210_ uint public winAmount_unchk44;\n1274-new_variable-211-211", method="", type_label=new_variable];
1279 [label="211_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1279-function_definition-212-216", method="sendToWinner_unchk44()", type_label=function_definition];
1283 [label="212_ require(!payedOut_unchk44);\n1283-expression_statement-213-213", method="sendToWinner_unchk44()", type_label=expression_statement];
1289 [label="213_ winner_unchk44.send(winAmount_unchk44);\n1289-expression_statement-214-214", method="sendToWinner_unchk44()", type_label=expression_statement];
1296 [label="214_ payedOut_unchk44 = true;\n1296-expression_statement-215-215", method="sendToWinner_unchk44()", type_label=expression_statement];
1301 [label="216_ function activeBonusCacl_9() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1301-function_definition-217-220", method="activeBonusCacl_9()", type_label=function_definition];
1303 [label="216_ onlyOwner\n1303-expression_statement-217-217", method="activeBonusCacl_9()", type_label=expression_statement];
1307 [label="217_ require(msg.sender == owner, \"only owner can use this method\");\n1307-expression_statement-218-218", method="activeBonusCacl_9()", type_label=expression_statement];
1319 [label="218_ msg.sender.transfer(address(this).balance);\n1319-expression_statement-219-219", method="activeBonusCacl_9()", type_label=expression_statement];
1332 [label="220_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1332-function_definition-221-229", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1336 [label="221_ address payable addr_unchk40;\n1336-new_variable-222-222", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1341 [label="222_ if\n1341-if-223-228", method="UncheckedExternalCall_unchk40()", type_label=if];
2960 [label="222_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1352 [label="229_ function teamAddBonusCacl() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1352-function_definition-230-233", method="teamAddBonusCacl()", type_label=function_definition];
1354 [label="229_ onlyOwner\n1354-expression_statement-230-230", method="teamAddBonusCacl()", type_label=expression_statement];
1358 [label="230_ require(msg.sender == owner, \"only owner can use this method\");\n1358-expression_statement-231-231", method="teamAddBonusCacl()", type_label=expression_statement];
1370 [label="231_ msg.sender.transfer(address(this).balance);\n1370-expression_statement-232-232", method="teamAddBonusCacl()", type_label=expression_statement];
1383 [label="233_ bool public payedOut_unchk33 = false;\n1383-new_variable-234-234", method="", type_label=new_variable];
1390 [label="234_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1390-function_definition-235-238", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1394 [label="235_ require(payedOut_unchk33);\n1394-expression_statement-236-236", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1399 [label="236_ msg.sender.send(address(this).balance);\n1399-expression_statement-237-237", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1412 [label="238_ function caclTeamPerformance() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1412-function_definition-239-242", method="caclTeamPerformance()", type_label=function_definition];
1414 [label="238_ onlyOwner\n1414-expression_statement-239-239", method="caclTeamPerformance()", type_label=expression_statement];
1418 [label="239_ require(msg.sender == owner, \"only owner can use this method\");\n1418-expression_statement-240-240", method="caclTeamPerformance()", type_label=expression_statement];
1430 [label="240_ msg.sender.transfer(address(this).balance);\n1430-expression_statement-241-241", method="caclTeamPerformance()", type_label=expression_statement];
1443 [label="242_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1443-function_definition-243-244", method="bug_unchk27(address payable addr)", type_label=function_definition];
1451 [label="243_ addr.send (42 ether);\n1451-expression_statement-244-244", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1459 [label="244_ function releaStaticBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1459-function_definition-245-248", method="releaStaticBonus()", type_label=function_definition];
1461 [label="244_ onlyOwner\n1461-expression_statement-245-245", method="releaStaticBonus()", type_label=expression_statement];
1465 [label="245_ require(msg.sender == owner, \"only owner can use this method\");\n1465-expression_statement-246-246", method="releaStaticBonus()", type_label=expression_statement];
1477 [label="246_ msg.sender.transfer(address(this).balance);\n1477-expression_statement-247-247", method="releaStaticBonus()", type_label=expression_statement];
1490 [label="248_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n1490-function_definition-249-253", method="bug_unchk31()", type_label=function_definition];
1494 [label="249_ address payable addr_unchk31;\n1494-new_variable-250-250", method="bug_unchk31()", type_label=new_variable];
1499 [label="250_ if_!addr_unchk31.send (10 ether) || 1==1\n1499-if-251-252", method="bug_unchk31()", type_label=if];
3118 [label="250_ end_if", method="bug_unchk31()", type_label=end_if];
1515 [label="253_ function releaActiveBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1515-function_definition-254-257", method="releaActiveBonus()", type_label=function_definition];
1517 [label="253_ onlyOwner\n1517-expression_statement-254-254", method="releaActiveBonus()", type_label=expression_statement];
1521 [label="254_ require(msg.sender == owner, \"only owner can use this method\");\n1521-expression_statement-255-255", method="releaActiveBonus()", type_label=expression_statement];
1533 [label="255_ msg.sender.transfer(address(this).balance);\n1533-expression_statement-256-256", method="releaActiveBonus()", type_label=expression_statement];
1546 [label="257_ bool public payedOut_unchk45 = false;\n1546-new_variable-258-258", method="", type_label=new_variable];
1553 [label="258_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n1553-function_definition-259-262", method="withdrawLeftOver_unchk45()", type_label=function_definition];
1557 [label="259_ require(payedOut_unchk45);\n1557-expression_statement-260-260", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1562 [label="260_ msg.sender.send(address(this).balance);\n1562-expression_statement-261-261", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1575 [label="262_ function releaTeamAddBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1575-function_definition-263-266", method="releaTeamAddBonus()", type_label=function_definition];
1577 [label="262_ onlyOwner\n1577-expression_statement-263-263", method="releaTeamAddBonus()", type_label=expression_statement];
1581 [label="263_ require(msg.sender == owner, \"only owner can use this method\");\n1581-expression_statement-264-264", method="releaTeamAddBonus()", type_label=expression_statement];
1593 [label="264_ msg.sender.transfer(address(this).balance);\n1593-expression_statement-265-265", method="releaTeamAddBonus()", type_label=expression_statement];
1606 [label="266_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n1606-function_definition-267-269", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
1614 [label="267_ callee.call.value(1 ether);\n1614-expression_statement-268-268", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
795;
1008;
1351;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 1649  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1649 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 1649  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
83 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
143 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
148 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
218 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
325 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
347 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
402 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
431 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 2055  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
452 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
499 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
569 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
633 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
711 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
751 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
796 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
827 -> 831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
831 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 2455  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
852 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
954 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 1003  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2612 -> 1010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 2612  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1010 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 1028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1041 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1062 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 1086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1086 -> 1098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 1145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1182 -> 1188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1188 -> 1200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1213 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1262 -> 1269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1269 -> 1274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1279 -> 1283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1289 -> 1296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 1319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 1336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1336 -> 1341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1352 -> 1358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1358 -> 1370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1390 -> 1394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1394 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1412 -> 1418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1418 -> 1430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1443 -> 1451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 1465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1490 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1494 -> 1499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1499 -> 3118  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1515 -> 1521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1521 -> 1533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1553 -> 1557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1557 -> 1562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1575 -> 1581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1581 -> 1593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1606 -> 1614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 2404  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1008 -> 2612  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1351 -> 2960  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
