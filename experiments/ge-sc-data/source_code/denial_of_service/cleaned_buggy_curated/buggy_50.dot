digraph  {
13 [label="3_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n13-function_definition-4-5", method="bug_unchk3(address payable addr)", type_label=function_definition];
21 [label="4_ addr.send (42 ether);\n21-expression_statement-5-5", method="bug_unchk3(address payable addr)", type_label=expression_statement];
29 [label="5_ address payable private manager;\n29-new_variable-6-6", method="", type_label=new_variable];
34 [label="6_ bool public payedOut_unchk9 = false;\n34-new_variable-7-7", method="", type_label=new_variable];
41 [label="7_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n41-function_definition-8-11", method="withdrawLeftOver_unchk9()", type_label=function_definition];
45 [label="8_ require(payedOut_unchk9);\n45-expression_statement-9-9", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
50 [label="9_ msg.sender.send(address(this).balance);\n50-expression_statement-10-10", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
63 [label="11_ bool private contractactive;\n63-new_variable-12-12", method="", type_label=new_variable];
68 [label="12_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n68-function_definition-13-15", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
76 [label="13_ callee.call.value(1 ether);\n76-expression_statement-14-14", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
86 [label="15_ uint private hashfee;\n86-new_variable-16-16", method="", type_label=new_variable];
91 [label="16_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n91-function_definition-17-21", method="bug_unchk19()", type_label=function_definition];
95 [label="17_ address payable addr_unchk19;\n95-new_variable-18-18", method="bug_unchk19()", type_label=new_variable];
100 [label="18_ if_!addr_unchk19.send (10 ether) || 1==1\n100-if-19-20", method="bug_unchk19()", type_label=if];
1283 [label="18_ end_if", method="bug_unchk19()", type_label=end_if];
116 [label="21_ uint private changehashownerfee;\n116-new_variable-22-22", method="", type_label=new_variable];
121 [label="22_ struct HashRegistration \n    {\n        address owner;\n        uint registrationtime;\n    }\n121-expression_statement-23-27", method="HashRegistration()", type_label=expression_statement];
131 [label="27_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n131-function_definition-28-30", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
139 [label="28_ callee.send(5 ether);\n139-expression_statement-29-29", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
147 [label="30_ mapping(bytes32 => HashRegistration[]) HashList;\n147-new_variable-31-31", method="", type_label=new_variable];
155 [label="31_ bool public payedOut_unchk20 = false;\n155-new_variable-32-32", method="", type_label=new_variable];
162 [label="32_ address payable public winner_unchk20;\n162-new_variable-33-33", method="", type_label=new_variable];
167 [label="33_ uint public winAmount_unchk20;\n167-new_variable-34-34", method="", type_label=new_variable];
172 [label="34_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n172-function_definition-35-39", method="sendToWinner_unchk20()", type_label=function_definition];
176 [label="35_ require(!payedOut_unchk20);\n176-expression_statement-36-36", method="sendToWinner_unchk20()", type_label=expression_statement];
182 [label="36_ winner_unchk20.send(winAmount_unchk20);\n182-expression_statement-37-37", method="sendToWinner_unchk20()", type_label=expression_statement];
189 [label="37_ payedOut_unchk20 = true;\n189-expression_statement-38-38", method="sendToWinner_unchk20()", type_label=expression_statement];
194 [label="39_ uint private HashListLength;\n194-new_variable-40-40", method="", type_label=new_variable];
199 [label="40_ bool public payedOut_unchk45 = false;\n199-new_variable-41-41", method="", type_label=new_variable];
206 [label="41_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n206-function_definition-42-45", method="withdrawLeftOver_unchk45()", type_label=function_definition];
210 [label="42_ require(payedOut_unchk45);\n210-expression_statement-43-43", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
215 [label="43_ msg.sender.send(address(this).balance);\n215-expression_statement-44-44", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
242 [label="46_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n242-function_definition-47-49", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
250 [label="47_ callee.call.value(1 ether);\n250-expression_statement-48-48", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
280 [label="52_ manager = msg.sender;\n280-expression_statement-53-53", method="", type_label=expression_statement];
286 [label="53_ contractactive = true;\n286-expression_statement-54-54", method="", type_label=expression_statement];
291 [label="54_ hashfee = 5000000000000000;\n291-expression_statement-55-55", method="", type_label=expression_statement];
295 [label="55_ changehashownerfee = 25000000000000000;\n295-expression_statement-56-56", method="", type_label=expression_statement];
299 [label="56_ HashListLength = 0;\n299-expression_statement-57-57", method="", type_label=expression_statement];
303 [label="58_ bool public payedOut_unchk32 = false;\n303-new_variable-59-59", method="", type_label=new_variable];
310 [label="59_ address payable public winner_unchk32;\n310-new_variable-60-60", method="", type_label=new_variable];
315 [label="60_ uint public winAmount_unchk32;\n315-new_variable-61-61", method="", type_label=new_variable];
320 [label="61_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n320-function_definition-62-66", method="sendToWinner_unchk32()", type_label=function_definition];
324 [label="62_ require(!payedOut_unchk32);\n324-expression_statement-63-63", method="sendToWinner_unchk32()", type_label=expression_statement];
330 [label="63_ winner_unchk32.send(winAmount_unchk32);\n330-expression_statement-64-64", method="sendToWinner_unchk32()", type_label=expression_statement];
337 [label="64_ payedOut_unchk32 = true;\n337-expression_statement-65-65", method="sendToWinner_unchk32()", type_label=expression_statement];
342 [label="66_ modifier onlyManager()\n    {\n        require(msg.sender == manager);\n        _;\n    }\n342-expression_statement-67-71", method="", type_label=expression_statement];
345 [label="68_ require(msg.sender == manager);\n345-expression_statement-69-69", method="", type_label=expression_statement];
354 [label="69_ _;\n354-expression_statement-70-70", method="", type_label=expression_statement];
356 [label="71_ function gethashfee() external view returns(uint)\n    {\n        return hashfee;\n    }\n356-function_definition-72-75", method="gethashfee()", type_label=function_definition];
365 [label="73_ return hashfee;\n365-return-74-74", method="gethashfee()", type_label=return];
367 [label="75_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n367-function_definition-76-78", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
375 [label="76_ callee.send(5 ether);\n375-expression_statement-77-77", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
383 [label="78_ function sethashfee(uint newfee) external onlyManager\n    {\n        require(newfee >= 0);\n        hashfee = newfee;\n    }\n383-function_definition-79-83", method="sethashfee(uint newfee)", type_label=function_definition];
390 [label="78_ onlyManager\n390-expression_statement-79-79", method="sethashfee(uint newfee)", type_label=expression_statement];
393 [label="80_ require(newfee >= 0);\n393-expression_statement-81-81", method="sethashfee(uint newfee)", type_label=expression_statement];
400 [label="81_ hashfee = newfee;\n400-expression_statement-82-82", method="sethashfee(uint newfee)", type_label=expression_statement];
404 [label="83_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n404-function_definition-84-88", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
420 [label="84_ uint64 subpot_unchk46 = 3 ether;\n420-new_variable-85-85", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
427 [label="85_ winner_unchk46.send(subpot_unchk46);\n427-expression_statement-86-86", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
434 [label="86_ subpot_unchk46= 0;\n434-expression_statement-87-87", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
438 [label="88_ function getchangehashownerfee() external view returns(uint)\n    {\n        return changehashownerfee;\n    }\n438-function_definition-89-92", method="getchangehashownerfee()", type_label=function_definition];
447 [label="90_ return changehashownerfee;\n447-return-91-91", method="getchangehashownerfee()", type_label=return];
449 [label="92_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n449-function_definition-93-101", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
453 [label="93_ address payable addr_unchk4;\n453-new_variable-94-94", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
458 [label="94_ if\n458-if-95-100", method="UncheckedExternalCall_unchk4()", type_label=if];
1641 [label="94_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
469 [label="101_ function setchangehashownerfee(uint newfee) external onlyManager\n    {\n        require(newfee >= 0);\n        changehashownerfee = newfee;\n    }\n469-function_definition-102-106", method="setchangehashownerfee(uint newfee)", type_label=function_definition];
476 [label="101_ onlyManager\n476-expression_statement-102-102", method="setchangehashownerfee(uint newfee)", type_label=expression_statement];
479 [label="103_ require(newfee >= 0);\n479-expression_statement-104-104", method="setchangehashownerfee(uint newfee)", type_label=expression_statement];
486 [label="104_ changehashownerfee = newfee;\n486-expression_statement-105-105", method="setchangehashownerfee(uint newfee)", type_label=expression_statement];
490 [label="106_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n490-function_definition-107-111", method="bug_unchk7()", type_label=function_definition];
494 [label="107_ address payable addr_unchk7;\n494-new_variable-108-108", method="bug_unchk7()", type_label=new_variable];
499 [label="108_ if_!addr_unchk7.send (10 ether) || 1==1\n499-if-109-110", method="bug_unchk7()", type_label=if];
1682 [label="108_ end_if", method="bug_unchk7()", type_label=end_if];
515 [label="111_ function getcontractactive() external view returns (bool)\n    {\n        return contractactive;\n    }\n515-function_definition-112-115", method="getcontractactive()", type_label=function_definition];
524 [label="113_ return contractactive;\n524-return-114-114", method="getcontractactive()", type_label=return];
526 [label="115_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n526-function_definition-116-118", method="my_func_unchk23(address payable dst)", type_label=function_definition];
535 [label="116_ dst.send(msg.value);\n535-expression_statement-117-117", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
544 [label="118_ function setcontractactive(bool contactive) external onlyManager\n    {\n        contractactive = contactive;\n    }\n544-function_definition-119-122", method="setcontractactive(bool contactive)", type_label=function_definition];
551 [label="118_ onlyManager\n551-expression_statement-119-119", method="setcontractactive(bool contactive)", type_label=expression_statement];
554 [label="120_ contractactive = contactive;\n554-expression_statement-121-121", method="setcontractactive(bool contactive)", type_label=expression_statement];
558 [label="122_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n558-function_definition-123-125", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
566 [label="123_ callee.send(5 ether);\n566-expression_statement-124-124", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
574 [label="125_ function getmanager() external view returns(address)\n    {\n        return manager;\n    }\n574-function_definition-126-129", method="getmanager()", type_label=function_definition];
583 [label="127_ return manager;\n583-return-128-128", method="getmanager()", type_label=return];
585 [label="129_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n585-function_definition-130-137", method="bug_unchk30()", type_label=function_definition];
589 [label="130_ uint receivers_unchk30;\n589-new_variable-131-131", method="bug_unchk30()", type_label=new_variable];
594 [label="131_ address payable addr_unchk30;\n594-new_variable-132-132", method="bug_unchk30()", type_label=new_variable];
599 [label="132_ if\n599-if-133-136", method="bug_unchk30()", type_label=if];
1782 [label="132_ end_if", method="bug_unchk30()", type_label=end_if];
609 [label="133_ receivers_unchk30 +=1;\n609-expression_statement-134-134", method="bug_unchk30()", type_label=expression_statement];
616 [label="137_ function setmanager(address payable newmngr) external onlyManager\n    {\n        require(newmngr.balance > 0);\n        manager = newmngr;\n    }\n616-function_definition-138-142", method="setmanager(address payable newmngr)", type_label=function_definition];
623 [label="137_ onlyManager\n623-expression_statement-138-138", method="setmanager(address payable newmngr)", type_label=expression_statement];
626 [label="139_ require(newmngr.balance > 0);\n626-expression_statement-140-140", method="setmanager(address payable newmngr)", type_label=expression_statement];
635 [label="140_ manager = newmngr;\n635-expression_statement-141-141", method="setmanager(address payable newmngr)", type_label=expression_statement];
639 [label="142_ bool public payedOut_unchk8 = false;\n639-new_variable-143-143", method="", type_label=new_variable];
646 [label="143_ address payable public winner_unchk8;\n646-new_variable-144-144", method="", type_label=new_variable];
651 [label="144_ uint public winAmount_unchk8;\n651-new_variable-145-145", method="", type_label=new_variable];
656 [label="145_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n656-function_definition-146-150", method="sendToWinner_unchk8()", type_label=function_definition];
660 [label="146_ require(!payedOut_unchk8);\n660-expression_statement-147-147", method="sendToWinner_unchk8()", type_label=expression_statement];
666 [label="147_ winner_unchk8.send(winAmount_unchk8);\n666-expression_statement-148-148", method="sendToWinner_unchk8()", type_label=expression_statement];
673 [label="148_ payedOut_unchk8 = true;\n673-expression_statement-149-149", method="sendToWinner_unchk8()", type_label=expression_statement];
678 [label="150_ function getcontractbalance() public view returns(uint)\n    {\n        return address(this).balance;\n    }\n678-function_definition-151-154", method="getcontractbalance()", type_label=function_definition];
687 [label="152_ return address(this).balance;\n687-return-153-153", method="getcontractbalance()", type_label=return];
693 [label="154_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n693-function_definition-155-156", method="bug_unchk39(address payable addr)", type_label=function_definition];
701 [label="155_ addr.send (4 ether);\n701-expression_statement-156-156", method="bug_unchk39(address payable addr)", type_label=expression_statement];
709 [label="156_ function transfercontractbalance() external onlyManager\n    {\n        uint cb = address(this).balance;\n        require(cb > 0);\n        manager.transfer(cb);\n    }\n709-function_definition-157-162", method="transfercontractbalance()", type_label=function_definition];
712 [label="156_ onlyManager\n712-expression_statement-157-157", method="transfercontractbalance()", type_label=expression_statement];
715 [label="158_ uint cb = address(this).balance;\n715-new_variable-159-159", method="transfercontractbalance()", type_label=new_variable];
725 [label="159_ require(cb > 0);\n725-expression_statement-160-160", method="transfercontractbalance()", type_label=expression_statement];
732 [label="160_ manager.transfer(cb);\n732-expression_statement-161-161", method="transfercontractbalance()", type_label=expression_statement];
739 [label="162_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n739-function_definition-163-165", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
748 [label="163_ dst.call.value(msg.value)(\"\");\n748-expression_statement-164-164", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
763 [label="165_ function getHashOwnersCount(bytes32 hash) public view returns(uint)\n    {\n        return HashList[hash].length;\n    }\n763-function_definition-166-169", method="getHashOwnersCount(bytes32 hash)", type_label=function_definition];
776 [label="167_ return HashList[hash].length;\n776-return-168-168", method="getHashOwnersCount(bytes32 hash)", type_label=return];
782 [label="169_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n782-function_definition-170-172", method="my_func_unchk35(address payable dst)", type_label=function_definition];
791 [label="170_ dst.send(msg.value);\n791-expression_statement-171-171", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
800 [label="172_ function getNumberofHashesRegistered() external view returns(uint)\n    {\n        return HashListLength;\n    }\n800-function_definition-173-176", method="getNumberofHashesRegistered()", type_label=function_definition];
809 [label="174_ return HashListLength;\n809-return-175-175", method="getNumberofHashesRegistered()", type_label=return];
811 [label="176_ bool public payedOut_unchk44 = false;\n811-new_variable-177-177", method="", type_label=new_variable];
818 [label="177_ address payable public winner_unchk44;\n818-new_variable-178-178", method="", type_label=new_variable];
823 [label="178_ uint public winAmount_unchk44;\n823-new_variable-179-179", method="", type_label=new_variable];
828 [label="179_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n828-function_definition-180-184", method="sendToWinner_unchk44()", type_label=function_definition];
832 [label="180_ require(!payedOut_unchk44);\n832-expression_statement-181-181", method="sendToWinner_unchk44()", type_label=expression_statement];
838 [label="181_ winner_unchk44.send(winAmount_unchk44);\n838-expression_statement-182-182", method="sendToWinner_unchk44()", type_label=expression_statement];
845 [label="182_ payedOut_unchk44 = true;\n845-expression_statement-183-183", method="sendToWinner_unchk44()", type_label=expression_statement];
850 [label="184_ function getHashDetails(bytes32 hash,uint indx) external view returns (address,uint)\n    {\n        uint owncount = getHashOwnersCount(hash);\n        require(owncount > 0);\n        require(indx < owncount);\n        return (HashList[hash][indx].owner,HashList[hash][indx].registrationtime);\n    }\n850-function_definition-185-191", method="getHashDetails(bytes32 hash,uint indx)", type_label=function_definition];
870 [label="186_ uint owncount = getHashOwnersCount(hash);\n870-new_variable-187-187", method="getHashDetails(bytes32 hash,uint indx)", type_label=new_variable];
879 [label="187_ require(owncount > 0);\n879-expression_statement-188-188", method="getHashDetails(bytes32 hash,uint indx)", type_label=expression_statement];
886 [label="188_ require(indx < owncount);\n886-expression_statement-189-189", method="getHashDetails(bytes32 hash,uint indx)", type_label=expression_statement];
893 [label="189_ return (HashList[hash][indx].owner,HashList[hash][indx].registrationtime);\n893-return-190-190", method="getHashDetails(bytes32 hash,uint indx)", type_label=return];
909 [label="191_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n909-function_definition-192-200", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
913 [label="192_ address payable addr_unchk40;\n913-new_variable-193-193", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
918 [label="193_ if\n918-if-194-199", method="UncheckedExternalCall_unchk40()", type_label=if];
2101 [label="193_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
929 [label="200_ function registerHash(bytes32 hash) external payable\n    {\n        require(contractactive == true);\n        require(getHashOwnersCount(hash) == 0);\n        require(msg.value == hashfee);\n        HashRegistration memory thisregistration;\n        thisregistration.owner = msg.sender;\n        thisregistration.registrationtime = now;\n        HashList[hash].push(thisregistration);\n        HashListLength++;\n        emit RegisterHashEvent(thisregistration.owner, hash, thisregistration.registrationtime);\n    }\n929-function_definition-201-212", method="registerHash(bytes32 hash)", type_label=function_definition];
938 [label="202_ require(contractactive == true);\n938-expression_statement-203-203", method="registerHash(bytes32 hash)", type_label=expression_statement];
946 [label="203_ require(getHashOwnersCount(hash) == 0);\n946-expression_statement-204-204", method="registerHash(bytes32 hash)", type_label=expression_statement];
956 [label="204_ require(msg.value == hashfee);\n956-expression_statement-205-205", method="registerHash(bytes32 hash)", type_label=expression_statement];
965 [label="205_ HashRegistration memory thisregistration;\n965-new_variable-206-206", method="registerHash(bytes32 hash)", type_label=new_variable];
971 [label="206_ thisregistration.owner = msg.sender;\n971-expression_statement-207-207", method="registerHash(bytes32 hash)", type_label=expression_statement];
979 [label="207_ thisregistration.registrationtime = now;\n979-expression_statement-208-208", method="registerHash(bytes32 hash)", type_label=expression_statement];
985 [label="208_ HashList[hash].push(thisregistration);\n985-expression_statement-209-209", method="registerHash(bytes32 hash)", type_label=expression_statement];
994 [label="209_ HashListLength++;\n994-expression_statement-210-210", method="registerHash(bytes32 hash)", type_label=expression_statement];
995 [label="209_ HashListLength++\n995-expression_statement-210-210", method="registerHash(bytes32 hash)", type_label=expression_statement];
1009 [label="212_ bool public payedOut_unchk33 = false;\n1009-new_variable-213-213", method="", type_label=new_variable];
1016 [label="213_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1016-function_definition-214-217", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1020 [label="214_ require(payedOut_unchk33);\n1020-expression_statement-215-215", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1025 [label="215_ msg.sender.send(address(this).balance);\n1025-expression_statement-216-216", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1038 [label="217_ function changeHashOwnership(bytes32 hash, address newowner) external payable\n    {\n        require(contractactive == true);\n        uint owncount = getHashOwnersCount(hash);\n        require(owncount > 0);\n        require(msg.sender == HashList[hash][owncount - 1].owner); \n        require(msg.value == changehashownerfee);\n        HashRegistration memory thisregistration;\n        thisregistration.owner = newowner;\n        thisregistration.registrationtime = now;\n        HashList[hash].push(thisregistration);\n        emit ChangeHashOwnershipEvent(msg.sender, thisregistration.owner, hash, thisregistration.registrationtime);\n    }\n1038-function_definition-218-230", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=function_definition];
1051 [label="219_ require(contractactive == true);\n1051-expression_statement-220-220", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
1059 [label="220_ uint owncount = getHashOwnersCount(hash);\n1059-new_variable-221-221", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=new_variable];
1068 [label="221_ require(owncount > 0);\n1068-expression_statement-222-222", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
1075 [label="222_ require(msg.sender == HashList[hash][owncount - 1].owner);\n1075-expression_statement-223-223", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
1092 [label="223_ require(msg.value == changehashownerfee);\n1092-expression_statement-224-224", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
1101 [label="224_ HashRegistration memory thisregistration;\n1101-new_variable-225-225", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=new_variable];
1107 [label="225_ thisregistration.owner = newowner;\n1107-expression_statement-226-226", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
1113 [label="226_ thisregistration.registrationtime = now;\n1113-expression_statement-227-227", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
1119 [label="227_ HashList[hash].push(thisregistration);\n1119-expression_statement-228-228", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
1144 [label="230_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1144-function_definition-231-232", method="bug_unchk27(address payable addr)", type_label=function_definition];
1152 [label="231_ addr.send (42 ether);\n1152-expression_statement-232-232", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1163 [label="235_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n1163-function_definition-236-240", method="bug_unchk31()", type_label=function_definition];
1167 [label="236_ address payable addr_unchk31;\n1167-new_variable-237-237", method="bug_unchk31()", type_label=new_variable];
1172 [label="237_ if_!addr_unchk31.send (10 ether) || 1==1\n1172-if-238-239", method="bug_unchk31()", type_label=if];
2355 [label="237_ end_if", method="bug_unchk31()", type_label=end_if];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
468;
614;
928;
13 -> 21  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
41 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 76  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
91 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 1283  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
116 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
147 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
176 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
367 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
438 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
449 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
499 -> 1682  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
515 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
526 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
585 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 609  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1782 -> 616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 1782  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
616 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
656 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
687 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
693 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
782 -> 791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
800 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
811 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
870 -> 879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
879 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
909 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
913 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
938 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
946 -> 956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
971 -> 979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1020 -> 1025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1051 -> 1059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1059 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1092 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1113 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 1172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1172 -> 2355  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
468 -> 1641  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
614 -> 1782  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
928 -> 2101  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
