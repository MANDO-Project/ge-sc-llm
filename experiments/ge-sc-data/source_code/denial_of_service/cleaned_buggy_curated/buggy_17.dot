digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
1825 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ require(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0);\n    uint256 c = a / b;\n    return c;\n  }\n56-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ require(b > 0);\n73-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
80 [label="12_ uint256 c = a / b;\n80-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
88 [label="13_ return c;\n88-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
90 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n90-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
107 [label="16_ require(b <= a);\n107-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
114 [label="17_ uint256 c = a - b;\n114-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
122 [label="18_ return c;\n122-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
124 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a && c >= b);\n    return c;\n  }\n124-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
141 [label="21_ uint256 c = a + b;\n141-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
149 [label="22_ require(c >= a && c >= b);\n149-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="23_ return c;\n160-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
162 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n162-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
179 [label="26_ require(b != 0);\n179-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
186 [label="27_ return a % b;\n186-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
190 [label="29_ function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n190-function_definition-30-32", method="max256(uint256 a,uint256 b)", type_label=function_definition];
207 [label="30_ return a >= b ? a : b;\n207-return-31-31", method="max256(uint256 a,uint256 b)", type_label=return];
214 [label="32_ function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n214-function_definition-33-35", method="min256(uint256 a,uint256 b)", type_label=function_definition];
231 [label="33_ return a < b ? a : b;\n231-return-34-34", method="min256(uint256 a,uint256 b)", type_label=return];
241 [label="37_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n241-function_definition-38-40", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
249 [label="38_ callee.send(5 ether);\n249-expression_statement-39-39", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
257 [label="40_ address public owner;\n257-new_variable-41-41", method="", type_label=new_variable];
264 [label="42_ owner = msg.sender;\n264-expression_statement-43-43", method="", type_label=expression_statement];
270 [label="44_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n270-function_definition-45-49", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
286 [label="45_ uint64 subpot_unchk46 = 3 ether;\n286-new_variable-46-46", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
293 [label="46_ winner_unchk46.send(subpot_unchk46);\n293-expression_statement-47-47", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
300 [label="47_ subpot_unchk46= 0;\n300-expression_statement-48-48", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
304 [label="49_ modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n304-expression_statement-50-53", method="", type_label=expression_statement];
307 [label="50_ require(msg.sender == owner);\n307-expression_statement-51-51", method="", type_label=expression_statement];
316 [label="51_ _;\n316-expression_statement-52-52", method="", type_label=expression_statement];
318 [label="53_ function transferOwnership(address newOwner) onlyOwner public {\n    owner = newOwner;\n  }\n318-function_definition-54-56", method="transferOwnership(address newOwner)", type_label=function_definition];
324 [label="53_ onlyOwner\n324-expression_statement-54-54", method="transferOwnership(address newOwner)", type_label=expression_statement];
328 [label="54_ owner = newOwner;\n328-expression_statement-55-55", method="transferOwnership(address newOwner)", type_label=expression_statement];
332 [label="56_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n332-function_definition-57-65", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
336 [label="57_ address payable addr_unchk4;\n336-new_variable-58-58", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
341 [label="58_ if\n341-if-59-64", method="UncheckedExternalCall_unchk4()", type_label=if];
2136 [label="58_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
355 [label="67_ function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n355-function_definition-68-68", method="receiveApproval(address _from,uint256 _value,address _token,bytes calldata _extraData)", type_label=function_definition];
382 [label="71_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n382-function_definition-72-76", method="bug_unchk43()", type_label=function_definition];
386 [label="72_ address payable addr_unchk43;\n386-new_variable-73-73", method="bug_unchk43()", type_label=new_variable];
391 [label="73_ if_!addr_unchk43.send (10 ether) || 1==1\n391-if-74-75", method="bug_unchk43()", type_label=if];
2186 [label="73_ end_if", method="bug_unchk43()", type_label=end_if];
407 [label="76_ string public name;\n407-new_variable-77-77", method="", type_label=new_variable];
412 [label="77_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n412-function_definition-78-80", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
421 [label="78_ dst.call.value(msg.value)(\"\");\n421-expression_statement-79-79", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
436 [label="80_ string public symbol;\n436-new_variable-81-81", method="", type_label=new_variable];
441 [label="81_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n441-function_definition-82-84", method="withdrawBal_unchk17()", type_label=function_definition];
445 [label="82_ uint64 Balances_unchk17 = 0;\n445-new_variable-83-83", method="withdrawBal_unchk17()", type_label=new_variable];
451 [label="83_ msg.sender.send(Balances_unchk17);\n451-expression_statement-84-84", method="withdrawBal_unchk17()", type_label=expression_statement];
460 [label="84_ uint8 public decimals;\n460-new_variable-85-85", method="", type_label=new_variable];
465 [label="85_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n465-function_definition-86-88", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
473 [label="86_ callee.call.value(1 ether);\n473-expression_statement-87-87", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
483 [label="88_ uint256 public totalSupply;\n483-new_variable-89-89", method="", type_label=new_variable];
488 [label="89_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n488-function_definition-90-91", method="bug_unchk3(address payable addr)", type_label=function_definition];
496 [label="90_ addr.send (42 ether);\n496-expression_statement-91-91", method="bug_unchk3(address payable addr)", type_label=expression_statement];
504 [label="91_ mapping (address => uint256) public balanceOf;\n504-new_variable-92-92", method="", type_label=new_variable];
511 [label="92_ bool public payedOut_unchk9 = false;\n511-new_variable-93-93", method="", type_label=new_variable];
518 [label="93_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n518-function_definition-94-97", method="withdrawLeftOver_unchk9()", type_label=function_definition];
522 [label="94_ require(payedOut_unchk9);\n522-expression_statement-95-95", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
527 [label="95_ msg.sender.send(address(this).balance);\n527-expression_statement-96-96", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
540 [label="97_ mapping (address => mapping (address => uint256)) public allowance;\n540-new_variable-98-98", method="", type_label=new_variable];
549 [label="98_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n549-function_definition-99-103", method="bug_unchk31()", type_label=function_definition];
553 [label="99_ address payable addr_unchk31;\n553-new_variable-100-100", method="bug_unchk31()", type_label=new_variable];
558 [label="100_ if_!addr_unchk31.send (10 ether) || 1==1\n558-if-101-102", method="bug_unchk31()", type_label=if];
2353 [label="100_ end_if", method="bug_unchk31()", type_label=end_if];
588 [label="104_ bool public payedOut_unchk45 = false;\n588-new_variable-105-105", method="", type_label=new_variable];
595 [label="105_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n595-function_definition-106-109", method="withdrawLeftOver_unchk45()", type_label=function_definition];
599 [label="106_ require(payedOut_unchk45);\n599-expression_statement-107-107", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
604 [label="107_ msg.sender.send(address(this).balance);\n604-expression_statement-108-108", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
631 [label="110_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n631-function_definition-111-113", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
639 [label="111_ callee.call.value(1 ether);\n639-expression_statement-112-112", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
673 [label="115_ decimals = dec;\n673-expression_statement-116-116", method="", type_label=expression_statement];
677 [label="116_ name = tokenName;\n677-expression_statement-117-117", method="", type_label=expression_statement];
681 [label="117_ symbol = tokenSymbol;\n681-expression_statement-118-118", method="", type_label=expression_statement];
685 [label="119_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n685-function_definition-120-124", method="bug_unchk7()", type_label=function_definition];
689 [label="120_ address payable addr_unchk7;\n689-new_variable-121-121", method="bug_unchk7()", type_label=new_variable];
694 [label="121_ if_!addr_unchk7.send (10 ether) || 1==1\n694-if-122-123", method="bug_unchk7()", type_label=if];
2489 [label="121_ end_if", method="bug_unchk7()", type_label=end_if];
710 [label="124_ function _transfer(address _from, address _to, uint _value) internal {\n    require(_to != address(0x0));\n    balanceOf[_from] = balanceOf[_from].sub(_value);\n    balanceOf[_to] = balanceOf[_to].add(_value);\n    emit Transfer(_from, _to, _value);\n  }\n710-function_definition-125-130", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
726 [label="125_ require(_to != address(0x0));\n726-expression_statement-126-126", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
735 [label="126_ balanceOf[_from] = balanceOf[_from].sub(_value);\n735-expression_statement-127-127", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
748 [label="127_ balanceOf[_to] = balanceOf[_to].add(_value);\n748-expression_statement-128-128", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
769 [label="130_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n769-function_definition-131-133", method="my_func_unchk23(address payable dst)", type_label=function_definition];
778 [label="131_ dst.send(msg.value);\n778-expression_statement-132-132", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
787 [label="133_ function transfer(address _to, uint256 _value) public returns (bool success) {\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n787-function_definition-134-137", method="transfer(address _to,uint256 _value)", type_label=function_definition];
804 [label="134_ _transfer(msg.sender, _to, _value);\n804-expression_statement-135-135", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
815 [label="135_ return true;\n815-return-136-136", method="transfer(address _to,uint256 _value)", type_label=return];
818 [label="137_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n818-function_definition-138-140", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
826 [label="138_ callee.send(5 ether);\n826-expression_statement-139-139", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
834 [label="140_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n		_transfer(_from, _to, _value);\n		return true;\n  }\n834-function_definition-141-145", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
855 [label="141_ allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n855-expression_statement-142-142", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
876 [label="142_ _transfer(_from, _to, _value);\n876-expression_statement-143-143", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
885 [label="143_ return true;\n885-return-144-144", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
888 [label="145_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n888-function_definition-146-153", method="bug_unchk30()", type_label=function_definition];
892 [label="146_ uint receivers_unchk30;\n892-new_variable-147-147", method="bug_unchk30()", type_label=new_variable];
897 [label="147_ address payable addr_unchk30;\n897-new_variable-148-148", method="bug_unchk30()", type_label=new_variable];
902 [label="148_ if\n902-if-149-152", method="bug_unchk30()", type_label=if];
2697 [label="148_ end_if", method="bug_unchk30()", type_label=end_if];
912 [label="149_ receivers_unchk30 +=1;\n912-expression_statement-150-150", method="bug_unchk30()", type_label=expression_statement];
919 [label="153_ function approve(address _spender, uint256 _value) public returns (bool success) {\n    allowance[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n919-function_definition-154-158", method="approve(address _spender,uint256 _value)", type_label=function_definition];
936 [label="154_ allowance[msg.sender][_spender] = _value;\n936-expression_statement-155-155", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
956 [label="156_ return true;\n956-return-157-157", method="approve(address _spender,uint256 _value)", type_label=return];
959 [label="158_ bool public payedOut_unchk8 = false;\n959-new_variable-159-159", method="", type_label=new_variable];
966 [label="159_ address payable public winner_unchk8;\n966-new_variable-160-160", method="", type_label=new_variable];
971 [label="160_ uint public winAmount_unchk8;\n971-new_variable-161-161", method="", type_label=new_variable];
976 [label="161_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n976-function_definition-162-166", method="sendToWinner_unchk8()", type_label=function_definition];
980 [label="162_ require(!payedOut_unchk8);\n980-expression_statement-163-163", method="sendToWinner_unchk8()", type_label=expression_statement];
986 [label="163_ winner_unchk8.send(winAmount_unchk8);\n986-expression_statement-164-164", method="sendToWinner_unchk8()", type_label=expression_statement];
993 [label="164_ payedOut_unchk8 = true;\n993-expression_statement-165-165", method="sendToWinner_unchk8()", type_label=expression_statement];
998 [label="166_ function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n    tokenRecipient spender = tokenRecipient(_spender);\n    if (approve(_spender, _value)) {\n      spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n      return true;\n    }\n  }\n998-function_definition-167-173", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=function_definition];
1019 [label="167_ tokenRecipient spender = tokenRecipient(_spender);\n1019-new_variable-168-168", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=new_variable];
1029 [label="168_ if\n1029-if-169-172", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=if];
2824 [label="168_ end_if", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=end_if];
1037 [label="169_ spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n1037-expression_statement-170-170", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=expression_statement];
1054 [label="170_ return true;\n1054-return-171-171", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=return];
1057 [label="173_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1057-function_definition-174-175", method="bug_unchk39(address payable addr)", type_label=function_definition];
1065 [label="174_ addr.send (4 ether);\n1065-expression_statement-175-175", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1082 [label="177_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n1082-function_definition-178-180", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
1090 [label="178_ callee.call.value(1 ether);\n1090-expression_statement-179-179", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
1100 [label="180_ string _tokenName = \"AZ FundChain\";\n1100-new_variable-181-181", method="", type_label=new_variable];
1106 [label="180_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n1106-function_definition-181-185", method="bug_unchk19()", type_label=function_definition];
1110 [label="181_ address payable addr_unchk19;\n1110-new_variable-182-182", method="bug_unchk19()", type_label=new_variable];
1115 [label="182_ if_!addr_unchk19.send (10 ether) || 1==1\n1115-if-183-184", method="bug_unchk19()", type_label=if];
2910 [label="182_ end_if", method="bug_unchk19()", type_label=end_if];
1131 [label="185_ string _tokenSymbol = \"AZT\";\n1131-new_variable-186-186", method="", type_label=new_variable];
1137 [label="186_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n1137-function_definition-187-189", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
1145 [label="187_ callee.send(5 ether);\n1145-expression_statement-188-188", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
1153 [label="189_ uint8 _decimals = 18;\n1153-new_variable-190-190", method="", type_label=new_variable];
1158 [label="190_ bool public payedOut_unchk20 = false;\n1158-new_variable-191-191", method="", type_label=new_variable];
1165 [label="191_ address payable public winner_unchk20;\n1165-new_variable-192-192", method="", type_label=new_variable];
1170 [label="192_ uint public winAmount_unchk20;\n1170-new_variable-193-193", method="", type_label=new_variable];
1175 [label="193_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n1175-function_definition-194-198", method="sendToWinner_unchk20()", type_label=function_definition];
1179 [label="194_ require(!payedOut_unchk20);\n1179-expression_statement-195-195", method="sendToWinner_unchk20()", type_label=expression_statement];
1185 [label="195_ winner_unchk20.send(winAmount_unchk20);\n1185-expression_statement-196-196", method="sendToWinner_unchk20()", type_label=expression_statement];
1192 [label="196_ payedOut_unchk20 = true;\n1192-expression_statement-197-197", method="sendToWinner_unchk20()", type_label=expression_statement];
1197 [label="198_ address[] public frozenAddresses;\n1197-new_variable-199-199", method="", type_label=new_variable];
1203 [label="199_ bool public payedOut_unchk32 = false;\n1203-new_variable-200-200", method="", type_label=new_variable];
1210 [label="200_ address payable public winner_unchk32;\n1210-new_variable-201-201", method="", type_label=new_variable];
1215 [label="201_ uint public winAmount_unchk32;\n1215-new_variable-202-202", method="", type_label=new_variable];
1220 [label="202_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n1220-function_definition-203-207", method="sendToWinner_unchk32()", type_label=function_definition];
1224 [label="203_ require(!payedOut_unchk32);\n1224-expression_statement-204-204", method="sendToWinner_unchk32()", type_label=expression_statement];
1230 [label="204_ winner_unchk32.send(winAmount_unchk32);\n1230-expression_statement-205-205", method="sendToWinner_unchk32()", type_label=expression_statement];
1237 [label="205_ payedOut_unchk32 = true;\n1237-expression_statement-206-206", method="sendToWinner_unchk32()", type_label=expression_statement];
1242 [label="207_ bool public tokenFrozen;\n1242-new_variable-208-208", method="", type_label=new_variable];
1247 [label="208_ struct frozenWallet {\n    bool isFrozen;  \n    uint256 rewardedAmount;  \n    uint256 frozenAmount;  \n    uint256 frozenTime;  \n  }\n1247-expression_statement-209-214", method="frozenWallet()", type_label=expression_statement];
1265 [label="214_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n1265-function_definition-215-217", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
1273 [label="215_ callee.send(5 ether);\n1273-expression_statement-216-216", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
1281 [label="217_ mapping (address => frozenWallet) public frozenWallets;\n1281-new_variable-218-218", method="", type_label=new_variable];
1290 [label="218_ TokenERC20(_tokenName, _tokenSymbol, _decimals)\n1290-expression_statement-219-219", method="", type_label=expression_statement];
1299 [label="219_ frozenAddresses.push(address(0x9fd50776F133751E8Ae6abE1Be124638Bb917E05));\n1299-expression_statement-220-220", method="", type_label=expression_statement];
1308 [label="220_ frozenWallets[frozenAddresses[0]] = frozenWallet({\n      isFrozen: true,\n      rewardedAmount: 30000000 * 10 ** uint256(decimals),\n      frozenAmount: 0 * 10 ** uint256(decimals),\n      frozenTime: now + 1 * 1 hours  \n    });\n1308-expression_statement-221-226", method="", type_label=expression_statement];
1348 [label="226_ for(i < frozenAddresses.length;;i++)\n1348-for-227-230", method="", type_label=for];
3143 [label="226_ end_loop", method="", type_label=end_loop];
1361 [label="226_ i++\n1361-expression_statement-227-227", method="", type_label=expression_statement];
1364 [label="227_ balanceOf[frozenAddresses[i]] = frozenWallets[frozenAddresses[i]].rewardedAmount;\n1364-expression_statement-228-228", method="", type_label=expression_statement];
1378 [label="228_ totalSupply = totalSupply.add(frozenWallets[frozenAddresses[i]].rewardedAmount);\n1378-expression_statement-229-229", method="", type_label=expression_statement];
1393 [label="231_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1393-function_definition-232-234", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1402 [label="232_ dst.call.value(msg.value)(\"\");\n1402-expression_statement-233-233", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1417 [label="234_ function _transfer(address _from, address _to, uint _value) internal {\n    require(_to != address(0x0));\n    require(checkFrozenWallet(_from, _value));\n    balanceOf[_from] = balanceOf[_from].sub(_value);      \n    balanceOf[_to] = balanceOf[_to].add(_value);     \n    emit Transfer(_from, _to, _value);\n  }\n1417-function_definition-235-241", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
1433 [label="235_ require(_to != address(0x0));\n1433-expression_statement-236-236", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1442 [label="236_ require(checkFrozenWallet(_from, _value));\n1442-expression_statement-237-237", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1452 [label="237_ balanceOf[_from] = balanceOf[_from].sub(_value);\n1452-expression_statement-238-238", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1465 [label="238_ balanceOf[_to] = balanceOf[_to].add(_value);\n1465-expression_statement-239-239", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1486 [label="241_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1486-function_definition-242-244", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1495 [label="242_ dst.send(msg.value);\n1495-expression_statement-243-243", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1504 [label="244_ function checkFrozenWallet(address _from, uint _value) public view returns (bool) {\n    return(\n      _from==owner || \n      (!tokenFrozen && \n      (!frozenWallets[_from].isFrozen || \n       now>=frozenWallets[_from].frozenTime || \n       balanceOf[_from].sub(_value)>=frozenWallets[_from].frozenAmount))\n    );\n  }\n1504-function_definition-245-253", method="checkFrozenWallet(address _from,uint _value)", type_label=function_definition];
1521 [label="245_ return(\n      _from==owner || \n      (!tokenFrozen && \n      (!frozenWallets[_from].isFrozen || \n       now>=frozenWallets[_from].frozenTime || \n       balanceOf[_from].sub(_value)>=frozenWallets[_from].frozenAmount))\n    );\n1521-return-246-252", method="checkFrozenWallet(address _from,uint _value)", type_label=return];
1561 [label="253_ bool public payedOut_unchk44 = false;\n1561-new_variable-254-254", method="", type_label=new_variable];
1568 [label="254_ address payable public winner_unchk44;\n1568-new_variable-255-255", method="", type_label=new_variable];
1573 [label="255_ uint public winAmount_unchk44;\n1573-new_variable-256-256", method="", type_label=new_variable];
1578 [label="256_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1578-function_definition-257-261", method="sendToWinner_unchk44()", type_label=function_definition];
1582 [label="257_ require(!payedOut_unchk44);\n1582-expression_statement-258-258", method="sendToWinner_unchk44()", type_label=expression_statement];
1588 [label="258_ winner_unchk44.send(winAmount_unchk44);\n1588-expression_statement-259-259", method="sendToWinner_unchk44()", type_label=expression_statement];
1595 [label="259_ payedOut_unchk44 = true;\n1595-expression_statement-260-260", method="sendToWinner_unchk44()", type_label=expression_statement];
1600 [label="261_ function burn(uint256 _value) onlyOwner public returns (bool success) {\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);    \n    totalSupply = totalSupply.sub(_value);                       \n    emit Burn(msg.sender, _value);\n    return true;\n  }\n1600-function_definition-262-267", method="burn(uint256 _value)", type_label=function_definition];
1606 [label="261_ onlyOwner\n1606-expression_statement-262-262", method="burn(uint256 _value)", type_label=expression_statement];
1615 [label="262_ balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n1615-expression_statement-263-263", method="burn(uint256 _value)", type_label=expression_statement];
1632 [label="263_ totalSupply = totalSupply.sub(_value);\n1632-expression_statement-264-264", method="burn(uint256 _value)", type_label=expression_statement];
1649 [label="265_ return true;\n1649-return-266-266", method="burn(uint256 _value)", type_label=return];
1652 [label="267_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1652-function_definition-268-276", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1656 [label="268_ address payable addr_unchk40;\n1656-new_variable-269-269", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1661 [label="269_ if\n1661-if-270-275", method="UncheckedExternalCall_unchk40()", type_label=if];
3456 [label="269_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1672 [label="276_ function burnFrom(address _from, uint256 _value) public returns (bool success) {\n    balanceOf[_from] = balanceOf[_from].sub(_value);                           \n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);    \n    totalSupply = totalSupply.sub(_value);                               \n    emit Burn(_from, _value);\n    return true;\n  }\n1672-function_definition-277-283", method="burnFrom(address _from,uint256 _value)", type_label=function_definition];
1689 [label="277_ balanceOf[_from] = balanceOf[_from].sub(_value);\n1689-expression_statement-278-278", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1702 [label="278_ allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n1702-expression_statement-279-279", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1723 [label="279_ totalSupply = totalSupply.sub(_value);\n1723-expression_statement-280-280", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1738 [label="281_ return true;\n1738-return-282-282", method="burnFrom(address _from,uint256 _value)", type_label=return];
1741 [label="283_ bool public payedOut_unchk33 = false;\n1741-new_variable-284-284", method="", type_label=new_variable];
1748 [label="284_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1748-function_definition-285-288", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1752 [label="285_ require(payedOut_unchk33);\n1752-expression_statement-286-286", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1757 [label="286_ msg.sender.send(address(this).balance);\n1757-expression_statement-287-287", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1770 [label="288_ function freezeToken(bool freeze) onlyOwner public {\n    tokenFrozen = freeze;\n  }\n1770-function_definition-289-291", method="freezeToken(bool freeze)", type_label=function_definition];
1776 [label="288_ onlyOwner\n1776-expression_statement-289-289", method="freezeToken(bool freeze)", type_label=expression_statement];
1780 [label="289_ tokenFrozen = freeze;\n1780-expression_statement-290-290", method="freezeToken(bool freeze)", type_label=expression_statement];
1784 [label="291_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1784-function_definition-292-293", method="bug_unchk27(address payable addr)", type_label=function_definition];
1792 [label="292_ addr.send (42 ether);\n1792-expression_statement-293-293", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
351;
917;
1671;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 1825  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1825 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 1825  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
90 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
124 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
162 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
190 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
214 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
241 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
332 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 2186  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
412 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 2353  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
595 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
631 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
694 -> 2489  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
710 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
726 -> 735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
804 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
818 -> 826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
834 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
876 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
888 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
892 -> 897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
902 -> 912  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2697 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 2697  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
919 -> 936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
959 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
966 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
980 -> 986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
998 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1037  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1029 -> 2824  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2824 -> 1057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 2824  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1054 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1057 -> 1065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1082 -> 1090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1115 -> 2910  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1137 -> 1145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1185 -> 1192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 1210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1210 -> 1215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 1230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1230 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1242 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1299 -> 1308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1308 -> 1348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1348 -> 1364  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1348 -> 3143  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3143 -> 1393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1361 -> 1348  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1364 -> 1378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 1361  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1393 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1417 -> 1433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1433 -> 1442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1442 -> 1452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1452 -> 1465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 1495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 1521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1521 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1561 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 1573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1578 -> 1582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1582 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1600 -> 1615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1615 -> 1632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1649 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1652 -> 1656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1656 -> 1661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1672 -> 1689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1689 -> 1702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1702 -> 1723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1738 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1748 -> 1752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1752 -> 1757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1770 -> 1780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1784 -> 1792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
351 -> 2136  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
917 -> 2697  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1671 -> 3456  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
