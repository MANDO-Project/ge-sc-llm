digraph  {
13 [label="2_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n13-function_definition-3-4", method="bug_unchk27(address payable addr)", type_label=function_definition];
21 [label="3_ addr.send (42 ether);\n21-expression_statement-4-4", method="bug_unchk27(address payable addr)", type_label=expression_statement];
35 [label="5_ function _setMetadata(bytes memory metadata) internal {\n        emit MetadataSet(metadata);\n    }\n35-function_definition-6-8", method="_setMetadata(bytes memory metadata)", type_label=function_definition];
47 [label="8_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n47-function_definition-9-10", method="bug_unchk3(address payable addr)", type_label=function_definition];
55 [label="9_ addr.send (42 ether);\n55-expression_statement-10-10", method="bug_unchk3(address payable addr)", type_label=expression_statement];
66 [label="12_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n66-function_definition-13-17", method="bug_unchk43()", type_label=function_definition];
70 [label="13_ address payable addr_unchk43;\n70-new_variable-14-14", method="bug_unchk43()", type_label=new_variable];
75 [label="14_ if_!addr_unchk43.send (10 ether) || 1==1\n75-if-15-16", method="bug_unchk43()", type_label=if];
1743 [label="14_ end_if", method="bug_unchk43()", type_label=end_if];
91 [label="17_ address private _operator;\n91-new_variable-18-18", method="", type_label=new_variable];
96 [label="18_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n96-function_definition-19-21", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
105 [label="19_ dst.call.value(msg.value)(\"\");\n105-expression_statement-20-20", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
120 [label="21_ bool private _status;\n120-new_variable-22-22", method="", type_label=new_variable];
125 [label="22_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n125-function_definition-23-27", method="bug_unchk31()", type_label=function_definition];
129 [label="23_ address payable addr_unchk31;\n129-new_variable-24-24", method="bug_unchk31()", type_label=new_variable];
134 [label="24_ if_!addr_unchk31.send (10 ether) || 1==1\n134-if-25-26", method="bug_unchk31()", type_label=if];
1802 [label="24_ end_if", method="bug_unchk31()", type_label=end_if];
160 [label="28_ function _setOperator(address operator) internal {\n        require(_operator != operator, \"cannot set same operator\");\n        _operator = operator;\n        emit OperatorUpdated(operator, hasActiveOperator());\n    }\n160-function_definition-29-33", method="_setOperator(address operator)", type_label=function_definition];
168 [label="29_ require(_operator != operator, \"cannot set same operator\");\n168-expression_statement-30-30", method="_setOperator(address operator)", type_label=expression_statement];
178 [label="30_ _operator = operator;\n178-expression_statement-31-31", method="_setOperator(address operator)", type_label=expression_statement];
189 [label="33_ bool public payedOut_unchk9 = false;\n189-new_variable-34-34", method="", type_label=new_variable];
196 [label="34_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n196-function_definition-35-38", method="withdrawLeftOver_unchk9()", type_label=function_definition];
200 [label="35_ require(payedOut_unchk9);\n200-expression_statement-36-36", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
205 [label="36_ msg.sender.send(address(this).balance);\n205-expression_statement-37-37", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
218 [label="38_ function _transferOperator(address operator) internal {\n        require(_operator != address(0), \"operator not set\");\n        _setOperator(operator);\n    }\n218-function_definition-39-42", method="_transferOperator(address operator)", type_label=function_definition];
226 [label="39_ require(_operator != address(0), \"operator not set\");\n226-expression_statement-40-40", method="_transferOperator(address operator)", type_label=expression_statement];
238 [label="40_ _setOperator(operator);\n238-expression_statement-41-41", method="_transferOperator(address operator)", type_label=expression_statement];
243 [label="42_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n243-function_definition-43-45", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
251 [label="43_ callee.call.value(1 ether);\n251-expression_statement-44-44", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
261 [label="45_ function _renounceOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _operator = address(0);\n        _status = false;\n        emit OperatorUpdated(address(0), false);\n    }\n261-function_definition-46-51", method="_renounceOperator()", type_label=function_definition];
265 [label="46_ require(hasActiveOperator(), \"only when operator active\");\n265-expression_statement-47-47", method="_renounceOperator()", type_label=expression_statement];
274 [label="47_ _operator = address(0);\n274-expression_statement-48-48", method="_renounceOperator()", type_label=expression_statement];
280 [label="48_ _status = false;\n280-expression_statement-49-49", method="_renounceOperator()", type_label=expression_statement];
294 [label="51_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n294-function_definition-52-56", method="bug_unchk19()", type_label=function_definition];
298 [label="52_ address payable addr_unchk19;\n298-new_variable-53-53", method="bug_unchk19()", type_label=new_variable];
303 [label="53_ if_!addr_unchk19.send (10 ether) || 1==1\n303-if-54-55", method="bug_unchk19()", type_label=if];
1971 [label="53_ end_if", method="bug_unchk19()", type_label=end_if];
319 [label="56_ function _activateOperator() internal {\n        require(!hasActiveOperator(), \"only when operator not active\");\n        _status = true;\n        emit OperatorUpdated(_operator, true);\n    }\n319-function_definition-57-61", method="_activateOperator()", type_label=function_definition];
323 [label="57_ require(!hasActiveOperator(), \"only when operator not active\");\n323-expression_statement-58-58", method="_activateOperator()", type_label=expression_statement];
333 [label="58_ _status = true;\n333-expression_statement-59-59", method="_activateOperator()", type_label=expression_statement];
345 [label="61_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n345-function_definition-62-64", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
353 [label="62_ callee.send(5 ether);\n353-expression_statement-63-63", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
361 [label="64_ function _deactivateOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _status = false;\n        emit OperatorUpdated(_operator, false);\n    }\n361-function_definition-65-69", method="_deactivateOperator()", type_label=function_definition];
365 [label="65_ require(hasActiveOperator(), \"only when operator active\");\n365-expression_statement-66-66", method="_deactivateOperator()", type_label=expression_statement];
374 [label="66_ _status = false;\n374-expression_statement-67-67", method="_deactivateOperator()", type_label=expression_statement];
386 [label="69_ bool public payedOut_unchk20 = false;\n386-new_variable-70-70", method="", type_label=new_variable];
393 [label="70_ address payable public winner_unchk20;\n393-new_variable-71-71", method="", type_label=new_variable];
398 [label="71_ uint public winAmount_unchk20;\n398-new_variable-72-72", method="", type_label=new_variable];
403 [label="72_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n403-function_definition-73-77", method="sendToWinner_unchk20()", type_label=function_definition];
407 [label="73_ require(!payedOut_unchk20);\n407-expression_statement-74-74", method="sendToWinner_unchk20()", type_label=expression_statement];
413 [label="74_ winner_unchk20.send(winAmount_unchk20);\n413-expression_statement-75-75", method="sendToWinner_unchk20()", type_label=expression_statement];
420 [label="75_ payedOut_unchk20 = true;\n420-expression_statement-76-76", method="sendToWinner_unchk20()", type_label=expression_statement];
425 [label="77_ function getOperator() public view returns (address operator) {\n        operator = _operator;\n    }\n425-function_definition-78-80", method="getOperator()", type_label=function_definition];
435 [label="78_ operator = _operator;\n435-expression_statement-79-79", method="getOperator()", type_label=expression_statement];
439 [label="80_ bool public payedOut_unchk32 = false;\n439-new_variable-81-81", method="", type_label=new_variable];
446 [label="81_ address payable public winner_unchk32;\n446-new_variable-82-82", method="", type_label=new_variable];
451 [label="82_ uint public winAmount_unchk32;\n451-new_variable-83-83", method="", type_label=new_variable];
456 [label="83_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n456-function_definition-84-88", method="sendToWinner_unchk32()", type_label=function_definition];
460 [label="84_ require(!payedOut_unchk32);\n460-expression_statement-85-85", method="sendToWinner_unchk32()", type_label=expression_statement];
466 [label="85_ winner_unchk32.send(winAmount_unchk32);\n466-expression_statement-86-86", method="sendToWinner_unchk32()", type_label=expression_statement];
473 [label="86_ payedOut_unchk32 = true;\n473-expression_statement-87-87", method="sendToWinner_unchk32()", type_label=expression_statement];
478 [label="88_ function isOperator(address caller) public view returns (bool ok) {\n        return (caller == getOperator());\n    }\n478-function_definition-89-91", method="isOperator(address caller)", type_label=function_definition];
492 [label="89_ return (caller == getOperator());\n492-return-90-90", method="isOperator(address caller)", type_label=return];
498 [label="91_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n498-function_definition-92-94", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
506 [label="92_ callee.send(5 ether);\n506-expression_statement-93-93", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
514 [label="94_ function hasActiveOperator() public view returns (bool ok) {\n        return _status;\n    }\n514-function_definition-95-97", method="hasActiveOperator()", type_label=function_definition];
524 [label="95_ return _status;\n524-return-96-96", method="hasActiveOperator()", type_label=return];
526 [label="97_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n526-function_definition-98-102", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
542 [label="98_ uint64 subpot_unchk46 = 3 ether;\n542-new_variable-99-99", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
549 [label="99_ winner_unchk46.send(subpot_unchk46);\n549-expression_statement-100-100", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
556 [label="100_ subpot_unchk46= 0;\n556-expression_statement-101-101", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
560 [label="102_ function isActiveOperator(address caller) public view returns (bool ok) {\n        return (isOperator(caller) && hasActiveOperator());\n    }\n560-function_definition-103-105", method="isActiveOperator(address caller)", type_label=function_definition];
574 [label="103_ return (isOperator(caller) && hasActiveOperator());\n574-return-104-104", method="isActiveOperator(address caller)", type_label=return];
583 [label="105_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n583-function_definition-106-114", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
587 [label="106_ address payable addr_unchk4;\n587-new_variable-107-107", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
592 [label="107_ if\n592-if-108-113", method="UncheckedExternalCall_unchk4()", type_label=if];
2260 [label="107_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
606 [label="116_ struct MultiHash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 digestSize;\n    }\n606-expression_statement-117-121", method="MultiHash()", type_label=expression_statement];
620 [label="121_ function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {\n        bytes memory out = new bytes(34);\n        out[0] = byte(multihash.hashFunction);\n        out[1] = byte(multihash.digestSize);\n        uint8 i;\n        for (i = 0; i < 32; i++) {\n          out[i+2] = multihash.hash[i];\n        }\n        return out;\n    }\n620-function_definition-122-131", method="_combineMultiHash(MultiHash memory multihash)", type_label=function_definition];
634 [label="122_ bytes memory out = new bytes(34);\n634-new_variable-123-123", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
645 [label="123_ out[0] = byte(multihash.hashFunction);\n645-expression_statement-124-124", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
655 [label="124_ out[1] = byte(multihash.digestSize);\n655-expression_statement-125-125", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
665 [label="125_ uint8 i;\n665-new_variable-126-126", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
670 [label="126_ for(i < 32;;i++)\n670-for-127-129", method="_combineMultiHash(MultiHash memory multihash)", type_label=for];
2338 [label="126_ end_loop", method="_combineMultiHash(MultiHash memory multihash)", type_label=end_loop];
679 [label="126_ i++\n679-expression_statement-127-127", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
682 [label="127_ out[i+2] = multihash.hash[i];\n682-expression_statement-128-128", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
694 [label="129_ return out;\n694-return-130-130", method="_combineMultiHash(MultiHash memory multihash)", type_label=return];
696 [label="131_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n696-function_definition-132-136", method="bug_unchk7()", type_label=function_definition];
700 [label="132_ address payable addr_unchk7;\n700-new_variable-133-133", method="bug_unchk7()", type_label=new_variable];
705 [label="133_ if_!addr_unchk7.send (10 ether) || 1==1\n705-if-134-135", method="bug_unchk7()", type_label=if];
2373 [label="133_ end_if", method="bug_unchk7()", type_label=end_if];
721 [label="136_ function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {\n        require(source.length == 34, \"length of source must be 34\");\n        uint8 hashFunction = uint8(source[0]);\n        uint8 digestSize = uint8(source[1]);\n        bytes32 hash;\n        assembly {\n          hash := mload(add(source, 34))\n        }\n        return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n    }\n721-function_definition-137-150", method="_splitMultiHash(bytes memory source)", type_label=function_definition];
735 [label="137_ require(source.length == 34, \"length of source must be 34\");\n735-expression_statement-138-138", method="_splitMultiHash(bytes memory source)", type_label=expression_statement];
747 [label="138_ uint8 hashFunction = uint8(source[0]);\n747-new_variable-139-139", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
757 [label="139_ uint8 digestSize = uint8(source[1]);\n757-new_variable-140-140", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
767 [label="140_ bytes32 hash;\n767-new_variable-141-141", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
785 [label="144_ return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n785-return-145-149", method="_splitMultiHash(bytes memory source)", type_label=return];
799 [label="150_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n799-function_definition-151-153", method="my_func_unchk23(address payable dst)", type_label=function_definition];
808 [label="151_ dst.send(msg.value);\n808-expression_statement-152-152", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
838 [label="156_ function create(bytes calldata initData) external returns (address instance);\n838-function_definition-157-157", method="create(bytes calldata initData)", type_label=function_definition];
850 [label="157_ function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);\n850-function_definition-158-158", method="createSalty(bytes calldata initData,bytes32 salt)", type_label=function_definition];
866 [label="158_ function getInitSelector() external view returns (bytes4 initSelector);\n866-function_definition-159-159", method="getInitSelector()", type_label=function_definition];
875 [label="159_ function getInstanceRegistry() external view returns (address instanceRegistry);\n875-function_definition-160-160", method="getInstanceRegistry()", type_label=function_definition];
884 [label="160_ function getTemplate() external view returns (address template);\n884-function_definition-161-161", method="getTemplate()", type_label=function_definition];
893 [label="161_ function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);\n893-function_definition-162-162", method="getSaltyInstance(bytes calldata,bytes32 salt)", type_label=function_definition];
909 [label="162_ function getNextInstance(bytes calldata) external view returns (address instance);\n909-function_definition-163-163", method="getNextInstance(bytes calldata)", type_label=function_definition];
921 [label="163_ function getInstanceCreator(address instance) external view returns (address creator);\n921-function_definition-164-164", method="getInstanceCreator(address instance)", type_label=function_definition];
934 [label="164_ function getInstanceType() external view returns (bytes4 instanceType);\n934-function_definition-165-165", method="getInstanceType()", type_label=function_definition];
943 [label="165_ function getInstanceCount() external view returns (uint256 count);\n943-function_definition-166-166", method="getInstanceCount()", type_label=function_definition];
952 [label="166_ function getInstance(uint256 index) external view returns (address instance);\n952-function_definition-167-167", method="getInstance(uint256 index)", type_label=function_definition];
965 [label="167_ function getInstances() external view returns (address[] memory instances);\n965-function_definition-168-168", method="getInstances()", type_label=function_definition];
975 [label="168_ function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n975-function_definition-169-169", method="getPaginatedInstances(uint256 startIndex,uint256 endIndex)", type_label=function_definition];
999 [label="171_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n999-function_definition-172-174", method="withdrawBal_unchk17()", type_label=function_definition];
1003 [label="172_ uint64 Balances_unchk17 = 0;\n1003-new_variable-173-173", method="withdrawBal_unchk17()", type_label=new_variable];
1009 [label="173_ msg.sender.send(Balances_unchk17);\n1009-expression_statement-174-174", method="withdrawBal_unchk17()", type_label=expression_statement];
1018 [label="174_ MultiHash private _proofHash;\n1018-new_variable-175-175", method="", type_label=new_variable];
1024 [label="175_ bool public payedOut_unchk45 = false;\n1024-new_variable-176-176", method="", type_label=new_variable];
1031 [label="176_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n1031-function_definition-177-180", method="withdrawLeftOver_unchk45()", type_label=function_definition];
1035 [label="177_ require(payedOut_unchk45);\n1035-expression_statement-178-178", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1040 [label="178_ msg.sender.send(address(this).balance);\n1040-expression_statement-179-179", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1063 [label="181_ function _setProofHash(bytes memory proofHash) internal {\n        _proofHash = MultiHashWrapper._splitMultiHash(proofHash);\n        emit ProofHashSet(msg.sender, proofHash);\n    }\n1063-function_definition-182-185", method="_setProofHash(bytes memory proofHash)", type_label=function_definition];
1071 [label="182_ _proofHash = MultiHashWrapper._splitMultiHash(proofHash);\n1071-expression_statement-183-183", method="_setProofHash(bytes memory proofHash)", type_label=expression_statement];
1088 [label="185_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n1088-function_definition-186-188", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
1096 [label="186_ callee.send(5 ether);\n1096-expression_statement-187-187", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
1104 [label="188_ function getProofHash() public view returns (bytes memory proofHash) {\n        proofHash = MultiHashWrapper._combineMultiHash(_proofHash);\n    }\n1104-function_definition-189-191", method="getProofHash()", type_label=function_definition];
1114 [label="189_ proofHash = MultiHashWrapper._combineMultiHash(_proofHash);\n1114-expression_statement-190-190", method="getProofHash()", type_label=expression_statement];
1123 [label="191_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n1123-function_definition-192-199", method="bug_unchk30()", type_label=function_definition];
1127 [label="192_ uint receivers_unchk30;\n1127-new_variable-193-193", method="bug_unchk30()", type_label=new_variable];
1132 [label="193_ address payable addr_unchk30;\n1132-new_variable-194-194", method="bug_unchk30()", type_label=new_variable];
1137 [label="194_ if\n1137-if-195-198", method="bug_unchk30()", type_label=if];
2805 [label="194_ end_if", method="bug_unchk30()", type_label=end_if];
1147 [label="195_ receivers_unchk30 +=1;\n1147-expression_statement-196-196", method="bug_unchk30()", type_label=expression_statement];
1157 [label="201_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n1157-function_definition-202-204", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
1165 [label="202_ callee.call.value(1 ether);\n1165-expression_statement-203-203", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
1175 [label="204_ address private _factory;\n1175-new_variable-205-205", method="", type_label=new_variable];
1180 [label="205_ modifier initializeTemplate() {\n        _factory = msg.sender;\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n1180-expression_statement-206-212", method="", type_label=expression_statement];
1183 [label="206_ _factory = msg.sender;\n1183-expression_statement-207-207", method="", type_label=expression_statement];
1189 [label="207_ uint32 codeSize;\n1189-new_variable-208-208", method="", type_label=new_variable];
1203 [label="209_ require(codeSize == 0, \"must be called within contract constructor\");\n1203-expression_statement-210-210", method="", type_label=expression_statement];
1213 [label="210_ _;\n1213-expression_statement-211-211", method="", type_label=expression_statement];
1215 [label="212_ function getCreator() public view returns (address creator) {\n        creator = iFactory(_factory).getInstanceCreator(address(this));\n    }\n1215-function_definition-213-215", method="getCreator()", type_label=function_definition];
1225 [label="213_ creator = iFactory(_factory).getInstanceCreator(address(this));\n1225-expression_statement-214-214", method="getCreator()", type_label=expression_statement];
1239 [label="215_ bool public payedOut_unchk8 = false;\n1239-new_variable-216-216", method="", type_label=new_variable];
1246 [label="216_ address payable public winner_unchk8;\n1246-new_variable-217-217", method="", type_label=new_variable];
1251 [label="217_ uint public winAmount_unchk8;\n1251-new_variable-218-218", method="", type_label=new_variable];
1256 [label="218_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1256-function_definition-219-223", method="sendToWinner_unchk8()", type_label=function_definition];
1260 [label="219_ require(!payedOut_unchk8);\n1260-expression_statement-220-220", method="sendToWinner_unchk8()", type_label=expression_statement];
1266 [label="220_ winner_unchk8.send(winAmount_unchk8);\n1266-expression_statement-221-221", method="sendToWinner_unchk8()", type_label=expression_statement];
1273 [label="221_ payedOut_unchk8 = true;\n1273-expression_statement-222-222", method="sendToWinner_unchk8()", type_label=expression_statement];
1278 [label="223_ function isCreator(address caller) public view returns (bool ok) {\n        ok = (caller == getCreator());\n    }\n1278-function_definition-224-226", method="isCreator(address caller)", type_label=function_definition];
1292 [label="224_ ok = (caller == getCreator());\n1292-expression_statement-225-225", method="isCreator(address caller)", type_label=expression_statement];
1300 [label="226_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1300-function_definition-227-228", method="bug_unchk39(address payable addr)", type_label=function_definition];
1308 [label="227_ addr.send (4 ether);\n1308-expression_statement-228-228", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1316 [label="228_ function getFactory() public view returns (address factory) {\n        factory = _factory;\n    }\n1316-function_definition-229-231", method="getFactory()", type_label=function_definition];
1326 [label="229_ factory = _factory;\n1326-expression_statement-230-230", method="getFactory()", type_label=expression_statement];
1330 [label="231_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1330-function_definition-232-234", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1339 [label="232_ dst.call.value(msg.value)(\"\");\n1339-expression_statement-233-233", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1369 [label="236_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n1369-function_definition-237-239", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
1377 [label="237_ callee.call.value(1 ether);\n1377-expression_statement-238-238", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
1401 [label="240_ function initialize(\n        address operator,\n        bytes memory multihash,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        if (multihash.length != 0) {\n            ProofHash._setProofHash(multihash);\n        }\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n        emit Initialized(operator, multihash, metadata);\n    }\n1401-function_definition-241-257", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=function_definition];
1416 [label="244_ initializeTemplate()\n1416-expression_statement-245-245", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1419 [label="245_ if_multihash.length != 0\n1419-if-246-248", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3087 [label="245_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1426 [label="246_ ProofHash._setProofHash(multihash);\n1426-expression_statement-247-247", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1433 [label="248_ if_operator != address(0)\n1433-if-249-252", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3101 [label="248_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1440 [label="249_ Operated._setOperator(operator);\n1440-expression_statement-250-250", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1447 [label="250_ Operated._activateOperator();\n1447-expression_statement-251-251", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1452 [label="252_ if_metadata.length != 0\n1452-if-253-255", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3120 [label="252_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1459 [label="253_ EventMetadata._setMetadata(metadata);\n1459-expression_statement-254-254", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1474 [label="257_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1474-function_definition-258-260", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1483 [label="258_ dst.send(msg.value);\n1483-expression_statement-259-259", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1492 [label="260_ function setMetadata(bytes memory metadata) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        EventMetadata._setMetadata(metadata);\n    }\n1492-function_definition-261-264", method="setMetadata(bytes memory metadata)", type_label=function_definition];
1500 [label="261_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1500-expression_statement-262-262", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1524 [label="262_ EventMetadata._setMetadata(metadata);\n1524-expression_statement-263-263", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1531 [label="264_ bool public payedOut_unchk44 = false;\n1531-new_variable-265-265", method="", type_label=new_variable];
1538 [label="265_ address payable public winner_unchk44;\n1538-new_variable-266-266", method="", type_label=new_variable];
1543 [label="266_ uint public winAmount_unchk44;\n1543-new_variable-267-267", method="", type_label=new_variable];
1548 [label="267_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1548-function_definition-268-272", method="sendToWinner_unchk44()", type_label=function_definition];
1552 [label="268_ require(!payedOut_unchk44);\n1552-expression_statement-269-269", method="sendToWinner_unchk44()", type_label=expression_statement];
1558 [label="269_ winner_unchk44.send(winAmount_unchk44);\n1558-expression_statement-270-270", method="sendToWinner_unchk44()", type_label=expression_statement];
1565 [label="270_ payedOut_unchk44 = true;\n1565-expression_statement-271-271", method="sendToWinner_unchk44()", type_label=expression_statement];
1570 [label="272_ function transferOperator(address operator) public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._transferOperator(operator);\n    }\n1570-function_definition-273-276", method="transferOperator(address operator)", type_label=function_definition];
1578 [label="273_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1578-expression_statement-274-274", method="transferOperator(address operator)", type_label=expression_statement];
1593 [label="274_ Operated._transferOperator(operator);\n1593-expression_statement-275-275", method="transferOperator(address operator)", type_label=expression_statement];
1600 [label="276_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1600-function_definition-277-285", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1604 [label="277_ address payable addr_unchk40;\n1604-new_variable-278-278", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1609 [label="278_ if\n1609-if-279-284", method="UncheckedExternalCall_unchk40()", type_label=if];
3277 [label="278_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1620 [label="285_ function renounceOperator() public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._renounceOperator();\n    }\n1620-function_definition-286-289", method="renounceOperator()", type_label=function_definition];
1624 [label="286_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1624-expression_statement-287-287", method="renounceOperator()", type_label=expression_statement];
1639 [label="287_ Operated._renounceOperator();\n1639-expression_statement-288-288", method="renounceOperator()", type_label=expression_statement];
1644 [label="289_ bool public payedOut_unchk33 = false;\n1644-new_variable-290-290", method="", type_label=new_variable];
1651 [label="290_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1651-function_definition-291-294", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1655 [label="291_ require(payedOut_unchk33);\n1655-expression_statement-292-292", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1660 [label="292_ msg.sender.send(address(this).balance);\n1660-expression_statement-293-293", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
602;
1154;
1152;
1466;
1619;
13 -> 21  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 55  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
66 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
70 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 1743  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
96 -> 105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
125 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 1802  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
218 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
243 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
265 -> 274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
274 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 1971  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
319 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
498 -> 506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
514 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
526 -> 542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
542 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
583 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
620 -> 634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
634 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
655 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 682  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
670 -> 2338  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2338 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 670  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
682 -> 679  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
694 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
696 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 2373  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
721 -> 735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
785 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
799 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 1035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 1040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1104 -> 1114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1123 -> 1127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 1147  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2805 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1147 -> 2805  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1157 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 1180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1183 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 1213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 1225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1239 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1266 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1278 -> 1292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1300 -> 1308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1316 -> 1326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1330 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1369 -> 1377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1401 -> 1419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1419 -> 1426  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1419 -> 3087  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3087 -> 1433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1426 -> 3087  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1433 -> 1440  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1433 -> 3101  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3101 -> 1452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1440 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 3101  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1452 -> 1459  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1452 -> 3120  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3120 -> 1466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 3120  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1474 -> 1483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1500 -> 1524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1538 -> 1543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1548 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 1558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1558 -> 1565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1570 -> 1578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1578 -> 1593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1600 -> 1604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1604 -> 1609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1620 -> 1624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1624 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1651 -> 1655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1655 -> 1660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 2260  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1152 -> 2805  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1619 -> 3277  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
