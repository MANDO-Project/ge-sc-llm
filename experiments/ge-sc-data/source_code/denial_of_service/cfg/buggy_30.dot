digraph  {
13 [label="2_ function name() external view returns (string memory);\n13-function_definition-3-3", method="name()", type_label=function_definition];
21 [label="3_ function symbol() external view returns (string memory);\n21-function_definition-4-4", method="symbol()", type_label=function_definition];
29 [label="4_ function granularity() external view returns (uint256);\n29-function_definition-5-5", method="granularity()", type_label=function_definition];
37 [label="5_ function totalSupply() external view returns (uint256);\n37-function_definition-6-6", method="totalSupply()", type_label=function_definition];
45 [label="6_ function balanceOf(address owner) external view returns (uint256);\n45-function_definition-7-7", method="balanceOf(address owner)", type_label=function_definition];
57 [label="7_ function send(address recipient, uint256 amount, bytes calldata data) external;\n57-function_definition-8-8", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=function_definition];
72 [label="8_ function burn(uint256 amount, bytes calldata data) external;\n72-function_definition-9-9", method="burn(uint256 amount,bytes calldata data)", type_label=function_definition];
83 [label="9_ function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n83-function_definition-10-10", method="isOperatorFor(address operator,address tokenHolder)", type_label=function_definition];
99 [label="10_ function authorizeOperator(address operator) external;\n99-function_definition-11-11", method="authorizeOperator(address operator)", type_label=function_definition];
106 [label="11_ function revokeOperator(address operator) external;\n106-function_definition-12-12", method="revokeOperator(address operator)", type_label=function_definition];
113 [label="12_ function defaultOperators() external view returns (address[] memory);\n113-function_definition-13-13", method="defaultOperators()", type_label=function_definition];
122 [label="13_ function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n122-function_definition-14-20", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
145 [label="20_ function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n145-function_definition-21-26", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
257 [label="40_ function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n257-function_definition-41-48", method="tokensReceived(address operator,address from,address to,uint amount,bytes calldata userData,bytes calldata operatorData)", type_label=function_definition];
287 [label="50_ function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n287-function_definition-51-58", method="tokensToSend(address operator,address from,address to,uint amount,bytes calldata userData,bytes calldata operatorData)", type_label=function_definition];
317 [label="60_ function totalSupply() external view returns (uint256);\n317-function_definition-61-61", method="totalSupply()", type_label=function_definition];
325 [label="61_ function balanceOf(address account) external view returns (uint256);\n325-function_definition-62-62", method="balanceOf(address account)", type_label=function_definition];
337 [label="62_ function transfer(address recipient, uint256 amount) external returns (bool);\n337-function_definition-63-63", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
352 [label="63_ function allowance(address owner, address spender) external view returns (uint256);\n352-function_definition-64-64", method="allowance(address owner,address spender)", type_label=function_definition];
368 [label="64_ function approve(address spender, uint256 amount) external returns (bool);\n368-function_definition-65-65", method="approve(address spender,uint256 amount)", type_label=function_definition];
383 [label="65_ function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n383-function_definition-66-66", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
433 [label="70_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n433-function_definition-71-75", method="add(uint256 a,uint256 b)", type_label=function_definition];
450 [label="71_ uint256 c = a + b;\n450-new_variable-72-72", method="add(uint256 a,uint256 b)", type_label=new_variable];
458 [label="72_ require(c >= a, \"SafeMath: addition overflow\");\n458-expression_statement-73-73", method="add(uint256 a,uint256 b)", type_label=expression_statement];
468 [label="73_ return c;\n468-return-74-74", method="add(uint256 a,uint256 b)", type_label=return];
470 [label="75_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n470-function_definition-76-80", method="sub(uint256 a,uint256 b)", type_label=function_definition];
487 [label="76_ require(b <= a, \"SafeMath: subtraction overflow\");\n487-expression_statement-77-77", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
497 [label="77_ uint256 c = a - b;\n497-new_variable-78-78", method="sub(uint256 a,uint256 b)", type_label=new_variable];
505 [label="78_ return c;\n505-return-79-79", method="sub(uint256 a,uint256 b)", type_label=return];
507 [label="80_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n507-function_definition-81-88", method="mul(uint256 a,uint256 b)", type_label=function_definition];
524 [label="81_ if_a == 0\n524-if-82-84", method="mul(uint256 a,uint256 b)", type_label=if];
4525 [label="81_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
529 [label="82_ return 0;\n529-return-83-83", method="mul(uint256 a,uint256 b)", type_label=return];
531 [label="84_ uint256 c = a * b;\n531-new_variable-85-85", method="mul(uint256 a,uint256 b)", type_label=new_variable];
539 [label="85_ require(c / a == b, \"SafeMath: multiplication overflow\");\n539-expression_statement-86-86", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
551 [label="86_ return c;\n551-return-87-87", method="mul(uint256 a,uint256 b)", type_label=return];
553 [label="88_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n553-function_definition-89-93", method="div(uint256 a,uint256 b)", type_label=function_definition];
570 [label="89_ require(b > 0, \"SafeMath: division by zero\");\n570-expression_statement-90-90", method="div(uint256 a,uint256 b)", type_label=expression_statement];
580 [label="90_ uint256 c = a / b;\n580-new_variable-91-91", method="div(uint256 a,uint256 b)", type_label=new_variable];
588 [label="91_ return c;\n588-return-92-92", method="div(uint256 a,uint256 b)", type_label=return];
590 [label="93_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n590-function_definition-94-97", method="mod(uint256 a,uint256 b)", type_label=function_definition];
607 [label="94_ require(b != 0, \"SafeMath: modulo by zero\");\n607-expression_statement-95-95", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
617 [label="95_ return a % b;\n617-return-96-96", method="mod(uint256 a,uint256 b)", type_label=return];
624 [label="99_ function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n624-function_definition-100-104", method="isContract(address account)", type_label=function_definition];
637 [label="100_ uint256 size;\n637-new_variable-101-101", method="isContract(address account)", type_label=new_variable];
652 [label="102_ return size > 0;\n652-return-103-103", method="isContract(address account)", type_label=return];
659 [label="106_ function setManager(address account, address newManager) external;\n659-function_definition-107-107", method="setManager(address account,address newManager)", type_label=function_definition];
670 [label="107_ function getManager(address account) external view returns (address);\n670-function_definition-108-108", method="getManager(address account)", type_label=function_definition];
682 [label="108_ function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n682-function_definition-109-109", method="setInterfaceImplementer(address account,bytes32 interfaceHash,address implementer)", type_label=function_definition];
697 [label="109_ function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n697-function_definition-110-110", method="getInterfaceImplementer(address account,bytes32 interfaceHash)", type_label=function_definition];
713 [label="110_ function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n713-function_definition-111-111", method="interfaceHash(string calldata interfaceName)", type_label=function_definition];
725 [label="111_ function updateERC165Cache(address account, bytes4 interfaceId) external;\n725-function_definition-112-112", method="updateERC165Cache(address account,bytes4 interfaceId)", type_label=function_definition];
736 [label="112_ function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n736-function_definition-113-113", method="implementsERC165Interface(address account,bytes4 interfaceId)", type_label=function_definition];
752 [label="113_ function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n752-function_definition-114-114", method="implementsERC165InterfaceNoCache(address account,bytes4 interfaceId)", type_label=function_definition];
811 [label="120_ IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n811-new_variable-121-121", method="", type_label=new_variable];
821 [label="121_ mapping(address => uint256) private _balances;\n821-new_variable-122-122", method="", type_label=new_variable];
828 [label="122_ uint256 private _totalSupply;\n828-new_variable-123-123", method="", type_label=new_variable];
833 [label="123_ string private _name;\n833-new_variable-124-124", method="", type_label=new_variable];
838 [label="124_ string private _symbol;\n838-new_variable-125-125", method="", type_label=new_variable];
843 [label="125_ bytes32 constant private TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n843-new_variable-126-127", method="", type_label=new_variable];
849 [label="127_ bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n849-new_variable-128-129", method="", type_label=new_variable];
855 [label="129_ address[] private _defaultOperatorsArray;\n855-new_variable-130-130", method="", type_label=new_variable];
861 [label="130_ mapping(address => bool) private _defaultOperators;\n861-new_variable-131-131", method="", type_label=new_variable];
868 [label="131_ mapping(address => mapping(address => bool)) private _operators;\n868-new_variable-132-132", method="", type_label=new_variable];
877 [label="132_ mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n877-new_variable-133-133", method="", type_label=new_variable];
886 [label="133_ mapping (address => mapping (address => uint256)) private _allowances;\n886-new_variable-134-134", method="", type_label=new_variable];
910 [label="139_ _name = name;\n910-expression_statement-140-140", method="", type_label=expression_statement];
914 [label="140_ _symbol = symbol;\n914-expression_statement-141-141", method="", type_label=expression_statement];
918 [label="141_ _defaultOperatorsArray = defaultOperators;\n918-expression_statement-142-142", method="", type_label=expression_statement];
922 [label="142_ for(i < _defaultOperatorsArray.length;;i++)\n922-for-143-145", method="", type_label=for];
4923 [label="142_ end_loop", method="", type_label=end_loop];
935 [label="142_ i++\n935-expression_statement-143-143", method="", type_label=expression_statement];
938 [label="143_ _defaultOperators[_defaultOperatorsArray[i]] = true;\n938-expression_statement-144-144", method="", type_label=expression_statement];
947 [label="145_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n947-expression_statement-146-146", method="", type_label=expression_statement];
966 [label="146_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n966-expression_statement-147-147", method="", type_label=expression_statement];
985 [label="148_ function name() public view returns (string memory) {\n        return _name;\n    }\n985-function_definition-149-151", method="name()", type_label=function_definition];
994 [label="149_ return _name;\n994-return-150-150", method="name()", type_label=return];
996 [label="151_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n996-function_definition-152-154", method="symbol()", type_label=function_definition];
1005 [label="152_ return _symbol;\n1005-return-153-153", method="symbol()", type_label=return];
1007 [label="154_ function bug_unchk18() public{\nuint receivers_unchk18;\naddress payable addr_unchk18;\nif (!addr_unchk18.send(42 ether))\n	{receivers_unchk18 +=1;}\nelse\n	{revert();}\n}\n1007-function_definition-155-162", method="bug_unchk18()", type_label=function_definition];
1011 [label="155_ uint receivers_unchk18;\n1011-new_variable-156-156", method="bug_unchk18()", type_label=new_variable];
1016 [label="156_ address payable addr_unchk18;\n1016-new_variable-157-157", method="bug_unchk18()", type_label=new_variable];
1021 [label="157_ if\n1021-if-158-161", method="bug_unchk18()", type_label=if];
5022 [label="157_ end_if", method="bug_unchk18()", type_label=end_if];
1031 [label="158_ receivers_unchk18 +=1;\n1031-expression_statement-159-159", method="bug_unchk18()", type_label=expression_statement];
1038 [label="162_ function decimals() public pure returns (uint8) {\n        return 18;\n    }\n1038-function_definition-163-165", method="decimals()", type_label=function_definition];
1047 [label="163_ return 18;\n1047-return-164-164", method="decimals()", type_label=return];
1049 [label="165_ function withdrawBal_unchk29 () public{\n	uint Balances_unchk29 = 0;\n	msg.sender.send(Balances_unchk29);}\n1049-function_definition-166-168", method="withdrawBal_unchk29()", type_label=function_definition];
1053 [label="166_ uint Balances_unchk29 = 0;\n1053-new_variable-167-167", method="withdrawBal_unchk29()", type_label=new_variable];
1059 [label="167_ msg.sender.send(Balances_unchk29);\n1059-expression_statement-168-168", method="withdrawBal_unchk29()", type_label=expression_statement];
1068 [label="168_ function granularity() public view returns (uint256) {\n        return 1;\n    }\n1068-function_definition-169-171", method="granularity()", type_label=function_definition];
1077 [label="169_ return 1;\n1077-return-170-170", method="granularity()", type_label=return];
1079 [label="171_ function bug_unchk6() public{\nuint receivers_unchk6;\naddress payable addr_unchk6;\nif (!addr_unchk6.send(42 ether))\n	{receivers_unchk6 +=1;}\nelse\n	{revert();}\n}\n1079-function_definition-172-179", method="bug_unchk6()", type_label=function_definition];
1083 [label="172_ uint receivers_unchk6;\n1083-new_variable-173-173", method="bug_unchk6()", type_label=new_variable];
1088 [label="173_ address payable addr_unchk6;\n1088-new_variable-174-174", method="bug_unchk6()", type_label=new_variable];
1093 [label="174_ if\n1093-if-175-178", method="bug_unchk6()", type_label=if];
5094 [label="174_ end_if", method="bug_unchk6()", type_label=end_if];
1103 [label="175_ receivers_unchk6 +=1;\n1103-expression_statement-176-176", method="bug_unchk6()", type_label=expression_statement];
1110 [label="179_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1110-function_definition-180-182", method="totalSupply()", type_label=function_definition];
1119 [label="180_ return _totalSupply;\n1119-return-181-181", method="totalSupply()", type_label=return];
1121 [label="182_ function UncheckedExternalCall_unchk16 () public\n{  address payable addr_unchk16;\n   if (! addr_unchk16.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1121-function_definition-183-191", method="UncheckedExternalCall_unchk16()", type_label=function_definition];
1125 [label="183_ address payable addr_unchk16;\n1125-new_variable-184-184", method="UncheckedExternalCall_unchk16()", type_label=new_variable];
1130 [label="184_ if\n1130-if-185-190", method="UncheckedExternalCall_unchk16()", type_label=if];
5131 [label="184_ end_if", method="UncheckedExternalCall_unchk16()", type_label=end_if];
1141 [label="191_ function balanceOf(address tokenHolder) public view returns (uint256) {\n        return _balances[tokenHolder];\n    }\n1141-function_definition-192-194", method="balanceOf(address tokenHolder)", type_label=function_definition];
1154 [label="192_ return _balances[tokenHolder];\n1154-return-193-193", method="balanceOf(address tokenHolder)", type_label=return];
1158 [label="194_ function my_func_uncheck24(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1158-function_definition-195-197", method="my_func_uncheck24(address payable dst)", type_label=function_definition];
1167 [label="195_ dst.call.value(msg.value)(\"\");\n1167-expression_statement-196-196", method="my_func_uncheck24(address payable dst)", type_label=expression_statement];
1182 [label="197_ function send(address recipient, uint256 amount, bytes calldata data) external {\n        _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n    }\n1182-function_definition-198-200", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=function_definition];
1198 [label="198_ _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n1198-expression_statement-199-199", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=expression_statement];
1221 [label="200_ function withdrawBal_unchk5 () public{\n	uint64 Balances_unchk5 = 0;\n	msg.sender.send(Balances_unchk5);}\n1221-function_definition-201-203", method="withdrawBal_unchk5()", type_label=function_definition];
1225 [label="201_ uint64 Balances_unchk5 = 0;\n1225-new_variable-202-202", method="withdrawBal_unchk5()", type_label=new_variable];
1231 [label="202_ msg.sender.send(Balances_unchk5);\n1231-expression_statement-203-203", method="withdrawBal_unchk5()", type_label=expression_statement];
1240 [label="203_ function transfer(address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        address from = msg.sender;\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n        _move(from, from, recipient, amount, \"\", \"\");\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n1240-function_definition-204-211", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
1256 [label="204_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n1256-expression_statement-205-205", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1268 [label="205_ address from = msg.sender;\n1268-new_variable-206-206", method="transfer(address recipient,uint256 amount)", type_label=new_variable];
1276 [label="206_ _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n1276-expression_statement-207-207", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1293 [label="207_ _move(from, from, recipient, amount, \"\", \"\");\n1293-expression_statement-208-208", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1310 [label="208_ _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n1310-expression_statement-209-209", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1330 [label="209_ return true;\n1330-return-210-210", method="transfer(address recipient,uint256 amount)", type_label=return];
1333 [label="211_ function bug_unchk15(address payable addr) public\n      {addr.send (42 ether); }\n1333-function_definition-212-213", method="bug_unchk15(address payable addr)", type_label=function_definition];
1341 [label="212_ addr.send (42 ether);\n1341-expression_statement-213-213", method="bug_unchk15(address payable addr)", type_label=expression_statement];
1349 [label="213_ function burn(uint256 amount, bytes calldata data) external {\n        _burn(msg.sender, msg.sender, amount, data, \"\");\n    }\n1349-function_definition-214-216", method="burn(uint256 amount,bytes calldata data)", type_label=function_definition];
1361 [label="214_ _burn(msg.sender, msg.sender, amount, data, \"\");\n1361-expression_statement-215-215", method="burn(uint256 amount,bytes calldata data)", type_label=expression_statement];
1379 [label="216_ function UncheckedExternalCall_unchk28 () public\n{  address payable addr_unchk28;\n   if (! addr_unchk28.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1379-function_definition-217-225", method="UncheckedExternalCall_unchk28()", type_label=function_definition];
1383 [label="217_ address payable addr_unchk28;\n1383-new_variable-218-218", method="UncheckedExternalCall_unchk28()", type_label=new_variable];
1388 [label="218_ if\n1388-if-219-224", method="UncheckedExternalCall_unchk28()", type_label=if];
5389 [label="218_ end_if", method="UncheckedExternalCall_unchk28()", type_label=end_if];
1399 [label="225_ function isOperatorFor(\n        address operator,\n        address tokenHolder\n    ) public view returns (bool) {\n        return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n    }\n1399-function_definition-226-233", method="isOperatorFor(address operator,address tokenHolder)", type_label=function_definition];
1416 [label="229_ return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n1416-return-230-232", method="isOperatorFor(address operator,address tokenHolder)", type_label=return];
1438 [label="233_ function cash_unchk34(uint roundIndex, uint subpotIndex, address payable winner_unchk34) public{\n        uint64 subpot_unchk34 = 10 ether;\n        winner_unchk34.send(subpot_unchk34);   \n        subpot_unchk34= 0;\n}\n1438-function_definition-234-238", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=function_definition];
1454 [label="234_ uint64 subpot_unchk34 = 10 ether;\n1454-new_variable-235-235", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=new_variable];
1461 [label="235_ winner_unchk34.send(subpot_unchk34);\n1461-expression_statement-236-236", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=expression_statement];
1468 [label="236_ subpot_unchk34= 0;\n1468-expression_statement-237-237", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=expression_statement];
1472 [label="238_ function authorizeOperator(address operator) external {\n        require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n        if (_defaultOperators[operator]) {\n            delete _revokedDefaultOperators[msg.sender][operator];\n        } else {\n            _operators[msg.sender][operator] = true;\n        }\n        emit AuthorizedOperator(operator, msg.sender);\n    }\n1472-function_definition-239-247", method="authorizeOperator(address operator)", type_label=function_definition];
1480 [label="239_ require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n1480-expression_statement-240-240", method="authorizeOperator(address operator)", type_label=expression_statement];
1492 [label="240_ if\n1492-if-241-245", method="authorizeOperator(address operator)", type_label=if];
5493 [label="240_ end_if", method="authorizeOperator(address operator)", type_label=end_if];
1497 [label="241_ delete _revokedDefaultOperators[msg.sender][operator];\n1497-expression_statement-242-242", method="authorizeOperator(address operator)", type_label=expression_statement];
1507 [label="243_ _operators[msg.sender][operator] = true;\n1507-expression_statement-244-244", method="authorizeOperator(address operator)", type_label=expression_statement];
1526 [label="247_ bool public payedOut_unchk21 = false;\n1526-new_variable-248-248", method="", type_label=new_variable];
1533 [label="248_ function withdrawLeftOver_unchk21() public {\n        require(payedOut_unchk21);\n        msg.sender.send(address(this).balance);\n    }\n1533-function_definition-249-252", method="withdrawLeftOver_unchk21()", type_label=function_definition];
1537 [label="249_ require(payedOut_unchk21);\n1537-expression_statement-250-250", method="withdrawLeftOver_unchk21()", type_label=expression_statement];
1542 [label="250_ msg.sender.send(address(this).balance);\n1542-expression_statement-251-251", method="withdrawLeftOver_unchk21()", type_label=expression_statement];
1555 [label="252_ function revokeOperator(address operator) external {\n        require(operator != msg.sender, \"ERC777: revoking self as operator\");\n        if (_defaultOperators[operator]) {\n            _revokedDefaultOperators[msg.sender][operator] = true;\n        } else {\n            delete _operators[msg.sender][operator];\n        }\n        emit RevokedOperator(operator, msg.sender);\n    }\n1555-function_definition-253-261", method="revokeOperator(address operator)", type_label=function_definition];
1563 [label="253_ require(operator != msg.sender, \"ERC777: revoking self as operator\");\n1563-expression_statement-254-254", method="revokeOperator(address operator)", type_label=expression_statement];
1575 [label="254_ if\n1575-if-255-259", method="revokeOperator(address operator)", type_label=if];
5576 [label="254_ end_if", method="revokeOperator(address operator)", type_label=end_if];
1580 [label="255_ _revokedDefaultOperators[msg.sender][operator] = true;\n1580-expression_statement-256-256", method="revokeOperator(address operator)", type_label=expression_statement];
1592 [label="257_ delete _operators[msg.sender][operator];\n1592-expression_statement-258-258", method="revokeOperator(address operator)", type_label=expression_statement];
1609 [label="261_ function cash_unchk10(uint roundIndex, uint subpotIndex,address payable winner_unchk10) public{\n        uint64 subpot_unchk10 = 10 ether;\n        winner_unchk10.send(subpot_unchk10);   \n        subpot_unchk10= 0;\n}\n1609-function_definition-262-266", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=function_definition];
1625 [label="262_ uint64 subpot_unchk10 = 10 ether;\n1625-new_variable-263-263", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=new_variable];
1632 [label="263_ winner_unchk10.send(subpot_unchk10);\n1632-expression_statement-264-264", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=expression_statement];
1639 [label="264_ subpot_unchk10= 0;\n1639-expression_statement-265-265", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=expression_statement];
1643 [label="266_ function defaultOperators() public view returns (address[] memory) {\n        return _defaultOperatorsArray;\n    }\n1643-function_definition-267-269", method="defaultOperators()", type_label=function_definition];
1653 [label="267_ return _defaultOperatorsArray;\n1653-return-268-268", method="defaultOperators()", type_label=return];
1655 [label="269_ function my_func_unchk47(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1655-function_definition-270-272", method="my_func_unchk47(address payable dst)", type_label=function_definition];
1664 [label="270_ dst.send(msg.value);\n1664-expression_statement-271-271", method="my_func_unchk47(address payable dst)", type_label=expression_statement];
1673 [label="272_ function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    )\n    external\n    {\n        require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n        _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n    }\n1673-function_definition-273-284", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
1697 [label="281_ require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n1697-expression_statement-282-282", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1712 [label="282_ _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n1712-expression_statement-283-283", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1732 [label="284_ function cash_unchk22(uint roundIndex, uint subpotIndex, address payable winner_unchk22)public{\n        uint64 subpot_unchk22 = 10 ether;\n        winner_unchk22.send(subpot_unchk22);   \n        subpot_unchk22= 0;\n}\n1732-function_definition-285-289", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=function_definition];
1748 [label="285_ uint64 subpot_unchk22 = 10 ether;\n1748-new_variable-286-286", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=new_variable];
1755 [label="286_ winner_unchk22.send(subpot_unchk22);\n1755-expression_statement-287-287", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
1762 [label="287_ subpot_unchk22= 0;\n1762-expression_statement-288-288", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
1766 [label="289_ function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external {\n        require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n        _burn(msg.sender, account, amount, data, operatorData);\n    }\n1766-function_definition-290-293", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
1786 [label="290_ require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n1786-expression_statement-291-291", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1801 [label="291_ _burn(msg.sender, account, amount, data, operatorData);\n1801-expression_statement-292-292", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1816 [label="293_ function my_func_uncheck12(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1816-function_definition-294-296", method="my_func_uncheck12(address payable dst)", type_label=function_definition];
1825 [label="294_ dst.call.value(msg.value)(\"\");\n1825-expression_statement-295-295", method="my_func_uncheck12(address payable dst)", type_label=expression_statement];
1840 [label="296_ function allowance(address holder, address spender) public view returns (uint256) {\n        return _allowances[holder][spender];\n    }\n1840-function_definition-297-299", method="allowance(address holder,address spender)", type_label=function_definition];
1857 [label="297_ return _allowances[holder][spender];\n1857-return-298-298", method="allowance(address holder,address spender)", type_label=return];
1863 [label="299_ function my_func_unchk11(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1863-function_definition-300-302", method="my_func_unchk11(address payable dst)", type_label=function_definition];
1872 [label="300_ dst.send(msg.value);\n1872-expression_statement-301-301", method="my_func_unchk11(address payable dst)", type_label=expression_statement];
1881 [label="302_ function approve(address spender, uint256 value) external returns (bool) {\n        address holder = msg.sender;\n        _approve(holder, spender, value);\n        return true;\n    }\n1881-function_definition-303-307", method="approve(address spender,uint256 value)", type_label=function_definition];
1897 [label="303_ address holder = msg.sender;\n1897-new_variable-304-304", method="approve(address spender,uint256 value)", type_label=new_variable];
1905 [label="304_ _approve(holder, spender, value);\n1905-expression_statement-305-305", method="approve(address spender,uint256 value)", type_label=expression_statement];
1914 [label="305_ return true;\n1914-return-306-306", method="approve(address spender,uint256 value)", type_label=return];
1917 [label="307_ function callnotchecked_unchk1(address payable callee) public {\n    callee.call.value(2 ether);\n  }\n1917-function_definition-308-310", method="callnotchecked_unchk1(address payable callee)", type_label=function_definition];
1925 [label="308_ callee.call.value(2 ether);\n1925-expression_statement-309-309", method="callnotchecked_unchk1(address payable callee)", type_label=expression_statement];
1935 [label="310_ function transferFrom(address holder, address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\n        address spender = msg.sender;\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n        _move(spender, holder, recipient, amount, \"\", \"\");\n        _approve(holder, spender, _allowances[holder][spender].sub(amount));\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n1935-function_definition-311-320", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=function_definition];
1955 [label="311_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n1955-expression_statement-312-312", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1967 [label="312_ require(holder != address(0), \"ERC777: transfer from the zero address\");\n1967-expression_statement-313-313", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1979 [label="313_ address spender = msg.sender;\n1979-new_variable-314-314", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=new_variable];
1987 [label="314_ _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n1987-expression_statement-315-315", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2004 [label="315_ _move(spender, holder, recipient, amount, \"\", \"\");\n2004-expression_statement-316-316", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2021 [label="316_ _approve(holder, spender, _allowances[holder][spender].sub(amount));\n2021-expression_statement-317-317", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2039 [label="317_ _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n2039-expression_statement-318-318", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2059 [label="318_ return true;\n2059-return-319-319", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=return];
2062 [label="320_ function withdrawBal_unchk41 () public{\n	uint64 Balances_unchk41 = 0;\n	msg.sender.send(Balances_unchk41);}\n2062-function_definition-321-323", method="withdrawBal_unchk41()", type_label=function_definition];
2066 [label="321_ uint64 Balances_unchk41 = 0;\n2066-new_variable-322-322", method="withdrawBal_unchk41()", type_label=new_variable];
2072 [label="322_ msg.sender.send(Balances_unchk41);\n2072-expression_statement-323-323", method="withdrawBal_unchk41()", type_label=expression_statement];
2081 [label="323_ function _mint(\n        address operator,\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n    internal\n    {\n        require(account != address(0), \"ERC777: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n2081-function_definition-324-339", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2105 [label="332_ require(account != address(0), \"ERC777: mint to the zero address\");\n2105-expression_statement-333-333", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2117 [label="333_ _totalSupply = _totalSupply.add(amount);\n2117-expression_statement-334-334", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2126 [label="334_ _balances[account] = _balances[account].add(amount);\n2126-expression_statement-335-335", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2139 [label="335_ _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n2139-expression_statement-336-336", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2181 [label="339_ function bug_unchk42() public{\nuint receivers_unchk42;\naddress payable addr_unchk42;\nif (!addr_unchk42.send(42 ether))\n	{receivers_unchk42 +=1;}\nelse\n	{revert();}\n}\n2181-function_definition-340-347", method="bug_unchk42()", type_label=function_definition];
2185 [label="340_ uint receivers_unchk42;\n2185-new_variable-341-341", method="bug_unchk42()", type_label=new_variable];
2190 [label="341_ address payable addr_unchk42;\n2190-new_variable-342-342", method="bug_unchk42()", type_label=new_variable];
2195 [label="342_ if\n2195-if-343-346", method="bug_unchk42()", type_label=if];
6196 [label="342_ end_if", method="bug_unchk42()", type_label=end_if];
2205 [label="343_ receivers_unchk42 +=1;\n2205-expression_statement-344-344", method="bug_unchk42()", type_label=expression_statement];
2212 [label="347_ function _send(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        require(from != address(0), \"ERC777: send from the zero address\");\n        require(to != address(0), \"ERC777: send to the zero address\");\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n        _move(operator, from, to, amount, userData, operatorData);\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n2212-function_definition-348-364", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=function_definition];
2244 [label="358_ require(from != address(0), \"ERC777: send from the zero address\");\n2244-expression_statement-359-359", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2256 [label="359_ require(to != address(0), \"ERC777: send to the zero address\");\n2256-expression_statement-360-360", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2268 [label="360_ _callTokensToSend(operator, from, to, amount, userData, operatorData);\n2268-expression_statement-361-361", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2283 [label="361_ _move(operator, from, to, amount, userData, operatorData);\n2283-expression_statement-362-362", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2298 [label="362_ _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n2298-expression_statement-363-363", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2315 [label="364_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n2315-function_definition-365-367", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
2323 [label="365_ callee.send(5 ether);\n2323-expression_statement-366-366", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
2331 [label="367_ function _burn(\n        address operator,\n        address from,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n        private\n    {\n        require(from != address(0), \"ERC777: burn from the zero address\");\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[from] = _balances[from].sub(amount);\n        emit Burned(operator, from, amount, data, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n2331-function_definition-368-383", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=function_definition];
2355 [label="376_ require(from != address(0), \"ERC777: burn from the zero address\");\n2355-expression_statement-377-377", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2367 [label="377_ _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n2367-expression_statement-378-378", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2384 [label="378_ _totalSupply = _totalSupply.sub(amount);\n2384-expression_statement-379-379", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2393 [label="379_ _balances[from] = _balances[from].sub(amount);\n2393-expression_statement-380-380", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2428 [label="383_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n2428-function_definition-384-388", method="bug_unchk43()", type_label=function_definition];
2432 [label="384_ address payable addr_unchk43;\n2432-new_variable-385-385", method="bug_unchk43()", type_label=new_variable];
2437 [label="385_ if_!addr_unchk43.send (10 ether) || 1==1\n2437-if-386-387", method="bug_unchk43()", type_label=if];
6438 [label="385_ end_if", method="bug_unchk43()", type_label=end_if];
2453 [label="388_ function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount);\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n2453-function_definition-389-403", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2481 [label="398_ _balances[from] = _balances[from].sub(amount);\n2481-expression_statement-399-399", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2494 [label="399_ _balances[to] = _balances[to].add(amount);\n2494-expression_statement-400-400", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2529 [label="403_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n2529-function_definition-404-406", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
2538 [label="404_ dst.call.value(msg.value)(\"\");\n2538-expression_statement-405-405", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
2553 [label="406_ function _approve(address holder, address spender, uint256 value) private {\n        require(spender != address(0), \"ERC777: approve to the zero address\");\n        _allowances[holder][spender] = value;\n        emit Approval(holder, spender, value);\n    }\n2553-function_definition-407-411", method="_approve(address holder,address spender,uint256 value)", type_label=function_definition];
2569 [label="407_ require(spender != address(0), \"ERC777: approve to the zero address\");\n2569-expression_statement-408-408", method="_approve(address holder,address spender,uint256 value)", type_label=expression_statement];
2581 [label="408_ _allowances[holder][spender] = value;\n2581-expression_statement-409-409", method="_approve(address holder,address spender,uint256 value)", type_label=expression_statement];
2597 [label="411_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n2597-function_definition-412-414", method="withdrawBal_unchk17()", type_label=function_definition];
2601 [label="412_ uint64 Balances_unchk17 = 0;\n2601-new_variable-413-413", method="withdrawBal_unchk17()", type_label=new_variable];
2607 [label="413_ msg.sender.send(Balances_unchk17);\n2607-expression_statement-414-414", method="withdrawBal_unchk17()", type_label=expression_statement];
2616 [label="414_ function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n2616-function_definition-415-429", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2644 [label="424_ address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n2644-new_variable-425-425", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=new_variable];
2657 [label="425_ if_implementer != address(0)\n2657-if-426-428", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=if];
6658 [label="425_ end_if", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=end_if];
2664 [label="426_ IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n2664-expression_statement-427-427", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2684 [label="429_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n2684-function_definition-430-432", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
2692 [label="430_ callee.call.value(1 ether);\n2692-expression_statement-431-431", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
2702 [label="432_ function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n        }\n    }\n2702-function_definition-433-450", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=function_definition];
2734 [label="443_ address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n2734-new_variable-444-444", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=new_variable];
2747 [label="444_ if_implementer != address(0)\n2747-if-445-449", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=if];
6748 [label="444_ end_if", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=end_if];
2754 [label="445_ IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n2754-expression_statement-446-446", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2774 [label="446_ if\n2774-if-447-449", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=if];
2777 [label="447_ require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n2777-expression_statement-448-448", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2789 [label="450_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n2789-function_definition-451-452", method="bug_unchk3(address payable addr)", type_label=function_definition];
2797 [label="451_ addr.send (42 ether);\n2797-expression_statement-452-452", method="bug_unchk3(address payable addr)", type_label=expression_statement];
2808 [label="454_ struct Role {\n        mapping (address => bool) bearer;\n    }\n2808-expression_statement-455-457", method="Role()", type_label=expression_statement];
2816 [label="457_ function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n2816-function_definition-458-461", method="add(Role storage role,address account)", type_label=function_definition];
2829 [label="458_ require(!has(role, account), \"Roles: account already has role\");\n2829-expression_statement-459-459", method="add(Role storage role,address account)", type_label=expression_statement];
2843 [label="459_ role.bearer[account] = true;\n2843-expression_statement-460-460", method="add(Role storage role,address account)", type_label=expression_statement];
2852 [label="461_ function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n2852-function_definition-462-465", method="remove(Role storage role,address account)", type_label=function_definition];
2865 [label="462_ require(has(role, account), \"Roles: account does not have role\");\n2865-expression_statement-463-463", method="remove(Role storage role,address account)", type_label=expression_statement];
2878 [label="463_ role.bearer[account] = false;\n2878-expression_statement-464-464", method="remove(Role storage role,address account)", type_label=expression_statement];
2887 [label="465_ function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n2887-function_definition-466-469", method="has(Role storage role,address account)", type_label=function_definition];
2905 [label="466_ require(account != address(0), \"Roles: account is the zero address\");\n2905-expression_statement-467-467", method="has(Role storage role,address account)", type_label=expression_statement];
2917 [label="467_ return role.bearer[account];\n2917-return-468-468", method="has(Role storage role,address account)", type_label=return];
2933 [label="472_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n2933-function_definition-473-481", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
2937 [label="473_ address payable addr_unchk40;\n2937-new_variable-474-474", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
2942 [label="474_ if\n2942-if-475-480", method="UncheckedExternalCall_unchk40()", type_label=if];
6943 [label="474_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
2959 [label="482_ bool public payedOut_unchk33 = false;\n2959-new_variable-483-483", method="", type_label=new_variable];
2966 [label="483_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n2966-function_definition-484-487", method="withdrawLeftOver_unchk33()", type_label=function_definition];
2970 [label="484_ require(payedOut_unchk33);\n2970-expression_statement-485-485", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
2975 [label="485_ msg.sender.send(address(this).balance);\n2975-expression_statement-486-486", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
2994 [label="488_ Roles.Role private _minters;\n2994-new_variable-489-489", method="", type_label=new_variable];
3003 [label="490_ _addMinter(msg.sender);\n3003-expression_statement-491-491", method="", type_label=expression_statement];
3010 [label="492_ bool public payedOut_unchk9 = false;\n3010-new_variable-493-493", method="", type_label=new_variable];
3017 [label="493_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n3017-function_definition-494-497", method="withdrawLeftOver_unchk9()", type_label=function_definition];
3021 [label="494_ require(payedOut_unchk9);\n3021-expression_statement-495-495", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
3026 [label="495_ msg.sender.send(address(this).balance);\n3026-expression_statement-496-496", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
3039 [label="497_ modifier onlyMinter() {\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n3039-expression_statement-498-501", method="", type_label=expression_statement];
3042 [label="498_ require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n3042-expression_statement-499-499", method="", type_label=expression_statement];
3055 [label="499_ _;\n3055-expression_statement-500-500", method="", type_label=expression_statement];
3057 [label="501_ function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n3057-function_definition-502-504", method="isMinter(address account)", type_label=function_definition];
3070 [label="502_ return _minters.has(account);\n3070-return-503-503", method="isMinter(address account)", type_label=return];
3077 [label="504_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n3077-function_definition-505-507", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
3085 [label="505_ callee.call.value(1 ether);\n3085-expression_statement-506-506", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
3095 [label="507_ function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n3095-function_definition-508-510", method="addMinter(address account)", type_label=function_definition];
3102 [label="507_ onlyMinter\n3102-expression_statement-508-508", method="addMinter(address account)", type_label=expression_statement];
3105 [label="508_ _addMinter(account);\n3105-expression_statement-509-509", method="addMinter(address account)", type_label=expression_statement];
3110 [label="510_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n3110-function_definition-511-515", method="bug_unchk19()", type_label=function_definition];
3114 [label="511_ address payable addr_unchk19;\n3114-new_variable-512-512", method="bug_unchk19()", type_label=new_variable];
3119 [label="512_ if_!addr_unchk19.send (10 ether) || 1==1\n3119-if-513-514", method="bug_unchk19()", type_label=if];
7120 [label="512_ end_if", method="bug_unchk19()", type_label=end_if];
3135 [label="515_ function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n3135-function_definition-516-518", method="renounceMinter()", type_label=function_definition];
3139 [label="516_ _removeMinter(msg.sender);\n3139-expression_statement-517-517", method="renounceMinter()", type_label=expression_statement];
3146 [label="518_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n3146-function_definition-519-521", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
3154 [label="519_ callee.send(5 ether);\n3154-expression_statement-520-520", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
3162 [label="521_ function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n3162-function_definition-522-525", method="_addMinter(address account)", type_label=function_definition];
3170 [label="522_ _minters.add(account);\n3170-expression_statement-523-523", method="_addMinter(address account)", type_label=expression_statement];
3181 [label="525_ bool public payedOut_unchk20 = false;\n3181-new_variable-526-526", method="", type_label=new_variable];
3188 [label="526_ address payable public winner_unchk20;\n3188-new_variable-527-527", method="", type_label=new_variable];
3193 [label="527_ uint public winAmount_unchk20;\n3193-new_variable-528-528", method="", type_label=new_variable];
3198 [label="528_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n3198-function_definition-529-533", method="sendToWinner_unchk20()", type_label=function_definition];
3202 [label="529_ require(!payedOut_unchk20);\n3202-expression_statement-530-530", method="sendToWinner_unchk20()", type_label=expression_statement];
3208 [label="530_ winner_unchk20.send(winAmount_unchk20);\n3208-expression_statement-531-531", method="sendToWinner_unchk20()", type_label=expression_statement];
3215 [label="531_ payedOut_unchk20 = true;\n3215-expression_statement-532-532", method="sendToWinner_unchk20()", type_label=expression_statement];
3220 [label="533_ function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n3220-function_definition-534-537", method="_removeMinter(address account)", type_label=function_definition];
3228 [label="534_ _minters.remove(account);\n3228-expression_statement-535-535", method="_removeMinter(address account)", type_label=expression_statement];
3239 [label="537_ bool public payedOut_unchk32 = false;\n3239-new_variable-538-538", method="", type_label=new_variable];
3246 [label="538_ address payable public winner_unchk32;\n3246-new_variable-539-539", method="", type_label=new_variable];
3251 [label="539_ uint public winAmount_unchk32;\n3251-new_variable-540-540", method="", type_label=new_variable];
3256 [label="540_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n3256-function_definition-541-545", method="sendToWinner_unchk32()", type_label=function_definition];
3260 [label="541_ require(!payedOut_unchk32);\n3260-expression_statement-542-542", method="sendToWinner_unchk32()", type_label=expression_statement];
3266 [label="542_ winner_unchk32.send(winAmount_unchk32);\n3266-expression_statement-543-543", method="sendToWinner_unchk32()", type_label=expression_statement];
3273 [label="543_ payedOut_unchk32 = true;\n3273-expression_statement-544-544", method="sendToWinner_unchk32()", type_label=expression_statement];
3288 [label="548_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n3288-function_definition-549-550", method="bug_unchk27(address payable addr)", type_label=function_definition];
3296 [label="549_ addr.send (42 ether);\n3296-expression_statement-550-550", method="bug_unchk27(address payable addr)", type_label=expression_statement];
3310 [label="551_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n3310-function_definition-552-556", method="bug_unchk31()", type_label=function_definition];
3314 [label="552_ address payable addr_unchk31;\n3314-new_variable-553-553", method="bug_unchk31()", type_label=new_variable];
3319 [label="553_ if_!addr_unchk31.send (10 ether) || 1==1\n3319-if-554-555", method="bug_unchk31()", type_label=if];
7320 [label="553_ end_if", method="bug_unchk31()", type_label=end_if];
3341 [label="557_ Roles.Role private _pausers;\n3341-new_variable-558-558", method="", type_label=new_variable];
3350 [label="559_ _addPauser(msg.sender);\n3350-expression_statement-560-560", method="", type_label=expression_statement];
3357 [label="561_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n3357-function_definition-562-564", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
3365 [label="562_ callee.send(5 ether);\n3365-expression_statement-563-563", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
3373 [label="564_ modifier onlyPauser() {\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n3373-expression_statement-565-568", method="", type_label=expression_statement];
3376 [label="565_ require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n3376-expression_statement-566-566", method="", type_label=expression_statement];
3389 [label="566_ _;\n3389-expression_statement-567-567", method="", type_label=expression_statement];
3391 [label="568_ function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n3391-function_definition-569-571", method="isPauser(address account)", type_label=function_definition];
3404 [label="569_ return _pausers.has(account);\n3404-return-570-570", method="isPauser(address account)", type_label=return];
3411 [label="571_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n3411-function_definition-572-576", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
3427 [label="572_ uint64 subpot_unchk46 = 3 ether;\n3427-new_variable-573-573", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
3434 [label="573_ winner_unchk46.send(subpot_unchk46);\n3434-expression_statement-574-574", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
3441 [label="574_ subpot_unchk46= 0;\n3441-expression_statement-575-575", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
3445 [label="576_ function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n3445-function_definition-577-579", method="addPauser(address account)", type_label=function_definition];
3452 [label="576_ onlyPauser\n3452-expression_statement-577-577", method="addPauser(address account)", type_label=expression_statement];
3455 [label="577_ _addPauser(account);\n3455-expression_statement-578-578", method="addPauser(address account)", type_label=expression_statement];
3460 [label="579_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n3460-function_definition-580-588", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
3464 [label="580_ address payable addr_unchk4;\n3464-new_variable-581-581", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
3469 [label="581_ if\n3469-if-582-587", method="UncheckedExternalCall_unchk4()", type_label=if];
7470 [label="581_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
3480 [label="588_ function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n3480-function_definition-589-591", method="renouncePauser()", type_label=function_definition];
3484 [label="589_ _removePauser(msg.sender);\n3484-expression_statement-590-590", method="renouncePauser()", type_label=expression_statement];
3491 [label="591_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n3491-function_definition-592-596", method="bug_unchk7()", type_label=function_definition];
3495 [label="592_ address payable addr_unchk7;\n3495-new_variable-593-593", method="bug_unchk7()", type_label=new_variable];
3500 [label="593_ if_!addr_unchk7.send (10 ether) || 1==1\n3500-if-594-595", method="bug_unchk7()", type_label=if];
7501 [label="593_ end_if", method="bug_unchk7()", type_label=end_if];
3516 [label="596_ function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n3516-function_definition-597-600", method="_addPauser(address account)", type_label=function_definition];
3524 [label="597_ _pausers.add(account);\n3524-expression_statement-598-598", method="_addPauser(address account)", type_label=expression_statement];
3535 [label="600_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n3535-function_definition-601-603", method="my_func_unchk23(address payable dst)", type_label=function_definition];
3544 [label="601_ dst.send(msg.value);\n3544-expression_statement-602-602", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
3553 [label="603_ function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n3553-function_definition-604-607", method="_removePauser(address account)", type_label=function_definition];
3561 [label="604_ _pausers.remove(account);\n3561-expression_statement-605-605", method="_removePauser(address account)", type_label=expression_statement];
3572 [label="607_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n3572-function_definition-608-610", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
3580 [label="608_ callee.send(5 ether);\n3580-expression_statement-609-609", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
3594 [label="612_ bool public payedOut_unchk45 = false;\n3594-new_variable-613-613", method="", type_label=new_variable];
3601 [label="613_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n3601-function_definition-614-617", method="withdrawLeftOver_unchk45()", type_label=function_definition];
3605 [label="614_ require(payedOut_unchk45);\n3605-expression_statement-615-615", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
3610 [label="615_ msg.sender.send(address(this).balance);\n3610-expression_statement-616-616", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
3629 [label="618_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n3629-function_definition-619-621", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
3637 [label="619_ callee.call.value(1 ether);\n3637-expression_statement-620-620", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
3653 [label="622_ bool private _paused;\n3653-new_variable-623-623", method="", type_label=new_variable];
3660 [label="624_ _paused = false;\n3660-expression_statement-625-625", method="", type_label=expression_statement];
3665 [label="626_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n3665-function_definition-627-634", method="bug_unchk30()", type_label=function_definition];
3669 [label="627_ uint receivers_unchk30;\n3669-new_variable-628-628", method="bug_unchk30()", type_label=new_variable];
3674 [label="628_ address payable addr_unchk30;\n3674-new_variable-629-629", method="bug_unchk30()", type_label=new_variable];
3679 [label="629_ if\n3679-if-630-633", method="bug_unchk30()", type_label=if];
7680 [label="629_ end_if", method="bug_unchk30()", type_label=end_if];
3689 [label="630_ receivers_unchk30 +=1;\n3689-expression_statement-631-631", method="bug_unchk30()", type_label=expression_statement];
3696 [label="634_ function paused() public view returns (bool) {\n        return _paused;\n    }\n3696-function_definition-635-637", method="paused()", type_label=function_definition];
3705 [label="635_ return _paused;\n3705-return-636-636", method="paused()", type_label=return];
3707 [label="637_ bool public payedOut_unchk8 = false;\n3707-new_variable-638-638", method="", type_label=new_variable];
3714 [label="638_ address payable public winner_unchk8;\n3714-new_variable-639-639", method="", type_label=new_variable];
3719 [label="639_ uint public winAmount_unchk8;\n3719-new_variable-640-640", method="", type_label=new_variable];
3724 [label="640_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n3724-function_definition-641-645", method="sendToWinner_unchk8()", type_label=function_definition];
3728 [label="641_ require(!payedOut_unchk8);\n3728-expression_statement-642-642", method="sendToWinner_unchk8()", type_label=expression_statement];
3734 [label="642_ winner_unchk8.send(winAmount_unchk8);\n3734-expression_statement-643-643", method="sendToWinner_unchk8()", type_label=expression_statement];
3741 [label="643_ payedOut_unchk8 = true;\n3741-expression_statement-644-644", method="sendToWinner_unchk8()", type_label=expression_statement];
3746 [label="645_ modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n3746-expression_statement-646-649", method="", type_label=expression_statement];
3749 [label="646_ require(!_paused, \"Pausable: paused\");\n3749-expression_statement-647-647", method="", type_label=expression_statement];
3758 [label="647_ _;\n3758-expression_statement-648-648", method="", type_label=expression_statement];
3760 [label="649_ modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n3760-expression_statement-650-653", method="", type_label=expression_statement];
3763 [label="650_ require(_paused, \"Pausable: not paused\");\n3763-expression_statement-651-651", method="", type_label=expression_statement];
3771 [label="651_ _;\n3771-expression_statement-652-652", method="", type_label=expression_statement];
3773 [label="653_ function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n3773-function_definition-654-657", method="pause()", type_label=function_definition];
3776 [label="653_ onlyPauser\n3776-expression_statement-654-654", method="pause()", type_label=expression_statement];
3778 [label="653_ whenNotPaused\n3778-expression_statement-654-654", method="pause()", type_label=expression_statement];
3781 [label="654_ _paused = true;\n3781-expression_statement-655-655", method="pause()", type_label=expression_statement];
3792 [label="657_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n3792-function_definition-658-659", method="bug_unchk39(address payable addr)", type_label=function_definition];
3800 [label="658_ addr.send (4 ether);\n3800-expression_statement-659-659", method="bug_unchk39(address payable addr)", type_label=expression_statement];
3808 [label="659_ function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n3808-function_definition-660-663", method="unpause()", type_label=function_definition];
3811 [label="659_ onlyPauser\n3811-expression_statement-660-660", method="unpause()", type_label=expression_statement];
3813 [label="659_ whenPaused\n3813-expression_statement-660-660", method="unpause()", type_label=expression_statement];
3816 [label="660_ _paused = false;\n3816-expression_statement-661-661", method="unpause()", type_label=expression_statement];
3827 [label="663_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n3827-function_definition-664-666", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
3836 [label="664_ dst.call.value(msg.value)(\"\");\n3836-expression_statement-665-665", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
3873 [label="672_ ERC777(\"SKYBIT\", \"SKYBIT\", defaultOperators)\n3873-expression_statement-673-673", method="", type_label=expression_statement];
3884 [label="674_ _mint(msg.sender, msg.sender, initialSupply, \"\", \"\");\n3884-expression_statement-675-675", method="", type_label=expression_statement];
3903 [label="676_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n3903-function_definition-677-679", method="my_func_unchk35(address payable dst)", type_label=function_definition];
3912 [label="677_ dst.send(msg.value);\n3912-expression_statement-678-678", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
3921 [label="679_ function mint(address operator, address account, uint256 amount, bytes memory userData, bytes memory operatorData) public onlyMinter returns (bool) {\n        _mint(operator, account, amount, userData, operatorData);\n        return true;\n    }\n3921-function_definition-680-683", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
3944 [label="679_ onlyMinter\n3944-expression_statement-680-680", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
3951 [label="680_ _mint(operator, account, amount, userData, operatorData);\n3951-expression_statement-681-681", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
3964 [label="681_ return true;\n3964-return-682-682", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=return];
3967 [label="683_ bool public payedOut_unchk44 = false;\n3967-new_variable-684-684", method="", type_label=new_variable];
3974 [label="684_ address payable public winner_unchk44;\n3974-new_variable-685-685", method="", type_label=new_variable];
3979 [label="685_ uint public winAmount_unchk44;\n3979-new_variable-686-686", method="", type_label=new_variable];
3984 [label="686_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n3984-function_definition-687-691", method="sendToWinner_unchk44()", type_label=function_definition];
3988 [label="687_ require(!payedOut_unchk44);\n3988-expression_statement-688-688", method="sendToWinner_unchk44()", type_label=expression_statement];
3994 [label="688_ winner_unchk44.send(winAmount_unchk44);\n3994-expression_statement-689-689", method="sendToWinner_unchk44()", type_label=expression_statement];
4001 [label="689_ payedOut_unchk44 = true;\n4001-expression_statement-690-690", method="sendToWinner_unchk44()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1036;
1108;
1140;
1398;
1518;
1601;
2210;
2952;
3479;
3694;
433 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
470 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
507 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 529  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
524 -> 4525  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4525 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 4525  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
529 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
531 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
553 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
590 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
624 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
811 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 938  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
922 -> 4923  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4923 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 922  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
938 -> 935  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
947 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
996 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1007 -> 1011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1011 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 1021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1031  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5022 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 5022  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1038 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1047 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1049 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 1059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1079 -> 1083  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1083 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1093 -> 1103  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5094 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1103 -> 5094  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1110 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1119 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1121 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1125 -> 1130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1154 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1158 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1182 -> 1198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1221 -> 1225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1225 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1240 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1268 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1293 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1330 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1333 -> 1341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1349 -> 1361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1379 -> 1383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1383 -> 1388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1416 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1438 -> 1454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1454 -> 1461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1461 -> 1468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1472 -> 1480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1480 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1497  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1492 -> 1507  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5493 -> 1518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1497 -> 5493  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1507 -> 5493  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1533 -> 1537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1537 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1555 -> 1563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> 1575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1575 -> 1580  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1575 -> 1592  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5576 -> 1601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1580 -> 5576  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1592 -> 5576  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1609 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 1632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1632 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1643 -> 1653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1655 -> 1664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1673 -> 1697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1697 -> 1712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1732 -> 1748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1748 -> 1755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1755 -> 1762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1766 -> 1786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1786 -> 1801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1816 -> 1825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1840 -> 1857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1857 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1863 -> 1872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1881 -> 1897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1897 -> 1905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1905 -> 1914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1914 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1917 -> 1925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1935 -> 1955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1955 -> 1967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1967 -> 1979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1979 -> 1987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1987 -> 2004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2004 -> 2021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2021 -> 2039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2039 -> 2059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2059 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2062 -> 2066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2066 -> 2072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2081 -> 2105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2105 -> 2117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2117 -> 2126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2126 -> 2139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2181 -> 2185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2185 -> 2190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2190 -> 2195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2195 -> 2205  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6196 -> 2212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2205 -> 6196  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2212 -> 2244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2244 -> 2256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2256 -> 2268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2268 -> 2283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2283 -> 2298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2315 -> 2323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2331 -> 2355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2355 -> 2367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2367 -> 2384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2384 -> 2393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2428 -> 2432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2432 -> 2437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2437 -> 6438  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2453 -> 2481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2481 -> 2494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2529 -> 2538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2553 -> 2569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2569 -> 2581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2597 -> 2601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2601 -> 2607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2616 -> 2644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2644 -> 2657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2657 -> 2664  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2657 -> 6658  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6658 -> 2684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2664 -> 6658  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2684 -> 2692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2702 -> 2734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2734 -> 2747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2747 -> 2754  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2747 -> 2774  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6748 -> 2789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2754 -> 6748  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2774 -> 2777  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2774 -> 6748  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2777 -> 6748  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2789 -> 2797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2816 -> 2829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2829 -> 2843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2852 -> 2865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2865 -> 2878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2887 -> 2905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2905 -> 2917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2917 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2933 -> 2937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2937 -> 2942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2966 -> 2970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2970 -> 2975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3017 -> 3021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3021 -> 3026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3042 -> 3055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3057 -> 3070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3070 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3077 -> 3085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3095 -> 3105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3110 -> 3114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3114 -> 3119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3119 -> 7120  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3135 -> 3139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3146 -> 3154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3162 -> 3170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3181 -> 3188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3188 -> 3193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3198 -> 3202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3202 -> 3208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3208 -> 3215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3220 -> 3228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3239 -> 3246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3246 -> 3251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3256 -> 3260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3260 -> 3266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3266 -> 3273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3288 -> 3296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3310 -> 3314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3314 -> 3319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3319 -> 7320  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3357 -> 3365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3376 -> 3389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3391 -> 3404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3404 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3411 -> 3427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3427 -> 3434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3434 -> 3441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3445 -> 3455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3460 -> 3464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3464 -> 3469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3480 -> 3484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3491 -> 3495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3495 -> 3500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3500 -> 7501  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3516 -> 3524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3535 -> 3544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3553 -> 3561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3572 -> 3580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3601 -> 3605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3605 -> 3610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3629 -> 3637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3665 -> 3669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3669 -> 3674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3674 -> 3679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3679 -> 3689  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
7680 -> 3696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3689 -> 7680  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3696 -> 3705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3705 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3707 -> 3714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3714 -> 3719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3724 -> 3728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3728 -> 3734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3734 -> 3741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3746 -> 3760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3749 -> 3758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3763 -> 3771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3773 -> 3781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3776 -> 3778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3792 -> 3800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3808 -> 3816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3811 -> 3813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3827 -> 3836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3903 -> 3912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3921 -> 3951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3951 -> 3964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3964 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3967 -> 3974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3974 -> 3979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3984 -> 3988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3988 -> 3994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3994 -> 4001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 5022  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1108 -> 5094  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1140 -> 5131  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1398 -> 5389  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2210 -> 6196  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2952 -> 6943  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3479 -> 7470  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3694 -> 7680  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
