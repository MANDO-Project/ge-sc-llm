digraph  {
13 [label="2_ function transfer(address to, uint256 value) external returns (bool);\n13-function_definition-3-3", method="transfer(address to,uint256 value)", type_label=function_definition];
28 [label="3_ function approve(address spender, uint256 value) external returns (bool);\n28-function_definition-4-4", method="approve(address spender,uint256 value)", type_label=function_definition];
43 [label="4_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n43-function_definition-5-5", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
62 [label="5_ function totalSupply() external view returns (uint256);\n62-function_definition-6-6", method="totalSupply()", type_label=function_definition];
70 [label="6_ function balanceOf(address who) external view returns (uint256);\n70-function_definition-7-7", method="balanceOf(address who)", type_label=function_definition];
82 [label="7_ function allowance(address owner, address spender) external view returns (uint256);\n82-function_definition-8-8", method="allowance(address owner,address spender)", type_label=function_definition];
133 [label="13_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n133-function_definition-14-21", method="mul(uint256 a,uint256 b)", type_label=function_definition];
150 [label="14_ if_a == 0\n150-if-15-17", method="mul(uint256 a,uint256 b)", type_label=if];
1792 [label="14_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
155 [label="15_ return 0;\n155-return-16-16", method="mul(uint256 a,uint256 b)", type_label=return];
157 [label="17_ uint256 c = a * b;\n157-new_variable-18-18", method="mul(uint256 a,uint256 b)", type_label=new_variable];
165 [label="18_ require(c / a == b);\n165-expression_statement-19-19", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
174 [label="19_ return c;\n174-return-20-20", method="mul(uint256 a,uint256 b)", type_label=return];
176 [label="21_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n176-function_definition-22-26", method="div(uint256 a,uint256 b)", type_label=function_definition];
193 [label="22_ require(b > 0);\n193-expression_statement-23-23", method="div(uint256 a,uint256 b)", type_label=expression_statement];
200 [label="23_ uint256 c = a / b;\n200-new_variable-24-24", method="div(uint256 a,uint256 b)", type_label=new_variable];
208 [label="24_ return c;\n208-return-25-25", method="div(uint256 a,uint256 b)", type_label=return];
210 [label="26_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n210-function_definition-27-31", method="sub(uint256 a,uint256 b)", type_label=function_definition];
227 [label="27_ require(b <= a);\n227-expression_statement-28-28", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
234 [label="28_ uint256 c = a - b;\n234-new_variable-29-29", method="sub(uint256 a,uint256 b)", type_label=new_variable];
242 [label="29_ return c;\n242-return-30-30", method="sub(uint256 a,uint256 b)", type_label=return];
244 [label="31_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n244-function_definition-32-36", method="add(uint256 a,uint256 b)", type_label=function_definition];
261 [label="32_ uint256 c = a + b;\n261-new_variable-33-33", method="add(uint256 a,uint256 b)", type_label=new_variable];
269 [label="33_ require(c >= a);\n269-expression_statement-34-34", method="add(uint256 a,uint256 b)", type_label=expression_statement];
276 [label="34_ return c;\n276-return-35-35", method="add(uint256 a,uint256 b)", type_label=return];
278 [label="36_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n278-function_definition-37-40", method="mod(uint256 a,uint256 b)", type_label=function_definition];
295 [label="37_ require(b != 0);\n295-expression_statement-38-38", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
302 [label="38_ return a % b;\n302-return-39-39", method="mod(uint256 a,uint256 b)", type_label=return];
321 [label="44_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n321-function_definition-45-47", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
329 [label="45_ callee.call.value(1 ether);\n329-expression_statement-46-46", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
339 [label="47_ mapping (address => uint256) private _balances;\n339-new_variable-48-48", method="", type_label=new_variable];
346 [label="48_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n346-function_definition-49-50", method="bug_unchk3(address payable addr)", type_label=function_definition];
354 [label="49_ addr.send (42 ether);\n354-expression_statement-50-50", method="bug_unchk3(address payable addr)", type_label=expression_statement];
362 [label="50_ mapping (address => mapping (address => uint256)) private _allowed;\n362-new_variable-51-51", method="", type_label=new_variable];
371 [label="51_ bool public payedOut_unchk9 = false;\n371-new_variable-52-52", method="", type_label=new_variable];
378 [label="52_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n378-function_definition-53-56", method="withdrawLeftOver_unchk9()", type_label=function_definition];
382 [label="53_ require(payedOut_unchk9);\n382-expression_statement-54-54", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
387 [label="54_ msg.sender.send(address(this).balance);\n387-expression_statement-55-55", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
400 [label="56_ uint256 private _totalSupply;\n400-new_variable-57-57", method="", type_label=new_variable];
405 [label="57_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n405-function_definition-58-60", method="totalSupply()", type_label=function_definition];
414 [label="58_ return _totalSupply;\n414-return-59-59", method="totalSupply()", type_label=return];
416 [label="60_ bool public payedOut_unchk20 = false;\n416-new_variable-61-61", method="", type_label=new_variable];
423 [label="61_ address payable public winner_unchk20;\n423-new_variable-62-62", method="", type_label=new_variable];
428 [label="62_ uint public winAmount_unchk20;\n428-new_variable-63-63", method="", type_label=new_variable];
433 [label="63_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n433-function_definition-64-68", method="sendToWinner_unchk20()", type_label=function_definition];
437 [label="64_ require(!payedOut_unchk20);\n437-expression_statement-65-65", method="sendToWinner_unchk20()", type_label=expression_statement];
443 [label="65_ winner_unchk20.send(winAmount_unchk20);\n443-expression_statement-66-66", method="sendToWinner_unchk20()", type_label=expression_statement];
450 [label="66_ payedOut_unchk20 = true;\n450-expression_statement-67-67", method="sendToWinner_unchk20()", type_label=expression_statement];
455 [label="68_ function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n455-function_definition-69-71", method="balanceOf(address owner)", type_label=function_definition];
468 [label="69_ return _balances[owner];\n468-return-70-70", method="balanceOf(address owner)", type_label=return];
472 [label="71_ bool public payedOut_unchk32 = false;\n472-new_variable-72-72", method="", type_label=new_variable];
479 [label="72_ address payable public winner_unchk32;\n479-new_variable-73-73", method="", type_label=new_variable];
484 [label="73_ uint public winAmount_unchk32;\n484-new_variable-74-74", method="", type_label=new_variable];
489 [label="74_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n489-function_definition-75-79", method="sendToWinner_unchk32()", type_label=function_definition];
493 [label="75_ require(!payedOut_unchk32);\n493-expression_statement-76-76", method="sendToWinner_unchk32()", type_label=expression_statement];
499 [label="76_ winner_unchk32.send(winAmount_unchk32);\n499-expression_statement-77-77", method="sendToWinner_unchk32()", type_label=expression_statement];
506 [label="77_ payedOut_unchk32 = true;\n506-expression_statement-78-78", method="sendToWinner_unchk32()", type_label=expression_statement];
511 [label="79_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n511-function_definition-80-82", method="allowance(address owner,address spender)", type_label=function_definition];
528 [label="80_ return _allowed[owner][spender];\n528-return-81-81", method="allowance(address owner,address spender)", type_label=return];
534 [label="82_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n534-function_definition-83-85", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
542 [label="83_ callee.send(5 ether);\n542-expression_statement-84-84", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
550 [label="85_ function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n550-function_definition-86-89", method="transfer(address to,uint256 value)", type_label=function_definition];
566 [label="86_ _transfer(msg.sender, to, value);\n566-expression_statement-87-87", method="transfer(address to,uint256 value)", type_label=expression_statement];
577 [label="87_ return true;\n577-return-88-88", method="transfer(address to,uint256 value)", type_label=return];
580 [label="89_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n580-function_definition-90-94", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
596 [label="90_ uint64 subpot_unchk46 = 3 ether;\n596-new_variable-91-91", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
603 [label="91_ winner_unchk46.send(subpot_unchk46);\n603-expression_statement-92-92", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
610 [label="92_ subpot_unchk46= 0;\n610-expression_statement-93-93", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
614 [label="94_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n614-function_definition-95-98", method="approve(address spender,uint256 value)", type_label=function_definition];
630 [label="95_ _approve(msg.sender, spender, value);\n630-expression_statement-96-96", method="approve(address spender,uint256 value)", type_label=expression_statement];
641 [label="96_ return true;\n641-return-97-97", method="approve(address spender,uint256 value)", type_label=return];
644 [label="98_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n644-function_definition-99-107", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
648 [label="99_ address payable addr_unchk4;\n648-new_variable-100-100", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
653 [label="100_ if\n653-if-101-106", method="UncheckedExternalCall_unchk4()", type_label=if];
2295 [label="100_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
664 [label="107_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n664-function_definition-108-112", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
684 [label="108_ _transfer(from, to, value);\n684-expression_statement-109-109", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
693 [label="109_ _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n693-expression_statement-110-110", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
715 [label="110_ return true;\n715-return-111-111", method="transferFrom(address from,address to,uint256 value)", type_label=return];
718 [label="112_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n718-function_definition-113-117", method="bug_unchk7()", type_label=function_definition];
722 [label="113_ address payable addr_unchk7;\n722-new_variable-114-114", method="bug_unchk7()", type_label=new_variable];
727 [label="114_ if_!addr_unchk7.send (10 ether) || 1==1\n727-if-115-116", method="bug_unchk7()", type_label=if];
2369 [label="114_ end_if", method="bug_unchk7()", type_label=end_if];
743 [label="117_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n743-function_definition-118-121", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
759 [label="118_ _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n759-expression_statement-119-119", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
781 [label="119_ return true;\n781-return-120-120", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
784 [label="121_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n784-function_definition-122-124", method="my_func_unchk23(address payable dst)", type_label=function_definition];
793 [label="122_ dst.send(msg.value);\n793-expression_statement-123-123", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
802 [label="124_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n802-function_definition-125-128", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
818 [label="125_ _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n818-expression_statement-126-126", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
840 [label="126_ return true;\n840-return-127-127", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
843 [label="128_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n843-function_definition-129-131", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
851 [label="129_ callee.send(5 ether);\n851-expression_statement-130-130", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
859 [label="131_ function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n859-function_definition-132-137", method="_transfer(address from,address to,uint256 value)", type_label=function_definition];
875 [label="132_ require(to != address(0));\n875-expression_statement-133-133", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
884 [label="133_ _balances[from] = _balances[from].sub(value);\n884-expression_statement-134-134", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
897 [label="134_ _balances[to] = _balances[to].add(value);\n897-expression_statement-135-135", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
918 [label="137_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n918-function_definition-138-145", method="bug_unchk30()", type_label=function_definition];
922 [label="138_ uint receivers_unchk30;\n922-new_variable-139-139", method="bug_unchk30()", type_label=new_variable];
927 [label="139_ address payable addr_unchk30;\n927-new_variable-140-140", method="bug_unchk30()", type_label=new_variable];
932 [label="140_ if\n932-if-141-144", method="bug_unchk30()", type_label=if];
2574 [label="140_ end_if", method="bug_unchk30()", type_label=end_if];
942 [label="141_ receivers_unchk30 +=1;\n942-expression_statement-142-142", method="bug_unchk30()", type_label=expression_statement];
949 [label="145_ function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n949-function_definition-146-151", method="_mint(address account,uint256 value)", type_label=function_definition];
961 [label="146_ require(account != address(0));\n961-expression_statement-147-147", method="_mint(address account,uint256 value)", type_label=expression_statement];
970 [label="147_ _totalSupply = _totalSupply.add(value);\n970-expression_statement-148-148", method="_mint(address account,uint256 value)", type_label=expression_statement];
979 [label="148_ _balances[account] = _balances[account].add(value);\n979-expression_statement-149-149", method="_mint(address account,uint256 value)", type_label=expression_statement];
1002 [label="151_ bool public payedOut_unchk8 = false;\n1002-new_variable-152-152", method="", type_label=new_variable];
1009 [label="152_ address payable public winner_unchk8;\n1009-new_variable-153-153", method="", type_label=new_variable];
1014 [label="153_ uint public winAmount_unchk8;\n1014-new_variable-154-154", method="", type_label=new_variable];
1019 [label="154_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1019-function_definition-155-159", method="sendToWinner_unchk8()", type_label=function_definition];
1023 [label="155_ require(!payedOut_unchk8);\n1023-expression_statement-156-156", method="sendToWinner_unchk8()", type_label=expression_statement];
1029 [label="156_ winner_unchk8.send(winAmount_unchk8);\n1029-expression_statement-157-157", method="sendToWinner_unchk8()", type_label=expression_statement];
1036 [label="157_ payedOut_unchk8 = true;\n1036-expression_statement-158-158", method="sendToWinner_unchk8()", type_label=expression_statement];
1041 [label="159_ function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n1041-function_definition-160-165", method="_burn(address account,uint256 value)", type_label=function_definition];
1053 [label="160_ require(account != address(0));\n1053-expression_statement-161-161", method="_burn(address account,uint256 value)", type_label=expression_statement];
1062 [label="161_ _totalSupply = _totalSupply.sub(value);\n1062-expression_statement-162-162", method="_burn(address account,uint256 value)", type_label=expression_statement];
1071 [label="162_ _balances[account] = _balances[account].sub(value);\n1071-expression_statement-163-163", method="_burn(address account,uint256 value)", type_label=expression_statement];
1094 [label="165_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1094-function_definition-166-167", method="bug_unchk39(address payable addr)", type_label=function_definition];
1102 [label="166_ addr.send (4 ether);\n1102-expression_statement-167-167", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1110 [label="167_ function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n1110-function_definition-168-173", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
1126 [label="168_ require(spender != address(0));\n1126-expression_statement-169-169", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1135 [label="169_ require(owner != address(0));\n1135-expression_statement-170-170", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1144 [label="170_ _allowed[owner][spender] = value;\n1144-expression_statement-171-171", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1160 [label="173_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1160-function_definition-174-176", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1169 [label="174_ dst.call.value(msg.value)(\"\");\n1169-expression_statement-175-175", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1184 [label="176_ function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n1184-function_definition-177-180", method="_burnFrom(address account,uint256 value)", type_label=function_definition];
1196 [label="177_ _burn(account, value);\n1196-expression_statement-178-178", method="_burnFrom(address account,uint256 value)", type_label=expression_statement];
1203 [label="178_ _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n1203-expression_statement-179-179", method="_burnFrom(address account,uint256 value)", type_label=expression_statement];
1225 [label="180_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1225-function_definition-181-183", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1234 [label="181_ dst.send(msg.value);\n1234-expression_statement-182-182", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1253 [label="186_ function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n1253-function_definition-187-189", method="burn(uint256 value)", type_label=function_definition];
1261 [label="187_ _burn(msg.sender, value);\n1261-expression_statement-188-188", method="burn(uint256 value)", type_label=expression_statement];
1270 [label="189_ bool public payedOut_unchk44 = false;\n1270-new_variable-190-190", method="", type_label=new_variable];
1277 [label="190_ address payable public winner_unchk44;\n1277-new_variable-191-191", method="", type_label=new_variable];
1282 [label="191_ uint public winAmount_unchk44;\n1282-new_variable-192-192", method="", type_label=new_variable];
1287 [label="192_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1287-function_definition-193-197", method="sendToWinner_unchk44()", type_label=function_definition];
1291 [label="193_ require(!payedOut_unchk44);\n1291-expression_statement-194-194", method="sendToWinner_unchk44()", type_label=expression_statement];
1297 [label="194_ winner_unchk44.send(winAmount_unchk44);\n1297-expression_statement-195-195", method="sendToWinner_unchk44()", type_label=expression_statement];
1304 [label="195_ payedOut_unchk44 = true;\n1304-expression_statement-196-196", method="sendToWinner_unchk44()", type_label=expression_statement];
1309 [label="197_ function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n1309-function_definition-198-200", method="burnFrom(address from,uint256 value)", type_label=function_definition];
1321 [label="198_ _burnFrom(from, value);\n1321-expression_statement-199-199", method="burnFrom(address from,uint256 value)", type_label=expression_statement];
1328 [label="200_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1328-function_definition-201-209", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1332 [label="201_ address payable addr_unchk40;\n1332-new_variable-202-202", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1337 [label="202_ if\n1337-if-203-208", method="UncheckedExternalCall_unchk40()", type_label=if];
2979 [label="202_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1358 [label="212_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n1358-function_definition-213-215", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
1366 [label="213_ callee.call.value(1 ether);\n1366-expression_statement-214-214", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
1376 [label="215_ string private _name;\n1376-new_variable-216-216", method="", type_label=new_variable];
1381 [label="216_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n1381-function_definition-217-221", method="bug_unchk19()", type_label=function_definition];
1385 [label="217_ address payable addr_unchk19;\n1385-new_variable-218-218", method="bug_unchk19()", type_label=new_variable];
1390 [label="218_ if_!addr_unchk19.send (10 ether) || 1==1\n1390-if-219-220", method="bug_unchk19()", type_label=if];
3032 [label="218_ end_if", method="bug_unchk19()", type_label=end_if];
1406 [label="221_ string private _symbol;\n1406-new_variable-222-222", method="", type_label=new_variable];
1411 [label="222_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n1411-function_definition-223-225", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
1419 [label="223_ callee.send(5 ether);\n1419-expression_statement-224-224", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
1427 [label="225_ uint8 private _decimals;\n1427-new_variable-226-226", method="", type_label=new_variable];
1446 [label="227_ _name = name;\n1446-expression_statement-228-228", method="", type_label=expression_statement];
1450 [label="228_ _symbol = symbol;\n1450-expression_statement-229-229", method="", type_label=expression_statement];
1454 [label="229_ _decimals = decimals;\n1454-expression_statement-230-230", method="", type_label=expression_statement];
1458 [label="231_ bool public payedOut_unchk33 = false;\n1458-new_variable-232-232", method="", type_label=new_variable];
1465 [label="232_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1465-function_definition-233-236", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1469 [label="233_ require(payedOut_unchk33);\n1469-expression_statement-234-234", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1474 [label="234_ msg.sender.send(address(this).balance);\n1474-expression_statement-235-235", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1487 [label="236_ function name() public view returns (string memory) {\n        return _name;\n    }\n1487-function_definition-237-239", method="name()", type_label=function_definition];
1496 [label="237_ return _name;\n1496-return-238-238", method="name()", type_label=return];
1498 [label="239_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1498-function_definition-240-241", method="bug_unchk27(address payable addr)", type_label=function_definition];
1506 [label="240_ addr.send (42 ether);\n1506-expression_statement-241-241", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1514 [label="241_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n1514-function_definition-242-244", method="symbol()", type_label=function_definition];
1523 [label="242_ return _symbol;\n1523-return-243-243", method="symbol()", type_label=return];
1525 [label="244_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n1525-function_definition-245-249", method="bug_unchk31()", type_label=function_definition];
1529 [label="245_ address payable addr_unchk31;\n1529-new_variable-246-246", method="bug_unchk31()", type_label=new_variable];
1534 [label="246_ if_!addr_unchk31.send (10 ether) || 1==1\n1534-if-247-248", method="bug_unchk31()", type_label=if];
3176 [label="246_ end_if", method="bug_unchk31()", type_label=end_if];
1550 [label="249_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n1550-function_definition-250-252", method="decimals()", type_label=function_definition];
1559 [label="250_ return _decimals;\n1559-return-251-251", method="decimals()", type_label=return];
1561 [label="252_ bool public payedOut_unchk45 = false;\n1561-new_variable-253-253", method="", type_label=new_variable];
1568 [label="253_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n1568-function_definition-254-257", method="withdrawLeftOver_unchk45()", type_label=function_definition];
1572 [label="254_ require(payedOut_unchk45);\n1572-expression_statement-255-255", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1577 [label="255_ msg.sender.send(address(this).balance);\n1577-expression_statement-256-256", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1607 [label="260_ ERC20Detailed('Aggregion Token', 'AGR', 4)\n1607-expression_statement-261-261", method="", type_label=expression_statement];
1618 [label="261_ super._mint(msg.sender, 30000000000000);\n1618-expression_statement-262-262", method="", type_label=expression_statement];
1629 [label="263_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n1629-function_definition-264-266", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
1637 [label="264_ callee.call.value(1 ether);\n1637-expression_statement-265-265", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
663;
947;
1347;
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 155  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
150 -> 1792  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1792 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 1792  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
157 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
176 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
210 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
234 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
244 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
276 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
278 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
321 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
416 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
423 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
472 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
499 -> 506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
534 -> 542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
566 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
580 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
603 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
644 -> 648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
648 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
718 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 2369  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
743 -> 759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
784 -> 793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
843 -> 851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
859 -> 875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 942  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2574 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 2574  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
949 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1023 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1041 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1062 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1094 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1126 -> 1135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1135 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 1169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1184 -> 1196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1196 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1225 -> 1234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 1261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1270 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1277 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1287 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1291 -> 1297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1309 -> 1321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 1332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 1337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1358 -> 1366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1381 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1385 -> 1390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1390 -> 3032  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1411 -> 1419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1446 -> 1450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 1454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1469 -> 1474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1487 -> 1496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1496 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1498 -> 1506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1514 -> 1523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1523 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1525 -> 1529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1529 -> 1534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1534 -> 3176  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1550 -> 1559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1559 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1568 -> 1572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 1577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1629 -> 1637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 2295  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
947 -> 2574  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1347 -> 2979  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
