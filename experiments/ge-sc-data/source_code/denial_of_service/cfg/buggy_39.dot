digraph  {
13 [label="2_ bool public payedOut_unchk8 = false;\n13-new_variable-3-3", method="", type_label=new_variable];
20 [label="3_ address payable public winner_unchk8;\n20-new_variable-4-4", method="", type_label=new_variable];
25 [label="4_ uint public winAmount_unchk8;\n25-new_variable-5-5", method="", type_label=new_variable];
30 [label="5_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n30-function_definition-6-10", method="sendToWinner_unchk8()", type_label=function_definition];
34 [label="6_ require(!payedOut_unchk8);\n34-expression_statement-7-7", method="sendToWinner_unchk8()", type_label=expression_statement];
40 [label="7_ winner_unchk8.send(winAmount_unchk8);\n40-expression_statement-8-8", method="sendToWinner_unchk8()", type_label=expression_statement];
47 [label="8_ payedOut_unchk8 = true;\n47-expression_statement-9-9", method="sendToWinner_unchk8()", type_label=expression_statement];
52 [label="10_ mapping (address => uint256) public balanceOf;\n52-new_variable-11-11", method="", type_label=new_variable];
59 [label="11_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n59-function_definition-12-13", method="bug_unchk39(address payable addr)", type_label=function_definition];
67 [label="12_ addr.send (4 ether);\n67-expression_statement-13-13", method="bug_unchk39(address payable addr)", type_label=expression_statement];
75 [label="13_ string public name = \"TAMC\";\n75-new_variable-14-14", method="", type_label=new_variable];
82 [label="14_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n82-function_definition-15-17", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
91 [label="15_ dst.call.value(msg.value)(\"\");\n91-expression_statement-16-16", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
106 [label="17_ string public symbol = \"TAMC\";\n106-new_variable-18-18", method="", type_label=new_variable];
113 [label="18_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n113-function_definition-19-21", method="my_func_unchk35(address payable dst)", type_label=function_definition];
122 [label="19_ dst.send(msg.value);\n122-expression_statement-20-20", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
131 [label="21_ uint8 public decimals = 18;\n131-new_variable-22-22", method="", type_label=new_variable];
137 [label="22_ uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);\n137-new_variable-23-23", method="", type_label=new_variable];
150 [label="23_ bool public payedOut_unchk45 = false;\n150-new_variable-24-24", method="", type_label=new_variable];
157 [label="24_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n157-function_definition-25-28", method="withdrawLeftOver_unchk45()", type_label=function_definition];
161 [label="25_ require(payedOut_unchk45);\n161-expression_statement-26-26", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
166 [label="26_ msg.sender.send(address(this).balance);\n166-expression_statement-27-27", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
195 [label="30_ balanceOf[msg.sender] = totalSupply;\n195-expression_statement-31-31", method="", type_label=expression_statement];
215 [label="33_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n215-function_definition-34-42", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
219 [label="34_ address payable addr_unchk40;\n219-new_variable-35-35", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
224 [label="35_ if\n224-if-36-41", method="UncheckedExternalCall_unchk40()", type_label=if];
775 [label="35_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
235 [label="42_ function transfer(address to, uint256 value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= value);\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n235-function_definition-43-49", method="transfer(address to,uint256 value)", type_label=function_definition];
252 [label="43_ require(balanceOf[msg.sender] >= value);\n252-expression_statement-44-44", method="transfer(address to,uint256 value)", type_label=expression_statement];
263 [label="44_ balanceOf[msg.sender] -= value;\n263-expression_statement-45-45", method="transfer(address to,uint256 value)", type_label=expression_statement];
271 [label="45_ balanceOf[to] += value;\n271-expression_statement-46-46", method="transfer(address to,uint256 value)", type_label=expression_statement];
287 [label="47_ return true;\n287-return-48-48", method="transfer(address to,uint256 value)", type_label=return];
290 [label="49_ bool public payedOut_unchk33 = false;\n290-new_variable-50-50", method="", type_label=new_variable];
297 [label="50_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n297-function_definition-51-54", method="withdrawLeftOver_unchk33()", type_label=function_definition];
301 [label="51_ require(payedOut_unchk33);\n301-expression_statement-52-52", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
306 [label="52_ msg.sender.send(address(this).balance);\n306-expression_statement-53-53", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
319 [label="54_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n319-function_definition-55-57", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
327 [label="55_ callee.call.value(1 ether);\n327-expression_statement-56-56", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
351 [label="58_ bool public payedOut_unchk44 = false;\n351-new_variable-59-59", method="", type_label=new_variable];
358 [label="59_ address payable public winner_unchk44;\n358-new_variable-60-60", method="", type_label=new_variable];
363 [label="60_ uint public winAmount_unchk44;\n363-new_variable-61-61", method="", type_label=new_variable];
368 [label="61_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n368-function_definition-62-66", method="sendToWinner_unchk44()", type_label=function_definition];
372 [label="62_ require(!payedOut_unchk44);\n372-expression_statement-63-63", method="sendToWinner_unchk44()", type_label=expression_statement];
378 [label="63_ winner_unchk44.send(winAmount_unchk44);\n378-expression_statement-64-64", method="sendToWinner_unchk44()", type_label=expression_statement];
385 [label="64_ payedOut_unchk44 = true;\n385-expression_statement-65-65", method="sendToWinner_unchk44()", type_label=expression_statement];
390 [label="66_ mapping(address => mapping(address => uint256)) public allowance;\n390-new_variable-67-67", method="", type_label=new_variable];
399 [label="67_ function approve(address spender, uint256 value)\n        public\n        returns (bool success)\n    {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n399-function_definition-68-75", method="approve(address spender,uint256 value)", type_label=function_definition];
416 [label="71_ allowance[msg.sender][spender] = value;\n416-expression_statement-72-72", method="approve(address spender,uint256 value)", type_label=expression_statement];
436 [label="73_ return true;\n436-return-74-74", method="approve(address spender,uint256 value)", type_label=return];
439 [label="75_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n439-function_definition-76-77", method="bug_unchk27(address payable addr)", type_label=function_definition];
447 [label="76_ addr.send (42 ether);\n447-expression_statement-77-77", method="bug_unchk27(address payable addr)", type_label=expression_statement];
455 [label="77_ function transferFrom(address from, address to, uint256 value)\n        public\n        returns (bool success)\n    {\n        require(value <= balanceOf[from]);\n        require(value <= allowance[from][msg.sender]);\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n455-function_definition-78-89", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
476 [label="81_ require(value <= balanceOf[from]);\n476-expression_statement-82-82", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
485 [label="82_ require(value <= allowance[from][msg.sender]);\n485-expression_statement-83-83", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
498 [label="83_ balanceOf[from] -= value;\n498-expression_statement-84-84", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
504 [label="84_ balanceOf[to] += value;\n504-expression_statement-85-85", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
510 [label="85_ allowance[from][msg.sender] -= value;\n510-expression_statement-86-86", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
528 [label="87_ return true;\n528-return-88-88", method="transferFrom(address from,address to,uint256 value)", type_label=return];
531 [label="89_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n531-function_definition-90-94", method="bug_unchk31()", type_label=function_definition];
535 [label="90_ address payable addr_unchk31;\n535-new_variable-91-91", method="bug_unchk31()", type_label=new_variable];
540 [label="91_ if_!addr_unchk31.send (10 ether) || 1==1\n540-if-92-93", method="bug_unchk31()", type_label=if];
1091 [label="91_ end_if", method="bug_unchk31()", type_label=end_if];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
234;
13 -> 20  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
20 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 34  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
40 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
59 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
137 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
157 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
297 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
301 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
351 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
358 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
372 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
399 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
439 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
485 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
531 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 1091  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
234 -> 775  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
