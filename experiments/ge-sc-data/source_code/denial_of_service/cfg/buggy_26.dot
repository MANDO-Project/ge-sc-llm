digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n50-function_definition-8-12", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ require(b <= a, \"SafeMath: subtraction overflow\");\n67-expression_statement-9-9", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
77 [label="9_ uint256 c = a - b;\n77-new_variable-10-10", method="sub(uint256 a,uint256 b)", type_label=new_variable];
85 [label="10_ return c;\n85-return-11-11", method="sub(uint256 a,uint256 b)", type_label=return];
87 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n87-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
104 [label="13_ if_a == 0\n104-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
1504 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
109 [label="14_ return 0;\n109-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
111 [label="16_ uint256 c = a * b;\n111-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
119 [label="17_ require(c / a == b, \"SafeMath: multiplication overflow\");\n119-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
131 [label="18_ return c;\n131-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
133 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n133-function_definition-21-25", method="div(uint256 a,uint256 b)", type_label=function_definition];
150 [label="21_ require(b > 0, \"SafeMath: division by zero\");\n150-expression_statement-22-22", method="div(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="22_ uint256 c = a / b;\n160-new_variable-23-23", method="div(uint256 a,uint256 b)", type_label=new_variable];
168 [label="23_ return c;\n168-return-24-24", method="div(uint256 a,uint256 b)", type_label=return];
170 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n170-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
187 [label="26_ require(b != 0, \"SafeMath: modulo by zero\");\n187-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
197 [label="27_ return a % b;\n197-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
204 [label="31_ function totalSupply() external view returns (uint256);\n204-function_definition-32-32", method="totalSupply()", type_label=function_definition];
212 [label="32_ function balanceOf(address account) external view returns (uint256);\n212-function_definition-33-33", method="balanceOf(address account)", type_label=function_definition];
224 [label="33_ function transfer(address recipient, uint256 amount) external returns (bool);\n224-function_definition-34-34", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
239 [label="34_ function allowance(address owner, address spender) external view returns (uint256);\n239-function_definition-35-35", method="allowance(address owner,address spender)", type_label=function_definition];
255 [label="35_ function approve(address spender, uint256 amount) external returns (bool);\n255-function_definition-36-36", method="approve(address spender,uint256 amount)", type_label=function_definition];
270 [label="36_ function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n270-function_definition-37-37", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
328 [label="42_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n328-function_definition-43-45", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
336 [label="43_ callee.call.value(1 ether);\n336-expression_statement-44-44", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
346 [label="45_ mapping (address => uint256) private _balances;\n346-new_variable-46-46", method="", type_label=new_variable];
353 [label="46_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n353-function_definition-47-51", method="bug_unchk19()", type_label=function_definition];
357 [label="47_ address payable addr_unchk19;\n357-new_variable-48-48", method="bug_unchk19()", type_label=new_variable];
362 [label="48_ if_!addr_unchk19.send (10 ether) || 1==1\n362-if-49-50", method="bug_unchk19()", type_label=if];
1762 [label="48_ end_if", method="bug_unchk19()", type_label=end_if];
378 [label="51_ mapping (address => mapping (address => uint256)) private _allowances;\n378-new_variable-52-52", method="", type_label=new_variable];
387 [label="52_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n387-function_definition-53-55", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
395 [label="53_ callee.send(5 ether);\n395-expression_statement-54-54", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
403 [label="55_ uint256 private _totalSupply;\n403-new_variable-56-56", method="", type_label=new_variable];
408 [label="56_ bool public payedOut_unchk20 = false;\n408-new_variable-57-57", method="", type_label=new_variable];
415 [label="57_ address payable public winner_unchk20;\n415-new_variable-58-58", method="", type_label=new_variable];
420 [label="58_ uint public winAmount_unchk20;\n420-new_variable-59-59", method="", type_label=new_variable];
425 [label="59_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n425-function_definition-60-64", method="sendToWinner_unchk20()", type_label=function_definition];
429 [label="60_ require(!payedOut_unchk20);\n429-expression_statement-61-61", method="sendToWinner_unchk20()", type_label=expression_statement];
435 [label="61_ winner_unchk20.send(winAmount_unchk20);\n435-expression_statement-62-62", method="sendToWinner_unchk20()", type_label=expression_statement];
442 [label="62_ payedOut_unchk20 = true;\n442-expression_statement-63-63", method="sendToWinner_unchk20()", type_label=expression_statement];
447 [label="64_ string private _name;\n447-new_variable-65-65", method="", type_label=new_variable];
452 [label="65_ bool public payedOut_unchk32 = false;\n452-new_variable-66-66", method="", type_label=new_variable];
459 [label="66_ address payable public winner_unchk32;\n459-new_variable-67-67", method="", type_label=new_variable];
464 [label="67_ uint public winAmount_unchk32;\n464-new_variable-68-68", method="", type_label=new_variable];
469 [label="68_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n469-function_definition-69-73", method="sendToWinner_unchk32()", type_label=function_definition];
473 [label="69_ require(!payedOut_unchk32);\n473-expression_statement-70-70", method="sendToWinner_unchk32()", type_label=expression_statement];
479 [label="70_ winner_unchk32.send(winAmount_unchk32);\n479-expression_statement-71-71", method="sendToWinner_unchk32()", type_label=expression_statement];
486 [label="71_ payedOut_unchk32 = true;\n486-expression_statement-72-72", method="sendToWinner_unchk32()", type_label=expression_statement];
491 [label="73_ string private _symbol;\n491-new_variable-74-74", method="", type_label=new_variable];
496 [label="74_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n496-function_definition-75-77", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
504 [label="75_ callee.send(5 ether);\n504-expression_statement-76-76", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
512 [label="77_ uint8 private _decimals;\n512-new_variable-78-78", method="", type_label=new_variable];
519 [label="79_ _name = \"UBBC Token\";\n519-expression_statement-80-80", method="", type_label=expression_statement];
524 [label="80_ _symbol = \"UBBC\";\n524-expression_statement-81-81", method="", type_label=expression_statement];
529 [label="81_ _decimals = 18;\n529-expression_statement-82-82", method="", type_label=expression_statement];
533 [label="82_ _totalSupply = 260000000 ether;\n533-expression_statement-83-83", method="", type_label=expression_statement];
538 [label="83_ _balances[0x0e475cd2c1f8222868cf85B4f97D7EB70fB3ffD3] = _totalSupply;\n538-expression_statement-84-84", method="", type_label=expression_statement];
544 [label="85_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n544-function_definition-86-90", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
560 [label="86_ uint64 subpot_unchk46 = 3 ether;\n560-new_variable-87-87", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
567 [label="87_ winner_unchk46.send(subpot_unchk46);\n567-expression_statement-88-88", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
574 [label="88_ subpot_unchk46= 0;\n574-expression_statement-89-89", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
578 [label="90_ bool public payedOut_unchk45 = false;\n578-new_variable-91-91", method="", type_label=new_variable];
585 [label="91_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n585-function_definition-92-95", method="withdrawLeftOver_unchk45()", type_label=function_definition];
589 [label="92_ require(payedOut_unchk45);\n589-expression_statement-93-93", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
594 [label="93_ msg.sender.send(address(this).balance);\n594-expression_statement-94-94", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
621 [label="96_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n621-function_definition-97-99", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
629 [label="97_ callee.call.value(1 ether);\n629-expression_statement-98-98", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
653 [label="100_ function name() public view returns (string memory) {\n        return _name;\n    }\n653-function_definition-101-103", method="name()", type_label=function_definition];
662 [label="101_ return _name;\n662-return-102-102", method="name()", type_label=return];
664 [label="103_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n664-function_definition-104-112", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
668 [label="104_ address payable addr_unchk4;\n668-new_variable-105-105", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
673 [label="105_ if\n673-if-106-111", method="UncheckedExternalCall_unchk4()", type_label=if];
2073 [label="105_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
684 [label="112_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n684-function_definition-113-115", method="symbol()", type_label=function_definition];
693 [label="113_ return _symbol;\n693-return-114-114", method="symbol()", type_label=return];
695 [label="115_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n695-function_definition-116-120", method="bug_unchk7()", type_label=function_definition];
699 [label="116_ address payable addr_unchk7;\n699-new_variable-117-117", method="bug_unchk7()", type_label=new_variable];
704 [label="117_ if_!addr_unchk7.send (10 ether) || 1==1\n704-if-118-119", method="bug_unchk7()", type_label=if];
2104 [label="117_ end_if", method="bug_unchk7()", type_label=end_if];
720 [label="120_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n720-function_definition-121-123", method="decimals()", type_label=function_definition];
729 [label="121_ return _decimals;\n729-return-122-122", method="decimals()", type_label=return];
731 [label="123_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n731-function_definition-124-126", method="my_func_unchk23(address payable dst)", type_label=function_definition];
740 [label="124_ dst.send(msg.value);\n740-expression_statement-125-125", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
749 [label="126_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n749-function_definition-127-129", method="totalSupply()", type_label=function_definition];
758 [label="127_ return _totalSupply;\n758-return-128-128", method="totalSupply()", type_label=return];
760 [label="129_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n760-function_definition-130-132", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
768 [label="130_ callee.send(5 ether);\n768-expression_statement-131-131", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
776 [label="132_ function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n776-function_definition-133-135", method="balanceOf(address account)", type_label=function_definition];
789 [label="133_ return _balances[account];\n789-return-134-134", method="balanceOf(address account)", type_label=return];
793 [label="135_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n793-function_definition-136-143", method="bug_unchk30()", type_label=function_definition];
797 [label="136_ uint receivers_unchk30;\n797-new_variable-137-137", method="bug_unchk30()", type_label=new_variable];
802 [label="137_ address payable addr_unchk30;\n802-new_variable-138-138", method="bug_unchk30()", type_label=new_variable];
807 [label="138_ if\n807-if-139-142", method="bug_unchk30()", type_label=if];
2207 [label="138_ end_if", method="bug_unchk30()", type_label=end_if];
817 [label="139_ receivers_unchk30 +=1;\n817-expression_statement-140-140", method="bug_unchk30()", type_label=expression_statement];
824 [label="143_ function transfer(address recipient, uint256 amount) public  returns (bool) {\n         _transfer(msg.sender, recipient, amount);\n         return true;\n    }\n824-function_definition-144-147", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
840 [label="144_ _transfer(msg.sender, recipient, amount);\n840-expression_statement-145-145", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
851 [label="145_ return true;\n851-return-146-146", method="transfer(address recipient,uint256 amount)", type_label=return];
854 [label="147_ bool public payedOut_unchk8 = false;\n854-new_variable-148-148", method="", type_label=new_variable];
861 [label="148_ address payable public winner_unchk8;\n861-new_variable-149-149", method="", type_label=new_variable];
866 [label="149_ uint public winAmount_unchk8;\n866-new_variable-150-150", method="", type_label=new_variable];
871 [label="150_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n871-function_definition-151-155", method="sendToWinner_unchk8()", type_label=function_definition];
875 [label="151_ require(!payedOut_unchk8);\n875-expression_statement-152-152", method="sendToWinner_unchk8()", type_label=expression_statement];
881 [label="152_ winner_unchk8.send(winAmount_unchk8);\n881-expression_statement-153-153", method="sendToWinner_unchk8()", type_label=expression_statement];
888 [label="153_ payedOut_unchk8 = true;\n888-expression_statement-154-154", method="sendToWinner_unchk8()", type_label=expression_statement];
893 [label="155_ function allowance(address owner, address spender) public  view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n893-function_definition-156-158", method="allowance(address owner,address spender)", type_label=function_definition];
910 [label="156_ return _allowances[owner][spender];\n910-return-157-157", method="allowance(address owner,address spender)", type_label=return];
916 [label="158_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n916-function_definition-159-160", method="bug_unchk39(address payable addr)", type_label=function_definition];
924 [label="159_ addr.send (4 ether);\n924-expression_statement-160-160", method="bug_unchk39(address payable addr)", type_label=expression_statement];
932 [label="160_ function approve(address spender, uint256 value) public  returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n932-function_definition-161-164", method="approve(address spender,uint256 value)", type_label=function_definition];
948 [label="161_ _approve(msg.sender, spender, value);\n948-expression_statement-162-162", method="approve(address spender,uint256 value)", type_label=expression_statement];
959 [label="162_ return true;\n959-return-163-163", method="approve(address spender,uint256 value)", type_label=return];
962 [label="164_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n962-function_definition-165-167", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
971 [label="165_ dst.call.value(msg.value)(\"\");\n971-expression_statement-166-166", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
986 [label="167_ function transferFrom(address sender, address recipient, uint256 amount) public  returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n986-function_definition-168-172", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
1006 [label="168_ _transfer(sender, recipient, amount);\n1006-expression_statement-169-169", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1015 [label="169_ _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n1015-expression_statement-170-170", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1037 [label="170_ return true;\n1037-return-171-171", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=return];
1040 [label="172_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1040-function_definition-173-175", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1049 [label="173_ dst.send(msg.value);\n1049-expression_statement-174-174", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1058 [label="175_ function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n1058-function_definition-176-179", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
1074 [label="176_ _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n1074-expression_statement-177-177", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1096 [label="177_ return true;\n1096-return-178-178", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
1099 [label="179_ bool public payedOut_unchk44 = false;\n1099-new_variable-180-180", method="", type_label=new_variable];
1106 [label="180_ address payable public winner_unchk44;\n1106-new_variable-181-181", method="", type_label=new_variable];
1111 [label="181_ uint public winAmount_unchk44;\n1111-new_variable-182-182", method="", type_label=new_variable];
1116 [label="182_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1116-function_definition-183-187", method="sendToWinner_unchk44()", type_label=function_definition];
1120 [label="183_ require(!payedOut_unchk44);\n1120-expression_statement-184-184", method="sendToWinner_unchk44()", type_label=expression_statement];
1126 [label="184_ winner_unchk44.send(winAmount_unchk44);\n1126-expression_statement-185-185", method="sendToWinner_unchk44()", type_label=expression_statement];
1133 [label="185_ payedOut_unchk44 = true;\n1133-expression_statement-186-186", method="sendToWinner_unchk44()", type_label=expression_statement];
1138 [label="187_ function decreaseAllowance(address spender, uint256 subtractedValue) public  returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n1138-function_definition-188-191", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
1154 [label="188_ _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n1154-expression_statement-189-189", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1176 [label="189_ return true;\n1176-return-190-190", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
1179 [label="191_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1179-function_definition-192-200", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1183 [label="192_ address payable addr_unchk40;\n1183-new_variable-193-193", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1188 [label="193_ if\n1188-if-194-199", method="UncheckedExternalCall_unchk40()", type_label=if];
2588 [label="193_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1199 [label="200_ function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n1199-function_definition-201-207", method="_transfer(address sender,address recipient,uint256 amount)", type_label=function_definition];
1215 [label="201_ require(sender != address(0), \"ERC20: transfer from the zero address\");\n1215-expression_statement-202-202", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1227 [label="202_ require(recipient != address(0), \"ERC20: transfer to the zero address\");\n1227-expression_statement-203-203", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1239 [label="203_ _balances[sender] = _balances[sender].sub(amount);\n1239-expression_statement-204-204", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1252 [label="204_ _balances[recipient] = _balances[recipient].add(amount);\n1252-expression_statement-205-205", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1273 [label="207_ bool public payedOut_unchk33 = false;\n1273-new_variable-208-208", method="", type_label=new_variable];
1280 [label="208_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1280-function_definition-209-212", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1284 [label="209_ require(payedOut_unchk33);\n1284-expression_statement-210-210", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1289 [label="210_ msg.sender.send(address(this).balance);\n1289-expression_statement-211-211", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1302 [label="212_ function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n1302-function_definition-213-218", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
1318 [label="213_ require(owner != address(0), \"ERC20: approve from the zero address\");\n1318-expression_statement-214-214", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1330 [label="214_ require(spender != address(0), \"ERC20: approve to the zero address\");\n1330-expression_statement-215-215", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1342 [label="215_ _allowances[owner][spender] = value;\n1342-expression_statement-216-216", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1358 [label="218_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1358-function_definition-219-220", method="bug_unchk27(address payable addr)", type_label=function_definition];
1366 [label="219_ addr.send (42 ether);\n1366-expression_statement-220-220", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1380 [label="223_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n1380-function_definition-224-228", method="bug_unchk31()", type_label=function_definition];
1384 [label="224_ address payable addr_unchk31;\n1384-new_variable-225-225", method="bug_unchk31()", type_label=new_variable];
1389 [label="225_ if_!addr_unchk31.send (10 ether) || 1==1\n1389-if-226-227", method="bug_unchk31()", type_label=if];
2789 [label="225_ end_if", method="bug_unchk31()", type_label=end_if];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
683;
822;
1198;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
87 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 1504  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1504 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 1504  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
328 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 1762  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
387 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
429 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
459 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
533 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
664 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
695 -> 699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 2104  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
720 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
731 -> 740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
760 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
793 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 817  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2207 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
817 -> 2207  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
824 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
854 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
916 -> 924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
962 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 1015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1015 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1040 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1074 -> 1096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1099 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1116 -> 1120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1120 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1126 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1154 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1179 -> 1183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1183 -> 1188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 1215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 1227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1227 -> 1239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1239 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1280 -> 1284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1284 -> 1289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1302 -> 1318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1318 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1330 -> 1342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1358 -> 1366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 1384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 1389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1389 -> 2789  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
683 -> 2073  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
822 -> 2207  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1198 -> 2588  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
