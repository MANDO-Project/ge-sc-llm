digraph  {
13 [label="3_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n13-function_definition-4-6", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
21 [label="4_ callee.send(5 ether);\n21-expression_statement-5-5", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
29 [label="6_ bool private stopped;\n29-new_variable-7-7", method="", type_label=new_variable];
34 [label="7_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n34-function_definition-8-12", method="bug_unchk43()", type_label=function_definition];
38 [label="8_ address payable addr_unchk43;\n38-new_variable-9-9", method="bug_unchk43()", type_label=new_variable];
43 [label="9_ if_!addr_unchk43.send (10 ether) || 1==1\n43-if-10-11", method="bug_unchk43()", type_label=if];
1281 [label="9_ end_if", method="bug_unchk43()", type_label=end_if];
59 [label="12_ address private _owner;\n59-new_variable-13-13", method="", type_label=new_variable];
64 [label="13_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n64-function_definition-14-16", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
73 [label="14_ dst.call.value(msg.value)(\"\");\n73-expression_statement-15-15", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
88 [label="16_ address private _master;\n88-new_variable-17-17", method="", type_label=new_variable];
93 [label="17_ bool public payedOut_unchk44 = false;\n93-new_variable-18-18", method="", type_label=new_variable];
100 [label="18_ address payable public winner_unchk44;\n100-new_variable-19-19", method="", type_label=new_variable];
105 [label="19_ uint public winAmount_unchk44;\n105-new_variable-20-20", method="", type_label=new_variable];
110 [label="20_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n110-function_definition-21-25", method="sendToWinner_unchk44()", type_label=function_definition];
114 [label="21_ require(!payedOut_unchk44);\n114-expression_statement-22-22", method="sendToWinner_unchk44()", type_label=expression_statement];
120 [label="22_ winner_unchk44.send(winAmount_unchk44);\n120-expression_statement-23-23", method="sendToWinner_unchk44()", type_label=expression_statement];
127 [label="23_ payedOut_unchk44 = true;\n127-expression_statement-24-24", method="sendToWinner_unchk44()", type_label=expression_statement];
134 [label="26_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n134-function_definition-27-35", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
138 [label="27_ address payable addr_unchk40;\n138-new_variable-28-28", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
143 [label="28_ if\n143-if-29-34", method="UncheckedExternalCall_unchk40()", type_label=if];
1381 [label="28_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
156 [label="36_ bool public payedOut_unchk33 = false;\n156-new_variable-37-37", method="", type_label=new_variable];
163 [label="37_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n163-function_definition-38-41", method="withdrawLeftOver_unchk33()", type_label=function_definition];
167 [label="38_ require(payedOut_unchk33);\n167-expression_statement-39-39", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
172 [label="39_ msg.sender.send(address(this).balance);\n172-expression_statement-40-40", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
195 [label="42_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n195-function_definition-43-44", method="bug_unchk27(address payable addr)", type_label=function_definition];
203 [label="43_ addr.send (42 ether);\n203-expression_statement-44-44", method="bug_unchk27(address payable addr)", type_label=expression_statement];
223 [label="47_ stopped = false;\n223-expression_statement-48-48", method="", type_label=expression_statement];
228 [label="48_ _owner = msg.sender;\n228-expression_statement-49-49", method="", type_label=expression_statement];
234 [label="49_ _master = msg.sender;\n234-expression_statement-50-50", method="", type_label=expression_statement];
256 [label="53_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n256-function_definition-54-56", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
264 [label="54_ callee.call.value(1 ether);\n264-expression_statement-55-55", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
274 [label="56_ function owner() public view returns (address)\n    {\n        return _owner;\n    }\n274-function_definition-57-60", method="owner()", type_label=function_definition];
283 [label="58_ return _owner;\n283-return-59-59", method="owner()", type_label=return];
285 [label="60_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n285-function_definition-61-62", method="bug_unchk3(address payable addr)", type_label=function_definition];
293 [label="61_ addr.send (42 ether);\n293-expression_statement-62-62", method="bug_unchk3(address payable addr)", type_label=expression_statement];
301 [label="62_ function master() public view returns (address)\n    {\n        return _master;\n    }\n301-function_definition-63-66", method="master()", type_label=function_definition];
310 [label="64_ return _master;\n310-return-65-65", method="master()", type_label=return];
312 [label="66_ bool public payedOut_unchk9 = false;\n312-new_variable-67-67", method="", type_label=new_variable];
319 [label="67_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n319-function_definition-68-71", method="withdrawLeftOver_unchk9()", type_label=function_definition];
323 [label="68_ require(payedOut_unchk9);\n323-expression_statement-69-69", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
328 [label="69_ msg.sender.send(address(this).balance);\n328-expression_statement-70-70", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
341 [label="71_ modifier onlyOwner()\n    {\n        require(isOwner());\n        _;\n    }\n341-expression_statement-72-76", method="", type_label=expression_statement];
344 [label="73_ require(isOwner());\n344-expression_statement-74-74", method="", type_label=expression_statement];
350 [label="74_ _;\n350-expression_statement-75-75", method="", type_label=expression_statement];
352 [label="76_ modifier onlyMaster()\n    {\n        require(isMaster() || isOwner());\n        _;\n    }\n352-expression_statement-77-81", method="", type_label=expression_statement];
355 [label="78_ require(isMaster() || isOwner());\n355-expression_statement-79-79", method="", type_label=expression_statement];
364 [label="79_ _;\n364-expression_statement-80-80", method="", type_label=expression_statement];
366 [label="81_ modifier onlyWhenNotStopped()\n    {\n        require(!isStopped());\n        _;\n    }\n366-expression_statement-82-86", method="", type_label=expression_statement];
369 [label="83_ require(!isStopped());\n369-expression_statement-84-84", method="", type_label=expression_statement];
376 [label="84_ _;\n376-expression_statement-85-85", method="", type_label=expression_statement];
378 [label="86_ function isOwner() public view returns (bool)\n    {\n        return msg.sender == _owner;\n    }\n378-function_definition-87-90", method="isOwner()", type_label=function_definition];
387 [label="88_ return msg.sender == _owner;\n387-return-89-89", method="isOwner()", type_label=return];
393 [label="90_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n393-function_definition-91-93", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
401 [label="91_ callee.call.value(1 ether);\n401-expression_statement-92-92", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
411 [label="93_ function isMaster() public view returns (bool)\n    {\n        return msg.sender == _master;\n    }\n411-function_definition-94-97", method="isMaster()", type_label=function_definition];
420 [label="95_ return msg.sender == _master;\n420-return-96-96", method="isMaster()", type_label=return];
426 [label="97_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n426-function_definition-98-102", method="bug_unchk19()", type_label=function_definition];
430 [label="98_ address payable addr_unchk19;\n430-new_variable-99-99", method="bug_unchk19()", type_label=new_variable];
435 [label="99_ if_!addr_unchk19.send (10 ether) || 1==1\n435-if-100-101", method="bug_unchk19()", type_label=if];
1673 [label="99_ end_if", method="bug_unchk19()", type_label=end_if];
451 [label="102_ function transferOwnership(address newOwner) external onlyOwner\n    {\n        _transferOwnership(newOwner);\n    }\n451-function_definition-103-106", method="transferOwnership(address newOwner)", type_label=function_definition];
458 [label="102_ onlyOwner\n458-expression_statement-103-103", method="transferOwnership(address newOwner)", type_label=expression_statement];
461 [label="104_ _transferOwnership(newOwner);\n461-expression_statement-105-105", method="transferOwnership(address newOwner)", type_label=expression_statement];
466 [label="106_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n466-function_definition-107-109", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
474 [label="107_ callee.send(5 ether);\n474-expression_statement-108-108", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
482 [label="109_ function transferMasterRole(address newMaster) external onlyOwner\n    {\n        _transferMasterRole(newMaster);\n    }\n482-function_definition-110-113", method="transferMasterRole(address newMaster)", type_label=function_definition];
489 [label="109_ onlyOwner\n489-expression_statement-110-110", method="transferMasterRole(address newMaster)", type_label=expression_statement];
492 [label="111_ _transferMasterRole(newMaster);\n492-expression_statement-112-112", method="transferMasterRole(address newMaster)", type_label=expression_statement];
497 [label="113_ bool public payedOut_unchk20 = false;\n497-new_variable-114-114", method="", type_label=new_variable];
504 [label="114_ address payable public winner_unchk20;\n504-new_variable-115-115", method="", type_label=new_variable];
509 [label="115_ uint public winAmount_unchk20;\n509-new_variable-116-116", method="", type_label=new_variable];
514 [label="116_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n514-function_definition-117-121", method="sendToWinner_unchk20()", type_label=function_definition];
518 [label="117_ require(!payedOut_unchk20);\n518-expression_statement-118-118", method="sendToWinner_unchk20()", type_label=expression_statement];
524 [label="118_ winner_unchk20.send(winAmount_unchk20);\n524-expression_statement-119-119", method="sendToWinner_unchk20()", type_label=expression_statement];
531 [label="119_ payedOut_unchk20 = true;\n531-expression_statement-120-120", method="sendToWinner_unchk20()", type_label=expression_statement];
536 [label="121_ function isStopped() public view returns (bool)\n    {\n        return stopped;\n    }\n536-function_definition-122-125", method="isStopped()", type_label=function_definition];
545 [label="123_ return stopped;\n545-return-124-124", method="isStopped()", type_label=return];
547 [label="125_ bool public payedOut_unchk32 = false;\n547-new_variable-126-126", method="", type_label=new_variable];
554 [label="126_ address payable public winner_unchk32;\n554-new_variable-127-127", method="", type_label=new_variable];
559 [label="127_ uint public winAmount_unchk32;\n559-new_variable-128-128", method="", type_label=new_variable];
564 [label="128_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n564-function_definition-129-133", method="sendToWinner_unchk32()", type_label=function_definition];
568 [label="129_ require(!payedOut_unchk32);\n568-expression_statement-130-130", method="sendToWinner_unchk32()", type_label=expression_statement];
574 [label="130_ winner_unchk32.send(winAmount_unchk32);\n574-expression_statement-131-131", method="sendToWinner_unchk32()", type_label=expression_statement];
581 [label="131_ payedOut_unchk32 = true;\n581-expression_statement-132-132", method="sendToWinner_unchk32()", type_label=expression_statement];
586 [label="133_ function stop() public onlyOwner\n    {\n        _stop();\n    }\n586-function_definition-134-137", method="stop()", type_label=function_definition];
589 [label="133_ onlyOwner\n589-expression_statement-134-134", method="stop()", type_label=expression_statement];
592 [label="135_ _stop();\n592-expression_statement-136-136", method="stop()", type_label=expression_statement];
595 [label="137_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n595-function_definition-138-140", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
603 [label="138_ callee.send(5 ether);\n603-expression_statement-139-139", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
611 [label="140_ function start() public onlyOwner\n    {\n        _start();\n    }\n611-function_definition-141-144", method="start()", type_label=function_definition];
614 [label="140_ onlyOwner\n614-expression_statement-141-141", method="start()", type_label=expression_statement];
617 [label="142_ _start();\n617-expression_statement-143-143", method="start()", type_label=expression_statement];
620 [label="144_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n620-function_definition-145-149", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
636 [label="145_ uint64 subpot_unchk46 = 3 ether;\n636-new_variable-146-146", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
643 [label="146_ winner_unchk46.send(subpot_unchk46);\n643-expression_statement-147-147", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
650 [label="147_ subpot_unchk46= 0;\n650-expression_statement-148-148", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
654 [label="149_ function _transferOwnership(address newOwner) internal\n    {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n654-function_definition-150-155", method="_transferOwnership(address newOwner)", type_label=function_definition];
662 [label="151_ require(newOwner != address(0));\n662-expression_statement-152-152", method="_transferOwnership(address newOwner)", type_label=expression_statement];
677 [label="153_ _owner = newOwner;\n677-expression_statement-154-154", method="_transferOwnership(address newOwner)", type_label=expression_statement];
681 [label="155_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n681-function_definition-156-164", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
685 [label="156_ address payable addr_unchk4;\n685-new_variable-157-157", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
690 [label="157_ if\n690-if-158-163", method="UncheckedExternalCall_unchk4()", type_label=if];
1928 [label="157_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
701 [label="164_ function _transferMasterRole(address newMaster) internal\n    {\n        require(newMaster != address(0));\n        emit MasterRoleTransferred(_master, newMaster);\n        _master = newMaster;\n    }\n701-function_definition-165-170", method="_transferMasterRole(address newMaster)", type_label=function_definition];
709 [label="166_ require(newMaster != address(0));\n709-expression_statement-167-167", method="_transferMasterRole(address newMaster)", type_label=expression_statement];
724 [label="168_ _master = newMaster;\n724-expression_statement-169-169", method="_transferMasterRole(address newMaster)", type_label=expression_statement];
728 [label="170_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n728-function_definition-171-175", method="bug_unchk7()", type_label=function_definition];
732 [label="171_ address payable addr_unchk7;\n732-new_variable-172-172", method="bug_unchk7()", type_label=new_variable];
737 [label="172_ if_!addr_unchk7.send (10 ether) || 1==1\n737-if-173-174", method="bug_unchk7()", type_label=if];
1975 [label="172_ end_if", method="bug_unchk7()", type_label=end_if];
753 [label="175_ function _stop() internal\n    {\n        emit Stopped();\n        stopped = true;\n    }\n753-function_definition-176-180", method="_stop()", type_label=function_definition];
759 [label="178_ stopped = true;\n759-expression_statement-179-179", method="_stop()", type_label=expression_statement];
764 [label="180_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n764-function_definition-181-183", method="my_func_unchk23(address payable dst)", type_label=function_definition];
773 [label="181_ dst.send(msg.value);\n773-expression_statement-182-182", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
782 [label="183_ function _start() internal\n    {\n        emit Started();\n        stopped = false;\n    }\n782-function_definition-184-188", method="_start()", type_label=function_definition];
788 [label="186_ stopped = false;\n788-expression_statement-187-187", method="_start()", type_label=expression_statement];
793 [label="188_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n793-function_definition-189-191", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
801 [label="189_ callee.send(5 ether);\n801-expression_statement-190-190", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
815 [label="194_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n815-function_definition-195-197", method="withdrawBal_unchk17()", type_label=function_definition];
819 [label="195_ uint64 Balances_unchk17 = 0;\n819-new_variable-196-196", method="withdrawBal_unchk17()", type_label=new_variable];
825 [label="196_ msg.sender.send(Balances_unchk17);\n825-expression_statement-197-197", method="withdrawBal_unchk17()", type_label=expression_statement];
834 [label="197_ mapping(string => address) private addressMap;\n834-new_variable-198-198", method="", type_label=new_variable];
841 [label="198_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n841-function_definition-199-203", method="bug_unchk31()", type_label=function_definition];
845 [label="199_ address payable addr_unchk31;\n845-new_variable-200-200", method="bug_unchk31()", type_label=new_variable];
850 [label="200_ if_!addr_unchk31.send (10 ether) || 1==1\n850-if-201-202", method="bug_unchk31()", type_label=if];
2088 [label="200_ end_if", method="bug_unchk31()", type_label=end_if];
876 [label="204_ bool public payedOut_unchk45 = false;\n876-new_variable-205-205", method="", type_label=new_variable];
883 [label="205_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n883-function_definition-206-209", method="withdrawLeftOver_unchk45()", type_label=function_definition];
887 [label="206_ require(payedOut_unchk45);\n887-expression_statement-207-207", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
892 [label="207_ msg.sender.send(address(this).balance);\n892-expression_statement-208-208", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
915 [label="210_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n915-function_definition-211-213", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
923 [label="211_ callee.call.value(1 ether);\n923-expression_statement-212-212", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
939 [label="214_ function version() external pure returns(string memory)\n    {\n        return '0.0.1';\n    }\n939-function_definition-215-218", method="version()", type_label=function_definition];
948 [label="216_ return '0.0.1';\n948-return-217-217", method="version()", type_label=return];
951 [label="218_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n951-function_definition-219-226", method="bug_unchk30()", type_label=function_definition];
955 [label="219_ uint receivers_unchk30;\n955-new_variable-220-220", method="bug_unchk30()", type_label=new_variable];
960 [label="220_ address payable addr_unchk30;\n960-new_variable-221-221", method="bug_unchk30()", type_label=new_variable];
965 [label="221_ if\n965-if-222-225", method="bug_unchk30()", type_label=if];
2203 [label="221_ end_if", method="bug_unchk30()", type_label=end_if];
975 [label="222_ receivers_unchk30 +=1;\n975-expression_statement-223-223", method="bug_unchk30()", type_label=expression_statement];
982 [label="226_ function getAddress(string calldata channelId) external view returns (address)\n    {\n        return addressMap[channelId];\n    }\n982-function_definition-227-230", method="getAddress(string calldata channelId)", type_label=function_definition];
995 [label="228_ return addressMap[channelId];\n995-return-229-229", method="getAddress(string calldata channelId)", type_label=return];
999 [label="230_ bool public payedOut_unchk8 = false;\n999-new_variable-231-231", method="", type_label=new_variable];
1006 [label="231_ address payable public winner_unchk8;\n1006-new_variable-232-232", method="", type_label=new_variable];
1011 [label="232_ uint public winAmount_unchk8;\n1011-new_variable-233-233", method="", type_label=new_variable];
1016 [label="233_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1016-function_definition-234-238", method="sendToWinner_unchk8()", type_label=function_definition];
1020 [label="234_ require(!payedOut_unchk8);\n1020-expression_statement-235-235", method="sendToWinner_unchk8()", type_label=expression_statement];
1026 [label="235_ winner_unchk8.send(winAmount_unchk8);\n1026-expression_statement-236-236", method="sendToWinner_unchk8()", type_label=expression_statement];
1033 [label="236_ payedOut_unchk8 = true;\n1033-expression_statement-237-237", method="sendToWinner_unchk8()", type_label=expression_statement];
1038 [label="238_ function setAddress(string calldata channelId, address _address) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(channelId).length > 0);\n        addressMap[channelId] = _address;\n        emit SetAddress(channelId, _address);\n    }\n1038-function_definition-239-244", method="setAddress(string calldata channelId,address _address)", type_label=function_definition];
1049 [label="238_ onlyMaster\n1049-expression_statement-239-239", method="setAddress(string calldata channelId,address _address)", type_label=expression_statement];
1051 [label="238_ onlyWhenNotStopped\n1051-expression_statement-239-239", method="setAddress(string calldata channelId,address _address)", type_label=expression_statement];
1054 [label="240_ require(bytes(channelId).length > 0);\n1054-expression_statement-241-241", method="setAddress(string calldata channelId,address _address)", type_label=expression_statement];
1065 [label="241_ addressMap[channelId] = _address;\n1065-expression_statement-242-242", method="setAddress(string calldata channelId,address _address)", type_label=expression_statement];
1077 [label="244_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1077-function_definition-245-246", method="bug_unchk39(address payable addr)", type_label=function_definition];
1085 [label="245_ addr.send (4 ether);\n1085-expression_statement-246-246", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1093 [label="246_ function updateChannel(string calldata from, string calldata to, address _address) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(from).length > 0);\n        require(bytes(to).length > 0);\n        require(addressMap[to] == address(0));\n        addressMap[to] = _address;\n        addressMap[from] = address(0);\n        emit UpdateAddress(from, to);\n    }\n1093-function_definition-247-255", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=function_definition];
1108 [label="246_ onlyMaster\n1108-expression_statement-247-247", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
1110 [label="246_ onlyWhenNotStopped\n1110-expression_statement-247-247", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
1113 [label="248_ require(bytes(from).length > 0);\n1113-expression_statement-249-249", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
1124 [label="249_ require(bytes(to).length > 0);\n1124-expression_statement-250-250", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
1135 [label="250_ require(addressMap[to] == address(0));\n1135-expression_statement-251-251", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
1146 [label="251_ addressMap[to] = _address;\n1146-expression_statement-252-252", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
1152 [label="252_ addressMap[from] = address(0);\n1152-expression_statement-253-253", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
1166 [label="255_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1166-function_definition-256-258", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1175 [label="256_ dst.call.value(msg.value)(\"\");\n1175-expression_statement-257-257", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1190 [label="258_ function deleteChannel(string calldata channelId) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(channelId).length > 0);\n        addressMap[channelId] = address(0);\n        emit DeleteAddress(channelId);\n    }\n1190-function_definition-259-264", method="deleteChannel(string calldata channelId)", type_label=function_definition];
1197 [label="258_ onlyMaster\n1197-expression_statement-259-259", method="deleteChannel(string calldata channelId)", type_label=expression_statement];
1199 [label="258_ onlyWhenNotStopped\n1199-expression_statement-259-259", method="deleteChannel(string calldata channelId)", type_label=expression_statement];
1202 [label="260_ require(bytes(channelId).length > 0);\n1202-expression_statement-261-261", method="deleteChannel(string calldata channelId)", type_label=expression_statement];
1213 [label="261_ addressMap[channelId] = address(0);\n1213-expression_statement-262-262", method="deleteChannel(string calldata channelId)", type_label=expression_statement];
1225 [label="264_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1225-function_definition-265-267", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1234 [label="265_ dst.send(msg.value);\n1234-expression_statement-266-266", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
153;
700;
980;
13 -> 21  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 43  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
43 -> 1281  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
64 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
110 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
256 -> 264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
274 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
285 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
301 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
319 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
341 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
393 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
426 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 1673  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
451 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
514 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
547 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
620 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
728 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 1975  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
753 -> 759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
793 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 2088  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
883 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
887 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
915 -> 923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
951 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 975  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2203 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
975 -> 2203  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
982 -> 995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
999 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 1011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1020 -> 1026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1026 -> 1033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1093 -> 1113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1108 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1113 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1135 -> 1146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1190 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1202 -> 1213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1225 -> 1234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
153 -> 1381  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
700 -> 1928  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
980 -> 2203  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
