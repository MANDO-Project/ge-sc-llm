digraph  {
13 [label="2_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n13-function_definition-3-3", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
33 [label="3_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n33-function_definition-4-6", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
41 [label="4_ callee.send(5 ether);\n41-expression_statement-5-5", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
52 [label="8_ function allowance(address owner, address spender) external view returns (uint256);\n52-function_definition-9-9", method="allowance(address owner,address spender)", type_label=function_definition];
68 [label="9_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n68-function_definition-10-17", method="bug_unchk30()", type_label=function_definition];
72 [label="10_ uint receivers_unchk30;\n72-new_variable-11-11", method="bug_unchk30()", type_label=new_variable];
77 [label="11_ address payable addr_unchk30;\n77-new_variable-12-12", method="bug_unchk30()", type_label=new_variable];
82 [label="12_ if\n82-if-13-16", method="bug_unchk30()", type_label=if];
1456 [label="12_ end_if", method="bug_unchk30()", type_label=end_if];
92 [label="13_ receivers_unchk30 +=1;\n92-expression_statement-14-14", method="bug_unchk30()", type_label=expression_statement];
99 [label="17_ function balanceOf(address account) external view returns (uint256);\n99-function_definition-18-18", method="balanceOf(address account)", type_label=function_definition];
111 [label="18_ bool public payedOut_unchk8 = false;\n111-new_variable-19-19", method="", type_label=new_variable];
118 [label="19_ address payable public winner_unchk8;\n118-new_variable-20-20", method="", type_label=new_variable];
123 [label="20_ uint public winAmount_unchk8;\n123-new_variable-21-21", method="", type_label=new_variable];
128 [label="21_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n128-function_definition-22-26", method="sendToWinner_unchk8()", type_label=function_definition];
132 [label="22_ require(!payedOut_unchk8);\n132-expression_statement-23-23", method="sendToWinner_unchk8()", type_label=expression_statement];
138 [label="23_ winner_unchk8.send(winAmount_unchk8);\n138-expression_statement-24-24", method="sendToWinner_unchk8()", type_label=expression_statement];
145 [label="24_ payedOut_unchk8 = true;\n145-expression_statement-25-25", method="sendToWinner_unchk8()", type_label=expression_statement];
162 [label="29_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n162-function_definition-30-34", method="add(uint256 a,uint256 b)", type_label=function_definition];
179 [label="30_ uint256 c = a + b;\n179-new_variable-31-31", method="add(uint256 a,uint256 b)", type_label=new_variable];
187 [label="31_ require(c >= a, \"SafeMath: addition overflow\");\n187-expression_statement-32-32", method="add(uint256 a,uint256 b)", type_label=expression_statement];
197 [label="32_ return c;\n197-return-33-33", method="add(uint256 a,uint256 b)", type_label=return];
199 [label="34_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n199-function_definition-35-39", method="sub(uint256 a,uint256 b)", type_label=function_definition];
216 [label="35_ require(b <= a, \"SafeMath: subtraction overflow\");\n216-expression_statement-36-36", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
226 [label="36_ uint256 c = a - b;\n226-new_variable-37-37", method="sub(uint256 a,uint256 b)", type_label=new_variable];
234 [label="37_ return c;\n234-return-38-38", method="sub(uint256 a,uint256 b)", type_label=return];
236 [label="39_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n236-function_definition-40-47", method="mul(uint256 a,uint256 b)", type_label=function_definition];
253 [label="40_ if_a == 0\n253-if-41-43", method="mul(uint256 a,uint256 b)", type_label=if];
1627 [label="40_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
258 [label="41_ return 0;\n258-return-42-42", method="mul(uint256 a,uint256 b)", type_label=return];
260 [label="43_ uint256 c = a * b;\n260-new_variable-44-44", method="mul(uint256 a,uint256 b)", type_label=new_variable];
268 [label="44_ require(c / a == b, \"SafeMath: multiplication overflow\");\n268-expression_statement-45-45", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
280 [label="45_ return c;\n280-return-46-46", method="mul(uint256 a,uint256 b)", type_label=return];
282 [label="47_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n282-function_definition-48-52", method="div(uint256 a,uint256 b)", type_label=function_definition];
299 [label="48_ require(b > 0, \"SafeMath: division by zero\");\n299-expression_statement-49-49", method="div(uint256 a,uint256 b)", type_label=expression_statement];
309 [label="49_ uint256 c = a / b;\n309-new_variable-50-50", method="div(uint256 a,uint256 b)", type_label=new_variable];
317 [label="50_ return c;\n317-return-51-51", method="div(uint256 a,uint256 b)", type_label=return];
319 [label="52_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n319-function_definition-53-56", method="mod(uint256 a,uint256 b)", type_label=function_definition];
336 [label="53_ require(b != 0, \"SafeMath: modulo by zero\");\n336-expression_statement-54-54", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
346 [label="54_ return a % b;\n346-return-55-55", method="mod(uint256 a,uint256 b)", type_label=return];
358 [label="59_ RaffleToken constant public raffleContract = RaffleToken(0x0C8cDC16973E88FAb31DD0FCB844DdF0e1056dE2);\n358-new_variable-60-60", method="", type_label=new_variable];
368 [label="60_ bool public payedOut_unchk32 = false;\n368-new_variable-61-61", method="", type_label=new_variable];
375 [label="61_ address payable public winner_unchk32;\n375-new_variable-62-62", method="", type_label=new_variable];
380 [label="62_ uint public winAmount_unchk32;\n380-new_variable-63-63", method="", type_label=new_variable];
385 [label="63_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n385-function_definition-64-68", method="sendToWinner_unchk32()", type_label=function_definition];
389 [label="64_ require(!payedOut_unchk32);\n389-expression_statement-65-65", method="sendToWinner_unchk32()", type_label=expression_statement];
395 [label="65_ winner_unchk32.send(winAmount_unchk32);\n395-expression_statement-66-66", method="sendToWinner_unchk32()", type_label=expression_statement];
402 [label="66_ payedOut_unchk32 = true;\n402-expression_statement-67-67", method="sendToWinner_unchk32()", type_label=expression_statement];
407 [label="68_ bool public paused;\n407-new_variable-69-69", method="", type_label=new_variable];
412 [label="69_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n412-function_definition-70-72", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
420 [label="70_ callee.send(5 ether);\n420-expression_statement-71-71", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
428 [label="72_ address payable public owner;\n428-new_variable-73-73", method="", type_label=new_variable];
433 [label="73_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n433-function_definition-74-78", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
449 [label="74_ uint64 subpot_unchk46 = 3 ether;\n449-new_variable-75-75", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
456 [label="75_ winner_unchk46.send(subpot_unchk46);\n456-expression_statement-76-76", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
463 [label="76_ subpot_unchk46= 0;\n463-expression_statement-77-77", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
467 [label="78_ uint256 public nextListingId;\n467-new_variable-79-79", method="", type_label=new_variable];
472 [label="79_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n472-function_definition-80-88", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
476 [label="80_ address payable addr_unchk4;\n476-new_variable-81-81", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
481 [label="81_ if\n481-if-82-87", method="UncheckedExternalCall_unchk4()", type_label=if];
1855 [label="81_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
492 [label="88_ mapping (uint256 => Listing) public listingsById;\n492-new_variable-89-89", method="", type_label=new_variable];
500 [label="89_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n500-function_definition-90-94", method="bug_unchk7()", type_label=function_definition];
504 [label="90_ address payable addr_unchk7;\n504-new_variable-91-91", method="bug_unchk7()", type_label=new_variable];
509 [label="91_ if_!addr_unchk7.send (10 ether) || 1==1\n509-if-92-93", method="bug_unchk7()", type_label=if];
1883 [label="91_ end_if", method="bug_unchk7()", type_label=end_if];
525 [label="94_ mapping (uint256 => Purchase) public purchasesById;\n525-new_variable-95-95", method="", type_label=new_variable];
533 [label="95_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n533-function_definition-96-98", method="my_func_unchk23(address payable dst)", type_label=function_definition];
542 [label="96_ dst.send(msg.value);\n542-expression_statement-97-97", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
551 [label="98_ uint256 public nextPurchaseId;\n551-new_variable-99-99", method="", type_label=new_variable];
556 [label="99_ struct Listing {\n        uint256 pricePerToken;\n        uint256 initialAmount;\n        uint256 amountLeft;\n        address payable seller;\n        bool active;\n    }\n556-expression_statement-100-106", method="Listing()", type_label=expression_statement];
578 [label="106_ struct Purchase {\n        uint256 totalAmount;\n        uint256 totalAmountPayed;\n        uint256 timestamp;\n    }\n578-expression_statement-107-111", method="Purchase()", type_label=expression_statement];
592 [label="111_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n592-function_definition-112-116", method="bug_unchk31()", type_label=function_definition];
596 [label="112_ address payable addr_unchk31;\n596-new_variable-113-113", method="bug_unchk31()", type_label=new_variable];
601 [label="113_ if_!addr_unchk31.send (10 ether) || 1==1\n601-if-114-115", method="bug_unchk31()", type_label=if];
1975 [label="113_ end_if", method="bug_unchk31()", type_label=end_if];
635 [label="117_ bool public payedOut_unchk45 = false;\n635-new_variable-118-118", method="", type_label=new_variable];
642 [label="118_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n642-function_definition-119-122", method="withdrawLeftOver_unchk45()", type_label=function_definition];
646 [label="119_ require(payedOut_unchk45);\n646-expression_statement-120-120", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
651 [label="120_ msg.sender.send(address(this).balance);\n651-expression_statement-121-121", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
670 [label="123_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n670-function_definition-124-126", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
678 [label="124_ callee.call.value(1 ether);\n678-expression_statement-125-125", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
706 [label="127_ modifier onlyContractOwner {\n        require(msg.sender == owner, \"Function called by non-owner.\");\n        _;\n    }\n706-expression_statement-128-131", method="", type_label=expression_statement];
709 [label="128_ require(msg.sender == owner, \"Function called by non-owner.\");\n709-expression_statement-129-129", method="", type_label=expression_statement];
721 [label="129_ _;\n721-expression_statement-130-130", method="", type_label=expression_statement];
723 [label="131_ modifier onlyUnpaused {\n        require(paused == false, \"Exchange is paused.\");\n        _;\n    }\n723-expression_statement-132-135", method="", type_label=expression_statement];
726 [label="132_ require(paused == false, \"Exchange is paused.\");\n726-expression_statement-133-133", method="", type_label=expression_statement];
737 [label="133_ _;\n737-expression_statement-134-134", method="", type_label=expression_statement];
741 [label="136_ owner = msg.sender;\n741-expression_statement-137-137", method="", type_label=expression_statement];
747 [label="137_ nextListingId = 916;\n747-expression_statement-138-138", method="", type_label=expression_statement];
751 [label="138_ nextPurchaseId = 344;\n751-expression_statement-139-139", method="", type_label=expression_statement];
755 [label="140_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n755-function_definition-141-142", method="bug_unchk39(address payable addr)", type_label=function_definition];
763 [label="141_ addr.send (4 ether);\n763-expression_statement-142-142", method="bug_unchk39(address payable addr)", type_label=expression_statement];
771 [label="142_ function buyRaffle(uint256[] calldata amounts, uint256[] calldata listingIds) payable external onlyUnpaused {\n        require(amounts.length == listingIds.length, \"You have to provide amounts for every single listing!\");\n        uint256 totalAmount;\n        uint256 totalAmountPayed;\n        for (uint256 i = 0; i < listingIds.length; i++) {\n            uint256 id = listingIds[i];\n            uint256 amount = amounts[i];\n            Listing storage listing = listingsById[id];\n            require(listing.active, \"Listing is not active anymore!\");\n            listing.amountLeft = listing.amountLeft.sub(amount);\n            require(listing.amountLeft >= 0, \"Amount left needs to be higher than 0.\");\n            if(listing.amountLeft == 0) { listing.active = false; }\n            uint256 amountToPay = listing.pricePerToken * amount;\n            listing.seller.transfer(amountToPay);\n            totalAmountPayed = totalAmountPayed.add(amountToPay);\n            totalAmount = totalAmount.add(amount);\n            require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');\n        }\n        require(totalAmountPayed <= msg.value, 'Overpayed!');\n        uint256 id = nextPurchaseId++;\n        Purchase storage purchase = purchasesById[id];\n        purchase.totalAmount = totalAmount;\n        purchase.totalAmountPayed = totalAmountPayed;\n        purchase.timestamp = now;\n        emit Purchased(id, totalAmount, totalAmountPayed, now);\n    }\n771-function_definition-143-168", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=function_definition];
785 [label="142_ onlyUnpaused\n785-expression_statement-143-143", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
788 [label="143_ require(amounts.length == listingIds.length, \"You have to provide amounts for every single listing!\");\n788-expression_statement-144-144", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
802 [label="144_ uint256 totalAmount;\n802-new_variable-145-145", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
807 [label="145_ uint256 totalAmountPayed;\n807-new_variable-146-146", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
812 [label="146_ for(i < listingIds.length;;i++)\n812-for-147-160", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=for];
2186 [label="146_ end_loop", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=end_loop];
825 [label="146_ i++\n825-expression_statement-147-147", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
828 [label="147_ uint256 id = listingIds[i];\n828-new_variable-148-148", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
836 [label="148_ uint256 amount = amounts[i];\n836-new_variable-149-149", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
844 [label="149_ Listing storage listing = listingsById[id];\n844-new_variable-150-150", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
853 [label="150_ require(listing.active, \"Listing is not active anymore!\");\n853-expression_statement-151-151", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
863 [label="151_ listing.amountLeft = listing.amountLeft.sub(amount);\n863-expression_statement-152-152", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
876 [label="152_ require(listing.amountLeft >= 0, \"Amount left needs to be higher than 0.\");\n876-expression_statement-153-153", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
888 [label="153_ if_listing.amountLeft == 0\n888-if-154-154", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=if];
2262 [label="153_ end_if", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=end_if];
895 [label="153_ listing.active = false;\n895-expression_statement-154-154", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
902 [label="154_ uint256 amountToPay = listing.pricePerToken * amount;\n902-new_variable-155-155", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
912 [label="155_ listing.seller.transfer(amountToPay);\n912-expression_statement-156-156", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
921 [label="156_ totalAmountPayed = totalAmountPayed.add(amountToPay);\n921-expression_statement-157-157", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
930 [label="157_ totalAmount = totalAmount.add(amount);\n930-expression_statement-158-158", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
939 [label="158_ require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');\n939-expression_statement-159-159", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
960 [label="160_ require(totalAmountPayed <= msg.value, 'Overpayed!');\n960-expression_statement-161-161", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
972 [label="161_ uint256 id = nextPurchaseId++;\n972-new_variable-162-162", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
977 [label="161_ nextPurchaseId++\n977-expression_statement-162-162", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
979 [label="162_ Purchase storage purchase = purchasesById[id];\n979-new_variable-163-163", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
988 [label="163_ purchase.totalAmount = totalAmount;\n988-expression_statement-164-164", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
994 [label="164_ purchase.totalAmountPayed = totalAmountPayed;\n994-expression_statement-165-165", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1000 [label="165_ purchase.timestamp = now;\n1000-expression_statement-166-166", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1016 [label="168_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1016-function_definition-169-171", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1025 [label="169_ dst.call.value(msg.value)(\"\");\n1025-expression_statement-170-170", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1040 [label="171_ function addListing(uint256 initialAmount, uint256 pricePerToken) external onlyUnpaused {\n        require(raffleContract.balanceOf(msg.sender) >= initialAmount, \"Amount to sell is higher than balance!\");\n        require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, \"Allowance is to small (increase allowance)!\");\n        uint256 id = nextListingId++;\n        Listing storage listing = listingsById[id];\n        listing.initialAmount = initialAmount;\n        listing.amountLeft = initialAmount;\n        listing.pricePerToken = pricePerToken;\n        listing.seller = msg.sender;\n        listing.active = true;\n        emit Listed(id, listing.pricePerToken, listing.initialAmount, listing.seller);\n    }\n1040-function_definition-172-183", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=function_definition];
1051 [label="171_ onlyUnpaused\n1051-expression_statement-172-172", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1054 [label="172_ require(raffleContract.balanceOf(msg.sender) >= initialAmount, \"Amount to sell is higher than balance!\");\n1054-expression_statement-173-173", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1071 [label="173_ require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, \"Allowance is to small (increase allowance)!\");\n1071-expression_statement-174-174", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1092 [label="174_ uint256 id = nextListingId++;\n1092-new_variable-175-175", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=new_variable];
1097 [label="174_ nextListingId++\n1097-expression_statement-175-175", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1099 [label="175_ Listing storage listing = listingsById[id];\n1099-new_variable-176-176", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=new_variable];
1108 [label="176_ listing.initialAmount = initialAmount;\n1108-expression_statement-177-177", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1114 [label="177_ listing.amountLeft = initialAmount;\n1114-expression_statement-178-178", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1120 [label="178_ listing.pricePerToken = pricePerToken;\n1120-expression_statement-179-179", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1126 [label="179_ listing.seller = msg.sender;\n1126-expression_statement-180-180", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1134 [label="180_ listing.active = true;\n1134-expression_statement-181-181", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1157 [label="183_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1157-function_definition-184-186", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1166 [label="184_ dst.send(msg.value);\n1166-expression_statement-185-185", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1175 [label="186_ function cancelListing(uint256 id) external {\n        Listing storage listing = listingsById[id];\n        require(listing.active, \"This listing was turned inactive already!\");\n        require(listing.seller == msg.sender || owner == msg.sender, \"Only the listing owner or the contract owner can cancel the listing!\");\n        listing.active = false;\n        emit Canceled(id);\n    }\n1175-function_definition-187-193", method="cancelListing(uint256 id)", type_label=function_definition];
1183 [label="187_ Listing storage listing = listingsById[id];\n1183-new_variable-188-188", method="cancelListing(uint256 id)", type_label=new_variable];
1192 [label="188_ require(listing.active, \"This listing was turned inactive already!\");\n1192-expression_statement-189-189", method="cancelListing(uint256 id)", type_label=expression_statement];
1202 [label="189_ require(listing.seller == msg.sender || owner == msg.sender, \"Only the listing owner or the contract owner can cancel the listing!\");\n1202-expression_statement-190-190", method="cancelListing(uint256 id)", type_label=expression_statement];
1222 [label="190_ listing.active = false;\n1222-expression_statement-191-191", method="cancelListing(uint256 id)", type_label=expression_statement];
1233 [label="193_ bool public payedOut_unchk44 = false;\n1233-new_variable-194-194", method="", type_label=new_variable];
1240 [label="194_ address payable public winner_unchk44;\n1240-new_variable-195-195", method="", type_label=new_variable];
1245 [label="195_ uint public winAmount_unchk44;\n1245-new_variable-196-196", method="", type_label=new_variable];
1250 [label="196_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1250-function_definition-197-201", method="sendToWinner_unchk44()", type_label=function_definition];
1254 [label="197_ require(!payedOut_unchk44);\n1254-expression_statement-198-198", method="sendToWinner_unchk44()", type_label=expression_statement];
1260 [label="198_ winner_unchk44.send(winAmount_unchk44);\n1260-expression_statement-199-199", method="sendToWinner_unchk44()", type_label=expression_statement];
1267 [label="199_ payedOut_unchk44 = true;\n1267-expression_statement-200-200", method="sendToWinner_unchk44()", type_label=expression_statement];
1272 [label="201_ function setPaused(bool value) external onlyContractOwner {\n        paused = value;\n    }\n1272-function_definition-202-204", method="setPaused(bool value)", type_label=function_definition];
1279 [label="201_ onlyContractOwner\n1279-expression_statement-202-202", method="setPaused(bool value)", type_label=expression_statement];
1282 [label="202_ paused = value;\n1282-expression_statement-203-203", method="setPaused(bool value)", type_label=expression_statement];
1286 [label="204_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1286-function_definition-205-213", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1290 [label="205_ address payable addr_unchk40;\n1290-new_variable-206-206", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1295 [label="206_ if\n1295-if-207-212", method="UncheckedExternalCall_unchk40()", type_label=if];
2669 [label="206_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1306 [label="213_ function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {\n        owner.transfer(withdrawAmount);\n    }\n1306-function_definition-214-216", method="withdrawFunds(uint256 withdrawAmount)", type_label=function_definition];
1313 [label="213_ onlyContractOwner\n1313-expression_statement-214-214", method="withdrawFunds(uint256 withdrawAmount)", type_label=expression_statement];
1316 [label="214_ owner.transfer(withdrawAmount);\n1316-expression_statement-215-215", method="withdrawFunds(uint256 withdrawAmount)", type_label=expression_statement];
1323 [label="216_ bool public payedOut_unchk33 = false;\n1323-new_variable-217-217", method="", type_label=new_variable];
1330 [label="217_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1330-function_definition-218-221", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1334 [label="218_ require(payedOut_unchk33);\n1334-expression_statement-219-219", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1339 [label="219_ msg.sender.send(address(this).balance);\n1339-expression_statement-220-220", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1352 [label="221_ function kill() external onlyContractOwner {\n        selfdestruct(owner);\n    }\n1352-function_definition-222-224", method="kill()", type_label=function_definition];
1355 [label="221_ onlyContractOwner\n1355-expression_statement-222-222", method="kill()", type_label=expression_statement];
1358 [label="222_ selfdestruct(owner);\n1358-expression_statement-223-223", method="kill()", type_label=expression_statement];
1363 [label="224_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1363-function_definition-225-226", method="bug_unchk27(address payable addr)", type_label=function_definition];
1371 [label="225_ addr.send (42 ether);\n1371-expression_statement-226-226", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
97;
491;
1305;
33 -> 41  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 82  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 92  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1456 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
92 -> 1456  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
111 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
118 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
132 -> 138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
234 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
236 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 258  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
253 -> 1627  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1627 -> 260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
258 -> 1627  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
258 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
260 -> 268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
268 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
282 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
319 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
358 -> 368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
389 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 1883  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
533 -> 542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 1975  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
642 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
706 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
726 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
741 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
755 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
771 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 828  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
812 -> 2186  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2186 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 812  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
828 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
853 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
876 -> 888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
888 -> 895  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
888 -> 2262  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2262 -> 902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 2262  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
902 -> 912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 825  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
960 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 1025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1040 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1092 -> 1099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 1108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1108 -> 1114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1114 -> 1120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1120 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1126 -> 1134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1157 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 1183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1183 -> 1192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1202 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1233 -> 1240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1240 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 1254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1254 -> 1260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1272 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1286 -> 1290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1290 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1306 -> 1316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1330 -> 1334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1334 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1352 -> 1358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1363 -> 1371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
97 -> 1456  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
491 -> 1855  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1305 -> 2669  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
