digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n154-function_definition-22-24", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
162 [label="22_ callee.call.value(1 ether);\n162-expression_statement-23-23", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
172 [label="24_ function balanceOf(address tokenOwner) public view returns (uint balance);\n172-function_definition-25-25", method="balanceOf(address tokenOwner)", type_label=function_definition];
185 [label="25_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n185-function_definition-26-30", method="bug_unchk19()", type_label=function_definition];
189 [label="26_ address payable addr_unchk19;\n189-new_variable-27-27", method="bug_unchk19()", type_label=new_variable];
194 [label="27_ if_!addr_unchk19.send (10 ether) || 1==1\n194-if-28-29", method="bug_unchk19()", type_label=if];
1741 [label="27_ end_if", method="bug_unchk19()", type_label=end_if];
210 [label="30_ function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n210-function_definition-31-31", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
227 [label="31_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n227-function_definition-32-34", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
235 [label="32_ callee.send(5 ether);\n235-expression_statement-33-33", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
243 [label="34_ function transfer(address to, uint tokens) public returns (bool success);\n243-function_definition-35-35", method="transfer(address to,uint tokens)", type_label=function_definition];
259 [label="35_ bool public payedOut_unchk20 = false;\n259-new_variable-36-36", method="", type_label=new_variable];
266 [label="36_ address payable public winner_unchk20;\n266-new_variable-37-37", method="", type_label=new_variable];
271 [label="37_ uint public winAmount_unchk20;\n271-new_variable-38-38", method="", type_label=new_variable];
276 [label="38_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n276-function_definition-39-43", method="sendToWinner_unchk20()", type_label=function_definition];
280 [label="39_ require(!payedOut_unchk20);\n280-expression_statement-40-40", method="sendToWinner_unchk20()", type_label=expression_statement];
286 [label="40_ winner_unchk20.send(winAmount_unchk20);\n286-expression_statement-41-41", method="sendToWinner_unchk20()", type_label=expression_statement];
293 [label="41_ payedOut_unchk20 = true;\n293-expression_statement-42-42", method="sendToWinner_unchk20()", type_label=expression_statement];
298 [label="43_ function approve(address spender, uint tokens) public returns (bool success);\n298-function_definition-44-44", method="approve(address spender,uint tokens)", type_label=function_definition];
314 [label="44_ bool public payedOut_unchk32 = false;\n314-new_variable-45-45", method="", type_label=new_variable];
321 [label="45_ address payable public winner_unchk32;\n321-new_variable-46-46", method="", type_label=new_variable];
326 [label="46_ uint public winAmount_unchk32;\n326-new_variable-47-47", method="", type_label=new_variable];
331 [label="47_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n331-function_definition-48-52", method="sendToWinner_unchk32()", type_label=function_definition];
335 [label="48_ require(!payedOut_unchk32);\n335-expression_statement-49-49", method="sendToWinner_unchk32()", type_label=expression_statement];
341 [label="49_ winner_unchk32.send(winAmount_unchk32);\n341-expression_statement-50-50", method="sendToWinner_unchk32()", type_label=expression_statement];
348 [label="50_ payedOut_unchk32 = true;\n348-expression_statement-51-51", method="sendToWinner_unchk32()", type_label=expression_statement];
353 [label="52_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n353-function_definition-53-53", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
373 [label="53_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n373-function_definition-54-56", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
381 [label="54_ callee.send(5 ether);\n381-expression_statement-55-55", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
389 [label="56_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n389-function_definition-57-61", method="bug_unchk31()", type_label=function_definition];
393 [label="57_ address payable addr_unchk31;\n393-new_variable-58-58", method="bug_unchk31()", type_label=new_variable];
398 [label="58_ if_!addr_unchk31.send (10 ether) || 1==1\n398-if-59-60", method="bug_unchk31()", type_label=if];
1945 [label="58_ end_if", method="bug_unchk31()", type_label=end_if];
428 [label="62_ bool public payedOut_unchk45 = false;\n428-new_variable-63-63", method="", type_label=new_variable];
435 [label="63_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n435-function_definition-64-67", method="withdrawLeftOver_unchk45()", type_label=function_definition];
439 [label="64_ require(payedOut_unchk45);\n439-expression_statement-65-65", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
444 [label="65_ msg.sender.send(address(this).balance);\n444-expression_statement-66-66", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
474 [label="70_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n474-function_definition-71-71", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
493 [label="71_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n493-function_definition-72-76", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
509 [label="72_ uint64 subpot_unchk46 = 3 ether;\n509-new_variable-73-73", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
516 [label="73_ winner_unchk46.send(subpot_unchk46);\n516-expression_statement-74-74", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
523 [label="74_ subpot_unchk46= 0;\n523-expression_statement-75-75", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
530 [label="78_ function bug_unchk42() public{\nuint receivers_unchk42;\naddress payable addr_unchk42;\nif (!addr_unchk42.send(42 ether))\n	{receivers_unchk42 +=1;}\nelse\n	{revert();}\n}\n530-function_definition-79-86", method="bug_unchk42()", type_label=function_definition];
534 [label="79_ uint receivers_unchk42;\n534-new_variable-80-80", method="bug_unchk42()", type_label=new_variable];
539 [label="80_ address payable addr_unchk42;\n539-new_variable-81-81", method="bug_unchk42()", type_label=new_variable];
544 [label="81_ if\n544-if-82-85", method="bug_unchk42()", type_label=if];
2091 [label="81_ end_if", method="bug_unchk42()", type_label=end_if];
554 [label="82_ receivers_unchk42 +=1;\n554-expression_statement-83-83", method="bug_unchk42()", type_label=expression_statement];
561 [label="86_ address public owner;\n561-new_variable-87-87", method="", type_label=new_variable];
566 [label="87_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n566-function_definition-88-90", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
574 [label="88_ callee.send(5 ether);\n574-expression_statement-89-89", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
582 [label="90_ address public newOwner;\n582-new_variable-91-91", method="", type_label=new_variable];
587 [label="91_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n587-function_definition-92-94", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
595 [label="92_ callee.call.value(1 ether);\n595-expression_statement-93-93", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
617 [label="96_ owner = msg.sender;\n617-expression_statement-97-97", method="", type_label=expression_statement];
623 [label="98_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n623-function_definition-99-107", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
627 [label="99_ address payable addr_unchk4;\n627-new_variable-100-100", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
632 [label="100_ if\n632-if-101-106", method="UncheckedExternalCall_unchk4()", type_label=if];
2179 [label="100_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
643 [label="107_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n643-expression_statement-108-111", method="", type_label=expression_statement];
646 [label="108_ require(msg.sender == owner);\n646-expression_statement-109-109", method="", type_label=expression_statement];
655 [label="109_ _;\n655-expression_statement-110-110", method="", type_label=expression_statement];
657 [label="111_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n657-function_definition-112-114", method="transferOwnership(address _newOwner)", type_label=function_definition];
664 [label="111_ onlyOwner\n664-expression_statement-112-112", method="transferOwnership(address _newOwner)", type_label=expression_statement];
667 [label="112_ newOwner = _newOwner;\n667-expression_statement-113-113", method="transferOwnership(address _newOwner)", type_label=expression_statement];
671 [label="114_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n671-function_definition-115-119", method="bug_unchk7()", type_label=function_definition];
675 [label="115_ address payable addr_unchk7;\n675-new_variable-116-116", method="bug_unchk7()", type_label=new_variable];
680 [label="116_ if_!addr_unchk7.send (10 ether) || 1==1\n680-if-117-118", method="bug_unchk7()", type_label=if];
2227 [label="116_ end_if", method="bug_unchk7()", type_label=end_if];
696 [label="119_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n696-function_definition-120-125", method="acceptOwnership()", type_label=function_definition];
700 [label="120_ require(msg.sender == newOwner);\n700-expression_statement-121-121", method="acceptOwnership()", type_label=expression_statement];
715 [label="122_ owner = newOwner;\n715-expression_statement-123-123", method="acceptOwnership()", type_label=expression_statement];
719 [label="123_ newOwner = address(0);\n719-expression_statement-124-124", method="acceptOwnership()", type_label=expression_statement];
725 [label="125_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n725-function_definition-126-128", method="my_func_unchk23(address payable dst)", type_label=function_definition];
734 [label="126_ dst.send(msg.value);\n734-expression_statement-127-127", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
757 [label="131_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n757-function_definition-132-136", method="bug_unchk43()", type_label=function_definition];
761 [label="132_ address payable addr_unchk43;\n761-new_variable-133-133", method="bug_unchk43()", type_label=new_variable];
766 [label="133_ if_!addr_unchk43.send (10 ether) || 1==1\n766-if-134-135", method="bug_unchk43()", type_label=if];
2313 [label="133_ end_if", method="bug_unchk43()", type_label=end_if];
782 [label="136_ string public symbol;\n782-new_variable-137-137", method="", type_label=new_variable];
787 [label="137_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n787-function_definition-138-140", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
796 [label="138_ dst.call.value(msg.value)(\"\");\n796-expression_statement-139-139", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
811 [label="140_ uint public decimals;\n811-new_variable-141-141", method="", type_label=new_variable];
816 [label="141_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n816-function_definition-142-144", method="withdrawBal_unchk17()", type_label=function_definition];
820 [label="142_ uint64 Balances_unchk17 = 0;\n820-new_variable-143-143", method="withdrawBal_unchk17()", type_label=new_variable];
826 [label="143_ msg.sender.send(Balances_unchk17);\n826-expression_statement-144-144", method="withdrawBal_unchk17()", type_label=expression_statement];
835 [label="144_ string public  name;\n835-new_variable-145-145", method="", type_label=new_variable];
840 [label="145_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n840-function_definition-146-148", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
848 [label="146_ callee.call.value(1 ether);\n848-expression_statement-147-147", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
858 [label="148_ uint _totalSupply;\n858-new_variable-149-149", method="", type_label=new_variable];
862 [label="149_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n862-function_definition-150-151", method="bug_unchk3(address payable addr)", type_label=function_definition];
870 [label="150_ addr.send (42 ether);\n870-expression_statement-151-151", method="bug_unchk3(address payable addr)", type_label=expression_statement];
878 [label="151_ mapping(address => uint) balances;\n878-new_variable-152-152", method="", type_label=new_variable];
884 [label="152_ bool public payedOut_unchk9 = false;\n884-new_variable-153-153", method="", type_label=new_variable];
891 [label="153_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n891-function_definition-154-157", method="withdrawLeftOver_unchk9()", type_label=function_definition];
895 [label="154_ require(payedOut_unchk9);\n895-expression_statement-155-155", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
900 [label="155_ msg.sender.send(address(this).balance);\n900-expression_statement-156-156", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
913 [label="157_ mapping(address => mapping(address => uint)) allowed;\n913-new_variable-158-158", method="", type_label=new_variable];
923 [label="159_ symbol = \"FTB\";\n923-expression_statement-160-160", method="", type_label=expression_statement];
928 [label="160_ name = \"ForTheBlockchain\";\n928-expression_statement-161-161", method="", type_label=expression_statement];
933 [label="161_ decimals = 8;\n933-expression_statement-162-162", method="", type_label=expression_statement];
937 [label="162_ _totalSupply =100000000 * 10**(decimals);\n937-expression_statement-163-163", method="", type_label=expression_statement];
946 [label="163_ balances[owner] = _totalSupply;\n946-expression_statement-164-164", method="", type_label=expression_statement];
962 [label="166_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n962-function_definition-167-169", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
970 [label="167_ callee.send(5 ether);\n970-expression_statement-168-168", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
978 [label="169_ function totalSupply() public view returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n978-function_definition-170-172", method="totalSupply()", type_label=function_definition];
987 [label="170_ return _totalSupply.sub(balances[address(0)]);\n987-return-171-171", method="totalSupply()", type_label=return];
998 [label="172_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n998-function_definition-173-180", method="bug_unchk30()", type_label=function_definition];
1002 [label="173_ uint receivers_unchk30;\n1002-new_variable-174-174", method="bug_unchk30()", type_label=new_variable];
1007 [label="174_ address payable addr_unchk30;\n1007-new_variable-175-175", method="bug_unchk30()", type_label=new_variable];
1012 [label="175_ if\n1012-if-176-179", method="bug_unchk30()", type_label=if];
2559 [label="175_ end_if", method="bug_unchk30()", type_label=end_if];
1022 [label="176_ receivers_unchk30 +=1;\n1022-expression_statement-177-177", method="bug_unchk30()", type_label=expression_statement];
1029 [label="180_ function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n1029-function_definition-181-183", method="balanceOf(address tokenOwner)", type_label=function_definition];
1043 [label="181_ return balances[tokenOwner];\n1043-return-182-182", method="balanceOf(address tokenOwner)", type_label=return];
1047 [label="183_ bool public payedOut_unchk8 = false;\n1047-new_variable-184-184", method="", type_label=new_variable];
1054 [label="184_ address payable public winner_unchk8;\n1054-new_variable-185-185", method="", type_label=new_variable];
1059 [label="185_ uint public winAmount_unchk8;\n1059-new_variable-186-186", method="", type_label=new_variable];
1064 [label="186_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1064-function_definition-187-191", method="sendToWinner_unchk8()", type_label=function_definition];
1068 [label="187_ require(!payedOut_unchk8);\n1068-expression_statement-188-188", method="sendToWinner_unchk8()", type_label=expression_statement];
1074 [label="188_ winner_unchk8.send(winAmount_unchk8);\n1074-expression_statement-189-189", method="sendToWinner_unchk8()", type_label=expression_statement];
1081 [label="189_ payedOut_unchk8 = true;\n1081-expression_statement-190-190", method="sendToWinner_unchk8()", type_label=expression_statement];
1086 [label="191_ function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n1086-function_definition-192-197", method="transfer(address to,uint tokens)", type_label=function_definition];
1103 [label="192_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n1103-expression_statement-193-193", method="transfer(address to,uint tokens)", type_label=expression_statement];
1120 [label="193_ balances[to] = balances[to].add(tokens);\n1120-expression_statement-194-194", method="transfer(address to,uint tokens)", type_label=expression_statement];
1143 [label="195_ return true;\n1143-return-196-196", method="transfer(address to,uint tokens)", type_label=return];
1146 [label="197_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1146-function_definition-198-199", method="bug_unchk39(address payable addr)", type_label=function_definition];
1154 [label="198_ addr.send (4 ether);\n1154-expression_statement-199-199", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1162 [label="199_ function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n1162-function_definition-200-204", method="approve(address spender,uint tokens)", type_label=function_definition];
1179 [label="200_ allowed[msg.sender][spender] = tokens;\n1179-expression_statement-201-201", method="approve(address spender,uint tokens)", type_label=expression_statement];
1199 [label="202_ return true;\n1199-return-203-203", method="approve(address spender,uint tokens)", type_label=return];
1202 [label="204_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1202-function_definition-205-207", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1211 [label="205_ dst.call.value(msg.value)(\"\");\n1211-expression_statement-206-206", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1226 [label="207_ function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n1226-function_definition-208-214", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
1247 [label="208_ balances[from] = balances[from].sub(tokens);\n1247-expression_statement-209-209", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1260 [label="209_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n1260-expression_statement-210-210", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1281 [label="210_ balances[to] = balances[to].add(tokens);\n1281-expression_statement-211-211", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1302 [label="212_ return true;\n1302-return-213-213", method="transferFrom(address from,address to,uint tokens)", type_label=return];
1305 [label="214_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1305-function_definition-215-217", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1314 [label="215_ dst.send(msg.value);\n1314-expression_statement-216-216", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1323 [label="217_ function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n1323-function_definition-218-220", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
1341 [label="218_ return allowed[tokenOwner][spender];\n1341-return-219-219", method="allowance(address tokenOwner,address spender)", type_label=return];
1347 [label="220_ bool public payedOut_unchk44 = false;\n1347-new_variable-221-221", method="", type_label=new_variable];
1354 [label="221_ address payable public winner_unchk44;\n1354-new_variable-222-222", method="", type_label=new_variable];
1359 [label="222_ uint public winAmount_unchk44;\n1359-new_variable-223-223", method="", type_label=new_variable];
1364 [label="223_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1364-function_definition-224-228", method="sendToWinner_unchk44()", type_label=function_definition];
1368 [label="224_ require(!payedOut_unchk44);\n1368-expression_statement-225-225", method="sendToWinner_unchk44()", type_label=expression_statement];
1374 [label="225_ winner_unchk44.send(winAmount_unchk44);\n1374-expression_statement-226-226", method="sendToWinner_unchk44()", type_label=expression_statement];
1381 [label="226_ payedOut_unchk44 = true;\n1381-expression_statement-227-227", method="sendToWinner_unchk44()", type_label=expression_statement];
1386 [label="228_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n1386-function_definition-229-234", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
1407 [label="229_ allowed[msg.sender][spender] = tokens;\n1407-expression_statement-230-230", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
1427 [label="231_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n1427-expression_statement-232-232", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
1447 [label="232_ return true;\n1447-return-233-233", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
1450 [label="234_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1450-function_definition-235-243", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1454 [label="235_ address payable addr_unchk40;\n1454-new_variable-236-236", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1459 [label="236_ if\n1459-if-237-242", method="UncheckedExternalCall_unchk40()", type_label=if];
3006 [label="236_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1476 [label="246_ bool public payedOut_unchk33 = false;\n1476-new_variable-247-247", method="", type_label=new_variable];
1483 [label="247_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1483-function_definition-248-251", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1487 [label="248_ require(payedOut_unchk33);\n1487-expression_statement-249-249", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1492 [label="249_ msg.sender.send(address(this).balance);\n1492-expression_statement-250-250", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1505 [label="251_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n1505-function_definition-252-254", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
1516 [label="251_ onlyOwner\n1516-expression_statement-252-252", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
1524 [label="252_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n1524-return-253-253", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
1536 [label="254_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1536-function_definition-255-256", method="bug_unchk27(address payable addr)", type_label=function_definition];
1544 [label="255_ addr.send (42 ether);\n1544-expression_statement-256-256", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
559;
642;
1027;
1469;
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 1741  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
227 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
276 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
341 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
389 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 1945  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
435 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
534 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 554  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2091 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 2091  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
566 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
623 -> 627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
627 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 2227  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
696 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
766 -> 2313  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
787 -> 796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
820 -> 826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
878 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
933 -> 937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
962 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
998 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 1007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1007 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1022  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2559 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1022 -> 2559  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1029 -> 1043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1047 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1064 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1074 -> 1081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1086 -> 1103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1103 -> 1120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1143 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1146 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1202 -> 1211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1226 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1302 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1305 -> 1314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1323 -> 1341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1341 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1347 -> 1354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1354 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1364 -> 1368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1368 -> 1374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1374 -> 1381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1386 -> 1407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1427 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1450 -> 1454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1454 -> 1459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1483 -> 1487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1487 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1505 -> 1524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1524 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1536 -> 1544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 2091  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
642 -> 2179  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1027 -> 2559  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1469 -> 3006  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
