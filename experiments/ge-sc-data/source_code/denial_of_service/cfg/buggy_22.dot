digraph  {
13 [label="2_ function cash_unchk22(uint roundIndex, uint subpotIndex, address payable winner_unchk22)public{\n        uint64 subpot_unchk22 = 10 ether;\n        winner_unchk22.send(subpot_unchk22);   \n        subpot_unchk22= 0;\n}\n13-function_definition-3-7", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=function_definition];
29 [label="3_ uint64 subpot_unchk22 = 10 ether;\n29-new_variable-4-4", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=new_variable];
36 [label="4_ winner_unchk22.send(subpot_unchk22);\n36-expression_statement-5-5", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
43 [label="5_ subpot_unchk22= 0;\n43-expression_statement-6-6", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
47 [label="7_ address public owner;\n47-new_variable-8-8", method="", type_label=new_variable];
54 [label="9_ owner = msg.sender;\n54-expression_statement-10-10", method="", type_label=expression_statement];
60 [label="11_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n60-function_definition-12-14", method="withdrawBal_unchk17()", type_label=function_definition];
64 [label="12_ uint64 Balances_unchk17 = 0;\n64-new_variable-13-13", method="withdrawBal_unchk17()", type_label=new_variable];
70 [label="13_ msg.sender.send(Balances_unchk17);\n70-expression_statement-14-14", method="withdrawBal_unchk17()", type_label=expression_statement];
79 [label="14_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n79-expression_statement-15-18", method="", type_label=expression_statement];
82 [label="15_ require(msg.sender == owner);\n82-expression_statement-16-16", method="", type_label=expression_statement];
91 [label="16_ _;\n91-expression_statement-17-17", method="", type_label=expression_statement];
93 [label="18_ function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n93-function_definition-19-21", method="transferOwnership(address newOwner)", type_label=function_definition];
99 [label="18_ onlyOwner\n99-expression_statement-19-19", method="transferOwnership(address newOwner)", type_label=expression_statement];
103 [label="19_ owner = newOwner;\n103-expression_statement-20-20", method="transferOwnership(address newOwner)", type_label=expression_statement];
107 [label="21_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n107-function_definition-22-24", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
115 [label="22_ callee.call.value(1 ether);\n115-expression_statement-23-23", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
128 [label="26_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n128-function_definition-27-29", method="my_func_unchk35(address payable dst)", type_label=function_definition];
137 [label="27_ dst.send(msg.value);\n137-expression_statement-28-28", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
156 [label="30_ bool public payedOut_unchk44 = false;\n156-new_variable-31-31", method="", type_label=new_variable];
163 [label="31_ address payable public winner_unchk44;\n163-new_variable-32-32", method="", type_label=new_variable];
168 [label="32_ uint public winAmount_unchk44;\n168-new_variable-33-33", method="", type_label=new_variable];
173 [label="33_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n173-function_definition-34-38", method="sendToWinner_unchk44()", type_label=function_definition];
177 [label="34_ require(!payedOut_unchk44);\n177-expression_statement-35-35", method="sendToWinner_unchk44()", type_label=expression_statement];
183 [label="35_ winner_unchk44.send(winAmount_unchk44);\n183-expression_statement-36-36", method="sendToWinner_unchk44()", type_label=expression_statement];
190 [label="36_ payedOut_unchk44 = true;\n190-expression_statement-37-37", method="sendToWinner_unchk44()", type_label=expression_statement];
213 [label="39_ function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public {\n        Token t = Token(_token);\n        require(t.transferFrom(_from, address(this), _value));\n        emit receivedTokens(_from, _value, _token, _extraData);\n    }\n213-function_definition-40-44", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=function_definition];
233 [label="40_ Token t = Token(_token);\n233-new_variable-41-41", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=new_variable];
243 [label="41_ require(t.transferFrom(_from, address(this), _value));\n243-expression_statement-42-42", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=expression_statement];
269 [label="44_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n269-function_definition-45-46", method="bug_unchk3(address payable addr)", type_label=function_definition];
277 [label="45_ addr.send (42 ether);\n277-expression_statement-46-46", method="bug_unchk3(address payable addr)", type_label=expression_statement];
299 [label="49_ bool public payedOut_unchk9 = false;\n299-new_variable-50-50", method="", type_label=new_variable];
306 [label="50_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n306-function_definition-51-54", method="withdrawLeftOver_unchk9()", type_label=function_definition];
310 [label="51_ require(payedOut_unchk9);\n310-expression_statement-52-52", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
315 [label="52_ msg.sender.send(address(this).balance);\n315-expression_statement-53-53", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
331 [label="56_ function totalSupply() public view returns (uint256);\n331-function_definition-57-57", method="totalSupply()", type_label=function_definition];
339 [label="57_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n339-function_definition-58-60", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
347 [label="58_ callee.call.value(1 ether);\n347-expression_statement-59-59", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
357 [label="60_ function actualBalanceOf(address _owner) public view returns (uint256 balance);\n357-function_definition-61-61", method="actualBalanceOf(address _owner)", type_label=function_definition];
370 [label="61_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n370-function_definition-62-66", method="bug_unchk19()", type_label=function_definition];
374 [label="62_ address payable addr_unchk19;\n374-new_variable-63-63", method="bug_unchk19()", type_label=new_variable];
379 [label="63_ if_!addr_unchk19.send (10 ether) || 1==1\n379-if-64-65", method="bug_unchk19()", type_label=if];
2624 [label="63_ end_if", method="bug_unchk19()", type_label=end_if];
395 [label="66_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n395-function_definition-67-67", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
415 [label="67_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n415-function_definition-68-70", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
423 [label="68_ callee.send(5 ether);\n423-expression_statement-69-69", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
431 [label="70_ function renounceOwnership() public;\n431-function_definition-71-71", method="renounceOwnership()", type_label=function_definition];
434 [label="71_ bool public payedOut_unchk20 = false;\n434-new_variable-72-72", method="", type_label=new_variable];
441 [label="72_ address payable public winner_unchk20;\n441-new_variable-73-73", method="", type_label=new_variable];
446 [label="73_ uint public winAmount_unchk20;\n446-new_variable-74-74", method="", type_label=new_variable];
451 [label="74_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n451-function_definition-75-79", method="sendToWinner_unchk20()", type_label=function_definition];
455 [label="75_ require(!payedOut_unchk20);\n455-expression_statement-76-76", method="sendToWinner_unchk20()", type_label=expression_statement];
461 [label="76_ winner_unchk20.send(winAmount_unchk20);\n461-expression_statement-77-77", method="sendToWinner_unchk20()", type_label=expression_statement];
468 [label="77_ payedOut_unchk20 = true;\n468-expression_statement-78-78", method="sendToWinner_unchk20()", type_label=expression_statement];
473 [label="79_ function transferOwnership(address _newOwner) public;\n473-function_definition-80-80", method="transferOwnership(address _newOwner)", type_label=function_definition];
480 [label="80_ bool public payedOut_unchk32 = false;\n480-new_variable-81-81", method="", type_label=new_variable];
487 [label="81_ address payable public winner_unchk32;\n487-new_variable-82-82", method="", type_label=new_variable];
492 [label="82_ uint public winAmount_unchk32;\n492-new_variable-83-83", method="", type_label=new_variable];
497 [label="83_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n497-function_definition-84-88", method="sendToWinner_unchk32()", type_label=function_definition];
501 [label="84_ require(!payedOut_unchk32);\n501-expression_statement-85-85", method="sendToWinner_unchk32()", type_label=expression_statement];
507 [label="85_ winner_unchk32.send(winAmount_unchk32);\n507-expression_statement-86-86", method="sendToWinner_unchk32()", type_label=expression_statement];
514 [label="86_ payedOut_unchk32 = true;\n514-expression_statement-87-87", method="sendToWinner_unchk32()", type_label=expression_statement];
519 [label="88_ function pause() public;\n519-function_definition-89-89", method="pause()", type_label=function_definition];
522 [label="89_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n522-function_definition-90-92", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
530 [label="90_ callee.send(5 ether);\n530-expression_statement-91-91", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
538 [label="92_ function unpause() public;\n538-function_definition-93-93", method="unpause()", type_label=function_definition];
541 [label="93_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n541-function_definition-94-98", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
557 [label="94_ uint64 subpot_unchk46 = 3 ether;\n557-new_variable-95-95", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
564 [label="95_ winner_unchk46.send(subpot_unchk46);\n564-expression_statement-96-96", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
571 [label="96_ subpot_unchk46= 0;\n571-expression_statement-97-97", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
578 [label="100_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"Safe mul error\");\n        return c;\n    }\n578-function_definition-101-108", method="mul(uint256 a,uint256 b)", type_label=function_definition];
595 [label="101_ if_a == 0\n595-if-102-104", method="mul(uint256 a,uint256 b)", type_label=if];
2840 [label="101_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
600 [label="102_ return 0;\n600-return-103-103", method="mul(uint256 a,uint256 b)", type_label=return];
602 [label="104_ uint256 c = a * b;\n602-new_variable-105-105", method="mul(uint256 a,uint256 b)", type_label=new_variable];
610 [label="105_ require(c / a == b, \"Safe mul error\");\n610-expression_statement-106-106", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
622 [label="106_ return c;\n622-return-107-107", method="mul(uint256 a,uint256 b)", type_label=return];
624 [label="108_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"Safe div error\");\n        uint256 c = a / b;\n        return c;\n    }\n624-function_definition-109-113", method="div(uint256 a,uint256 b)", type_label=function_definition];
641 [label="109_ require(b > 0, \"Safe div error\");\n641-expression_statement-110-110", method="div(uint256 a,uint256 b)", type_label=expression_statement];
651 [label="110_ uint256 c = a / b;\n651-new_variable-111-111", method="div(uint256 a,uint256 b)", type_label=new_variable];
659 [label="111_ return c;\n659-return-112-112", method="div(uint256 a,uint256 b)", type_label=return];
661 [label="113_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"Safe sub error\");\n        uint256 c = a - b;\n        return c;\n    }\n661-function_definition-114-118", method="sub(uint256 a,uint256 b)", type_label=function_definition];
678 [label="114_ require(b <= a, \"Safe sub error\");\n678-expression_statement-115-115", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
688 [label="115_ uint256 c = a - b;\n688-new_variable-116-116", method="sub(uint256 a,uint256 b)", type_label=new_variable];
696 [label="116_ return c;\n696-return-117-117", method="sub(uint256 a,uint256 b)", type_label=return];
698 [label="118_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"Safe add error\");\n        return c;\n    }\n698-function_definition-119-123", method="add(uint256 a,uint256 b)", type_label=function_definition];
715 [label="119_ uint256 c = a + b;\n715-new_variable-120-120", method="add(uint256 a,uint256 b)", type_label=new_variable];
723 [label="120_ require(c >= a, \"Safe add error\");\n723-expression_statement-121-121", method="add(uint256 a,uint256 b)", type_label=expression_statement];
733 [label="121_ return c;\n733-return-122-122", method="add(uint256 a,uint256 b)", type_label=return];
735 [label="123_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"Safe mod error\");\n        return a % b;\n    }\n735-function_definition-124-127", method="mod(uint256 a,uint256 b)", type_label=function_definition];
752 [label="124_ require(b != 0, \"Safe mod error\");\n752-expression_statement-125-125", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
762 [label="125_ return a % b;\n762-return-126-126", method="mod(uint256 a,uint256 b)", type_label=return];
780 [label="130_ function my_func_uncheck12(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n780-function_definition-131-133", method="my_func_uncheck12(address payable dst)", type_label=function_definition];
789 [label="131_ dst.call.value(msg.value)(\"\");\n789-expression_statement-132-132", method="my_func_uncheck12(address payable dst)", type_label=expression_statement];
804 [label="133_ uint public minimumQuorum;\n804-new_variable-134-134", method="", type_label=new_variable];
809 [label="134_ function my_func_unchk11(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n809-function_definition-135-137", method="my_func_unchk11(address payable dst)", type_label=function_definition];
818 [label="135_ dst.send(msg.value);\n818-expression_statement-136-136", method="my_func_unchk11(address payable dst)", type_label=expression_statement];
827 [label="137_ uint public minimumTokensToVote;\n827-new_variable-138-138", method="", type_label=new_variable];
832 [label="138_ function callnotchecked_unchk1(address payable callee) public {\n    callee.call.value(2 ether);\n  }\n832-function_definition-139-141", method="callnotchecked_unchk1(address payable callee)", type_label=function_definition];
840 [label="139_ callee.call.value(2 ether);\n840-expression_statement-140-140", method="callnotchecked_unchk1(address payable callee)", type_label=expression_statement];
850 [label="141_ uint public debatingPeriodInMinutes;\n850-new_variable-142-142", method="", type_label=new_variable];
855 [label="142_ function withdrawBal_unchk41 () public{\n	uint64 Balances_unchk41 = 0;\n	msg.sender.send(Balances_unchk41);}\n855-function_definition-143-145", method="withdrawBal_unchk41()", type_label=function_definition];
859 [label="143_ uint64 Balances_unchk41 = 0;\n859-new_variable-144-144", method="withdrawBal_unchk41()", type_label=new_variable];
865 [label="144_ msg.sender.send(Balances_unchk41);\n865-expression_statement-145-145", method="withdrawBal_unchk41()", type_label=expression_statement];
874 [label="145_ Proposal[] public proposals;\n874-new_variable-146-146", method="", type_label=new_variable];
881 [label="146_ function bug_unchk42() public{\nuint receivers_unchk42;\naddress payable addr_unchk42;\nif (!addr_unchk42.send(42 ether))\n	{receivers_unchk42 +=1;}\nelse\n	{revert();}\n}\n881-function_definition-147-154", method="bug_unchk42()", type_label=function_definition];
885 [label="147_ uint receivers_unchk42;\n885-new_variable-148-148", method="bug_unchk42()", type_label=new_variable];
890 [label="148_ address payable addr_unchk42;\n890-new_variable-149-149", method="bug_unchk42()", type_label=new_variable];
895 [label="149_ if\n895-if-150-153", method="bug_unchk42()", type_label=if];
3140 [label="149_ end_if", method="bug_unchk42()", type_label=end_if];
905 [label="150_ receivers_unchk42 +=1;\n905-expression_statement-151-151", method="bug_unchk42()", type_label=expression_statement];
912 [label="154_ uint public numProposals;\n912-new_variable-155-155", method="", type_label=new_variable];
917 [label="155_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n917-function_definition-156-158", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
925 [label="156_ callee.send(5 ether);\n925-expression_statement-157-157", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
933 [label="158_ Token public tokenAddress;\n933-new_variable-159-159", method="", type_label=new_variable];
939 [label="159_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n939-function_definition-160-164", method="bug_unchk43()", type_label=function_definition];
943 [label="160_ address payable addr_unchk43;\n943-new_variable-161-161", method="bug_unchk43()", type_label=new_variable];
948 [label="161_ if_!addr_unchk43.send (10 ether) || 1==1\n948-if-162-163", method="bug_unchk43()", type_label=if];
3193 [label="161_ end_if", method="bug_unchk43()", type_label=end_if];
964 [label="164_ address chairmanAddress;\n964-new_variable-165-165", method="", type_label=new_variable];
968 [label="165_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n968-function_definition-166-168", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
977 [label="166_ dst.call.value(msg.value)(\"\");\n977-expression_statement-167-167", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
992 [label="168_ bool public initialized = false;\n992-new_variable-169-169", method="", type_label=new_variable];
999 [label="169_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n999-function_definition-170-178", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1003 [label="170_ address payable addr_unchk40;\n1003-new_variable-171-171", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1008 [label="171_ if\n1008-if-172-177", method="UncheckedExternalCall_unchk40()", type_label=if];
3253 [label="171_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1021 [label="179_ bool public payedOut_unchk33 = false;\n1021-new_variable-180-180", method="", type_label=new_variable];
1028 [label="180_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1028-function_definition-181-184", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1032 [label="181_ require(payedOut_unchk33);\n1032-expression_statement-182-182", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1037 [label="182_ msg.sender.send(address(this).balance);\n1037-expression_statement-183-183", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1068 [label="185_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1068-function_definition-186-187", method="bug_unchk27(address payable addr)", type_label=function_definition];
1076 [label="186_ addr.send (42 ether);\n1076-expression_statement-187-187", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1098 [label="188_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n1098-function_definition-189-193", method="bug_unchk31()", type_label=function_definition];
1102 [label="189_ address payable addr_unchk31;\n1102-new_variable-190-190", method="bug_unchk31()", type_label=new_variable];
1107 [label="190_ if_!addr_unchk31.send (10 ether) || 1==1\n1107-if-191-192", method="bug_unchk31()", type_label=if];
3352 [label="190_ end_if", method="bug_unchk31()", type_label=end_if];
1141 [label="194_ bool public payedOut_unchk45 = false;\n1141-new_variable-195-195", method="", type_label=new_variable];
1148 [label="195_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n1148-function_definition-196-199", method="withdrawLeftOver_unchk45()", type_label=function_definition];
1152 [label="196_ require(payedOut_unchk45);\n1152-expression_statement-197-197", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1157 [label="197_ msg.sender.send(address(this).balance);\n1157-expression_statement-198-198", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1192 [label="200_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n1192-function_definition-201-203", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
1200 [label="201_ callee.call.value(1 ether);\n1200-expression_statement-202-202", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
1224 [label="204_ struct Proposal {\n        address recipient;\n        uint amount;\n        string description;\n        bool signedByChairman;\n        uint minExecutionDate;\n        bool executed;\n        bool proposalPassed;\n        uint numberOfVotes;\n        bytes32 proposalHash;\n        Vote[] votes;\n        mapping (address => bool) voted;\n    }\n1224-expression_statement-205-217", method="Proposal()", type_label=expression_statement];
1274 [label="217_ struct Vote {\n        bool inSupport;\n        address voter;\n    }\n1274-expression_statement-218-221", method="Vote()", type_label=expression_statement];
1284 [label="221_ modifier onlyTokenholders {\n        require(tokenAddress.actualBalanceOf(msg.sender) > minimumTokensToVote);\n        _;\n    }\n1284-expression_statement-222-225", method="", type_label=expression_statement];
1287 [label="222_ require(tokenAddress.actualBalanceOf(msg.sender) > minimumTokensToVote);\n1287-expression_statement-223-223", method="", type_label=expression_statement];
1301 [label="223_ _;\n1301-expression_statement-224-224", method="", type_label=expression_statement];
1303 [label="225_ modifier onlyChairman {\n        require(msg.sender == chairmanAddress);\n        _;\n    }\n1303-expression_statement-226-229", method="", type_label=expression_statement];
1306 [label="226_ require(msg.sender == chairmanAddress);\n1306-expression_statement-227-227", method="", type_label=expression_statement];
1315 [label="227_ _;\n1315-expression_statement-228-228", method="", type_label=expression_statement];
1319 [label="231_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1319-function_definition-232-240", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
1323 [label="232_ address payable addr_unchk4;\n1323-new_variable-233-233", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
1328 [label="233_ if\n1328-if-234-239", method="UncheckedExternalCall_unchk4()", type_label=if];
3573 [label="233_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
1339 [label="240_ function init(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {\n        require(!initialized);\n        initialized = true;\n        changeVotingRules(_tokenAddress, _chairmanAddress, _minimumTokensToVote, _minimumPercentToPassAVote, _minutesForDebate);\n        emit Initialized();\n    }\n1339-function_definition-241-246", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=function_definition];
1362 [label="240_ onlyOwner\n1362-expression_statement-241-241", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1366 [label="241_ require(!initialized);\n1366-expression_statement-242-242", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1372 [label="242_ initialized = true;\n1372-expression_statement-243-243", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1377 [label="243_ changeVotingRules(_tokenAddress, _chairmanAddress, _minimumTokensToVote, _minimumPercentToPassAVote, _minutesForDebate);\n1377-expression_statement-244-244", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1392 [label="246_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n1392-function_definition-247-251", method="bug_unchk7()", type_label=function_definition];
1396 [label="247_ address payable addr_unchk7;\n1396-new_variable-248-248", method="bug_unchk7()", type_label=new_variable];
1401 [label="248_ if_!addr_unchk7.send (10 ether) || 1==1\n1401-if-249-250", method="bug_unchk7()", type_label=if];
3646 [label="248_ end_if", method="bug_unchk7()", type_label=end_if];
1417 [label="251_ function changeVotingRules(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {\n        require(_chairmanAddress != address(0));\n        require(_minimumPercentToPassAVote <= 51);\n        tokenAddress = Token(_tokenAddress);\n        chairmanAddress = _chairmanAddress;\n        if (_minimumTokensToVote == 0 ) _minimumTokensToVote = 1;\n        minimumTokensToVote = _minimumTokensToVote;\n        if (_minimumPercentToPassAVote == 0 ) _minimumPercentToPassAVote = 51;\n        minimumQuorum = _minimumPercentToPassAVote;\n        debatingPeriodInMinutes = _minutesForDebate;\n        emit ChangeOfRules(_minimumTokensToVote, minimumQuorum, debatingPeriodInMinutes, address(tokenAddress), chairmanAddress);\n    }\n1417-function_definition-252-263", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=function_definition];
1440 [label="251_ onlyOwner\n1440-expression_statement-252-252", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1444 [label="252_ require(_chairmanAddress != address(0));\n1444-expression_statement-253-253", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1453 [label="253_ require(_minimumPercentToPassAVote <= 51);\n1453-expression_statement-254-254", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1460 [label="254_ tokenAddress = Token(_tokenAddress);\n1460-expression_statement-255-255", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1467 [label="255_ chairmanAddress = _chairmanAddress;\n1467-expression_statement-256-256", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1471 [label="256_ if__minimumTokensToVote == 0\n1471-if-257-257", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=if];
3716 [label="256_ end_if", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=end_if];
1475 [label="256_ _minimumTokensToVote = 1;\n1475-expression_statement-257-257", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1479 [label="257_ minimumTokensToVote = _minimumTokensToVote;\n1479-expression_statement-258-258", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1483 [label="258_ if__minimumPercentToPassAVote == 0\n1483-if-259-259", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=if];
3728 [label="258_ end_if", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=end_if];
1487 [label="258_ _minimumPercentToPassAVote = 51;\n1487-expression_statement-259-259", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1491 [label="259_ minimumQuorum = _minimumPercentToPassAVote;\n1491-expression_statement-260-260", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1495 [label="260_ debatingPeriodInMinutes = _minutesForDebate;\n1495-expression_statement-261-261", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1513 [label="263_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1513-function_definition-264-266", method="my_func_unchk23(address payable dst)", type_label=function_definition];
1522 [label="264_ dst.send(msg.value);\n1522-expression_statement-265-265", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
1531 [label="266_ function newProposal(\n        address destination,\n        uint weiAmount,\n        string memory transactionDescription,\n        bytes memory transactionBytecode\n    )\n        onlyTokenholders public\n        returns (uint proposalID)\n    {\n        proposalID = proposals.length++;\n        Proposal storage p = proposals[proposalID];\n        p.recipient = destination;\n        p.signedByChairman = false;\n        p.amount = weiAmount;\n        p.description = transactionDescription;\n        p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n        p.minExecutionDate = now + debatingPeriodInMinutes * 1 minutes;\n        p.executed = false;\n        p.proposalPassed = false;\n        p.numberOfVotes = 0;\n        emit ProposalAdded(proposalID, destination, weiAmount, transactionDescription);\n        numProposals = proposalID+1;\n        return proposalID;\n    }\n1531-function_definition-267-290", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=function_definition];
1549 [label="272_ onlyTokenholders\n1549-expression_statement-273-273", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1558 [label="275_ proposalID = proposals.length++;\n1558-expression_statement-276-276", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1561 [label="275_ proposals.length++\n1561-expression_statement-276-276", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1565 [label="276_ Proposal storage p = proposals[proposalID];\n1565-new_variable-277-277", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=new_variable];
1574 [label="277_ p.recipient = destination;\n1574-expression_statement-278-278", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1580 [label="278_ p.signedByChairman = false;\n1580-expression_statement-279-279", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1587 [label="279_ p.amount = weiAmount;\n1587-expression_statement-280-280", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1593 [label="280_ p.description = transactionDescription;\n1593-expression_statement-281-281", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1599 [label="281_ p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n1599-expression_statement-282-282", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1617 [label="282_ p.minExecutionDate = now + debatingPeriodInMinutes * 1 minutes;\n1617-expression_statement-283-283", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1628 [label="283_ p.executed = false;\n1628-expression_statement-284-284", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1635 [label="284_ p.proposalPassed = false;\n1635-expression_statement-285-285", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1642 [label="285_ p.numberOfVotes = 0;\n1642-expression_statement-286-286", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1658 [label="287_ numProposals = proposalID+1;\n1658-expression_statement-288-288", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1664 [label="288_ return proposalID;\n1664-return-289-289", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=return];
1666 [label="290_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n1666-function_definition-291-293", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
1674 [label="291_ callee.send(5 ether);\n1674-expression_statement-292-292", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
1682 [label="293_ function checkProposalCode(\n        uint proposalNumber,\n        address destination,\n        uint weiAmount,\n        bytes memory transactionBytecode\n    )\n        view public\n        returns (bool codeChecksOut)\n    {\n        Proposal storage p = proposals[proposalNumber];\n        return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n    }\n1682-function_definition-294-305", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=function_definition];
1708 [label="302_ Proposal storage p = proposals[proposalNumber];\n1708-new_variable-303-303", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=new_variable];
1717 [label="303_ return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n1717-return-304-304", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=return];
1735 [label="305_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n1735-function_definition-306-313", method="bug_unchk30()", type_label=function_definition];
1739 [label="306_ uint receivers_unchk30;\n1739-new_variable-307-307", method="bug_unchk30()", type_label=new_variable];
1744 [label="307_ address payable addr_unchk30;\n1744-new_variable-308-308", method="bug_unchk30()", type_label=new_variable];
1749 [label="308_ if\n1749-if-309-312", method="bug_unchk30()", type_label=if];
3994 [label="308_ end_if", method="bug_unchk30()", type_label=end_if];
1759 [label="309_ receivers_unchk30 +=1;\n1759-expression_statement-310-310", method="bug_unchk30()", type_label=expression_statement];
1766 [label="313_ function sign(\n        uint proposalNumber,\n        bool signProposal\n    )\n        onlyTokenholders public\n        returns (uint voteID)\n    {\n        require(initialized);\n        Proposal storage p = proposals[proposalNumber];\n        require(msg.sender == chairmanAddress);\n        require(signProposal == true);\n        p.signedByChairman = signProposal;\n        emit ProposalSignedByChairman(proposalNumber,  signProposal, msg.sender);\n        return proposalNumber;\n    }\n1766-function_definition-314-328", method="sign(uint proposalNumber,bool signProposal)", type_label=function_definition];
1776 [label="317_ onlyTokenholders\n1776-expression_statement-318-318", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
1785 [label="320_ require(initialized);\n1785-expression_statement-321-321", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
1790 [label="321_ Proposal storage p = proposals[proposalNumber];\n1790-new_variable-322-322", method="sign(uint proposalNumber,bool signProposal)", type_label=new_variable];
1799 [label="322_ require(msg.sender == chairmanAddress);\n1799-expression_statement-323-323", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
1808 [label="323_ require(signProposal == true);\n1808-expression_statement-324-324", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
1816 [label="324_ p.signedByChairman = signProposal;\n1816-expression_statement-325-325", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
1832 [label="326_ return proposalNumber;\n1832-return-327-327", method="sign(uint proposalNumber,bool signProposal)", type_label=return];
1834 [label="328_ bool public payedOut_unchk8 = false;\n1834-new_variable-329-329", method="", type_label=new_variable];
1841 [label="329_ address payable public winner_unchk8;\n1841-new_variable-330-330", method="", type_label=new_variable];
1846 [label="330_ uint public winAmount_unchk8;\n1846-new_variable-331-331", method="", type_label=new_variable];
1851 [label="331_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1851-function_definition-332-336", method="sendToWinner_unchk8()", type_label=function_definition];
1855 [label="332_ require(!payedOut_unchk8);\n1855-expression_statement-333-333", method="sendToWinner_unchk8()", type_label=expression_statement];
1861 [label="333_ winner_unchk8.send(winAmount_unchk8);\n1861-expression_statement-334-334", method="sendToWinner_unchk8()", type_label=expression_statement];
1868 [label="334_ payedOut_unchk8 = true;\n1868-expression_statement-335-335", method="sendToWinner_unchk8()", type_label=expression_statement];
1873 [label="336_ function vote(\n        uint proposalNumber,\n        bool supportsProposal\n    )\n        onlyTokenholders public\n        returns (uint voteID)\n    {\n        Proposal storage p = proposals[proposalNumber];\n        require(p.voted[msg.sender] != true);\n        voteID = p.votes.length++;\n        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\n        p.voted[msg.sender] = true;\n        p.numberOfVotes = voteID +1;\n        emit Voted(proposalNumber,  supportsProposal, msg.sender);\n        return voteID;\n    }\n1873-function_definition-337-352", method="vote(uint proposalNumber,bool supportsProposal)", type_label=function_definition];
1883 [label="340_ onlyTokenholders\n1883-expression_statement-341-341", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
1892 [label="343_ Proposal storage p = proposals[proposalNumber];\n1892-new_variable-344-344", method="vote(uint proposalNumber,bool supportsProposal)", type_label=new_variable];
1901 [label="344_ require(p.voted[msg.sender] != true);\n1901-expression_statement-345-345", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
1915 [label="345_ voteID = p.votes.length++;\n1915-expression_statement-346-346", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
1918 [label="345_ p.votes.length++\n1918-expression_statement-346-346", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
1924 [label="346_ p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\n1924-expression_statement-347-347", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
1942 [label="347_ p.voted[msg.sender] = true;\n1942-expression_statement-348-348", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
1953 [label="348_ p.numberOfVotes = voteID +1;\n1953-expression_statement-349-349", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
1971 [label="350_ return voteID;\n1971-return-351-351", method="vote(uint proposalNumber,bool supportsProposal)", type_label=return];
1973 [label="352_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1973-function_definition-353-354", method="bug_unchk39(address payable addr)", type_label=function_definition];
1981 [label="353_ addr.send (4 ether);\n1981-expression_statement-354-354", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1989 [label="354_ function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public {\n        Proposal storage p = proposals[proposalNumber];\n        require(initialized);\n        require(now > p.minExecutionDate                                              \n            && !p.executed                                                           \n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)));  \n        uint quorum = 0;\n        uint yea = 0;\n        uint nay = 0;\n        for (uint i = 0; i <  p.votes.length; ++i) {\n            Vote storage v = p.votes[i];\n            uint voteWeight = tokenAddress.actualBalanceOf(v.voter);\n            quorum += voteWeight;\n            if (v.inSupport) {\n                yea += voteWeight;\n            } else {\n                nay += voteWeight;\n            }\n        }\n        Token t = Token(tokenAddress);\n        require(quorum >= t.totalSupply().mul(minimumQuorum).div(100));  \n        if (yea > nay ) {\n            p.executed = true;\n            (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);\n            require(success);\n            p.proposalPassed = true;\n        } else {\n            p.proposalPassed = false;\n        }\n        emit ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed);\n    }\n1989-function_definition-355-385", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=function_definition];
2001 [label="355_ Proposal storage p = proposals[proposalNumber];\n2001-new_variable-356-356", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2010 [label="356_ require(initialized);\n2010-expression_statement-357-357", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2015 [label="357_ require(now > p.minExecutionDate                                              \n            && !p.executed                                                           \n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)));\n2015-expression_statement-358-360", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2051 [label="360_ uint quorum = 0;\n2051-new_variable-361-361", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2057 [label="361_ uint yea = 0;\n2057-new_variable-362-362", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2063 [label="362_ uint nay = 0;\n2063-new_variable-363-363", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2069 [label="363_ for(i <  p.votes.length;;++i)\n2069-for-364-373", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=for];
4314 [label="363_ end_loop", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_loop];
2084 [label="363_ ++i\n2084-expression_statement-364-364", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2087 [label="364_ Vote storage v = p.votes[i];\n2087-new_variable-365-365", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2098 [label="365_ uint voteWeight = tokenAddress.actualBalanceOf(v.voter);\n2098-new_variable-366-366", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2111 [label="366_ quorum += voteWeight;\n2111-expression_statement-367-367", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2115 [label="367_ if\n2115-if-368-372", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=if];
4360 [label="367_ end_if", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_if];
2120 [label="368_ yea += voteWeight;\n2120-expression_statement-369-369", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2125 [label="370_ nay += voteWeight;\n2125-expression_statement-371-371", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2129 [label="373_ Token t = Token(tokenAddress);\n2129-new_variable-374-374", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2139 [label="374_ require(quorum >= t.totalSupply().mul(minimumQuorum).div(100));\n2139-expression_statement-375-375", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2159 [label="375_ if_yea > nay\n2159-if-376-383", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=if];
4404 [label="375_ end_if", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_if];
2164 [label="376_ p.executed = true;\n2164-expression_statement-377-377", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2171 [label="377_ (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);\n2171-new_variable-378-378", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2192 [label="378_ require(success);\n2192-expression_statement-379-379", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2197 [label="379_ p.proposalPassed = true;\n2197-expression_statement-380-380", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2205 [label="381_ p.proposalPassed = false;\n2205-expression_statement-382-382", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2226 [label="385_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n2226-function_definition-386-388", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
2235 [label="386_ dst.call.value(msg.value)(\"\");\n2235-expression_statement-387-387", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
910;
1018;
1338;
1764;
2212;
13 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 43  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
156 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
183 -> 190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 2624  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
415 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 600  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
595 -> 2840  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2840 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 2840  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
600 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
602 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
624 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
661 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
698 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
733 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
735 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
762 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
780 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
859 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
890 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 905  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3140 -> 912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 3140  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
917 -> 925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 3193  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
968 -> 977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1028 -> 1032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1032 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 3352  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1148 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1152 -> 1157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 1200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 1274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1274 -> 1284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1284 -> 1303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1287 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1306 -> 1315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1319 -> 1323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1323 -> 1328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 1366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1366 -> 1372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1372 -> 1377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1396 -> 1401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1401 -> 3646  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1417 -> 1444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1444 -> 1453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1453 -> 1460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 1471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1471 -> 1475  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1471 -> 3716  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3716 -> 1479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1475 -> 3716  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1479 -> 1483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1483 -> 1487  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1483 -> 3728  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3728 -> 1491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1487 -> 3728  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1491 -> 1495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1558 -> 1565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1565 -> 1574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1574 -> 1580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1580 -> 1587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1587 -> 1593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1593 -> 1599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1599 -> 1617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1617 -> 1628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1628 -> 1635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1635 -> 1642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1658 -> 1664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1664 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1666 -> 1674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1682 -> 1708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1708 -> 1717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1717 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1735 -> 1739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1739 -> 1744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1744 -> 1749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1749 -> 1759  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3994 -> 1766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1759 -> 3994  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1766 -> 1785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1785 -> 1790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1790 -> 1799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1799 -> 1808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1808 -> 1816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1832 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1834 -> 1841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1841 -> 1846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1851 -> 1855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1855 -> 1861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1861 -> 1868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1873 -> 1892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1892 -> 1901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1901 -> 1915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1915 -> 1924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1924 -> 1942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1942 -> 1953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1971 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1973 -> 1981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1989 -> 2001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2001 -> 2010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2010 -> 2015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2015 -> 2051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2051 -> 2057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2057 -> 2063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2063 -> 2069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2069 -> 2087  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2069 -> 4314  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4314 -> 2129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2084 -> 2069  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2087 -> 2098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2098 -> 2111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2111 -> 2115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2115 -> 2120  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2115 -> 2125  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4360 -> 2084  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4360 -> 2084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
2120 -> 4360  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2125 -> 4360  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2129 -> 2139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2139 -> 2159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2159 -> 2164  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2159 -> 2205  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4404 -> 2212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2164 -> 2171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2171 -> 2192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2192 -> 2197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2197 -> 4404  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2205 -> 4404  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2226 -> 2235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 3140  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1018 -> 3253  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1338 -> 3573  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1764 -> 3994  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
