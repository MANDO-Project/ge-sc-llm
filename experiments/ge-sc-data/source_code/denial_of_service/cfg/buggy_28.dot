digraph  {
13 [label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address who) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [label="4_ function allowance(address owner, address spender) external view returns (uint256);\n33-function_definition-5-5", method="allowance(address owner,address spender)", type_label=function_definition];
49 [label="5_ function transfer(address to, uint256 value) external returns (bool);\n49-function_definition-6-6", method="transfer(address to,uint256 value)", type_label=function_definition];
64 [label="6_ function approve(address spender, uint256 value) external returns (bool);\n64-function_definition-7-7", method="approve(address spender,uint256 value)", type_label=function_definition];
79 [label="7_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n79-function_definition-8-8", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
129 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n129-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
146 [label="13_ if_a == 0\n146-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
2062 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
151 [label="14_ return 0;\n151-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
153 [label="16_ uint256 c = a * b;\n153-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
161 [label="17_ assert(c / a == b);\n161-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
170 [label="18_ return c;\n170-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
172 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n172-function_definition-21-24", method="div(uint256 a,uint256 b)", type_label=function_definition];
189 [label="21_ uint256 c = a / b;\n189-new_variable-22-22", method="div(uint256 a,uint256 b)", type_label=new_variable];
197 [label="22_ return c;\n197-return-23-23", method="div(uint256 a,uint256 b)", type_label=return];
199 [label="24_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n199-function_definition-25-28", method="sub(uint256 a,uint256 b)", type_label=function_definition];
216 [label="25_ assert(b <= a);\n216-expression_statement-26-26", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
223 [label="26_ return a - b;\n223-return-27-27", method="sub(uint256 a,uint256 b)", type_label=return];
227 [label="28_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n227-function_definition-29-33", method="add(uint256 a,uint256 b)", type_label=function_definition];
244 [label="29_ uint256 c = a + b;\n244-new_variable-30-30", method="add(uint256 a,uint256 b)", type_label=new_variable];
252 [label="30_ assert(c >= a);\n252-expression_statement-31-31", method="add(uint256 a,uint256 b)", type_label=expression_statement];
259 [label="31_ return c;\n259-return-32-32", method="add(uint256 a,uint256 b)", type_label=return];
261 [label="33_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n261-function_definition-34-38", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
278 [label="34_ uint256 c = add(a,m);\n278-new_variable-35-35", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
289 [label="35_ uint256 d = sub(c,1);\n289-new_variable-36-36", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
300 [label="36_ return mul(div(d,m),m);\n300-return-37-37", method="ceil(uint256 a,uint256 m)", type_label=return];
318 [label="40_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n318-function_definition-41-45", method="bug_unchk43()", type_label=function_definition];
322 [label="41_ address payable addr_unchk43;\n322-new_variable-42-42", method="bug_unchk43()", type_label=new_variable];
327 [label="42_ if_!addr_unchk43.send (10 ether) || 1==1\n327-if-43-44", method="bug_unchk43()", type_label=if];
2243 [label="42_ end_if", method="bug_unchk43()", type_label=end_if];
343 [label="45_ string private _name;\n343-new_variable-46-46", method="", type_label=new_variable];
348 [label="46_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n348-function_definition-47-49", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
357 [label="47_ dst.call.value(msg.value)(\"\");\n357-expression_statement-48-48", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
372 [label="49_ string private _symbol;\n372-new_variable-50-50", method="", type_label=new_variable];
377 [label="50_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n377-function_definition-51-53", method="withdrawBal_unchk17()", type_label=function_definition];
381 [label="51_ uint64 Balances_unchk17 = 0;\n381-new_variable-52-52", method="withdrawBal_unchk17()", type_label=new_variable];
387 [label="52_ msg.sender.send(Balances_unchk17);\n387-expression_statement-53-53", method="withdrawBal_unchk17()", type_label=expression_statement];
396 [label="53_ uint8 private _decimals;\n396-new_variable-54-54", method="", type_label=new_variable];
415 [label="55_ _name = name;\n415-expression_statement-56-56", method="", type_label=expression_statement];
419 [label="56_ _symbol = symbol;\n419-expression_statement-57-57", method="", type_label=expression_statement];
423 [label="57_ _decimals = decimals;\n423-expression_statement-58-58", method="", type_label=expression_statement];
427 [label="59_ bool public payedOut_unchk32 = false;\n427-new_variable-60-60", method="", type_label=new_variable];
434 [label="60_ address payable public winner_unchk32;\n434-new_variable-61-61", method="", type_label=new_variable];
439 [label="61_ uint public winAmount_unchk32;\n439-new_variable-62-62", method="", type_label=new_variable];
444 [label="62_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n444-function_definition-63-67", method="sendToWinner_unchk32()", type_label=function_definition];
448 [label="63_ require(!payedOut_unchk32);\n448-expression_statement-64-64", method="sendToWinner_unchk32()", type_label=expression_statement];
454 [label="64_ winner_unchk32.send(winAmount_unchk32);\n454-expression_statement-65-65", method="sendToWinner_unchk32()", type_label=expression_statement];
461 [label="65_ payedOut_unchk32 = true;\n461-expression_statement-66-66", method="sendToWinner_unchk32()", type_label=expression_statement];
466 [label="67_ function name() public view returns(string memory) {\n    return _name;\n  }\n466-function_definition-68-70", method="name()", type_label=function_definition];
475 [label="68_ return _name;\n475-return-69-69", method="name()", type_label=return];
477 [label="70_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n477-function_definition-71-73", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
485 [label="71_ callee.send(5 ether);\n485-expression_statement-72-72", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
493 [label="73_ function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n493-function_definition-74-76", method="symbol()", type_label=function_definition];
502 [label="74_ return _symbol;\n502-return-75-75", method="symbol()", type_label=return];
504 [label="76_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n504-function_definition-77-81", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
520 [label="77_ uint64 subpot_unchk46 = 3 ether;\n520-new_variable-78-78", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
527 [label="78_ winner_unchk46.send(subpot_unchk46);\n527-expression_statement-79-79", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
534 [label="79_ subpot_unchk46= 0;\n534-expression_statement-80-80", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
538 [label="81_ function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n538-function_definition-82-84", method="decimals()", type_label=function_definition];
547 [label="82_ return _decimals;\n547-return-83-83", method="decimals()", type_label=return];
549 [label="84_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n549-function_definition-85-93", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
553 [label="85_ address payable addr_unchk4;\n553-new_variable-86-86", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
558 [label="86_ if\n558-if-87-92", method="UncheckedExternalCall_unchk4()", type_label=if];
2474 [label="86_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
580 [label="96_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n580-function_definition-97-99", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
588 [label="97_ callee.call.value(1 ether);\n588-expression_statement-98-98", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
598 [label="99_ mapping (address => uint256) private _balances;\n598-new_variable-100-100", method="", type_label=new_variable];
605 [label="100_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n605-function_definition-101-102", method="bug_unchk3(address payable addr)", type_label=function_definition];
613 [label="101_ addr.send (42 ether);\n613-expression_statement-102-102", method="bug_unchk3(address payable addr)", type_label=expression_statement];
621 [label="102_ mapping (address => mapping (address => uint256)) private _allowed;\n621-new_variable-103-103", method="", type_label=new_variable];
630 [label="103_ bool public payedOut_unchk9 = false;\n630-new_variable-104-104", method="", type_label=new_variable];
637 [label="104_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n637-function_definition-105-108", method="withdrawLeftOver_unchk9()", type_label=function_definition];
641 [label="105_ require(payedOut_unchk9);\n641-expression_statement-106-106", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
646 [label="106_ msg.sender.send(address(this).balance);\n646-expression_statement-107-107", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
659 [label="108_ string constant tokenName = \"HYDROGEN\";\n659-new_variable-109-109", method="", type_label=new_variable];
665 [label="109_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n665-function_definition-110-112", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
673 [label="110_ callee.call.value(1 ether);\n673-expression_statement-111-111", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
683 [label="112_ string constant tokenSymbol = \"HGN\";\n683-new_variable-113-113", method="", type_label=new_variable];
689 [label="113_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n689-function_definition-114-118", method="bug_unchk19()", type_label=function_definition];
693 [label="114_ address payable addr_unchk19;\n693-new_variable-115-115", method="bug_unchk19()", type_label=new_variable];
698 [label="115_ if_!addr_unchk19.send (10 ether) || 1==1\n698-if-116-117", method="bug_unchk19()", type_label=if];
2614 [label="115_ end_if", method="bug_unchk19()", type_label=end_if];
714 [label="118_ uint8  constant tokenDecimals = 4;\n714-new_variable-119-119", method="", type_label=new_variable];
719 [label="119_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n719-function_definition-120-122", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
727 [label="120_ callee.send(5 ether);\n727-expression_statement-121-121", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
735 [label="122_ uint256 _totalSupply =8000000000;\n735-new_variable-123-123", method="", type_label=new_variable];
740 [label="123_ bool public payedOut_unchk20 = false;\n740-new_variable-124-124", method="", type_label=new_variable];
747 [label="124_ address payable public winner_unchk20;\n747-new_variable-125-125", method="", type_label=new_variable];
752 [label="125_ uint public winAmount_unchk20;\n752-new_variable-126-126", method="", type_label=new_variable];
757 [label="126_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n757-function_definition-127-131", method="sendToWinner_unchk20()", type_label=function_definition];
761 [label="127_ require(!payedOut_unchk20);\n761-expression_statement-128-128", method="sendToWinner_unchk20()", type_label=expression_statement];
767 [label="128_ winner_unchk20.send(winAmount_unchk20);\n767-expression_statement-129-129", method="sendToWinner_unchk20()", type_label=expression_statement];
774 [label="129_ payedOut_unchk20 = true;\n774-expression_statement-130-130", method="sendToWinner_unchk20()", type_label=expression_statement];
779 [label="131_ uint256 public basePercent = 100;\n779-new_variable-132-132", method="", type_label=new_variable];
786 [label="132_ ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\n786-expression_statement-133-133", method="", type_label=expression_statement];
795 [label="133_ _mint(msg.sender, _totalSupply);\n795-expression_statement-134-134", method="", type_label=expression_statement];
804 [label="135_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n804-function_definition-136-140", method="bug_unchk7()", type_label=function_definition];
808 [label="136_ address payable addr_unchk7;\n808-new_variable-137-137", method="bug_unchk7()", type_label=new_variable];
813 [label="137_ if_!addr_unchk7.send (10 ether) || 1==1\n813-if-138-139", method="bug_unchk7()", type_label=if];
2729 [label="137_ end_if", method="bug_unchk7()", type_label=end_if];
829 [label="140_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n829-function_definition-141-143", method="totalSupply()", type_label=function_definition];
838 [label="141_ return _totalSupply;\n838-return-142-142", method="totalSupply()", type_label=return];
840 [label="143_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n840-function_definition-144-146", method="my_func_unchk23(address payable dst)", type_label=function_definition];
849 [label="144_ dst.send(msg.value);\n849-expression_statement-145-145", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
858 [label="146_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n858-function_definition-147-149", method="balanceOf(address owner)", type_label=function_definition];
871 [label="147_ return _balances[owner];\n871-return-148-148", method="balanceOf(address owner)", type_label=return];
875 [label="149_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n875-function_definition-150-152", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
883 [label="150_ callee.send(5 ether);\n883-expression_statement-151-151", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
891 [label="152_ function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n891-function_definition-153-155", method="allowance(address owner,address spender)", type_label=function_definition];
908 [label="153_ return _allowed[owner][spender];\n908-return-154-154", method="allowance(address owner,address spender)", type_label=return];
914 [label="155_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n914-function_definition-156-163", method="bug_unchk30()", type_label=function_definition];
918 [label="156_ uint receivers_unchk30;\n918-new_variable-157-157", method="bug_unchk30()", type_label=new_variable];
923 [label="157_ address payable addr_unchk30;\n923-new_variable-158-158", method="bug_unchk30()", type_label=new_variable];
928 [label="158_ if\n928-if-159-162", method="bug_unchk30()", type_label=if];
2844 [label="158_ end_if", method="bug_unchk30()", type_label=end_if];
938 [label="159_ receivers_unchk30 +=1;\n938-expression_statement-160-160", method="bug_unchk30()", type_label=expression_statement];
945 [label="163_ function findtwoPercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 twoPercent = roundValue.mul(basePercent).div(5000);\n    return twoPercent;\n  }\n945-function_definition-164-168", method="findtwoPercent(uint256 value)", type_label=function_definition];
958 [label="164_ uint256 roundValue = value.ceil(basePercent);\n958-new_variable-165-165", method="findtwoPercent(uint256 value)", type_label=new_variable];
969 [label="165_ uint256 twoPercent = roundValue.mul(basePercent).div(5000);\n969-new_variable-166-166", method="findtwoPercent(uint256 value)", type_label=new_variable];
985 [label="166_ return twoPercent;\n985-return-167-167", method="findtwoPercent(uint256 value)", type_label=return];
987 [label="168_ bool public payedOut_unchk8 = false;\n987-new_variable-169-169", method="", type_label=new_variable];
994 [label="169_ address payable public winner_unchk8;\n994-new_variable-170-170", method="", type_label=new_variable];
999 [label="170_ uint public winAmount_unchk8;\n999-new_variable-171-171", method="", type_label=new_variable];
1004 [label="171_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1004-function_definition-172-176", method="sendToWinner_unchk8()", type_label=function_definition];
1008 [label="172_ require(!payedOut_unchk8);\n1008-expression_statement-173-173", method="sendToWinner_unchk8()", type_label=expression_statement];
1014 [label="173_ winner_unchk8.send(winAmount_unchk8);\n1014-expression_statement-174-174", method="sendToWinner_unchk8()", type_label=expression_statement];
1021 [label="174_ payedOut_unchk8 = true;\n1021-expression_statement-175-175", method="sendToWinner_unchk8()", type_label=expression_statement];
1026 [label="176_ function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n    uint256 tokensToBurn = findtwoPercent(value);\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    _balances[to] = _balances[to].add(tokensToTransfer);\n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    emit Transfer(msg.sender, to, tokensToTransfer);\n    emit Transfer(msg.sender, address(0), tokensToBurn);\n    return true;\n  }\n1026-function_definition-177-188", method="transfer(address to,uint256 value)", type_label=function_definition];
1042 [label="177_ require(value <= _balances[msg.sender]);\n1042-expression_statement-178-178", method="transfer(address to,uint256 value)", type_label=expression_statement];
1053 [label="178_ require(to != address(0));\n1053-expression_statement-179-179", method="transfer(address to,uint256 value)", type_label=expression_statement];
1062 [label="179_ uint256 tokensToBurn = findtwoPercent(value);\n1062-new_variable-180-180", method="transfer(address to,uint256 value)", type_label=new_variable];
1071 [label="180_ uint256 tokensToTransfer = value.sub(tokensToBurn);\n1071-new_variable-181-181", method="transfer(address to,uint256 value)", type_label=new_variable];
1082 [label="181_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n1082-expression_statement-182-182", method="transfer(address to,uint256 value)", type_label=expression_statement];
1099 [label="182_ _balances[to] = _balances[to].add(tokensToTransfer);\n1099-expression_statement-183-183", method="transfer(address to,uint256 value)", type_label=expression_statement];
1112 [label="183_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1112-expression_statement-184-184", method="transfer(address to,uint256 value)", type_label=expression_statement];
1143 [label="186_ return true;\n1143-return-187-187", method="transfer(address to,uint256 value)", type_label=return];
1146 [label="188_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1146-function_definition-189-190", method="bug_unchk39(address payable addr)", type_label=function_definition];
1154 [label="189_ addr.send (4 ether);\n1154-expression_statement-190-190", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1162 [label="190_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n1162-function_definition-191-195", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
1176 [label="191_ for(i < receivers.length;;i++)\n1176-for-192-194", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
3092 [label="191_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
1189 [label="191_ i++\n1189-expression_statement-192-192", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1192 [label="192_ transfer(receivers[i], amounts[i]);\n1192-expression_statement-193-193", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1203 [label="195_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1203-function_definition-196-198", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1212 [label="196_ dst.call.value(msg.value)(\"\");\n1212-expression_statement-197-197", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1227 [label="198_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n1227-function_definition-199-204", method="approve(address spender,uint256 value)", type_label=function_definition];
1243 [label="199_ require(spender != address(0));\n1243-expression_statement-200-200", method="approve(address spender,uint256 value)", type_label=expression_statement];
1252 [label="200_ _allowed[msg.sender][spender] = value;\n1252-expression_statement-201-201", method="approve(address spender,uint256 value)", type_label=expression_statement];
1272 [label="202_ return true;\n1272-return-203-203", method="approve(address spender,uint256 value)", type_label=return];
1275 [label="204_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1275-function_definition-205-207", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1284 [label="205_ dst.send(msg.value);\n1284-expression_statement-206-206", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1293 [label="207_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n    _balances[from] = _balances[from].sub(value);\n    uint256 tokensToBurn = findtwoPercent(value);\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n    _balances[to] = _balances[to].add(tokensToTransfer);\n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, tokensToTransfer);\n    emit Transfer(from, address(0), tokensToBurn);\n    return true;\n  }\n1293-function_definition-208-221", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
1313 [label="208_ require(value <= _balances[from]);\n1313-expression_statement-209-209", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1322 [label="209_ require(value <= _allowed[from][msg.sender]);\n1322-expression_statement-210-210", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1335 [label="210_ require(to != address(0));\n1335-expression_statement-211-211", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1344 [label="211_ _balances[from] = _balances[from].sub(value);\n1344-expression_statement-212-212", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1357 [label="212_ uint256 tokensToBurn = findtwoPercent(value);\n1357-new_variable-213-213", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1366 [label="213_ uint256 tokensToTransfer = value.sub(tokensToBurn);\n1366-new_variable-214-214", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1377 [label="214_ _balances[to] = _balances[to].add(tokensToTransfer);\n1377-expression_statement-215-215", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1390 [label="215_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1390-expression_statement-216-216", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1399 [label="216_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n1399-expression_statement-217-217", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1438 [label="219_ return true;\n1438-return-220-220", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1441 [label="221_ bool public payedOut_unchk44 = false;\n1441-new_variable-222-222", method="", type_label=new_variable];
1448 [label="222_ address payable public winner_unchk44;\n1448-new_variable-223-223", method="", type_label=new_variable];
1453 [label="223_ uint public winAmount_unchk44;\n1453-new_variable-224-224", method="", type_label=new_variable];
1458 [label="224_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1458-function_definition-225-229", method="sendToWinner_unchk44()", type_label=function_definition];
1462 [label="225_ require(!payedOut_unchk44);\n1462-expression_statement-226-226", method="sendToWinner_unchk44()", type_label=expression_statement];
1468 [label="226_ winner_unchk44.send(winAmount_unchk44);\n1468-expression_statement-227-227", method="sendToWinner_unchk44()", type_label=expression_statement];
1475 [label="227_ payedOut_unchk44 = true;\n1475-expression_statement-228-228", method="sendToWinner_unchk44()", type_label=expression_statement];
1480 [label="229_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n1480-function_definition-230-235", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
1496 [label="230_ require(spender != address(0));\n1496-expression_statement-231-231", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1505 [label="231_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n1505-expression_statement-232-232", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1543 [label="233_ return true;\n1543-return-234-234", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
1546 [label="235_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1546-function_definition-236-244", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1550 [label="236_ address payable addr_unchk40;\n1550-new_variable-237-237", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1555 [label="237_ if\n1555-if-238-243", method="UncheckedExternalCall_unchk40()", type_label=if];
3471 [label="237_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1566 [label="244_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n1566-function_definition-245-250", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
1582 [label="245_ require(spender != address(0));\n1582-expression_statement-246-246", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1591 [label="246_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n1591-expression_statement-247-247", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1629 [label="248_ return true;\n1629-return-249-249", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
1632 [label="250_ bool public payedOut_unchk33 = false;\n1632-new_variable-251-251", method="", type_label=new_variable];
1639 [label="251_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1639-function_definition-252-255", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1643 [label="252_ require(payedOut_unchk33);\n1643-expression_statement-253-253", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1648 [label="253_ msg.sender.send(address(this).balance);\n1648-expression_statement-254-254", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1661 [label="255_ function _mint(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n1661-function_definition-256-260", method="_mint(address account,uint256 amount)", type_label=function_definition];
1673 [label="256_ require(amount != 0);\n1673-expression_statement-257-257", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1680 [label="257_ _balances[account] = _balances[account].add(amount);\n1680-expression_statement-258-258", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1703 [label="260_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1703-function_definition-261-262", method="bug_unchk27(address payable addr)", type_label=function_definition];
1711 [label="261_ addr.send (42 ether);\n1711-expression_statement-262-262", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1719 [label="262_ function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n1719-function_definition-263-265", method="burn(uint256 amount)", type_label=function_definition];
1727 [label="263_ _burn(msg.sender, amount);\n1727-expression_statement-264-264", method="burn(uint256 amount)", type_label=expression_statement];
1736 [label="265_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n1736-function_definition-266-270", method="bug_unchk31()", type_label=function_definition];
1740 [label="266_ address payable addr_unchk31;\n1740-new_variable-267-267", method="bug_unchk31()", type_label=new_variable];
1745 [label="267_ if_!addr_unchk31.send (10 ether) || 1==1\n1745-if-268-269", method="bug_unchk31()", type_label=if];
3661 [label="267_ end_if", method="bug_unchk31()", type_label=end_if];
1761 [label="270_ function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n1761-function_definition-271-277", method="_burn(address account,uint256 amount)", type_label=function_definition];
1773 [label="271_ require(amount != 0);\n1773-expression_statement-272-272", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1780 [label="272_ require(amount <= _balances[account]);\n1780-expression_statement-273-273", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1789 [label="273_ _totalSupply = _totalSupply.sub(amount);\n1789-expression_statement-274-274", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1798 [label="274_ _balances[account] = _balances[account].sub(amount);\n1798-expression_statement-275-275", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1821 [label="277_ bool public payedOut_unchk45 = false;\n1821-new_variable-278-278", method="", type_label=new_variable];
1828 [label="278_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n1828-function_definition-279-282", method="withdrawLeftOver_unchk45()", type_label=function_definition];
1832 [label="279_ require(payedOut_unchk45);\n1832-expression_statement-280-280", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1837 [label="280_ msg.sender.send(address(this).balance);\n1837-expression_statement-281-281", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1850 [label="282_ function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }\n1850-function_definition-283-287", method="burnFrom(address account,uint256 amount)", type_label=function_definition];
1862 [label="283_ require(amount <= _allowed[account][msg.sender]);\n1862-expression_statement-284-284", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
1875 [label="284_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n1875-expression_statement-285-285", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
1896 [label="285_ _burn(account, amount);\n1896-expression_statement-286-286", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
1903 [label="287_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n1903-function_definition-288-290", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
1911 [label="288_ callee.call.value(1 ether);\n1911-expression_statement-289-289", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
568;
943;
1565;
129 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> 2062  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2062 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 2062  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
227 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
261 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
318 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 2243  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
348 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
381 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
475 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
477 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
504 -> 520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
527 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
538 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
549 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
605 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
698 -> 2614  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
719 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
740 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
767 -> 774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
804 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 2729  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
829 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
840 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
875 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
908 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
914 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 938  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2844 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
938 -> 2844  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
945 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
958 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
987 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 1021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1026 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1062 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 1082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1082 -> 1099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1143 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1146 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 1192  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1176 -> 3092  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3092 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1176  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1192 -> 1189  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1203 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1227 -> 1243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1243 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1272 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1275 -> 1284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1293 -> 1313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1313 -> 1322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1335 -> 1344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1344 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1357 -> 1366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1366 -> 1377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1377 -> 1390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1390 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1441 -> 1448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 1453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1458 -> 1462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1462 -> 1468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1468 -> 1475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1480 -> 1496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1496 -> 1505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1543 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1546 -> 1550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1550 -> 1555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1566 -> 1582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1582 -> 1591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1629 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1639 -> 1643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1643 -> 1648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1661 -> 1673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1673 -> 1680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1703 -> 1711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1719 -> 1727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1736 -> 1740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1740 -> 1745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1745 -> 3661  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1761 -> 1773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1773 -> 1780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1780 -> 1789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1789 -> 1798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1828 -> 1832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1832 -> 1837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1850 -> 1862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1862 -> 1875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1875 -> 1896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1903 -> 1911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 2474  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
943 -> 2844  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1565 -> 3471  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
