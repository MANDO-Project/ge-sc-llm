digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns (uint c) {	 \n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns (uint c) {	 \n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns (uint c) {	 \n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns (uint c) {	 \n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ bool public payedOut_unchk9 = false;\n154-new_variable-22-22", method="", type_label=new_variable];
161 [label="22_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n161-function_definition-23-26", method="withdrawLeftOver_unchk9()", type_label=function_definition];
165 [label="23_ require(payedOut_unchk9);\n165-expression_statement-24-24", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
170 [label="24_ msg.sender.send(address(this).balance);\n170-expression_statement-25-25", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
183 [label="26_ function balanceOf(address tokenOwner) public view returns (uint balance);\n183-function_definition-27-27", method="balanceOf(address tokenOwner)", type_label=function_definition];
196 [label="27_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n196-function_definition-28-30", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
204 [label="28_ callee.call.value(1 ether);\n204-expression_statement-29-29", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
214 [label="30_ function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n214-function_definition-31-31", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
231 [label="31_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n231-function_definition-32-36", method="bug_unchk19()", type_label=function_definition];
235 [label="32_ address payable addr_unchk19;\n235-new_variable-33-33", method="bug_unchk19()", type_label=new_variable];
240 [label="33_ if_!addr_unchk19.send (10 ether) || 1==1\n240-if-34-35", method="bug_unchk19()", type_label=if];
1929 [label="33_ end_if", method="bug_unchk19()", type_label=end_if];
256 [label="36_ function transfer(address to, uint tokens) public returns (bool success);\n256-function_definition-37-37", method="transfer(address to,uint tokens)", type_label=function_definition];
272 [label="37_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n272-function_definition-38-40", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
280 [label="38_ callee.send(5 ether);\n280-expression_statement-39-39", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
288 [label="40_ function approve(address spender, uint tokens) public returns (bool success);\n288-function_definition-41-41", method="approve(address spender,uint tokens)", type_label=function_definition];
304 [label="41_ bool public payedOut_unchk20 = false;\n304-new_variable-42-42", method="", type_label=new_variable];
311 [label="42_ address payable public winner_unchk20;\n311-new_variable-43-43", method="", type_label=new_variable];
316 [label="43_ uint public winAmount_unchk20;\n316-new_variable-44-44", method="", type_label=new_variable];
321 [label="44_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n321-function_definition-45-49", method="sendToWinner_unchk20()", type_label=function_definition];
325 [label="45_ require(!payedOut_unchk20);\n325-expression_statement-46-46", method="sendToWinner_unchk20()", type_label=expression_statement];
331 [label="46_ winner_unchk20.send(winAmount_unchk20);\n331-expression_statement-47-47", method="sendToWinner_unchk20()", type_label=expression_statement];
338 [label="47_ payedOut_unchk20 = true;\n338-expression_statement-48-48", method="sendToWinner_unchk20()", type_label=expression_statement];
343 [label="49_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n343-function_definition-50-50", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
363 [label="50_ bool public payedOut_unchk32 = false;\n363-new_variable-51-51", method="", type_label=new_variable];
370 [label="51_ address payable public winner_unchk32;\n370-new_variable-52-52", method="", type_label=new_variable];
375 [label="52_ uint public winAmount_unchk32;\n375-new_variable-53-53", method="", type_label=new_variable];
380 [label="53_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n380-function_definition-54-58", method="sendToWinner_unchk32()", type_label=function_definition];
384 [label="54_ require(!payedOut_unchk32);\n384-expression_statement-55-55", method="sendToWinner_unchk32()", type_label=expression_statement];
390 [label="55_ winner_unchk32.send(winAmount_unchk32);\n390-expression_statement-56-56", method="sendToWinner_unchk32()", type_label=expression_statement];
397 [label="56_ payedOut_unchk32 = true;\n397-expression_statement-57-57", method="sendToWinner_unchk32()", type_label=expression_statement];
402 [label="58_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n402-function_definition-59-63", method="bug_unchk31()", type_label=function_definition];
406 [label="59_ address payable addr_unchk31;\n406-new_variable-60-60", method="bug_unchk31()", type_label=new_variable];
411 [label="60_ if_!addr_unchk31.send (10 ether) || 1==1\n411-if-61-62", method="bug_unchk31()", type_label=if];
2100 [label="60_ end_if", method="bug_unchk31()", type_label=end_if];
441 [label="64_ bool public payedOut_unchk45 = false;\n441-new_variable-65-65", method="", type_label=new_variable];
448 [label="65_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n448-function_definition-66-69", method="withdrawLeftOver_unchk45()", type_label=function_definition];
452 [label="66_ require(payedOut_unchk45);\n452-expression_statement-67-67", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
457 [label="67_ msg.sender.send(address(this).balance);\n457-expression_statement-68-68", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
487 [label="72_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n487-function_definition-73-73", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
506 [label="73_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n506-function_definition-74-76", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
514 [label="74_ callee.send(5 ether);\n514-expression_statement-75-75", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
525 [label="78_ function withdrawBal_unchk41 () public{\n	uint64 Balances_unchk41 = 0;\n	msg.sender.send(Balances_unchk41);}\n525-function_definition-79-81", method="withdrawBal_unchk41()", type_label=function_definition];
529 [label="79_ uint64 Balances_unchk41 = 0;\n529-new_variable-80-80", method="withdrawBal_unchk41()", type_label=new_variable];
535 [label="80_ msg.sender.send(Balances_unchk41);\n535-expression_statement-81-81", method="withdrawBal_unchk41()", type_label=expression_statement];
544 [label="81_ address public owner;\n544-new_variable-82-82", method="", type_label=new_variable];
549 [label="82_ function bug_unchk42() public{\nuint receivers_unchk42;\naddress payable addr_unchk42;\nif (!addr_unchk42.send(42 ether))\n	{receivers_unchk42 +=1;}\nelse\n	{revert();}\n}\n549-function_definition-83-90", method="bug_unchk42()", type_label=function_definition];
553 [label="83_ uint receivers_unchk42;\n553-new_variable-84-84", method="bug_unchk42()", type_label=new_variable];
558 [label="84_ address payable addr_unchk42;\n558-new_variable-85-85", method="bug_unchk42()", type_label=new_variable];
563 [label="85_ if\n563-if-86-89", method="bug_unchk42()", type_label=if];
2252 [label="85_ end_if", method="bug_unchk42()", type_label=end_if];
573 [label="86_ receivers_unchk42 +=1;\n573-expression_statement-87-87", method="bug_unchk42()", type_label=expression_statement];
580 [label="90_ address public newOwner;\n580-new_variable-91-91", method="", type_label=new_variable];
585 [label="91_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n585-function_definition-92-94", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
593 [label="92_ callee.call.value(1 ether);\n593-expression_statement-93-93", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
615 [label="96_ owner = msg.sender;\n615-expression_statement-97-97", method="", type_label=expression_statement];
621 [label="98_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n621-function_definition-99-103", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
637 [label="99_ uint64 subpot_unchk46 = 3 ether;\n637-new_variable-100-100", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
644 [label="100_ winner_unchk46.send(subpot_unchk46);\n644-expression_statement-101-101", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
651 [label="101_ subpot_unchk46= 0;\n651-expression_statement-102-102", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
655 [label="103_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n655-expression_statement-104-107", method="", type_label=expression_statement];
658 [label="104_ require(msg.sender == owner);\n658-expression_statement-105-105", method="", type_label=expression_statement];
667 [label="105_ _;\n667-expression_statement-106-106", method="", type_label=expression_statement];
669 [label="107_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n669-function_definition-108-110", method="transferOwnership(address _newOwner)", type_label=function_definition];
676 [label="107_ onlyOwner\n676-expression_statement-108-108", method="transferOwnership(address _newOwner)", type_label=expression_statement];
679 [label="108_ newOwner = _newOwner;\n679-expression_statement-109-109", method="transferOwnership(address _newOwner)", type_label=expression_statement];
683 [label="110_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n683-function_definition-111-119", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
687 [label="111_ address payable addr_unchk4;\n687-new_variable-112-112", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
692 [label="112_ if\n692-if-113-118", method="UncheckedExternalCall_unchk4()", type_label=if];
2381 [label="112_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
703 [label="119_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);	 \n        owner = newOwner;\n        newOwner = address(0);\n    }\n703-function_definition-120-125", method="acceptOwnership()", type_label=function_definition];
707 [label="120_ require(msg.sender == newOwner);\n707-expression_statement-121-121", method="acceptOwnership()", type_label=expression_statement];
722 [label="122_ owner = newOwner;\n722-expression_statement-123-123", method="acceptOwnership()", type_label=expression_statement];
726 [label="123_ newOwner = address(0);\n726-expression_statement-124-124", method="acceptOwnership()", type_label=expression_statement];
732 [label="125_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n732-function_definition-126-130", method="bug_unchk7()", type_label=function_definition];
736 [label="126_ address payable addr_unchk7;\n736-new_variable-127-127", method="bug_unchk7()", type_label=new_variable];
741 [label="127_ if_!addr_unchk7.send (10 ether) || 1==1\n741-if-128-129", method="bug_unchk7()", type_label=if];
2430 [label="127_ end_if", method="bug_unchk7()", type_label=end_if];
771 [label="133_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n771-function_definition-134-136", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
779 [label="134_ callee.send(5 ether);\n779-expression_statement-135-135", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
787 [label="136_ string public symbol;\n787-new_variable-137-137", method="", type_label=new_variable];
792 [label="137_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n792-function_definition-138-142", method="bug_unchk43()", type_label=function_definition];
796 [label="138_ address payable addr_unchk43;\n796-new_variable-139-139", method="bug_unchk43()", type_label=new_variable];
801 [label="139_ if_!addr_unchk43.send (10 ether) || 1==1\n801-if-140-141", method="bug_unchk43()", type_label=if];
2490 [label="139_ end_if", method="bug_unchk43()", type_label=end_if];
817 [label="142_ string public  name;\n817-new_variable-143-143", method="", type_label=new_variable];
822 [label="143_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n822-function_definition-144-146", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
831 [label="144_ dst.call.value(msg.value)(\"\");\n831-expression_statement-145-145", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
846 [label="146_ uint8 public decimals;\n846-new_variable-147-147", method="", type_label=new_variable];
851 [label="147_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n851-function_definition-148-150", method="withdrawBal_unchk17()", type_label=function_definition];
855 [label="148_ uint64 Balances_unchk17 = 0;\n855-new_variable-149-149", method="withdrawBal_unchk17()", type_label=new_variable];
861 [label="149_ msg.sender.send(Balances_unchk17);\n861-expression_statement-150-150", method="withdrawBal_unchk17()", type_label=expression_statement];
870 [label="150_ uint _totalSupply;\n870-new_variable-151-151", method="", type_label=new_variable];
874 [label="151_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n874-function_definition-152-154", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
882 [label="152_ callee.call.value(1 ether);\n882-expression_statement-153-153", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
892 [label="154_ mapping(address => uint) balances;\n892-new_variable-155-155", method="", type_label=new_variable];
898 [label="155_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n898-function_definition-156-157", method="bug_unchk3(address payable addr)", type_label=function_definition];
906 [label="156_ addr.send (42 ether);\n906-expression_statement-157-157", method="bug_unchk3(address payable addr)", type_label=expression_statement];
914 [label="157_ mapping(address => mapping(address => uint)) allowed;\n914-new_variable-158-158", method="", type_label=new_variable];
924 [label="159_ symbol = \"XQC\";\n924-expression_statement-160-160", method="", type_label=expression_statement];
929 [label="160_ name = \"Quras Token\";\n929-expression_statement-161-161", method="", type_label=expression_statement];
934 [label="161_ decimals = 8;\n934-expression_statement-162-162", method="", type_label=expression_statement];
938 [label="162_ _totalSupply = 88888888800000000;\n938-expression_statement-163-163", method="", type_label=expression_statement];
942 [label="163_ balances[owner] = _totalSupply;\n942-expression_statement-164-164", method="", type_label=expression_statement];
958 [label="166_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n958-function_definition-167-169", method="my_func_unchk23(address payable dst)", type_label=function_definition];
967 [label="167_ dst.send(msg.value);\n967-expression_statement-168-168", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
976 [label="169_ function totalSupply() public view returns (uint) {		 \n        return _totalSupply.sub(balances[address(0)]);\n    }\n976-function_definition-170-172", method="totalSupply()", type_label=function_definition];
985 [label="170_ return _totalSupply.sub(balances[address(0)]);\n985-return-171-171", method="totalSupply()", type_label=return];
996 [label="172_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n996-function_definition-173-175", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
1004 [label="173_ callee.send(5 ether);\n1004-expression_statement-174-174", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
1012 [label="175_ function balanceOf(address tokenOwner) public view returns (uint balance) {		 \n        return balances[tokenOwner];\n    }\n1012-function_definition-176-178", method="balanceOf(address tokenOwner)", type_label=function_definition];
1026 [label="176_ return balances[tokenOwner];\n1026-return-177-177", method="balanceOf(address tokenOwner)", type_label=return];
1030 [label="178_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n1030-function_definition-179-186", method="bug_unchk30()", type_label=function_definition];
1034 [label="179_ uint receivers_unchk30;\n1034-new_variable-180-180", method="bug_unchk30()", type_label=new_variable];
1039 [label="180_ address payable addr_unchk30;\n1039-new_variable-181-181", method="bug_unchk30()", type_label=new_variable];
1044 [label="181_ if\n1044-if-182-185", method="bug_unchk30()", type_label=if];
2733 [label="181_ end_if", method="bug_unchk30()", type_label=end_if];
1054 [label="182_ receivers_unchk30 +=1;\n1054-expression_statement-183-183", method="bug_unchk30()", type_label=expression_statement];
1061 [label="186_ function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);		 \n        return true;\n    }\n1061-function_definition-187-192", method="transfer(address to,uint tokens)", type_label=function_definition];
1078 [label="187_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n1078-expression_statement-188-188", method="transfer(address to,uint tokens)", type_label=expression_statement];
1095 [label="188_ balances[to] = balances[to].add(tokens);\n1095-expression_statement-189-189", method="transfer(address to,uint tokens)", type_label=expression_statement];
1118 [label="190_ return true;\n1118-return-191-191", method="transfer(address to,uint tokens)", type_label=return];
1121 [label="192_ bool public payedOut_unchk8 = false;\n1121-new_variable-193-193", method="", type_label=new_variable];
1128 [label="193_ address payable public winner_unchk8;\n1128-new_variable-194-194", method="", type_label=new_variable];
1133 [label="194_ uint public winAmount_unchk8;\n1133-new_variable-195-195", method="", type_label=new_variable];
1138 [label="195_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1138-function_definition-196-200", method="sendToWinner_unchk8()", type_label=function_definition];
1142 [label="196_ require(!payedOut_unchk8);\n1142-expression_statement-197-197", method="sendToWinner_unchk8()", type_label=expression_statement];
1148 [label="197_ winner_unchk8.send(winAmount_unchk8);\n1148-expression_statement-198-198", method="sendToWinner_unchk8()", type_label=expression_statement];
1155 [label="198_ payedOut_unchk8 = true;\n1155-expression_statement-199-199", method="sendToWinner_unchk8()", type_label=expression_statement];
1160 [label="200_ function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n1160-function_definition-201-205", method="increaseApproval(address _spender,uint _addedValue)", type_label=function_definition];
1176 [label="201_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n1176-expression_statement-202-202", method="increaseApproval(address _spender,uint _addedValue)", type_label=expression_statement];
1213 [label="203_ return true;\n1213-return-204-204", method="increaseApproval(address _spender,uint _addedValue)", type_label=return];
1216 [label="205_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1216-function_definition-206-207", method="bug_unchk39(address payable addr)", type_label=function_definition];
1224 [label="206_ addr.send (4 ether);\n1224-expression_statement-207-207", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1232 [label="207_ function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n1232-function_definition-208-217", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=function_definition];
1248 [label="208_ uint oldValue = allowed[msg.sender][_spender];\n1248-new_variable-209-209", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=new_variable];
1260 [label="209_ if__subtractedValue > oldValue\n1260-if-210-214", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=if];
2949 [label="209_ end_if", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=end_if];
1265 [label="210_ allowed[msg.sender][_spender] = 0;\n1265-expression_statement-211-211", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
1276 [label="212_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n1276-expression_statement-213-213", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
1307 [label="215_ return true;\n1307-return-216-216", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=return];
1310 [label="217_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1310-function_definition-218-220", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1319 [label="218_ dst.call.value(msg.value)(\"\");\n1319-expression_statement-219-219", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1334 [label="220_ function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);		 \n        return true;\n    }\n1334-function_definition-221-225", method="approve(address spender,uint tokens)", type_label=function_definition];
1351 [label="221_ allowed[msg.sender][spender] = tokens;\n1351-expression_statement-222-222", method="approve(address spender,uint tokens)", type_label=expression_statement];
1371 [label="223_ return true;\n1371-return-224-224", method="approve(address spender,uint tokens)", type_label=return];
1374 [label="225_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1374-function_definition-226-228", method="my_func_unchk35(address payable dst)", type_label=function_definition];
1383 [label="226_ dst.send(msg.value);\n1383-expression_statement-227-227", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
1392 [label="228_ function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);		 \n        return true;\n    }\n1392-function_definition-229-235", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
1413 [label="229_ balances[from] = balances[from].sub(tokens);\n1413-expression_statement-230-230", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1426 [label="230_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n1426-expression_statement-231-231", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1447 [label="231_ balances[to] = balances[to].add(tokens);\n1447-expression_statement-232-232", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1468 [label="233_ return true;\n1468-return-234-234", method="transferFrom(address from,address to,uint tokens)", type_label=return];
1471 [label="235_ bool public payedOut_unchk44 = false;\n1471-new_variable-236-236", method="", type_label=new_variable];
1478 [label="236_ address payable public winner_unchk44;\n1478-new_variable-237-237", method="", type_label=new_variable];
1483 [label="237_ uint public winAmount_unchk44;\n1483-new_variable-238-238", method="", type_label=new_variable];
1488 [label="238_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n1488-function_definition-239-243", method="sendToWinner_unchk44()", type_label=function_definition];
1492 [label="239_ require(!payedOut_unchk44);\n1492-expression_statement-240-240", method="sendToWinner_unchk44()", type_label=expression_statement];
1498 [label="240_ winner_unchk44.send(winAmount_unchk44);\n1498-expression_statement-241-241", method="sendToWinner_unchk44()", type_label=expression_statement];
1505 [label="241_ payedOut_unchk44 = true;\n1505-expression_statement-242-242", method="sendToWinner_unchk44()", type_label=expression_statement];
1510 [label="243_ function allowance(address tokenOwner, address spender) public view returns (uint remaining) {		 \n        return allowed[tokenOwner][spender];\n    }\n1510-function_definition-244-246", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
1528 [label="244_ return allowed[tokenOwner][spender];\n1528-return-245-245", method="allowance(address tokenOwner,address spender)", type_label=return];
1534 [label="246_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1534-function_definition-247-255", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
1538 [label="247_ address payable addr_unchk40;\n1538-new_variable-248-248", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
1543 [label="248_ if\n1543-if-249-254", method="UncheckedExternalCall_unchk40()", type_label=if];
3232 [label="248_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1554 [label="255_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);		 \n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n1554-function_definition-256-261", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
1575 [label="256_ allowed[msg.sender][spender] = tokens;\n1575-expression_statement-257-257", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
1595 [label="258_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n1595-expression_statement-259-259", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
1615 [label="259_ return true;\n1615-return-260-260", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
1618 [label="261_ bool public payedOut_unchk33 = false;\n1618-new_variable-262-262", method="", type_label=new_variable];
1625 [label="262_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n1625-function_definition-263-266", method="withdrawLeftOver_unchk33()", type_label=function_definition];
1629 [label="263_ require(payedOut_unchk33);\n1629-expression_statement-264-264", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1634 [label="264_ msg.sender.send(address(this).balance);\n1634-expression_statement-265-265", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1647 [label="266_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n1647-function_definition-267-269", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
1658 [label="266_ onlyOwner\n1658-expression_statement-267-267", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
1666 [label="267_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n1666-return-268-268", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
1678 [label="269_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1678-function_definition-270-271", method="bug_unchk27(address payable addr)", type_label=function_definition];
1686 [label="270_ addr.send (42 ether);\n1686-expression_statement-271-271", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
578;
702;
1059;
1291;
1553;
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
240 -> 1929  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
272 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
311 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
325 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
380 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
402 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 2100  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
448 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
506 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 573  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2252 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 2252  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
585 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
644 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
683 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
687 -> 692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
741 -> 2430  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
771 -> 779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
796 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
801 -> 2490  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
822 -> 831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
898 -> 906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
924 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
934 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
938 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
958 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
996 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1026 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1030 -> 1034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 1039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1039 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1054  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2733 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 2733  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1061 -> 1078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1078 -> 1095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1121 -> 1128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1128 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1148 -> 1155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1213 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1216 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1248 -> 1260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1265  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1260 -> 1276  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2949 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 2949  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1276 -> 2949  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1307 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1310 -> 1319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1334 -> 1351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1371 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1374 -> 1383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1413 -> 1426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1426 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1468 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1471 -> 1478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1478 -> 1483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1488 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 1505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1510 -> 1528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1528 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1534 -> 1538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1538 -> 1543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1554 -> 1575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1595 -> 1615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1615 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1625 -> 1629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1629 -> 1634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1647 -> 1666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1666 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1678 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 2252  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
702 -> 2381  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1059 -> 2733  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1553 -> 3232  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
