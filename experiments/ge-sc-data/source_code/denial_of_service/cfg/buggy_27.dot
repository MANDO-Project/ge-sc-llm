digraph  {
13 [label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address who) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [label="4_ function allowance(address owner, address spender) external view returns (uint256);\n33-function_definition-5-5", method="allowance(address owner,address spender)", type_label=function_definition];
49 [label="5_ function transfer(address to, uint256 value) external returns (bool);\n49-function_definition-6-6", method="transfer(address to,uint256 value)", type_label=function_definition];
64 [label="6_ function approve(address spender, uint256 value) external returns (bool);\n64-function_definition-7-7", method="approve(address spender,uint256 value)", type_label=function_definition];
79 [label="7_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n79-function_definition-8-8", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
129 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n129-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
146 [label="13_ if_a == 0\n146-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
2983 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
151 [label="14_ return 0;\n151-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
153 [label="16_ uint256 c = a * b;\n153-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
161 [label="17_ assert(c / a == b);\n161-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
170 [label="18_ return c;\n170-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
172 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n172-function_definition-21-24", method="div(uint256 a,uint256 b)", type_label=function_definition];
189 [label="21_ uint256 c = a / b;\n189-new_variable-22-22", method="div(uint256 a,uint256 b)", type_label=new_variable];
197 [label="22_ return c;\n197-return-23-23", method="div(uint256 a,uint256 b)", type_label=return];
199 [label="24_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n199-function_definition-25-28", method="sub(uint256 a,uint256 b)", type_label=function_definition];
216 [label="25_ assert(b <= a);\n216-expression_statement-26-26", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
223 [label="26_ return a - b;\n223-return-27-27", method="sub(uint256 a,uint256 b)", type_label=return];
227 [label="28_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n227-function_definition-29-33", method="add(uint256 a,uint256 b)", type_label=function_definition];
244 [label="29_ uint256 c = a + b;\n244-new_variable-30-30", method="add(uint256 a,uint256 b)", type_label=new_variable];
252 [label="30_ assert(c >= a);\n252-expression_statement-31-31", method="add(uint256 a,uint256 b)", type_label=expression_statement];
259 [label="31_ return c;\n259-return-32-32", method="add(uint256 a,uint256 b)", type_label=return];
261 [label="33_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n261-function_definition-34-38", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
278 [label="34_ uint256 c = add(a,m);\n278-new_variable-35-35", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
289 [label="35_ uint256 d = sub(c,1);\n289-new_variable-36-36", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
300 [label="36_ return mul(div(d,m),m);\n300-return-37-37", method="ceil(uint256 a,uint256 m)", type_label=return];
315 [label="40_ function withdrawBal_unchk29 () public{\n	uint Balances_unchk29 = 0;\n	msg.sender.send(Balances_unchk29);}\n315-function_definition-41-43", method="withdrawBal_unchk29()", type_label=function_definition];
319 [label="41_ uint Balances_unchk29 = 0;\n319-new_variable-42-42", method="withdrawBal_unchk29()", type_label=new_variable];
325 [label="42_ msg.sender.send(Balances_unchk29);\n325-expression_statement-43-43", method="withdrawBal_unchk29()", type_label=expression_statement];
334 [label="43_ address public owner;\n334-new_variable-44-44", method="", type_label=new_variable];
339 [label="44_ bool public payedOut_unchk33 = false;\n339-new_variable-45-45", method="", type_label=new_variable];
346 [label="45_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n346-function_definition-46-49", method="withdrawLeftOver_unchk33()", type_label=function_definition];
350 [label="46_ require(payedOut_unchk33);\n350-expression_statement-47-47", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
355 [label="47_ msg.sender.send(address(this).balance);\n355-expression_statement-48-48", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
380 [label="51_ owner = msg.sender;\n380-expression_statement-52-52", method="", type_label=expression_statement];
386 [label="53_ function withdrawBal_unchk41 () public{\n	uint64 Balances_unchk41 = 0;\n	msg.sender.send(Balances_unchk41);}\n386-function_definition-54-56", method="withdrawBal_unchk41()", type_label=function_definition];
390 [label="54_ uint64 Balances_unchk41 = 0;\n390-new_variable-55-55", method="withdrawBal_unchk41()", type_label=new_variable];
396 [label="55_ msg.sender.send(Balances_unchk41);\n396-expression_statement-56-56", method="withdrawBal_unchk41()", type_label=expression_statement];
405 [label="56_ modifier onlyOwner() {\n      require(msg.sender == owner);\n      _;\n    }\n405-expression_statement-57-60", method="", type_label=expression_statement];
408 [label="57_ require(msg.sender == owner);\n408-expression_statement-58-58", method="", type_label=expression_statement];
417 [label="58_ _;\n417-expression_statement-59-59", method="", type_label=expression_statement];
419 [label="60_ function transferOwnership(address newOwner) public onlyOwner {\n      require(newOwner != address(0));\n      emit OwnershipTransferred(owner, newOwner);\n      owner = newOwner;\n    }\n419-function_definition-61-65", method="transferOwnership(address newOwner)", type_label=function_definition];
426 [label="60_ onlyOwner\n426-expression_statement-61-61", method="transferOwnership(address newOwner)", type_label=expression_statement];
429 [label="61_ require(newOwner != address(0));\n429-expression_statement-62-62", method="transferOwnership(address newOwner)", type_label=expression_statement];
444 [label="63_ owner = newOwner;\n444-expression_statement-64-64", method="transferOwnership(address newOwner)", type_label=expression_statement];
448 [label="65_ function bug_unchk42() public{\nuint receivers_unchk42;\naddress payable addr_unchk42;\nif (!addr_unchk42.send(42 ether))\n	{receivers_unchk42 +=1;}\nelse\n	{revert();}\n}\n448-function_definition-66-73", method="bug_unchk42()", type_label=function_definition];
452 [label="66_ uint receivers_unchk42;\n452-new_variable-67-67", method="bug_unchk42()", type_label=new_variable];
457 [label="67_ address payable addr_unchk42;\n457-new_variable-68-68", method="bug_unchk42()", type_label=new_variable];
462 [label="68_ if\n462-if-69-72", method="bug_unchk42()", type_label=if];
3299 [label="68_ end_if", method="bug_unchk42()", type_label=end_if];
472 [label="69_ receivers_unchk42 +=1;\n472-expression_statement-70-70", method="bug_unchk42()", type_label=expression_statement];
485 [label="75_ function bug_unchk6() public{\nuint receivers_unchk6;\naddress payable addr_unchk6;\nif (!addr_unchk6.send(42 ether))\n	{receivers_unchk6 +=1;}\nelse\n	{revert();}\n}\n485-function_definition-76-83", method="bug_unchk6()", type_label=function_definition];
489 [label="76_ uint receivers_unchk6;\n489-new_variable-77-77", method="bug_unchk6()", type_label=new_variable];
494 [label="77_ address payable addr_unchk6;\n494-new_variable-78-78", method="bug_unchk6()", type_label=new_variable];
499 [label="78_ if\n499-if-79-82", method="bug_unchk6()", type_label=if];
3336 [label="78_ end_if", method="bug_unchk6()", type_label=end_if];
509 [label="79_ receivers_unchk6 +=1;\n509-expression_statement-80-80", method="bug_unchk6()", type_label=expression_statement];
516 [label="83_ string private _name;\n516-new_variable-84-84", method="", type_label=new_variable];
521 [label="84_ function UncheckedExternalCall_unchk16 () public\n{  address payable addr_unchk16;\n   if (! addr_unchk16.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n521-function_definition-85-93", method="UncheckedExternalCall_unchk16()", type_label=function_definition];
525 [label="85_ address payable addr_unchk16;\n525-new_variable-86-86", method="UncheckedExternalCall_unchk16()", type_label=new_variable];
530 [label="86_ if\n530-if-87-92", method="UncheckedExternalCall_unchk16()", type_label=if];
3367 [label="86_ end_if", method="UncheckedExternalCall_unchk16()", type_label=end_if];
541 [label="93_ string private _symbol;\n541-new_variable-94-94", method="", type_label=new_variable];
546 [label="94_ function my_func_uncheck24(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n546-function_definition-95-97", method="my_func_uncheck24(address payable dst)", type_label=function_definition];
555 [label="95_ dst.call.value(msg.value)(\"\");\n555-expression_statement-96-96", method="my_func_uncheck24(address payable dst)", type_label=expression_statement];
570 [label="97_ uint8 private _decimals;\n570-new_variable-98-98", method="", type_label=new_variable];
589 [label="99_ _name = name;\n589-expression_statement-100-100", method="", type_label=expression_statement];
593 [label="100_ _symbol = symbol;\n593-expression_statement-101-101", method="", type_label=expression_statement];
597 [label="101_ _decimals = decimals;\n597-expression_statement-102-102", method="", type_label=expression_statement];
601 [label="103_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n601-function_definition-104-106", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
609 [label="104_ callee.send(5 ether);\n609-expression_statement-105-105", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
617 [label="106_ function name() public view returns(string memory) {\n    return _name;\n  }\n617-function_definition-107-109", method="name()", type_label=function_definition];
626 [label="107_ return _name;\n626-return-108-108", method="name()", type_label=return];
628 [label="109_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n628-function_definition-110-114", method="bug_unchk43()", type_label=function_definition];
632 [label="110_ address payable addr_unchk43;\n632-new_variable-111-111", method="bug_unchk43()", type_label=new_variable];
637 [label="111_ if_!addr_unchk43.send (10 ether) || 1==1\n637-if-112-113", method="bug_unchk43()", type_label=if];
3474 [label="111_ end_if", method="bug_unchk43()", type_label=end_if];
653 [label="114_ function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n653-function_definition-115-117", method="symbol()", type_label=function_definition];
662 [label="115_ return _symbol;\n662-return-116-116", method="symbol()", type_label=return];
664 [label="117_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n664-function_definition-118-120", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
673 [label="118_ dst.call.value(msg.value)(\"\");\n673-expression_statement-119-119", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
688 [label="120_ function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n688-function_definition-121-123", method="decimals()", type_label=function_definition];
697 [label="121_ return _decimals;\n697-return-122-122", method="decimals()", type_label=return];
699 [label="123_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n699-function_definition-124-126", method="withdrawBal_unchk17()", type_label=function_definition];
703 [label="124_ uint64 Balances_unchk17 = 0;\n703-new_variable-125-125", method="withdrawBal_unchk17()", type_label=new_variable];
709 [label="125_ msg.sender.send(Balances_unchk17);\n709-expression_statement-126-126", method="withdrawBal_unchk17()", type_label=expression_statement];
732 [label="129_ function withdrawBal_unchk5 () public{\n	uint64 Balances_unchk5 = 0;\n	msg.sender.send(Balances_unchk5);}\n732-function_definition-130-132", method="withdrawBal_unchk5()", type_label=function_definition];
736 [label="130_ uint64 Balances_unchk5 = 0;\n736-new_variable-131-131", method="withdrawBal_unchk5()", type_label=new_variable];
742 [label="131_ msg.sender.send(Balances_unchk5);\n742-expression_statement-132-132", method="withdrawBal_unchk5()", type_label=expression_statement];
751 [label="132_ mapping (address => uint256) private _balances;\n751-new_variable-133-133", method="", type_label=new_variable];
758 [label="133_ function bug_unchk15(address payable addr) public\n      {addr.send (42 ether); }\n758-function_definition-134-135", method="bug_unchk15(address payable addr)", type_label=function_definition];
766 [label="134_ addr.send (42 ether);\n766-expression_statement-135-135", method="bug_unchk15(address payable addr)", type_label=expression_statement];
774 [label="135_ mapping (address => mapping (address => uint256)) private _allowed;\n774-new_variable-136-136", method="", type_label=new_variable];
783 [label="136_ function UncheckedExternalCall_unchk28 () public\n{  address payable addr_unchk28;\n   if (! addr_unchk28.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n783-function_definition-137-145", method="UncheckedExternalCall_unchk28()", type_label=function_definition];
787 [label="137_ address payable addr_unchk28;\n787-new_variable-138-138", method="UncheckedExternalCall_unchk28()", type_label=new_variable];
792 [label="138_ if\n792-if-139-144", method="UncheckedExternalCall_unchk28()", type_label=if];
3629 [label="138_ end_if", method="UncheckedExternalCall_unchk28()", type_label=end_if];
803 [label="145_ string constant tokenName = \"Dan Pan Coin\";\n803-new_variable-146-146", method="", type_label=new_variable];
809 [label="146_ function cash_unchk34(uint roundIndex, uint subpotIndex, address payable winner_unchk34) public{\n        uint64 subpot_unchk34 = 10 ether;\n        winner_unchk34.send(subpot_unchk34);   \n        subpot_unchk34= 0;\n}\n809-function_definition-147-151", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=function_definition];
825 [label="147_ uint64 subpot_unchk34 = 10 ether;\n825-new_variable-148-148", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=new_variable];
832 [label="148_ winner_unchk34.send(subpot_unchk34);\n832-expression_statement-149-149", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=expression_statement];
839 [label="149_ subpot_unchk34= 0;\n839-expression_statement-150-150", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=expression_statement];
843 [label="151_ string constant tokenSymbol = \"DPC\";\n843-new_variable-152-152", method="", type_label=new_variable];
849 [label="152_ bool public payedOut_unchk21 = false;\n849-new_variable-153-153", method="", type_label=new_variable];
856 [label="153_ function withdrawLeftOver_unchk21() public {\n        require(payedOut_unchk21);\n        msg.sender.send(address(this).balance);\n    }\n856-function_definition-154-157", method="withdrawLeftOver_unchk21()", type_label=function_definition];
860 [label="154_ require(payedOut_unchk21);\n860-expression_statement-155-155", method="withdrawLeftOver_unchk21()", type_label=expression_statement];
865 [label="155_ msg.sender.send(address(this).balance);\n865-expression_statement-156-156", method="withdrawLeftOver_unchk21()", type_label=expression_statement];
878 [label="157_ uint8  constant tokenDecimals = 2;\n878-new_variable-158-158", method="", type_label=new_variable];
883 [label="158_ function cash_unchk10(uint roundIndex, uint subpotIndex,address payable winner_unchk10) public{\n        uint64 subpot_unchk10 = 10 ether;\n        winner_unchk10.send(subpot_unchk10);   \n        subpot_unchk10= 0;\n}\n883-function_definition-159-163", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=function_definition];
899 [label="159_ uint64 subpot_unchk10 = 10 ether;\n899-new_variable-160-160", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=new_variable];
906 [label="160_ winner_unchk10.send(subpot_unchk10);\n906-expression_statement-161-161", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=expression_statement];
913 [label="161_ subpot_unchk10= 0;\n913-expression_statement-162-162", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=expression_statement];
917 [label="163_ uint256 _totalSupply = 10000000000;\n917-new_variable-164-164", method="", type_label=new_variable];
922 [label="164_ function my_func_unchk47(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n922-function_definition-165-167", method="my_func_unchk47(address payable dst)", type_label=function_definition];
931 [label="165_ dst.send(msg.value);\n931-expression_statement-166-166", method="my_func_unchk47(address payable dst)", type_label=expression_statement];
940 [label="167_ uint256 public basePercent = 100;\n940-new_variable-168-168", method="", type_label=new_variable];
946 [label="168_ function cash_unchk22(uint roundIndex, uint subpotIndex, address payable winner_unchk22)public{\n        uint64 subpot_unchk22 = 10 ether;\n        winner_unchk22.send(subpot_unchk22);   \n        subpot_unchk22= 0;\n}\n946-function_definition-169-173", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=function_definition];
962 [label="169_ uint64 subpot_unchk22 = 10 ether;\n962-new_variable-170-170", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=new_variable];
969 [label="170_ winner_unchk22.send(subpot_unchk22);\n969-expression_statement-171-171", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
976 [label="171_ subpot_unchk22= 0;\n976-expression_statement-172-172", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
980 [label="173_ uint256 public dpPercent = 5;\n980-new_variable-174-174", method="", type_label=new_variable];
986 [label="174_ function my_func_uncheck12(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n986-function_definition-175-177", method="my_func_uncheck12(address payable dst)", type_label=function_definition];
995 [label="175_ dst.call.value(msg.value)(\"\");\n995-expression_statement-176-176", method="my_func_uncheck12(address payable dst)", type_label=expression_statement];
1010 [label="177_ address public DanPanAddress = msg.sender;\n1010-new_variable-178-178", method="", type_label=new_variable];
1018 [label="178_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n1018-function_definition-179-180", method="bug_unchk27(address payable addr)", type_label=function_definition];
1026 [label="179_ addr.send (42 ether);\n1026-expression_statement-180-180", method="bug_unchk27(address payable addr)", type_label=expression_statement];
1044 [label="181_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n1044-function_definition-182-186", method="bug_unchk31()", type_label=function_definition];
1048 [label="182_ address payable addr_unchk31;\n1048-new_variable-183-183", method="bug_unchk31()", type_label=new_variable];
1053 [label="183_ if_!addr_unchk31.send (10 ether) || 1==1\n1053-if-184-185", method="bug_unchk31()", type_label=if];
3890 [label="183_ end_if", method="bug_unchk31()", type_label=end_if];
1079 [label="187_ bool public payedOut_unchk45 = false;\n1079-new_variable-188-188", method="", type_label=new_variable];
1086 [label="188_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n1086-function_definition-189-192", method="withdrawLeftOver_unchk45()", type_label=function_definition];
1090 [label="189_ require(payedOut_unchk45);\n1090-expression_statement-190-190", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1095 [label="190_ msg.sender.send(address(this).balance);\n1095-expression_statement-191-191", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
1118 [label="193_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n1118-function_definition-194-196", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
1126 [label="194_ callee.call.value(1 ether);\n1126-expression_statement-195-195", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
1146 [label="197_ function my_func_unchk11(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1146-function_definition-198-200", method="my_func_unchk11(address payable dst)", type_label=function_definition];
1155 [label="198_ dst.send(msg.value);\n1155-expression_statement-199-199", method="my_func_unchk11(address payable dst)", type_label=expression_statement];
1164 [label="200_ mapping(address => bool) public whitelistFrom;\n1164-new_variable-201-201", method="", type_label=new_variable];
1171 [label="201_ function callnotchecked_unchk1(address payable callee) public {\n    callee.call.value(2 ether);\n  }\n1171-function_definition-202-204", method="callnotchecked_unchk1(address payable callee)", type_label=function_definition];
1179 [label="202_ callee.call.value(2 ether);\n1179-expression_statement-203-203", method="callnotchecked_unchk1(address payable callee)", type_label=expression_statement];
1189 [label="204_ mapping(address => bool) public whitelistTo;\n1189-new_variable-205-205", method="", type_label=new_variable];
1197 [label="205_ ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\n1197-expression_statement-206-206", method="", type_label=expression_statement];
1206 [label="206_ _mint(msg.sender, _totalSupply);\n1206-expression_statement-207-207", method="", type_label=expression_statement];
1215 [label="208_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n1215-function_definition-209-211", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
1223 [label="209_ callee.call.value(1 ether);\n1223-expression_statement-210-210", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
1233 [label="211_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n1233-function_definition-212-214", method="totalSupply()", type_label=function_definition];
1242 [label="212_ return _totalSupply;\n1242-return-213-213", method="totalSupply()", type_label=return];
1244 [label="214_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n1244-function_definition-215-216", method="bug_unchk3(address payable addr)", type_label=function_definition];
1252 [label="215_ addr.send (42 ether);\n1252-expression_statement-216-216", method="bug_unchk3(address payable addr)", type_label=expression_statement];
1260 [label="216_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n1260-function_definition-217-219", method="balanceOf(address owner)", type_label=function_definition];
1273 [label="217_ return _balances[owner];\n1273-return-218-218", method="balanceOf(address owner)", type_label=return];
1277 [label="219_ bool public payedOut_unchk9 = false;\n1277-new_variable-220-220", method="", type_label=new_variable];
1284 [label="220_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n1284-function_definition-221-224", method="withdrawLeftOver_unchk9()", type_label=function_definition];
1288 [label="221_ require(payedOut_unchk9);\n1288-expression_statement-222-222", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
1293 [label="222_ msg.sender.send(address(this).balance);\n1293-expression_statement-223-223", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
1306 [label="224_ function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n1306-function_definition-225-227", method="allowance(address owner,address spender)", type_label=function_definition];
1323 [label="225_ return _allowed[owner][spender];\n1323-return-226-226", method="allowance(address owner,address spender)", type_label=return];
1329 [label="227_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n1329-function_definition-228-230", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
1337 [label="228_ callee.call.value(1 ether);\n1337-expression_statement-229-229", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
1347 [label="230_ function findOnePercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 onePercent = roundValue.mul(basePercent).div(10000);\n    return onePercent;\n  }\n1347-function_definition-231-235", method="findOnePercent(uint256 value)", type_label=function_definition];
1360 [label="231_ uint256 roundValue = value.ceil(basePercent);\n1360-new_variable-232-232", method="findOnePercent(uint256 value)", type_label=new_variable];
1371 [label="232_ uint256 onePercent = roundValue.mul(basePercent).div(10000);\n1371-new_variable-233-233", method="findOnePercent(uint256 value)", type_label=new_variable];
1387 [label="233_ return onePercent;\n1387-return-234-234", method="findOnePercent(uint256 value)", type_label=return];
1389 [label="235_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n1389-function_definition-236-240", method="bug_unchk19()", type_label=function_definition];
1393 [label="236_ address payable addr_unchk19;\n1393-new_variable-237-237", method="bug_unchk19()", type_label=new_variable];
1398 [label="237_ if_!addr_unchk19.send (10 ether) || 1==1\n1398-if-238-239", method="bug_unchk19()", type_label=if];
4235 [label="237_ end_if", method="bug_unchk19()", type_label=end_if];
1414 [label="240_ function findDPPercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);\n    return DPPercent;\n  }\n1414-function_definition-241-245", method="findDPPercent(uint256 value)", type_label=function_definition];
1427 [label="241_ uint256 roundValue = value.ceil(basePercent);\n1427-new_variable-242-242", method="findDPPercent(uint256 value)", type_label=new_variable];
1438 [label="242_ uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);\n1438-new_variable-243-243", method="findDPPercent(uint256 value)", type_label=new_variable];
1459 [label="243_ return DPPercent;\n1459-return-244-244", method="findDPPercent(uint256 value)", type_label=return];
1461 [label="245_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n1461-function_definition-246-248", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
1469 [label="246_ callee.send(5 ether);\n1469-expression_statement-247-247", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
1477 [label="248_ function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n        if (value == 0) {\n            emit Transfer(msg.sender, to, 0);\n            return true;\n        }\n        uint256 tokensToTransfer = value;\n        uint256 tokensToBurn = 0;\n        uint256 tokensToDanPan = 0;\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        if (!_isWhitelisted(msg.sender, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(msg.sender, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n            emit Transfer(msg.sender, DanPanAddress, tokensToDanPan);\n        }\n        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n        emit Transfer(msg.sender, to, tokensToTransfer);\n    return true;\n  }\n1477-function_definition-249-273", method="transfer(address to,uint256 value)", type_label=function_definition];
1493 [label="249_ require(value <= _balances[msg.sender]);\n1493-expression_statement-250-250", method="transfer(address to,uint256 value)", type_label=expression_statement];
1504 [label="250_ require(to != address(0));\n1504-expression_statement-251-251", method="transfer(address to,uint256 value)", type_label=expression_statement];
1513 [label="251_ if_value == 0\n1513-if-252-255", method="transfer(address to,uint256 value)", type_label=if];
4350 [label="251_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1528 [label="253_ return true;\n1528-return-254-254", method="transfer(address to,uint256 value)", type_label=return];
1531 [label="255_ uint256 tokensToTransfer = value;\n1531-new_variable-256-256", method="transfer(address to,uint256 value)", type_label=new_variable];
1537 [label="256_ uint256 tokensToBurn = 0;\n1537-new_variable-257-257", method="transfer(address to,uint256 value)", type_label=new_variable];
1543 [label="257_ uint256 tokensToDanPan = 0;\n1543-new_variable-258-258", method="transfer(address to,uint256 value)", type_label=new_variable];
1549 [label="258_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n1549-expression_statement-259-259", method="transfer(address to,uint256 value)", type_label=expression_statement];
1566 [label="259_ if\n1566-if-260-268", method="transfer(address to,uint256 value)", type_label=if];
4403 [label="259_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1577 [label="260_ tokensToBurn = findOnePercent(value);\n1577-expression_statement-261-261", method="transfer(address to,uint256 value)", type_label=expression_statement];
1584 [label="261_ tokensToDanPan = findDPPercent(value);\n1584-expression_statement-262-262", method="transfer(address to,uint256 value)", type_label=expression_statement];
1591 [label="262_ tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n1591-expression_statement-263-263", method="transfer(address to,uint256 value)", type_label=expression_statement];
1605 [label="263_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1605-expression_statement-264-264", method="transfer(address to,uint256 value)", type_label=expression_statement];
1626 [label="265_ _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n1626-expression_statement-266-266", method="transfer(address to,uint256 value)", type_label=expression_statement];
1649 [label="268_ assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n1649-expression_statement-269-269", method="transfer(address to,uint256 value)", type_label=expression_statement];
1666 [label="269_ _balances[to] = _balances[to].add(tokensToTransfer);\n1666-expression_statement-270-270", method="transfer(address to,uint256 value)", type_label=expression_statement];
1689 [label="271_ return true;\n1689-return-272-272", method="transfer(address to,uint256 value)", type_label=return];
1692 [label="273_ bool public payedOut_unchk20 = false;\n1692-new_variable-274-274", method="", type_label=new_variable];
1699 [label="274_ address payable public winner_unchk20;\n1699-new_variable-275-275", method="", type_label=new_variable];
1704 [label="275_ uint public winAmount_unchk20;\n1704-new_variable-276-276", method="", type_label=new_variable];
1709 [label="276_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n1709-function_definition-277-281", method="sendToWinner_unchk20()", type_label=function_definition];
1713 [label="277_ require(!payedOut_unchk20);\n1713-expression_statement-278-278", method="sendToWinner_unchk20()", type_label=expression_statement];
1719 [label="278_ winner_unchk20.send(winAmount_unchk20);\n1719-expression_statement-279-279", method="sendToWinner_unchk20()", type_label=expression_statement];
1726 [label="279_ payedOut_unchk20 = true;\n1726-expression_statement-280-280", method="sendToWinner_unchk20()", type_label=expression_statement];
1731 [label="281_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n1731-function_definition-282-286", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
1745 [label="282_ for(i < receivers.length;;i++)\n1745-for-283-285", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
4582 [label="282_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
1758 [label="282_ i++\n1758-expression_statement-283-283", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1761 [label="283_ transfer(receivers[i], amounts[i]);\n1761-expression_statement-284-284", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1772 [label="286_ bool public payedOut_unchk32 = false;\n1772-new_variable-287-287", method="", type_label=new_variable];
1779 [label="287_ address payable public winner_unchk32;\n1779-new_variable-288-288", method="", type_label=new_variable];
1784 [label="288_ uint public winAmount_unchk32;\n1784-new_variable-289-289", method="", type_label=new_variable];
1789 [label="289_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n1789-function_definition-290-294", method="sendToWinner_unchk32()", type_label=function_definition];
1793 [label="290_ require(!payedOut_unchk32);\n1793-expression_statement-291-291", method="sendToWinner_unchk32()", type_label=expression_statement];
1799 [label="291_ winner_unchk32.send(winAmount_unchk32);\n1799-expression_statement-292-292", method="sendToWinner_unchk32()", type_label=expression_statement];
1806 [label="292_ payedOut_unchk32 = true;\n1806-expression_statement-293-293", method="sendToWinner_unchk32()", type_label=expression_statement];
1811 [label="294_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n1811-function_definition-295-300", method="approve(address spender,uint256 value)", type_label=function_definition];
1827 [label="295_ require(spender != address(0));\n1827-expression_statement-296-296", method="approve(address spender,uint256 value)", type_label=expression_statement];
1836 [label="296_ _allowed[msg.sender][spender] = value;\n1836-expression_statement-297-297", method="approve(address spender,uint256 value)", type_label=expression_statement];
1856 [label="298_ return true;\n1856-return-299-299", method="approve(address spender,uint256 value)", type_label=return];
1859 [label="300_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n1859-function_definition-301-303", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
1867 [label="301_ callee.send(5 ether);\n1867-expression_statement-302-302", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
1875 [label="303_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n        if (value == 0) {\n            emit Transfer(from, to, 0);\n            return true;\n        }\n        uint256 tokensToTransfer = value;\n        uint256 tokensToBurn = 0;\n        uint256 tokensToDanPan = 0;\n        _balances[from] = _balances[from].sub(value);\n        if (!_isWhitelisted(from, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(from, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n           emit Transfer(from, DanPanAddress, tokensToDanPan);\n        }\n        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n	_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, tokensToTransfer);\n    return true;\n  }\n1875-function_definition-304-330", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
1895 [label="304_ require(value <= _balances[from]);\n1895-expression_statement-305-305", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1904 [label="305_ require(value <= _allowed[from][msg.sender]);\n1904-expression_statement-306-306", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1917 [label="306_ require(to != address(0));\n1917-expression_statement-307-307", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1926 [label="307_ if_value == 0\n1926-if-308-311", method="transferFrom(address from,address to,uint256 value)", type_label=if];
4763 [label="307_ end_if", method="transferFrom(address from,address to,uint256 value)", type_label=end_if];
1939 [label="309_ return true;\n1939-return-310-310", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1942 [label="311_ uint256 tokensToTransfer = value;\n1942-new_variable-312-312", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1948 [label="312_ uint256 tokensToBurn = 0;\n1948-new_variable-313-313", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1954 [label="313_ uint256 tokensToDanPan = 0;\n1954-new_variable-314-314", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1960 [label="314_ _balances[from] = _balances[from].sub(value);\n1960-expression_statement-315-315", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1973 [label="315_ if\n1973-if-316-324", method="transferFrom(address from,address to,uint256 value)", type_label=if];
4810 [label="315_ end_if", method="transferFrom(address from,address to,uint256 value)", type_label=end_if];
1982 [label="316_ tokensToBurn = findOnePercent(value);\n1982-expression_statement-317-317", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1989 [label="317_ tokensToDanPan = findDPPercent(value);\n1989-expression_statement-318-318", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1996 [label="318_ tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n1996-expression_statement-319-319", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2010 [label="319_ _totalSupply = _totalSupply.sub(tokensToBurn);\n2010-expression_statement-320-320", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2029 [label="321_ _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n2029-expression_statement-322-322", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2050 [label="324_ assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n2050-expression_statement-325-325", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2067 [label="325_ _balances[to] = _balances[to].add(tokensToTransfer);\n2067-expression_statement-326-326", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2080 [label="326_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n2080-expression_statement-327-327", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2109 [label="328_ return true;\n2109-return-329-329", method="transferFrom(address from,address to,uint256 value)", type_label=return];
2112 [label="330_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n2112-function_definition-331-335", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
2128 [label="331_ uint64 subpot_unchk46 = 3 ether;\n2128-new_variable-332-332", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
2135 [label="332_ winner_unchk46.send(subpot_unchk46);\n2135-expression_statement-333-333", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
2142 [label="333_ subpot_unchk46= 0;\n2142-expression_statement-334-334", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
2146 [label="335_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n2146-function_definition-336-341", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
2162 [label="336_ require(spender != address(0));\n2162-expression_statement-337-337", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
2171 [label="337_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n2171-expression_statement-338-338", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
2209 [label="339_ return true;\n2209-return-340-340", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
2212 [label="341_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n2212-function_definition-342-350", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
2216 [label="342_ address payable addr_unchk4;\n2216-new_variable-343-343", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
2221 [label="343_ if\n2221-if-344-349", method="UncheckedExternalCall_unchk4()", type_label=if];
5058 [label="343_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
2232 [label="350_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n2232-function_definition-351-356", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
2248 [label="351_ require(spender != address(0));\n2248-expression_statement-352-352", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2257 [label="352_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n2257-expression_statement-353-353", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2295 [label="354_ return true;\n2295-return-355-355", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
2298 [label="356_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n2298-function_definition-357-361", method="bug_unchk7()", type_label=function_definition];
2302 [label="357_ address payable addr_unchk7;\n2302-new_variable-358-358", method="bug_unchk7()", type_label=new_variable];
2307 [label="358_ if_!addr_unchk7.send (10 ether) || 1==1\n2307-if-359-360", method="bug_unchk7()", type_label=if];
5144 [label="358_ end_if", method="bug_unchk7()", type_label=end_if];
2323 [label="361_ function _mint(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n2323-function_definition-362-366", method="_mint(address account,uint256 amount)", type_label=function_definition];
2335 [label="362_ require(amount != 0);\n2335-expression_statement-363-363", method="_mint(address account,uint256 amount)", type_label=expression_statement];
2342 [label="363_ _balances[account] = _balances[account].add(amount);\n2342-expression_statement-364-364", method="_mint(address account,uint256 amount)", type_label=expression_statement];
2365 [label="366_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n2365-function_definition-367-369", method="my_func_unchk23(address payable dst)", type_label=function_definition];
2374 [label="367_ dst.send(msg.value);\n2374-expression_statement-368-368", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
2383 [label="369_ function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n2383-function_definition-370-372", method="burn(uint256 amount)", type_label=function_definition];
2391 [label="370_ _burn(msg.sender, amount);\n2391-expression_statement-371-371", method="burn(uint256 amount)", type_label=expression_statement];
2400 [label="372_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n2400-function_definition-373-375", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
2408 [label="373_ callee.send(5 ether);\n2408-expression_statement-374-374", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
2416 [label="375_ function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n2416-function_definition-376-382", method="_burn(address account,uint256 amount)", type_label=function_definition];
2428 [label="376_ require(amount != 0);\n2428-expression_statement-377-377", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2435 [label="377_ require(amount <= _balances[account]);\n2435-expression_statement-378-378", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2444 [label="378_ _totalSupply = _totalSupply.sub(amount);\n2444-expression_statement-379-379", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2453 [label="379_ _balances[account] = _balances[account].sub(amount);\n2453-expression_statement-380-380", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2476 [label="382_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n2476-function_definition-383-390", method="bug_unchk30()", type_label=function_definition];
2480 [label="383_ uint receivers_unchk30;\n2480-new_variable-384-384", method="bug_unchk30()", type_label=new_variable];
2485 [label="384_ address payable addr_unchk30;\n2485-new_variable-385-385", method="bug_unchk30()", type_label=new_variable];
2490 [label="385_ if\n2490-if-386-389", method="bug_unchk30()", type_label=if];
5327 [label="385_ end_if", method="bug_unchk30()", type_label=end_if];
2500 [label="386_ receivers_unchk30 +=1;\n2500-expression_statement-387-387", method="bug_unchk30()", type_label=expression_statement];
2507 [label="390_ function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }\n2507-function_definition-391-395", method="burnFrom(address account,uint256 amount)", type_label=function_definition];
2519 [label="391_ require(amount <= _allowed[account][msg.sender]);\n2519-expression_statement-392-392", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2532 [label="392_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n2532-expression_statement-393-393", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2553 [label="393_ _burn(account, amount);\n2553-expression_statement-394-394", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2560 [label="395_ bool public payedOut_unchk8 = false;\n2560-new_variable-396-396", method="", type_label=new_variable];
2567 [label="396_ address payable public winner_unchk8;\n2567-new_variable-397-397", method="", type_label=new_variable];
2572 [label="397_ uint public winAmount_unchk8;\n2572-new_variable-398-398", method="", type_label=new_variable];
2577 [label="398_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n2577-function_definition-399-403", method="sendToWinner_unchk8()", type_label=function_definition];
2581 [label="399_ require(!payedOut_unchk8);\n2581-expression_statement-400-400", method="sendToWinner_unchk8()", type_label=expression_statement];
2587 [label="400_ winner_unchk8.send(winAmount_unchk8);\n2587-expression_statement-401-401", method="sendToWinner_unchk8()", type_label=expression_statement];
2594 [label="401_ payedOut_unchk8 = true;\n2594-expression_statement-402-402", method="sendToWinner_unchk8()", type_label=expression_statement];
2599 [label="403_ function NewDanPanAddress(address newDanPanaddress) external onlyOwner {\n    require(newDanPanaddress != address(0));\n      emit DanPanAddressChanged(DanPanAddress, newDanPanaddress);\n      DanPanAddress = newDanPanaddress;\n  }\n2599-function_definition-404-408", method="NewDanPanAddress(address newDanPanaddress)", type_label=function_definition];
2606 [label="403_ onlyOwner\n2606-expression_statement-404-404", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2609 [label="404_ require(newDanPanaddress != address(0));\n2609-expression_statement-405-405", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2624 [label="406_ DanPanAddress = newDanPanaddress;\n2624-expression_statement-407-407", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2628 [label="408_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n2628-function_definition-409-410", method="bug_unchk39(address payable addr)", type_label=function_definition];
2636 [label="409_ addr.send (4 ether);\n2636-expression_statement-410-410", method="bug_unchk39(address payable addr)", type_label=expression_statement];
2644 [label="410_ function NewDanPanPercent(uint256 newDanPanpercent) external onlyOwner {\n      emit DanPanPercentChanged(dpPercent, newDanPanpercent);\n      dpPercent = newDanPanpercent;\n  }\n2644-function_definition-411-414", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=function_definition];
2651 [label="410_ onlyOwner\n2651-expression_statement-411-411", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=expression_statement];
2660 [label="412_ dpPercent = newDanPanpercent;\n2660-expression_statement-413-413", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=expression_statement];
2664 [label="414_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n2664-function_definition-415-417", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
2673 [label="415_ dst.call.value(msg.value)(\"\");\n2673-expression_statement-416-416", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
2688 [label="417_ function _isWhitelisted(address _from, address _to) internal view returns (bool) {\n        return whitelistFrom[_from]||whitelistTo[_to];\n}\n2688-function_definition-418-420", method="_isWhitelisted(address _from,address _to)", type_label=function_definition];
2705 [label="418_ return whitelistFrom[_from]||whitelistTo[_to];\n2705-return-419-419", method="_isWhitelisted(address _from,address _to)", type_label=return];
2713 [label="420_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n2713-function_definition-421-423", method="my_func_unchk35(address payable dst)", type_label=function_definition];
2722 [label="421_ dst.send(msg.value);\n2722-expression_statement-422-422", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
2731 [label="423_ function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner {\n        emit WhitelistTo(_addr, _whitelisted);\n        whitelistTo[_addr] = _whitelisted;\n    }\n2731-function_definition-424-427", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=function_definition];
2742 [label="423_ onlyOwner\n2742-expression_statement-424-424", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=expression_statement];
2751 [label="425_ whitelistTo[_addr] = _whitelisted;\n2751-expression_statement-426-426", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=expression_statement];
2757 [label="427_ bool public payedOut_unchk44 = false;\n2757-new_variable-428-428", method="", type_label=new_variable];
2764 [label="428_ address payable public winner_unchk44;\n2764-new_variable-429-429", method="", type_label=new_variable];
2769 [label="429_ uint public winAmount_unchk44;\n2769-new_variable-430-430", method="", type_label=new_variable];
2774 [label="430_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n2774-function_definition-431-435", method="sendToWinner_unchk44()", type_label=function_definition];
2778 [label="431_ require(!payedOut_unchk44);\n2778-expression_statement-432-432", method="sendToWinner_unchk44()", type_label=expression_statement];
2784 [label="432_ winner_unchk44.send(winAmount_unchk44);\n2784-expression_statement-433-433", method="sendToWinner_unchk44()", type_label=expression_statement];
2791 [label="433_ payedOut_unchk44 = true;\n2791-expression_statement-434-434", method="sendToWinner_unchk44()", type_label=expression_statement];
2796 [label="435_ function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner {\n        emit WhitelistFrom(_addr, _whitelisted);\n        whitelistFrom[_addr] = _whitelisted;\n}\n2796-function_definition-436-439", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=function_definition];
2807 [label="435_ onlyOwner\n2807-expression_statement-436-436", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=expression_statement];
2816 [label="437_ whitelistFrom[_addr] = _whitelisted;\n2816-expression_statement-438-438", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=expression_statement];
2822 [label="439_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n2822-function_definition-440-448", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
2826 [label="440_ address payable addr_unchk40;\n2826-new_variable-441-441", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
2831 [label="441_ if\n2831-if-442-447", method="UncheckedExternalCall_unchk40()", type_label=if];
5668 [label="441_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
479;
477;
514;
540;
802;
2231;
2505;
2841;
129 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> 2983  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2983 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 2983  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
227 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
261 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
315 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 472  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3299 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 3299  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
485 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
499 -> 509  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3336 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 3336  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
521 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
628 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 3474  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
653 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
664 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
699 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
856 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
860 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
899 -> 906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
906 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
946 -> 962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
962 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 1026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 3890  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1086 -> 1090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 1155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1171 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 1223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1233 -> 1242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1242 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1244 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1284 -> 1288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1288 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1306 -> 1323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1323 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1329 -> 1337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1347 -> 1360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1360 -> 1371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1371 -> 1387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1387 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1389 -> 1393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1393 -> 1398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1398 -> 4235  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1414 -> 1427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1427 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 1459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1461 -> 1469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1477 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1493 -> 1504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 1513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 4350  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4350 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1528 -> 4350  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1528 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1531 -> 1537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1537 -> 1543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1543 -> 1549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1549 -> 1566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1566 -> 1577  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1566 -> 4403  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1577 -> 1584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 1591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1591 -> 1605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1649 -> 1666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1689 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1692 -> 1699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1699 -> 1704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1709 -> 1713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1713 -> 1719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1719 -> 1726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1731 -> 1745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1745 -> 1761  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1745 -> 4582  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4582 -> 1772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1758 -> 1745  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1761 -> 1758  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1772 -> 1779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1779 -> 1784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1789 -> 1793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1793 -> 1799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1799 -> 1806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1811 -> 1827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1827 -> 1836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1856 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1859 -> 1867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1875 -> 1895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1895 -> 1904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1904 -> 1917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1917 -> 1926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1926 -> 4763  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4763 -> 1942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1939 -> 4763  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1939 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1942 -> 1948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1948 -> 1954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1954 -> 1960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1960 -> 1973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1973 -> 1982  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1973 -> 4810  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1982 -> 1989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1989 -> 1996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1996 -> 2010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2050 -> 2067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2067 -> 2080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2112 -> 2128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2128 -> 2135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2135 -> 2142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2146 -> 2162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2162 -> 2171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2209 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2212 -> 2216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2216 -> 2221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2232 -> 2248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2248 -> 2257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2295 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2298 -> 2302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2302 -> 2307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2307 -> 5144  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2323 -> 2335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2335 -> 2342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2365 -> 2374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2383 -> 2391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2400 -> 2408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2416 -> 2428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2428 -> 2435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2435 -> 2444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2444 -> 2453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2476 -> 2480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2480 -> 2485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2485 -> 2490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2490 -> 2500  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5327 -> 2507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2500 -> 5327  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2507 -> 2519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2519 -> 2532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2532 -> 2553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2560 -> 2567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2567 -> 2572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2577 -> 2581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2581 -> 2587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2587 -> 2594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2599 -> 2609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2628 -> 2636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2644 -> 2660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2664 -> 2673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2688 -> 2705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2705 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2713 -> 2722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2731 -> 2751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2757 -> 2764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2764 -> 2769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2774 -> 2778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2778 -> 2784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2784 -> 2791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2796 -> 2816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2822 -> 2826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2826 -> 2831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 3299  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
514 -> 3336  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
540 -> 3367  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
802 -> 3629  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2231 -> 5058  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2505 -> 5327  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2841 -> 5668  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
