digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n50-function_definition-8-12", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ require(b <= a, \"SafeMath: subtraction overflow\");\n67-expression_statement-9-9", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
77 [label="9_ uint256 c = a - b;\n77-new_variable-10-10", method="sub(uint256 a,uint256 b)", type_label=new_variable];
85 [label="10_ return c;\n85-return-11-11", method="sub(uint256 a,uint256 b)", type_label=return];
87 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n87-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
104 [label="13_ if_a == 0\n104-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
2894 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
109 [label="14_ return 0;\n109-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
111 [label="16_ uint256 c = a * b;\n111-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
119 [label="17_ require(c / a == b, \"SafeMath: multiplication overflow\");\n119-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
131 [label="18_ return c;\n131-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
133 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n133-function_definition-21-25", method="div(uint256 a,uint256 b)", type_label=function_definition];
150 [label="21_ require(b > 0, \"SafeMath: division by zero\");\n150-expression_statement-22-22", method="div(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="22_ uint256 c = a / b;\n160-new_variable-23-23", method="div(uint256 a,uint256 b)", type_label=new_variable];
168 [label="23_ return c;\n168-return-24-24", method="div(uint256 a,uint256 b)", type_label=return];
170 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n170-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
187 [label="26_ require(b != 0, \"SafeMath: modulo by zero\");\n187-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
197 [label="27_ return a % b;\n197-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
204 [label="31_ function my_func_unchk11(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n204-function_definition-32-34", method="my_func_unchk11(address payable dst)", type_label=function_definition];
213 [label="32_ dst.send(msg.value);\n213-expression_statement-33-33", method="my_func_unchk11(address payable dst)", type_label=expression_statement];
222 [label="34_ address public owner;\n222-new_variable-35-35", method="", type_label=new_variable];
227 [label="35_ function callnotchecked_unchk1(address payable callee) public {\n    callee.call.value(2 ether);\n  }\n227-function_definition-36-38", method="callnotchecked_unchk1(address payable callee)", type_label=function_definition];
235 [label="36_ callee.call.value(2 ether);\n235-expression_statement-37-37", method="callnotchecked_unchk1(address payable callee)", type_label=expression_statement];
245 [label="38_ address private newOwner;\n245-new_variable-39-39", method="", type_label=new_variable];
250 [label="39_ bool public payedOut_unchk44 = false;\n250-new_variable-40-40", method="", type_label=new_variable];
257 [label="40_ address payable public winner_unchk44;\n257-new_variable-41-41", method="", type_label=new_variable];
262 [label="41_ uint public winAmount_unchk44;\n262-new_variable-42-42", method="", type_label=new_variable];
267 [label="42_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n267-function_definition-43-47", method="sendToWinner_unchk44()", type_label=function_definition];
271 [label="43_ require(!payedOut_unchk44);\n271-expression_statement-44-44", method="sendToWinner_unchk44()", type_label=expression_statement];
277 [label="44_ winner_unchk44.send(winAmount_unchk44);\n277-expression_statement-45-45", method="sendToWinner_unchk44()", type_label=expression_statement];
284 [label="45_ payedOut_unchk44 = true;\n284-expression_statement-46-46", method="sendToWinner_unchk44()", type_label=expression_statement];
305 [label="49_ owner = msg.sender;\n305-expression_statement-50-50", method="", type_label=expression_statement];
311 [label="51_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n311-function_definition-52-54", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
319 [label="52_ callee.call.value(1 ether);\n319-expression_statement-53-53", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
329 [label="54_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n329-expression_statement-55-58", method="", type_label=expression_statement];
332 [label="55_ require(msg.sender == owner);\n332-expression_statement-56-56", method="", type_label=expression_statement];
341 [label="56_ _;\n341-expression_statement-57-57", method="", type_label=expression_statement];
343 [label="58_ function onlyOwnerTransferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n343-function_definition-59-61", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=function_definition];
350 [label="58_ onlyOwner\n350-expression_statement-59-59", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=expression_statement];
353 [label="59_ newOwner = _newOwner;\n353-expression_statement-60-60", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=expression_statement];
357 [label="61_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n357-function_definition-62-63", method="bug_unchk3(address payable addr)", type_label=function_definition];
365 [label="62_ addr.send (42 ether);\n365-expression_statement-63-63", method="bug_unchk3(address payable addr)", type_label=expression_statement];
373 [label="63_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(now, owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n373-function_definition-64-69", method="acceptOwnership()", type_label=function_definition];
377 [label="64_ require(msg.sender == newOwner);\n377-expression_statement-65-65", method="acceptOwnership()", type_label=expression_statement];
394 [label="66_ owner = newOwner;\n394-expression_statement-67-67", method="acceptOwnership()", type_label=expression_statement];
398 [label="67_ newOwner = address(0);\n398-expression_statement-68-68", method="acceptOwnership()", type_label=expression_statement];
404 [label="69_ bool public payedOut_unchk9 = false;\n404-new_variable-70-70", method="", type_label=new_variable];
411 [label="70_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n411-function_definition-71-74", method="withdrawLeftOver_unchk9()", type_label=function_definition];
415 [label="71_ require(payedOut_unchk9);\n415-expression_statement-72-72", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
420 [label="72_ msg.sender.send(address(this).balance);\n420-expression_statement-73-73", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
436 [label="77_ function transfer(address _to, uint256 _amount) external returns (bool);\n436-function_definition-78-78", method="transfer(address _to,uint256 _amount)", type_label=function_definition];
451 [label="78_ function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\n451-function_definition-79-79", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=function_definition];
481 [label="82_ function withdrawBal_unchk41 () public{\n	uint64 Balances_unchk41 = 0;\n	msg.sender.send(Balances_unchk41);}\n481-function_definition-83-85", method="withdrawBal_unchk41()", type_label=function_definition];
485 [label="83_ uint64 Balances_unchk41 = 0;\n485-new_variable-84-84", method="withdrawBal_unchk41()", type_label=new_variable];
491 [label="84_ msg.sender.send(Balances_unchk41);\n491-expression_statement-85-85", method="withdrawBal_unchk41()", type_label=expression_statement];
500 [label="85_ bool public safeGuard;\n500-new_variable-86-86", method="", type_label=new_variable];
505 [label="86_ function bug_unchk42() public{\nuint receivers_unchk42;\naddress payable addr_unchk42;\nif (!addr_unchk42.send(42 ether))\n	{receivers_unchk42 +=1;}\nelse\n	{revert();}\n}\n505-function_definition-87-94", method="bug_unchk42()", type_label=function_definition];
509 [label="87_ uint receivers_unchk42;\n509-new_variable-88-88", method="bug_unchk42()", type_label=new_variable];
514 [label="88_ address payable addr_unchk42;\n514-new_variable-89-89", method="bug_unchk42()", type_label=new_variable];
519 [label="89_ if\n519-if-90-93", method="bug_unchk42()", type_label=if];
3309 [label="89_ end_if", method="bug_unchk42()", type_label=end_if];
529 [label="90_ receivers_unchk42 +=1;\n529-expression_statement-91-91", method="bug_unchk42()", type_label=expression_statement];
536 [label="94_ address public feeAccount;\n536-new_variable-95-95", method="", type_label=new_variable];
541 [label="95_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n541-function_definition-96-98", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
549 [label="96_ callee.send(5 ether);\n549-expression_statement-97-97", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
557 [label="98_ uint public tradingFee = 50;\n557-new_variable-99-99", method="", type_label=new_variable];
563 [label="99_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n563-function_definition-100-104", method="bug_unchk43()", type_label=function_definition];
567 [label="100_ address payable addr_unchk43;\n567-new_variable-101-101", method="bug_unchk43()", type_label=new_variable];
572 [label="101_ if_!addr_unchk43.send (10 ether) || 1==1\n572-if-102-103", method="bug_unchk43()", type_label=if];
3362 [label="101_ end_if", method="bug_unchk43()", type_label=end_if];
588 [label="104_ mapping (address => mapping (address => uint)) public tokens;\n588-new_variable-105-105", method="", type_label=new_variable];
597 [label="105_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n597-function_definition-106-108", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
606 [label="106_ dst.call.value(msg.value)(\"\");\n606-expression_statement-107-107", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
621 [label="108_ mapping (address => mapping (bytes32 => bool)) public orders;\n621-new_variable-109-109", method="", type_label=new_variable];
630 [label="109_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n630-function_definition-110-112", method="withdrawBal_unchk17()", type_label=function_definition];
634 [label="110_ uint64 Balances_unchk17 = 0;\n634-new_variable-111-111", method="withdrawBal_unchk17()", type_label=new_variable];
640 [label="111_ msg.sender.send(Balances_unchk17);\n640-expression_statement-112-112", method="withdrawBal_unchk17()", type_label=expression_statement];
649 [label="112_ mapping (address => mapping (bytes32 => uint)) public orderFills;\n649-new_variable-113-113", method="", type_label=new_variable];
658 [label="113_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n658-function_definition-114-122", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
662 [label="114_ address payable addr_unchk40;\n662-new_variable-115-115", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
667 [label="115_ if\n667-if-116-121", method="UncheckedExternalCall_unchk40()", type_label=if];
3457 [label="115_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
712 [label="123_ bool public payedOut_unchk33 = false;\n712-new_variable-124-124", method="", type_label=new_variable];
719 [label="124_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n719-function_definition-125-128", method="withdrawLeftOver_unchk33()", type_label=function_definition];
723 [label="125_ require(payedOut_unchk33);\n723-expression_statement-126-126", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
728 [label="126_ msg.sender.send(address(this).balance);\n728-expression_statement-127-127", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
787 [label="129_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n787-function_definition-130-131", method="bug_unchk27(address payable addr)", type_label=function_definition];
795 [label="130_ addr.send (42 ether);\n795-expression_statement-131-131", method="bug_unchk27(address payable addr)", type_label=expression_statement];
833 [label="132_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n833-function_definition-133-137", method="bug_unchk31()", type_label=function_definition];
837 [label="133_ address payable addr_unchk31;\n837-new_variable-134-134", method="bug_unchk31()", type_label=new_variable];
842 [label="134_ if_!addr_unchk31.send (10 ether) || 1==1\n842-if-135-136", method="bug_unchk31()", type_label=if];
3632 [label="134_ end_if", method="bug_unchk31()", type_label=end_if];
880 [label="138_ bool public payedOut_unchk45 = false;\n880-new_variable-139-139", method="", type_label=new_variable];
887 [label="139_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n887-function_definition-140-143", method="withdrawLeftOver_unchk45()", type_label=function_definition];
891 [label="140_ require(payedOut_unchk45);\n891-expression_statement-141-141", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
896 [label="141_ msg.sender.send(address(this).balance);\n896-expression_statement-142-142", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
931 [label="144_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n931-function_definition-145-147", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
939 [label="145_ callee.call.value(1 ether);\n939-expression_statement-146-146", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
961 [label="149_ feeAccount = msg.sender;\n961-expression_statement-150-150", method="", type_label=expression_statement];
967 [label="151_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n967-function_definition-152-154", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
975 [label="152_ callee.call.value(1 ether);\n975-expression_statement-153-153", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
985 [label="154_ function changeSafeguardStatus() onlyOwner public\n    {\n        if (safeGuard == false)\n        {\n            safeGuard = true;\n        }\n        else\n        {\n            safeGuard = false;    \n        }\n    }\n985-function_definition-155-165", method="changeSafeguardStatus()", type_label=function_definition];
987 [label="154_ onlyOwner\n987-expression_statement-155-155", method="changeSafeguardStatus()", type_label=expression_statement];
991 [label="156_ if_safeGuard == false\n991-if-157-164", method="changeSafeguardStatus()", type_label=if];
3781 [label="156_ end_if", method="changeSafeguardStatus()", type_label=end_if];
997 [label="158_ safeGuard = true;\n997-expression_statement-159-159", method="changeSafeguardStatus()", type_label=expression_statement];
1003 [label="162_ safeGuard = false;\n1003-expression_statement-163-163", method="changeSafeguardStatus()", type_label=expression_statement];
1008 [label="165_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n1008-function_definition-166-170", method="bug_unchk19()", type_label=function_definition];
1012 [label="166_ address payable addr_unchk19;\n1012-new_variable-167-167", method="bug_unchk19()", type_label=new_variable];
1017 [label="167_ if_!addr_unchk19.send (10 ether) || 1==1\n1017-if-168-169", method="bug_unchk19()", type_label=if];
3807 [label="167_ end_if", method="bug_unchk19()", type_label=end_if];
1033 [label="170_ function calculatePercentage(uint256 PercentOf, uint256 percentTo ) internal pure returns (uint256) \n    {\n        uint256 factor = 10000;\n        require(percentTo <= factor);\n        uint256 c = PercentOf.mul(percentTo).div(factor);\n        return c;\n    }\n1033-function_definition-171-177", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=function_definition];
1050 [label="172_ uint256 factor = 10000;\n1050-new_variable-173-173", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=new_variable];
1056 [label="173_ require(percentTo <= factor);\n1056-expression_statement-174-174", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=expression_statement];
1063 [label="174_ uint256 c = PercentOf.mul(percentTo).div(factor);\n1063-new_variable-175-175", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=new_variable];
1079 [label="175_ return c;\n1079-return-176-176", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=return];
1081 [label="177_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n1081-function_definition-178-180", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
1089 [label="178_ callee.send(5 ether);\n1089-expression_statement-179-179", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
1097 [label="180_ function changeFeeAccount(address feeAccount_) public onlyOwner {\n    feeAccount = feeAccount_;\n  }\n1097-function_definition-181-183", method="changeFeeAccount(address feeAccount_)", type_label=function_definition];
1104 [label="180_ onlyOwner\n1104-expression_statement-181-181", method="changeFeeAccount(address feeAccount_)", type_label=expression_statement];
1107 [label="181_ feeAccount = feeAccount_;\n1107-expression_statement-182-182", method="changeFeeAccount(address feeAccount_)", type_label=expression_statement];
1111 [label="183_ bool public payedOut_unchk20 = false;\n1111-new_variable-184-184", method="", type_label=new_variable];
1118 [label="184_ address payable public winner_unchk20;\n1118-new_variable-185-185", method="", type_label=new_variable];
1123 [label="185_ uint public winAmount_unchk20;\n1123-new_variable-186-186", method="", type_label=new_variable];
1128 [label="186_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n1128-function_definition-187-191", method="sendToWinner_unchk20()", type_label=function_definition];
1132 [label="187_ require(!payedOut_unchk20);\n1132-expression_statement-188-188", method="sendToWinner_unchk20()", type_label=expression_statement];
1138 [label="188_ winner_unchk20.send(winAmount_unchk20);\n1138-expression_statement-189-189", method="sendToWinner_unchk20()", type_label=expression_statement];
1145 [label="189_ payedOut_unchk20 = true;\n1145-expression_statement-190-190", method="sendToWinner_unchk20()", type_label=expression_statement];
1150 [label="191_ function changetradingFee(uint tradingFee_) public onlyOwner{\n    tradingFee = tradingFee_;\n  }\n1150-function_definition-192-194", method="changetradingFee(uint tradingFee_)", type_label=function_definition];
1157 [label="191_ onlyOwner\n1157-expression_statement-192-192", method="changetradingFee(uint tradingFee_)", type_label=expression_statement];
1160 [label="192_ tradingFee = tradingFee_;\n1160-expression_statement-193-193", method="changetradingFee(uint tradingFee_)", type_label=expression_statement];
1164 [label="194_ bool public payedOut_unchk32 = false;\n1164-new_variable-195-195", method="", type_label=new_variable];
1171 [label="195_ address payable public winner_unchk32;\n1171-new_variable-196-196", method="", type_label=new_variable];
1176 [label="196_ uint public winAmount_unchk32;\n1176-new_variable-197-197", method="", type_label=new_variable];
1181 [label="197_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n1181-function_definition-198-202", method="sendToWinner_unchk32()", type_label=function_definition];
1185 [label="198_ require(!payedOut_unchk32);\n1185-expression_statement-199-199", method="sendToWinner_unchk32()", type_label=expression_statement];
1191 [label="199_ winner_unchk32.send(winAmount_unchk32);\n1191-expression_statement-200-200", method="sendToWinner_unchk32()", type_label=expression_statement];
1198 [label="200_ payedOut_unchk32 = true;\n1198-expression_statement-201-201", method="sendToWinner_unchk32()", type_label=expression_statement];
1203 [label="202_ function availableTradingFeeOwner() public view returns(uint256){\n      return tokens[address(0)][feeAccount];\n  }\n1203-function_definition-203-205", method="availableTradingFeeOwner()", type_label=function_definition];
1212 [label="203_ return tokens[address(0)][feeAccount];\n1212-return-204-204", method="availableTradingFeeOwner()", type_label=return];
1220 [label="205_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n1220-function_definition-206-208", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
1228 [label="206_ callee.send(5 ether);\n1228-expression_statement-207-207", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
1236 [label="208_ function withdrawTradingFeeOwner() public onlyOwner returns (string memory){\n      uint256 amount = availableTradingFeeOwner();\n      require (amount > 0, 'Nothing to withdraw');\n      tokens[address(0)][feeAccount] = 0;\n      msg.sender.transfer(amount);\n      emit OwnerWithdrawTradingFee(owner, amount);\n  }\n1236-function_definition-209-215", method="withdrawTradingFeeOwner()", type_label=function_definition];
1239 [label="208_ onlyOwner\n1239-expression_statement-209-209", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1246 [label="209_ uint256 amount = availableTradingFeeOwner();\n1246-new_variable-210-210", method="withdrawTradingFeeOwner()", type_label=new_variable];
1253 [label="210_ require (amount > 0, 'Nothing to withdraw');\n1253-expression_statement-211-211", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1263 [label="211_ tokens[address(0)][feeAccount] = 0;\n1263-expression_statement-212-212", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1273 [label="212_ msg.sender.transfer(amount);\n1273-expression_statement-213-213", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1288 [label="215_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n1288-function_definition-216-220", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
1304 [label="216_ uint64 subpot_unchk46 = 3 ether;\n1304-new_variable-217-217", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
1311 [label="217_ winner_unchk46.send(subpot_unchk46);\n1311-expression_statement-218-218", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
1318 [label="218_ subpot_unchk46= 0;\n1318-expression_statement-219-219", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
1322 [label="220_ function deposit() public payable {\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n    emit Deposit(now, address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\n  }\n1322-function_definition-221-224", method="deposit()", type_label=function_definition];
1327 [label="221_ tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n1327-expression_statement-222-222", method="deposit()", type_label=expression_statement];
1380 [label="224_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1380-function_definition-225-233", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
1384 [label="225_ address payable addr_unchk4;\n1384-new_variable-226-226", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
1389 [label="226_ if\n1389-if-227-232", method="UncheckedExternalCall_unchk4()", type_label=if];
4179 [label="226_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
1400 [label="233_ function withdraw(uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    require(tokens[address(0)][msg.sender] >= amount);\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n    msg.sender.transfer(amount);\n    emit Withdraw(now, address(0), msg.sender, amount, tokens[address(0)][msg.sender]);\n  }\n1400-function_definition-234-240", method="withdraw(uint amount)", type_label=function_definition];
1408 [label="234_ require(!safeGuard,\"System Paused by Admin\");\n1408-expression_statement-235-235", method="withdraw(uint amount)", type_label=expression_statement];
1417 [label="235_ require(tokens[address(0)][msg.sender] >= amount);\n1417-expression_statement-236-236", method="withdraw(uint amount)", type_label=expression_statement];
1432 [label="236_ tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n1432-expression_statement-237-237", method="withdraw(uint amount)", type_label=expression_statement];
1457 [label="237_ msg.sender.transfer(amount);\n1457-expression_statement-238-238", method="withdraw(uint amount)", type_label=expression_statement];
1490 [label="240_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n1490-function_definition-241-245", method="bug_unchk7()", type_label=function_definition];
1494 [label="241_ address payable addr_unchk7;\n1494-new_variable-242-242", method="bug_unchk7()", type_label=new_variable];
1499 [label="242_ if_!addr_unchk7.send (10 ether) || 1==1\n1499-if-243-244", method="bug_unchk7()", type_label=if];
4289 [label="242_ end_if", method="bug_unchk7()", type_label=end_if];
1515 [label="245_ function depositToken(address token, uint amount) public {\n    require(token!=address(0));\n    require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n    tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n    emit Deposit(now, token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n1515-function_definition-246-251", method="depositToken(address token,uint amount)", type_label=function_definition];
1527 [label="246_ require(token!=address(0));\n1527-expression_statement-247-247", method="depositToken(address token,uint amount)", type_label=expression_statement];
1536 [label="247_ require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n1536-expression_statement-248-248", method="depositToken(address token,uint amount)", type_label=expression_statement];
1557 [label="248_ tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n1557-expression_statement-249-249", method="depositToken(address token,uint amount)", type_label=expression_statement];
1598 [label="251_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1598-function_definition-252-254", method="my_func_unchk23(address payable dst)", type_label=function_definition];
1607 [label="252_ dst.send(msg.value);\n1607-expression_statement-253-253", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
1616 [label="254_ function withdrawToken(address token, uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    require(token!=address(0));\n    require(tokens[token][msg.sender] >= amount);\n    tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n	  ERC20Essential(token).transfer(msg.sender, amount);\n    emit Withdraw(now, token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n1616-function_definition-255-262", method="withdrawToken(address token,uint amount)", type_label=function_definition];
1628 [label="255_ require(!safeGuard,\"System Paused by Admin\");\n1628-expression_statement-256-256", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1637 [label="256_ require(token!=address(0));\n1637-expression_statement-257-257", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1646 [label="257_ require(tokens[token][msg.sender] >= amount);\n1646-expression_statement-258-258", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1659 [label="258_ tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n1659-expression_statement-259-259", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1680 [label="259_ ERC20Essential(token).transfer(msg.sender, amount);\n1680-expression_statement-260-260", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1714 [label="262_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n1714-function_definition-263-265", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
1722 [label="263_ callee.send(5 ether);\n1722-expression_statement-264-264", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
1730 [label="265_ function balanceOf(address token, address user) public view returns (uint) {\n    return tokens[token][user];\n  }\n1730-function_definition-266-268", method="balanceOf(address token,address user)", type_label=function_definition];
1747 [label="266_ return tokens[token][user];\n1747-return-267-267", method="balanceOf(address token,address user)", type_label=return];
1753 [label="268_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n1753-function_definition-269-276", method="bug_unchk30()", type_label=function_definition];
1757 [label="269_ uint receivers_unchk30;\n1757-new_variable-270-270", method="bug_unchk30()", type_label=new_variable];
1762 [label="270_ address payable addr_unchk30;\n1762-new_variable-271-271", method="bug_unchk30()", type_label=new_variable];
1767 [label="271_ if\n1767-if-272-275", method="bug_unchk30()", type_label=if];
4557 [label="271_ end_if", method="bug_unchk30()", type_label=end_if];
1777 [label="272_ receivers_unchk30 +=1;\n1777-expression_statement-273-273", method="bug_unchk30()", type_label=expression_statement];
1784 [label="276_ function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    orders[msg.sender][hash] = true;\n    emit Order(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\n  }\n1784-function_definition-277-281", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=function_definition];
1812 [label="277_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n1812-new_variable-278-278", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=new_variable];
1838 [label="278_ orders[msg.sender][hash] = true;\n1838-expression_statement-279-279", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=expression_statement];
1869 [label="281_ bool public payedOut_unchk8 = false;\n1869-new_variable-282-282", method="", type_label=new_variable];
1876 [label="282_ address payable public winner_unchk8;\n1876-new_variable-283-283", method="", type_label=new_variable];
1881 [label="283_ uint public winAmount_unchk8;\n1881-new_variable-284-284", method="", type_label=new_variable];
1886 [label="284_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1886-function_definition-285-289", method="sendToWinner_unchk8()", type_label=function_definition];
1890 [label="285_ require(!payedOut_unchk8);\n1890-expression_statement-286-286", method="sendToWinner_unchk8()", type_label=expression_statement];
1896 [label="286_ winner_unchk8.send(winAmount_unchk8);\n1896-expression_statement-287-287", method="sendToWinner_unchk8()", type_label=expression_statement];
1903 [label="287_ payedOut_unchk8 = true;\n1903-expression_statement-288-288", method="sendToWinner_unchk8()", type_label=expression_statement];
1908 [label="289_ function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    require((\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n    orderFills[user][hash] = orderFills[user][hash].add(amount);\n    emit Trade(now, tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);\n  }\n1908-function_definition-290-301", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=function_definition];
1956 [label="290_ require(!safeGuard,\"System Paused by Admin\");\n1956-expression_statement-291-291", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
1965 [label="291_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n1965-new_variable-292-292", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=new_variable];
1991 [label="292_ require((\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n1991-expression_statement-293-297", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2045 [label="297_ tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n2045-expression_statement-298-298", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2060 [label="298_ orderFills[user][hash] = orderFills[user][hash].add(amount);\n2060-expression_statement-299-299", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2099 [label="301_ function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) internal {\n    uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n    tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n    tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n    tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n    tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n    tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n  }\n2099-function_definition-302-309", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=function_definition];
2127 [label="302_ uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n2127-new_variable-303-303", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=new_variable];
2138 [label="303_ tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n2138-expression_statement-304-304", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2164 [label="304_ tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n2164-expression_statement-305-305", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2186 [label="305_ tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n2186-expression_statement-306-306", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2207 [label="306_ tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n2207-expression_statement-307-307", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2231 [label="307_ tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n2231-expression_statement-308-308", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2259 [label="309_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n2259-function_definition-310-311", method="bug_unchk39(address payable addr)", type_label=function_definition];
2267 [label="310_ addr.send (4 ether);\n2267-expression_statement-311-311", method="bug_unchk39(address payable addr)", type_label=expression_statement];
2275 [label="311_ function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public view returns(bool) {\n    if (!(\n      tokens[tokenGet][sender] >= amount &&\n      availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount\n    )) return false;\n    return true;\n  }\n2275-function_definition-312-318", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=function_definition];
2332 [label="312_ if\n2332-if-313-316", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=if];
5122 [label="312_ end_if", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=end_if];
2367 [label="315_ return false;\n2367-return-316-316", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=return];
2370 [label="316_ return true;\n2370-return-317-317", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=return];
2373 [label="318_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n2373-function_definition-319-321", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
2382 [label="319_ dst.call.value(msg.value)(\"\");\n2382-expression_statement-320-320", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
2397 [label="321_ function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    uint available1;\n    if (!(\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires\n    )) return 0;\n    available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\n    if (amountGet.sub(orderFills[user][hash])<available1) return amountGet.sub(orderFills[user][hash]);\n    return available1;\n  }\n2397-function_definition-322-332", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
2446 [label="322_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2446-new_variable-323-323", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2472 [label="323_ uint available1;\n2472-new_variable-324-324", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2477 [label="324_ if\n2477-if-325-328", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5267 [label="324_ end_if", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2516 [label="327_ return 0;\n2516-return-328-328", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2518 [label="328_ available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\n2518-expression_statement-329-329", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2533 [label="329_ if_amountGet.sub(orderFills[user][hash])<available1\n2533-if-330-330", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5323 [label="329_ end_if", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2546 [label="329_ return amountGet.sub(orderFills[user][hash]);\n2546-return-330-330", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2557 [label="330_ return available1;\n2557-return-331-331", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2559 [label="332_ function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user) public view returns(uint) {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    return orderFills[user][hash];\n  }\n2559-function_definition-333-336", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=function_definition];
2596 [label="333_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2596-new_variable-334-334", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=new_variable];
2622 [label="334_ return orderFills[user][hash];\n2622-return-335-335", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=return];
2628 [label="336_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n2628-function_definition-337-339", method="my_func_unchk35(address payable dst)", type_label=function_definition];
2637 [label="337_ dst.send(msg.value);\n2637-expression_statement-338-338", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
2646 [label="339_ function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == msg.sender));\n    orderFills[msg.sender][hash] = amountGet;\n    emit Cancel(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n  }\n2646-function_definition-340-346", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
2686 [label="340_ require(!safeGuard,\"System Paused by Admin\");\n2686-expression_statement-341-341", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2695 [label="341_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2695-new_variable-342-342", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2721 [label="342_ require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == msg.sender));\n2721-expression_statement-343-343", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2759 [label="343_ orderFills[msg.sender][hash] = amountGet;\n2759-expression_statement-344-344", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
534;
677;
1399;
1782;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
87 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 2894  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2894 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 2894  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
204 -> 213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
257 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
271 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
311 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
332 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
394 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
485 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
514 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 529  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3309 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 3309  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
541 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 3362  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
597 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
634 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
842 -> 3632  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
887 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
931 -> 939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
991 -> 997  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
991 -> 1003  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3781 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 3781  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1003 -> 3781  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1008 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 3807  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1033 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1079 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1081 -> 1089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 1123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1128 -> 1132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1150 -> 1160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1164 -> 1171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1171 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 1185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1185 -> 1191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1191 -> 1198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1220 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 1263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1263 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1288 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 1311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 1318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 1384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 1389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1400 -> 1408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1408 -> 1417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1417 -> 1432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1432 -> 1457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1490 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1494 -> 1499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1499 -> 4289  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1515 -> 1527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1527 -> 1536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1536 -> 1557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1598 -> 1607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1616 -> 1628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1628 -> 1637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1637 -> 1646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1646 -> 1659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1659 -> 1680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1714 -> 1722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1730 -> 1747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1747 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1753 -> 1757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1757 -> 1762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1762 -> 1767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1767 -> 1777  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4557 -> 1784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1777 -> 4557  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1784 -> 1812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1812 -> 1838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1869 -> 1876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1876 -> 1881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1886 -> 1890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1890 -> 1896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1896 -> 1903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1908 -> 1956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1956 -> 1965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1965 -> 1991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1991 -> 2045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2045 -> 2060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2099 -> 2127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2127 -> 2138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2138 -> 2164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2164 -> 2186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2186 -> 2207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2207 -> 2231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2259 -> 2267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2275 -> 2332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2332 -> 2367  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2332 -> 5122  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5122 -> 2370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2367 -> 5122  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2367 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2370 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2373 -> 2382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2397 -> 2446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2446 -> 2472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2472 -> 2477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2477 -> 2516  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2477 -> 5267  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5267 -> 2518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2516 -> 5267  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2516 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2518 -> 2533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2533 -> 2546  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2533 -> 5323  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5323 -> 2557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2546 -> 5323  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2546 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2557 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2559 -> 2596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2596 -> 2622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2622 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2628 -> 2637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2646 -> 2686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2686 -> 2695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2695 -> 2721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2721 -> 2759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
534 -> 3309  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
677 -> 3457  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1399 -> 4179  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1782 -> 4557  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
