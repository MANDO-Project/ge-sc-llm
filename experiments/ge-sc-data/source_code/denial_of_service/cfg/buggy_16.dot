digraph  {
13 [label="2_ function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n13-function_definition-3-6", method="mul(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a * b;\n31-expression_statement-4-4", method="mul(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(a == 0 || c / a == b);\n37-expression_statement-5-5", method="mul(uint a,uint b)", type_label=expression_statement];
50 [label="6_ function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n50-function_definition-7-10", method="div(uint a,uint b)", type_label=function_definition];
68 [label="7_ require(b > 0);\n68-expression_statement-8-8", method="div(uint a,uint b)", type_label=expression_statement];
75 [label="8_ c = a / b;\n75-expression_statement-9-9", method="div(uint a,uint b)", type_label=expression_statement];
81 [label="10_ function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n81-function_definition-11-14", method="sub(uint a,uint b)", type_label=function_definition];
99 [label="11_ require(b <= a);\n99-expression_statement-12-12", method="sub(uint a,uint b)", type_label=expression_statement];
106 [label="12_ c = a - b;\n106-expression_statement-13-13", method="sub(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n112-function_definition-15-18", method="add(uint a,uint b)", type_label=function_definition];
130 [label="15_ c = a + b;\n130-expression_statement-16-16", method="add(uint a,uint b)", type_label=expression_statement];
136 [label="16_ require(c >= a);\n136-expression_statement-17-17", method="add(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint256);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ function callnotchecked_unchk1(address payable callee) public {\n    callee.call.value(2 ether);\n  }\n154-function_definition-22-24", method="callnotchecked_unchk1(address payable callee)", type_label=function_definition];
162 [label="22_ callee.call.value(2 ether);\n162-expression_statement-23-23", method="callnotchecked_unchk1(address payable callee)", type_label=expression_statement];
172 [label="24_ function balanceOf(address tokenOwner) public view returns (uint256 balance);\n172-function_definition-25-25", method="balanceOf(address tokenOwner)", type_label=function_definition];
185 [label="25_ function withdrawBal_unchk41 () public{\n	uint64 Balances_unchk41 = 0;\n	msg.sender.send(Balances_unchk41);}\n185-function_definition-26-28", method="withdrawBal_unchk41()", type_label=function_definition];
189 [label="26_ uint64 Balances_unchk41 = 0;\n189-new_variable-27-27", method="withdrawBal_unchk41()", type_label=new_variable];
195 [label="27_ msg.sender.send(Balances_unchk41);\n195-expression_statement-28-28", method="withdrawBal_unchk41()", type_label=expression_statement];
204 [label="28_ function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\n204-function_definition-29-29", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
221 [label="29_ function bug_unchk42() public{\nuint receivers_unchk42;\naddress payable addr_unchk42;\nif (!addr_unchk42.send(42 ether))\n	{receivers_unchk42 +=1;}\nelse\n	{revert();}\n}\n221-function_definition-30-37", method="bug_unchk42()", type_label=function_definition];
225 [label="30_ uint receivers_unchk42;\n225-new_variable-31-31", method="bug_unchk42()", type_label=new_variable];
230 [label="31_ address payable addr_unchk42;\n230-new_variable-32-32", method="bug_unchk42()", type_label=new_variable];
235 [label="32_ if\n235-if-33-36", method="bug_unchk42()", type_label=if];
2468 [label="32_ end_if", method="bug_unchk42()", type_label=end_if];
245 [label="33_ receivers_unchk42 +=1;\n245-expression_statement-34-34", method="bug_unchk42()", type_label=expression_statement];
252 [label="37_ function transfer(address to, uint256 tokens) public returns (bool success);\n252-function_definition-38-38", method="transfer(address to,uint256 tokens)", type_label=function_definition];
268 [label="38_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n268-function_definition-39-41", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
276 [label="39_ callee.send(5 ether);\n276-expression_statement-40-40", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
284 [label="41_ function approve(address spender, uint256 tokens) public returns (bool success);\n284-function_definition-42-42", method="approve(address spender,uint256 tokens)", type_label=function_definition];
300 [label="42_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n300-function_definition-43-47", method="bug_unchk43()", type_label=function_definition];
304 [label="43_ address payable addr_unchk43;\n304-new_variable-44-44", method="bug_unchk43()", type_label=new_variable];
309 [label="44_ if_!addr_unchk43.send (10 ether) || 1==1\n309-if-45-46", method="bug_unchk43()", type_label=if];
2542 [label="44_ end_if", method="bug_unchk43()", type_label=end_if];
325 [label="47_ function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n325-function_definition-48-48", method="transferFrom(address from,address to,uint256 tokens)", type_label=function_definition];
345 [label="48_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n345-function_definition-49-51", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
354 [label="49_ dst.call.value(msg.value)(\"\");\n354-expression_statement-50-50", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
369 [label="51_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n369-function_definition-52-60", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
373 [label="52_ address payable addr_unchk40;\n373-new_variable-53-53", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
378 [label="53_ if\n378-if-54-59", method="UncheckedExternalCall_unchk40()", type_label=if];
2611 [label="53_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
403 [label="61_ bool public payedOut_unchk33 = false;\n403-new_variable-62-62", method="", type_label=new_variable];
410 [label="62_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n410-function_definition-63-66", method="withdrawLeftOver_unchk33()", type_label=function_definition];
414 [label="63_ require(payedOut_unchk33);\n414-expression_statement-64-64", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
419 [label="64_ msg.sender.send(address(this).balance);\n419-expression_statement-65-65", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
449 [label="69_ function bug_unchk15(address payable addr) public\n      {addr.send (42 ether); }\n449-function_definition-70-71", method="bug_unchk15(address payable addr)", type_label=function_definition];
457 [label="70_ addr.send (42 ether);\n457-expression_statement-71-71", method="bug_unchk15(address payable addr)", type_label=expression_statement];
465 [label="71_ address payable public owner;\n465-new_variable-72-72", method="", type_label=new_variable];
470 [label="72_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n470-function_definition-73-74", method="bug_unchk27(address payable addr)", type_label=function_definition];
478 [label="73_ addr.send (42 ether);\n478-expression_statement-74-74", method="bug_unchk27(address payable addr)", type_label=expression_statement];
498 [label="76_ owner = msg.sender;\n498-expression_statement-77-77", method="", type_label=expression_statement];
504 [label="78_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n504-function_definition-79-81", method="withdrawBal_unchk17()", type_label=function_definition];
508 [label="79_ uint64 Balances_unchk17 = 0;\n508-new_variable-80-80", method="withdrawBal_unchk17()", type_label=new_variable];
514 [label="80_ msg.sender.send(Balances_unchk17);\n514-expression_statement-81-81", method="withdrawBal_unchk17()", type_label=expression_statement];
523 [label="81_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n523-expression_statement-82-85", method="", type_label=expression_statement];
526 [label="82_ require(msg.sender == owner);\n526-expression_statement-83-83", method="", type_label=expression_statement];
535 [label="83_ _;\n535-expression_statement-84-84", method="", type_label=expression_statement];
537 [label="85_ function transferOwnership(address payable newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n537-function_definition-86-90", method="transferOwnership(address payable newOwner)", type_label=function_definition];
544 [label="85_ onlyOwner\n544-expression_statement-86-86", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
547 [label="86_ require(newOwner != address(0));\n547-expression_statement-87-87", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
562 [label="88_ owner = newOwner;\n562-expression_statement-89-89", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
566 [label="90_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n566-function_definition-91-93", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
574 [label="91_ callee.call.value(1 ether);\n574-expression_statement-92-92", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
598 [label="96_ function UncheckedExternalCall_unchk28 () public\n{  address payable addr_unchk28;\n   if (! addr_unchk28.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n598-function_definition-97-105", method="UncheckedExternalCall_unchk28()", type_label=function_definition];
602 [label="97_ address payable addr_unchk28;\n602-new_variable-98-98", method="UncheckedExternalCall_unchk28()", type_label=new_variable];
607 [label="98_ if\n607-if-99-104", method="UncheckedExternalCall_unchk28()", type_label=if];
2840 [label="98_ end_if", method="UncheckedExternalCall_unchk28()", type_label=end_if];
618 [label="105_ mapping (address => uint256) balances;\n618-new_variable-106-106", method="", type_label=new_variable];
624 [label="106_ function cash_unchk34(uint roundIndex, uint subpotIndex, address payable winner_unchk34) public{\n        uint64 subpot_unchk34 = 10 ether;\n        winner_unchk34.send(subpot_unchk34);   \n        subpot_unchk34= 0;\n}\n624-function_definition-107-111", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=function_definition];
640 [label="107_ uint64 subpot_unchk34 = 10 ether;\n640-new_variable-108-108", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=new_variable];
647 [label="108_ winner_unchk34.send(subpot_unchk34);\n647-expression_statement-109-109", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=expression_statement];
654 [label="109_ subpot_unchk34= 0;\n654-expression_statement-110-110", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=expression_statement];
658 [label="111_ mapping (address => mapping (address => uint256)) allowed;\n658-new_variable-112-112", method="", type_label=new_variable];
666 [label="112_ bool public payedOut_unchk21 = false;\n666-new_variable-113-113", method="", type_label=new_variable];
673 [label="113_ function withdrawLeftOver_unchk21() public {\n        require(payedOut_unchk21);\n        msg.sender.send(address(this).balance);\n    }\n673-function_definition-114-117", method="withdrawLeftOver_unchk21()", type_label=function_definition];
677 [label="114_ require(payedOut_unchk21);\n677-expression_statement-115-115", method="withdrawLeftOver_unchk21()", type_label=expression_statement];
682 [label="115_ msg.sender.send(address(this).balance);\n682-expression_statement-116-116", method="withdrawLeftOver_unchk21()", type_label=expression_statement];
695 [label="117_ string public name = \"Exclusive Platform\";\n695-new_variable-118-118", method="", type_label=new_variable];
702 [label="118_ function cash_unchk10(uint roundIndex, uint subpotIndex,address payable winner_unchk10) public{\n        uint64 subpot_unchk10 = 10 ether;\n        winner_unchk10.send(subpot_unchk10);   \n        subpot_unchk10= 0;\n}\n702-function_definition-119-123", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=function_definition];
718 [label="119_ uint64 subpot_unchk10 = 10 ether;\n718-new_variable-120-120", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=new_variable];
725 [label="120_ winner_unchk10.send(subpot_unchk10);\n725-expression_statement-121-121", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=expression_statement];
732 [label="121_ subpot_unchk10= 0;\n732-expression_statement-122-122", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=expression_statement];
736 [label="123_ string public symbol = \"XPL\";\n736-new_variable-124-124", method="", type_label=new_variable];
743 [label="124_ function my_func_unchk47(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n743-function_definition-125-127", method="my_func_unchk47(address payable dst)", type_label=function_definition];
752 [label="125_ dst.send(msg.value);\n752-expression_statement-126-126", method="my_func_unchk47(address payable dst)", type_label=expression_statement];
761 [label="127_ uint256 public decimals = 8;\n761-new_variable-128-128", method="", type_label=new_variable];
767 [label="128_ function cash_unchk22(uint roundIndex, uint subpotIndex, address payable winner_unchk22)public{\n        uint64 subpot_unchk22 = 10 ether;\n        winner_unchk22.send(subpot_unchk22);   \n        subpot_unchk22= 0;\n}\n767-function_definition-129-133", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=function_definition];
783 [label="129_ uint64 subpot_unchk22 = 10 ether;\n783-new_variable-130-130", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=new_variable];
790 [label="130_ winner_unchk22.send(subpot_unchk22);\n790-expression_statement-131-131", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
797 [label="131_ subpot_unchk22= 0;\n797-expression_statement-132-132", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
801 [label="133_ uint256 public _totalSupply;\n801-new_variable-134-134", method="", type_label=new_variable];
806 [label="134_ function my_func_uncheck12(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n806-function_definition-135-137", method="my_func_uncheck12(address payable dst)", type_label=function_definition];
815 [label="135_ dst.call.value(msg.value)(\"\");\n815-expression_statement-136-136", method="my_func_uncheck12(address payable dst)", type_label=expression_statement];
830 [label="137_ uint256 public XPLPerEther = 8000000e8;\n830-new_variable-138-138", method="", type_label=new_variable];
836 [label="138_ uint256 public minimumBuy = 1 ether / 100;\n836-new_variable-139-139", method="", type_label=new_variable];
845 [label="139_ function my_func_unchk11(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n845-function_definition-140-142", method="my_func_unchk11(address payable dst)", type_label=function_definition];
854 [label="140_ dst.send(msg.value);\n854-expression_statement-141-141", method="my_func_unchk11(address payable dst)", type_label=expression_statement];
863 [label="142_ bool public crowdsaleIsOn = true;\n863-new_variable-143-143", method="", type_label=new_variable];
870 [label="143_ modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n870-expression_statement-144-147", method="", type_label=expression_statement];
877 [label="144_ assert(msg.data.length >= size + 4);\n877-expression_statement-145-145", method="", type_label=expression_statement];
890 [label="145_ _;\n890-expression_statement-146-146", method="", type_label=expression_statement];
894 [label="148_ _totalSupply = 10000000000e8;\n894-expression_statement-149-149", method="", type_label=expression_statement];
898 [label="149_ balances[owner] = _totalSupply;\n898-expression_statement-150-150", method="", type_label=expression_statement];
914 [label="152_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n914-function_definition-153-154", method="bug_unchk3(address payable addr)", type_label=function_definition];
922 [label="153_ addr.send (42 ether);\n922-expression_statement-154-154", method="bug_unchk3(address payable addr)", type_label=expression_statement];
930 [label="154_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n930-function_definition-155-157", method="totalSupply()", type_label=function_definition];
939 [label="155_ return _totalSupply;\n939-return-156-156", method="totalSupply()", type_label=return];
941 [label="157_ bool public payedOut_unchk9 = false;\n941-new_variable-158-158", method="", type_label=new_variable];
948 [label="158_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n948-function_definition-159-162", method="withdrawLeftOver_unchk9()", type_label=function_definition];
952 [label="159_ require(payedOut_unchk9);\n952-expression_statement-160-160", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
957 [label="160_ msg.sender.send(address(this).balance);\n957-expression_statement-161-161", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
970 [label="162_ function updateXPLPerEther(uint _XPLPerEther) public onlyOwner {        \n        emit NewPrice(owner, XPLPerEther, _XPLPerEther);\n        XPLPerEther = _XPLPerEther;\n    }\n970-function_definition-163-166", method="updateXPLPerEther(uint _XPLPerEther)", type_label=function_definition];
977 [label="162_ onlyOwner\n977-expression_statement-163-163", method="updateXPLPerEther(uint _XPLPerEther)", type_label=expression_statement];
988 [label="164_ XPLPerEther = _XPLPerEther;\n988-expression_statement-165-165", method="updateXPLPerEther(uint _XPLPerEther)", type_label=expression_statement];
992 [label="166_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n992-function_definition-167-169", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
1000 [label="167_ callee.call.value(1 ether);\n1000-expression_statement-168-168", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
1010 [label="169_ function switchCrowdsale() public onlyOwner {\n        crowdsaleIsOn = !(crowdsaleIsOn);\n    }\n1010-function_definition-170-172", method="switchCrowdsale()", type_label=function_definition];
1013 [label="169_ onlyOwner\n1013-expression_statement-170-170", method="switchCrowdsale()", type_label=expression_statement];
1016 [label="170_ crowdsaleIsOn = !(crowdsaleIsOn);\n1016-expression_statement-171-171", method="switchCrowdsale()", type_label=expression_statement];
1022 [label="172_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n1022-function_definition-173-177", method="bug_unchk19()", type_label=function_definition];
1026 [label="173_ address payable addr_unchk19;\n1026-new_variable-174-174", method="bug_unchk19()", type_label=new_variable];
1031 [label="174_ if_!addr_unchk19.send (10 ether) || 1==1\n1031-if-175-176", method="bug_unchk19()", type_label=if];
3264 [label="174_ end_if", method="bug_unchk19()", type_label=end_if];
1047 [label="177_ function getBonus(uint256 _amount) internal view returns (uint256) {\n        if (_amount >= XPLPerEther.mul(5)) {\n            return ((20 * _amount).div(100)).add(_amount);  \n        } else if (_amount >= XPLPerEther) {\n            return ((5 * _amount).div(100)).add(_amount);  \n        }\n        return _amount;\n    }\n1047-function_definition-178-185", method="getBonus(uint256 _amount)", type_label=function_definition];
1060 [label="178_ if\n1060-if-179-183", method="getBonus(uint256 _amount)", type_label=if];
3293 [label="178_ end_if", method="getBonus(uint256 _amount)", type_label=end_if];
1070 [label="179_ return ((20 * _amount).div(100)).add(_amount);\n1070-return-180-180", method="getBonus(uint256 _amount)", type_label=return];
1086 [label="180_ if__amount >= XPLPerEther\n1086-if-181-183", method="getBonus(uint256 _amount)", type_label=if];
1091 [label="181_ return ((5 * _amount).div(100)).add(_amount);\n1091-return-182-182", method="getBonus(uint256 _amount)", type_label=return];
1107 [label="183_ return _amount;\n1107-return-184-184", method="getBonus(uint256 _amount)", type_label=return];
1109 [label="185_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n1109-function_definition-186-188", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
1117 [label="186_ callee.send(5 ether);\n1117-expression_statement-187-187", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
1129 [label="189_ require(crowdsaleIsOn && msg.value >= minimumBuy);\n1129-expression_statement-190-190", method="", type_label=expression_statement];
1140 [label="190_ uint256 totalBuy =  (XPLPerEther.mul(msg.value)).div(1 ether);\n1140-new_variable-191-191", method="", type_label=new_variable];
1160 [label="191_ totalBuy = getBonus(totalBuy);\n1160-expression_statement-192-192", method="", type_label=expression_statement];
1167 [label="192_ doTransfer(owner, msg.sender, totalBuy);\n1167-expression_statement-193-193", method="", type_label=expression_statement];
1178 [label="194_ bool public payedOut_unchk20 = false;\n1178-new_variable-195-195", method="", type_label=new_variable];
1185 [label="195_ address payable public winner_unchk20;\n1185-new_variable-196-196", method="", type_label=new_variable];
1190 [label="196_ uint public winAmount_unchk20;\n1190-new_variable-197-197", method="", type_label=new_variable];
1195 [label="197_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n1195-function_definition-198-202", method="sendToWinner_unchk20()", type_label=function_definition];
1199 [label="198_ require(!payedOut_unchk20);\n1199-expression_statement-199-199", method="sendToWinner_unchk20()", type_label=expression_statement];
1205 [label="199_ winner_unchk20.send(winAmount_unchk20);\n1205-expression_statement-200-200", method="sendToWinner_unchk20()", type_label=expression_statement];
1212 [label="200_ payedOut_unchk20 = true;\n1212-expression_statement-201-201", method="sendToWinner_unchk20()", type_label=expression_statement];
1217 [label="202_ function distribute(address[] calldata _addresses, uint256 _amount) external {        \n        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amount);}\n    }\n1217-function_definition-203-205", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=function_definition];
1230 [label="203_ for(i < _addresses.length;;i++)\n1230-for-204-204", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=for];
3463 [label="203_ end_loop", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=end_loop];
1243 [label="203_ i++\n1243-expression_statement-204-204", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=expression_statement];
1246 [label="203_ transfer(_addresses[i], _amount);\n1246-expression_statement-204-204", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=expression_statement];
1255 [label="205_ bool public payedOut_unchk32 = false;\n1255-new_variable-206-206", method="", type_label=new_variable];
1262 [label="206_ address payable public winner_unchk32;\n1262-new_variable-207-207", method="", type_label=new_variable];
1267 [label="207_ uint public winAmount_unchk32;\n1267-new_variable-208-208", method="", type_label=new_variable];
1272 [label="208_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n1272-function_definition-209-213", method="sendToWinner_unchk32()", type_label=function_definition];
1276 [label="209_ require(!payedOut_unchk32);\n1276-expression_statement-210-210", method="sendToWinner_unchk32()", type_label=expression_statement];
1282 [label="210_ winner_unchk32.send(winAmount_unchk32);\n1282-expression_statement-211-211", method="sendToWinner_unchk32()", type_label=expression_statement];
1289 [label="211_ payedOut_unchk32 = true;\n1289-expression_statement-212-212", method="sendToWinner_unchk32()", type_label=expression_statement];
1294 [label="213_ function distributeWithAmount(address[] calldata _addresses, uint256[] calldata _amounts) external {\n        require(_addresses.length == _amounts.length);\n        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amounts[i]);}\n    }\n1294-function_definition-214-217", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=function_definition];
1308 [label="214_ require(_addresses.length == _amounts.length);\n1308-expression_statement-215-215", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
1319 [label="215_ for(i < _addresses.length;;i++)\n1319-for-216-216", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=for];
3552 [label="215_ end_loop", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=end_loop];
1332 [label="215_ i++\n1332-expression_statement-216-216", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
1335 [label="215_ transfer(_addresses[i], _amounts[i]);\n1335-expression_statement-216-216", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
1346 [label="217_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n1346-function_definition-218-220", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
1354 [label="218_ callee.send(5 ether);\n1354-expression_statement-219-219", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
1362 [label="220_ function doTransfer(address _from, address _to, uint _amount) internal {\n        require((_to != address(0)));\n        require(_amount <= balances[_from]);\n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n    }\n1362-function_definition-221-227", method="doTransfer(address _from,address _to,uint _amount)", type_label=function_definition];
1378 [label="221_ require((_to != address(0)));\n1378-expression_statement-222-222", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1388 [label="222_ require(_amount <= balances[_from]);\n1388-expression_statement-223-223", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1397 [label="223_ balances[_from] = balances[_from].sub(_amount);\n1397-expression_statement-224-224", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1410 [label="224_ balances[_to] = balances[_to].add(_amount);\n1410-expression_statement-225-225", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1431 [label="227_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n1431-function_definition-228-232", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
1447 [label="228_ uint64 subpot_unchk46 = 3 ether;\n1447-new_variable-229-229", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
1454 [label="229_ winner_unchk46.send(subpot_unchk46);\n1454-expression_statement-230-230", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
1461 [label="230_ subpot_unchk46= 0;\n1461-expression_statement-231-231", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
1465 [label="232_ function balanceOf(address _owner) view public returns (uint256) {\n        return balances[_owner];\n    }\n1465-function_definition-233-235", method="balanceOf(address _owner)", type_label=function_definition];
1478 [label="233_ return balances[_owner];\n1478-return-234-234", method="balanceOf(address _owner)", type_label=return];
1482 [label="235_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1482-function_definition-236-244", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
1486 [label="236_ address payable addr_unchk4;\n1486-new_variable-237-237", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
1491 [label="237_ if\n1491-if-238-243", method="UncheckedExternalCall_unchk4()", type_label=if];
3724 [label="237_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
1502 [label="244_ function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        doTransfer(msg.sender, _to, _amount);\n        return true;\n    }\n1502-function_definition-245-248", method="transfer(address _to,uint256 _amount)", type_label=function_definition];
1512 [label="244_ onlyPayloadSize(2 * 32)\n1512-expression_statement-245-245", method="transfer(address _to,uint256 _amount)", type_label=expression_statement];
1525 [label="245_ doTransfer(msg.sender, _to, _amount);\n1525-expression_statement-246-246", method="transfer(address _to,uint256 _amount)", type_label=expression_statement];
1536 [label="246_ return true;\n1536-return-247-247", method="transfer(address _to,uint256 _amount)", type_label=return];
1539 [label="248_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n1539-function_definition-249-253", method="bug_unchk7()", type_label=function_definition];
1543 [label="249_ address payable addr_unchk7;\n1543-new_variable-250-250", method="bug_unchk7()", type_label=new_variable];
1548 [label="250_ if_!addr_unchk7.send (10 ether) || 1==1\n1548-if-251-252", method="bug_unchk7()", type_label=if];
3781 [label="250_ end_if", method="bug_unchk7()", type_label=end_if];
1564 [label="253_ function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(allowed[_from][msg.sender] >= _amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        doTransfer(_from, _to, _amount);\n        return true;\n    }\n1564-function_definition-254-259", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=function_definition];
1578 [label="253_ onlyPayloadSize(3 * 32)\n1578-expression_statement-254-254", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1591 [label="254_ require(allowed[_from][msg.sender] >= _amount);\n1591-expression_statement-255-255", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1604 [label="255_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n1604-expression_statement-256-256", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1625 [label="256_ doTransfer(_from, _to, _amount);\n1625-expression_statement-257-257", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1634 [label="257_ return true;\n1634-return-258-258", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=return];
1637 [label="259_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1637-function_definition-260-262", method="my_func_unchk23(address payable dst)", type_label=function_definition];
1646 [label="260_ dst.send(msg.value);\n1646-expression_statement-261-261", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
1655 [label="262_ function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n1655-function_definition-263-268", method="approve(address _spender,uint256 _amount)", type_label=function_definition];
1672 [label="263_ require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n1672-expression_statement-264-264", method="approve(address _spender,uint256 _amount)", type_label=expression_statement];
1691 [label="264_ allowed[msg.sender][_spender] = _amount;\n1691-expression_statement-265-265", method="approve(address _spender,uint256 _amount)", type_label=expression_statement];
1711 [label="266_ return true;\n1711-return-267-267", method="approve(address _spender,uint256 _amount)", type_label=return];
1714 [label="268_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n1714-function_definition-269-271", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
1722 [label="269_ callee.send(5 ether);\n1722-expression_statement-270-270", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
1730 [label="271_ function allowance(address _owner, address _spender) view public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n1730-function_definition-272-274", method="allowance(address _owner,address _spender)", type_label=function_definition];
1747 [label="272_ return allowed[_owner][_spender];\n1747-return-273-273", method="allowance(address _owner,address _spender)", type_label=return];
1753 [label="274_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n1753-function_definition-275-282", method="bug_unchk30()", type_label=function_definition];
1757 [label="275_ uint receivers_unchk30;\n1757-new_variable-276-276", method="bug_unchk30()", type_label=new_variable];
1762 [label="276_ address payable addr_unchk30;\n1762-new_variable-277-277", method="bug_unchk30()", type_label=new_variable];
1767 [label="277_ if\n1767-if-278-281", method="bug_unchk30()", type_label=if];
4000 [label="277_ end_if", method="bug_unchk30()", type_label=end_if];
1777 [label="278_ receivers_unchk30 +=1;\n1777-expression_statement-279-279", method="bug_unchk30()", type_label=expression_statement];
1784 [label="282_ function transferEther(address payable _receiver, uint256 _amount) public onlyOwner {\n        require(_amount <= address(this).balance);\n        emit TransferEther(address(this), _receiver, _amount);\n        _receiver.transfer(_amount);\n    }\n1784-function_definition-283-287", method="transferEther(address payable _receiver,uint256 _amount)", type_label=function_definition];
1795 [label="282_ onlyOwner\n1795-expression_statement-283-283", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
1798 [label="283_ require(_amount <= address(this).balance);\n1798-expression_statement-284-284", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
1819 [label="285_ _receiver.transfer(_amount);\n1819-expression_statement-286-286", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
1826 [label="287_ bool public payedOut_unchk8 = false;\n1826-new_variable-288-288", method="", type_label=new_variable];
1833 [label="288_ address payable public winner_unchk8;\n1833-new_variable-289-289", method="", type_label=new_variable];
1838 [label="289_ uint public winAmount_unchk8;\n1838-new_variable-290-290", method="", type_label=new_variable];
1843 [label="290_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n1843-function_definition-291-295", method="sendToWinner_unchk8()", type_label=function_definition];
1847 [label="291_ require(!payedOut_unchk8);\n1847-expression_statement-292-292", method="sendToWinner_unchk8()", type_label=expression_statement];
1853 [label="292_ winner_unchk8.send(winAmount_unchk8);\n1853-expression_statement-293-293", method="sendToWinner_unchk8()", type_label=expression_statement];
1860 [label="293_ payedOut_unchk8 = true;\n1860-expression_statement-294-294", method="sendToWinner_unchk8()", type_label=expression_statement];
1865 [label="295_ function withdrawFund() onlyOwner public {\n        uint256 balance = address(this).balance;\n        owner.transfer(balance);\n    }\n1865-function_definition-296-299", method="withdrawFund()", type_label=function_definition];
1867 [label="295_ onlyOwner\n1867-expression_statement-296-296", method="withdrawFund()", type_label=expression_statement];
1871 [label="296_ uint256 balance = address(this).balance;\n1871-new_variable-297-297", method="withdrawFund()", type_label=new_variable];
1881 [label="297_ owner.transfer(balance);\n1881-expression_statement-298-298", method="withdrawFund()", type_label=expression_statement];
1888 [label="299_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n1888-function_definition-300-301", method="bug_unchk39(address payable addr)", type_label=function_definition];
1896 [label="300_ addr.send (4 ether);\n1896-expression_statement-301-301", method="bug_unchk39(address payable addr)", type_label=expression_statement];
1904 [label="301_ function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }\n1904-function_definition-302-308", method="burn(uint256 _value)", type_label=function_definition];
1910 [label="301_ onlyOwner\n1910-expression_statement-302-302", method="burn(uint256 _value)", type_label=expression_statement];
1914 [label="302_ require(_value <= balances[msg.sender]);\n1914-expression_statement-303-303", method="burn(uint256 _value)", type_label=expression_statement];
1925 [label="303_ address burner = msg.sender;\n1925-new_variable-304-304", method="burn(uint256 _value)", type_label=new_variable];
1933 [label="304_ balances[burner] = balances[burner].sub(_value);\n1933-expression_statement-305-305", method="burn(uint256 _value)", type_label=expression_statement];
1946 [label="305_ _totalSupply = _totalSupply.sub(_value);\n1946-expression_statement-306-306", method="burn(uint256 _value)", type_label=expression_statement];
1961 [label="308_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1961-function_definition-309-311", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
1970 [label="309_ dst.call.value(msg.value)(\"\");\n1970-expression_statement-310-310", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
1985 [label="311_ function getForeignTokenBalance(address tokenAddress, address who) view public returns (uint){\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        uint bal = token.balanceOf(who);\n        return bal;\n    }\n1985-function_definition-312-316", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=function_definition];
2002 [label="312_ ERC20Interface token = ERC20Interface(tokenAddress);\n2002-new_variable-313-313", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=new_variable];
2012 [label="313_ uint bal = token.balanceOf(who);\n2012-new_variable-314-314", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=new_variable];
2023 [label="314_ return bal;\n2023-return-315-315", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=return];
2025 [label="316_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n2025-function_definition-317-319", method="my_func_unchk35(address payable dst)", type_label=function_definition];
2034 [label="317_ dst.send(msg.value);\n2034-expression_statement-318-318", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
2043 [label="319_ function withdrawForeignTokens(address tokenAddress) onlyOwner public returns (bool) {\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n2043-function_definition-320-324", method="withdrawForeignTokens(address tokenAddress)", type_label=function_definition];
2049 [label="319_ onlyOwner\n2049-expression_statement-320-320", method="withdrawForeignTokens(address tokenAddress)", type_label=expression_statement];
2057 [label="320_ ERC20Interface token = ERC20Interface(tokenAddress);\n2057-new_variable-321-321", method="withdrawForeignTokens(address tokenAddress)", type_label=new_variable];
2067 [label="321_ uint256 amount = token.balanceOf(address(this));\n2067-new_variable-322-322", method="withdrawForeignTokens(address tokenAddress)", type_label=new_variable];
2080 [label="322_ return token.transfer(owner, amount);\n2080-return-323-323", method="withdrawForeignTokens(address tokenAddress)", type_label=return];
2089 [label="324_ bool public payedOut_unchk44 = false;\n2089-new_variable-325-325", method="", type_label=new_variable];
2096 [label="325_ address payable public winner_unchk44;\n2096-new_variable-326-326", method="", type_label=new_variable];
2101 [label="326_ uint public winAmount_unchk44;\n2101-new_variable-327-327", method="", type_label=new_variable];
2106 [label="327_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n2106-function_definition-328-332", method="sendToWinner_unchk44()", type_label=function_definition];
2110 [label="328_ require(!payedOut_unchk44);\n2110-expression_statement-329-329", method="sendToWinner_unchk44()", type_label=expression_statement];
2116 [label="329_ winner_unchk44.send(winAmount_unchk44);\n2116-expression_statement-330-330", method="sendToWinner_unchk44()", type_label=expression_statement];
2123 [label="330_ payedOut_unchk44 = true;\n2123-expression_statement-331-331", method="sendToWinner_unchk44()", type_label=expression_statement];
2128 [label="332_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n2128-function_definition-333-337", method="bug_unchk31()", type_label=function_definition];
2132 [label="333_ address payable addr_unchk31;\n2132-new_variable-334-334", method="bug_unchk31()", type_label=new_variable];
2137 [label="334_ if_!addr_unchk31.send (10 ether) || 1==1\n2137-if-335-336", method="bug_unchk31()", type_label=if];
4370 [label="334_ end_if", method="bug_unchk31()", type_label=end_if];
2167 [label="338_ bool public payedOut_unchk45 = false;\n2167-new_variable-339-339", method="", type_label=new_variable];
2174 [label="339_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n2174-function_definition-340-343", method="withdrawLeftOver_unchk45()", type_label=function_definition];
2178 [label="340_ require(payedOut_unchk45);\n2178-expression_statement-341-341", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
2183 [label="341_ msg.sender.send(address(this).balance);\n2183-expression_statement-342-342", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
2210 [label="344_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n2210-function_definition-345-347", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
2218 [label="345_ callee.call.value(1 ether);\n2218-expression_statement-346-346", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
250;
388;
617;
1501;
1782;
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
221 -> 225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 245  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2468 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 2468  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
268 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 2542  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
345 -> 354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
526 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
566 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
767 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
790 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
894 -> 898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
948 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1010 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1022 -> 1026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1026 -> 1031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 3264  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1047 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1060 -> 1070  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1060 -> 1086  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3293 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1070 -> 3293  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1070 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1086 -> 1091  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1086 -> 3293  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1091 -> 3293  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1091 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1107 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1109 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1140 -> 1160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1178 -> 1185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1185 -> 1190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1205 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1217 -> 1230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1230 -> 1246  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1230 -> 3463  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3463 -> 1255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1243 -> 1230  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1246 -> 1243  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1255 -> 1262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1262 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1272 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1282 -> 1289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1294 -> 1308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1308 -> 1319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1319 -> 1335  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1319 -> 3552  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3552 -> 1346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 1319  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1335 -> 1332  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1346 -> 1354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1362 -> 1378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 1388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1388 -> 1397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1397 -> 1410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1431 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 1454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1454 -> 1461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1478 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1482 -> 1486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 1491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1502 -> 1525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1525 -> 1536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1536 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1539 -> 1543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1543 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1548 -> 3781  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1564 -> 1591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1591 -> 1604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1604 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 1634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1634 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1637 -> 1646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1655 -> 1672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1672 -> 1691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1711 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1714 -> 1722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1730 -> 1747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1747 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1753 -> 1757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1757 -> 1762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1762 -> 1767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1767 -> 1777  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4000 -> 1784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1777 -> 4000  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1784 -> 1798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1826 -> 1833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1833 -> 1838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1843 -> 1847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1847 -> 1853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1853 -> 1860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1865 -> 1871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1871 -> 1881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1888 -> 1896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1904 -> 1914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1914 -> 1925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1925 -> 1933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1933 -> 1946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1961 -> 1970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1985 -> 2002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2002 -> 2012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2012 -> 2023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2023 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2025 -> 2034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2043 -> 2057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2057 -> 2067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2067 -> 2080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2080 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2089 -> 2096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2096 -> 2101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2106 -> 2110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2110 -> 2116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2116 -> 2123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2128 -> 2132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2132 -> 2137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2137 -> 4370  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2174 -> 2178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2178 -> 2183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2210 -> 2218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 2468  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
388 -> 2611  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
617 -> 2840  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1501 -> 3724  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1782 -> 4000  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
