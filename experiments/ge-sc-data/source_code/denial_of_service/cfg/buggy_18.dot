digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns(uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns(uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns(uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns(uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function limitLessThan(uint a, uint b) internal pure returns(uint c) {\n        if (a > b) return b;\n        return a;\n    }\n146-function_definition-21-24", method="limitLessThan(uint a,uint b)", type_label=function_definition];
164 [label="21_ if_a > b\n164-if-22-22", method="limitLessThan(uint a,uint b)", type_label=if];
2938 [label="21_ end_if", method="limitLessThan(uint a,uint b)", type_label=end_if];
168 [label="21_ return b;\n168-return-22-22", method="limitLessThan(uint a,uint b)", type_label=return];
170 [label="22_ return a;\n170-return-23-23", method="limitLessThan(uint a,uint b)", type_label=return];
175 [label="26_ function totalSupply() public view returns(uint);\n175-function_definition-27-27", method="totalSupply()", type_label=function_definition];
183 [label="27_ function callnotchecked_unchk1(address payable callee) public {\n    callee.call.value(2 ether);\n  }\n183-function_definition-28-30", method="callnotchecked_unchk1(address payable callee)", type_label=function_definition];
191 [label="28_ callee.call.value(2 ether);\n191-expression_statement-29-29", method="callnotchecked_unchk1(address payable callee)", type_label=expression_statement];
201 [label="30_ function balanceOf(address tokenOwner) public view returns(uint balance);\n201-function_definition-31-31", method="balanceOf(address tokenOwner)", type_label=function_definition];
214 [label="31_ function withdrawBal_unchk41 () public{\n	uint64 Balances_unchk41 = 0;\n	msg.sender.send(Balances_unchk41);}\n214-function_definition-32-34", method="withdrawBal_unchk41()", type_label=function_definition];
218 [label="32_ uint64 Balances_unchk41 = 0;\n218-new_variable-33-33", method="withdrawBal_unchk41()", type_label=new_variable];
224 [label="33_ msg.sender.send(Balances_unchk41);\n224-expression_statement-34-34", method="withdrawBal_unchk41()", type_label=expression_statement];
233 [label="34_ function allowance(address tokenOwner, address spender) public view returns(uint remaining);\n233-function_definition-35-35", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
250 [label="35_ function bug_unchk42() public{\nuint receivers_unchk42;\naddress payable addr_unchk42;\nif (!addr_unchk42.send(42 ether))\n	{receivers_unchk42 +=1;}\nelse\n	{revert();}\n}\n250-function_definition-36-43", method="bug_unchk42()", type_label=function_definition];
254 [label="36_ uint receivers_unchk42;\n254-new_variable-37-37", method="bug_unchk42()", type_label=new_variable];
259 [label="37_ address payable addr_unchk42;\n259-new_variable-38-38", method="bug_unchk42()", type_label=new_variable];
264 [label="38_ if\n264-if-39-42", method="bug_unchk42()", type_label=if];
3038 [label="38_ end_if", method="bug_unchk42()", type_label=end_if];
274 [label="39_ receivers_unchk42 +=1;\n274-expression_statement-40-40", method="bug_unchk42()", type_label=expression_statement];
281 [label="43_ function transfer(address to, uint tokens) public returns(bool success);\n281-function_definition-44-44", method="transfer(address to,uint tokens)", type_label=function_definition];
297 [label="44_ function unhandledsend_unchk2(address payable callee) public {\n    callee.send(5 ether);\n  }\n297-function_definition-45-47", method="unhandledsend_unchk2(address payable callee)", type_label=function_definition];
305 [label="45_ callee.send(5 ether);\n305-expression_statement-46-46", method="unhandledsend_unchk2(address payable callee)", type_label=expression_statement];
313 [label="47_ function approve(address spender, uint tokens) public returns(bool success);\n313-function_definition-48-48", method="approve(address spender,uint tokens)", type_label=function_definition];
329 [label="48_ function bug_unchk43() public{\naddress payable addr_unchk43;\nif (!addr_unchk43.send (10 ether) || 1==1)\n	{revert();}\n}\n329-function_definition-49-53", method="bug_unchk43()", type_label=function_definition];
333 [label="49_ address payable addr_unchk43;\n333-new_variable-50-50", method="bug_unchk43()", type_label=new_variable];
338 [label="50_ if_!addr_unchk43.send (10 ether) || 1==1\n338-if-51-52", method="bug_unchk43()", type_label=if];
3112 [label="50_ end_if", method="bug_unchk43()", type_label=end_if];
354 [label="53_ function transferFrom(address from, address to, uint tokens) public returns(bool success);\n354-function_definition-54-54", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
374 [label="54_ function my_func_uncheck48(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n374-function_definition-55-57", method="my_func_uncheck48(address payable dst)", type_label=function_definition];
383 [label="55_ dst.call.value(msg.value)(\"\");\n383-expression_statement-56-56", method="my_func_uncheck48(address payable dst)", type_label=expression_statement];
398 [label="57_ function bug_unchk27(address payable addr) public\n      {addr.send (42 ether); }\n398-function_definition-58-59", method="bug_unchk27(address payable addr)", type_label=function_definition];
406 [label="58_ addr.send (42 ether);\n406-expression_statement-59-59", method="bug_unchk27(address payable addr)", type_label=expression_statement];
428 [label="60_ function bug_unchk31() public{\naddress payable addr_unchk31;\nif (!addr_unchk31.send (10 ether) || 1==1)\n	{revert();}\n}\n428-function_definition-61-65", method="bug_unchk31()", type_label=function_definition];
432 [label="61_ address payable addr_unchk31;\n432-new_variable-62-62", method="bug_unchk31()", type_label=new_variable];
437 [label="62_ if_!addr_unchk31.send (10 ether) || 1==1\n437-if-63-64", method="bug_unchk31()", type_label=if];
3211 [label="62_ end_if", method="bug_unchk31()", type_label=end_if];
470 [label="68_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n470-function_definition-69-69", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
489 [label="69_ function withdrawBal_unchk17 () public{\n	uint64 Balances_unchk17 = 0;\n	msg.sender.send(Balances_unchk17);}\n489-function_definition-70-72", method="withdrawBal_unchk17()", type_label=function_definition];
493 [label="70_ uint64 Balances_unchk17 = 0;\n493-new_variable-71-71", method="withdrawBal_unchk17()", type_label=new_variable];
499 [label="71_ msg.sender.send(Balances_unchk17);\n499-expression_statement-72-72", method="withdrawBal_unchk17()", type_label=expression_statement];
511 [label="74_ address public owner;\n511-new_variable-75-75", method="", type_label=new_variable];
516 [label="75_ address public newOwner;\n516-new_variable-76-76", method="", type_label=new_variable];
521 [label="76_ bool public payedOut_unchk45 = false;\n521-new_variable-77-77", method="", type_label=new_variable];
528 [label="77_ function withdrawLeftOver_unchk45() public {\n        require(payedOut_unchk45);\n        msg.sender.send(address(this).balance);\n    }\n528-function_definition-78-81", method="withdrawLeftOver_unchk45()", type_label=function_definition];
532 [label="78_ require(payedOut_unchk45);\n532-expression_statement-79-79", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
537 [label="79_ msg.sender.send(address(this).balance);\n537-expression_statement-80-80", method="withdrawLeftOver_unchk45()", type_label=expression_statement];
562 [label="83_ owner = msg.sender;\n562-expression_statement-84-84", method="", type_label=expression_statement];
568 [label="85_ function callnotchecked_unchk37(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n568-function_definition-86-88", method="callnotchecked_unchk37(address payable callee)", type_label=function_definition];
576 [label="86_ callee.call.value(1 ether);\n576-expression_statement-87-87", method="callnotchecked_unchk37(address payable callee)", type_label=expression_statement];
586 [label="88_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n586-expression_statement-89-92", method="", type_label=expression_statement];
589 [label="89_ require(msg.sender == owner);\n589-expression_statement-90-90", method="", type_label=expression_statement];
598 [label="90_ _;\n598-expression_statement-91-91", method="", type_label=expression_statement];
600 [label="92_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n600-function_definition-93-95", method="transferOwnership(address _newOwner)", type_label=function_definition];
607 [label="92_ onlyOwner\n607-expression_statement-93-93", method="transferOwnership(address _newOwner)", type_label=expression_statement];
610 [label="93_ newOwner = _newOwner;\n610-expression_statement-94-94", method="transferOwnership(address _newOwner)", type_label=expression_statement];
614 [label="95_ function bug_unchk3(address payable addr) public\n      {addr.send (42 ether); }\n614-function_definition-96-97", method="bug_unchk3(address payable addr)", type_label=function_definition];
622 [label="96_ addr.send (42 ether);\n622-expression_statement-97-97", method="bug_unchk3(address payable addr)", type_label=expression_statement];
630 [label="97_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n630-function_definition-98-103", method="acceptOwnership()", type_label=function_definition];
634 [label="98_ require(msg.sender == newOwner);\n634-expression_statement-99-99", method="acceptOwnership()", type_label=expression_statement];
649 [label="100_ owner = newOwner;\n649-expression_statement-101-101", method="acceptOwnership()", type_label=expression_statement];
653 [label="101_ newOwner = address(0);\n653-expression_statement-102-102", method="acceptOwnership()", type_label=expression_statement];
659 [label="103_ bool public payedOut_unchk9 = false;\n659-new_variable-104-104", method="", type_label=new_variable];
666 [label="104_ function withdrawLeftOver_unchk9() public {\n        require(payedOut_unchk9);\n        msg.sender.send(address(this).balance);\n    }\n666-function_definition-105-108", method="withdrawLeftOver_unchk9()", type_label=function_definition];
670 [label="105_ require(payedOut_unchk9);\n670-expression_statement-106-106", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
675 [label="106_ msg.sender.send(address(this).balance);\n675-expression_statement-107-107", method="withdrawLeftOver_unchk9()", type_label=expression_statement];
707 [label="112_ string public symbol;\n707-new_variable-113-113", method="", type_label=new_variable];
712 [label="113_ string public name;\n712-new_variable-114-114", method="", type_label=new_variable];
717 [label="114_ uint8 public decimals;\n717-new_variable-115-115", method="", type_label=new_variable];
722 [label="115_ uint public _totalSupply;\n722-new_variable-116-116", method="", type_label=new_variable];
727 [label="116_ uint public latestDifficultyPeriodStarted;\n727-new_variable-117-117", method="", type_label=new_variable];
732 [label="117_ function bug_unchk18() public{\nuint receivers_unchk18;\naddress payable addr_unchk18;\nif (!addr_unchk18.send(42 ether))\n	{receivers_unchk18 +=1;}\nelse\n	{revert();}\n}\n732-function_definition-118-125", method="bug_unchk18()", type_label=function_definition];
736 [label="118_ uint receivers_unchk18;\n736-new_variable-119-119", method="bug_unchk18()", type_label=new_variable];
741 [label="119_ address payable addr_unchk18;\n741-new_variable-120-120", method="bug_unchk18()", type_label=new_variable];
746 [label="120_ if\n746-if-121-124", method="bug_unchk18()", type_label=if];
3520 [label="120_ end_if", method="bug_unchk18()", type_label=end_if];
756 [label="121_ receivers_unchk18 +=1;\n756-expression_statement-122-122", method="bug_unchk18()", type_label=expression_statement];
763 [label="125_ uint public epochCount;\n763-new_variable-126-126", method="", type_label=new_variable];
768 [label="126_ function withdrawBal_unchk29 () public{\n	uint Balances_unchk29 = 0;\n	msg.sender.send(Balances_unchk29);}\n768-function_definition-127-129", method="withdrawBal_unchk29()", type_label=function_definition];
772 [label="127_ uint Balances_unchk29 = 0;\n772-new_variable-128-128", method="withdrawBal_unchk29()", type_label=new_variable];
778 [label="128_ msg.sender.send(Balances_unchk29);\n778-expression_statement-129-129", method="withdrawBal_unchk29()", type_label=expression_statement];
787 [label="129_ uint public _BLOCKS_PER_READJUSTMENT = 1024;\n787-new_variable-130-130", method="", type_label=new_variable];
793 [label="130_ uint public _MINIMUM_TARGET = 2 ** 16;\n793-new_variable-131-131", method="", type_label=new_variable];
801 [label="131_ uint public _MAXIMUM_TARGET = 2 ** 234;\n801-new_variable-132-132", method="", type_label=new_variable];
809 [label="132_ function bug_unchk6() public{\nuint receivers_unchk6;\naddress payable addr_unchk6;\nif (!addr_unchk6.send(42 ether))\n	{receivers_unchk6 +=1;}\nelse\n	{revert();}\n}\n809-function_definition-133-140", method="bug_unchk6()", type_label=function_definition];
813 [label="133_ uint receivers_unchk6;\n813-new_variable-134-134", method="bug_unchk6()", type_label=new_variable];
818 [label="134_ address payable addr_unchk6;\n818-new_variable-135-135", method="bug_unchk6()", type_label=new_variable];
823 [label="135_ if\n823-if-136-139", method="bug_unchk6()", type_label=if];
3597 [label="135_ end_if", method="bug_unchk6()", type_label=end_if];
833 [label="136_ receivers_unchk6 +=1;\n833-expression_statement-137-137", method="bug_unchk6()", type_label=expression_statement];
840 [label="140_ uint public miningTarget;\n840-new_variable-141-141", method="", type_label=new_variable];
845 [label="141_ function UncheckedExternalCall_unchk16 () public\n{  address payable addr_unchk16;\n   if (! addr_unchk16.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n845-function_definition-142-150", method="UncheckedExternalCall_unchk16()", type_label=function_definition];
849 [label="142_ address payable addr_unchk16;\n849-new_variable-143-143", method="UncheckedExternalCall_unchk16()", type_label=new_variable];
854 [label="143_ if\n854-if-144-149", method="UncheckedExternalCall_unchk16()", type_label=if];
3628 [label="143_ end_if", method="UncheckedExternalCall_unchk16()", type_label=end_if];
865 [label="150_ bytes32 public challengeNumber;\n865-new_variable-151-151", method="", type_label=new_variable];
870 [label="151_ function my_func_uncheck24(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n870-function_definition-152-154", method="my_func_uncheck24(address payable dst)", type_label=function_definition];
879 [label="152_ dst.call.value(msg.value)(\"\");\n879-expression_statement-153-153", method="my_func_uncheck24(address payable dst)", type_label=expression_statement];
894 [label="154_ uint public rewardEra;\n894-new_variable-155-155", method="", type_label=new_variable];
899 [label="155_ function withdrawBal_unchk5 () public{\n	uint64 Balances_unchk5 = 0;\n	msg.sender.send(Balances_unchk5);}\n899-function_definition-156-158", method="withdrawBal_unchk5()", type_label=function_definition];
903 [label="156_ uint64 Balances_unchk5 = 0;\n903-new_variable-157-157", method="withdrawBal_unchk5()", type_label=new_variable];
909 [label="157_ msg.sender.send(Balances_unchk5);\n909-expression_statement-158-158", method="withdrawBal_unchk5()", type_label=expression_statement];
918 [label="158_ uint public maxSupplyForEra;\n918-new_variable-159-159", method="", type_label=new_variable];
923 [label="159_ function bug_unchk15(address payable addr) public\n      {addr.send (42 ether); }\n923-function_definition-160-161", method="bug_unchk15(address payable addr)", type_label=function_definition];
931 [label="160_ addr.send (42 ether);\n931-expression_statement-161-161", method="bug_unchk15(address payable addr)", type_label=expression_statement];
939 [label="161_ address public lastRewardTo;\n939-new_variable-162-162", method="", type_label=new_variable];
944 [label="162_ function UncheckedExternalCall_unchk28 () public\n{  address payable addr_unchk28;\n   if (! addr_unchk28.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n944-function_definition-163-171", method="UncheckedExternalCall_unchk28()", type_label=function_definition];
948 [label="163_ address payable addr_unchk28;\n948-new_variable-164-164", method="UncheckedExternalCall_unchk28()", type_label=new_variable];
953 [label="164_ if\n953-if-165-170", method="UncheckedExternalCall_unchk28()", type_label=if];
3727 [label="164_ end_if", method="UncheckedExternalCall_unchk28()", type_label=end_if];
964 [label="171_ uint public lastRewardAmount;\n964-new_variable-172-172", method="", type_label=new_variable];
969 [label="172_ function cash_unchk34(uint roundIndex, uint subpotIndex, address payable winner_unchk34) public{\n        uint64 subpot_unchk34 = 10 ether;\n        winner_unchk34.send(subpot_unchk34);   \n        subpot_unchk34= 0;\n}\n969-function_definition-173-177", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=function_definition];
985 [label="173_ uint64 subpot_unchk34 = 10 ether;\n985-new_variable-174-174", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=new_variable];
992 [label="174_ winner_unchk34.send(subpot_unchk34);\n992-expression_statement-175-175", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=expression_statement];
999 [label="175_ subpot_unchk34= 0;\n999-expression_statement-176-176", method="cash_unchk34(uint roundIndex,uint subpotIndex,address payable winner_unchk34)", type_label=expression_statement];
1003 [label="177_ uint public lastRewardEthBlockNumber;\n1003-new_variable-178-178", method="", type_label=new_variable];
1008 [label="178_ bool public payedOut_unchk21 = false;\n1008-new_variable-179-179", method="", type_label=new_variable];
1015 [label="179_ function withdrawLeftOver_unchk21() public {\n        require(payedOut_unchk21);\n        msg.sender.send(address(this).balance);\n    }\n1015-function_definition-180-183", method="withdrawLeftOver_unchk21()", type_label=function_definition];
1019 [label="180_ require(payedOut_unchk21);\n1019-expression_statement-181-181", method="withdrawLeftOver_unchk21()", type_label=expression_statement];
1024 [label="181_ msg.sender.send(address(this).balance);\n1024-expression_statement-182-182", method="withdrawLeftOver_unchk21()", type_label=expression_statement];
1037 [label="183_ bool locked = false;\n1037-new_variable-184-184", method="", type_label=new_variable];
1043 [label="184_ function cash_unchk10(uint roundIndex, uint subpotIndex,address payable winner_unchk10) public{\n        uint64 subpot_unchk10 = 10 ether;\n        winner_unchk10.send(subpot_unchk10);   \n        subpot_unchk10= 0;\n}\n1043-function_definition-185-189", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=function_definition];
1059 [label="185_ uint64 subpot_unchk10 = 10 ether;\n1059-new_variable-186-186", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=new_variable];
1066 [label="186_ winner_unchk10.send(subpot_unchk10);\n1066-expression_statement-187-187", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=expression_statement];
1073 [label="187_ subpot_unchk10= 0;\n1073-expression_statement-188-188", method="cash_unchk10(uint roundIndex,uint subpotIndex,address payable winner_unchk10)", type_label=expression_statement];
1077 [label="189_ mapping(bytes32 => bytes32) solutionForChallenge;\n1077-new_variable-190-190", method="", type_label=new_variable];
1083 [label="190_ function my_func_unchk47(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1083-function_definition-191-193", method="my_func_unchk47(address payable dst)", type_label=function_definition];
1092 [label="191_ dst.send(msg.value);\n1092-expression_statement-192-192", method="my_func_unchk47(address payable dst)", type_label=expression_statement];
1101 [label="193_ uint public tokensMinted;\n1101-new_variable-194-194", method="", type_label=new_variable];
1106 [label="194_ function cash_unchk22(uint roundIndex, uint subpotIndex, address payable winner_unchk22)public{\n        uint64 subpot_unchk22 = 10 ether;\n        winner_unchk22.send(subpot_unchk22);   \n        subpot_unchk22= 0;\n}\n1106-function_definition-195-199", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=function_definition];
1122 [label="195_ uint64 subpot_unchk22 = 10 ether;\n1122-new_variable-196-196", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=new_variable];
1129 [label="196_ winner_unchk22.send(subpot_unchk22);\n1129-expression_statement-197-197", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
1136 [label="197_ subpot_unchk22= 0;\n1136-expression_statement-198-198", method="cash_unchk22(uint roundIndex,uint subpotIndex,address payable winner_unchk22)", type_label=expression_statement];
1140 [label="199_ mapping(address => uint) balances;\n1140-new_variable-200-200", method="", type_label=new_variable];
1146 [label="200_ function my_func_uncheck12(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n1146-function_definition-201-203", method="my_func_uncheck12(address payable dst)", type_label=function_definition];
1155 [label="201_ dst.call.value(msg.value)(\"\");\n1155-expression_statement-202-202", method="my_func_uncheck12(address payable dst)", type_label=expression_statement];
1170 [label="203_ mapping(address => mapping(address => uint)) allowed;\n1170-new_variable-204-204", method="", type_label=new_variable];
1178 [label="204_ function my_func_unchk11(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n1178-function_definition-205-207", method="my_func_unchk11(address payable dst)", type_label=function_definition];
1187 [label="205_ dst.send(msg.value);\n1187-expression_statement-206-206", method="my_func_unchk11(address payable dst)", type_label=expression_statement];
1196 [label="207_ uint public burnPercent;\n1196-new_variable-208-208", method="", type_label=new_variable];
1201 [label="208_ function callnotchecked_unchk13(address callee) public {\n    callee.call.value(1 ether);\n  }\n1201-function_definition-209-211", method="callnotchecked_unchk13(address callee)", type_label=function_definition];
1209 [label="209_ callee.call.value(1 ether);\n1209-expression_statement-210-210", method="callnotchecked_unchk13(address callee)", type_label=expression_statement];
1238 [label="212_ onlyOwner\n1238-expression_statement-213-213", method="", type_label=expression_statement];
1241 [label="213_ symbol = \"YESBUZ\";\n1241-expression_statement-214-214", method="", type_label=expression_statement];
1246 [label="214_ name = \"Yesbuzz\";\n1246-expression_statement-215-215", method="", type_label=expression_statement];
1251 [label="215_ decimals = 8;\n1251-expression_statement-216-216", method="", type_label=expression_statement];
1255 [label="216_ _totalSupply = 21000000 * 10 ** uint(decimals);\n1255-expression_statement-217-217", method="", type_label=expression_statement];
1265 [label="217_ if\n1265-if-218-218", method="", type_label=if];
4039 [label="217_ end_if", method="", type_label=end_if];
1269 [label="218_ locked = true;\n1269-expression_statement-219-219", method="", type_label=expression_statement];
1274 [label="219_ tokensMinted = 0;\n1274-expression_statement-220-220", method="", type_label=expression_statement];
1278 [label="220_ rewardEra = 0;\n1278-expression_statement-221-221", method="", type_label=expression_statement];
1282 [label="221_ maxSupplyForEra = _totalSupply.div(2);\n1282-expression_statement-222-222", method="", type_label=expression_statement];
1291 [label="222_ miningTarget = _MAXIMUM_TARGET;\n1291-expression_statement-223-223", method="", type_label=expression_statement];
1295 [label="223_ latestDifficultyPeriodStarted = block.number;\n1295-expression_statement-224-224", method="", type_label=expression_statement];
1301 [label="224_ burnPercent = 10;\n1301-expression_statement-225-225", method="", type_label=expression_statement];
1305 [label="225_ _startNewMiningEpoch();\n1305-expression_statement-226-226", method="", type_label=expression_statement];
1308 [label="227_ function callnotchecked_unchk25(address payable callee) public {\n    callee.call.value(1 ether);\n  }\n1308-function_definition-228-230", method="callnotchecked_unchk25(address payable callee)", type_label=function_definition];
1316 [label="228_ callee.call.value(1 ether);\n1316-expression_statement-229-229", method="callnotchecked_unchk25(address payable callee)", type_label=expression_statement];
1326 [label="230_ function mint(uint256 nonce, bytes32 challenge_digest) public returns(bool success) {\n        bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\n        if (digest != challenge_digest) revert();\n        if (uint256(digest) > miningTarget) revert();\n        bytes32 solution = solutionForChallenge[challengeNumber];\n        solutionForChallenge[challengeNumber] = digest;\n        if (solution != 0x0) revert();  \n        uint reward_amount = getMiningReward();\n        balances[msg.sender] = balances[msg.sender].add(reward_amount);\n        tokensMinted = tokensMinted.add(reward_amount);\n        assert(tokensMinted <= maxSupplyForEra);\n        lastRewardTo = msg.sender;\n        lastRewardAmount = reward_amount;\n        lastRewardEthBlockNumber = block.number;\n        _startNewMiningEpoch();\n        emit Mint(msg.sender, reward_amount, epochCount, challengeNumber);\n        return true;\n    }\n1326-function_definition-231-248", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=function_definition];
1343 [label="231_ bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\n1343-new_variable-232-232", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
1363 [label="232_ if_digest != challenge_digest\n1363-if-233-233", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
4137 [label="232_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
1369 [label="233_ if_uint256(digest) > miningTarget\n1369-if-234-234", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
4143 [label="233_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
1377 [label="234_ bytes32 solution = solutionForChallenge[challengeNumber];\n1377-new_variable-235-235", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
1385 [label="235_ solutionForChallenge[challengeNumber] = digest;\n1385-expression_statement-236-236", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1391 [label="236_ if_solution != 0x0\n1391-if-237-237", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
4165 [label="236_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
1397 [label="237_ uint reward_amount = getMiningReward();\n1397-new_variable-238-238", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
1404 [label="238_ balances[msg.sender] = balances[msg.sender].add(reward_amount);\n1404-expression_statement-239-239", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1421 [label="239_ tokensMinted = tokensMinted.add(reward_amount);\n1421-expression_statement-240-240", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1430 [label="240_ assert(tokensMinted <= maxSupplyForEra);\n1430-expression_statement-241-241", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1437 [label="241_ lastRewardTo = msg.sender;\n1437-expression_statement-242-242", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1443 [label="242_ lastRewardAmount = reward_amount;\n1443-expression_statement-243-243", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1447 [label="243_ lastRewardEthBlockNumber = block.number;\n1447-expression_statement-244-244", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1453 [label="244_ _startNewMiningEpoch();\n1453-expression_statement-245-245", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1468 [label="246_ return true;\n1468-return-247-247", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=return];
1471 [label="248_ function bug_unchk19() public{\naddress payable addr_unchk19;\nif (!addr_unchk19.send (10 ether) || 1==1)\n	{revert();}\n}\n1471-function_definition-249-253", method="bug_unchk19()", type_label=function_definition];
1475 [label="249_ address payable addr_unchk19;\n1475-new_variable-250-250", method="bug_unchk19()", type_label=new_variable];
1480 [label="250_ if_!addr_unchk19.send (10 ether) || 1==1\n1480-if-251-252", method="bug_unchk19()", type_label=if];
4254 [label="250_ end_if", method="bug_unchk19()", type_label=end_if];
1496 [label="253_ function _startNewMiningEpoch() internal {\n        if (tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39) {\n            rewardEra = rewardEra + 1;\n        }\n        maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));\n        epochCount = epochCount.add(1);\n        if (epochCount % _BLOCKS_PER_READJUSTMENT == 0) {\n            _reAdjustDifficulty();\n        }\n        challengeNumber = blockhash(block.number - 1);\n    }\n1496-function_definition-254-264", method="_startNewMiningEpoch()", type_label=function_definition];
1500 [label="254_ if_tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39\n1500-if-255-257", method="_startNewMiningEpoch()", type_label=if];
4274 [label="254_ end_if", method="_startNewMiningEpoch()", type_label=end_if];
1515 [label="255_ rewardEra = rewardEra + 1;\n1515-expression_statement-256-256", method="_startNewMiningEpoch()", type_label=expression_statement];
1521 [label="257_ maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));\n1521-expression_statement-258-258", method="_startNewMiningEpoch()", type_label=expression_statement];
1537 [label="258_ epochCount = epochCount.add(1);\n1537-expression_statement-259-259", method="_startNewMiningEpoch()", type_label=expression_statement];
1546 [label="259_ if_epochCount % _BLOCKS_PER_READJUSTMENT == 0\n1546-if-260-262", method="_startNewMiningEpoch()", type_label=if];
4320 [label="259_ end_if", method="_startNewMiningEpoch()", type_label=end_if];
1553 [label="260_ _reAdjustDifficulty();\n1553-expression_statement-261-261", method="_startNewMiningEpoch()", type_label=expression_statement];
1556 [label="262_ challengeNumber = blockhash(block.number - 1);\n1556-expression_statement-263-263", method="_startNewMiningEpoch()", type_label=expression_statement];
1567 [label="264_ function unhandledsend_unchk26(address payable callee) public {\n    callee.send(5 ether);\n  }\n1567-function_definition-265-267", method="unhandledsend_unchk26(address payable callee)", type_label=function_definition];
1575 [label="265_ callee.send(5 ether);\n1575-expression_statement-266-266", method="unhandledsend_unchk26(address payable callee)", type_label=expression_statement];
1583 [label="267_ function _reAdjustDifficulty() internal {\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT;  \n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60;  \n        if (ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod) {\n            uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n            uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n            miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));  \n        } else {\n            uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n            uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);  \n            miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));  \n        }\n        latestDifficultyPeriodStarted = block.number;\n        if (miningTarget < _MINIMUM_TARGET)  \n        {\n            miningTarget = _MINIMUM_TARGET;\n        }\n        if (miningTarget > _MAXIMUM_TARGET)  \n        {\n            miningTarget = _MAXIMUM_TARGET;\n        }\n    }\n1583-function_definition-268-290", method="_reAdjustDifficulty()", type_label=function_definition];
1587 [label="268_ uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n1587-new_variable-269-269", method="_reAdjustDifficulty()", type_label=new_variable];
1597 [label="269_ uint epochsMined = _BLOCKS_PER_READJUSTMENT;\n1597-new_variable-270-270", method="_reAdjustDifficulty()", type_label=new_variable];
1603 [label="270_ uint targetEthBlocksPerDiffPeriod = epochsMined * 60;\n1603-new_variable-271-271", method="_reAdjustDifficulty()", type_label=new_variable];
1611 [label="271_ if_ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod\n1611-if-272-280", method="_reAdjustDifficulty()", type_label=if];
4385 [label="271_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
1616 [label="272_ uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n1616-new_variable-273-273", method="_reAdjustDifficulty()", type_label=new_variable];
1633 [label="273_ uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n1633-new_variable-274-274", method="_reAdjustDifficulty()", type_label=new_variable];
1649 [label="274_ miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));\n1649-expression_statement-275-275", method="_reAdjustDifficulty()", type_label=expression_statement];
1669 [label="276_ uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n1669-new_variable-277-277", method="_reAdjustDifficulty()", type_label=new_variable];
1686 [label="277_ uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\n1686-new_variable-278-278", method="_reAdjustDifficulty()", type_label=new_variable];
1702 [label="278_ miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));\n1702-expression_statement-279-279", method="_reAdjustDifficulty()", type_label=expression_statement];
1721 [label="280_ latestDifficultyPeriodStarted = block.number;\n1721-expression_statement-281-281", method="_reAdjustDifficulty()", type_label=expression_statement];
1727 [label="281_ if_miningTarget < _MINIMUM_TARGET\n1727-if-282-285", method="_reAdjustDifficulty()", type_label=if];
4501 [label="281_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
1732 [label="283_ miningTarget = _MINIMUM_TARGET;\n1732-expression_statement-284-284", method="_reAdjustDifficulty()", type_label=expression_statement];
1736 [label="285_ if_miningTarget > _MAXIMUM_TARGET\n1736-if-286-289", method="_reAdjustDifficulty()", type_label=if];
4510 [label="285_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
1741 [label="287_ miningTarget = _MAXIMUM_TARGET;\n1741-expression_statement-288-288", method="_reAdjustDifficulty()", type_label=expression_statement];
1745 [label="290_ bool public payedOut_unchk20 = false;\n1745-new_variable-291-291", method="", type_label=new_variable];
1752 [label="291_ address payable public winner_unchk20;\n1752-new_variable-292-292", method="", type_label=new_variable];
1757 [label="292_ uint public winAmount_unchk20;\n1757-new_variable-293-293", method="", type_label=new_variable];
1762 [label="293_ function sendToWinner_unchk20() public {\n        require(!payedOut_unchk20);\n        winner_unchk20.send(winAmount_unchk20);\n        payedOut_unchk20 = true;\n    }\n1762-function_definition-294-298", method="sendToWinner_unchk20()", type_label=function_definition];
1766 [label="294_ require(!payedOut_unchk20);\n1766-expression_statement-295-295", method="sendToWinner_unchk20()", type_label=expression_statement];
1772 [label="295_ winner_unchk20.send(winAmount_unchk20);\n1772-expression_statement-296-296", method="sendToWinner_unchk20()", type_label=expression_statement];
1779 [label="296_ payedOut_unchk20 = true;\n1779-expression_statement-297-297", method="sendToWinner_unchk20()", type_label=expression_statement];
1784 [label="298_ function getChallengeNumber() public view returns(bytes32) {\n        return challengeNumber;\n    }\n1784-function_definition-299-301", method="getChallengeNumber()", type_label=function_definition];
1793 [label="299_ return challengeNumber;\n1793-return-300-300", method="getChallengeNumber()", type_label=return];
1795 [label="301_ bool public payedOut_unchk32 = false;\n1795-new_variable-302-302", method="", type_label=new_variable];
1802 [label="302_ address payable public winner_unchk32;\n1802-new_variable-303-303", method="", type_label=new_variable];
1807 [label="303_ uint public winAmount_unchk32;\n1807-new_variable-304-304", method="", type_label=new_variable];
1812 [label="304_ function sendToWinner_unchk32() public {\n        require(!payedOut_unchk32);\n        winner_unchk32.send(winAmount_unchk32);\n        payedOut_unchk32 = true;\n    }\n1812-function_definition-305-309", method="sendToWinner_unchk32()", type_label=function_definition];
1816 [label="305_ require(!payedOut_unchk32);\n1816-expression_statement-306-306", method="sendToWinner_unchk32()", type_label=expression_statement];
1822 [label="306_ winner_unchk32.send(winAmount_unchk32);\n1822-expression_statement-307-307", method="sendToWinner_unchk32()", type_label=expression_statement];
1829 [label="307_ payedOut_unchk32 = true;\n1829-expression_statement-308-308", method="sendToWinner_unchk32()", type_label=expression_statement];
1834 [label="309_ function getMiningDifficulty() public view returns(uint) {\n        return _MAXIMUM_TARGET.div(miningTarget);\n    }\n1834-function_definition-310-312", method="getMiningDifficulty()", type_label=function_definition];
1843 [label="310_ return _MAXIMUM_TARGET.div(miningTarget);\n1843-return-311-311", method="getMiningDifficulty()", type_label=return];
1850 [label="312_ function unhandledsend_unchk38(address payable callee) public {\n    callee.send(5 ether);\n  }\n1850-function_definition-313-315", method="unhandledsend_unchk38(address payable callee)", type_label=function_definition];
1858 [label="313_ callee.send(5 ether);\n1858-expression_statement-314-314", method="unhandledsend_unchk38(address payable callee)", type_label=expression_statement];
1866 [label="315_ function getMiningTarget() public view returns(uint) {\n        return miningTarget;\n    }\n1866-function_definition-316-318", method="getMiningTarget()", type_label=function_definition];
1875 [label="316_ return miningTarget;\n1875-return-317-317", method="getMiningTarget()", type_label=return];
1877 [label="318_ function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{\n        uint64 subpot_unchk46 = 3 ether;\n        winner_unchk46.send(subpot_unchk46);   \n        subpot_unchk46= 0;\n}\n1877-function_definition-319-323", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=function_definition];
1893 [label="319_ uint64 subpot_unchk46 = 3 ether;\n1893-new_variable-320-320", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=new_variable];
1900 [label="320_ winner_unchk46.send(subpot_unchk46);\n1900-expression_statement-321-321", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
1907 [label="321_ subpot_unchk46= 0;\n1907-expression_statement-322-322", method="cash_unchk46(uint roundIndex,uint subpotIndex,address payable winner_unchk46)", type_label=expression_statement];
1911 [label="323_ function getMiningReward() public view returns(uint) {\n        return (50 * 10 ** uint(decimals)).div(2 ** rewardEra);\n    }\n1911-function_definition-324-326", method="getMiningReward()", type_label=function_definition];
1920 [label="324_ return (50 * 10 ** uint(decimals)).div(2 ** rewardEra);\n1920-return-325-325", method="getMiningReward()", type_label=return];
1936 [label="326_ function UncheckedExternalCall_unchk4 () public\n{  address payable addr_unchk4;\n   if (! addr_unchk4.send (42 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n1936-function_definition-327-335", method="UncheckedExternalCall_unchk4()", type_label=function_definition];
1940 [label="327_ address payable addr_unchk4;\n1940-new_variable-328-328", method="UncheckedExternalCall_unchk4()", type_label=new_variable];
1945 [label="328_ if\n1945-if-329-334", method="UncheckedExternalCall_unchk4()", type_label=if];
4719 [label="328_ end_if", method="UncheckedExternalCall_unchk4()", type_label=end_if];
1956 [label="335_ function getMintDigest(uint256 nonce, bytes32 challenge_number) public view returns(bytes32 digesttest) {\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n        return digest;\n    }\n1956-function_definition-336-339", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=function_definition];
1974 [label="336_ bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n1974-new_variable-337-337", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=new_variable];
1994 [label="337_ return digest;\n1994-return-338-338", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=return];
1996 [label="339_ function bug_unchk7() public{\naddress payable addr_unchk7;\nif (!addr_unchk7.send (10 ether) || 1==1)\n	{revert();}\n}\n1996-function_definition-340-344", method="bug_unchk7()", type_label=function_definition];
2000 [label="340_ address payable addr_unchk7;\n2000-new_variable-341-341", method="bug_unchk7()", type_label=new_variable];
2005 [label="341_ if_!addr_unchk7.send (10 ether) || 1==1\n2005-if-342-343", method="bug_unchk7()", type_label=if];
4779 [label="341_ end_if", method="bug_unchk7()", type_label=end_if];
2021 [label="344_ function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns(bool success) {\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n        if (uint256(digest) > testTarget) revert();\n        return (digest == challenge_digest);\n    }\n2021-function_definition-345-349", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=function_definition];
2047 [label="345_ bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n2047-new_variable-346-346", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=new_variable];
2067 [label="346_ if_uint256(digest) > testTarget\n2067-if-347-347", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=if];
4841 [label="346_ end_if", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=end_if];
2075 [label="347_ return (digest == challenge_digest);\n2075-return-348-348", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=return];
2080 [label="349_ function my_func_unchk23(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n2080-function_definition-350-352", method="my_func_unchk23(address payable dst)", type_label=function_definition];
2089 [label="350_ dst.send(msg.value);\n2089-expression_statement-351-351", method="my_func_unchk23(address payable dst)", type_label=expression_statement];
2098 [label="352_ function totalSupply() public view returns(uint) {\n        return _totalSupply - balances[address(0)];\n    }\n2098-function_definition-353-355", method="totalSupply()", type_label=function_definition];
2107 [label="353_ return _totalSupply - balances[address(0)];\n2107-return-354-354", method="totalSupply()", type_label=return];
2115 [label="355_ function unhandledsend_unchk14(address payable callee) public {\n    callee.send(5 ether);\n  }\n2115-function_definition-356-358", method="unhandledsend_unchk14(address payable callee)", type_label=function_definition];
2123 [label="356_ callee.send(5 ether);\n2123-expression_statement-357-357", method="unhandledsend_unchk14(address payable callee)", type_label=expression_statement];
2131 [label="358_ function balanceOf(address tokenOwner) public view returns(uint balance) {\n        return balances[tokenOwner];\n    }\n2131-function_definition-359-361", method="balanceOf(address tokenOwner)", type_label=function_definition];
2145 [label="359_ return balances[tokenOwner];\n2145-return-360-360", method="balanceOf(address tokenOwner)", type_label=return];
2149 [label="361_ function bug_unchk30() public{\nuint receivers_unchk30;\naddress payable addr_unchk30;\nif (!addr_unchk30.send(42 ether))\n	{receivers_unchk30 +=1;}\nelse\n	{revert();}\n}\n2149-function_definition-362-369", method="bug_unchk30()", type_label=function_definition];
2153 [label="362_ uint receivers_unchk30;\n2153-new_variable-363-363", method="bug_unchk30()", type_label=new_variable];
2158 [label="363_ address payable addr_unchk30;\n2158-new_variable-364-364", method="bug_unchk30()", type_label=new_variable];
2163 [label="364_ if\n2163-if-365-368", method="bug_unchk30()", type_label=if];
4937 [label="364_ end_if", method="bug_unchk30()", type_label=end_if];
2173 [label="365_ receivers_unchk30 +=1;\n2173-expression_statement-366-366", method="bug_unchk30()", type_label=expression_statement];
2180 [label="369_ function transfer(address to, uint tokens) public returns(bool success) {\n        uint toBurn = tokens.mul(burnPercent).div(1000);\n        uint toSend = tokens.sub(toBurn);\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(toSend);\n        emit Transfer(msg.sender, to, toSend);\n        balances[address(0)] = balances[address(0)].add(toBurn);\n        emit Transfer(msg.sender, address(0), toBurn);\n        return true;\n    }\n2180-function_definition-370-379", method="transfer(address to,uint tokens)", type_label=function_definition];
2197 [label="370_ uint toBurn = tokens.mul(burnPercent).div(1000);\n2197-new_variable-371-371", method="transfer(address to,uint tokens)", type_label=new_variable];
2213 [label="371_ uint toSend = tokens.sub(toBurn);\n2213-new_variable-372-372", method="transfer(address to,uint tokens)", type_label=new_variable];
2224 [label="372_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n2224-expression_statement-373-373", method="transfer(address to,uint tokens)", type_label=expression_statement];
2241 [label="373_ balances[to] = balances[to].add(toSend);\n2241-expression_statement-374-374", method="transfer(address to,uint tokens)", type_label=expression_statement];
2264 [label="375_ balances[address(0)] = balances[address(0)].add(toBurn);\n2264-expression_statement-376-376", method="transfer(address to,uint tokens)", type_label=expression_statement];
2293 [label="377_ return true;\n2293-return-378-378", method="transfer(address to,uint tokens)", type_label=return];
2296 [label="379_ bool public payedOut_unchk8 = false;\n2296-new_variable-380-380", method="", type_label=new_variable];
2303 [label="380_ address payable public winner_unchk8;\n2303-new_variable-381-381", method="", type_label=new_variable];
2308 [label="381_ uint public winAmount_unchk8;\n2308-new_variable-382-382", method="", type_label=new_variable];
2313 [label="382_ function sendToWinner_unchk8() public {\n        require(!payedOut_unchk8);\n        winner_unchk8.send(winAmount_unchk8);\n        payedOut_unchk8 = true;\n    }\n2313-function_definition-383-387", method="sendToWinner_unchk8()", type_label=function_definition];
2317 [label="383_ require(!payedOut_unchk8);\n2317-expression_statement-384-384", method="sendToWinner_unchk8()", type_label=expression_statement];
2323 [label="384_ winner_unchk8.send(winAmount_unchk8);\n2323-expression_statement-385-385", method="sendToWinner_unchk8()", type_label=expression_statement];
2330 [label="385_ payedOut_unchk8 = true;\n2330-expression_statement-386-386", method="sendToWinner_unchk8()", type_label=expression_statement];
2335 [label="387_ function approve(address spender, uint tokens) public returns(bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n2335-function_definition-388-392", method="approve(address spender,uint tokens)", type_label=function_definition];
2352 [label="388_ allowed[msg.sender][spender] = tokens;\n2352-expression_statement-389-389", method="approve(address spender,uint tokens)", type_label=expression_statement];
2372 [label="390_ return true;\n2372-return-391-391", method="approve(address spender,uint tokens)", type_label=return];
2375 [label="392_ function bug_unchk39(address payable addr) public\n      {addr.send (4 ether); }\n2375-function_definition-393-394", method="bug_unchk39(address payable addr)", type_label=function_definition];
2383 [label="393_ addr.send (4 ether);\n2383-expression_statement-394-394", method="bug_unchk39(address payable addr)", type_label=expression_statement];
2391 [label="394_ function transferFrom(address from, address to, uint tokens) public returns(bool success) {\n        uint toBurn = tokens.mul(burnPercent).div(1000);\n        uint toSend = tokens.sub(toBurn);\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(toSend);\n        emit Transfer(from, to, toSend);\n        balances[address(0)] = balances[address(0)].add(toBurn);\n        emit Transfer(from, address(0), toBurn);\n        return true;\n    }\n2391-function_definition-395-405", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
2412 [label="395_ uint toBurn = tokens.mul(burnPercent).div(1000);\n2412-new_variable-396-396", method="transferFrom(address from,address to,uint tokens)", type_label=new_variable];
2428 [label="396_ uint toSend = tokens.sub(toBurn);\n2428-new_variable-397-397", method="transferFrom(address from,address to,uint tokens)", type_label=new_variable];
2439 [label="397_ balances[from] = balances[from].sub(tokens);\n2439-expression_statement-398-398", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2452 [label="398_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n2452-expression_statement-399-399", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2473 [label="399_ balances[to] = balances[to].add(toSend);\n2473-expression_statement-400-400", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2494 [label="401_ balances[address(0)] = balances[address(0)].add(toBurn);\n2494-expression_statement-402-402", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2521 [label="403_ return true;\n2521-return-404-404", method="transferFrom(address from,address to,uint tokens)", type_label=return];
2524 [label="405_ function my_func_uncheck36(address payable dst) public payable{\n        dst.call.value(msg.value)(\"\");\n    }\n2524-function_definition-406-408", method="my_func_uncheck36(address payable dst)", type_label=function_definition];
2533 [label="406_ dst.call.value(msg.value)(\"\");\n2533-expression_statement-407-407", method="my_func_uncheck36(address payable dst)", type_label=expression_statement];
2548 [label="408_ function allowance(address tokenOwner, address spender) public view returns(uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n2548-function_definition-409-411", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
2566 [label="409_ return allowed[tokenOwner][spender];\n2566-return-410-410", method="allowance(address tokenOwner,address spender)", type_label=return];
2572 [label="411_ function my_func_unchk35(address payable dst) public payable{\n        dst.send(msg.value);\n    }\n2572-function_definition-412-414", method="my_func_unchk35(address payable dst)", type_label=function_definition];
2581 [label="412_ dst.send(msg.value);\n2581-expression_statement-413-413", method="my_func_unchk35(address payable dst)", type_label=expression_statement];
2590 [label="414_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns(bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n2590-function_definition-415-420", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
2611 [label="415_ allowed[msg.sender][spender] = tokens;\n2611-expression_statement-416-416", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
2631 [label="417_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n2631-expression_statement-418-418", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
2651 [label="418_ return true;\n2651-return-419-419", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
2654 [label="420_ bool public payedOut_unchk44 = false;\n2654-new_variable-421-421", method="", type_label=new_variable];
2661 [label="421_ address payable public winner_unchk44;\n2661-new_variable-422-422", method="", type_label=new_variable];
2666 [label="422_ uint public winAmount_unchk44;\n2666-new_variable-423-423", method="", type_label=new_variable];
2671 [label="423_ function sendToWinner_unchk44() public {\n        require(!payedOut_unchk44);\n        winner_unchk44.send(winAmount_unchk44);\n        payedOut_unchk44 = true;\n    }\n2671-function_definition-424-428", method="sendToWinner_unchk44()", type_label=function_definition];
2675 [label="424_ require(!payedOut_unchk44);\n2675-expression_statement-425-425", method="sendToWinner_unchk44()", type_label=expression_statement];
2681 [label="425_ winner_unchk44.send(winAmount_unchk44);\n2681-expression_statement-426-426", method="sendToWinner_unchk44()", type_label=expression_statement];
2688 [label="426_ payedOut_unchk44 = true;\n2688-expression_statement-427-427", method="sendToWinner_unchk44()", type_label=expression_statement];
2699 [label="431_ function UncheckedExternalCall_unchk40 () public\n{  address payable addr_unchk40;\n   if (! addr_unchk40.send (2 ether))  \n      { \n      }\n	else\n      { \n      }\n}\n2699-function_definition-432-440", method="UncheckedExternalCall_unchk40()", type_label=function_definition];
2703 [label="432_ address payable addr_unchk40;\n2703-new_variable-433-433", method="UncheckedExternalCall_unchk40()", type_label=new_variable];
2708 [label="433_ if\n2708-if-434-439", method="UncheckedExternalCall_unchk40()", type_label=if];
5482 [label="433_ end_if", method="UncheckedExternalCall_unchk40()", type_label=end_if];
2719 [label="440_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns(bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n2719-function_definition-441-443", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
2730 [label="440_ onlyOwner\n2730-expression_statement-441-441", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
2738 [label="441_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n2738-return-442-442", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
2750 [label="443_ bool public payedOut_unchk33 = false;\n2750-new_variable-444-444", method="", type_label=new_variable];
2757 [label="444_ function withdrawLeftOver_unchk33() public {\n        require(payedOut_unchk33);\n        msg.sender.send(address(this).balance);\n    }\n2757-function_definition-445-448", method="withdrawLeftOver_unchk33()", type_label=function_definition];
2761 [label="445_ require(payedOut_unchk33);\n2761-expression_statement-446-446", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
2766 [label="446_ msg.sender.send(address(this).balance);\n2766-expression_statement-447-447", method="withdrawLeftOver_unchk33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
279;
761;
838;
864;
963;
1955;
2178;
2718;
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 168  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
164 -> 2938  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2938 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2938  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
183 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
218 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
254 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
264 -> 274  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3038 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
274 -> 3038  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
297 -> 305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
338 -> 3112  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
374 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 3211  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
489 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
532 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
741 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 756  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3520 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
756 -> 3520  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
768 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
793 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 833  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3597 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 3597  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
845 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
870 -> 879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
899 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
903 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1015 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 1059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1059 -> 1066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1066 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1083 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1122 -> 1129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 1155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1178 -> 1187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1241 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1251 -> 1255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1255 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 4039  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1269 -> 1274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1274 -> 1278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1278 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1282 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1291 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1308 -> 1316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1326 -> 1343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1343 -> 1363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1363 -> 4137  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1369 -> 4143  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1377 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1385 -> 1391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1391 -> 4165  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1397 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 1430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1430 -> 1437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1437 -> 1443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1443 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 1453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1468 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1471 -> 1475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1475 -> 1480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1480 -> 4254  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1496 -> 1500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1500 -> 1515  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1500 -> 4274  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4274 -> 1521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1515 -> 4274  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1521 -> 1537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1537 -> 1546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1546 -> 1553  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1546 -> 4320  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4320 -> 1556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1553 -> 4320  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1567 -> 1575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1583 -> 1587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1587 -> 1597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1597 -> 1603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1603 -> 1611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1611 -> 1616  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1611 -> 1669  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4385 -> 1721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1616 -> 1633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1633 -> 1649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1649 -> 4385  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1669 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 1702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1702 -> 4385  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1721 -> 1727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1727 -> 1732  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1727 -> 4501  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4501 -> 1736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1732 -> 4501  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1736 -> 1741  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1736 -> 4510  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4510 -> 1745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1741 -> 4510  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1745 -> 1752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1752 -> 1757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1762 -> 1766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1766 -> 1772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1772 -> 1779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1784 -> 1793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1793 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1795 -> 1802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1802 -> 1807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1812 -> 1816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1816 -> 1822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1822 -> 1829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1834 -> 1843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1843 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1850 -> 1858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1866 -> 1875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1875 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1877 -> 1893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1893 -> 1900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1900 -> 1907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1911 -> 1920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1920 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1936 -> 1940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1940 -> 1945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1956 -> 1974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1974 -> 1994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1994 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1996 -> 2000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2000 -> 2005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2005 -> 4779  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2021 -> 2047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2047 -> 2067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2067 -> 4841  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2075 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2080 -> 2089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2098 -> 2107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2107 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2115 -> 2123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2131 -> 2145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2145 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2149 -> 2153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2153 -> 2158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2158 -> 2163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2163 -> 2173  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4937 -> 2180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2173 -> 4937  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2180 -> 2197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2197 -> 2213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2213 -> 2224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2224 -> 2241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2293 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2296 -> 2303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2303 -> 2308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2313 -> 2317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2317 -> 2323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2323 -> 2330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2335 -> 2352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2372 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2375 -> 2383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2391 -> 2412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2412 -> 2428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2428 -> 2439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2439 -> 2452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2452 -> 2473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2521 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2524 -> 2533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2548 -> 2566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2566 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2572 -> 2581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2590 -> 2611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2631 -> 2651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2651 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2654 -> 2661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2661 -> 2666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2671 -> 2675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2675 -> 2681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2681 -> 2688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2699 -> 2703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2703 -> 2708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2719 -> 2738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2738 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2757 -> 2761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2761 -> 2766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 3038  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
761 -> 3520  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
838 -> 3597  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
864 -> 3628  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
963 -> 3727  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1955 -> 4719  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2178 -> 4937  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2718 -> 5482  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
