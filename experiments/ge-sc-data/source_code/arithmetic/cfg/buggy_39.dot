digraph  {
13 [label="2_ mapping(address => uint) balances_intou14;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n19-function_definition-4-9", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
35 [label="4_ require(balances_intou14[msg.sender] - _value >= 0);\n35-expression_statement-5-5", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
48 [label="5_ balances_intou14[msg.sender] -= _value;\n48-expression_statement-6-6", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
56 [label="6_ balances_intou14[_to] += _value;\n56-expression_statement-7-7", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
62 [label="7_ return true;\n62-return-8-8", method="transfer_intou14(address _to,uint _value)", type_label=return];
65 [label="9_ mapping (address => uint256) public balanceOf;\n65-new_variable-10-10", method="", type_label=new_variable];
72 [label="10_ mapping(address => uint) balances_intou30;\n72-new_variable-11-11", method="", type_label=new_variable];
78 [label="11_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n78-function_definition-12-17", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
94 [label="12_ require(balances_intou30[msg.sender] - _value >= 0);\n94-expression_statement-13-13", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
107 [label="13_ balances_intou30[msg.sender] -= _value;\n107-expression_statement-14-14", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
115 [label="14_ balances_intou30[_to] += _value;\n115-expression_statement-15-15", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
121 [label="15_ return true;\n121-return-16-16", method="transfer_intou30(address _to,uint _value)", type_label=return];
124 [label="17_ string public name = \"TAMC\";\n124-new_variable-18-18", method="", type_label=new_variable];
131 [label="18_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n131-function_definition-19-22", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
139 [label="19_ uint8 vundflw1=0;\n139-new_variable-20-20", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
145 [label="20_ vundflw1 = vundflw1 + p_intou8;\n145-expression_statement-21-21", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
151 [label="22_ string public symbol = \"TAMC\";\n151-new_variable-23-23", method="", type_label=new_variable];
158 [label="23_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n158-function_definition-24-27", method="bug_intou39()", type_label=function_definition];
162 [label="24_ uint8 vundflw =0;\n162-new_variable-25-25", method="bug_intou39()", type_label=new_variable];
168 [label="25_ vundflw = vundflw -10;\n168-expression_statement-26-26", method="bug_intou39()", type_label=expression_statement];
174 [label="27_ uint8 public decimals = 18;\n174-new_variable-28-28", method="", type_label=new_variable];
180 [label="28_ uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);\n180-new_variable-29-29", method="", type_label=new_variable];
193 [label="29_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n193-function_definition-30-33", method="bug_intou31()", type_label=function_definition];
197 [label="30_ uint8 vundflw =0;\n197-new_variable-31-31", method="bug_intou31()", type_label=new_variable];
203 [label="31_ vundflw = vundflw -10;\n203-expression_statement-32-32", method="bug_intou31()", type_label=expression_statement];
225 [label="35_ balanceOf[msg.sender] = totalSupply;\n225-expression_statement-36-36", method="", type_label=expression_statement];
245 [label="38_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n245-function_definition-39-42", method="bug_intou35()", type_label=function_definition];
249 [label="39_ uint8 vundflw =0;\n249-new_variable-40-40", method="bug_intou35()", type_label=new_variable];
255 [label="40_ vundflw = vundflw -10;\n255-expression_statement-41-41", method="bug_intou35()", type_label=expression_statement];
261 [label="42_ function transfer(address to, uint256 value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= value);\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n261-function_definition-43-49", method="transfer(address to,uint256 value)", type_label=function_definition];
278 [label="43_ require(balanceOf[msg.sender] >= value);\n278-expression_statement-44-44", method="transfer(address to,uint256 value)", type_label=expression_statement];
289 [label="44_ balanceOf[msg.sender] -= value;\n289-expression_statement-45-45", method="transfer(address to,uint256 value)", type_label=expression_statement];
297 [label="45_ balanceOf[to] += value;\n297-expression_statement-46-46", method="transfer(address to,uint256 value)", type_label=expression_statement];
313 [label="47_ return true;\n313-return-48-48", method="transfer(address to,uint256 value)", type_label=return];
316 [label="49_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n316-function_definition-50-53", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
324 [label="50_ uint8 vundflw1=0;\n324-new_variable-51-51", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
330 [label="51_ vundflw1 = vundflw1 + p_intou40;\n330-expression_statement-52-52", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
336 [label="53_ mapping(address => uint) public lockTime_intou13;\n336-new_variable-54-54", method="", type_label=new_variable];
343 [label="54_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n343-function_definition-55-57", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
351 [label="55_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n351-expression_statement-56-56", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
359 [label="57_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n359-function_definition-58-62", method="withdraw_intou13()", type_label=function_definition];
363 [label="58_ require(now > lockTime_intou13[msg.sender]);\n363-expression_statement-59-59", method="withdraw_intou13()", type_label=expression_statement];
374 [label="59_ uint transferValue_intou13 = 10;\n374-new_variable-60-60", method="withdraw_intou13()", type_label=new_variable];
380 [label="60_ msg.sender.transfer(transferValue_intou13);\n380-expression_statement-61-61", method="withdraw_intou13()", type_label=expression_statement];
403 [label="63_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n403-function_definition-64-67", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
411 [label="64_ uint8 vundflw1=0;\n411-new_variable-65-65", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
417 [label="65_ vundflw1 = vundflw1 + p_intou36;\n417-expression_statement-66-66", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
423 [label="67_ mapping(address => mapping(address => uint256)) public allowance;\n423-new_variable-68-68", method="", type_label=new_variable];
432 [label="68_ function approve(address spender, uint256 value)\n        public\n        returns (bool success)\n    {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n432-function_definition-69-76", method="approve(address spender,uint256 value)", type_label=function_definition];
449 [label="72_ allowance[msg.sender][spender] = value;\n449-expression_statement-73-73", method="approve(address spender,uint256 value)", type_label=expression_statement];
469 [label="74_ return true;\n469-return-75-75", method="approve(address spender,uint256 value)", type_label=return];
472 [label="76_ mapping(address => uint) public lockTime_intou33;\n472-new_variable-77-77", method="", type_label=new_variable];
479 [label="77_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n479-function_definition-78-80", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
487 [label="78_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n487-expression_statement-79-79", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
495 [label="80_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n495-function_definition-81-85", method="withdraw_intou33()", type_label=function_definition];
499 [label="81_ require(now > lockTime_intou33[msg.sender]);\n499-expression_statement-82-82", method="withdraw_intou33()", type_label=expression_statement];
510 [label="82_ uint transferValue_intou33 = 10;\n510-new_variable-83-83", method="withdraw_intou33()", type_label=new_variable];
516 [label="83_ msg.sender.transfer(transferValue_intou33);\n516-expression_statement-84-84", method="withdraw_intou33()", type_label=expression_statement];
525 [label="85_ function transferFrom(address from, address to, uint256 value)\n        public\n        returns (bool success)\n    {\n        require(value <= balanceOf[from]);\n        require(value <= allowance[from][msg.sender]);\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n525-function_definition-86-97", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
546 [label="89_ require(value <= balanceOf[from]);\n546-expression_statement-90-90", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
555 [label="90_ require(value <= allowance[from][msg.sender]);\n555-expression_statement-91-91", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
568 [label="91_ balanceOf[from] -= value;\n568-expression_statement-92-92", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
574 [label="92_ balanceOf[to] += value;\n574-expression_statement-93-93", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
580 [label="93_ allowance[from][msg.sender] -= value;\n580-expression_statement-94-94", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
598 [label="95_ return true;\n598-return-96-96", method="transferFrom(address from,address to,uint256 value)", type_label=return];
601 [label="97_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n601-function_definition-98-101", method="bug_intou27()", type_label=function_definition];
605 [label="98_ uint8 vundflw =0;\n605-new_variable-99-99", method="bug_intou27()", type_label=new_variable];
611 [label="99_ vundflw = vundflw -10;\n611-expression_statement-100-100", method="bug_intou27()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
19 -> 35  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 56  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
56 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
65 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
78 -> 94  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
131 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
316 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
479 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
499 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
601 -> 605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
605 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
