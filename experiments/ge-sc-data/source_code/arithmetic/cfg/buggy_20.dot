digraph  {
13 [label="2_ mapping(address => uint) public lockTime_intou21;\n13-new_variable-3-3", method="", type_label=new_variable];
20 [label="3_ function increaseLockTime_intou21(uint _secondsToIncrease) public {\n        lockTime_intou21[msg.sender] += _secondsToIncrease;   \n    }\n20-function_definition-4-6", method="increaseLockTime_intou21(uint _secondsToIncrease)", type_label=function_definition];
28 [label="4_ lockTime_intou21[msg.sender] += _secondsToIncrease;\n28-expression_statement-5-5", method="increaseLockTime_intou21(uint _secondsToIncrease)", type_label=expression_statement];
36 [label="6_ function withdraw_intou21() public {\n        require(now > lockTime_intou21[msg.sender]);    \n        uint transferValue_intou21 = 10;           \n        msg.sender.transfer(transferValue_intou21);\n    }\n36-function_definition-7-11", method="withdraw_intou21()", type_label=function_definition];
40 [label="7_ require(now > lockTime_intou21[msg.sender]);\n40-expression_statement-8-8", method="withdraw_intou21()", type_label=expression_statement];
51 [label="8_ uint transferValue_intou21 = 10;\n51-new_variable-9-9", method="withdraw_intou21()", type_label=new_variable];
57 [label="9_ msg.sender.transfer(transferValue_intou21);\n57-expression_statement-10-10", method="withdraw_intou21()", type_label=expression_statement];
66 [label="11_ address public owner;\n66-new_variable-12-12", method="", type_label=new_variable];
71 [label="12_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n71-function_definition-13-16", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
79 [label="13_ uint8 vundflw1=0;\n79-new_variable-14-14", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
85 [label="14_ vundflw1 = vundflw1 + p_intou40;\n85-expression_statement-15-15", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
103 [label="18_ owner = msg.sender;\n103-expression_statement-19-19", method="", type_label=expression_statement];
109 [label="20_ mapping(address => uint) public lockTime_intou17;\n109-new_variable-21-21", method="", type_label=new_variable];
116 [label="21_ function increaseLockTime_intou17(uint _secondsToIncrease) public {\n        lockTime_intou17[msg.sender] += _secondsToIncrease;   \n    }\n116-function_definition-22-24", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=function_definition];
124 [label="22_ lockTime_intou17[msg.sender] += _secondsToIncrease;\n124-expression_statement-23-23", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=expression_statement];
132 [label="24_ function withdraw_intou17() public {\n        require(now > lockTime_intou17[msg.sender]);    \n        uint transferValue_intou17 = 10;           \n        msg.sender.transfer(transferValue_intou17);\n    }\n132-function_definition-25-29", method="withdraw_intou17()", type_label=function_definition];
136 [label="25_ require(now > lockTime_intou17[msg.sender]);\n136-expression_statement-26-26", method="withdraw_intou17()", type_label=expression_statement];
147 [label="26_ uint transferValue_intou17 = 10;\n147-new_variable-27-27", method="withdraw_intou17()", type_label=new_variable];
153 [label="27_ msg.sender.transfer(transferValue_intou17);\n153-expression_statement-28-28", method="withdraw_intou17()", type_label=expression_statement];
162 [label="29_ modifier onlyOwner() {\n        require(msg.sender == owner, \"only the owner can call this\");\n        _;\n    }\n162-expression_statement-30-33", method="", type_label=expression_statement];
165 [label="30_ require(msg.sender == owner, \"only the owner can call this\");\n165-expression_statement-31-31", method="", type_label=expression_statement];
177 [label="31_ _;\n177-expression_statement-32-32", method="", type_label=expression_statement];
179 [label="33_ function changeOwner(address _newOwner) external onlyOwner {\n        owner = _newOwner;\n        emit OwnerChanged(msg.sender, _newOwner);\n    }\n179-function_definition-34-37", method="changeOwner(address _newOwner)", type_label=function_definition];
186 [label="33_ onlyOwner\n186-expression_statement-34-34", method="changeOwner(address _newOwner)", type_label=expression_statement];
189 [label="34_ owner = _newOwner;\n189-expression_statement-35-35", method="changeOwner(address _newOwner)", type_label=expression_statement];
201 [label="37_ mapping(address => uint) public lockTime_intou37;\n201-new_variable-38-38", method="", type_label=new_variable];
208 [label="38_ function increaseLockTime_intou37(uint _secondsToIncrease) public {\n        lockTime_intou37[msg.sender] += _secondsToIncrease;   \n    }\n208-function_definition-39-41", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=function_definition];
216 [label="39_ lockTime_intou37[msg.sender] += _secondsToIncrease;\n216-expression_statement-40-40", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=expression_statement];
224 [label="41_ function withdraw_intou37() public {\n        require(now > lockTime_intou37[msg.sender]);    \n        uint transferValue_intou37 = 10;           \n        msg.sender.transfer(transferValue_intou37);\n    }\n224-function_definition-42-46", method="withdraw_intou37()", type_label=function_definition];
228 [label="42_ require(now > lockTime_intou37[msg.sender]);\n228-expression_statement-43-43", method="withdraw_intou37()", type_label=expression_statement];
239 [label="43_ uint transferValue_intou37 = 10;\n239-new_variable-44-44", method="withdraw_intou37()", type_label=new_variable];
245 [label="44_ msg.sender.transfer(transferValue_intou37);\n245-expression_statement-45-45", method="withdraw_intou37()", type_label=expression_statement];
260 [label="48_ mapping(address => uint) balances_intou10;\n260-new_variable-49-49", method="", type_label=new_variable];
266 [label="49_ function transfer_intou10(address _to, uint _value) public returns (bool) {\n    require(balances_intou10[msg.sender] - _value >= 0);   \n    balances_intou10[msg.sender] -= _value;   \n    balances_intou10[_to] += _value;   \n    return true;\n  }\n266-function_definition-50-55", method="transfer_intou10(address _to,uint _value)", type_label=function_definition];
282 [label="50_ require(balances_intou10[msg.sender] - _value >= 0);\n282-expression_statement-51-51", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
295 [label="51_ balances_intou10[msg.sender] -= _value;\n295-expression_statement-52-52", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
303 [label="52_ balances_intou10[_to] += _value;\n303-expression_statement-53-53", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
309 [label="53_ return true;\n309-return-54-54", method="transfer_intou10(address _to,uint _value)", type_label=return];
312 [label="55_ bool public isActive = true;\n312-new_variable-56-56", method="", type_label=new_variable];
319 [label="56_ mapping(address => uint) public lockTime_intou33;\n319-new_variable-57-57", method="", type_label=new_variable];
326 [label="57_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n326-function_definition-58-60", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
334 [label="58_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n334-expression_statement-59-59", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
342 [label="60_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n342-function_definition-61-65", method="withdraw_intou33()", type_label=function_definition];
346 [label="61_ require(now > lockTime_intou33[msg.sender]);\n346-expression_statement-62-62", method="withdraw_intou33()", type_label=expression_statement];
357 [label="62_ uint transferValue_intou33 = 10;\n357-new_variable-63-63", method="withdraw_intou33()", type_label=new_variable];
363 [label="63_ msg.sender.transfer(transferValue_intou33);\n363-expression_statement-64-64", method="withdraw_intou33()", type_label=expression_statement];
378 [label="66_ modifier onlyActive() {\n        require(isActive, \"contract is stopped\");\n        _;\n    }\n378-expression_statement-67-70", method="", type_label=expression_statement];
381 [label="67_ require(isActive, \"contract is stopped\");\n381-expression_statement-68-68", method="", type_label=expression_statement];
389 [label="68_ _;\n389-expression_statement-69-69", method="", type_label=expression_statement];
391 [label="70_ function setIsActive(bool _isActive) external onlyOwner {\n        if (_isActive == isActive) return;\n        isActive = _isActive;\n        emit IsActiveChanged(_isActive);\n    }\n391-function_definition-71-75", method="setIsActive(bool _isActive)", type_label=function_definition];
398 [label="70_ onlyOwner\n398-expression_statement-71-71", method="setIsActive(bool _isActive)", type_label=expression_statement];
401 [label="71_ if__isActive == isActive\n401-if-72-72", method="setIsActive(bool _isActive)", type_label=if];
2284 [label="71_ end_if", method="setIsActive(bool _isActive)", type_label=end_if];
405 [label="71_ return;\n405-return-72-72", method="setIsActive(bool _isActive)", type_label=return];
406 [label="72_ isActive = _isActive;\n406-expression_statement-73-73", method="setIsActive(bool _isActive)", type_label=expression_statement];
414 [label="75_ function bug_intou3() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n414-function_definition-76-79", method="bug_intou3()", type_label=function_definition];
418 [label="76_ uint8 vundflw =0;\n418-new_variable-77-77", method="bug_intou3()", type_label=new_variable];
424 [label="77_ vundflw = vundflw -10;\n424-expression_statement-78-78", method="bug_intou3()", type_label=expression_statement];
433 [label="81_ uint16 public ASSET_TYPE;\n433-new_variable-82-82", method="", type_label=new_variable];
438 [label="82_ function sendFundsToSwap(uint256 _amount)\n        public   returns(bool success);\n438-function_definition-83-84", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
453 [label="86_ uint16 public ASSET_TYPE;\n453-new_variable-87-87", method="", type_label=new_variable];
458 [label="87_ function release(\n        address _pool,\n        address payable _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    )\n        external;\n458-function_definition-88-95", method="release(address _pool,address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
481 [label="95_ mapping(address => uint) public lockTime_intou9;\n481-new_variable-96-96", method="", type_label=new_variable];
488 [label="96_ function increaseLockTime_intou9(uint _secondsToIncrease) public {\n        lockTime_intou9[msg.sender] += _secondsToIncrease;   \n    }\n488-function_definition-97-99", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=function_definition];
496 [label="97_ lockTime_intou9[msg.sender] += _secondsToIncrease;\n496-expression_statement-98-98", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=expression_statement];
504 [label="99_ function withdraw_intou9() public {\n        require(now > lockTime_intou9[msg.sender]);    \n        uint transferValue_intou9 = 10;           \n        msg.sender.transfer(transferValue_intou9);\n    }\n504-function_definition-100-104", method="withdraw_intou9()", type_label=function_definition];
508 [label="100_ require(now > lockTime_intou9[msg.sender]);\n508-expression_statement-101-101", method="withdraw_intou9()", type_label=expression_statement];
519 [label="101_ uint transferValue_intou9 = 10;\n519-new_variable-102-102", method="withdraw_intou9()", type_label=new_variable];
525 [label="102_ msg.sender.transfer(transferValue_intou9);\n525-expression_statement-103-103", method="withdraw_intou9()", type_label=expression_statement];
534 [label="104_ function returnFunds(\n        address payable _pool,\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    )\n        external;\n534-function_definition-105-112", method="returnFunds(address payable _pool,address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
557 [label="112_ mapping(address => uint) public lockTime_intou25;\n557-new_variable-113-113", method="", type_label=new_variable];
564 [label="113_ function increaseLockTime_intou25(uint _secondsToIncrease) public {\n        lockTime_intou25[msg.sender] += _secondsToIncrease;   \n    }\n564-function_definition-114-116", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=function_definition];
572 [label="114_ lockTime_intou25[msg.sender] += _secondsToIncrease;\n572-expression_statement-115-115", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=expression_statement];
580 [label="116_ function withdraw_intou25() public {\n        require(now > lockTime_intou25[msg.sender]);    \n        uint transferValue_intou25 = 10;           \n        msg.sender.transfer(transferValue_intou25);\n    }\n580-function_definition-117-121", method="withdraw_intou25()", type_label=function_definition];
584 [label="117_ require(now > lockTime_intou25[msg.sender]);\n584-expression_statement-118-118", method="withdraw_intou25()", type_label=expression_statement];
595 [label="118_ uint transferValue_intou25 = 10;\n595-new_variable-119-119", method="withdraw_intou25()", type_label=new_variable];
601 [label="119_ msg.sender.transfer(transferValue_intou25);\n601-expression_statement-120-120", method="withdraw_intou25()", type_label=expression_statement];
622 [label="123_ uint256 constant private MAX_SWAP_AMOUNT_LIMIT = 1 << 240;\n622-new_variable-124-124", method="", type_label=new_variable];
630 [label="124_ uint16 public ASSET_TYPE;\n630-new_variable-125-125", method="", type_label=new_variable];
635 [label="125_ mapping(address => uint) balances_intou22;\n635-new_variable-126-126", method="", type_label=new_variable];
641 [label="126_ function transfer_intou22(address _to, uint _value) public returns (bool) {\n    require(balances_intou22[msg.sender] - _value >= 0);   \n    balances_intou22[msg.sender] -= _value;   \n    balances_intou22[_to] += _value;   \n    return true;\n  }\n641-function_definition-127-132", method="transfer_intou22(address _to,uint _value)", type_label=function_definition];
657 [label="127_ require(balances_intou22[msg.sender] - _value >= 0);\n657-expression_statement-128-128", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
670 [label="128_ balances_intou22[msg.sender] -= _value;\n670-expression_statement-129-129", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
678 [label="129_ balances_intou22[_to] += _value;\n678-expression_statement-130-130", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
684 [label="130_ return true;\n684-return-131-131", method="transfer_intou22(address _to,uint _value)", type_label=return];
687 [label="132_ address payable public swapsContract;\n687-new_variable-133-133", method="", type_label=new_variable];
692 [label="133_ function bug_intou12(uint8 p_intou12) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou12;    \n}\n692-function_definition-134-137", method="bug_intou12(uint8 p_intou12)", type_label=function_definition];
700 [label="134_ uint8 vundflw1=0;\n700-new_variable-135-135", method="bug_intou12(uint8 p_intou12)", type_label=new_variable];
706 [label="135_ vundflw1 = vundflw1 + p_intou12;\n706-expression_statement-136-136", method="bug_intou12(uint8 p_intou12)", type_label=expression_statement];
712 [label="137_ uint256 public minSwapAmount;\n712-new_variable-138-138", method="", type_label=new_variable];
717 [label="138_ function bug_intou11() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n717-function_definition-139-142", method="bug_intou11()", type_label=function_definition];
721 [label="139_ uint8 vundflw =0;\n721-new_variable-140-140", method="bug_intou11()", type_label=new_variable];
727 [label="140_ vundflw = vundflw -10;\n727-expression_statement-141-141", method="bug_intou11()", type_label=expression_statement];
733 [label="142_ uint256 public maxSwapAmount;\n733-new_variable-143-143", method="", type_label=new_variable];
738 [label="143_ mapping(address => uint) public lockTime_intou1;\n738-new_variable-144-144", method="", type_label=new_variable];
745 [label="144_ function increaseLockTime_intou1(uint _secondsToIncrease) public {\n        lockTime_intou1[msg.sender] += _secondsToIncrease;   \n    }\n745-function_definition-145-147", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=function_definition];
753 [label="145_ lockTime_intou1[msg.sender] += _secondsToIncrease;\n753-expression_statement-146-146", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=expression_statement];
761 [label="147_ function withdraw_ovrflow1() public {\n        require(now > lockTime_intou1[msg.sender]);    \n        uint transferValue_intou1 = 10;           \n        msg.sender.transfer(transferValue_intou1);\n    }\n761-function_definition-148-152", method="withdraw_ovrflow1()", type_label=function_definition];
765 [label="148_ require(now > lockTime_intou1[msg.sender]);\n765-expression_statement-149-149", method="withdraw_ovrflow1()", type_label=expression_statement];
776 [label="149_ uint transferValue_intou1 = 10;\n776-new_variable-150-150", method="withdraw_ovrflow1()", type_label=new_variable];
782 [label="150_ msg.sender.transfer(transferValue_intou1);\n782-expression_statement-151-151", method="withdraw_ovrflow1()", type_label=expression_statement];
791 [label="152_ bytes32 public paymentDetailsHash;\n791-new_variable-153-153", method="", type_label=new_variable];
796 [label="153_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n796-function_definition-154-157", method="bug_intou27()", type_label=function_definition];
800 [label="154_ uint8 vundflw =0;\n800-new_variable-155-155", method="bug_intou27()", type_label=new_variable];
806 [label="155_ vundflw = vundflw -10;\n806-expression_statement-156-156", method="bug_intou27()", type_label=expression_statement];
822 [label="158_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n822-function_definition-159-162", method="bug_intou31()", type_label=function_definition];
826 [label="159_ uint8 vundflw =0;\n826-new_variable-160-160", method="bug_intou31()", type_label=new_variable];
832 [label="160_ vundflw = vundflw -10;\n832-expression_statement-161-161", method="bug_intou31()", type_label=expression_statement];
848 [label="163_ mapping(address => uint) public lockTime_intou13;\n848-new_variable-164-164", method="", type_label=new_variable];
855 [label="164_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n855-function_definition-165-167", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
863 [label="165_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n863-expression_statement-166-166", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
871 [label="167_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n871-function_definition-168-172", method="withdraw_intou13()", type_label=function_definition];
875 [label="168_ require(now > lockTime_intou13[msg.sender]);\n875-expression_statement-169-169", method="withdraw_intou13()", type_label=expression_statement];
886 [label="169_ uint transferValue_intou13 = 10;\n886-new_variable-170-170", method="withdraw_intou13()", type_label=new_variable];
892 [label="170_ msg.sender.transfer(transferValue_intou13);\n892-expression_statement-171-171", method="withdraw_intou13()", type_label=expression_statement];
932 [label="181_ validateLimits(_minSwapAmount, _maxSwapAmount)\n932-expression_statement-182-182", method="", type_label=expression_statement];
938 [label="182_ validateSwapsContract(_swapsContract, _assetType)\n938-expression_statement-183-183", method="", type_label=expression_statement];
945 [label="184_ swapsContract = _swapsContract;\n945-expression_statement-185-185", method="", type_label=expression_statement];
949 [label="185_ paymentDetailsHash = _paymentDetailsHash;\n949-expression_statement-186-186", method="", type_label=expression_statement];
953 [label="186_ minSwapAmount = _minSwapAmount;\n953-expression_statement-187-187", method="", type_label=expression_statement];
957 [label="187_ maxSwapAmount = _maxSwapAmount;\n957-expression_statement-188-188", method="", type_label=expression_statement];
961 [label="188_ ASSET_TYPE = _assetType;\n961-expression_statement-189-189", method="", type_label=expression_statement];
965 [label="190_ function bug_intou19() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n965-function_definition-191-194", method="bug_intou19()", type_label=function_definition];
969 [label="191_ uint8 vundflw =0;\n969-new_variable-192-192", method="bug_intou19()", type_label=new_variable];
975 [label="192_ vundflw = vundflw -10;\n975-expression_statement-193-193", method="bug_intou19()", type_label=expression_statement];
981 [label="194_ function availableFunds() public view returns (uint256);\n981-function_definition-195-195", method="availableFunds()", type_label=function_definition];
989 [label="195_ mapping(address => uint) balances_intou26;\n989-new_variable-196-196", method="", type_label=new_variable];
995 [label="196_ function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] - _value >= 0);   \n    balances_intou26[msg.sender] -= _value;   \n    balances_intou26[_to] += _value;   \n    return true;\n  }\n995-function_definition-197-202", method="transfer_intou26(address _to,uint _value)", type_label=function_definition];
1011 [label="197_ require(balances_intou26[msg.sender] - _value >= 0);\n1011-expression_statement-198-198", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
1024 [label="198_ balances_intou26[msg.sender] -= _value;\n1024-expression_statement-199-199", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
1032 [label="199_ balances_intou26[_to] += _value;\n1032-expression_statement-200-200", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
1038 [label="200_ return true;\n1038-return-201-201", method="transfer_intou26(address _to,uint _value)", type_label=return];
1041 [label="202_ function withdrawFunds(address payable _to, uint256 _amount)\n        public   returns (bool success);\n1041-function_definition-203-204", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=function_definition];
1057 [label="204_ function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou20;    \n}\n1057-function_definition-205-208", method="bug_intou20(uint8 p_intou20)", type_label=function_definition];
1065 [label="205_ uint8 vundflw1=0;\n1065-new_variable-206-206", method="bug_intou20(uint8 p_intou20)", type_label=new_variable];
1071 [label="206_ vundflw1 = vundflw1 + p_intou20;\n1071-expression_statement-207-207", method="bug_intou20(uint8 p_intou20)", type_label=expression_statement];
1077 [label="208_ function withdrawAllFunds(address payable _to) public onlyOwner returns (bool success) {\n        return withdrawFunds(_to, availableFunds());\n    }\n1077-function_definition-209-211", method="withdrawAllFunds(address payable _to)", type_label=function_definition];
1084 [label="208_ onlyOwner\n1084-expression_statement-209-209", method="withdrawAllFunds(address payable _to)", type_label=expression_statement];
1092 [label="209_ return withdrawFunds(_to, availableFunds());\n1092-return-210-210", method="withdrawAllFunds(address payable _to)", type_label=return];
1100 [label="211_ function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou32;    \n}\n1100-function_definition-212-215", method="bug_intou32(uint8 p_intou32)", type_label=function_definition];
1108 [label="212_ uint8 vundflw1=0;\n1108-new_variable-213-213", method="bug_intou32(uint8 p_intou32)", type_label=new_variable];
1114 [label="213_ vundflw1 = vundflw1 + p_intou32;\n1114-expression_statement-214-214", method="bug_intou32(uint8 p_intou32)", type_label=expression_statement];
1120 [label="215_ function setLimits(\n        uint256 _minAmount,\n        uint256 _maxAmount\n    ) public onlyOwner validateLimits(_minAmount, _maxAmount) {\n        minSwapAmount = _minAmount;\n        maxSwapAmount = _maxAmount;\n        emit LimitsChanged(_minAmount, _maxAmount);\n    }\n1120-function_definition-216-223", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=function_definition];
1131 [label="218_ onlyOwner\n1131-expression_statement-219-219", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
1133 [label="218_ validateLimits(_minAmount, _maxAmount)\n1133-expression_statement-219-219", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
1140 [label="219_ minSwapAmount = _minAmount;\n1140-expression_statement-220-220", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
1144 [label="220_ maxSwapAmount = _maxAmount;\n1144-expression_statement-221-221", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
1154 [label="223_ mapping(address => uint) balances_intou38;\n1154-new_variable-224-224", method="", type_label=new_variable];
1160 [label="224_ function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] - _value >= 0);   \n    balances_intou38[msg.sender] -= _value;   \n    balances_intou38[_to] += _value;   \n    return true;\n  }\n1160-function_definition-225-230", method="transfer_intou38(address _to,uint _value)", type_label=function_definition];
1176 [label="225_ require(balances_intou38[msg.sender] - _value >= 0);\n1176-expression_statement-226-226", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
1189 [label="226_ balances_intou38[msg.sender] -= _value;\n1189-expression_statement-227-227", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
1197 [label="227_ balances_intou38[_to] += _value;\n1197-expression_statement-228-228", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
1203 [label="228_ return true;\n1203-return-229-229", method="transfer_intou38(address _to,uint _value)", type_label=return];
1206 [label="230_ function setSwapsContract(\n        address payable _swapsContract\n    ) public onlyOwner validateSwapsContract(_swapsContract, ASSET_TYPE) {\n        address oldSwapsContract = swapsContract;\n        swapsContract = _swapsContract;\n        emit SwapsContractChanged(oldSwapsContract, _swapsContract);\n    }\n1206-function_definition-231-237", method="setSwapsContract(address payable _swapsContract)", type_label=function_definition];
1213 [label="232_ onlyOwner\n1213-expression_statement-233-233", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
1215 [label="232_ validateSwapsContract(_swapsContract, ASSET_TYPE)\n1215-expression_statement-233-233", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
1222 [label="233_ address oldSwapsContract = swapsContract;\n1222-new_variable-234-234", method="setSwapsContract(address payable _swapsContract)", type_label=new_variable];
1228 [label="234_ swapsContract = _swapsContract;\n1228-expression_statement-235-235", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
1238 [label="237_ function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou4;    \n}\n1238-function_definition-238-241", method="bug_intou4(uint8 p_intou4)", type_label=function_definition];
1246 [label="238_ uint8 vundflw1=0;\n1246-new_variable-239-239", method="bug_intou4(uint8 p_intou4)", type_label=new_variable];
1252 [label="239_ vundflw1 = vundflw1 + p_intou4;\n1252-expression_statement-240-240", method="bug_intou4(uint8 p_intou4)", type_label=expression_statement];
1258 [label="241_ function sendFundsToSwap(uint256 _amount)\n        public   returns(bool success);\n1258-function_definition-242-243", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
1270 [label="243_ function releaseSwap(\n        address payable _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external onlyOwner {\n        RampInstantEscrowsPoolInterface(swapsContract).release(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n    }\n1270-function_definition-244-257", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
1289 [label="248_ onlyOwner\n1289-expression_statement-249-249", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1292 [label="249_ RampInstantEscrowsPoolInterface(swapsContract).release(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n1292-expression_statement-250-256", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1312 [label="257_ function bug_intou7() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1312-function_definition-258-261", method="bug_intou7()", type_label=function_definition];
1316 [label="258_ uint8 vundflw =0;\n1316-new_variable-259-259", method="bug_intou7()", type_label=new_variable];
1322 [label="259_ vundflw = vundflw -10;\n1322-expression_statement-260-260", method="bug_intou7()", type_label=expression_statement];
1328 [label="261_ function returnSwap(\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external onlyOwner {\n        RampInstantEscrowsPoolInterface(swapsContract).returnFunds(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n    }\n1328-function_definition-262-275", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
1347 [label="266_ onlyOwner\n1347-expression_statement-267-267", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1350 [label="267_ RampInstantEscrowsPoolInterface(swapsContract).returnFunds(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n1350-expression_statement-268-274", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1370 [label="275_ function bug_intou23() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1370-function_definition-276-279", method="bug_intou23()", type_label=function_definition];
1374 [label="276_ uint8 vundflw =0;\n1374-new_variable-277-277", method="bug_intou23()", type_label=new_variable];
1380 [label="277_ vundflw = vundflw -10;\n1380-expression_statement-278-278", method="bug_intou23()", type_label=expression_statement];
1394 [label="282_ mapping(address => uint) balances_intou14;\n1394-new_variable-283-283", method="", type_label=new_variable];
1400 [label="283_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n1400-function_definition-284-289", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
1416 [label="284_ require(balances_intou14[msg.sender] - _value >= 0);\n1416-expression_statement-285-285", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1429 [label="285_ balances_intou14[msg.sender] -= _value;\n1429-expression_statement-286-286", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1437 [label="286_ balances_intou14[_to] += _value;\n1437-expression_statement-287-287", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1443 [label="287_ return true;\n1443-return-288-288", method="transfer_intou14(address _to,uint _value)", type_label=return];
1446 [label="289_ modifier onlySwapsContract() {\n        require(msg.sender == swapsContract, \"only the swaps contract can call this\");\n        _;\n    }\n1446-expression_statement-290-293", method="", type_label=expression_statement];
1449 [label="290_ require(msg.sender == swapsContract, \"only the swaps contract can call this\");\n1449-expression_statement-291-291", method="", type_label=expression_statement];
1461 [label="291_ _;\n1461-expression_statement-292-292", method="", type_label=expression_statement];
1463 [label="293_ modifier isWithinLimits(uint256 _amount) {\n        require(_amount >= minSwapAmount && _amount <= maxSwapAmount, \"amount outside swap limits\");\n        _;\n    }\n1463-expression_statement-294-297", method="", type_label=expression_statement];
1470 [label="294_ require(_amount >= minSwapAmount && _amount <= maxSwapAmount, \"amount outside swap limits\");\n1470-expression_statement-295-295", method="", type_label=expression_statement];
1484 [label="295_ _;\n1484-expression_statement-296-296", method="", type_label=expression_statement];
1486 [label="297_ modifier validateLimits(uint256 _minAmount, uint256 _maxAmount) {\n        require(_minAmount <= _maxAmount, \"min limit over max limit\");\n        require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, \"maxAmount too high\");\n        _;\n    }\n1486-expression_statement-298-302", method="", type_label=expression_statement];
1497 [label="298_ require(_minAmount <= _maxAmount, \"min limit over max limit\");\n1497-expression_statement-299-299", method="", type_label=expression_statement];
1507 [label="299_ require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, \"maxAmount too high\");\n1507-expression_statement-300-300", method="", type_label=expression_statement];
1517 [label="300_ _;\n1517-expression_statement-301-301", method="", type_label=expression_statement];
1519 [label="302_ modifier validateSwapsContract(address payable _swapsContract, uint16 _assetType) {\n        require(_swapsContract != address(0), \"null swaps contract address\");\n        require(\n            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,\n            \"pool asset type doesn't match swap contract\"\n        );\n        _;\n    }\n1519-expression_statement-303-310", method="", type_label=expression_statement];
1530 [label="303_ require(_swapsContract != address(0), \"null swaps contract address\");\n1530-expression_statement-304-304", method="", type_label=expression_statement];
1542 [label="304_ require(\n            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,\n            \"pool asset type doesn't match swap contract\"\n        );\n1542-expression_statement-305-308", method="", type_label=expression_statement];
1558 [label="308_ _;\n1558-expression_statement-309-309", method="", type_label=expression_statement];
1566 [label="312_ mapping(address => uint) balances_intou2;\n1566-new_variable-313-313", method="", type_label=new_variable];
1572 [label="313_ function transfer_undrflow2(address _to, uint _value) public returns (bool) {\n    require(balances_intou2[msg.sender] - _value >= 0);   \n    balances_intou2[msg.sender] -= _value;   \n    balances_intou2[_to] += _value;   \n    return true;\n  }\n1572-function_definition-314-319", method="transfer_undrflow2(address _to,uint _value)", type_label=function_definition];
1588 [label="314_ require(balances_intou2[msg.sender] - _value >= 0);\n1588-expression_statement-315-315", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
1601 [label="315_ balances_intou2[msg.sender] -= _value;\n1601-expression_statement-316-316", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
1609 [label="316_ balances_intou2[_to] += _value;\n1609-expression_statement-317-317", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
1615 [label="317_ return true;\n1615-return-318-318", method="transfer_undrflow2(address _to,uint _value)", type_label=return];
1618 [label="319_ uint16 internal constant ETH_TYPE_ID = 1;\n1618-new_variable-320-320", method="", type_label=new_variable];
1641 [label="327_ RampInstantPool(\n            _swapsContract, _minSwapAmount, _maxSwapAmount, _paymentDetailsHash, ETH_TYPE_ID\n        )\n1641-expression_statement-328-330", method="", type_label=expression_statement];
1654 [label="331_ mapping(address => uint) balances_intou30;\n1654-new_variable-332-332", method="", type_label=new_variable];
1660 [label="332_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n1660-function_definition-333-338", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
1676 [label="333_ require(balances_intou30[msg.sender] - _value >= 0);\n1676-expression_statement-334-334", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1689 [label="334_ balances_intou30[msg.sender] -= _value;\n1689-expression_statement-335-335", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1697 [label="335_ balances_intou30[_to] += _value;\n1697-expression_statement-336-336", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1703 [label="336_ return true;\n1703-return-337-337", method="transfer_intou30(address _to,uint _value)", type_label=return];
1706 [label="338_ function availableFunds() public view returns(uint256) {\n        return address(this).balance;\n    }\n1706-function_definition-339-341", method="availableFunds()", type_label=function_definition];
1715 [label="339_ return address(this).balance;\n1715-return-340-340", method="availableFunds()", type_label=return];
1721 [label="341_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n1721-function_definition-342-345", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
1729 [label="342_ uint8 vundflw1=0;\n1729-new_variable-343-343", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
1735 [label="343_ vundflw1 = vundflw1 + p_intou8;\n1735-expression_statement-344-344", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
1741 [label="345_ function withdrawFunds(\n        address payable _to,\n        uint256 _amount\n    ) public onlyOwner returns (bool success) {\n        _to.transfer(_amount);   \n        return true;\n    }\n1741-function_definition-346-352", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=function_definition];
1752 [label="348_ onlyOwner\n1752-expression_statement-349-349", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=expression_statement];
1760 [label="349_ _to.transfer(_amount);\n1760-expression_statement-350-350", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=expression_statement];
1767 [label="350_ return true;\n1767-return-351-351", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=return];
1770 [label="352_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1770-function_definition-353-356", method="bug_intou39()", type_label=function_definition];
1774 [label="353_ uint8 vundflw =0;\n1774-new_variable-354-354", method="bug_intou39()", type_label=new_variable];
1780 [label="354_ vundflw = vundflw -10;\n1780-expression_statement-355-355", method="bug_intou39()", type_label=expression_statement];
1786 [label="356_ function sendFundsToSwap(\n        uint256 _amount\n    ) public onlyActive onlySwapsContract isWithinLimits(_amount) returns(bool success) {\n        swapsContract.transfer(_amount);   \n        return true;\n    }\n1786-function_definition-357-362", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
1793 [label="358_ onlyActive\n1793-expression_statement-359-359", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1795 [label="358_ onlySwapsContract\n1795-expression_statement-359-359", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1797 [label="358_ isWithinLimits(_amount)\n1797-expression_statement-359-359", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1807 [label="359_ swapsContract.transfer(_amount);\n1807-expression_statement-360-360", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1814 [label="360_ return true;\n1814-return-361-361", method="sendFundsToSwap(uint256 _amount)", type_label=return];
1817 [label="362_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n1817-function_definition-363-366", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
1825 [label="363_ uint8 vundflw1=0;\n1825-new_variable-364-364", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
1831 [label="364_ vundflw1 = vundflw1 + p_intou36;\n1831-expression_statement-365-365", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
1841 [label="367_ require(msg.data.length == 0, \"invalid pool function called\");\n1841-expression_statement-368-368", method="", type_label=expression_statement];
1855 [label="368_ if_msg.sender != swapsContract\n1855-if-369-371", method="", type_label=if];
3738 [label="368_ end_if", method="", type_label=end_if];
1872 [label="372_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1872-function_definition-373-376", method="bug_intou35()", type_label=function_definition];
1876 [label="373_ uint8 vundflw =0;\n1876-new_variable-374-374", method="bug_intou35()", type_label=new_variable];
1882 [label="374_ vundflw = vundflw -10;\n1882-expression_statement-375-375", method="bug_intou35()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
20 -> 28  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
40 -> 51  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 57  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
71 -> 79  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
116 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
132 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
147 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
224 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
239 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
312 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
381 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 405  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
401 -> 2284  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2284 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 2284  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
405 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
414 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
692 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
721 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
733 -> 738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
796 -> 800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
800 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
826 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
953 -> 957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 1011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1011 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1024 -> 1032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1032 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1057 -> 1065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1065 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1092 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1100 -> 1108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1108 -> 1114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1120 -> 1140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1131 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1140 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1206 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1213 -> 1215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1222 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1238 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1270 -> 1292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1312 -> 1316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1316 -> 1322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1370 -> 1374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1374 -> 1380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1400 -> 1416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1416 -> 1429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1437 -> 1443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1443 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1446 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1449 -> 1461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1463 -> 1486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1470 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 1519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1497 -> 1507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1530 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 1558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1601 -> 1609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1609 -> 1615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1615 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1660 -> 1676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1676 -> 1689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1689 -> 1697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1697 -> 1703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1703 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1706 -> 1715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1715 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1721 -> 1729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1729 -> 1735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1741 -> 1760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1760 -> 1767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1767 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1770 -> 1774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1774 -> 1780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1786 -> 1807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1793 -> 1795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1795 -> 1797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1807 -> 1814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1814 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1817 -> 1825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1825 -> 1831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1841 -> 1855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1855 -> 3738  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1872 -> 1876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1876 -> 1882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
