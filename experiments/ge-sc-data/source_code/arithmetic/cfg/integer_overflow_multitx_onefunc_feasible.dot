digraph  {
13 [label="2_ uint256 private initialized = 0;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ uint256 public count = 1;\n19-new_variable-4-4", method="", type_label=new_variable];
25 [label="4_ function run(uint256 input) public {\n        if (initialized == 0) {\n            initialized = 1;\n            return;\n        }\n        count -= input;\n    }\n25-function_definition-5-11", method="run(uint256 input)", type_label=function_definition];
33 [label="5_ if_initialized == 0\n33-if-6-9", method="run(uint256 input)", type_label=if];
75 [label="5_ end_if", method="run(uint256 input)", type_label=end_if];
38 [label="6_ initialized = 1;\n38-expression_statement-7-7", method="run(uint256 input)", type_label=expression_statement];
42 [label="7_ return;\n42-return-8-8", method="run(uint256 input)", type_label=return];
43 [label="9_ count -= input;\n43-expression_statement-10-10", method="run(uint256 input)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 19  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 38  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
33 -> 75  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
75 -> 43  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 42  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 75  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
42 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
