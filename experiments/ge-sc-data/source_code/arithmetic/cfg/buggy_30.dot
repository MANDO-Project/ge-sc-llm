digraph  {
13 [label="2_ function name() external view returns (string memory);\n13-function_definition-3-3", method="name()", type_label=function_definition];
21 [label="3_ function symbol() external view returns (string memory);\n21-function_definition-4-4", method="symbol()", type_label=function_definition];
29 [label="4_ function granularity() external view returns (uint256);\n29-function_definition-5-5", method="granularity()", type_label=function_definition];
37 [label="5_ function totalSupply() external view returns (uint256);\n37-function_definition-6-6", method="totalSupply()", type_label=function_definition];
45 [label="6_ function balanceOf(address owner) external view returns (uint256);\n45-function_definition-7-7", method="balanceOf(address owner)", type_label=function_definition];
57 [label="7_ function send(address recipient, uint256 amount, bytes calldata data) external;\n57-function_definition-8-8", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=function_definition];
72 [label="8_ function burn(uint256 amount, bytes calldata data) external;\n72-function_definition-9-9", method="burn(uint256 amount,bytes calldata data)", type_label=function_definition];
83 [label="9_ function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n83-function_definition-10-10", method="isOperatorFor(address operator,address tokenHolder)", type_label=function_definition];
99 [label="10_ function authorizeOperator(address operator) external;\n99-function_definition-11-11", method="authorizeOperator(address operator)", type_label=function_definition];
106 [label="11_ function revokeOperator(address operator) external;\n106-function_definition-12-12", method="revokeOperator(address operator)", type_label=function_definition];
113 [label="12_ function defaultOperators() external view returns (address[] memory);\n113-function_definition-13-13", method="defaultOperators()", type_label=function_definition];
122 [label="13_ function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n122-function_definition-14-20", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
145 [label="20_ function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n145-function_definition-21-26", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
257 [label="40_ function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n257-function_definition-41-48", method="tokensReceived(address operator,address from,address to,uint amount,bytes calldata userData,bytes calldata operatorData)", type_label=function_definition];
287 [label="50_ function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n287-function_definition-51-58", method="tokensToSend(address operator,address from,address to,uint amount,bytes calldata userData,bytes calldata operatorData)", type_label=function_definition];
317 [label="60_ function totalSupply() external view returns (uint256);\n317-function_definition-61-61", method="totalSupply()", type_label=function_definition];
325 [label="61_ function balanceOf(address account) external view returns (uint256);\n325-function_definition-62-62", method="balanceOf(address account)", type_label=function_definition];
337 [label="62_ function transfer(address recipient, uint256 amount) external returns (bool);\n337-function_definition-63-63", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
352 [label="63_ function allowance(address owner, address spender) external view returns (uint256);\n352-function_definition-64-64", method="allowance(address owner,address spender)", type_label=function_definition];
368 [label="64_ function approve(address spender, uint256 amount) external returns (bool);\n368-function_definition-65-65", method="approve(address spender,uint256 amount)", type_label=function_definition];
383 [label="65_ function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n383-function_definition-66-66", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
433 [label="70_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n433-function_definition-71-75", method="add(uint256 a,uint256 b)", type_label=function_definition];
450 [label="71_ uint256 c = a + b;\n450-new_variable-72-72", method="add(uint256 a,uint256 b)", type_label=new_variable];
458 [label="72_ require(c >= a, \"SafeMath: addition overflow\");\n458-expression_statement-73-73", method="add(uint256 a,uint256 b)", type_label=expression_statement];
468 [label="73_ return c;\n468-return-74-74", method="add(uint256 a,uint256 b)", type_label=return];
470 [label="75_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n470-function_definition-76-80", method="sub(uint256 a,uint256 b)", type_label=function_definition];
487 [label="76_ require(b <= a, \"SafeMath: subtraction overflow\");\n487-expression_statement-77-77", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
497 [label="77_ uint256 c = a - b;\n497-new_variable-78-78", method="sub(uint256 a,uint256 b)", type_label=new_variable];
505 [label="78_ return c;\n505-return-79-79", method="sub(uint256 a,uint256 b)", type_label=return];
507 [label="80_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n507-function_definition-81-88", method="mul(uint256 a,uint256 b)", type_label=function_definition];
524 [label="81_ if_a == 0\n524-if-82-84", method="mul(uint256 a,uint256 b)", type_label=if];
4779 [label="81_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
529 [label="82_ return 0;\n529-return-83-83", method="mul(uint256 a,uint256 b)", type_label=return];
531 [label="84_ uint256 c = a * b;\n531-new_variable-85-85", method="mul(uint256 a,uint256 b)", type_label=new_variable];
539 [label="85_ require(c / a == b, \"SafeMath: multiplication overflow\");\n539-expression_statement-86-86", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
551 [label="86_ return c;\n551-return-87-87", method="mul(uint256 a,uint256 b)", type_label=return];
553 [label="88_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n553-function_definition-89-93", method="div(uint256 a,uint256 b)", type_label=function_definition];
570 [label="89_ require(b > 0, \"SafeMath: division by zero\");\n570-expression_statement-90-90", method="div(uint256 a,uint256 b)", type_label=expression_statement];
580 [label="90_ uint256 c = a / b;\n580-new_variable-91-91", method="div(uint256 a,uint256 b)", type_label=new_variable];
588 [label="91_ return c;\n588-return-92-92", method="div(uint256 a,uint256 b)", type_label=return];
590 [label="93_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n590-function_definition-94-97", method="mod(uint256 a,uint256 b)", type_label=function_definition];
607 [label="94_ require(b != 0, \"SafeMath: modulo by zero\");\n607-expression_statement-95-95", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
617 [label="95_ return a % b;\n617-return-96-96", method="mod(uint256 a,uint256 b)", type_label=return];
624 [label="99_ function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n624-function_definition-100-104", method="isContract(address account)", type_label=function_definition];
637 [label="100_ uint256 size;\n637-new_variable-101-101", method="isContract(address account)", type_label=new_variable];
652 [label="102_ return size > 0;\n652-return-103-103", method="isContract(address account)", type_label=return];
659 [label="106_ function setManager(address account, address newManager) external;\n659-function_definition-107-107", method="setManager(address account,address newManager)", type_label=function_definition];
670 [label="107_ function getManager(address account) external view returns (address);\n670-function_definition-108-108", method="getManager(address account)", type_label=function_definition];
682 [label="108_ function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n682-function_definition-109-109", method="setInterfaceImplementer(address account,bytes32 interfaceHash,address implementer)", type_label=function_definition];
697 [label="109_ function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n697-function_definition-110-110", method="getInterfaceImplementer(address account,bytes32 interfaceHash)", type_label=function_definition];
713 [label="110_ function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n713-function_definition-111-111", method="interfaceHash(string calldata interfaceName)", type_label=function_definition];
725 [label="111_ function updateERC165Cache(address account, bytes4 interfaceId) external;\n725-function_definition-112-112", method="updateERC165Cache(address account,bytes4 interfaceId)", type_label=function_definition];
736 [label="112_ function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n736-function_definition-113-113", method="implementsERC165Interface(address account,bytes4 interfaceId)", type_label=function_definition];
752 [label="113_ function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n752-function_definition-114-114", method="implementsERC165InterfaceNoCache(address account,bytes4 interfaceId)", type_label=function_definition];
811 [label="120_ IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n811-new_variable-121-121", method="", type_label=new_variable];
821 [label="121_ mapping(address => uint256) private _balances;\n821-new_variable-122-122", method="", type_label=new_variable];
828 [label="122_ uint256 private _totalSupply;\n828-new_variable-123-123", method="", type_label=new_variable];
833 [label="123_ string private _name;\n833-new_variable-124-124", method="", type_label=new_variable];
838 [label="124_ string private _symbol;\n838-new_variable-125-125", method="", type_label=new_variable];
843 [label="125_ bytes32 constant private TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n843-new_variable-126-127", method="", type_label=new_variable];
849 [label="127_ bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n849-new_variable-128-129", method="", type_label=new_variable];
855 [label="129_ address[] private _defaultOperatorsArray;\n855-new_variable-130-130", method="", type_label=new_variable];
861 [label="130_ mapping(address => bool) private _defaultOperators;\n861-new_variable-131-131", method="", type_label=new_variable];
868 [label="131_ mapping(address => mapping(address => bool)) private _operators;\n868-new_variable-132-132", method="", type_label=new_variable];
877 [label="132_ mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n877-new_variable-133-133", method="", type_label=new_variable];
886 [label="133_ mapping (address => mapping (address => uint256)) private _allowances;\n886-new_variable-134-134", method="", type_label=new_variable];
910 [label="139_ _name = name;\n910-expression_statement-140-140", method="", type_label=expression_statement];
914 [label="140_ _symbol = symbol;\n914-expression_statement-141-141", method="", type_label=expression_statement];
918 [label="141_ _defaultOperatorsArray = defaultOperators;\n918-expression_statement-142-142", method="", type_label=expression_statement];
922 [label="142_ for(i < _defaultOperatorsArray.length;;i++)\n922-for-143-145", method="", type_label=for];
5177 [label="142_ end_loop", method="", type_label=end_loop];
935 [label="142_ i++\n935-expression_statement-143-143", method="", type_label=expression_statement];
938 [label="143_ _defaultOperators[_defaultOperatorsArray[i]] = true;\n938-expression_statement-144-144", method="", type_label=expression_statement];
947 [label="145_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n947-expression_statement-146-146", method="", type_label=expression_statement];
966 [label="146_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n966-expression_statement-147-147", method="", type_label=expression_statement];
985 [label="148_ function name() public view returns (string memory) {\n        return _name;\n    }\n985-function_definition-149-151", method="name()", type_label=function_definition];
994 [label="149_ return _name;\n994-return-150-150", method="name()", type_label=return];
996 [label="151_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n996-function_definition-152-154", method="symbol()", type_label=function_definition];
1005 [label="152_ return _symbol;\n1005-return-153-153", method="symbol()", type_label=return];
1007 [label="154_ function decimals() public pure returns (uint8) {\n        return 18;\n    }\n1007-function_definition-155-157", method="decimals()", type_label=function_definition];
1016 [label="155_ return 18;\n1016-return-156-156", method="decimals()", type_label=return];
1018 [label="157_ function granularity() public view returns (uint256) {\n        return 1;\n    }\n1018-function_definition-158-160", method="granularity()", type_label=function_definition];
1027 [label="158_ return 1;\n1027-return-159-159", method="granularity()", type_label=return];
1029 [label="160_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1029-function_definition-161-163", method="totalSupply()", type_label=function_definition];
1038 [label="161_ return _totalSupply;\n1038-return-162-162", method="totalSupply()", type_label=return];
1040 [label="163_ function balanceOf(address tokenHolder) public view returns (uint256) {\n        return _balances[tokenHolder];\n    }\n1040-function_definition-164-166", method="balanceOf(address tokenHolder)", type_label=function_definition];
1053 [label="164_ return _balances[tokenHolder];\n1053-return-165-165", method="balanceOf(address tokenHolder)", type_label=return];
1057 [label="166_ function send(address recipient, uint256 amount, bytes calldata data) external {\n        _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n    }\n1057-function_definition-167-169", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=function_definition];
1073 [label="167_ _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n1073-expression_statement-168-168", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=expression_statement];
1096 [label="169_ function transfer(address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        address from = msg.sender;\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n        _move(from, from, recipient, amount, \"\", \"\");\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n1096-function_definition-170-177", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
1112 [label="170_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n1112-expression_statement-171-171", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1124 [label="171_ address from = msg.sender;\n1124-new_variable-172-172", method="transfer(address recipient,uint256 amount)", type_label=new_variable];
1132 [label="172_ _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n1132-expression_statement-173-173", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1149 [label="173_ _move(from, from, recipient, amount, \"\", \"\");\n1149-expression_statement-174-174", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1166 [label="174_ _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n1166-expression_statement-175-175", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1186 [label="175_ return true;\n1186-return-176-176", method="transfer(address recipient,uint256 amount)", type_label=return];
1189 [label="177_ function burn(uint256 amount, bytes calldata data) external {\n        _burn(msg.sender, msg.sender, amount, data, \"\");\n    }\n1189-function_definition-178-180", method="burn(uint256 amount,bytes calldata data)", type_label=function_definition];
1201 [label="178_ _burn(msg.sender, msg.sender, amount, data, \"\");\n1201-expression_statement-179-179", method="burn(uint256 amount,bytes calldata data)", type_label=expression_statement];
1219 [label="180_ function isOperatorFor(\n        address operator,\n        address tokenHolder\n    ) public view returns (bool) {\n        return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n    }\n1219-function_definition-181-188", method="isOperatorFor(address operator,address tokenHolder)", type_label=function_definition];
1236 [label="184_ return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n1236-return-185-187", method="isOperatorFor(address operator,address tokenHolder)", type_label=return];
1258 [label="188_ mapping(address => uint) balances_intou18;\n1258-new_variable-189-189", method="", type_label=new_variable];
1264 [label="189_ function transfer_intou18(address _to, uint _value) public returns (bool) {\n    require(balances_intou18[msg.sender] - _value >= 0);   \n    balances_intou18[msg.sender] -= _value;   \n    balances_intou18[_to] += _value;   \n    return true;\n  }\n1264-function_definition-190-195", method="transfer_intou18(address _to,uint _value)", type_label=function_definition];
1280 [label="190_ require(balances_intou18[msg.sender] - _value >= 0);\n1280-expression_statement-191-191", method="transfer_intou18(address _to,uint _value)", type_label=expression_statement];
1293 [label="191_ balances_intou18[msg.sender] -= _value;\n1293-expression_statement-192-192", method="transfer_intou18(address _to,uint _value)", type_label=expression_statement];
1301 [label="192_ balances_intou18[_to] += _value;\n1301-expression_statement-193-193", method="transfer_intou18(address _to,uint _value)", type_label=expression_statement];
1307 [label="193_ return true;\n1307-return-194-194", method="transfer_intou18(address _to,uint _value)", type_label=return];
1310 [label="195_ function authorizeOperator(address operator) external {\n        require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n        if (_defaultOperators[operator]) {\n            delete _revokedDefaultOperators[msg.sender][operator];\n        } else {\n            _operators[msg.sender][operator] = true;\n        }\n        emit AuthorizedOperator(operator, msg.sender);\n    }\n1310-function_definition-196-204", method="authorizeOperator(address operator)", type_label=function_definition];
1318 [label="196_ require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n1318-expression_statement-197-197", method="authorizeOperator(address operator)", type_label=expression_statement];
1330 [label="197_ if\n1330-if-198-202", method="authorizeOperator(address operator)", type_label=if];
5585 [label="197_ end_if", method="authorizeOperator(address operator)", type_label=end_if];
1335 [label="198_ delete _revokedDefaultOperators[msg.sender][operator];\n1335-expression_statement-199-199", method="authorizeOperator(address operator)", type_label=expression_statement];
1345 [label="200_ _operators[msg.sender][operator] = true;\n1345-expression_statement-201-201", method="authorizeOperator(address operator)", type_label=expression_statement];
1364 [label="204_ mapping(address => uint) public lockTime_intou29;\n1364-new_variable-205-205", method="", type_label=new_variable];
1371 [label="205_ function increaseLockTime_intou29(uint _secondsToIncrease) public {\n        lockTime_intou29[msg.sender] += _secondsToIncrease;   \n    }\n1371-function_definition-206-208", method="increaseLockTime_intou29(uint _secondsToIncrease)", type_label=function_definition];
1379 [label="206_ lockTime_intou29[msg.sender] += _secondsToIncrease;\n1379-expression_statement-207-207", method="increaseLockTime_intou29(uint _secondsToIncrease)", type_label=expression_statement];
1387 [label="208_ function withdraw_intou29() public {\n        require(now > lockTime_intou29[msg.sender]);    \n        uint transferValue_intou29 = 10;           \n        msg.sender.transfer(transferValue_intou29);\n    }\n1387-function_definition-209-213", method="withdraw_intou29()", type_label=function_definition];
1391 [label="209_ require(now > lockTime_intou29[msg.sender]);\n1391-expression_statement-210-210", method="withdraw_intou29()", type_label=expression_statement];
1402 [label="210_ uint transferValue_intou29 = 10;\n1402-new_variable-211-211", method="withdraw_intou29()", type_label=new_variable];
1408 [label="211_ msg.sender.transfer(transferValue_intou29);\n1408-expression_statement-212-212", method="withdraw_intou29()", type_label=expression_statement];
1417 [label="213_ function revokeOperator(address operator) external {\n        require(operator != msg.sender, \"ERC777: revoking self as operator\");\n        if (_defaultOperators[operator]) {\n            _revokedDefaultOperators[msg.sender][operator] = true;\n        } else {\n            delete _operators[msg.sender][operator];\n        }\n        emit RevokedOperator(operator, msg.sender);\n    }\n1417-function_definition-214-222", method="revokeOperator(address operator)", type_label=function_definition];
1425 [label="214_ require(operator != msg.sender, \"ERC777: revoking self as operator\");\n1425-expression_statement-215-215", method="revokeOperator(address operator)", type_label=expression_statement];
1437 [label="215_ if\n1437-if-216-220", method="revokeOperator(address operator)", type_label=if];
5692 [label="215_ end_if", method="revokeOperator(address operator)", type_label=end_if];
1442 [label="216_ _revokedDefaultOperators[msg.sender][operator] = true;\n1442-expression_statement-217-217", method="revokeOperator(address operator)", type_label=expression_statement];
1454 [label="218_ delete _operators[msg.sender][operator];\n1454-expression_statement-219-219", method="revokeOperator(address operator)", type_label=expression_statement];
1471 [label="222_ mapping(address => uint) balances_intou6;\n1471-new_variable-223-223", method="", type_label=new_variable];
1477 [label="223_ function transfer_intou62(address _to, uint _value) public returns (bool) {\n    require(balances_intou6[msg.sender] - _value >= 0);   \n    balances_intou6[msg.sender] -= _value;   \n    balances_intou6[_to] += _value;   \n    return true;\n  }\n1477-function_definition-224-229", method="transfer_intou62(address _to,uint _value)", type_label=function_definition];
1493 [label="224_ require(balances_intou6[msg.sender] - _value >= 0);\n1493-expression_statement-225-225", method="transfer_intou62(address _to,uint _value)", type_label=expression_statement];
1506 [label="225_ balances_intou6[msg.sender] -= _value;\n1506-expression_statement-226-226", method="transfer_intou62(address _to,uint _value)", type_label=expression_statement];
1514 [label="226_ balances_intou6[_to] += _value;\n1514-expression_statement-227-227", method="transfer_intou62(address _to,uint _value)", type_label=expression_statement];
1520 [label="227_ return true;\n1520-return-228-228", method="transfer_intou62(address _to,uint _value)", type_label=return];
1523 [label="229_ function defaultOperators() public view returns (address[] memory) {\n        return _defaultOperatorsArray;\n    }\n1523-function_definition-230-232", method="defaultOperators()", type_label=function_definition];
1533 [label="230_ return _defaultOperatorsArray;\n1533-return-231-231", method="defaultOperators()", type_label=return];
1535 [label="232_ function bug_intou16(uint8 p_intou16) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou16;    \n}\n1535-function_definition-233-236", method="bug_intou16(uint8 p_intou16)", type_label=function_definition];
1543 [label="233_ uint8 vundflw1=0;\n1543-new_variable-234-234", method="bug_intou16(uint8 p_intou16)", type_label=new_variable];
1549 [label="234_ vundflw1 = vundflw1 + p_intou16;\n1549-expression_statement-235-235", method="bug_intou16(uint8 p_intou16)", type_label=expression_statement];
1555 [label="236_ function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    )\n    external\n    {\n        require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n        _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n    }\n1555-function_definition-237-248", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
1579 [label="245_ require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n1579-expression_statement-246-246", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1594 [label="246_ _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n1594-expression_statement-247-247", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1614 [label="248_ function bug_intou24(uint8 p_intou24) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou24;    \n}\n1614-function_definition-249-252", method="bug_intou24(uint8 p_intou24)", type_label=function_definition];
1622 [label="249_ uint8 vundflw1=0;\n1622-new_variable-250-250", method="bug_intou24(uint8 p_intou24)", type_label=new_variable];
1628 [label="250_ vundflw1 = vundflw1 + p_intou24;\n1628-expression_statement-251-251", method="bug_intou24(uint8 p_intou24)", type_label=expression_statement];
1634 [label="252_ function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external {\n        require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n        _burn(msg.sender, account, amount, data, operatorData);\n    }\n1634-function_definition-253-256", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
1654 [label="253_ require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n1654-expression_statement-254-254", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1669 [label="254_ _burn(msg.sender, account, amount, data, operatorData);\n1669-expression_statement-255-255", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1684 [label="256_ mapping(address => uint) public lockTime_intou5;\n1684-new_variable-257-257", method="", type_label=new_variable];
1691 [label="257_ function increaseLockTime_intou5(uint _secondsToIncrease) public {\n        lockTime_intou5[msg.sender] += _secondsToIncrease;   \n    }\n1691-function_definition-258-260", method="increaseLockTime_intou5(uint _secondsToIncrease)", type_label=function_definition];
1699 [label="258_ lockTime_intou5[msg.sender] += _secondsToIncrease;\n1699-expression_statement-259-259", method="increaseLockTime_intou5(uint _secondsToIncrease)", type_label=expression_statement];
1707 [label="260_ function withdraw_intou5() public {\n        require(now > lockTime_intou5[msg.sender]);    \n        uint transferValue_intou5 = 10;           \n        msg.sender.transfer(transferValue_intou5);\n    }\n1707-function_definition-261-265", method="withdraw_intou5()", type_label=function_definition];
1711 [label="261_ require(now > lockTime_intou5[msg.sender]);\n1711-expression_statement-262-262", method="withdraw_intou5()", type_label=expression_statement];
1722 [label="262_ uint transferValue_intou5 = 10;\n1722-new_variable-263-263", method="withdraw_intou5()", type_label=new_variable];
1728 [label="263_ msg.sender.transfer(transferValue_intou5);\n1728-expression_statement-264-264", method="withdraw_intou5()", type_label=expression_statement];
1737 [label="265_ function allowance(address holder, address spender) public view returns (uint256) {\n        return _allowances[holder][spender];\n    }\n1737-function_definition-266-268", method="allowance(address holder,address spender)", type_label=function_definition];
1754 [label="266_ return _allowances[holder][spender];\n1754-return-267-267", method="allowance(address holder,address spender)", type_label=return];
1760 [label="268_ function bug_intou15() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1760-function_definition-269-272", method="bug_intou15()", type_label=function_definition];
1764 [label="269_ uint8 vundflw =0;\n1764-new_variable-270-270", method="bug_intou15()", type_label=new_variable];
1770 [label="270_ vundflw = vundflw -10;\n1770-expression_statement-271-271", method="bug_intou15()", type_label=expression_statement];
1776 [label="272_ function approve(address spender, uint256 value) external returns (bool) {\n        address holder = msg.sender;\n        _approve(holder, spender, value);\n        return true;\n    }\n1776-function_definition-273-277", method="approve(address spender,uint256 value)", type_label=function_definition];
1792 [label="273_ address holder = msg.sender;\n1792-new_variable-274-274", method="approve(address spender,uint256 value)", type_label=new_variable];
1800 [label="274_ _approve(holder, spender, value);\n1800-expression_statement-275-275", method="approve(address spender,uint256 value)", type_label=expression_statement];
1809 [label="275_ return true;\n1809-return-276-276", method="approve(address spender,uint256 value)", type_label=return];
1812 [label="277_ function bug_intou28(uint8 p_intou28) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou28;    \n}\n1812-function_definition-278-281", method="bug_intou28(uint8 p_intou28)", type_label=function_definition];
1820 [label="278_ uint8 vundflw1=0;\n1820-new_variable-279-279", method="bug_intou28(uint8 p_intou28)", type_label=new_variable];
1826 [label="279_ vundflw1 = vundflw1 + p_intou28;\n1826-expression_statement-280-280", method="bug_intou28(uint8 p_intou28)", type_label=expression_statement];
1832 [label="281_ function transferFrom(address holder, address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\n        address spender = msg.sender;\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n        _move(spender, holder, recipient, amount, \"\", \"\");\n        _approve(holder, spender, _allowances[holder][spender].sub(amount));\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n1832-function_definition-282-291", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=function_definition];
1852 [label="282_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n1852-expression_statement-283-283", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1864 [label="283_ require(holder != address(0), \"ERC777: transfer from the zero address\");\n1864-expression_statement-284-284", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1876 [label="284_ address spender = msg.sender;\n1876-new_variable-285-285", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=new_variable];
1884 [label="285_ _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n1884-expression_statement-286-286", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1901 [label="286_ _move(spender, holder, recipient, amount, \"\", \"\");\n1901-expression_statement-287-287", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1918 [label="287_ _approve(holder, spender, _allowances[holder][spender].sub(amount));\n1918-expression_statement-288-288", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1936 [label="288_ _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n1936-expression_statement-289-289", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1956 [label="289_ return true;\n1956-return-290-290", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=return];
1959 [label="291_ mapping(address => uint) balances_intou34;\n1959-new_variable-292-292", method="", type_label=new_variable];
1965 [label="292_ function transfer_intou34(address _to, uint _value) public returns (bool) {\n    require(balances_intou34[msg.sender] - _value >= 0);   \n    balances_intou34[msg.sender] -= _value;   \n    balances_intou34[_to] += _value;   \n    return true;\n  }\n1965-function_definition-293-298", method="transfer_intou34(address _to,uint _value)", type_label=function_definition];
1981 [label="293_ require(balances_intou34[msg.sender] - _value >= 0);\n1981-expression_statement-294-294", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
1994 [label="294_ balances_intou34[msg.sender] -= _value;\n1994-expression_statement-295-295", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
2002 [label="295_ balances_intou34[_to] += _value;\n2002-expression_statement-296-296", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
2008 [label="296_ return true;\n2008-return-297-297", method="transfer_intou34(address _to,uint _value)", type_label=return];
2011 [label="298_ function _mint(\n        address operator,\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n    internal\n    {\n        require(account != address(0), \"ERC777: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n2011-function_definition-299-314", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2035 [label="307_ require(account != address(0), \"ERC777: mint to the zero address\");\n2035-expression_statement-308-308", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2047 [label="308_ _totalSupply = _totalSupply.add(amount);\n2047-expression_statement-309-309", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2056 [label="309_ _balances[account] = _balances[account].add(amount);\n2056-expression_statement-310-310", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2069 [label="310_ _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n2069-expression_statement-311-311", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2111 [label="314_ mapping(address => uint) public lockTime_intou21;\n2111-new_variable-315-315", method="", type_label=new_variable];
2118 [label="315_ function increaseLockTime_intou21(uint _secondsToIncrease) public {\n        lockTime_intou21[msg.sender] += _secondsToIncrease;   \n    }\n2118-function_definition-316-318", method="increaseLockTime_intou21(uint _secondsToIncrease)", type_label=function_definition];
2126 [label="316_ lockTime_intou21[msg.sender] += _secondsToIncrease;\n2126-expression_statement-317-317", method="increaseLockTime_intou21(uint _secondsToIncrease)", type_label=expression_statement];
2134 [label="318_ function withdraw_intou21() public {\n        require(now > lockTime_intou21[msg.sender]);    \n        uint transferValue_intou21 = 10;           \n        msg.sender.transfer(transferValue_intou21);\n    }\n2134-function_definition-319-323", method="withdraw_intou21()", type_label=function_definition];
2138 [label="319_ require(now > lockTime_intou21[msg.sender]);\n2138-expression_statement-320-320", method="withdraw_intou21()", type_label=expression_statement];
2149 [label="320_ uint transferValue_intou21 = 10;\n2149-new_variable-321-321", method="withdraw_intou21()", type_label=new_variable];
2155 [label="321_ msg.sender.transfer(transferValue_intou21);\n2155-expression_statement-322-322", method="withdraw_intou21()", type_label=expression_statement];
2164 [label="323_ function _send(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        require(from != address(0), \"ERC777: send from the zero address\");\n        require(to != address(0), \"ERC777: send to the zero address\");\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n        _move(operator, from, to, amount, userData, operatorData);\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n2164-function_definition-324-340", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=function_definition];
2196 [label="334_ require(from != address(0), \"ERC777: send from the zero address\");\n2196-expression_statement-335-335", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2208 [label="335_ require(to != address(0), \"ERC777: send to the zero address\");\n2208-expression_statement-336-336", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2220 [label="336_ _callTokensToSend(operator, from, to, amount, userData, operatorData);\n2220-expression_statement-337-337", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2235 [label="337_ _move(operator, from, to, amount, userData, operatorData);\n2235-expression_statement-338-338", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2250 [label="338_ _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n2250-expression_statement-339-339", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2267 [label="340_ mapping(address => uint) balances_intou10;\n2267-new_variable-341-341", method="", type_label=new_variable];
2273 [label="341_ function transfer_intou10(address _to, uint _value) public returns (bool) {\n    require(balances_intou10[msg.sender] - _value >= 0);   \n    balances_intou10[msg.sender] -= _value;   \n    balances_intou10[_to] += _value;   \n    return true;\n  }\n2273-function_definition-342-347", method="transfer_intou10(address _to,uint _value)", type_label=function_definition];
2289 [label="342_ require(balances_intou10[msg.sender] - _value >= 0);\n2289-expression_statement-343-343", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
2302 [label="343_ balances_intou10[msg.sender] -= _value;\n2302-expression_statement-344-344", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
2310 [label="344_ balances_intou10[_to] += _value;\n2310-expression_statement-345-345", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
2316 [label="345_ return true;\n2316-return-346-346", method="transfer_intou10(address _to,uint _value)", type_label=return];
2319 [label="347_ function _burn(\n        address operator,\n        address from,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n        private\n    {\n        require(from != address(0), \"ERC777: burn from the zero address\");\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[from] = _balances[from].sub(amount);\n        emit Burned(operator, from, amount, data, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n2319-function_definition-348-363", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=function_definition];
2343 [label="356_ require(from != address(0), \"ERC777: burn from the zero address\");\n2343-expression_statement-357-357", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2355 [label="357_ _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n2355-expression_statement-358-358", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2372 [label="358_ _totalSupply = _totalSupply.sub(amount);\n2372-expression_statement-359-359", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2381 [label="359_ _balances[from] = _balances[from].sub(amount);\n2381-expression_statement-360-360", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2416 [label="363_ mapping(address => uint) balances_intou22;\n2416-new_variable-364-364", method="", type_label=new_variable];
2422 [label="364_ function transfer_intou22(address _to, uint _value) public returns (bool) {\n    require(balances_intou22[msg.sender] - _value >= 0);   \n    balances_intou22[msg.sender] -= _value;   \n    balances_intou22[_to] += _value;   \n    return true;\n  }\n2422-function_definition-365-370", method="transfer_intou22(address _to,uint _value)", type_label=function_definition];
2438 [label="365_ require(balances_intou22[msg.sender] - _value >= 0);\n2438-expression_statement-366-366", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
2451 [label="366_ balances_intou22[msg.sender] -= _value;\n2451-expression_statement-367-367", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
2459 [label="367_ balances_intou22[_to] += _value;\n2459-expression_statement-368-368", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
2465 [label="368_ return true;\n2465-return-369-369", method="transfer_intou22(address _to,uint _value)", type_label=return];
2468 [label="370_ function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount);\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n2468-function_definition-371-385", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2496 [label="380_ _balances[from] = _balances[from].sub(amount);\n2496-expression_statement-381-381", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2509 [label="381_ _balances[to] = _balances[to].add(amount);\n2509-expression_statement-382-382", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2544 [label="385_ function bug_intou12(uint8 p_intou12) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou12;    \n}\n2544-function_definition-386-389", method="bug_intou12(uint8 p_intou12)", type_label=function_definition];
2552 [label="386_ uint8 vundflw1=0;\n2552-new_variable-387-387", method="bug_intou12(uint8 p_intou12)", type_label=new_variable];
2558 [label="387_ vundflw1 = vundflw1 + p_intou12;\n2558-expression_statement-388-388", method="bug_intou12(uint8 p_intou12)", type_label=expression_statement];
2564 [label="389_ function _approve(address holder, address spender, uint256 value) private {\n        require(spender != address(0), \"ERC777: approve to the zero address\");\n        _allowances[holder][spender] = value;\n        emit Approval(holder, spender, value);\n    }\n2564-function_definition-390-394", method="_approve(address holder,address spender,uint256 value)", type_label=function_definition];
2580 [label="390_ require(spender != address(0), \"ERC777: approve to the zero address\");\n2580-expression_statement-391-391", method="_approve(address holder,address spender,uint256 value)", type_label=expression_statement];
2592 [label="391_ _allowances[holder][spender] = value;\n2592-expression_statement-392-392", method="_approve(address holder,address spender,uint256 value)", type_label=expression_statement];
2608 [label="394_ function bug_intou11() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n2608-function_definition-395-398", method="bug_intou11()", type_label=function_definition];
2612 [label="395_ uint8 vundflw =0;\n2612-new_variable-396-396", method="bug_intou11()", type_label=new_variable];
2618 [label="396_ vundflw = vundflw -10;\n2618-expression_statement-397-397", method="bug_intou11()", type_label=expression_statement];
2624 [label="398_ function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n2624-function_definition-399-413", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2652 [label="408_ address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n2652-new_variable-409-409", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=new_variable];
2665 [label="409_ if_implementer != address(0)\n2665-if-410-412", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=if];
6920 [label="409_ end_if", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=end_if];
2672 [label="410_ IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n2672-expression_statement-411-411", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2692 [label="413_ mapping(address => uint) public lockTime_intou1;\n2692-new_variable-414-414", method="", type_label=new_variable];
2699 [label="414_ function increaseLockTime_intou1(uint _secondsToIncrease) public {\n        lockTime_intou1[msg.sender] += _secondsToIncrease;   \n    }\n2699-function_definition-415-417", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=function_definition];
2707 [label="415_ lockTime_intou1[msg.sender] += _secondsToIncrease;\n2707-expression_statement-416-416", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=expression_statement];
2715 [label="417_ function withdraw_ovrflow1() public {\n        require(now > lockTime_intou1[msg.sender]);    \n        uint transferValue_intou1 = 10;           \n        msg.sender.transfer(transferValue_intou1);\n    }\n2715-function_definition-418-422", method="withdraw_ovrflow1()", type_label=function_definition];
2719 [label="418_ require(now > lockTime_intou1[msg.sender]);\n2719-expression_statement-419-419", method="withdraw_ovrflow1()", type_label=expression_statement];
2730 [label="419_ uint transferValue_intou1 = 10;\n2730-new_variable-420-420", method="withdraw_ovrflow1()", type_label=new_variable];
2736 [label="420_ msg.sender.transfer(transferValue_intou1);\n2736-expression_statement-421-421", method="withdraw_ovrflow1()", type_label=expression_statement];
2745 [label="422_ function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n        }\n    }\n2745-function_definition-423-440", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=function_definition];
2777 [label="433_ address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n2777-new_variable-434-434", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=new_variable];
2790 [label="434_ if_implementer != address(0)\n2790-if-435-439", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=if];
7045 [label="434_ end_if", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=end_if];
2797 [label="435_ IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n2797-expression_statement-436-436", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2817 [label="436_ if\n2817-if-437-439", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=if];
2820 [label="437_ require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n2820-expression_statement-438-438", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2832 [label="440_ mapping(address => uint) balances_intou2;\n2832-new_variable-441-441", method="", type_label=new_variable];
2838 [label="441_ function transfer_undrflow2(address _to, uint _value) public returns (bool) {\n    require(balances_intou2[msg.sender] - _value >= 0);   \n    balances_intou2[msg.sender] -= _value;   \n    balances_intou2[_to] += _value;   \n    return true;\n  }\n2838-function_definition-442-447", method="transfer_undrflow2(address _to,uint _value)", type_label=function_definition];
2854 [label="442_ require(balances_intou2[msg.sender] - _value >= 0);\n2854-expression_statement-443-443", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
2867 [label="443_ balances_intou2[msg.sender] -= _value;\n2867-expression_statement-444-444", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
2875 [label="444_ balances_intou2[_to] += _value;\n2875-expression_statement-445-445", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
2881 [label="445_ return true;\n2881-return-446-446", method="transfer_undrflow2(address _to,uint _value)", type_label=return];
2887 [label="449_ struct Role {\n        mapping (address => bool) bearer;\n    }\n2887-expression_statement-450-452", method="Role()", type_label=expression_statement];
2895 [label="452_ function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n2895-function_definition-453-456", method="add(Role storage role,address account)", type_label=function_definition];
2908 [label="453_ require(!has(role, account), \"Roles: account already has role\");\n2908-expression_statement-454-454", method="add(Role storage role,address account)", type_label=expression_statement];
2922 [label="454_ role.bearer[account] = true;\n2922-expression_statement-455-455", method="add(Role storage role,address account)", type_label=expression_statement];
2931 [label="456_ function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n2931-function_definition-457-460", method="remove(Role storage role,address account)", type_label=function_definition];
2944 [label="457_ require(has(role, account), \"Roles: account does not have role\");\n2944-expression_statement-458-458", method="remove(Role storage role,address account)", type_label=expression_statement];
2957 [label="458_ role.bearer[account] = false;\n2957-expression_statement-459-459", method="remove(Role storage role,address account)", type_label=expression_statement];
2966 [label="460_ function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n2966-function_definition-461-464", method="has(Role storage role,address account)", type_label=function_definition];
2984 [label="461_ require(account != address(0), \"Roles: account is the zero address\");\n2984-expression_statement-462-462", method="has(Role storage role,address account)", type_label=expression_statement];
2996 [label="462_ return role.bearer[account];\n2996-return-463-463", method="has(Role storage role,address account)", type_label=return];
3012 [label="467_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n3012-function_definition-468-471", method="bug_intou35()", type_label=function_definition];
3016 [label="468_ uint8 vundflw =0;\n3016-new_variable-469-469", method="bug_intou35()", type_label=new_variable];
3022 [label="469_ vundflw = vundflw -10;\n3022-expression_statement-470-470", method="bug_intou35()", type_label=expression_statement];
3034 [label="472_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n3034-function_definition-473-476", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
3042 [label="473_ uint8 vundflw1=0;\n3042-new_variable-474-474", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
3048 [label="474_ vundflw1 = vundflw1 + p_intou40;\n3048-expression_statement-475-475", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
3060 [label="477_ Roles.Role private _minters;\n3060-new_variable-478-478", method="", type_label=new_variable];
3069 [label="479_ _addMinter(msg.sender);\n3069-expression_statement-480-480", method="", type_label=expression_statement];
3076 [label="481_ mapping(address => uint) public lockTime_intou17;\n3076-new_variable-482-482", method="", type_label=new_variable];
3083 [label="482_ function increaseLockTime_intou17(uint _secondsToIncrease) public {\n        lockTime_intou17[msg.sender] += _secondsToIncrease;   \n    }\n3083-function_definition-483-485", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=function_definition];
3091 [label="483_ lockTime_intou17[msg.sender] += _secondsToIncrease;\n3091-expression_statement-484-484", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=expression_statement];
3099 [label="485_ function withdraw_intou17() public {\n        require(now > lockTime_intou17[msg.sender]);    \n        uint transferValue_intou17 = 10;           \n        msg.sender.transfer(transferValue_intou17);\n    }\n3099-function_definition-486-490", method="withdraw_intou17()", type_label=function_definition];
3103 [label="486_ require(now > lockTime_intou17[msg.sender]);\n3103-expression_statement-487-487", method="withdraw_intou17()", type_label=expression_statement];
3114 [label="487_ uint transferValue_intou17 = 10;\n3114-new_variable-488-488", method="withdraw_intou17()", type_label=new_variable];
3120 [label="488_ msg.sender.transfer(transferValue_intou17);\n3120-expression_statement-489-489", method="withdraw_intou17()", type_label=expression_statement];
3129 [label="490_ modifier onlyMinter() {\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n3129-expression_statement-491-494", method="", type_label=expression_statement];
3132 [label="491_ require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n3132-expression_statement-492-492", method="", type_label=expression_statement];
3145 [label="492_ _;\n3145-expression_statement-493-493", method="", type_label=expression_statement];
3147 [label="494_ function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n3147-function_definition-495-497", method="isMinter(address account)", type_label=function_definition];
3160 [label="495_ return _minters.has(account);\n3160-return-496-496", method="isMinter(address account)", type_label=return];
3167 [label="497_ mapping(address => uint) public lockTime_intou37;\n3167-new_variable-498-498", method="", type_label=new_variable];
3174 [label="498_ function increaseLockTime_intou37(uint _secondsToIncrease) public {\n        lockTime_intou37[msg.sender] += _secondsToIncrease;   \n    }\n3174-function_definition-499-501", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=function_definition];
3182 [label="499_ lockTime_intou37[msg.sender] += _secondsToIncrease;\n3182-expression_statement-500-500", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=expression_statement];
3190 [label="501_ function withdraw_intou37() public {\n        require(now > lockTime_intou37[msg.sender]);    \n        uint transferValue_intou37 = 10;           \n        msg.sender.transfer(transferValue_intou37);\n    }\n3190-function_definition-502-506", method="withdraw_intou37()", type_label=function_definition];
3194 [label="502_ require(now > lockTime_intou37[msg.sender]);\n3194-expression_statement-503-503", method="withdraw_intou37()", type_label=expression_statement];
3205 [label="503_ uint transferValue_intou37 = 10;\n3205-new_variable-504-504", method="withdraw_intou37()", type_label=new_variable];
3211 [label="504_ msg.sender.transfer(transferValue_intou37);\n3211-expression_statement-505-505", method="withdraw_intou37()", type_label=expression_statement];
3220 [label="506_ function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n3220-function_definition-507-509", method="addMinter(address account)", type_label=function_definition];
3227 [label="506_ onlyMinter\n3227-expression_statement-507-507", method="addMinter(address account)", type_label=expression_statement];
3230 [label="507_ _addMinter(account);\n3230-expression_statement-508-508", method="addMinter(address account)", type_label=expression_statement];
3235 [label="509_ function bug_intou3() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n3235-function_definition-510-513", method="bug_intou3()", type_label=function_definition];
3239 [label="510_ uint8 vundflw =0;\n3239-new_variable-511-511", method="bug_intou3()", type_label=new_variable];
3245 [label="511_ vundflw = vundflw -10;\n3245-expression_statement-512-512", method="bug_intou3()", type_label=expression_statement];
3251 [label="513_ function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n3251-function_definition-514-516", method="renounceMinter()", type_label=function_definition];
3255 [label="514_ _removeMinter(msg.sender);\n3255-expression_statement-515-515", method="renounceMinter()", type_label=expression_statement];
3262 [label="516_ mapping(address => uint) public lockTime_intou9;\n3262-new_variable-517-517", method="", type_label=new_variable];
3269 [label="517_ function increaseLockTime_intou9(uint _secondsToIncrease) public {\n        lockTime_intou9[msg.sender] += _secondsToIncrease;   \n    }\n3269-function_definition-518-520", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=function_definition];
3277 [label="518_ lockTime_intou9[msg.sender] += _secondsToIncrease;\n3277-expression_statement-519-519", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=expression_statement];
3285 [label="520_ function withdraw_intou9() public {\n        require(now > lockTime_intou9[msg.sender]);    \n        uint transferValue_intou9 = 10;           \n        msg.sender.transfer(transferValue_intou9);\n    }\n3285-function_definition-521-525", method="withdraw_intou9()", type_label=function_definition];
3289 [label="521_ require(now > lockTime_intou9[msg.sender]);\n3289-expression_statement-522-522", method="withdraw_intou9()", type_label=expression_statement];
3300 [label="522_ uint transferValue_intou9 = 10;\n3300-new_variable-523-523", method="withdraw_intou9()", type_label=new_variable];
3306 [label="523_ msg.sender.transfer(transferValue_intou9);\n3306-expression_statement-524-524", method="withdraw_intou9()", type_label=expression_statement];
3315 [label="525_ function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n3315-function_definition-526-529", method="_addMinter(address account)", type_label=function_definition];
3323 [label="526_ _minters.add(account);\n3323-expression_statement-527-527", method="_addMinter(address account)", type_label=expression_statement];
3334 [label="529_ mapping(address => uint) public lockTime_intou25;\n3334-new_variable-530-530", method="", type_label=new_variable];
3341 [label="530_ function increaseLockTime_intou25(uint _secondsToIncrease) public {\n        lockTime_intou25[msg.sender] += _secondsToIncrease;   \n    }\n3341-function_definition-531-533", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=function_definition];
3349 [label="531_ lockTime_intou25[msg.sender] += _secondsToIncrease;\n3349-expression_statement-532-532", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=expression_statement];
3357 [label="533_ function withdraw_intou25() public {\n        require(now > lockTime_intou25[msg.sender]);    \n        uint transferValue_intou25 = 10;           \n        msg.sender.transfer(transferValue_intou25);\n    }\n3357-function_definition-534-538", method="withdraw_intou25()", type_label=function_definition];
3361 [label="534_ require(now > lockTime_intou25[msg.sender]);\n3361-expression_statement-535-535", method="withdraw_intou25()", type_label=expression_statement];
3372 [label="535_ uint transferValue_intou25 = 10;\n3372-new_variable-536-536", method="withdraw_intou25()", type_label=new_variable];
3378 [label="536_ msg.sender.transfer(transferValue_intou25);\n3378-expression_statement-537-537", method="withdraw_intou25()", type_label=expression_statement];
3387 [label="538_ function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n3387-function_definition-539-542", method="_removeMinter(address account)", type_label=function_definition];
3395 [label="539_ _minters.remove(account);\n3395-expression_statement-540-540", method="_removeMinter(address account)", type_label=expression_statement];
3406 [label="542_ function bug_intou19() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n3406-function_definition-543-546", method="bug_intou19()", type_label=function_definition];
3410 [label="543_ uint8 vundflw =0;\n3410-new_variable-544-544", method="bug_intou19()", type_label=new_variable];
3416 [label="544_ vundflw = vundflw -10;\n3416-expression_statement-545-545", method="bug_intou19()", type_label=expression_statement];
3432 [label="549_ mapping(address => uint) public lockTime_intou33;\n3432-new_variable-550-550", method="", type_label=new_variable];
3439 [label="550_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n3439-function_definition-551-553", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
3447 [label="551_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n3447-expression_statement-552-552", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
3455 [label="553_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n3455-function_definition-554-558", method="withdraw_intou33()", type_label=function_definition];
3459 [label="554_ require(now > lockTime_intou33[msg.sender]);\n3459-expression_statement-555-555", method="withdraw_intou33()", type_label=expression_statement];
3470 [label="555_ uint transferValue_intou33 = 10;\n3470-new_variable-556-556", method="withdraw_intou33()", type_label=new_variable];
3476 [label="556_ msg.sender.transfer(transferValue_intou33);\n3476-expression_statement-557-557", method="withdraw_intou33()", type_label=expression_statement];
3491 [label="559_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n3491-function_definition-560-563", method="bug_intou27()", type_label=function_definition];
3495 [label="560_ uint8 vundflw =0;\n3495-new_variable-561-561", method="bug_intou27()", type_label=new_variable];
3501 [label="561_ vundflw = vundflw -10;\n3501-expression_statement-562-562", method="bug_intou27()", type_label=expression_statement];
3513 [label="564_ Roles.Role private _pausers;\n3513-new_variable-565-565", method="", type_label=new_variable];
3522 [label="566_ _addPauser(msg.sender);\n3522-expression_statement-567-567", method="", type_label=expression_statement];
3529 [label="568_ mapping(address => uint) balances_intou26;\n3529-new_variable-569-569", method="", type_label=new_variable];
3535 [label="569_ function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] - _value >= 0);   \n    balances_intou26[msg.sender] -= _value;   \n    balances_intou26[_to] += _value;   \n    return true;\n  }\n3535-function_definition-570-575", method="transfer_intou26(address _to,uint _value)", type_label=function_definition];
3551 [label="570_ require(balances_intou26[msg.sender] - _value >= 0);\n3551-expression_statement-571-571", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
3564 [label="571_ balances_intou26[msg.sender] -= _value;\n3564-expression_statement-572-572", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
3572 [label="572_ balances_intou26[_to] += _value;\n3572-expression_statement-573-573", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
3578 [label="573_ return true;\n3578-return-574-574", method="transfer_intou26(address _to,uint _value)", type_label=return];
3581 [label="575_ modifier onlyPauser() {\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n3581-expression_statement-576-579", method="", type_label=expression_statement];
3584 [label="576_ require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n3584-expression_statement-577-577", method="", type_label=expression_statement];
3597 [label="577_ _;\n3597-expression_statement-578-578", method="", type_label=expression_statement];
3599 [label="579_ function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n3599-function_definition-580-582", method="isPauser(address account)", type_label=function_definition];
3612 [label="580_ return _pausers.has(account);\n3612-return-581-581", method="isPauser(address account)", type_label=return];
3619 [label="582_ function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou20;    \n}\n3619-function_definition-583-586", method="bug_intou20(uint8 p_intou20)", type_label=function_definition];
3627 [label="583_ uint8 vundflw1=0;\n3627-new_variable-584-584", method="bug_intou20(uint8 p_intou20)", type_label=new_variable];
3633 [label="584_ vundflw1 = vundflw1 + p_intou20;\n3633-expression_statement-585-585", method="bug_intou20(uint8 p_intou20)", type_label=expression_statement];
3639 [label="586_ function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n3639-function_definition-587-589", method="addPauser(address account)", type_label=function_definition];
3646 [label="586_ onlyPauser\n3646-expression_statement-587-587", method="addPauser(address account)", type_label=expression_statement];
3649 [label="587_ _addPauser(account);\n3649-expression_statement-588-588", method="addPauser(address account)", type_label=expression_statement];
3654 [label="589_ function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou32;    \n}\n3654-function_definition-590-593", method="bug_intou32(uint8 p_intou32)", type_label=function_definition];
3662 [label="590_ uint8 vundflw1=0;\n3662-new_variable-591-591", method="bug_intou32(uint8 p_intou32)", type_label=new_variable];
3668 [label="591_ vundflw1 = vundflw1 + p_intou32;\n3668-expression_statement-592-592", method="bug_intou32(uint8 p_intou32)", type_label=expression_statement];
3674 [label="593_ function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n3674-function_definition-594-596", method="renouncePauser()", type_label=function_definition];
3678 [label="594_ _removePauser(msg.sender);\n3678-expression_statement-595-595", method="renouncePauser()", type_label=expression_statement];
3685 [label="596_ mapping(address => uint) balances_intou38;\n3685-new_variable-597-597", method="", type_label=new_variable];
3691 [label="597_ function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] - _value >= 0);   \n    balances_intou38[msg.sender] -= _value;   \n    balances_intou38[_to] += _value;   \n    return true;\n  }\n3691-function_definition-598-603", method="transfer_intou38(address _to,uint _value)", type_label=function_definition];
3707 [label="598_ require(balances_intou38[msg.sender] - _value >= 0);\n3707-expression_statement-599-599", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
3720 [label="599_ balances_intou38[msg.sender] -= _value;\n3720-expression_statement-600-600", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
3728 [label="600_ balances_intou38[_to] += _value;\n3728-expression_statement-601-601", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
3734 [label="601_ return true;\n3734-return-602-602", method="transfer_intou38(address _to,uint _value)", type_label=return];
3737 [label="603_ function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n3737-function_definition-604-607", method="_addPauser(address account)", type_label=function_definition];
3745 [label="604_ _pausers.add(account);\n3745-expression_statement-605-605", method="_addPauser(address account)", type_label=expression_statement];
3756 [label="607_ function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou4;    \n}\n3756-function_definition-608-611", method="bug_intou4(uint8 p_intou4)", type_label=function_definition];
3764 [label="608_ uint8 vundflw1=0;\n3764-new_variable-609-609", method="bug_intou4(uint8 p_intou4)", type_label=new_variable];
3770 [label="609_ vundflw1 = vundflw1 + p_intou4;\n3770-expression_statement-610-610", method="bug_intou4(uint8 p_intou4)", type_label=expression_statement];
3776 [label="611_ function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n3776-function_definition-612-615", method="_removePauser(address account)", type_label=function_definition];
3784 [label="612_ _pausers.remove(account);\n3784-expression_statement-613-613", method="_removePauser(address account)", type_label=expression_statement];
3795 [label="615_ function bug_intou7() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n3795-function_definition-616-619", method="bug_intou7()", type_label=function_definition];
3799 [label="616_ uint8 vundflw =0;\n3799-new_variable-617-617", method="bug_intou7()", type_label=new_variable];
3805 [label="617_ vundflw = vundflw -10;\n3805-expression_statement-618-618", method="bug_intou7()", type_label=expression_statement];
3817 [label="621_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n3817-function_definition-622-625", method="bug_intou31()", type_label=function_definition];
3821 [label="622_ uint8 vundflw =0;\n3821-new_variable-623-623", method="bug_intou31()", type_label=new_variable];
3827 [label="623_ vundflw = vundflw -10;\n3827-expression_statement-624-624", method="bug_intou31()", type_label=expression_statement];
3839 [label="626_ mapping(address => uint) public lockTime_intou13;\n3839-new_variable-627-627", method="", type_label=new_variable];
3846 [label="627_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n3846-function_definition-628-630", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
3854 [label="628_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n3854-expression_statement-629-629", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
3862 [label="630_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n3862-function_definition-631-635", method="withdraw_intou13()", type_label=function_definition];
3866 [label="631_ require(now > lockTime_intou13[msg.sender]);\n3866-expression_statement-632-632", method="withdraw_intou13()", type_label=expression_statement];
3877 [label="632_ uint transferValue_intou13 = 10;\n3877-new_variable-633-633", method="withdraw_intou13()", type_label=new_variable];
3883 [label="633_ msg.sender.transfer(transferValue_intou13);\n3883-expression_statement-634-634", method="withdraw_intou13()", type_label=expression_statement];
3898 [label="636_ bool private _paused;\n3898-new_variable-637-637", method="", type_label=new_variable];
3905 [label="638_ _paused = false;\n3905-expression_statement-639-639", method="", type_label=expression_statement];
3910 [label="640_ function bug_intou23() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n3910-function_definition-641-644", method="bug_intou23()", type_label=function_definition];
3914 [label="641_ uint8 vundflw =0;\n3914-new_variable-642-642", method="bug_intou23()", type_label=new_variable];
3920 [label="642_ vundflw = vundflw -10;\n3920-expression_statement-643-643", method="bug_intou23()", type_label=expression_statement];
3926 [label="644_ function paused() public view returns (bool) {\n        return _paused;\n    }\n3926-function_definition-645-647", method="paused()", type_label=function_definition];
3935 [label="645_ return _paused;\n3935-return-646-646", method="paused()", type_label=return];
3937 [label="647_ mapping(address => uint) balances_intou14;\n3937-new_variable-648-648", method="", type_label=new_variable];
3943 [label="648_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n3943-function_definition-649-654", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
3959 [label="649_ require(balances_intou14[msg.sender] - _value >= 0);\n3959-expression_statement-650-650", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
3972 [label="650_ balances_intou14[msg.sender] -= _value;\n3972-expression_statement-651-651", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
3980 [label="651_ balances_intou14[_to] += _value;\n3980-expression_statement-652-652", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
3986 [label="652_ return true;\n3986-return-653-653", method="transfer_intou14(address _to,uint _value)", type_label=return];
3989 [label="654_ modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n3989-expression_statement-655-658", method="", type_label=expression_statement];
3992 [label="655_ require(!_paused, \"Pausable: paused\");\n3992-expression_statement-656-656", method="", type_label=expression_statement];
4001 [label="656_ _;\n4001-expression_statement-657-657", method="", type_label=expression_statement];
4003 [label="658_ modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n4003-expression_statement-659-662", method="", type_label=expression_statement];
4006 [label="659_ require(_paused, \"Pausable: not paused\");\n4006-expression_statement-660-660", method="", type_label=expression_statement];
4014 [label="660_ _;\n4014-expression_statement-661-661", method="", type_label=expression_statement];
4016 [label="662_ function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n4016-function_definition-663-666", method="pause()", type_label=function_definition];
4019 [label="662_ onlyPauser\n4019-expression_statement-663-663", method="pause()", type_label=expression_statement];
4021 [label="662_ whenNotPaused\n4021-expression_statement-663-663", method="pause()", type_label=expression_statement];
4024 [label="663_ _paused = true;\n4024-expression_statement-664-664", method="pause()", type_label=expression_statement];
4035 [label="666_ mapping(address => uint) balances_intou30;\n4035-new_variable-667-667", method="", type_label=new_variable];
4041 [label="667_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n4041-function_definition-668-673", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
4057 [label="668_ require(balances_intou30[msg.sender] - _value >= 0);\n4057-expression_statement-669-669", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
4070 [label="669_ balances_intou30[msg.sender] -= _value;\n4070-expression_statement-670-670", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
4078 [label="670_ balances_intou30[_to] += _value;\n4078-expression_statement-671-671", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
4084 [label="671_ return true;\n4084-return-672-672", method="transfer_intou30(address _to,uint _value)", type_label=return];
4087 [label="673_ function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n4087-function_definition-674-677", method="unpause()", type_label=function_definition];
4090 [label="673_ onlyPauser\n4090-expression_statement-674-674", method="unpause()", type_label=expression_statement];
4092 [label="673_ whenPaused\n4092-expression_statement-674-674", method="unpause()", type_label=expression_statement];
4095 [label="674_ _paused = false;\n4095-expression_statement-675-675", method="unpause()", type_label=expression_statement];
4106 [label="677_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n4106-function_definition-678-681", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
4114 [label="678_ uint8 vundflw1=0;\n4114-new_variable-679-679", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
4120 [label="679_ vundflw1 = vundflw1 + p_intou8;\n4120-expression_statement-680-680", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
4148 [label="687_ ERC777(\"SKYBIT\", \"SKYBIT\", defaultOperators)\n4148-expression_statement-688-688", method="", type_label=expression_statement];
4159 [label="689_ _mint(msg.sender, msg.sender, initialSupply, \"\", \"\");\n4159-expression_statement-690-690", method="", type_label=expression_statement];
4178 [label="691_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n4178-function_definition-692-695", method="bug_intou39()", type_label=function_definition];
4182 [label="692_ uint8 vundflw =0;\n4182-new_variable-693-693", method="bug_intou39()", type_label=new_variable];
4188 [label="693_ vundflw = vundflw -10;\n4188-expression_statement-694-694", method="bug_intou39()", type_label=expression_statement];
4194 [label="695_ function mint(address operator, address account, uint256 amount, bytes memory userData, bytes memory operatorData) public onlyMinter returns (bool) {\n        _mint(operator, account, amount, userData, operatorData);\n        return true;\n    }\n4194-function_definition-696-699", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
4217 [label="695_ onlyMinter\n4217-expression_statement-696-696", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
4224 [label="696_ _mint(operator, account, amount, userData, operatorData);\n4224-expression_statement-697-697", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
4237 [label="697_ return true;\n4237-return-698-698", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=return];
4240 [label="699_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n4240-function_definition-700-703", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
4248 [label="700_ uint8 vundflw1=0;\n4248-new_variable-701-701", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
4254 [label="701_ vundflw1 = vundflw1 + p_intou36;\n4254-expression_statement-702-702", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1356;
1463;
433 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
470 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
507 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 529  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
524 -> 4779  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4779 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 4779  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
529 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
531 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
553 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
590 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
624 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
811 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 938  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
922 -> 5177  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5177 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 922  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
938 -> 935  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
947 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
996 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1007 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1018 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1029 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1040 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1057 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1189 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1264 -> 1280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1280 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1293 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1310 -> 1318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1318 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1330 -> 1335  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1330 -> 1345  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5585 -> 1356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1335 -> 5585  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1345 -> 5585  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1371 -> 1379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1387 -> 1391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1391 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1417 -> 1425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1425 -> 1437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1437 -> 1442  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1437 -> 1454  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5692 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1442 -> 5692  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1454 -> 5692  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1477 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1493 -> 1506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1506 -> 1514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1514 -> 1520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1520 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1523 -> 1533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1533 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1535 -> 1543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1543 -> 1549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1555 -> 1579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1579 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1614 -> 1622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1622 -> 1628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1634 -> 1654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1654 -> 1669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1691 -> 1699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1707 -> 1711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1711 -> 1722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1722 -> 1728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1737 -> 1754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1754 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1760 -> 1764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1764 -> 1770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1776 -> 1792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1792 -> 1800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1800 -> 1809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1809 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1812 -> 1820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1820 -> 1826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1832 -> 1852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1852 -> 1864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1864 -> 1876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1876 -> 1884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1884 -> 1901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1901 -> 1918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1918 -> 1936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1936 -> 1956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1956 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1965 -> 1981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1981 -> 1994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1994 -> 2002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2002 -> 2008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2008 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2011 -> 2035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2035 -> 2047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2047 -> 2056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2056 -> 2069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2118 -> 2126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2134 -> 2138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2138 -> 2149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2149 -> 2155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2164 -> 2196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2196 -> 2208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2208 -> 2220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2220 -> 2235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2235 -> 2250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2273 -> 2289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2289 -> 2302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2302 -> 2310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2310 -> 2316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2316 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2319 -> 2343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2343 -> 2355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2355 -> 2372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2372 -> 2381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2422 -> 2438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2438 -> 2451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2451 -> 2459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2459 -> 2465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2465 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2468 -> 2496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2496 -> 2509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2544 -> 2552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2552 -> 2558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2564 -> 2580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2580 -> 2592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2608 -> 2612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2612 -> 2618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2624 -> 2652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2652 -> 2665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2665 -> 2672  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2665 -> 6920  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6920 -> 2692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2672 -> 6920  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2699 -> 2707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2715 -> 2719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2719 -> 2730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2730 -> 2736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2745 -> 2777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2777 -> 2790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2790 -> 2797  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2790 -> 2817  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7045 -> 2832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2797 -> 7045  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2817 -> 2820  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2817 -> 7045  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2820 -> 7045  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2838 -> 2854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2854 -> 2867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2867 -> 2875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2875 -> 2881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2881 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2895 -> 2908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2908 -> 2922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2931 -> 2944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2944 -> 2957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2966 -> 2984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2984 -> 2996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2996 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3012 -> 3016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3016 -> 3022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3034 -> 3042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3042 -> 3048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3083 -> 3091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3099 -> 3103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3103 -> 3114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3114 -> 3120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3132 -> 3145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3147 -> 3160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3160 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3174 -> 3182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3190 -> 3194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3194 -> 3205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3205 -> 3211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3220 -> 3230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3235 -> 3239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3239 -> 3245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3251 -> 3255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3269 -> 3277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3285 -> 3289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3289 -> 3300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3300 -> 3306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3315 -> 3323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3341 -> 3349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3357 -> 3361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3361 -> 3372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3372 -> 3378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3387 -> 3395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3406 -> 3410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3410 -> 3416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3439 -> 3447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3455 -> 3459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3459 -> 3470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3470 -> 3476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3491 -> 3495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3495 -> 3501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3535 -> 3551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3551 -> 3564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3564 -> 3572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3572 -> 3578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3578 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3584 -> 3597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3599 -> 3612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3612 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3619 -> 3627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3627 -> 3633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3639 -> 3649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3654 -> 3662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3662 -> 3668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3674 -> 3678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3691 -> 3707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3707 -> 3720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3720 -> 3728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3728 -> 3734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3734 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3737 -> 3745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3756 -> 3764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3764 -> 3770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3776 -> 3784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3795 -> 3799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3799 -> 3805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3817 -> 3821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3821 -> 3827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3846 -> 3854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3862 -> 3866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3866 -> 3877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3877 -> 3883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3910 -> 3914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3914 -> 3920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3926 -> 3935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3935 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3943 -> 3959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3959 -> 3972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3972 -> 3980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3980 -> 3986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3986 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3989 -> 4003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3992 -> 4001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4006 -> 4014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4016 -> 4024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4019 -> 4021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4041 -> 4057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4057 -> 4070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4070 -> 4078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4078 -> 4084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4084 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4087 -> 4095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4090 -> 4092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4106 -> 4114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4114 -> 4120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4178 -> 4182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4182 -> 4188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4194 -> 4224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4224 -> 4237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4237 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4240 -> 4248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4248 -> 4254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
