digraph  {
13 [label="2_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n13-function_definition-3-3", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
33 [label="3_ function bug_intou7() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n33-function_definition-4-7", method="bug_intou7()", type_label=function_definition];
37 [label="4_ uint8 vundflw =0;\n37-new_variable-5-5", method="bug_intou7()", type_label=new_variable];
43 [label="5_ vundflw = vundflw -10;\n43-expression_statement-6-6", method="bug_intou7()", type_label=expression_statement];
52 [label="9_ function allowance(address owner, address spender) external view returns (uint256);\n52-function_definition-10-10", method="allowance(address owner,address spender)", type_label=function_definition];
68 [label="10_ function bug_intou23() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n68-function_definition-11-14", method="bug_intou23()", type_label=function_definition];
72 [label="11_ uint8 vundflw =0;\n72-new_variable-12-12", method="bug_intou23()", type_label=new_variable];
78 [label="12_ vundflw = vundflw -10;\n78-expression_statement-13-13", method="bug_intou23()", type_label=expression_statement];
84 [label="14_ function balanceOf(address account) external view returns (uint256);\n84-function_definition-15-15", method="balanceOf(address account)", type_label=function_definition];
96 [label="15_ mapping(address => uint) balances_intou14;\n96-new_variable-16-16", method="", type_label=new_variable];
102 [label="16_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n102-function_definition-17-22", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
118 [label="17_ require(balances_intou14[msg.sender] - _value >= 0);\n118-expression_statement-18-18", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
131 [label="18_ balances_intou14[msg.sender] -= _value;\n131-expression_statement-19-19", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
139 [label="19_ balances_intou14[_to] += _value;\n139-expression_statement-20-20", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
145 [label="20_ return true;\n145-return-21-21", method="transfer_intou14(address _to,uint _value)", type_label=return];
160 [label="25_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n160-function_definition-26-30", method="add(uint256 a,uint256 b)", type_label=function_definition];
177 [label="26_ uint256 c = a + b;\n177-new_variable-27-27", method="add(uint256 a,uint256 b)", type_label=new_variable];
185 [label="27_ require(c >= a, \"SafeMath: addition overflow\");\n185-expression_statement-28-28", method="add(uint256 a,uint256 b)", type_label=expression_statement];
195 [label="28_ return c;\n195-return-29-29", method="add(uint256 a,uint256 b)", type_label=return];
197 [label="30_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n197-function_definition-31-35", method="sub(uint256 a,uint256 b)", type_label=function_definition];
214 [label="31_ require(b <= a, \"SafeMath: subtraction overflow\");\n214-expression_statement-32-32", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
224 [label="32_ uint256 c = a - b;\n224-new_variable-33-33", method="sub(uint256 a,uint256 b)", type_label=new_variable];
232 [label="33_ return c;\n232-return-34-34", method="sub(uint256 a,uint256 b)", type_label=return];
234 [label="35_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n234-function_definition-36-43", method="mul(uint256 a,uint256 b)", type_label=function_definition];
251 [label="36_ if_a == 0\n251-if-37-39", method="mul(uint256 a,uint256 b)", type_label=if];
1699 [label="36_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
256 [label="37_ return 0;\n256-return-38-38", method="mul(uint256 a,uint256 b)", type_label=return];
258 [label="39_ uint256 c = a * b;\n258-new_variable-40-40", method="mul(uint256 a,uint256 b)", type_label=new_variable];
266 [label="40_ require(c / a == b, \"SafeMath: multiplication overflow\");\n266-expression_statement-41-41", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
278 [label="41_ return c;\n278-return-42-42", method="mul(uint256 a,uint256 b)", type_label=return];
280 [label="43_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n280-function_definition-44-48", method="div(uint256 a,uint256 b)", type_label=function_definition];
297 [label="44_ require(b > 0, \"SafeMath: division by zero\");\n297-expression_statement-45-45", method="div(uint256 a,uint256 b)", type_label=expression_statement];
307 [label="45_ uint256 c = a / b;\n307-new_variable-46-46", method="div(uint256 a,uint256 b)", type_label=new_variable];
315 [label="46_ return c;\n315-return-47-47", method="div(uint256 a,uint256 b)", type_label=return];
317 [label="48_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n317-function_definition-49-52", method="mod(uint256 a,uint256 b)", type_label=function_definition];
334 [label="49_ require(b != 0, \"SafeMath: modulo by zero\");\n334-expression_statement-50-50", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
344 [label="50_ return a % b;\n344-return-51-51", method="mod(uint256 a,uint256 b)", type_label=return];
356 [label="55_ RaffleToken constant public raffleContract = RaffleToken(0x0C8cDC16973E88FAb31DD0FCB844DdF0e1056dE2);\n356-new_variable-56-56", method="", type_label=new_variable];
366 [label="56_ function bug_intou19() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n366-function_definition-57-60", method="bug_intou19()", type_label=function_definition];
370 [label="57_ uint8 vundflw =0;\n370-new_variable-58-58", method="bug_intou19()", type_label=new_variable];
376 [label="58_ vundflw = vundflw -10;\n376-expression_statement-59-59", method="bug_intou19()", type_label=expression_statement];
382 [label="60_ bool public paused;\n382-new_variable-61-61", method="", type_label=new_variable];
387 [label="61_ mapping(address => uint) balances_intou26;\n387-new_variable-62-62", method="", type_label=new_variable];
393 [label="62_ function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] - _value >= 0);   \n    balances_intou26[msg.sender] -= _value;   \n    balances_intou26[_to] += _value;   \n    return true;\n  }\n393-function_definition-63-68", method="transfer_intou26(address _to,uint _value)", type_label=function_definition];
409 [label="63_ require(balances_intou26[msg.sender] - _value >= 0);\n409-expression_statement-64-64", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
422 [label="64_ balances_intou26[msg.sender] -= _value;\n422-expression_statement-65-65", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
430 [label="65_ balances_intou26[_to] += _value;\n430-expression_statement-66-66", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
436 [label="66_ return true;\n436-return-67-67", method="transfer_intou26(address _to,uint _value)", type_label=return];
439 [label="68_ address payable public owner;\n439-new_variable-69-69", method="", type_label=new_variable];
444 [label="69_ function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou20;    \n}\n444-function_definition-70-73", method="bug_intou20(uint8 p_intou20)", type_label=function_definition];
452 [label="70_ uint8 vundflw1=0;\n452-new_variable-71-71", method="bug_intou20(uint8 p_intou20)", type_label=new_variable];
458 [label="71_ vundflw1 = vundflw1 + p_intou20;\n458-expression_statement-72-72", method="bug_intou20(uint8 p_intou20)", type_label=expression_statement];
464 [label="73_ uint256 public nextListingId;\n464-new_variable-74-74", method="", type_label=new_variable];
469 [label="74_ function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou32;    \n}\n469-function_definition-75-78", method="bug_intou32(uint8 p_intou32)", type_label=function_definition];
477 [label="75_ uint8 vundflw1=0;\n477-new_variable-76-76", method="bug_intou32(uint8 p_intou32)", type_label=new_variable];
483 [label="76_ vundflw1 = vundflw1 + p_intou32;\n483-expression_statement-77-77", method="bug_intou32(uint8 p_intou32)", type_label=expression_statement];
489 [label="78_ mapping (uint256 => Listing) public listingsById;\n489-new_variable-79-79", method="", type_label=new_variable];
497 [label="79_ mapping(address => uint) balances_intou38;\n497-new_variable-80-80", method="", type_label=new_variable];
503 [label="80_ function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] - _value >= 0);   \n    balances_intou38[msg.sender] -= _value;   \n    balances_intou38[_to] += _value;   \n    return true;\n  }\n503-function_definition-81-86", method="transfer_intou38(address _to,uint _value)", type_label=function_definition];
519 [label="81_ require(balances_intou38[msg.sender] - _value >= 0);\n519-expression_statement-82-82", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
532 [label="82_ balances_intou38[msg.sender] -= _value;\n532-expression_statement-83-83", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
540 [label="83_ balances_intou38[_to] += _value;\n540-expression_statement-84-84", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
546 [label="84_ return true;\n546-return-85-85", method="transfer_intou38(address _to,uint _value)", type_label=return];
549 [label="86_ mapping (uint256 => Purchase) public purchasesById;\n549-new_variable-87-87", method="", type_label=new_variable];
557 [label="87_ function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou4;    \n}\n557-function_definition-88-91", method="bug_intou4(uint8 p_intou4)", type_label=function_definition];
565 [label="88_ uint8 vundflw1=0;\n565-new_variable-89-89", method="bug_intou4(uint8 p_intou4)", type_label=new_variable];
571 [label="89_ vundflw1 = vundflw1 + p_intou4;\n571-expression_statement-90-90", method="bug_intou4(uint8 p_intou4)", type_label=expression_statement];
577 [label="91_ uint256 public nextPurchaseId;\n577-new_variable-92-92", method="", type_label=new_variable];
582 [label="92_ struct Listing {\n        uint256 pricePerToken;\n        uint256 initialAmount;\n        uint256 amountLeft;\n        address payable seller;\n        bool active;\n    }\n582-expression_statement-93-99", method="Listing()", type_label=expression_statement];
604 [label="99_ struct Purchase {\n        uint256 totalAmount;\n        uint256 totalAmountPayed;\n        uint256 timestamp;\n    }\n604-expression_statement-100-104", method="Purchase()", type_label=expression_statement];
618 [label="104_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n618-function_definition-105-108", method="bug_intou27()", type_label=function_definition];
622 [label="105_ uint8 vundflw =0;\n622-new_variable-106-106", method="bug_intou27()", type_label=new_variable];
628 [label="106_ vundflw = vundflw -10;\n628-expression_statement-107-107", method="bug_intou27()", type_label=expression_statement];
652 [label="109_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n652-function_definition-110-113", method="bug_intou31()", type_label=function_definition];
656 [label="110_ uint8 vundflw =0;\n656-new_variable-111-111", method="bug_intou31()", type_label=new_variable];
662 [label="111_ vundflw = vundflw -10;\n662-expression_statement-112-112", method="bug_intou31()", type_label=expression_statement];
674 [label="114_ mapping(address => uint) public lockTime_intou13;\n674-new_variable-115-115", method="", type_label=new_variable];
681 [label="115_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n681-function_definition-116-118", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
689 [label="116_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n689-expression_statement-117-117", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
697 [label="118_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n697-function_definition-119-123", method="withdraw_intou13()", type_label=function_definition];
701 [label="119_ require(now > lockTime_intou13[msg.sender]);\n701-expression_statement-120-120", method="withdraw_intou13()", type_label=expression_statement];
712 [label="120_ uint transferValue_intou13 = 10;\n712-new_variable-121-121", method="withdraw_intou13()", type_label=new_variable];
718 [label="121_ msg.sender.transfer(transferValue_intou13);\n718-expression_statement-122-122", method="withdraw_intou13()", type_label=expression_statement];
745 [label="124_ modifier onlyContractOwner {\n        require(msg.sender == owner, \"Function called by non-owner.\");\n        _;\n    }\n745-expression_statement-125-128", method="", type_label=expression_statement];
748 [label="125_ require(msg.sender == owner, \"Function called by non-owner.\");\n748-expression_statement-126-126", method="", type_label=expression_statement];
760 [label="126_ _;\n760-expression_statement-127-127", method="", type_label=expression_statement];
762 [label="128_ modifier onlyUnpaused {\n        require(paused == false, \"Exchange is paused.\");\n        _;\n    }\n762-expression_statement-129-132", method="", type_label=expression_statement];
765 [label="129_ require(paused == false, \"Exchange is paused.\");\n765-expression_statement-130-130", method="", type_label=expression_statement];
776 [label="130_ _;\n776-expression_statement-131-131", method="", type_label=expression_statement];
780 [label="133_ owner = msg.sender;\n780-expression_statement-134-134", method="", type_label=expression_statement];
786 [label="134_ nextListingId = 916;\n786-expression_statement-135-135", method="", type_label=expression_statement];
790 [label="135_ nextPurchaseId = 344;\n790-expression_statement-136-136", method="", type_label=expression_statement];
794 [label="137_ mapping(address => uint) balances_intou30;\n794-new_variable-138-138", method="", type_label=new_variable];
800 [label="138_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n800-function_definition-139-144", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
816 [label="139_ require(balances_intou30[msg.sender] - _value >= 0);\n816-expression_statement-140-140", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
829 [label="140_ balances_intou30[msg.sender] -= _value;\n829-expression_statement-141-141", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
837 [label="141_ balances_intou30[_to] += _value;\n837-expression_statement-142-142", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
843 [label="142_ return true;\n843-return-143-143", method="transfer_intou30(address _to,uint _value)", type_label=return];
846 [label="144_ function buyRaffle(uint256[] calldata amounts, uint256[] calldata listingIds) payable external onlyUnpaused {\n        require(amounts.length == listingIds.length, \"You have to provide amounts for every single listing!\");\n        uint256 totalAmount;\n        uint256 totalAmountPayed;\n        for (uint256 i = 0; i < listingIds.length; i++) {\n            uint256 id = listingIds[i];\n            uint256 amount = amounts[i];\n            Listing storage listing = listingsById[id];\n            require(listing.active, \"Listing is not active anymore!\");\n            listing.amountLeft = listing.amountLeft.sub(amount);\n            require(listing.amountLeft >= 0, \"Amount left needs to be higher than 0.\");\n            if(listing.amountLeft == 0) { listing.active = false; }\n            uint256 amountToPay = listing.pricePerToken * amount;\n            listing.seller.transfer(amountToPay);\n            totalAmountPayed = totalAmountPayed.add(amountToPay);\n            totalAmount = totalAmount.add(amount);\n            require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');\n        }\n        require(totalAmountPayed <= msg.value, 'Overpayed!');\n        uint256 id = nextPurchaseId++;\n        Purchase storage purchase = purchasesById[id];\n        purchase.totalAmount = totalAmount;\n        purchase.totalAmountPayed = totalAmountPayed;\n        purchase.timestamp = now;\n        emit Purchased(id, totalAmount, totalAmountPayed, now);\n    }\n846-function_definition-145-170", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=function_definition];
860 [label="144_ onlyUnpaused\n860-expression_statement-145-145", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
863 [label="145_ require(amounts.length == listingIds.length, \"You have to provide amounts for every single listing!\");\n863-expression_statement-146-146", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
877 [label="146_ uint256 totalAmount;\n877-new_variable-147-147", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
882 [label="147_ uint256 totalAmountPayed;\n882-new_variable-148-148", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
887 [label="148_ for(i < listingIds.length;;i++)\n887-for-149-162", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=for];
2335 [label="148_ end_loop", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=end_loop];
900 [label="148_ i++\n900-expression_statement-149-149", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
903 [label="149_ uint256 id = listingIds[i];\n903-new_variable-150-150", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
911 [label="150_ uint256 amount = amounts[i];\n911-new_variable-151-151", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
919 [label="151_ Listing storage listing = listingsById[id];\n919-new_variable-152-152", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
928 [label="152_ require(listing.active, \"Listing is not active anymore!\");\n928-expression_statement-153-153", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
938 [label="153_ listing.amountLeft = listing.amountLeft.sub(amount);\n938-expression_statement-154-154", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
951 [label="154_ require(listing.amountLeft >= 0, \"Amount left needs to be higher than 0.\");\n951-expression_statement-155-155", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
963 [label="155_ if_listing.amountLeft == 0\n963-if-156-156", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=if];
2411 [label="155_ end_if", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=end_if];
970 [label="155_ listing.active = false;\n970-expression_statement-156-156", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
977 [label="156_ uint256 amountToPay = listing.pricePerToken * amount;\n977-new_variable-157-157", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
987 [label="157_ listing.seller.transfer(amountToPay);\n987-expression_statement-158-158", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
996 [label="158_ totalAmountPayed = totalAmountPayed.add(amountToPay);\n996-expression_statement-159-159", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1005 [label="159_ totalAmount = totalAmount.add(amount);\n1005-expression_statement-160-160", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1014 [label="160_ require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');\n1014-expression_statement-161-161", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1035 [label="162_ require(totalAmountPayed <= msg.value, 'Overpayed!');\n1035-expression_statement-163-163", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1047 [label="163_ uint256 id = nextPurchaseId++;\n1047-new_variable-164-164", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1052 [label="163_ nextPurchaseId++\n1052-expression_statement-164-164", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1054 [label="164_ Purchase storage purchase = purchasesById[id];\n1054-new_variable-165-165", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1063 [label="165_ purchase.totalAmount = totalAmount;\n1063-expression_statement-166-166", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1069 [label="166_ purchase.totalAmountPayed = totalAmountPayed;\n1069-expression_statement-167-167", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1075 [label="167_ purchase.timestamp = now;\n1075-expression_statement-168-168", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1091 [label="170_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n1091-function_definition-171-174", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
1099 [label="171_ uint8 vundflw1=0;\n1099-new_variable-172-172", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
1105 [label="172_ vundflw1 = vundflw1 + p_intou8;\n1105-expression_statement-173-173", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
1111 [label="174_ function addListing(uint256 initialAmount, uint256 pricePerToken) external onlyUnpaused {\n        require(raffleContract.balanceOf(msg.sender) >= initialAmount, \"Amount to sell is higher than balance!\");\n        require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, \"Allowance is to small (increase allowance)!\");\n        uint256 id = nextListingId++;\n        Listing storage listing = listingsById[id];\n        listing.initialAmount = initialAmount;\n        listing.amountLeft = initialAmount;\n        listing.pricePerToken = pricePerToken;\n        listing.seller = msg.sender;\n        listing.active = true;\n        emit Listed(id, listing.pricePerToken, listing.initialAmount, listing.seller);\n    }\n1111-function_definition-175-186", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=function_definition];
1122 [label="174_ onlyUnpaused\n1122-expression_statement-175-175", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1125 [label="175_ require(raffleContract.balanceOf(msg.sender) >= initialAmount, \"Amount to sell is higher than balance!\");\n1125-expression_statement-176-176", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1142 [label="176_ require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, \"Allowance is to small (increase allowance)!\");\n1142-expression_statement-177-177", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1163 [label="177_ uint256 id = nextListingId++;\n1163-new_variable-178-178", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=new_variable];
1168 [label="177_ nextListingId++\n1168-expression_statement-178-178", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1170 [label="178_ Listing storage listing = listingsById[id];\n1170-new_variable-179-179", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=new_variable];
1179 [label="179_ listing.initialAmount = initialAmount;\n1179-expression_statement-180-180", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1185 [label="180_ listing.amountLeft = initialAmount;\n1185-expression_statement-181-181", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1191 [label="181_ listing.pricePerToken = pricePerToken;\n1191-expression_statement-182-182", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1197 [label="182_ listing.seller = msg.sender;\n1197-expression_statement-183-183", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1205 [label="183_ listing.active = true;\n1205-expression_statement-184-184", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1228 [label="186_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1228-function_definition-187-190", method="bug_intou39()", type_label=function_definition];
1232 [label="187_ uint8 vundflw =0;\n1232-new_variable-188-188", method="bug_intou39()", type_label=new_variable];
1238 [label="188_ vundflw = vundflw -10;\n1238-expression_statement-189-189", method="bug_intou39()", type_label=expression_statement];
1244 [label="190_ function cancelListing(uint256 id) external {\n        Listing storage listing = listingsById[id];\n        require(listing.active, \"This listing was turned inactive already!\");\n        require(listing.seller == msg.sender || owner == msg.sender, \"Only the listing owner or the contract owner can cancel the listing!\");\n        listing.active = false;\n        emit Canceled(id);\n    }\n1244-function_definition-191-197", method="cancelListing(uint256 id)", type_label=function_definition];
1252 [label="191_ Listing storage listing = listingsById[id];\n1252-new_variable-192-192", method="cancelListing(uint256 id)", type_label=new_variable];
1261 [label="192_ require(listing.active, \"This listing was turned inactive already!\");\n1261-expression_statement-193-193", method="cancelListing(uint256 id)", type_label=expression_statement];
1271 [label="193_ require(listing.seller == msg.sender || owner == msg.sender, \"Only the listing owner or the contract owner can cancel the listing!\");\n1271-expression_statement-194-194", method="cancelListing(uint256 id)", type_label=expression_statement];
1291 [label="194_ listing.active = false;\n1291-expression_statement-195-195", method="cancelListing(uint256 id)", type_label=expression_statement];
1302 [label="197_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n1302-function_definition-198-201", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
1310 [label="198_ uint8 vundflw1=0;\n1310-new_variable-199-199", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
1316 [label="199_ vundflw1 = vundflw1 + p_intou36;\n1316-expression_statement-200-200", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
1322 [label="201_ function setPaused(bool value) external onlyContractOwner {\n        paused = value;\n    }\n1322-function_definition-202-204", method="setPaused(bool value)", type_label=function_definition];
1329 [label="201_ onlyContractOwner\n1329-expression_statement-202-202", method="setPaused(bool value)", type_label=expression_statement];
1332 [label="202_ paused = value;\n1332-expression_statement-203-203", method="setPaused(bool value)", type_label=expression_statement];
1336 [label="204_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1336-function_definition-205-208", method="bug_intou35()", type_label=function_definition];
1340 [label="205_ uint8 vundflw =0;\n1340-new_variable-206-206", method="bug_intou35()", type_label=new_variable];
1346 [label="206_ vundflw = vundflw -10;\n1346-expression_statement-207-207", method="bug_intou35()", type_label=expression_statement];
1352 [label="208_ function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {\n        owner.transfer(withdrawAmount);\n    }\n1352-function_definition-209-211", method="withdrawFunds(uint256 withdrawAmount)", type_label=function_definition];
1359 [label="208_ onlyContractOwner\n1359-expression_statement-209-209", method="withdrawFunds(uint256 withdrawAmount)", type_label=expression_statement];
1362 [label="209_ owner.transfer(withdrawAmount);\n1362-expression_statement-210-210", method="withdrawFunds(uint256 withdrawAmount)", type_label=expression_statement];
1369 [label="211_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n1369-function_definition-212-215", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
1377 [label="212_ uint8 vundflw1=0;\n1377-new_variable-213-213", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
1383 [label="213_ vundflw1 = vundflw1 + p_intou40;\n1383-expression_statement-214-214", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
1389 [label="215_ function kill() external onlyContractOwner {\n        selfdestruct(owner);\n    }\n1389-function_definition-216-218", method="kill()", type_label=function_definition];
1392 [label="215_ onlyContractOwner\n1392-expression_statement-216-216", method="kill()", type_label=expression_statement];
1395 [label="216_ selfdestruct(owner);\n1395-expression_statement-217-217", method="kill()", type_label=expression_statement];
1400 [label="218_ mapping(address => uint) public lockTime_intou33;\n1400-new_variable-219-219", method="", type_label=new_variable];
1407 [label="219_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n1407-function_definition-220-222", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
1415 [label="220_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n1415-expression_statement-221-221", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
1423 [label="222_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n1423-function_definition-223-227", method="withdraw_intou33()", type_label=function_definition];
1427 [label="223_ require(now > lockTime_intou33[msg.sender]);\n1427-expression_statement-224-224", method="withdraw_intou33()", type_label=expression_statement];
1438 [label="224_ uint transferValue_intou33 = 10;\n1438-new_variable-225-225", method="withdraw_intou33()", type_label=new_variable];
1444 [label="225_ msg.sender.transfer(transferValue_intou33);\n1444-expression_statement-226-226", method="withdraw_intou33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
33 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 43  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 78  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
102 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
118 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
145 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
160 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
197 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
224 -> 232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
232 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
234 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 256  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
251 -> 1699  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1699 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
256 -> 1699  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
256 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
258 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
280 -> 297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
297 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
317 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
366 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
409 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
444 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
532 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
557 -> 565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
656 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
800 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
846 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
887 -> 903  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
887 -> 2335  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2335 -> 1035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 887  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
903 -> 911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
938 -> 951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
951 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 970  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
963 -> 2411  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2411 -> 977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 2411  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
977 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
996 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 900  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1035 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1047 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1069 -> 1075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1091 -> 1099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 1105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1125 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1170 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1185 -> 1191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1191 -> 1197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1252 -> 1261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1261 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1302 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1336 -> 1340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1340 -> 1346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1352 -> 1362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1369 -> 1377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1377 -> 1383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1389 -> 1395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1407 -> 1415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 1427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1427 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 1444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
