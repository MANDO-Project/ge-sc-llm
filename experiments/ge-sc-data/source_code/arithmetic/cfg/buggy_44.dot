digraph  {
13 [label="2_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n13-function_definition-3-6", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
21 [label="3_ uint8 vundflw1=0;\n21-new_variable-4-4", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
27 [label="4_ vundflw1 = vundflw1 + p_intou40;\n27-expression_statement-5-5", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
39 [label="7_ function _setMetadata(bytes memory metadata) internal {\n        emit MetadataSet(metadata);\n    }\n39-function_definition-8-10", method="_setMetadata(bytes memory metadata)", type_label=function_definition];
51 [label="10_ function bug_intou11() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n51-function_definition-11-14", method="bug_intou11()", type_label=function_definition];
55 [label="11_ uint8 vundflw =0;\n55-new_variable-12-12", method="bug_intou11()", type_label=new_variable];
61 [label="12_ vundflw = vundflw -10;\n61-expression_statement-13-13", method="bug_intou11()", type_label=expression_statement];
70 [label="16_ mapping(address => uint) balances_intou10;\n70-new_variable-17-17", method="", type_label=new_variable];
76 [label="17_ function transfer_intou10(address _to, uint _value) public returns (bool) {\n    require(balances_intou10[msg.sender] - _value >= 0);   \n    balances_intou10[msg.sender] -= _value;   \n    balances_intou10[_to] += _value;   \n    return true;\n  }\n76-function_definition-18-23", method="transfer_intou10(address _to,uint _value)", type_label=function_definition];
92 [label="18_ require(balances_intou10[msg.sender] - _value >= 0);\n92-expression_statement-19-19", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
105 [label="19_ balances_intou10[msg.sender] -= _value;\n105-expression_statement-20-20", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
113 [label="20_ balances_intou10[_to] += _value;\n113-expression_statement-21-21", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
119 [label="21_ return true;\n119-return-22-22", method="transfer_intou10(address _to,uint _value)", type_label=return];
122 [label="23_ address private _operator;\n122-new_variable-24-24", method="", type_label=new_variable];
127 [label="24_ mapping(address => uint) balances_intou22;\n127-new_variable-25-25", method="", type_label=new_variable];
133 [label="25_ function transfer_intou22(address _to, uint _value) public returns (bool) {\n    require(balances_intou22[msg.sender] - _value >= 0);   \n    balances_intou22[msg.sender] -= _value;   \n    balances_intou22[_to] += _value;   \n    return true;\n  }\n133-function_definition-26-31", method="transfer_intou22(address _to,uint _value)", type_label=function_definition];
149 [label="26_ require(balances_intou22[msg.sender] - _value >= 0);\n149-expression_statement-27-27", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
162 [label="27_ balances_intou22[msg.sender] -= _value;\n162-expression_statement-28-28", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
170 [label="28_ balances_intou22[_to] += _value;\n170-expression_statement-29-29", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
176 [label="29_ return true;\n176-return-30-30", method="transfer_intou22(address _to,uint _value)", type_label=return];
179 [label="31_ bool private _status;\n179-new_variable-32-32", method="", type_label=new_variable];
184 [label="32_ mapping(address => uint) public lockTime_intou33;\n184-new_variable-33-33", method="", type_label=new_variable];
191 [label="33_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n191-function_definition-34-36", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
199 [label="34_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n199-expression_statement-35-35", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
207 [label="36_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n207-function_definition-37-41", method="withdraw_intou33()", type_label=function_definition];
211 [label="37_ require(now > lockTime_intou33[msg.sender]);\n211-expression_statement-38-38", method="withdraw_intou33()", type_label=expression_statement];
222 [label="38_ uint transferValue_intou33 = 10;\n222-new_variable-39-39", method="withdraw_intou33()", type_label=new_variable];
228 [label="39_ msg.sender.transfer(transferValue_intou33);\n228-expression_statement-40-40", method="withdraw_intou33()", type_label=expression_statement];
247 [label="42_ function _setOperator(address operator) internal {\n        require(_operator != operator, \"cannot set same operator\");\n        _operator = operator;\n        emit OperatorUpdated(operator, hasActiveOperator());\n    }\n247-function_definition-43-47", method="_setOperator(address operator)", type_label=function_definition];
255 [label="43_ require(_operator != operator, \"cannot set same operator\");\n255-expression_statement-44-44", method="_setOperator(address operator)", type_label=expression_statement];
265 [label="44_ _operator = operator;\n265-expression_statement-45-45", method="_setOperator(address operator)", type_label=expression_statement];
276 [label="47_ mapping(address => uint) public lockTime_intou1;\n276-new_variable-48-48", method="", type_label=new_variable];
283 [label="48_ function increaseLockTime_intou1(uint _secondsToIncrease) public {\n        lockTime_intou1[msg.sender] += _secondsToIncrease;   \n    }\n283-function_definition-49-51", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=function_definition];
291 [label="49_ lockTime_intou1[msg.sender] += _secondsToIncrease;\n291-expression_statement-50-50", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=expression_statement];
299 [label="51_ function withdraw_ovrflow1() public {\n        require(now > lockTime_intou1[msg.sender]);    \n        uint transferValue_intou1 = 10;           \n        msg.sender.transfer(transferValue_intou1);\n    }\n299-function_definition-52-56", method="withdraw_ovrflow1()", type_label=function_definition];
303 [label="52_ require(now > lockTime_intou1[msg.sender]);\n303-expression_statement-53-53", method="withdraw_ovrflow1()", type_label=expression_statement];
314 [label="53_ uint transferValue_intou1 = 10;\n314-new_variable-54-54", method="withdraw_ovrflow1()", type_label=new_variable];
320 [label="54_ msg.sender.transfer(transferValue_intou1);\n320-expression_statement-55-55", method="withdraw_ovrflow1()", type_label=expression_statement];
329 [label="56_ function _transferOperator(address operator) internal {\n        require(_operator != address(0), \"operator not set\");\n        _setOperator(operator);\n    }\n329-function_definition-57-60", method="_transferOperator(address operator)", type_label=function_definition];
337 [label="57_ require(_operator != address(0), \"operator not set\");\n337-expression_statement-58-58", method="_transferOperator(address operator)", type_label=expression_statement];
349 [label="58_ _setOperator(operator);\n349-expression_statement-59-59", method="_transferOperator(address operator)", type_label=expression_statement];
354 [label="60_ mapping(address => uint) balances_intou2;\n354-new_variable-61-61", method="", type_label=new_variable];
360 [label="61_ function transfer_undrflow2(address _to, uint _value) public returns (bool) {\n    require(balances_intou2[msg.sender] - _value >= 0);   \n    balances_intou2[msg.sender] -= _value;   \n    balances_intou2[_to] += _value;   \n    return true;\n  }\n360-function_definition-62-67", method="transfer_undrflow2(address _to,uint _value)", type_label=function_definition];
376 [label="62_ require(balances_intou2[msg.sender] - _value >= 0);\n376-expression_statement-63-63", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
389 [label="63_ balances_intou2[msg.sender] -= _value;\n389-expression_statement-64-64", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
397 [label="64_ balances_intou2[_to] += _value;\n397-expression_statement-65-65", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
403 [label="65_ return true;\n403-return-66-66", method="transfer_undrflow2(address _to,uint _value)", type_label=return];
406 [label="67_ function _renounceOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _operator = address(0);\n        _status = false;\n        emit OperatorUpdated(address(0), false);\n    }\n406-function_definition-68-73", method="_renounceOperator()", type_label=function_definition];
410 [label="68_ require(hasActiveOperator(), \"only when operator active\");\n410-expression_statement-69-69", method="_renounceOperator()", type_label=expression_statement];
419 [label="69_ _operator = address(0);\n419-expression_statement-70-70", method="_renounceOperator()", type_label=expression_statement];
425 [label="70_ _status = false;\n425-expression_statement-71-71", method="_renounceOperator()", type_label=expression_statement];
439 [label="73_ mapping(address => uint) public lockTime_intou17;\n439-new_variable-74-74", method="", type_label=new_variable];
446 [label="74_ function increaseLockTime_intou17(uint _secondsToIncrease) public {\n        lockTime_intou17[msg.sender] += _secondsToIncrease;   \n    }\n446-function_definition-75-77", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=function_definition];
454 [label="75_ lockTime_intou17[msg.sender] += _secondsToIncrease;\n454-expression_statement-76-76", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=expression_statement];
462 [label="77_ function withdraw_intou17() public {\n        require(now > lockTime_intou17[msg.sender]);    \n        uint transferValue_intou17 = 10;           \n        msg.sender.transfer(transferValue_intou17);\n    }\n462-function_definition-78-82", method="withdraw_intou17()", type_label=function_definition];
466 [label="78_ require(now > lockTime_intou17[msg.sender]);\n466-expression_statement-79-79", method="withdraw_intou17()", type_label=expression_statement];
477 [label="79_ uint transferValue_intou17 = 10;\n477-new_variable-80-80", method="withdraw_intou17()", type_label=new_variable];
483 [label="80_ msg.sender.transfer(transferValue_intou17);\n483-expression_statement-81-81", method="withdraw_intou17()", type_label=expression_statement];
492 [label="82_ function _activateOperator() internal {\n        require(!hasActiveOperator(), \"only when operator not active\");\n        _status = true;\n        emit OperatorUpdated(_operator, true);\n    }\n492-function_definition-83-87", method="_activateOperator()", type_label=function_definition];
496 [label="83_ require(!hasActiveOperator(), \"only when operator not active\");\n496-expression_statement-84-84", method="_activateOperator()", type_label=expression_statement];
506 [label="84_ _status = true;\n506-expression_statement-85-85", method="_activateOperator()", type_label=expression_statement];
518 [label="87_ mapping(address => uint) public lockTime_intou37;\n518-new_variable-88-88", method="", type_label=new_variable];
525 [label="88_ function increaseLockTime_intou37(uint _secondsToIncrease) public {\n        lockTime_intou37[msg.sender] += _secondsToIncrease;   \n    }\n525-function_definition-89-91", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=function_definition];
533 [label="89_ lockTime_intou37[msg.sender] += _secondsToIncrease;\n533-expression_statement-90-90", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=expression_statement];
541 [label="91_ function withdraw_intou37() public {\n        require(now > lockTime_intou37[msg.sender]);    \n        uint transferValue_intou37 = 10;           \n        msg.sender.transfer(transferValue_intou37);\n    }\n541-function_definition-92-96", method="withdraw_intou37()", type_label=function_definition];
545 [label="92_ require(now > lockTime_intou37[msg.sender]);\n545-expression_statement-93-93", method="withdraw_intou37()", type_label=expression_statement];
556 [label="93_ uint transferValue_intou37 = 10;\n556-new_variable-94-94", method="withdraw_intou37()", type_label=new_variable];
562 [label="94_ msg.sender.transfer(transferValue_intou37);\n562-expression_statement-95-95", method="withdraw_intou37()", type_label=expression_statement];
571 [label="96_ function _deactivateOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _status = false;\n        emit OperatorUpdated(_operator, false);\n    }\n571-function_definition-97-101", method="_deactivateOperator()", type_label=function_definition];
575 [label="97_ require(hasActiveOperator(), \"only when operator active\");\n575-expression_statement-98-98", method="_deactivateOperator()", type_label=expression_statement];
584 [label="98_ _status = false;\n584-expression_statement-99-99", method="_deactivateOperator()", type_label=expression_statement];
596 [label="101_ function bug_intou3() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n596-function_definition-102-105", method="bug_intou3()", type_label=function_definition];
600 [label="102_ uint8 vundflw =0;\n600-new_variable-103-103", method="bug_intou3()", type_label=new_variable];
606 [label="103_ vundflw = vundflw -10;\n606-expression_statement-104-104", method="bug_intou3()", type_label=expression_statement];
612 [label="105_ function getOperator() public view returns (address operator) {\n        operator = _operator;\n    }\n612-function_definition-106-108", method="getOperator()", type_label=function_definition];
622 [label="106_ operator = _operator;\n622-expression_statement-107-107", method="getOperator()", type_label=expression_statement];
626 [label="108_ mapping(address => uint) public lockTime_intou9;\n626-new_variable-109-109", method="", type_label=new_variable];
633 [label="109_ function increaseLockTime_intou9(uint _secondsToIncrease) public {\n        lockTime_intou9[msg.sender] += _secondsToIncrease;   \n    }\n633-function_definition-110-112", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=function_definition];
641 [label="110_ lockTime_intou9[msg.sender] += _secondsToIncrease;\n641-expression_statement-111-111", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=expression_statement];
649 [label="112_ function withdraw_intou9() public {\n        require(now > lockTime_intou9[msg.sender]);    \n        uint transferValue_intou9 = 10;           \n        msg.sender.transfer(transferValue_intou9);\n    }\n649-function_definition-113-117", method="withdraw_intou9()", type_label=function_definition];
653 [label="113_ require(now > lockTime_intou9[msg.sender]);\n653-expression_statement-114-114", method="withdraw_intou9()", type_label=expression_statement];
664 [label="114_ uint transferValue_intou9 = 10;\n664-new_variable-115-115", method="withdraw_intou9()", type_label=new_variable];
670 [label="115_ msg.sender.transfer(transferValue_intou9);\n670-expression_statement-116-116", method="withdraw_intou9()", type_label=expression_statement];
679 [label="117_ function isOperator(address caller) public view returns (bool ok) {\n        return (caller == getOperator());\n    }\n679-function_definition-118-120", method="isOperator(address caller)", type_label=function_definition];
693 [label="118_ return (caller == getOperator());\n693-return-119-119", method="isOperator(address caller)", type_label=return];
699 [label="120_ mapping(address => uint) public lockTime_intou25;\n699-new_variable-121-121", method="", type_label=new_variable];
706 [label="121_ function increaseLockTime_intou25(uint _secondsToIncrease) public {\n        lockTime_intou25[msg.sender] += _secondsToIncrease;   \n    }\n706-function_definition-122-124", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=function_definition];
714 [label="122_ lockTime_intou25[msg.sender] += _secondsToIncrease;\n714-expression_statement-123-123", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=expression_statement];
722 [label="124_ function withdraw_intou25() public {\n        require(now > lockTime_intou25[msg.sender]);    \n        uint transferValue_intou25 = 10;           \n        msg.sender.transfer(transferValue_intou25);\n    }\n722-function_definition-125-129", method="withdraw_intou25()", type_label=function_definition];
726 [label="125_ require(now > lockTime_intou25[msg.sender]);\n726-expression_statement-126-126", method="withdraw_intou25()", type_label=expression_statement];
737 [label="126_ uint transferValue_intou25 = 10;\n737-new_variable-127-127", method="withdraw_intou25()", type_label=new_variable];
743 [label="127_ msg.sender.transfer(transferValue_intou25);\n743-expression_statement-128-128", method="withdraw_intou25()", type_label=expression_statement];
752 [label="129_ function hasActiveOperator() public view returns (bool ok) {\n        return _status;\n    }\n752-function_definition-130-132", method="hasActiveOperator()", type_label=function_definition];
762 [label="130_ return _status;\n762-return-131-131", method="hasActiveOperator()", type_label=return];
764 [label="132_ function bug_intou19() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n764-function_definition-133-136", method="bug_intou19()", type_label=function_definition];
768 [label="133_ uint8 vundflw =0;\n768-new_variable-134-134", method="bug_intou19()", type_label=new_variable];
774 [label="134_ vundflw = vundflw -10;\n774-expression_statement-135-135", method="bug_intou19()", type_label=expression_statement];
780 [label="136_ function isActiveOperator(address caller) public view returns (bool ok) {\n        return (isOperator(caller) && hasActiveOperator());\n    }\n780-function_definition-137-139", method="isActiveOperator(address caller)", type_label=function_definition];
794 [label="137_ return (isOperator(caller) && hasActiveOperator());\n794-return-138-138", method="isActiveOperator(address caller)", type_label=return];
803 [label="139_ mapping(address => uint) balances_intou26;\n803-new_variable-140-140", method="", type_label=new_variable];
809 [label="140_ function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] - _value >= 0);   \n    balances_intou26[msg.sender] -= _value;   \n    balances_intou26[_to] += _value;   \n    return true;\n  }\n809-function_definition-141-146", method="transfer_intou26(address _to,uint _value)", type_label=function_definition];
825 [label="141_ require(balances_intou26[msg.sender] - _value >= 0);\n825-expression_statement-142-142", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
838 [label="142_ balances_intou26[msg.sender] -= _value;\n838-expression_statement-143-143", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
846 [label="143_ balances_intou26[_to] += _value;\n846-expression_statement-144-144", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
852 [label="144_ return true;\n852-return-145-145", method="transfer_intou26(address _to,uint _value)", type_label=return];
858 [label="148_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n858-function_definition-149-152", method="bug_intou27()", type_label=function_definition];
862 [label="149_ uint8 vundflw =0;\n862-new_variable-150-150", method="bug_intou27()", type_label=new_variable];
868 [label="150_ vundflw = vundflw -10;\n868-expression_statement-151-151", method="bug_intou27()", type_label=expression_statement];
884 [label="153_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n884-function_definition-154-157", method="bug_intou31()", type_label=function_definition];
888 [label="154_ uint8 vundflw =0;\n888-new_variable-155-155", method="bug_intou31()", type_label=new_variable];
894 [label="155_ vundflw = vundflw -10;\n894-expression_statement-156-156", method="bug_intou31()", type_label=expression_statement];
906 [label="158_ function _setMultiHashFormat(uint8 hashFunction, uint8 digestSize) internal {\n        emit HashFormatSet(hashFunction, digestSize);\n    }\n906-function_definition-159-161", method="_setMultiHashFormat(uint8 hashFunction,uint8 digestSize)", type_label=function_definition];
924 [label="161_ function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou20;    \n}\n924-function_definition-162-165", method="bug_intou20(uint8 p_intou20)", type_label=function_definition];
932 [label="162_ uint8 vundflw1=0;\n932-new_variable-163-163", method="bug_intou20(uint8 p_intou20)", type_label=new_variable];
938 [label="163_ vundflw1 = vundflw1 + p_intou20;\n938-expression_statement-164-164", method="bug_intou20(uint8 p_intou20)", type_label=expression_statement];
944 [label="165_ function _submitHash(bytes32 hash) internal {\n        emit HashSubmitted(hash);\n    }\n944-function_definition-166-168", method="_submitHash(bytes32 hash)", type_label=function_definition];
956 [label="168_ function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou32;    \n}\n956-function_definition-169-172", method="bug_intou32(uint8 p_intou32)", type_label=function_definition];
964 [label="169_ uint8 vundflw1=0;\n964-new_variable-170-170", method="bug_intou32(uint8 p_intou32)", type_label=new_variable];
970 [label="170_ vundflw1 = vundflw1 + p_intou32;\n970-expression_statement-171-171", method="bug_intou32(uint8 p_intou32)", type_label=expression_statement];
979 [label="174_ struct MultiHash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 digestSize;\n    }\n979-expression_statement-175-179", method="MultiHash()", type_label=expression_statement];
993 [label="179_ function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {\n        bytes memory out = new bytes(34);\n        out[0] = byte(multihash.hashFunction);\n        out[1] = byte(multihash.digestSize);\n        uint8 i;\n        for (i = 0; i < 32; i++) {\n          out[i+2] = multihash.hash[i];\n        }\n        return out;\n    }\n993-function_definition-180-189", method="_combineMultiHash(MultiHash memory multihash)", type_label=function_definition];
1007 [label="180_ bytes memory out = new bytes(34);\n1007-new_variable-181-181", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
1018 [label="181_ out[0] = byte(multihash.hashFunction);\n1018-expression_statement-182-182", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
1028 [label="182_ out[1] = byte(multihash.digestSize);\n1028-expression_statement-183-183", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
1038 [label="183_ uint8 i;\n1038-new_variable-184-184", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
1043 [label="184_ for(i < 32;;i++)\n1043-for-185-187", method="_combineMultiHash(MultiHash memory multihash)", type_label=for];
3082 [label="184_ end_loop", method="_combineMultiHash(MultiHash memory multihash)", type_label=end_loop];
1052 [label="184_ i++\n1052-expression_statement-185-185", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
1055 [label="185_ out[i+2] = multihash.hash[i];\n1055-expression_statement-186-186", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
1067 [label="187_ return out;\n1067-return-188-188", method="_combineMultiHash(MultiHash memory multihash)", type_label=return];
1069 [label="189_ mapping(address => uint) balances_intou38;\n1069-new_variable-190-190", method="", type_label=new_variable];
1075 [label="190_ function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] - _value >= 0);   \n    balances_intou38[msg.sender] -= _value;   \n    balances_intou38[_to] += _value;   \n    return true;\n  }\n1075-function_definition-191-196", method="transfer_intou38(address _to,uint _value)", type_label=function_definition];
1091 [label="191_ require(balances_intou38[msg.sender] - _value >= 0);\n1091-expression_statement-192-192", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
1104 [label="192_ balances_intou38[msg.sender] -= _value;\n1104-expression_statement-193-193", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
1112 [label="193_ balances_intou38[_to] += _value;\n1112-expression_statement-194-194", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
1118 [label="194_ return true;\n1118-return-195-195", method="transfer_intou38(address _to,uint _value)", type_label=return];
1121 [label="196_ function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {\n        require(source.length == 34, \"length of source must be 34\");\n        uint8 hashFunction = uint8(source[0]);\n        uint8 digestSize = uint8(source[1]);\n        bytes32 hash;\n        assembly {\n          hash := mload(add(source, 34))\n        }\n        return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n    }\n1121-function_definition-197-210", method="_splitMultiHash(bytes memory source)", type_label=function_definition];
1135 [label="197_ require(source.length == 34, \"length of source must be 34\");\n1135-expression_statement-198-198", method="_splitMultiHash(bytes memory source)", type_label=expression_statement];
1147 [label="198_ uint8 hashFunction = uint8(source[0]);\n1147-new_variable-199-199", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
1157 [label="199_ uint8 digestSize = uint8(source[1]);\n1157-new_variable-200-200", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
1167 [label="200_ bytes32 hash;\n1167-new_variable-201-201", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
1185 [label="204_ return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n1185-return-205-209", method="_splitMultiHash(bytes memory source)", type_label=return];
1199 [label="210_ function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou4;    \n}\n1199-function_definition-211-214", method="bug_intou4(uint8 p_intou4)", type_label=function_definition];
1207 [label="211_ uint8 vundflw1=0;\n1207-new_variable-212-212", method="bug_intou4(uint8 p_intou4)", type_label=new_variable];
1213 [label="212_ vundflw1 = vundflw1 + p_intou4;\n1213-expression_statement-213-213", method="bug_intou4(uint8 p_intou4)", type_label=expression_statement];
1240 [label="217_ function create(bytes calldata initData) external returns (address instance);\n1240-function_definition-218-218", method="create(bytes calldata initData)", type_label=function_definition];
1252 [label="218_ function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);\n1252-function_definition-219-219", method="createSalty(bytes calldata initData,bytes32 salt)", type_label=function_definition];
1268 [label="219_ function getInitSelector() external view returns (bytes4 initSelector);\n1268-function_definition-220-220", method="getInitSelector()", type_label=function_definition];
1277 [label="220_ function getInstanceRegistry() external view returns (address instanceRegistry);\n1277-function_definition-221-221", method="getInstanceRegistry()", type_label=function_definition];
1286 [label="221_ function getTemplate() external view returns (address template);\n1286-function_definition-222-222", method="getTemplate()", type_label=function_definition];
1295 [label="222_ function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);\n1295-function_definition-223-223", method="getSaltyInstance(bytes calldata,bytes32 salt)", type_label=function_definition];
1311 [label="223_ function getNextInstance(bytes calldata) external view returns (address instance);\n1311-function_definition-224-224", method="getNextInstance(bytes calldata)", type_label=function_definition];
1323 [label="224_ function getInstanceCreator(address instance) external view returns (address creator);\n1323-function_definition-225-225", method="getInstanceCreator(address instance)", type_label=function_definition];
1336 [label="225_ function getInstanceType() external view returns (bytes4 instanceType);\n1336-function_definition-226-226", method="getInstanceType()", type_label=function_definition];
1345 [label="226_ function getInstanceCount() external view returns (uint256 count);\n1345-function_definition-227-227", method="getInstanceCount()", type_label=function_definition];
1354 [label="227_ function getInstance(uint256 index) external view returns (address instance);\n1354-function_definition-228-228", method="getInstance(uint256 index)", type_label=function_definition];
1367 [label="228_ function getInstances() external view returns (address[] memory instances);\n1367-function_definition-229-229", method="getInstances()", type_label=function_definition];
1377 [label="229_ function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n1377-function_definition-230-230", method="getPaginatedInstances(uint256 startIndex,uint256 endIndex)", type_label=function_definition];
1398 [label="232_ function bug_intou12(uint8 p_intou12) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou12;    \n}\n1398-function_definition-233-236", method="bug_intou12(uint8 p_intou12)", type_label=function_definition];
1406 [label="233_ uint8 vundflw1=0;\n1406-new_variable-234-234", method="bug_intou12(uint8 p_intou12)", type_label=new_variable];
1412 [label="234_ vundflw1 = vundflw1 + p_intou12;\n1412-expression_statement-235-235", method="bug_intou12(uint8 p_intou12)", type_label=expression_statement];
1418 [label="236_ address private _factory;\n1418-new_variable-237-237", method="", type_label=new_variable];
1423 [label="237_ modifier initializeTemplate() {\n        _factory = msg.sender;\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n1423-expression_statement-238-244", method="", type_label=expression_statement];
1426 [label="238_ _factory = msg.sender;\n1426-expression_statement-239-239", method="", type_label=expression_statement];
1432 [label="239_ uint32 codeSize;\n1432-new_variable-240-240", method="", type_label=new_variable];
1446 [label="241_ require(codeSize == 0, \"must be called within contract constructor\");\n1446-expression_statement-242-242", method="", type_label=expression_statement];
1456 [label="242_ _;\n1456-expression_statement-243-243", method="", type_label=expression_statement];
1458 [label="244_ function getCreator() public view returns (address creator) {\n        creator = iFactory(_factory).getInstanceCreator(address(this));\n    }\n1458-function_definition-245-247", method="getCreator()", type_label=function_definition];
1468 [label="245_ creator = iFactory(_factory).getInstanceCreator(address(this));\n1468-expression_statement-246-246", method="getCreator()", type_label=expression_statement];
1482 [label="247_ function bug_intou7() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1482-function_definition-248-251", method="bug_intou7()", type_label=function_definition];
1486 [label="248_ uint8 vundflw =0;\n1486-new_variable-249-249", method="bug_intou7()", type_label=new_variable];
1492 [label="249_ vundflw = vundflw -10;\n1492-expression_statement-250-250", method="bug_intou7()", type_label=expression_statement];
1498 [label="251_ function isCreator(address caller) public view returns (bool ok) {\n        ok = (caller == getCreator());\n    }\n1498-function_definition-252-254", method="isCreator(address caller)", type_label=function_definition];
1512 [label="252_ ok = (caller == getCreator());\n1512-expression_statement-253-253", method="isCreator(address caller)", type_label=expression_statement];
1520 [label="254_ function bug_intou23() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1520-function_definition-255-258", method="bug_intou23()", type_label=function_definition];
1524 [label="255_ uint8 vundflw =0;\n1524-new_variable-256-256", method="bug_intou23()", type_label=new_variable];
1530 [label="256_ vundflw = vundflw -10;\n1530-expression_statement-257-257", method="bug_intou23()", type_label=expression_statement];
1536 [label="258_ function getFactory() public view returns (address factory) {\n        factory = _factory;\n    }\n1536-function_definition-259-261", method="getFactory()", type_label=function_definition];
1546 [label="259_ factory = _factory;\n1546-expression_statement-260-260", method="getFactory()", type_label=expression_statement];
1550 [label="261_ mapping(address => uint) balances_intou14;\n1550-new_variable-262-262", method="", type_label=new_variable];
1556 [label="262_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n1556-function_definition-263-268", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
1572 [label="263_ require(balances_intou14[msg.sender] - _value >= 0);\n1572-expression_statement-264-264", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1585 [label="264_ balances_intou14[msg.sender] -= _value;\n1585-expression_statement-265-265", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1593 [label="265_ balances_intou14[_to] += _value;\n1593-expression_statement-266-266", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1599 [label="266_ return true;\n1599-return-267-267", method="transfer_intou14(address _to,uint _value)", type_label=return];
1620 [label="270_ mapping(address => uint) public lockTime_intou13;\n1620-new_variable-271-271", method="", type_label=new_variable];
1627 [label="271_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n1627-function_definition-272-274", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
1635 [label="272_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n1635-expression_statement-273-273", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
1643 [label="274_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n1643-function_definition-275-279", method="withdraw_intou13()", type_label=function_definition];
1647 [label="275_ require(now > lockTime_intou13[msg.sender]);\n1647-expression_statement-276-276", method="withdraw_intou13()", type_label=expression_statement];
1658 [label="276_ uint transferValue_intou13 = 10;\n1658-new_variable-277-277", method="withdraw_intou13()", type_label=new_variable];
1664 [label="277_ msg.sender.transfer(transferValue_intou13);\n1664-expression_statement-278-278", method="withdraw_intou13()", type_label=expression_statement];
1687 [label="280_ function initialize(\n        address operator,\n        bytes memory multihash,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n        if (multihash.length != 0) {\n            MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);\n            ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);\n            ProofHashes._submitHash(multihashObj.hash);\n        }\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n        emit Initialized(operator, multihash, metadata);\n    }\n1687-function_definition-281-299", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=function_definition];
1702 [label="284_ initializeTemplate()\n1702-expression_statement-285-285", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1705 [label="285_ if_operator != address(0)\n1705-if-286-289", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3744 [label="285_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1712 [label="286_ Operated._setOperator(operator);\n1712-expression_statement-287-287", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1719 [label="287_ Operated._activateOperator();\n1719-expression_statement-288-288", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1724 [label="289_ if_multihash.length != 0\n1724-if-290-294", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3763 [label="289_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1731 [label="290_ MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);\n1731-new_variable-291-291", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=new_variable];
1744 [label="291_ ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);\n1744-expression_statement-292-292", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1757 [label="292_ ProofHashes._submitHash(multihashObj.hash);\n1757-expression_statement-293-293", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1766 [label="294_ if_metadata.length != 0\n1766-if-295-297", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3805 [label="294_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1773 [label="295_ EventMetadata._setMetadata(metadata);\n1773-expression_statement-296-296", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1788 [label="299_ mapping(address => uint) balances_intou30;\n1788-new_variable-300-300", method="", type_label=new_variable];
1794 [label="300_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n1794-function_definition-301-306", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
1810 [label="301_ require(balances_intou30[msg.sender] - _value >= 0);\n1810-expression_statement-302-302", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1823 [label="302_ balances_intou30[msg.sender] -= _value;\n1823-expression_statement-303-303", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1831 [label="303_ balances_intou30[_to] += _value;\n1831-expression_statement-304-304", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1837 [label="304_ return true;\n1837-return-305-305", method="transfer_intou30(address _to,uint _value)", type_label=return];
1840 [label="306_ function submitHash(bytes32 multihash) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        ProofHashes._submitHash(multihash);\n    }\n1840-function_definition-307-310", method="submitHash(bytes32 multihash)", type_label=function_definition];
1848 [label="307_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1848-expression_statement-308-308", method="submitHash(bytes32 multihash)", type_label=expression_statement];
1872 [label="308_ ProofHashes._submitHash(multihash);\n1872-expression_statement-309-309", method="submitHash(bytes32 multihash)", type_label=expression_statement];
1879 [label="310_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n1879-function_definition-311-314", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
1887 [label="311_ uint8 vundflw1=0;\n1887-new_variable-312-312", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
1893 [label="312_ vundflw1 = vundflw1 + p_intou8;\n1893-expression_statement-313-313", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
1899 [label="314_ function setMetadata(bytes memory metadata) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        EventMetadata._setMetadata(metadata);\n    }\n1899-function_definition-315-318", method="setMetadata(bytes memory metadata)", type_label=function_definition];
1907 [label="315_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1907-expression_statement-316-316", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1931 [label="316_ EventMetadata._setMetadata(metadata);\n1931-expression_statement-317-317", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1938 [label="318_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1938-function_definition-319-322", method="bug_intou39()", type_label=function_definition];
1942 [label="319_ uint8 vundflw =0;\n1942-new_variable-320-320", method="bug_intou39()", type_label=new_variable];
1948 [label="320_ vundflw = vundflw -10;\n1948-expression_statement-321-321", method="bug_intou39()", type_label=expression_statement];
1954 [label="322_ function transferOperator(address operator) public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._transferOperator(operator);\n    }\n1954-function_definition-323-326", method="transferOperator(address operator)", type_label=function_definition];
1962 [label="323_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1962-expression_statement-324-324", method="transferOperator(address operator)", type_label=expression_statement];
1977 [label="324_ Operated._transferOperator(operator);\n1977-expression_statement-325-325", method="transferOperator(address operator)", type_label=expression_statement];
1984 [label="326_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n1984-function_definition-327-330", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
1992 [label="327_ uint8 vundflw1=0;\n1992-new_variable-328-328", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
1998 [label="328_ vundflw1 = vundflw1 + p_intou36;\n1998-expression_statement-329-329", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
2004 [label="330_ function renounceOperator() public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._renounceOperator();\n    }\n2004-function_definition-331-334", method="renounceOperator()", type_label=function_definition];
2008 [label="331_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n2008-expression_statement-332-332", method="renounceOperator()", type_label=expression_statement];
2023 [label="332_ Operated._renounceOperator();\n2023-expression_statement-333-333", method="renounceOperator()", type_label=expression_statement];
2028 [label="334_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n2028-function_definition-335-338", method="bug_intou35()", type_label=function_definition];
2032 [label="335_ uint8 vundflw =0;\n2032-new_variable-336-336", method="bug_intou35()", type_label=new_variable];
2038 [label="336_ vundflw = vundflw -10;\n2038-expression_statement-337-337", method="bug_intou35()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1780;
13 -> 21  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
21 -> 27  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 55  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
76 -> 92  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
92 -> 105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
105 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
122 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
133 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
176 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
179 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
360 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
389 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
406 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
633 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
706 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
726 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
762 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
764 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
794 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
809 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
858 -> 862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
888 -> 894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
924 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
964 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 1007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1007 -> 1018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 1028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1028 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 1055  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1043 -> 3082  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3082 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 1043  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1055 -> 1052  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1067 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1075 -> 1091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1091 -> 1104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1104 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1121 -> 1135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1135 -> 1147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1147 -> 1157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1157 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1185 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1199 -> 1207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1207 -> 1213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1398 -> 1406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1406 -> 1412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1418 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1426 -> 1432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1446 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1458 -> 1468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1482 -> 1486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 1512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1520 -> 1524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1524 -> 1530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1536 -> 1546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1556 -> 1572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 1585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1585 -> 1593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1593 -> 1599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1599 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1627 -> 1635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1643 -> 1647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1647 -> 1658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1658 -> 1664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1687 -> 1705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1705 -> 1712  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1705 -> 3744  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3744 -> 1724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1712 -> 1719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1719 -> 3744  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1724 -> 1731  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1724 -> 3763  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3763 -> 1766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1731 -> 1744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1744 -> 1757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1757 -> 3763  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1766 -> 1773  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1766 -> 3805  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3805 -> 1780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1773 -> 3805  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1794 -> 1810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1810 -> 1823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1823 -> 1831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1831 -> 1837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1837 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1840 -> 1848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1848 -> 1872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1879 -> 1887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1887 -> 1893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1899 -> 1907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1907 -> 1931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1938 -> 1942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1942 -> 1948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1954 -> 1962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1962 -> 1977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1984 -> 1992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1992 -> 1998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2004 -> 2008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2008 -> 2023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2028 -> 2032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2032 -> 2038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
