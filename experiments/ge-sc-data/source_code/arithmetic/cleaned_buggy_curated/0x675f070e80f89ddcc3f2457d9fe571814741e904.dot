digraph  {
13 [label="2_ uint256 public EGGS_TO_HATCH_1SHRIMP=86400;\n13-new_variable-3-3", type_label=new_variable];
19 [label="3_ uint256 public STARTING_SHRIMP=300;\n19-new_variable-4-4", type_label=new_variable];
25 [label="4_ uint256 PSN=10000;\n25-new_variable-5-5", type_label=new_variable];
30 [label="5_ uint256 PSNH=5000;\n30-new_variable-6-6", type_label=new_variable];
35 [label="6_ bool public initialized=false;\n35-new_variable-7-7", type_label=new_variable];
42 [label="7_ address public ceoAddress;\n42-new_variable-8-8", type_label=new_variable];
47 [label="8_ mapping (address => uint256) public hatcheryShrimp;\n47-new_variable-9-9", type_label=new_variable];
54 [label="9_ mapping (address => uint256) public claimedEggs;\n54-new_variable-10-10", type_label=new_variable];
61 [label="10_ mapping (address => uint256) public lastHatch;\n61-new_variable-11-11", type_label=new_variable];
68 [label="11_ mapping (address => address) public referrals;\n68-new_variable-12-12", type_label=new_variable];
75 [label="12_ uint256 public marketEggs;\n75-new_variable-13-13", type_label=new_variable];
80 [label="13_ DinosaurFarmer2\n80-function_definition-14-16", type_label=function_definition];
84 [label="14_ ceoAddress=msg.sender;\n84-expression_statement-15-15", type_label=expression_statement];
90 [label="16_ hatchEggs\n90-function_definition-17-29", type_label=function_definition];
98 [label="17_ require(initialized);\n98-expression_statement-18-18", type_label=expression_statement];
103 [label="18_ if_referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender\n103-if-19-21", type_label=if];
986 [label="18_ end_if", type_label=end_if];
122 [label="19_ referrals[msg.sender]=ref;\n122-expression_statement-20-20", type_label=expression_statement];
130 [label="21_ uint256 eggsUsed=getMyEggs();\n130-new_variable-22-22", type_label=new_variable];
137 [label="22_ uint256 newShrimp=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP);\n137-new_variable-23-23", type_label=new_variable];
150 [label="23_ hatcheryShrimp[msg.sender]=SafeMath.add(hatcheryShrimp[msg.sender],newShrimp);\n150-expression_statement-24-24", type_label=expression_statement];
169 [label="24_ claimedEggs[msg.sender]=0;\n169-expression_statement-25-25", type_label=expression_statement];
177 [label="25_ lastHatch[msg.sender]=now;\n177-expression_statement-26-26", type_label=expression_statement];
185 [label="26_ claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\n185-expression_statement-27-27", type_label=expression_statement];
215 [label="27_ marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\n215-expression_statement-28-28", type_label=expression_statement];
233 [label="29_ sellEggs\n233-function_definition-30-40", type_label=function_definition];
237 [label="30_ require(initialized);\n237-expression_statement-31-31", type_label=expression_statement];
242 [label="31_ uint256 hasEggs=getMyEggs();\n242-new_variable-32-32", type_label=new_variable];
249 [label="32_ uint256 eggValue=calculateEggSell(hasEggs);\n249-new_variable-33-33", type_label=new_variable];
258 [label="33_ uint256 fee=devFee(eggValue);\n258-new_variable-34-34", type_label=new_variable];
267 [label="34_ claimedEggs[msg.sender]=0;\n267-expression_statement-35-35", type_label=expression_statement];
275 [label="35_ lastHatch[msg.sender]=now;\n275-expression_statement-36-36", type_label=expression_statement];
283 [label="36_ marketEggs=SafeMath.add(marketEggs,hasEggs);\n283-expression_statement-37-37", type_label=expression_statement];
294 [label="37_ ceoAddress.transfer(fee);\n294-expression_statement-38-38", type_label=expression_statement];
301 [label="38_ msg.sender.transfer(SafeMath.sub(eggValue,fee));\n301-expression_statement-39-39", type_label=expression_statement];
317 [label="40_ buyEggs\n317-function_definition-41-47", type_label=function_definition];
322 [label="41_ require(initialized);\n322-expression_statement-42-42", type_label=expression_statement];
327 [label="42_ uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n327-new_variable-43-43", type_label=new_variable];
351 [label="43_ eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\n351-expression_statement-44-44", type_label=expression_statement];
365 [label="44_ ceoAddress.transfer(devFee(msg.value));\n365-expression_statement-45-45", type_label=expression_statement];
377 [label="45_ claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\n377-expression_statement-46-46", type_label=expression_statement];
396 [label="47_ calculateTrade\n396-function_definition-48-50", type_label=function_definition];
417 [label="48_ return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n417-return-49-49", type_label=return];
468 [label="50_ calculateEggSell\n468-function_definition-51-53", type_label=function_definition];
481 [label="51_ return calculateTrade(eggs,marketEggs,this.balance);\n481-return-52-52", type_label=return];
492 [label="53_ calculateEggBuy\n492-function_definition-54-56", type_label=function_definition];
509 [label="54_ return calculateTrade(eth,contractBalance,marketEggs);\n509-return-55-55", type_label=return];
518 [label="56_ calculateEggBuySimple\n518-function_definition-57-59", type_label=function_definition];
531 [label="57_ return calculateEggBuy(eth,this.balance);\n531-return-58-58", type_label=return];
540 [label="59_ devFee\n540-function_definition-60-62", type_label=function_definition];
553 [label="60_ return SafeMath.div(SafeMath.mul(amount,4),100);\n553-return-61-61", type_label=return];
569 [label="62_ seedMarket\n569-function_definition-63-67", type_label=function_definition];
578 [label="63_ require(marketEggs==0);\n578-expression_statement-64-64", type_label=expression_statement];
585 [label="64_ initialized=true;\n585-expression_statement-65-65", type_label=expression_statement];
590 [label="65_ marketEggs=eggs;\n590-expression_statement-66-66", type_label=expression_statement];
594 [label="67_ getFreeShrimp\n594-function_definition-68-73", type_label=function_definition];
598 [label="68_ require(initialized);\n598-expression_statement-69-69", type_label=expression_statement];
603 [label="69_ require(hatcheryShrimp[msg.sender]==0);\n603-expression_statement-70-70", type_label=expression_statement];
614 [label="70_ lastHatch[msg.sender]=now;\n614-expression_statement-71-71", type_label=expression_statement];
622 [label="71_ hatcheryShrimp[msg.sender]=STARTING_SHRIMP;\n622-expression_statement-72-72", type_label=expression_statement];
630 [label="73_ getBalance\n630-function_definition-74-76", type_label=function_definition];
639 [label="74_ return this.balance;\n639-return-75-75", type_label=return];
643 [label="76_ getMyShrimp\n643-function_definition-77-79", type_label=function_definition];
652 [label="77_ return hatcheryShrimp[msg.sender];\n652-return-78-78", type_label=return];
658 [label="79_ getMyEggs\n658-function_definition-80-82", type_label=function_definition];
667 [label="80_ return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\n667-return-81-81", type_label=return];
685 [label="82_ getEggsSinceLastHatch\n685-function_definition-83-86", type_label=function_definition];
698 [label="83_ uint256 secondsPassed=min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr]));\n698-new_variable-84-84", type_label=new_variable];
718 [label="84_ return SafeMath.mul(secondsPassed,hatcheryShrimp[adr]);\n718-return-85-85", type_label=return];
729 [label="86_ min\n729-function_definition-87-89", type_label=function_definition];
746 [label="87_ return a < b ? a : b;\n746-return-88-88", type_label=return];
756 [label="91_ mul\n756-function_definition-92-99", type_label=function_definition];
773 [label="92_ if_a == 0\n773-if-93-95", type_label=if];
1656 [label="92_ end_if", type_label=end_if];
778 [label="93_ return 0;\n778-return-94-94", type_label=return];
780 [label="95_ uint256 c = a * b;\n780-new_variable-96-96", type_label=new_variable];
788 [label="96_ assert(c / a == b);\n788-expression_statement-97-97", type_label=expression_statement];
797 [label="97_ return c;\n797-return-98-98", type_label=return];
799 [label="99_ div\n799-function_definition-100-103", type_label=function_definition];
816 [label="100_ uint256 c = a / b;\n816-new_variable-101-101", type_label=new_variable];
824 [label="101_ return c;\n824-return-102-102", type_label=return];
826 [label="103_ sub\n826-function_definition-104-107", type_label=function_definition];
843 [label="104_ assert(b <= a);\n843-expression_statement-105-105", type_label=expression_statement];
850 [label="105_ return a - b;\n850-return-106-106", type_label=return];
854 [label="107_ add\n854-function_definition-108-112", type_label=function_definition];
871 [label="108_ uint256 c = a + b;\n871-new_variable-109-109", type_label=new_variable];
879 [label="109_ assert(c >= a);\n879-expression_statement-110-110", type_label=expression_statement];
886 [label="110_ return c;\n886-return-111-111", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
13 -> 19  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
19 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 42  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
61 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
103 -> 122  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
103 -> 986  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
986 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 986  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
137 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
258 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
275 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
351 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
468 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
492 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
518 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
540 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
569 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
603 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
643 -> 652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
658 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
667 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
685 -> 698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
698 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
729 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
756 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 778  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
773 -> 1656  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1656 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
778 -> 1656  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
778 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
780 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
799 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
826 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
854 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
879 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
