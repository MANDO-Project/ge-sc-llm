digraph  {
12 [label="2_ address public owner;\n12-new_variable-3-3", type_label=new_variable];
19 [label="4_ owner = msg.sender;\n19-expression_statement-5-5", type_label=expression_statement];
25 [label="6_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n25-expression_statement-7-10", type_label=expression_statement];
28 [label="7_ require(msg.sender == owner);\n28-expression_statement-8-8", type_label=expression_statement];
37 [label="8_ _;\n37-expression_statement-9-9", type_label=expression_statement];
39 [label="10_ transferOwnership\n39-function_definition-11-13", type_label=function_definition];
46 [label="10_ onlyOwner\n46-expression_statement-11-11", type_label=expression_statement];
49 [label="11_ owner = newOwner;\n49-expression_statement-12-12", type_label=expression_statement];
56 [label="15_ mul\n56-function_definition-16-20", type_label=function_definition];
73 [label="16_ uint c = a * b;\n73-new_variable-17-17", type_label=new_variable];
81 [label="17_ assert(a == 0 || c / a == b);\n81-expression_statement-18-18", type_label=expression_statement];
94 [label="18_ return c;\n94-return-19-19", type_label=return];
96 [label="20_ div\n96-function_definition-21-26", type_label=function_definition];
113 [label="21_ assert(b > 0);\n113-expression_statement-22-22", type_label=expression_statement];
120 [label="22_ uint c = a / b;\n120-new_variable-23-23", type_label=new_variable];
128 [label="23_ assert(a == b * c + a % b);\n128-expression_statement-24-24", type_label=expression_statement];
141 [label="24_ return c;\n141-return-25-25", type_label=return];
143 [label="26_ sub\n143-function_definition-27-30", type_label=function_definition];
160 [label="27_ assert(b <= a);\n160-expression_statement-28-28", type_label=expression_statement];
167 [label="28_ return a - b;\n167-return-29-29", type_label=return];
171 [label="30_ add\n171-function_definition-31-35", type_label=function_definition];
188 [label="31_ uint c = a + b;\n188-new_variable-32-32", type_label=new_variable];
196 [label="32_ assert(c >= a);\n196-expression_statement-33-33", type_label=expression_statement];
203 [label="33_ return c;\n203-return-34-34", type_label=return];
211 [label="37_ bool public paused = false;\n211-new_variable-38-38", type_label=new_variable];
222 [label="40_ modifier notPaused {\n        require(!paused);\n        _;\n    }\n222-expression_statement-41-44", type_label=expression_statement];
225 [label="41_ require(!paused);\n225-expression_statement-42-42", type_label=expression_statement];
231 [label="42_ _;\n231-expression_statement-43-43", type_label=expression_statement];
233 [label="44_ pause\n233-function_definition-45-48", type_label=function_definition];
236 [label="44_ onlyOwner\n236-expression_statement-45-45", type_label=expression_statement];
239 [label="45_ paused = true;\n239-expression_statement-46-46", type_label=expression_statement];
246 [label="48_ unpause\n246-function_definition-49-52", type_label=function_definition];
249 [label="48_ onlyOwner\n249-expression_statement-49-49", type_label=expression_statement];
252 [label="49_ paused = false;\n252-expression_statement-50-50", type_label=expression_statement];
262 [label="54_ totalSupply\n262-function_definition-55-55", type_label=function_definition];
270 [label="55_ balanceOf\n270-function_definition-56-56", type_label=function_definition];
283 [label="56_ transfer\n283-function_definition-57-57", type_label=function_definition];
299 [label="57_ transferFrom\n299-function_definition-58-58", type_label=function_definition];
319 [label="58_ approve\n319-function_definition-59-59", type_label=function_definition];
335 [label="59_ allowance\n335-function_definition-60-60", type_label=function_definition];
395 [label="64_ uint256 private totalSupply_;\n395-new_variable-65-65", type_label=new_variable];
400 [label="65_ string public name;\n400-new_variable-66-66", type_label=new_variable];
405 [label="66_ string public symbol;\n405-new_variable-67-67", type_label=new_variable];
410 [label="67_ uint8 public decimals;\n410-new_variable-68-68", type_label=new_variable];
415 [label="68_ mapping (address => uint256) public balances;\n415-new_variable-69-69", type_label=new_variable];
422 [label="69_ mapping (address => uint256) public frozen;\n422-new_variable-70-70", type_label=new_variable];
429 [label="70_ mapping (address => mapping (address => uint256)) public allowed;\n429-new_variable-71-71", type_label=new_variable];
470 [label="75_ name = \"IP16 Chain\";\n470-expression_statement-76-76", type_label=expression_statement];
475 [label="76_ symbol = \"IPC16\";\n475-expression_statement-77-77", type_label=expression_statement];
480 [label="77_ decimals = 6;\n480-expression_statement-78-78", type_label=expression_statement];
484 [label="78_ totalSupply_ = 880000000 * 10 ** uint256(decimals);\n484-expression_statement-79-79", type_label=expression_statement];
494 [label="79_ balances[msg.sender] = totalSupply_;\n494-expression_statement-80-80", type_label=expression_statement];
502 [label="81_ burn\n502-function_definition-82-90", type_label=function_definition];
512 [label="81_ onlyOwner\n512-expression_statement-82-82", type_label=expression_statement];
521 [label="82_ require(_addr != 0);\n521-expression_statement-83-83", type_label=expression_statement];
528 [label="83_ require(_amount <= balances[_addr]);\n528-expression_statement-84-84", type_label=expression_statement];
537 [label="84_ totalSupply_ = sub(totalSupply_, _amount);\n537-expression_statement-85-85", type_label=expression_statement];
546 [label="85_ balances[_addr] = sub(balances[_addr], _amount);\n546-expression_statement-86-86", type_label=expression_statement];
575 [label="88_ return true;\n575-return-89-89", type_label=return];
578 [label="90_ freeze\n578-function_definition-91-98", type_label=function_definition];
589 [label="90_ onlyOwner\n589-expression_statement-91-91", type_label=expression_statement];
597 [label="91_ require(balances[_addr] >= _value);\n597-expression_statement-92-92", type_label=expression_statement];
606 [label="92_ require(_value > 0);\n606-expression_statement-93-93", type_label=expression_statement];
613 [label="93_ balances[_addr] = sub(balances[_addr], _value);\n613-expression_statement-94-94", type_label=expression_statement];
626 [label="94_ frozen[_addr] = add(frozen[_addr], _value);\n626-expression_statement-95-95", type_label=expression_statement];
645 [label="96_ return true;\n645-return-97-97", type_label=return];
648 [label="98_ unfreeze\n648-function_definition-99-106", type_label=function_definition];
659 [label="98_ onlyOwner\n659-expression_statement-99-99", type_label=expression_statement];
667 [label="99_ require(frozen[_addr] >= _value);\n667-expression_statement-100-100", type_label=expression_statement];
676 [label="100_ require(_value > 0);\n676-expression_statement-101-101", type_label=expression_statement];
683 [label="101_ frozen[_addr] = sub(frozen[_addr], _value);\n683-expression_statement-102-102", type_label=expression_statement];
696 [label="102_ balances[_addr] = add(balances[_addr], _value);\n696-expression_statement-103-103", type_label=expression_statement];
715 [label="104_ return true;\n715-return-105-105", type_label=return];
718 [label="106_ frozenOf\n718-function_definition-107-109", type_label=function_definition];
732 [label="107_ return frozen[_addr];\n732-return-108-108", type_label=return];
736 [label="109_ totalSupply\n736-function_definition-110-112", type_label=function_definition];
745 [label="110_ return totalSupply_;\n745-return-111-111", type_label=return];
747 [label="112_ balanceOf\n747-function_definition-113-115", type_label=function_definition];
761 [label="113_ return balances[_addr];\n761-return-114-114", type_label=return];
765 [label="115_ transfer\n765-function_definition-116-123", type_label=function_definition];
776 [label="115_ notPaused\n776-expression_statement-116-116", type_label=expression_statement];
784 [label="116_ require(balances[msg.sender] >= _value);\n784-expression_statement-117-117", type_label=expression_statement];
795 [label="117_ require(balances[_to] + _value >= balances[_to]);\n795-expression_statement-118-118", type_label=expression_statement];
808 [label="118_ balances[msg.sender] -= _value;\n808-expression_statement-119-119", type_label=expression_statement];
816 [label="119_ balances[_to] += _value;\n816-expression_statement-120-120", type_label=expression_statement];
832 [label="121_ return true;\n832-return-122-122", type_label=return];
835 [label="123_ transferFrom\n835-function_definition-124-133", type_label=function_definition];
850 [label="123_ notPaused\n850-expression_statement-124-124", type_label=expression_statement];
858 [label="124_ require(balances[_from] >= _value);\n858-expression_statement-125-125", type_label=expression_statement];
867 [label="125_ require(balances[_to] + _value >= balances[_to]);\n867-expression_statement-126-126", type_label=expression_statement];
880 [label="126_ require(allowed[_from][msg.sender] >= _value);\n880-expression_statement-127-127", type_label=expression_statement];
893 [label="127_ balances[_to] += _value;\n893-expression_statement-128-128", type_label=expression_statement];
899 [label="128_ balances[_from] -= _value;\n899-expression_statement-129-129", type_label=expression_statement];
905 [label="129_ allowed[_from][msg.sender] -= _value;\n905-expression_statement-130-130", type_label=expression_statement];
923 [label="131_ return true;\n923-return-132-132", type_label=return];
926 [label="133_ approve\n926-function_definition-134-139", type_label=function_definition];
937 [label="133_ notPaused\n937-expression_statement-134-134", type_label=expression_statement];
945 [label="134_ require(_value > 0);\n945-expression_statement-135-135", type_label=expression_statement];
952 [label="135_ allowed[msg.sender][_spender] = _value;\n952-expression_statement-136-136", type_label=expression_statement];
972 [label="137_ return true;\n972-return-138-138", type_label=return];
975 [label="139_ allowance\n975-function_definition-140-142", type_label=function_definition];
993 [label="140_ return allowed[_owner][_spender];\n993-return-141-141", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
28 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
39 -> 49  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 94  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
96 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
143 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
171 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
225 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
475 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
578 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
648 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
667 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
683 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
718 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
736 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
747 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
765 -> 784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
784 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
835 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
867 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
880 -> 893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
899 -> 905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
926 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
975 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
