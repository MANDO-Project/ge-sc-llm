digraph  {
12 [label="2_ address public owner;\n12-new_variable-3-3", type_label=new_variable];
27 [label="4_ modifier onlyOwner() { require(msg.sender == owner); _; }\n27-expression_statement-5-5", type_label=expression_statement];
30 [label="4_ require(msg.sender == owner);\n30-expression_statement-5-5", type_label=expression_statement];
39 [label="4_ _;\n39-expression_statement-5-5", type_label=expression_statement];
41 [label="5_ Ownable\n41-function_definition-6-8", type_label=function_definition];
45 [label="6_ owner = msg.sender;\n45-expression_statement-7-7", type_label=expression_statement];
51 [label="8_ transferOwnership\n51-function_definition-9-13", type_label=function_definition];
58 [label="8_ onlyOwner\n58-expression_statement-9-9", type_label=expression_statement];
61 [label="9_ require(newOwner != address(0));\n61-expression_statement-10-10", type_label=expression_statement];
70 [label="10_ owner = newOwner;\n70-expression_statement-11-11", type_label=expression_statement];
74 [label="11_ OwnershipTransferred(owner, newOwner);\n74-expression_statement-12-12", type_label=expression_statement];
87 [label="15_ mapping(address => bool) public managers;\n87-new_variable-16-16", type_label=new_variable];
106 [label="18_ modifier onlyManager() { require(managers[msg.sender]); _; }\n106-expression_statement-19-19", type_label=expression_statement];
109 [label="18_ require(managers[msg.sender]);\n109-expression_statement-19-19", type_label=expression_statement];
118 [label="18_ _;\n118-expression_statement-19-19", type_label=expression_statement];
120 [label="19_ addManager\n120-function_definition-20-24", type_label=function_definition];
126 [label="19_ onlyOwner\n126-expression_statement-20-20", type_label=expression_statement];
130 [label="20_ require(_manager != address(0));\n130-expression_statement-21-21", type_label=expression_statement];
139 [label="21_ managers[_manager] = true;\n139-expression_statement-22-22", type_label=expression_statement];
146 [label="22_ ManagerAdded(_manager);\n146-expression_statement-23-23", type_label=expression_statement];
151 [label="24_ removeManager\n151-function_definition-25-29", type_label=function_definition];
157 [label="24_ onlyOwner\n157-expression_statement-25-25", type_label=expression_statement];
161 [label="25_ require(_manager != address(0));\n161-expression_statement-26-26", type_label=expression_statement];
170 [label="26_ managers[_manager] = false;\n170-expression_statement-27-27", type_label=expression_statement];
177 [label="27_ ManagerRemoved(_manager);\n177-expression_statement-28-28", type_label=expression_statement];
188 [label="31_ struct Picture {\n        string hash;\n        uint32 rows;\n        uint32 cols;\n        uint32 width;\n        uint32 height;\n        string image;\n        string name;\n        string author;\n    }\n188-expression_statement-32-41", type_label=expression_statement];
222 [label="41_ mapping(bytes32 => Picture) public pictures;\n222-new_variable-42-42", type_label=new_variable];
230 [label="42_ mapping(bytes32 => bool) public hashes;\n230-new_variable-43-43", type_label=new_variable];
277 [label="45_ MytilcoinStorage\n277-function_definition-46-69", type_label=function_definition];
281 [label="46_ addManager(msg.sender);\n281-expression_statement-47-47", type_label=expression_statement];
288 [label="47_ addManager(0x73b1046A185bF68c11b4c90d79Cffc2E07519951);\n288-expression_statement-48-48", type_label=expression_statement];
293 [label="48_ addManager(0x7b15d3e5418E5140fF827127Ee1f44d2d65F8710);\n293-expression_statement-49-49", type_label=expression_statement];
298 [label="49_ addManager(0x977482e6f7Ad897Ee70c33A20f30c369f4BF7265);\n298-expression_statement-50-50", type_label=expression_statement];
303 [label="50_ addManager(0xa611D8C5183E533e13ecfFb3E9F9628e9dEF2755);\n303-expression_statement-51-51", type_label=expression_statement];
308 [label="51_ addManager(0xe16BBd0Cf49F4cC1Eb92fFBbaa71d7580b966097);\n308-expression_statement-52-52", type_label=expression_statement];
313 [label="52_ addManager(0x5c9E1b25113A5c18fBFd7655cCd5C160bf79B51E);\n313-expression_statement-53-53", type_label=expression_statement];
318 [label="53_ addManager(0x0812B7182aC1C5285E10644CdF5E9BB6234d0AF0);\n318-expression_statement-54-54", type_label=expression_statement];
323 [label="54_ addManager(0x52e5689a151CA40B56C217B5dB667F66A197e7Bb);\n323-expression_statement-55-55", type_label=expression_statement];
328 [label="55_ addManager(0xA71396Fcb7efd57AeC5FaD1Eb7e5503cDE136123);\n328-expression_statement-56-56", type_label=expression_statement];
333 [label="56_ addManager(0xF3f90257dAd60f8c4496D35117e04eAbb507b713);\n333-expression_statement-57-57", type_label=expression_statement];
338 [label="57_ addManager(0x63B182305Bd56f0b250a4974Cc872169ab706c53);\n338-expression_statement-58-58", type_label=expression_statement];
343 [label="58_ addManager(0x28d2446cE3F1F99B477DD77F9C6361f5b57DcFd8);\n343-expression_statement-59-59", type_label=expression_statement];
348 [label="59_ addManager(0x5c3770785Ebd50Ef7bC91b8afC8a7F86F014c54E);\n348-expression_statement-60-60", type_label=expression_statement];
353 [label="60_ addManager(0x0fDdAe9D4E6670e3699bdBA3058a84b92DFf95b2);\n353-expression_statement-61-61", type_label=expression_statement];
358 [label="61_ addManager(0x5CB547C3fA7abd51E508C980470fb86B731cd0bf);\n358-expression_statement-62-62", type_label=expression_statement];
363 [label="62_ addManager(0xEB9e2e0a32BD1De66762cCaef5438586C6C9ac3c);\n363-expression_statement-63-63", type_label=expression_statement];
368 [label="63_ addManager(0x6dBA00A685e0E4485A838E31A3a7EB63A5935702);\n368-expression_statement-64-64", type_label=expression_statement];
373 [label="64_ addManager(0x2EF9a68D2A9fB9aC4919e2D85cf22780e5EBFCfD);\n373-expression_statement-65-65", type_label=expression_statement];
378 [label="65_ addManager(0x7e4FD70e4F8c355d51E2CCFb15aF87d47e6D2167);\n378-expression_statement-66-66", type_label=expression_statement];
383 [label="66_ addManager(0x51ce146F1128Ff424Dc918441B46Cb56cC95a172);\n383-expression_statement-67-67", type_label=expression_statement];
388 [label="67_ addManager(0x2f2eb8766EC9EaAc7EBa6E851794DB3B45669D2A);\n388-expression_statement-68-68", type_label=expression_statement];
393 [label="69_ addPicture\n393-function_definition-70-86", type_label=function_definition];
427 [label="69_ onlyManager\n427-expression_statement-70-70", type_label=expression_statement];
436 [label="70_ bytes32 key = str_to_bytes32(_hash);\n436-new_variable-71-71", type_label=new_variable];
445 [label="71_ require(!(pictures[key].rows > 0));\n445-expression_statement-72-72", type_label=expression_statement];
458 [label="72_ require(_rows > 0 && _cols > 0 && _width > 0 && _height > 0);\n458-expression_statement-73-73", type_label=expression_statement];
477 [label="73_ pictures[key] = Picture({\n            hash: _hash,\n            rows: _rows,\n            cols: _cols,\n            width: _width,\n            height: _height,\n            image: _image,\n            name: _name,\n            author: _author\n        });\n477-expression_statement-74-83", type_label=expression_statement];
509 [label="83_ AddPicture(key, _rows, _cols, _width, _height, _image, _name, _author);\n509-expression_statement-84-84", type_label=expression_statement];
528 [label="84_ return true;\n528-return-85-85", type_label=return];
531 [label="86_ setHash\n531-function_definition-87-92", type_label=function_definition];
537 [label="86_ onlyManager\n537-expression_statement-87-87", type_label=expression_statement];
546 [label="87_ bytes32 key = str_to_bytes32(_hash);\n546-new_variable-88-88", type_label=new_variable];
555 [label="88_ hashes[key] = true;\n555-expression_statement-89-89", type_label=expression_statement];
562 [label="89_ SetHash(key);\n562-expression_statement-90-90", type_label=expression_statement];
567 [label="90_ return true;\n567-return-91-91", type_label=return];
570 [label="92_ str_to_bytes32\n570-function_definition-93-101", type_label=function_definition];
584 [label="93_ bytes memory tempEmptyStringTest = bytes(source);\n584-new_variable-94-94", type_label=new_variable];
592 [label="94_ if_tempEmptyStringTest.length == 0\n592-if-95-97", type_label=if];
1201 [label="94_ end_if", type_label=end_if];
599 [label="95_ return 0x0;\n599-return-96-96", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
601;
30 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
41 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
61 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
70 -> 74  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
281 -> 288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
328 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
338 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
358 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
531 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
570 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 599  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
592 -> 1201  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1201 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 1201  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
599 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
