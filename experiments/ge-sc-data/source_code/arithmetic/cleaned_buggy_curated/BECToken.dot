digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    require(a == 0 || c / a == b);\n    return c;\n  }\n13-function_definition-3-7", method="mul(uint256 a,uint256 b)", type_label=function_definition];
24 [label="2_ constant\n24-expression_statement-3-3", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
31 [label="3_ uint256 c = a * b;\n31-new_variable-4-4", method="mul(uint256 a,uint256 b)", type_label=new_variable];
39 [label="4_ require(a == 0 || c / a == b);\n39-expression_statement-5-5", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
52 [label="5_ return c;\n52-return-6-6", method="mul(uint256 a,uint256 b)", type_label=return];
54 [label="7_ function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n54-function_definition-8-11", method="div(uint256 a,uint256 b)", type_label=function_definition];
65 [label="7_ constant\n65-expression_statement-8-8", method="div(uint256 a,uint256 b)", type_label=expression_statement];
72 [label="8_ uint256 c = a / b;\n72-new_variable-9-9", method="div(uint256 a,uint256 b)", type_label=new_variable];
80 [label="9_ return c;\n80-return-10-10", method="div(uint256 a,uint256 b)", type_label=return];
82 [label="11_ function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    require(b <= a);\n    return a - b;\n  }\n82-function_definition-12-15", method="sub(uint256 a,uint256 b)", type_label=function_definition];
93 [label="11_ constant\n93-expression_statement-12-12", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
100 [label="12_ require(b <= a);\n100-expression_statement-13-13", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
107 [label="13_ return a - b;\n107-return-14-14", method="sub(uint256 a,uint256 b)", type_label=return];
111 [label="15_ function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n111-function_definition-16-20", method="add(uint256 a,uint256 b)", type_label=function_definition];
122 [label="15_ constant\n122-expression_statement-16-16", method="add(uint256 a,uint256 b)", type_label=expression_statement];
129 [label="16_ uint256 c = a + b;\n129-new_variable-17-17", method="add(uint256 a,uint256 b)", type_label=new_variable];
137 [label="17_ require(c >= a);\n137-expression_statement-18-18", method="add(uint256 a,uint256 b)", type_label=expression_statement];
144 [label="18_ return c;\n144-return-19-19", method="add(uint256 a,uint256 b)", type_label=return];
149 [label="22_ uint256 public totalSupply;\n149-new_variable-23-23", method="", type_label=new_variable];
154 [label="23_ function balanceOf(address who) public constant returns (uint256);\n154-function_definition-24-24", method="balanceOf(address who)", type_label=function_definition];
161 [label="23_ constant\n161-expression_statement-24-24", method="balanceOf(address who)", type_label=expression_statement];
167 [label="24_ function transfer(address to, uint256 value) public returns (bool);\n167-function_definition-25-25", method="transfer(address to,uint256 value)", type_label=function_definition];
207 [label="29_ mapping(address => uint256) balances;\n207-new_variable-30-30", method="", type_label=new_variable];
213 [label="30_ function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value > 0 && _value <= balances[msg.sender]);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n213-function_definition-31-38", method="transfer(address _to,uint256 _value)", type_label=function_definition];
229 [label="31_ require(_to != address(0));\n229-expression_statement-32-32", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
238 [label="32_ require(_value > 0 && _value <= balances[msg.sender]);\n238-expression_statement-33-33", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
253 [label="33_ balances[msg.sender] = balances[msg.sender].sub(_value);\n253-expression_statement-34-34", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
270 [label="34_ balances[_to] = balances[_to].add(_value);\n270-expression_statement-35-35", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
283 [label="35_ Transfer(msg.sender, _to, _value);\n283-expression_statement-36-36", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
294 [label="36_ return true;\n294-return-37-37", method="transfer(address _to,uint256 _value)", type_label=return];
297 [label="38_ function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n297-function_definition-39-41", method="balanceOf(address _owner)", type_label=function_definition];
304 [label="38_ constant\n304-expression_statement-39-39", method="balanceOf(address _owner)", type_label=expression_statement];
312 [label="39_ return balances[_owner];\n312-return-40-40", method="balanceOf(address _owner)", type_label=return];
322 [label="43_ function allowance(address owner, address spender) public constant returns (uint256);\n322-function_definition-44-44", method="allowance(address owner,address spender)", type_label=function_definition];
333 [label="43_ constant\n333-expression_statement-44-44", method="allowance(address owner,address spender)", type_label=expression_statement];
339 [label="44_ function transferFrom(address from, address to, uint256 value) public returns (bool);\n339-function_definition-45-45", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
358 [label="45_ function approve(address spender, uint256 value) public returns (bool);\n358-function_definition-46-46", method="approve(address spender,uint256 value)", type_label=function_definition];
396 [label="49_ mapping (address => mapping (address => uint256)) internal allowed;\n396-new_variable-50-50", method="", type_label=new_variable];
405 [label="50_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value > 0 && _value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n405-function_definition-51-60", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
425 [label="51_ require(_to != address(0));\n425-expression_statement-52-52", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
434 [label="52_ require(_value > 0 && _value <= balances[_from]);\n434-expression_statement-53-53", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
447 [label="53_ require(_value <= allowed[_from][msg.sender]);\n447-expression_statement-54-54", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
460 [label="54_ balances[_from] = balances[_from].sub(_value);\n460-expression_statement-55-55", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
473 [label="55_ balances[_to] = balances[_to].add(_value);\n473-expression_statement-56-56", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
486 [label="56_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n486-expression_statement-57-57", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
507 [label="57_ Transfer(_from, _to, _value);\n507-expression_statement-58-58", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
516 [label="58_ return true;\n516-return-59-59", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
519 [label="60_ function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n519-function_definition-61-65", method="approve(address _spender,uint256 _value)", type_label=function_definition];
535 [label="61_ allowed[msg.sender][_spender] = _value;\n535-expression_statement-62-62", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
545 [label="62_ Approval(msg.sender, _spender, _value);\n545-expression_statement-63-63", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
556 [label="63_ return true;\n556-return-64-64", method="approve(address _spender,uint256 _value)", type_label=return];
559 [label="65_ function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n559-function_definition-66-68", method="allowance(address _owner,address _spender)", type_label=function_definition];
570 [label="65_ constant\n570-expression_statement-66-66", method="allowance(address _owner,address _spender)", type_label=expression_statement];
578 [label="66_ return allowed[_owner][_spender];\n578-return-67-67", method="allowance(address _owner,address _spender)", type_label=return];
587 [label="70_ address public owner;\n587-new_variable-71-71", method="", type_label=new_variable];
602 [label="72_ function Ownable() {\n    owner = msg.sender;\n  }\n602-function_definition-73-75", method="Ownable()", type_label=function_definition];
605 [label="73_ owner = msg.sender;\n605-expression_statement-74-74", method="Ownable()", type_label=expression_statement];
611 [label="75_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n611-expression_statement-76-79", method="", type_label=expression_statement];
614 [label="76_ require(msg.sender == owner);\n614-expression_statement-77-77", method="", type_label=expression_statement];
623 [label="77_ _;\n623-expression_statement-78-78", method="", type_label=expression_statement];
625 [label="79_ function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n625-function_definition-80-84", method="transferOwnership(address newOwner)", type_label=function_definition];
631 [label="79_ onlyOwner\n631-expression_statement-80-80", method="transferOwnership(address newOwner)", type_label=expression_statement];
635 [label="80_ require(newOwner != address(0));\n635-expression_statement-81-81", method="transferOwnership(address newOwner)", type_label=expression_statement];
644 [label="81_ OwnershipTransferred(owner, newOwner);\n644-expression_statement-82-82", method="transferOwnership(address newOwner)", type_label=expression_statement];
651 [label="82_ owner = newOwner;\n651-expression_statement-83-83", method="transferOwnership(address newOwner)", type_label=expression_statement];
665 [label="88_ bool public paused = false;\n665-new_variable-89-89", method="", type_label=new_variable];
672 [label="89_ modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n672-expression_statement-90-93", method="", type_label=expression_statement];
675 [label="90_ require(!paused);\n675-expression_statement-91-91", method="", type_label=expression_statement];
681 [label="91_ _;\n681-expression_statement-92-92", method="", type_label=expression_statement];
683 [label="93_ modifier whenPaused() {\n    require(paused);\n    _;\n  }\n683-expression_statement-94-97", method="", type_label=expression_statement];
686 [label="94_ require(paused);\n686-expression_statement-95-95", method="", type_label=expression_statement];
691 [label="95_ _;\n691-expression_statement-96-96", method="", type_label=expression_statement];
693 [label="97_ function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n693-function_definition-98-101", method="pause()", type_label=function_definition];
695 [label="97_ onlyOwner\n695-expression_statement-98-98", method="pause()", type_label=expression_statement];
697 [label="97_ whenNotPaused\n697-expression_statement-98-98", method="pause()", type_label=expression_statement];
701 [label="98_ paused = true;\n701-expression_statement-99-99", method="pause()", type_label=expression_statement];
706 [label="99_ Pause();\n706-expression_statement-100-100", method="pause()", type_label=expression_statement];
709 [label="101_ function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n709-function_definition-102-105", method="unpause()", type_label=function_definition];
711 [label="101_ onlyOwner\n711-expression_statement-102-102", method="unpause()", type_label=expression_statement];
713 [label="101_ whenPaused\n713-expression_statement-102-102", method="unpause()", type_label=expression_statement];
717 [label="102_ paused = false;\n717-expression_statement-103-103", method="unpause()", type_label=expression_statement];
722 [label="103_ Unpause();\n722-expression_statement-104-104", method="unpause()", type_label=expression_statement];
734 [label="107_ function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n734-function_definition-108-110", method="transfer(address _to,uint256 _value)", type_label=function_definition];
745 [label="107_ whenNotPaused\n745-expression_statement-108-108", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
752 [label="108_ return super.transfer(_to, _value);\n752-return-109-109", method="transfer(address _to,uint256 _value)", type_label=return];
761 [label="110_ function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n761-function_definition-111-113", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
776 [label="110_ whenNotPaused\n776-expression_statement-111-111", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
783 [label="111_ return super.transferFrom(_from, _to, _value);\n783-return-112-112", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
794 [label="113_ function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n794-function_definition-114-116", method="approve(address _spender,uint256 _value)", type_label=function_definition];
805 [label="113_ whenNotPaused\n805-expression_statement-114-114", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
812 [label="114_ return super.approve(_spender, _value);\n812-return-115-115", method="approve(address _spender,uint256 _value)", type_label=return];
821 [label="116_ function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {\n    uint cnt = _receivers.length;\n    uint256 amount = uint256(cnt) * _value;\n    require(cnt > 0 && cnt <= 20);\n    require(_value > 0 && balances[msg.sender] >= amount);\n    balances[msg.sender] = balances[msg.sender].sub(amount);\n    for (uint i = 0; i < cnt; i++) {\n        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\n        Transfer(msg.sender, _receivers[i], _value);\n    }\n    return true;\n  }\n821-function_definition-117-128", method="batchTransfer(address[] _receivers,uint256 _value)", type_label=function_definition];
833 [label="116_ whenNotPaused\n833-expression_statement-117-117", method="batchTransfer(address[] _receivers,uint256 _value)", type_label=expression_statement];
840 [label="117_ uint cnt = _receivers.length;\n840-new_variable-118-118", method="batchTransfer(address[] _receivers,uint256 _value)", type_label=new_variable];
848 [label="118_ uint256 amount = uint256(cnt) * _value;\n848-new_variable-119-119", method="batchTransfer(address[] _receivers,uint256 _value)", type_label=new_variable];
858 [label="119_ require(cnt > 0 && cnt <= 20);\n858-expression_statement-120-120", method="batchTransfer(address[] _receivers,uint256 _value)", type_label=expression_statement];
869 [label="120_ require(_value > 0 && balances[msg.sender] >= amount);\n869-expression_statement-121-121", method="batchTransfer(address[] _receivers,uint256 _value)", type_label=expression_statement];
884 [label="121_ balances[msg.sender] = balances[msg.sender].sub(amount);\n884-expression_statement-122-122", method="batchTransfer(address[] _receivers,uint256 _value)", type_label=expression_statement];
901 [label="122_ for(i < cnt;;i++)\n901-for-123-126", method="batchTransfer(address[] _receivers,uint256 _value)", type_label=for];
1904 [label="122_ end_loop", method="batchTransfer(address[] _receivers,uint256 _value)", type_label=end_loop];
912 [label="122_ i++\n912-expression_statement-123-123", method="batchTransfer(address[] _receivers,uint256 _value)", type_label=expression_statement];
915 [label="123_ balances[_receivers[i]] = balances[_receivers[i]].add(_value);\n915-expression_statement-124-124", method="batchTransfer(address[] _receivers,uint256 _value)", type_label=expression_statement];
932 [label="124_ Transfer(msg.sender, _receivers[i], _value);\n932-expression_statement-125-125", method="batchTransfer(address[] _receivers,uint256 _value)", type_label=expression_statement];
945 [label="126_ return true;\n945-return-127-127", method="batchTransfer(address[] _receivers,uint256 _value)", type_label=return];
954 [label="130_ string public name = \"BeautyChain\";\n954-new_variable-131-131", method="", type_label=new_variable];
961 [label="131_ string public symbol = \"BEC\";\n961-new_variable-132-132", method="", type_label=new_variable];
968 [label="132_ string public version = '1.0.0';\n968-new_variable-133-133", method="", type_label=new_variable];
975 [label="133_ uint8 public decimals = 18;\n975-new_variable-134-134", method="", type_label=new_variable];
981 [label="134_ function BecToken() {\n      totalSupply = 7000000000 * (10**(uint256(decimals)));\n      balances[msg.sender] = totalSupply;     \n    }\n981-function_definition-135-138", method="BecToken()", type_label=function_definition];
984 [label="135_ totalSupply = 7000000000 * (10**(uint256(decimals)));\n984-expression_statement-136-136", method="BecToken()", type_label=expression_statement];
996 [label="136_ balances[msg.sender] = totalSupply;\n996-expression_statement-137-137", method="BecToken()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
39 -> 52  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
52 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
54 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
82 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
137 -> 144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
213 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
297 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
312 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
405 -> 425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
519 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
559 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
602 -> 605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
635 -> 644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
644 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
672 -> 683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
711 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
761 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
794 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
821 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
848 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 915  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
901 -> 1904  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1904 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 901  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
915 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 912  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
945 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
954 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
