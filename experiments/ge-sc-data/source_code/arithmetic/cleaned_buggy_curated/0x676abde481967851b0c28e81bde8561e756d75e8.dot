digraph  {
13 [label="2_ address public owner;\n13-new_variable-3-3", type_label=new_variable];
28 [label="4_ Ownable\n28-function_definition-5-7", type_label=function_definition];
31 [label="5_ owner = msg.sender;\n31-expression_statement-6-6", type_label=expression_statement];
37 [label="7_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n37-expression_statement-8-11", type_label=expression_statement];
40 [label="8_ require(msg.sender == owner);\n40-expression_statement-9-9", type_label=expression_statement];
49 [label="9_ _;\n49-expression_statement-10-10", type_label=expression_statement];
51 [label="11_ transferOwnership\n51-function_definition-12-16", type_label=function_definition];
57 [label="11_ onlyOwner\n57-expression_statement-12-12", type_label=expression_statement];
61 [label="12_ require(newOwner != address(0));\n61-expression_statement-13-13", type_label=expression_statement];
70 [label="13_ OwnershipTransferred(owner, newOwner);\n70-expression_statement-14-14", type_label=expression_statement];
77 [label="14_ owner = newOwner;\n77-expression_statement-15-15", type_label=expression_statement];
87 [label="18_ mapping (address => bool) public isWhitelisted;\n87-new_variable-19-19", type_label=new_variable];
94 [label="19_ ModulumInvestorsWhitelist\n94-function_definition-20-21", type_label=function_definition];
97 [label="21_ addInvestorToWhitelist\n97-function_definition-22-26", type_label=function_definition];
104 [label="21_ onlyOwner\n104-expression_statement-22-22", type_label=expression_statement];
107 [label="22_ require(_address != 0x0);\n107-expression_statement-23-23", type_label=expression_statement];
114 [label="23_ require(!isWhitelisted[_address]);\n114-expression_statement-24-24", type_label=expression_statement];
122 [label="24_ isWhitelisted[_address] = true;\n122-expression_statement-25-25", type_label=expression_statement];
129 [label="26_ removeInvestorFromWhiteList\n129-function_definition-27-31", type_label=function_definition];
136 [label="26_ onlyOwner\n136-expression_statement-27-27", type_label=expression_statement];
139 [label="27_ require(_address != 0x0);\n139-expression_statement-28-28", type_label=expression_statement];
146 [label="28_ require(isWhitelisted[_address]);\n146-expression_statement-29-29", type_label=expression_statement];
153 [label="29_ isWhitelisted[_address] = false;\n153-expression_statement-30-30", type_label=expression_statement];
160 [label="31_ isInvestorInWhitelist\n160-function_definition-32-34", type_label=function_definition];
166 [label="31_ constant\n166-expression_statement-32-32", type_label=expression_statement];
175 [label="32_ return isWhitelisted[_address];\n175-return-33-33", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
28 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
40 -> 49  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
61 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
70 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
97 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
