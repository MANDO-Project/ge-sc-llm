digraph  {
13 [label="2_ mul\n13-function_definition-3-10", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", type_label=if];
324 [label="3_ end_if", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", type_label=new_variable];
45 [label="7_ assert(c / a == b);\n45-expression_statement-8-8", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", type_label=return];
56 [label="10_ div\n56-function_definition-11-14", type_label=function_definition];
73 [label="11_ uint256 c = a / b;\n73-new_variable-12-12", type_label=new_variable];
81 [label="12_ return c;\n81-return-13-13", type_label=return];
83 [label="14_ sub\n83-function_definition-15-18", type_label=function_definition];
100 [label="15_ assert(b <= a);\n100-expression_statement-16-16", type_label=expression_statement];
107 [label="16_ return a - b;\n107-return-17-17", type_label=return];
111 [label="18_ add\n111-function_definition-19-23", type_label=function_definition];
128 [label="19_ uint256 c = a + b;\n128-new_variable-20-20", type_label=new_variable];
136 [label="20_ assert(c >= a);\n136-expression_statement-21-21", type_label=expression_statement];
143 [label="21_ return c;\n143-return-22-22", type_label=return];
148 [label="25_ address public owner;\n148-new_variable-26-26", type_label=new_variable];
153 [label="26_ owned\n153-function_definition-27-29", type_label=function_definition];
157 [label="27_ owner = msg.sender;\n157-expression_statement-28-28", type_label=expression_statement];
163 [label="29_ modifier onlyOwner {\n            require(msg.sender == owner);\n            _;\n        }\n163-expression_statement-30-33", type_label=expression_statement];
166 [label="30_ require(msg.sender == owner);\n166-expression_statement-31-31", type_label=expression_statement];
175 [label="31_ _;\n175-expression_statement-32-32", type_label=expression_statement];
177 [label="33_ transferOwnership\n177-function_definition-34-36", type_label=function_definition];
184 [label="33_ onlyOwner\n184-expression_statement-34-34", type_label=expression_statement];
187 [label="34_ owner = newOwner;\n187-expression_statement-35-35", type_label=expression_statement];
202 [label="39_ mapping(address => uint256) veruser;\n202-new_variable-40-40", type_label=new_variable];
208 [label="40_ RA\n208-function_definition-41-47", type_label=function_definition];
221 [label="41_ if_veruser[_to]>0\n221-if-42-46", type_label=if];
515 [label="41_ end_if", type_label=end_if];
228 [label="42_ return true;\n228-return-43-43", type_label=return];
232 [label="44_ return false;\n232-return-45-45", type_label=return];
235 [label="47_ Verification\n235-function_definition-48-52", type_label=function_definition];
239 [label="48_ if_RA(msg.sender) == false\n239-if-49-51", type_label=if];
533 [label="48_ end_if", type_label=end_if];
250 [label="49_ veruser[msg.sender] = veruser[msg.sender].add(1);\n250-expression_statement-50-50", type_label=expression_statement];
267 [label="52_ DelVer\n267-function_definition-53-57", type_label=function_definition];
274 [label="52_ onlyOwner\n274-expression_statement-53-53", type_label=expression_statement];
277 [label="53_ if_RA(_address) == true\n277-if-54-56", type_label=if];
571 [label="53_ end_if", type_label=end_if];
286 [label="54_ veruser[_address] = veruser[_address].sub(0);\n286-expression_statement-55-55", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 324  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
324 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 324  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
83 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
143 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
221 -> 228  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
221 -> 232  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
515 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 515  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
228 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
232 -> 515  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
232 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
235 -> 239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
239 -> 250  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
239 -> 533  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
533 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 533  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
267 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 286  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
277 -> 571  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
571 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 571  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
