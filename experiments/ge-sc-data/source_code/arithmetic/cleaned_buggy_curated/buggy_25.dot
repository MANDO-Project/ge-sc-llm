digraph  {
13 [label="2_ mapping(address => uint) public lockTime_intou9;\n13-new_variable-3-3", method="", type_label=new_variable];
20 [label="3_ function increaseLockTime_intou9(uint _secondsToIncrease) public {\n        lockTime_intou9[msg.sender] += _secondsToIncrease;   \n    }\n20-function_definition-4-6", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=function_definition];
28 [label="4_ lockTime_intou9[msg.sender] += _secondsToIncrease;\n28-expression_statement-5-5", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=expression_statement];
36 [label="6_ function withdraw_intou9() public {\n        require(now > lockTime_intou9[msg.sender]);    \n        uint transferValue_intou9 = 10;           \n        msg.sender.transfer(transferValue_intou9);\n    }\n36-function_definition-7-11", method="withdraw_intou9()", type_label=function_definition];
40 [label="7_ require(now > lockTime_intou9[msg.sender]);\n40-expression_statement-8-8", method="withdraw_intou9()", type_label=expression_statement];
51 [label="8_ uint transferValue_intou9 = 10;\n51-new_variable-9-9", method="withdraw_intou9()", type_label=new_variable];
57 [label="9_ msg.sender.transfer(transferValue_intou9);\n57-expression_statement-10-10", method="withdraw_intou9()", type_label=expression_statement];
66 [label="11_ address payable public owner;\n66-new_variable-12-12", method="", type_label=new_variable];
71 [label="12_ struct GameInfo {\n    uint256 timestamp;\n    uint32 odd_homeTeam;\n    uint32 odd_drawTeam; \n    uint32 odd_awayTeam;\n    uint32 odd_over;\n    uint32 odd_under;\n    uint32 odd_homeTeamAndDraw;\n    uint32 odd_homeAndAwayTeam;\n    uint32 odd_awayTeamAndDraw;\n    uint8  open_status;\n    bool   isDone;\n  }\n71-expression_statement-13-25", method="GameInfo()", type_label=expression_statement];
117 [label="25_ mapping(address => uint) public lockTime_intou25;\n117-new_variable-26-26", method="", type_label=new_variable];
124 [label="26_ function increaseLockTime_intou25(uint _secondsToIncrease) public {\n        lockTime_intou25[msg.sender] += _secondsToIncrease;   \n    }\n124-function_definition-27-29", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=function_definition];
132 [label="27_ lockTime_intou25[msg.sender] += _secondsToIncrease;\n132-expression_statement-28-28", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=expression_statement];
140 [label="29_ function withdraw_intou25() public {\n        require(now > lockTime_intou25[msg.sender]);    \n        uint transferValue_intou25 = 10;           \n        msg.sender.transfer(transferValue_intou25);\n    }\n140-function_definition-30-34", method="withdraw_intou25()", type_label=function_definition];
144 [label="30_ require(now > lockTime_intou25[msg.sender]);\n144-expression_statement-31-31", method="withdraw_intou25()", type_label=expression_statement];
155 [label="31_ uint transferValue_intou25 = 10;\n155-new_variable-32-32", method="withdraw_intou25()", type_label=new_variable];
161 [label="32_ msg.sender.transfer(transferValue_intou25);\n161-expression_statement-33-33", method="withdraw_intou25()", type_label=expression_statement];
170 [label="34_ mapping(uint64 => GameInfo) public gameList;\n170-new_variable-35-35", method="", type_label=new_variable];
178 [label="35_ struct BetFixture {\n    address payable player;\n    uint256 stake;\n    uint32  odd;\n    uint16  selectedTeam;\n  }\n178-expression_statement-36-41", method="BetFixture()", type_label=expression_statement];
196 [label="41_ function bug_intou19() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n196-function_definition-42-45", method="bug_intou19()", type_label=function_definition];
200 [label="42_ uint8 vundflw =0;\n200-new_variable-43-43", method="bug_intou19()", type_label=new_variable];
206 [label="43_ vundflw = vundflw -10;\n206-expression_statement-44-44", method="bug_intou19()", type_label=expression_statement];
212 [label="45_ mapping(uint64 => BetFixture[]) public betList;\n212-new_variable-46-46", method="", type_label=new_variable];
221 [label="46_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n221-function_definition-47-50", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
229 [label="47_ uint8 vundflw1=0;\n229-new_variable-48-48", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
235 [label="48_ vundflw1 = vundflw1 + p_intou36;\n235-expression_statement-49-49", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
247 [label="51_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n247-function_definition-52-55", method="bug_intou35()", type_label=function_definition];
251 [label="52_ uint8 vundflw =0;\n251-new_variable-53-53", method="bug_intou35()", type_label=new_variable];
257 [label="53_ vundflw = vundflw -10;\n257-expression_statement-54-54", method="bug_intou35()", type_label=expression_statement];
273 [label="56_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n273-function_definition-57-60", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
281 [label="57_ uint8 vundflw1=0;\n281-new_variable-58-58", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
287 [label="58_ vundflw1 = vundflw1 + p_intou40;\n287-expression_statement-59-59", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
303 [label="61_ mapping(address => uint) public lockTime_intou33;\n303-new_variable-62-62", method="", type_label=new_variable];
310 [label="62_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n310-function_definition-63-65", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
318 [label="63_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n318-expression_statement-64-64", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
326 [label="65_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n326-function_definition-66-70", method="withdraw_intou33()", type_label=function_definition];
330 [label="66_ require(now > lockTime_intou33[msg.sender]);\n330-expression_statement-67-67", method="withdraw_intou33()", type_label=expression_statement];
341 [label="67_ uint transferValue_intou33 = 10;\n341-new_variable-68-68", method="withdraw_intou33()", type_label=new_variable];
347 [label="68_ msg.sender.transfer(transferValue_intou33);\n347-expression_statement-69-69", method="withdraw_intou33()", type_label=expression_statement];
378 [label="71_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n378-function_definition-72-75", method="bug_intou27()", type_label=function_definition];
382 [label="72_ uint8 vundflw =0;\n382-new_variable-73-73", method="bug_intou27()", type_label=new_variable];
388 [label="73_ vundflw = vundflw -10;\n388-expression_statement-74-74", method="bug_intou27()", type_label=expression_statement];
440 [label="76_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n440-function_definition-77-80", method="bug_intou31()", type_label=function_definition];
444 [label="77_ uint8 vundflw =0;\n444-new_variable-78-78", method="bug_intou31()", type_label=new_variable];
450 [label="78_ vundflw = vundflw -10;\n450-expression_statement-79-79", method="bug_intou31()", type_label=expression_statement];
494 [label="81_ mapping(address => uint) public lockTime_intou13;\n494-new_variable-82-82", method="", type_label=new_variable];
501 [label="82_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n501-function_definition-83-85", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
509 [label="83_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n509-expression_statement-84-84", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
517 [label="85_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n517-function_definition-86-90", method="withdraw_intou13()", type_label=function_definition];
521 [label="86_ require(now > lockTime_intou13[msg.sender]);\n521-expression_statement-87-87", method="withdraw_intou13()", type_label=expression_statement];
532 [label="87_ uint transferValue_intou13 = 10;\n532-new_variable-88-88", method="withdraw_intou13()", type_label=new_variable];
538 [label="88_ msg.sender.transfer(transferValue_intou13);\n538-expression_statement-89-89", method="withdraw_intou13()", type_label=expression_statement];
563 [label="92_ owner   = msg.sender;\n563-expression_statement-93-93", method="", type_label=expression_statement];
569 [label="94_ mapping(address => uint) balances_intou26;\n569-new_variable-95-95", method="", type_label=new_variable];
575 [label="95_ function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] - _value >= 0);   \n    balances_intou26[msg.sender] -= _value;   \n    balances_intou26[_to] += _value;   \n    return true;\n  }\n575-function_definition-96-101", method="transfer_intou26(address _to,uint _value)", type_label=function_definition];
591 [label="96_ require(balances_intou26[msg.sender] - _value >= 0);\n591-expression_statement-97-97", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
604 [label="97_ balances_intou26[msg.sender] -= _value;\n604-expression_statement-98-98", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
612 [label="98_ balances_intou26[_to] += _value;\n612-expression_statement-99-99", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
618 [label="99_ return true;\n618-return-100-100", method="transfer_intou26(address _to,uint _value)", type_label=return];
621 [label="101_ function setOpenStatus(uint64 _fixtureId, uint8 _open_status) external onlyOwner {\n    gameList[_fixtureId].open_status = _open_status;\n  }\n621-function_definition-102-104", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=function_definition];
632 [label="101_ onlyOwner\n632-expression_statement-102-102", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=expression_statement];
635 [label="102_ gameList[_fixtureId].open_status = _open_status;\n635-expression_statement-103-103", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=expression_statement];
643 [label="104_ function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou20;    \n}\n643-function_definition-105-108", method="bug_intou20(uint8 p_intou20)", type_label=function_definition];
651 [label="105_ uint8 vundflw1=0;\n651-new_variable-106-106", method="bug_intou20(uint8 p_intou20)", type_label=new_variable];
657 [label="106_ vundflw1 = vundflw1 + p_intou20;\n657-expression_statement-107-107", method="bug_intou20(uint8 p_intou20)", type_label=expression_statement];
663 [label="108_ function changeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw ) external onlyOwner {\n    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n    gameList[_fixtureId].odd_over            = _odd_over;\n    gameList[_fixtureId].odd_under           = _odd_under;\n    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n    emit ChangeOdd (_fixtureId, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw);\n  }\n663-function_definition-109-119", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=function_definition];
702 [label="108_ onlyOwner\n702-expression_statement-109-109", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
705 [label="109_ gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n705-expression_statement-110-110", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
713 [label="110_ gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n713-expression_statement-111-111", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
721 [label="111_ gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n721-expression_statement-112-112", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
729 [label="112_ gameList[_fixtureId].odd_over            = _odd_over;\n729-expression_statement-113-113", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
737 [label="113_ gameList[_fixtureId].odd_under           = _odd_under;\n737-expression_statement-114-114", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
745 [label="114_ gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n745-expression_statement-115-115", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
753 [label="115_ gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n753-expression_statement-116-116", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
761 [label="116_ gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n761-expression_statement-117-117", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
789 [label="119_ function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou32;    \n}\n789-function_definition-120-123", method="bug_intou32(uint8 p_intou32)", type_label=function_definition];
797 [label="120_ uint8 vundflw1=0;\n797-new_variable-121-121", method="bug_intou32(uint8 p_intou32)", type_label=new_variable];
803 [label="121_ vundflw1 = vundflw1 + p_intou32;\n803-expression_statement-122-122", method="bug_intou32(uint8 p_intou32)", type_label=expression_statement];
809 [label="123_ function setGameInfo (uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status ) external onlyOwner {\n    gameList[_fixtureId].timestamp           = _timestamp;\n    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n    gameList[_fixtureId].odd_over            = _odd_over;\n    gameList[_fixtureId].odd_under           = _odd_under;\n    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n    gameList[_fixtureId].open_status         = _open_status;\n    gameList[_fixtureId].isDone              = false;\n    emit SetGame(_fixtureId, _timestamp, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw, _open_status);\n  }\n809-function_definition-124-137", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=function_definition];
856 [label="123_ onlyOwner\n856-expression_statement-124-124", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
859 [label="124_ gameList[_fixtureId].timestamp           = _timestamp;\n859-expression_statement-125-125", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
867 [label="125_ gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n867-expression_statement-126-126", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
875 [label="126_ gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n875-expression_statement-127-127", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
883 [label="127_ gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n883-expression_statement-128-128", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
891 [label="128_ gameList[_fixtureId].odd_over            = _odd_over;\n891-expression_statement-129-129", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
899 [label="129_ gameList[_fixtureId].odd_under           = _odd_under;\n899-expression_statement-130-130", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
907 [label="130_ gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n907-expression_statement-131-131", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
915 [label="131_ gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n915-expression_statement-132-132", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
923 [label="132_ gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n923-expression_statement-133-133", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
931 [label="133_ gameList[_fixtureId].open_status         = _open_status;\n931-expression_statement-134-134", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
939 [label="134_ gameList[_fixtureId].isDone              = false;\n939-expression_statement-135-135", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
972 [label="137_ mapping(address => uint) balances_intou38;\n972-new_variable-138-138", method="", type_label=new_variable];
978 [label="138_ function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] - _value >= 0);   \n    balances_intou38[msg.sender] -= _value;   \n    balances_intou38[_to] += _value;   \n    return true;\n  }\n978-function_definition-139-144", method="transfer_intou38(address _to,uint _value)", type_label=function_definition];
994 [label="139_ require(balances_intou38[msg.sender] - _value >= 0);\n994-expression_statement-140-140", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
1007 [label="140_ balances_intou38[msg.sender] -= _value;\n1007-expression_statement-141-141", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
1015 [label="141_ balances_intou38[_to] += _value;\n1015-expression_statement-142-142", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
1021 [label="142_ return true;\n1021-return-143-143", method="transfer_intou38(address _to,uint _value)", type_label=return];
1024 [label="144_ function placeBet(uint64 _fixtureId, uint16 _selectedTeam, uint32 _odd) external payable  {\n    uint stake = msg.value;\n    require(stake >= .001 ether);\n    require(_odd != 0 );\n    if (_selectedTeam == 1 ) {\n      require(gameList[_fixtureId].odd_homeTeam == _odd);\n    } else if ( _selectedTeam == 2) {\n      require(gameList[_fixtureId].odd_drawTeam == _odd);\n    } else if ( _selectedTeam == 3) {\n      require(gameList[_fixtureId].odd_awayTeam == _odd);\n    } else if ( _selectedTeam == 4) {\n      require(gameList[_fixtureId].odd_over == _odd);\n    } else if ( _selectedTeam == 5) {\n      require(gameList[_fixtureId].odd_under == _odd);\n    } else if ( _selectedTeam == 6) {\n      require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);\n    } else if ( _selectedTeam == 7) {\n      require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);\n    } else if ( _selectedTeam == 8) {\n      require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);\n    } else {\n      revert();\n    }\n    require(gameList[_fixtureId].open_status == 3);\n    require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );\n    betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));\n    emit NewStake(msg.sender, _fixtureId, _selectedTeam, stake, _odd );\n  }\n1024-function_definition-145-172", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=function_definition];
1041 [label="145_ uint stake = msg.value;\n1041-new_variable-146-146", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=new_variable];
1049 [label="146_ require(stake >= .001 ether);\n1049-expression_statement-147-147", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1057 [label="147_ require(_odd != 0 );\n1057-expression_statement-148-148", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1064 [label="148_ if__selectedTeam == 1\n1064-if-149-167", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
2857 [label="148_ end_if", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=end_if];
1069 [label="149_ require(gameList[_fixtureId].odd_homeTeam == _odd);\n1069-expression_statement-150-150", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1080 [label="150_ if__selectedTeam == 2\n1080-if-151-167", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1085 [label="151_ require(gameList[_fixtureId].odd_drawTeam == _odd);\n1085-expression_statement-152-152", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1096 [label="152_ if__selectedTeam == 3\n1096-if-153-167", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1101 [label="153_ require(gameList[_fixtureId].odd_awayTeam == _odd);\n1101-expression_statement-154-154", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1112 [label="154_ if__selectedTeam == 4\n1112-if-155-167", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1117 [label="155_ require(gameList[_fixtureId].odd_over == _odd);\n1117-expression_statement-156-156", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1128 [label="156_ if__selectedTeam == 5\n1128-if-157-167", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1133 [label="157_ require(gameList[_fixtureId].odd_under == _odd);\n1133-expression_statement-158-158", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1144 [label="158_ if__selectedTeam == 6\n1144-if-159-167", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1149 [label="159_ require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);\n1149-expression_statement-160-160", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1160 [label="160_ if__selectedTeam == 7\n1160-if-161-167", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1165 [label="161_ require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);\n1165-expression_statement-162-162", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1176 [label="162_ if__selectedTeam == 8\n1176-if-163-167", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1181 [label="163_ require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);\n1181-expression_statement-164-164", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1195 [label="167_ require(gameList[_fixtureId].open_status == 3);\n1195-expression_statement-168-168", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1206 [label="168_ require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );\n1206-expression_statement-169-169", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1221 [label="169_ betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));\n1221-expression_statement-170-170", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1255 [label="172_ function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou4;    \n}\n1255-function_definition-173-176", method="bug_intou4(uint8 p_intou4)", type_label=function_definition];
1263 [label="173_ uint8 vundflw1=0;\n1263-new_variable-174-174", method="bug_intou4(uint8 p_intou4)", type_label=new_variable];
1269 [label="174_ vundflw1 = vundflw1 + p_intou4;\n1269-expression_statement-175-175", method="bug_intou4(uint8 p_intou4)", type_label=expression_statement];
1275 [label="176_ function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable {\n    require(gameList[_fixtureId].open_status == 3);\n    require(gameList[_fixtureId].isDone == false);\n    require(betList[_fixtureId][0].player != address(0) );\n    for (uint i= 0 ; i < betList[_fixtureId].length; i++){\n      uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;\n      uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;\n      if ( (selectedTeam == 1 && _homeDrawAway == 1) \n        || (selectedTeam == 2 && _homeDrawAway == 2) \n        || (selectedTeam == 3 && _homeDrawAway == 3) \n        || (selectedTeam == 4 && _overUnder == 1) \n        || (selectedTeam == 5 && _overUnder == 2) \n        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )\n        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )\n        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) ) \n        ){ \n        betList[_fixtureId][i].player.transfer(returnEth);\n      }\n    }\n    gameList[_fixtureId].open_status = 5;\n    gameList[_fixtureId].isDone = true;  \n    emit GivePrizeMoney( _fixtureId,  _homeDrawAway,  _overUnder);\n  }\n1275-function_definition-177-199", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=function_definition];
1290 [label="176_ onlyOwner\n1290-expression_statement-177-177", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1294 [label="177_ require(gameList[_fixtureId].open_status == 3);\n1294-expression_statement-178-178", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1305 [label="178_ require(gameList[_fixtureId].isDone == false);\n1305-expression_statement-179-179", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1317 [label="179_ require(betList[_fixtureId][0].player != address(0) );\n1317-expression_statement-180-180", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1332 [label="180_ for(i < betList[_fixtureId].length;;i++)\n1332-for-181-195", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=for];
3125 [label="180_ end_loop", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=end_loop];
1347 [label="180_ i++\n1347-expression_statement-181-181", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1350 [label="181_ uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;\n1350-new_variable-182-182", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=new_variable];
1362 [label="182_ uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;\n1362-new_variable-183-183", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=new_variable];
1385 [label="183_ if_(selectedTeam == 1 && _homeDrawAway == 1) \n        || (selectedTeam == 2 && _homeDrawAway == 2) \n        || (selectedTeam == 3 && _homeDrawAway == 3) \n        || (selectedTeam == 4 && _overUnder == 1) \n        || (selectedTeam == 5 && _overUnder == 2) \n        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )\n        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )\n        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) )\n1385-if-184-194", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=if];
3178 [label="183_ end_if", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=end_if];
1473 [label="192_ betList[_fixtureId][i].player.transfer(returnEth);\n1473-expression_statement-193-193", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1486 [label="195_ gameList[_fixtureId].open_status = 5;\n1486-expression_statement-196-196", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1494 [label="196_ gameList[_fixtureId].isDone = true;\n1494-expression_statement-197-197", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1511 [label="199_ function bug_intou7() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1511-function_definition-200-203", method="bug_intou7()", type_label=function_definition];
1515 [label="200_ uint8 vundflw =0;\n1515-new_variable-201-201", method="bug_intou7()", type_label=new_variable];
1521 [label="201_ vundflw = vundflw -10;\n1521-expression_statement-202-202", method="bug_intou7()", type_label=expression_statement];
1527 [label="203_ modifier onlyOwner {\n    require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n    _;\n  }\n1527-expression_statement-204-207", method="", type_label=expression_statement];
1530 [label="204_ require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n1530-expression_statement-205-205", method="", type_label=expression_statement];
1542 [label="205_ _;\n1542-expression_statement-206-206", method="", type_label=expression_statement];
1544 [label="207_ function getBalance() external view returns(uint){\n    return address(this).balance;\n  }\n1544-function_definition-208-210", method="getBalance()", type_label=function_definition];
1553 [label="208_ return address(this).balance;\n1553-return-209-209", method="getBalance()", type_label=return];
1559 [label="210_ function bug_intou23() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1559-function_definition-211-214", method="bug_intou23()", type_label=function_definition];
1563 [label="211_ uint8 vundflw =0;\n1563-new_variable-212-212", method="bug_intou23()", type_label=new_variable];
1569 [label="212_ vundflw = vundflw -10;\n1569-expression_statement-213-213", method="bug_intou23()", type_label=expression_statement];
1575 [label="214_ function deposit(uint256 _eth) external payable{\n    emit Deposit(msg.sender, _eth);\n  }\n1575-function_definition-215-217", method="deposit(uint256 _eth)", type_label=function_definition];
1592 [label="217_ mapping(address => uint) balances_intou14;\n1592-new_variable-218-218", method="", type_label=new_variable];
1598 [label="218_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n1598-function_definition-219-224", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
1614 [label="219_ require(balances_intou14[msg.sender] - _value >= 0);\n1614-expression_statement-220-220", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1627 [label="220_ balances_intou14[msg.sender] -= _value;\n1627-expression_statement-221-221", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1635 [label="221_ balances_intou14[_to] += _value;\n1635-expression_statement-222-222", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1641 [label="222_ return true;\n1641-return-223-223", method="transfer_intou14(address _to,uint _value)", type_label=return];
1644 [label="224_ function changeOwner(address payable _newOwner ) external onlyOwner {\n    owner = _newOwner;\n  }\n1644-function_definition-225-227", method="changeOwner(address payable _newOwner)", type_label=function_definition];
1651 [label="224_ onlyOwner\n1651-expression_statement-225-225", method="changeOwner(address payable _newOwner)", type_label=expression_statement];
1654 [label="225_ owner = _newOwner;\n1654-expression_statement-226-226", method="changeOwner(address payable _newOwner)", type_label=expression_statement];
1658 [label="227_ mapping(address => uint) balances_intou30;\n1658-new_variable-228-228", method="", type_label=new_variable];
1664 [label="228_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n1664-function_definition-229-234", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
1680 [label="229_ require(balances_intou30[msg.sender] - _value >= 0);\n1680-expression_statement-230-230", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1693 [label="230_ balances_intou30[msg.sender] -= _value;\n1693-expression_statement-231-231", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1701 [label="231_ balances_intou30[_to] += _value;\n1701-expression_statement-232-232", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1707 [label="232_ return true;\n1707-return-233-233", method="transfer_intou30(address _to,uint _value)", type_label=return];
1714 [label="235_ owner.transfer(msg.value);\n1714-expression_statement-236-236", method="", type_label=expression_statement];
1723 [label="237_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n1723-function_definition-238-241", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
1731 [label="238_ uint8 vundflw1=0;\n1731-new_variable-239-239", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
1737 [label="239_ vundflw1 = vundflw1 + p_intou8;\n1737-expression_statement-240-240", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
1743 [label="241_ function withdraw(uint256 _amount) external payable onlyOwner {\n    require(_amount > 0 && _amount <= address(this).balance );\n    owner.transfer(_amount);\n    emit Withdraw(owner, _amount);\n  }\n1743-function_definition-242-246", method="withdraw(uint256 _amount)", type_label=function_definition];
1751 [label="241_ onlyOwner\n1751-expression_statement-242-242", method="withdraw(uint256 _amount)", type_label=expression_statement];
1754 [label="242_ require(_amount > 0 && _amount <= address(this).balance );\n1754-expression_statement-243-243", method="withdraw(uint256 _amount)", type_label=expression_statement];
1769 [label="243_ owner.transfer(_amount);\n1769-expression_statement-244-244", method="withdraw(uint256 _amount)", type_label=expression_statement];
1782 [label="246_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1782-function_definition-247-250", method="bug_intou39()", type_label=function_definition];
1786 [label="247_ uint8 vundflw =0;\n1786-new_variable-248-248", method="bug_intou39()", type_label=new_variable];
1792 [label="248_ vundflw = vundflw -10;\n1792-expression_statement-249-249", method="bug_intou39()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1193;
20 -> 28  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
40 -> 51  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 57  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
66 -> 71  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
71 -> 117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
221 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
273 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
281 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
341 -> 347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
517 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
532 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
591 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
621 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
721 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
753 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
859 -> 867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
867 -> 875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
899 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
915 -> 923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
931 -> 939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 1007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1007 -> 1015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1015 -> 1021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1024 -> 1041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1041 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1057 -> 1064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1064 -> 1069  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1064 -> 1080  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2857 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1069 -> 2857  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1080 -> 1085  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1080 -> 1096  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1085 -> 2857  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1096 -> 1101  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1096 -> 1112  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1101 -> 2857  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1112 -> 1117  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1112 -> 1128  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1117 -> 2857  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1128 -> 1133  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1128 -> 1144  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1133 -> 2857  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1144 -> 1149  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1144 -> 1160  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1149 -> 2857  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1160 -> 1165  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1160 -> 1176  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1165 -> 2857  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1176 -> 1181  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1181 -> 2857  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1195 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1206 -> 1221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1255 -> 1263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1263 -> 1269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1275 -> 1294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1294 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1305 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1317 -> 1332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 1350  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1332 -> 3125  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3125 -> 1486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1347 -> 1332  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1350 -> 1362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1362 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1385 -> 1473  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1385 -> 3178  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3178 -> 1347  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3178 -> 1347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
1473 -> 3178  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1486 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1511 -> 1515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1515 -> 1521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1530 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1544 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1553 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1559 -> 1563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> 1569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1598 -> 1614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1614 -> 1627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1627 -> 1635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1635 -> 1641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1641 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1644 -> 1654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1664 -> 1680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1680 -> 1693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1693 -> 1701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1701 -> 1707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1707 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1723 -> 1731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1731 -> 1737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1743 -> 1754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1754 -> 1769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1782 -> 1786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1786 -> 1792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1193 -> 2857  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
