digraph  {
13 [label="2_ mapping(address => uint) balances_intou2;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ function transfer_undrflow2(address _to, uint _value) public returns (bool) {\n    require(balances_intou2[msg.sender] - _value >= 0);   \n    balances_intou2[msg.sender] -= _value;   \n    balances_intou2[_to] += _value;   \n    return true;\n  }\n19-function_definition-4-9", method="transfer_undrflow2(address _to,uint _value)", type_label=function_definition];
35 [label="4_ require(balances_intou2[msg.sender] - _value >= 0);\n35-expression_statement-5-5", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
48 [label="5_ balances_intou2[msg.sender] -= _value;\n48-expression_statement-6-6", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
56 [label="6_ balances_intou2[_to] += _value;\n56-expression_statement-7-7", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
62 [label="7_ return true;\n62-return-8-8", method="transfer_undrflow2(address _to,uint _value)", type_label=return];
65 [label="9_ address public owner;\n65-new_variable-10-10", method="", type_label=new_variable];
70 [label="10_ mapping(address => uint) public lockTime_intou17;\n70-new_variable-11-11", method="", type_label=new_variable];
77 [label="11_ function increaseLockTime_intou17(uint _secondsToIncrease) public {\n        lockTime_intou17[msg.sender] += _secondsToIncrease;   \n    }\n77-function_definition-12-14", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=function_definition];
85 [label="12_ lockTime_intou17[msg.sender] += _secondsToIncrease;\n85-expression_statement-13-13", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=expression_statement];
93 [label="14_ function withdraw_intou17() public {\n        require(now > lockTime_intou17[msg.sender]);    \n        uint transferValue_intou17 = 10;           \n        msg.sender.transfer(transferValue_intou17);\n    }\n93-function_definition-15-19", method="withdraw_intou17()", type_label=function_definition];
97 [label="15_ require(now > lockTime_intou17[msg.sender]);\n97-expression_statement-16-16", method="withdraw_intou17()", type_label=expression_statement];
108 [label="16_ uint transferValue_intou17 = 10;\n108-new_variable-17-17", method="withdraw_intou17()", type_label=new_variable];
114 [label="17_ msg.sender.transfer(transferValue_intou17);\n114-expression_statement-18-18", method="withdraw_intou17()", type_label=expression_statement];
123 [label="19_ address public newOwner;\n123-new_variable-20-20", method="", type_label=new_variable];
128 [label="20_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n128-function_definition-21-24", method="bug_intou27()", type_label=function_definition];
132 [label="21_ uint8 vundflw =0;\n132-new_variable-22-22", method="bug_intou27()", type_label=new_variable];
138 [label="22_ vundflw = vundflw -10;\n138-expression_statement-23-23", method="bug_intou27()", type_label=expression_statement];
156 [label="26_ owner = msg.sender;\n156-expression_statement-27-27", method="", type_label=expression_statement];
162 [label="28_ function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou32;    \n}\n162-function_definition-29-32", method="bug_intou32(uint8 p_intou32)", type_label=function_definition];
170 [label="29_ uint8 vundflw1=0;\n170-new_variable-30-30", method="bug_intou32(uint8 p_intou32)", type_label=new_variable];
176 [label="30_ vundflw1 = vundflw1 + p_intou32;\n176-expression_statement-31-31", method="bug_intou32(uint8 p_intou32)", type_label=expression_statement];
182 [label="32_ modifier onlyOwner {\n        require(msg.sender == owner || msg.sender == address(this));\n        _;\n    }\n182-expression_statement-33-36", method="", type_label=expression_statement];
185 [label="33_ require(msg.sender == owner || msg.sender == address(this));\n185-expression_statement-34-34", method="", type_label=expression_statement];
202 [label="34_ _;\n202-expression_statement-35-35", method="", type_label=expression_statement];
204 [label="36_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n204-function_definition-37-39", method="transferOwnership(address _newOwner)", type_label=function_definition];
211 [label="36_ onlyOwner\n211-expression_statement-37-37", method="transferOwnership(address _newOwner)", type_label=expression_statement];
214 [label="37_ newOwner = _newOwner;\n214-expression_statement-38-38", method="transferOwnership(address _newOwner)", type_label=expression_statement];
218 [label="39_ mapping(address => uint) balances_intou38;\n218-new_variable-40-40", method="", type_label=new_variable];
224 [label="40_ function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] - _value >= 0);   \n    balances_intou38[msg.sender] -= _value;   \n    balances_intou38[_to] += _value;   \n    return true;\n  }\n224-function_definition-41-46", method="transfer_intou38(address _to,uint _value)", type_label=function_definition];
240 [label="41_ require(balances_intou38[msg.sender] - _value >= 0);\n240-expression_statement-42-42", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
253 [label="42_ balances_intou38[msg.sender] -= _value;\n253-expression_statement-43-43", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
261 [label="43_ balances_intou38[_to] += _value;\n261-expression_statement-44-44", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
267 [label="44_ return true;\n267-return-45-45", method="transfer_intou38(address _to,uint _value)", type_label=return];
273 [label="48_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n273-function_definition-49-56", method="mul(uint256 a,uint256 b)", type_label=function_definition];
290 [label="49_ if_a == 0\n290-if-50-52", method="mul(uint256 a,uint256 b)", type_label=if];
1887 [label="49_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
295 [label="50_ return 0;\n295-return-51-51", method="mul(uint256 a,uint256 b)", type_label=return];
297 [label="52_ uint256 c = a * b;\n297-new_variable-53-53", method="mul(uint256 a,uint256 b)", type_label=new_variable];
305 [label="53_ assert(c / a == b);\n305-expression_statement-54-54", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
314 [label="54_ return c;\n314-return-55-55", method="mul(uint256 a,uint256 b)", type_label=return];
316 [label="56_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n316-function_definition-57-60", method="div(uint256 a,uint256 b)", type_label=function_definition];
333 [label="57_ uint256 c = a / b;\n333-new_variable-58-58", method="div(uint256 a,uint256 b)", type_label=new_variable];
341 [label="58_ return c;\n341-return-59-59", method="div(uint256 a,uint256 b)", type_label=return];
343 [label="60_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n343-function_definition-61-64", method="sub(uint256 a,uint256 b)", type_label=function_definition];
360 [label="61_ assert(b <= a);\n360-expression_statement-62-62", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
367 [label="62_ return a - b;\n367-return-63-63", method="sub(uint256 a,uint256 b)", type_label=return];
371 [label="64_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n371-function_definition-65-69", method="add(uint256 a,uint256 b)", type_label=function_definition];
388 [label="65_ uint256 c = a + b;\n388-new_variable-66-66", method="add(uint256 a,uint256 b)", type_label=new_variable];
396 [label="66_ assert(c >= a);\n396-expression_statement-67-67", method="add(uint256 a,uint256 b)", type_label=expression_statement];
403 [label="67_ return c;\n403-return-68-68", method="add(uint256 a,uint256 b)", type_label=return];
405 [label="69_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n405-function_definition-70-74", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
422 [label="70_ uint256 c = add(a,m);\n422-new_variable-71-71", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
433 [label="71_ uint256 d = sub(c,1);\n433-new_variable-72-72", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
444 [label="72_ return mul(div(d,m),m);\n444-return-73-73", method="ceil(uint256 a,uint256 m)", type_label=return];
459 [label="76_ function balanceOf(address who) external view returns (uint256);\n459-function_definition-77-77", method="balanceOf(address who)", type_label=function_definition];
471 [label="77_ function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou4;    \n}\n471-function_definition-78-81", method="bug_intou4(uint8 p_intou4)", type_label=function_definition];
479 [label="78_ uint8 vundflw1=0;\n479-new_variable-79-79", method="bug_intou4(uint8 p_intou4)", type_label=new_variable];
485 [label="79_ vundflw1 = vundflw1 + p_intou4;\n485-expression_statement-80-80", method="bug_intou4(uint8 p_intou4)", type_label=expression_statement];
491 [label="81_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n491-function_definition-82-82", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
510 [label="82_ function bug_intou7() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n510-function_definition-83-86", method="bug_intou7()", type_label=function_definition];
514 [label="83_ uint8 vundflw =0;\n514-new_variable-84-84", method="bug_intou7()", type_label=new_variable];
520 [label="84_ vundflw = vundflw -10;\n520-expression_statement-85-85", method="bug_intou7()", type_label=expression_statement];
526 [label="86_ function transfer(address to, uint256 value) external returns (bool);\n526-function_definition-87-87", method="transfer(address to,uint256 value)", type_label=function_definition];
541 [label="87_ function bug_intou23() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n541-function_definition-88-91", method="bug_intou23()", type_label=function_definition];
545 [label="88_ uint8 vundflw =0;\n545-new_variable-89-89", method="bug_intou23()", type_label=new_variable];
551 [label="89_ vundflw = vundflw -10;\n551-expression_statement-90-90", method="bug_intou23()", type_label=expression_statement];
563 [label="93_ mapping(address => uint) public lockTime_intou37;\n563-new_variable-94-94", method="", type_label=new_variable];
570 [label="94_ function increaseLockTime_intou37(uint _secondsToIncrease) public {\n        lockTime_intou37[msg.sender] += _secondsToIncrease;   \n    }\n570-function_definition-95-97", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=function_definition];
578 [label="95_ lockTime_intou37[msg.sender] += _secondsToIncrease;\n578-expression_statement-96-96", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=expression_statement];
586 [label="97_ function withdraw_intou37() public {\n        require(now > lockTime_intou37[msg.sender]);    \n        uint transferValue_intou37 = 10;           \n        msg.sender.transfer(transferValue_intou37);\n    }\n586-function_definition-98-102", method="withdraw_intou37()", type_label=function_definition];
590 [label="98_ require(now > lockTime_intou37[msg.sender]);\n590-expression_statement-99-99", method="withdraw_intou37()", type_label=expression_statement];
601 [label="99_ uint transferValue_intou37 = 10;\n601-new_variable-100-100", method="withdraw_intou37()", type_label=new_variable];
607 [label="100_ msg.sender.transfer(transferValue_intou37);\n607-expression_statement-101-101", method="withdraw_intou37()", type_label=expression_statement];
616 [label="102_ Token public token;\n616-new_variable-103-103", method="", type_label=new_variable];
622 [label="103_ function bug_intou3() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n622-function_definition-104-107", method="bug_intou3()", type_label=function_definition];
626 [label="104_ uint8 vundflw =0;\n626-new_variable-105-105", method="bug_intou3()", type_label=new_variable];
632 [label="105_ vundflw = vundflw -10;\n632-expression_statement-106-106", method="bug_intou3()", type_label=expression_statement];
638 [label="107_ bool lock;\n638-new_variable-108-108", method="", type_label=new_variable];
642 [label="108_ mapping(address => uint) public lockTime_intou9;\n642-new_variable-109-109", method="", type_label=new_variable];
649 [label="109_ function increaseLockTime_intou9(uint _secondsToIncrease) public {\n        lockTime_intou9[msg.sender] += _secondsToIncrease;   \n    }\n649-function_definition-110-112", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=function_definition];
657 [label="110_ lockTime_intou9[msg.sender] += _secondsToIncrease;\n657-expression_statement-111-111", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=expression_statement];
665 [label="112_ function withdraw_intou9() public {\n        require(now > lockTime_intou9[msg.sender]);    \n        uint transferValue_intou9 = 10;           \n        msg.sender.transfer(transferValue_intou9);\n    }\n665-function_definition-113-117", method="withdraw_intou9()", type_label=function_definition];
669 [label="113_ require(now > lockTime_intou9[msg.sender]);\n669-expression_statement-114-114", method="withdraw_intou9()", type_label=expression_statement];
680 [label="114_ uint transferValue_intou9 = 10;\n680-new_variable-115-115", method="withdraw_intou9()", type_label=new_variable];
686 [label="115_ msg.sender.transfer(transferValue_intou9);\n686-expression_statement-116-116", method="withdraw_intou9()", type_label=expression_statement];
695 [label="117_ uint256 public minstakeTokens;\n695-new_variable-118-118", method="", type_label=new_variable];
700 [label="118_ mapping(address => uint) public lockTime_intou25;\n700-new_variable-119-119", method="", type_label=new_variable];
707 [label="119_ function increaseLockTime_intou25(uint _secondsToIncrease) public {\n        lockTime_intou25[msg.sender] += _secondsToIncrease;   \n    }\n707-function_definition-120-122", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=function_definition];
715 [label="120_ lockTime_intou25[msg.sender] += _secondsToIncrease;\n715-expression_statement-121-121", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=expression_statement];
723 [label="122_ function withdraw_intou25() public {\n        require(now > lockTime_intou25[msg.sender]);    \n        uint transferValue_intou25 = 10;           \n        msg.sender.transfer(transferValue_intou25);\n    }\n723-function_definition-123-127", method="withdraw_intou25()", type_label=function_definition];
727 [label="123_ require(now > lockTime_intou25[msg.sender]);\n727-expression_statement-124-124", method="withdraw_intou25()", type_label=expression_statement];
738 [label="124_ uint transferValue_intou25 = 10;\n738-new_variable-125-125", method="withdraw_intou25()", type_label=new_variable];
744 [label="125_ msg.sender.transfer(transferValue_intou25);\n744-expression_statement-126-126", method="withdraw_intou25()", type_label=expression_statement];
753 [label="127_ uint256 private basePercent = 200;\n753-new_variable-128-128", method="", type_label=new_variable];
764 [label="129_ function bug_intou19() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n764-function_definition-130-133", method="bug_intou19()", type_label=function_definition];
768 [label="130_ uint8 vundflw =0;\n768-new_variable-131-131", method="bug_intou19()", type_label=new_variable];
774 [label="131_ vundflw = vundflw -10;\n774-expression_statement-132-132", method="bug_intou19()", type_label=expression_statement];
780 [label="133_ uint256 public stakeTime = 1814400;\n780-new_variable-134-134", method="", type_label=new_variable];
786 [label="134_ mapping(address => uint) balances_intou26;\n786-new_variable-135-135", method="", type_label=new_variable];
792 [label="135_ function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] - _value >= 0);   \n    balances_intou26[msg.sender] -= _value;   \n    balances_intou26[_to] += _value;   \n    return true;\n  }\n792-function_definition-136-141", method="transfer_intou26(address _to,uint _value)", type_label=function_definition];
808 [label="136_ require(balances_intou26[msg.sender] - _value >= 0);\n808-expression_statement-137-137", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
821 [label="137_ balances_intou26[msg.sender] -= _value;\n821-expression_statement-138-138", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
829 [label="138_ balances_intou26[_to] += _value;\n829-expression_statement-139-139", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
835 [label="139_ return true;\n835-return-140-140", method="transfer_intou26(address _to,uint _value)", type_label=return];
838 [label="141_ uint public stakePercentage = 30;\n838-new_variable-142-142", method="", type_label=new_variable];
844 [label="142_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n844-function_definition-143-146", method="bug_intou31()", type_label=function_definition];
848 [label="143_ uint8 vundflw =0;\n848-new_variable-144-144", method="bug_intou31()", type_label=new_variable];
854 [label="144_ vundflw = vundflw -10;\n854-expression_statement-145-145", method="bug_intou31()", type_label=expression_statement];
874 [label="147_ mapping(address => uint) public lockTime_intou13;\n874-new_variable-148-148", method="", type_label=new_variable];
881 [label="148_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n881-function_definition-149-151", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
889 [label="149_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n889-expression_statement-150-150", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
897 [label="151_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n897-function_definition-152-156", method="withdraw_intou13()", type_label=function_definition];
901 [label="152_ require(now > lockTime_intou13[msg.sender]);\n901-expression_statement-153-153", method="withdraw_intou13()", type_label=expression_statement];
912 [label="153_ uint transferValue_intou13 = 10;\n912-new_variable-154-154", method="withdraw_intou13()", type_label=new_variable];
918 [label="154_ msg.sender.transfer(transferValue_intou13);\n918-expression_statement-155-155", method="withdraw_intou13()", type_label=expression_statement];
941 [label="157_ struct stake{\n        uint256 time;\n        bool redeem;\n        uint256 tokens;\n    }\n941-expression_statement-158-162", method="stake()", type_label=expression_statement];
955 [label="162_ function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou20;    \n}\n955-function_definition-163-166", method="bug_intou20(uint8 p_intou20)", type_label=function_definition];
963 [label="163_ uint8 vundflw1=0;\n963-new_variable-164-164", method="bug_intou20(uint8 p_intou20)", type_label=new_variable];
969 [label="164_ vundflw1 = vundflw1 + p_intou20;\n969-expression_statement-165-165", method="bug_intou20(uint8 p_intou20)", type_label=expression_statement];
975 [label="166_ mapping(address => stake) staker;\n975-new_variable-167-167", method="", type_label=new_variable];
988 [label="168_ token = Token(tokenContractAddress);\n988-expression_statement-169-169", method="", type_label=expression_statement];
995 [label="169_ owner = msg.sender;\n995-expression_statement-170-170", method="", type_label=expression_statement];
1001 [label="170_ minstakeTokens = 500 * 10 ** uint(10);\n1001-expression_statement-171-171", method="", type_label=expression_statement];
1011 [label="172_ mapping(address => uint) balances_intou14;\n1011-new_variable-173-173", method="", type_label=new_variable];
1017 [label="173_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n1017-function_definition-174-179", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
1033 [label="174_ require(balances_intou14[msg.sender] - _value >= 0);\n1033-expression_statement-175-175", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1046 [label="175_ balances_intou14[msg.sender] -= _value;\n1046-expression_statement-176-176", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1054 [label="176_ balances_intou14[_to] += _value;\n1054-expression_statement-177-177", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1060 [label="177_ return true;\n1060-return-178-178", method="transfer_intou14(address _to,uint _value)", type_label=return];
1063 [label="179_ function startStaking(uint256 stakeTokens) public{\n        require(stakeTokens >= minstakeTokens);\n        require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));\n        require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));\n        staker[msg.sender].time = now;\n        staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;\n        emit stakingstarted(msg.sender, staker[msg.sender].tokens, staker[msg.sender].time);\n    }\n1063-function_definition-180-187", method="startStaking(uint256 stakeTokens)", type_label=function_definition];
1071 [label="180_ require(stakeTokens >= minstakeTokens);\n1071-expression_statement-181-181", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1078 [label="181_ require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));\n1078-expression_statement-182-182", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1097 [label="182_ require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));\n1097-expression_statement-183-183", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1120 [label="183_ staker[msg.sender].time = now;\n1120-expression_statement-184-184", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1130 [label="184_ staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;\n1130-expression_statement-185-185", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1170 [label="187_ mapping(address => uint) balances_intou30;\n1170-new_variable-188-188", method="", type_label=new_variable];
1176 [label="188_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n1176-function_definition-189-194", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
1192 [label="189_ require(balances_intou30[msg.sender] - _value >= 0);\n1192-expression_statement-190-190", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1205 [label="190_ balances_intou30[msg.sender] -= _value;\n1205-expression_statement-191-191", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1213 [label="191_ balances_intou30[_to] += _value;\n1213-expression_statement-192-192", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1219 [label="192_ return true;\n1219-return-193-193", method="transfer_intou30(address _to,uint _value)", type_label=return];
1222 [label="194_ function redeem() public{\n        require(!lock);\n        require(!staker[msg.sender].redeem);\n        require(staker[msg.sender].time + stakeTime <= now);\n        require(token.transfer(msg.sender,staker[msg.sender].tokens));\n        require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));\n        emit tokensRedeemed(msg.sender, staker[msg.sender].tokens, staker[msg.sender].tokens * stakePercentage * 100 / 10000);\n        staker[msg.sender].redeem = true;\n        staker[msg.sender].tokens = 0;\n    }\n1222-function_definition-195-204", method="redeem()", type_label=function_definition];
1226 [label="195_ require(!lock);\n1226-expression_statement-196-196", method="redeem()", type_label=expression_statement];
1232 [label="196_ require(!staker[msg.sender].redeem);\n1232-expression_statement-197-197", method="redeem()", type_label=expression_statement];
1244 [label="197_ require(staker[msg.sender].time + stakeTime <= now);\n1244-expression_statement-198-198", method="redeem()", type_label=expression_statement];
1259 [label="198_ require(token.transfer(msg.sender,staker[msg.sender].tokens));\n1259-expression_statement-199-199", method="redeem()", type_label=expression_statement];
1279 [label="199_ require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));\n1279-expression_statement-200-200", method="redeem()", type_label=expression_statement];
1335 [label="201_ staker[msg.sender].redeem = true;\n1335-expression_statement-202-202", method="redeem()", type_label=expression_statement];
1346 [label="202_ staker[msg.sender].tokens = 0;\n1346-expression_statement-203-203", method="redeem()", type_label=expression_statement];
1356 [label="204_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n1356-function_definition-205-208", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
1364 [label="205_ uint8 vundflw1=0;\n1364-new_variable-206-206", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
1370 [label="206_ vundflw1 = vundflw1 + p_intou8;\n1370-expression_statement-207-207", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
1376 [label="208_ function changeStakeTokens(uint256 _NewTokensThreshold) public onlyOwner{\n        minstakeTokens = _NewTokensThreshold * 10 ** uint(10);\n    }\n1376-function_definition-209-211", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=function_definition];
1383 [label="208_ onlyOwner\n1383-expression_statement-209-209", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=expression_statement];
1386 [label="209_ minstakeTokens = _NewTokensThreshold * 10 ** uint(10);\n1386-expression_statement-210-210", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=expression_statement];
1396 [label="211_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1396-function_definition-212-215", method="bug_intou39()", type_label=function_definition];
1400 [label="212_ uint8 vundflw =0;\n1400-new_variable-213-213", method="bug_intou39()", type_label=new_variable];
1406 [label="213_ vundflw = vundflw -10;\n1406-expression_statement-214-214", method="bug_intou39()", type_label=expression_statement];
1412 [label="215_ function changeStakeTime(uint256 _newStakeTime) public onlyOwner{\n        stakeTime = _newStakeTime;\n    }\n1412-function_definition-216-218", method="changeStakeTime(uint256 _newStakeTime)", type_label=function_definition];
1419 [label="215_ onlyOwner\n1419-expression_statement-216-216", method="changeStakeTime(uint256 _newStakeTime)", type_label=expression_statement];
1422 [label="216_ stakeTime = _newStakeTime;\n1422-expression_statement-217-217", method="changeStakeTime(uint256 _newStakeTime)", type_label=expression_statement];
1426 [label="218_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n1426-function_definition-219-222", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
1434 [label="219_ uint8 vundflw1=0;\n1434-new_variable-220-220", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
1440 [label="220_ vundflw1 = vundflw1 + p_intou36;\n1440-expression_statement-221-221", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
1446 [label="222_ function changeStakingPercentage(uint _newStakePercentage) public onlyOwner{\n        stakePercentage = _newStakePercentage;\n    }\n1446-function_definition-223-225", method="changeStakingPercentage(uint _newStakePercentage)", type_label=function_definition];
1453 [label="222_ onlyOwner\n1453-expression_statement-223-223", method="changeStakingPercentage(uint _newStakePercentage)", type_label=expression_statement];
1456 [label="223_ stakePercentage = _newStakePercentage;\n1456-expression_statement-224-224", method="changeStakingPercentage(uint _newStakePercentage)", type_label=expression_statement];
1460 [label="225_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1460-function_definition-226-229", method="bug_intou35()", type_label=function_definition];
1464 [label="226_ uint8 vundflw =0;\n1464-new_variable-227-227", method="bug_intou35()", type_label=new_variable];
1470 [label="227_ vundflw = vundflw -10;\n1470-expression_statement-228-228", method="bug_intou35()", type_label=expression_statement];
1476 [label="229_ function lockWithdrawals() public onlyOwner{\n        lock = true;\n    }\n1476-function_definition-230-232", method="lockWithdrawals()", type_label=function_definition];
1479 [label="229_ onlyOwner\n1479-expression_statement-230-230", method="lockWithdrawals()", type_label=expression_statement];
1482 [label="230_ lock = true;\n1482-expression_statement-231-231", method="lockWithdrawals()", type_label=expression_statement];
1487 [label="232_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n1487-function_definition-233-236", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
1495 [label="233_ uint8 vundflw1=0;\n1495-new_variable-234-234", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
1501 [label="234_ vundflw1 = vundflw1 + p_intou40;\n1501-expression_statement-235-235", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
1507 [label="236_ function findOnePercent(uint256 value) private view returns (uint256)  {\n        uint256 roundValue = value.ceil(basePercent);\n        uint256 onePercent = roundValue.mul(basePercent).div(10000);\n        return onePercent;\n    }\n1507-function_definition-237-241", method="findOnePercent(uint256 value)", type_label=function_definition];
1520 [label="237_ uint256 roundValue = value.ceil(basePercent);\n1520-new_variable-238-238", method="findOnePercent(uint256 value)", type_label=new_variable];
1531 [label="238_ uint256 onePercent = roundValue.mul(basePercent).div(10000);\n1531-new_variable-239-239", method="findOnePercent(uint256 value)", type_label=new_variable];
1547 [label="239_ return onePercent;\n1547-return-240-240", method="findOnePercent(uint256 value)", type_label=return];
1549 [label="241_ mapping(address => uint) public lockTime_intou33;\n1549-new_variable-242-242", method="", type_label=new_variable];
1556 [label="242_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n1556-function_definition-243-245", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
1564 [label="243_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n1564-expression_statement-244-244", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
1572 [label="245_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n1572-function_definition-246-250", method="withdraw_intou33()", type_label=function_definition];
1576 [label="246_ require(now > lockTime_intou33[msg.sender]);\n1576-expression_statement-247-247", method="withdraw_intou33()", type_label=expression_statement];
1587 [label="247_ uint transferValue_intou33 = 10;\n1587-new_variable-248-248", method="withdraw_intou33()", type_label=new_variable];
1593 [label="248_ msg.sender.transfer(transferValue_intou33);\n1593-expression_statement-249-249", method="withdraw_intou33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
19 -> 35  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 56  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
56 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
65 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 97  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
97 -> 108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
108 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
132 -> 138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
204 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
224 -> 240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
240 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
273 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
290 -> 295  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
290 -> 1887  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1887 -> 297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 1887  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
295 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
297 -> 305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
305 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
316 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
341 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
343 -> 360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
360 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
367 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
371 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
405 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
471 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
514 -> 520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
590 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
738 -> 744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
844 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
848 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 1001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1033 -> 1046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1046 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1060 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1063 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 1078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1078 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 1120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1120 -> 1130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 1192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1205 -> 1213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1213 -> 1219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1222 -> 1226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1226 -> 1232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 1259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1259 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1335 -> 1346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1356 -> 1364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1364 -> 1370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 1386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1396 -> 1400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1400 -> 1406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1412 -> 1422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1426 -> 1434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1434 -> 1440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1446 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1464 -> 1470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1476 -> 1482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1487 -> 1495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1495 -> 1501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 1520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1520 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1556 -> 1564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 1576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1576 -> 1587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1587 -> 1593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
