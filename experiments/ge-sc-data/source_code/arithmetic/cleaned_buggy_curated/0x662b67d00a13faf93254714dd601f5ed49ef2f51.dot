digraph  {
13 [label="2_ address public owner;\n13-new_variable-3-3", type_label=new_variable];
20 [label="4_ owner = msg.sender;\n20-expression_statement-5-5", type_label=expression_statement];
26 [label="6_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n26-expression_statement-7-10", type_label=expression_statement];
29 [label="7_ require(msg.sender == owner);\n29-expression_statement-8-8", type_label=expression_statement];
38 [label="8_ _;\n38-expression_statement-9-9", type_label=expression_statement];
40 [label="10_ transferOwnership\n40-function_definition-11-13", type_label=function_definition];
46 [label="10_ onlyOwner\n46-expression_statement-11-11", type_label=expression_statement];
50 [label="11_ owner = newOwner;\n50-expression_statement-12-12", type_label=expression_statement];
60 [label="15_ string public name;\n60-new_variable-16-16", type_label=new_variable];
65 [label="16_ string public symbol;\n65-new_variable-17-17", type_label=new_variable];
70 [label="17_ uint8 public decimals = 18;\n70-new_variable-18-18", type_label=new_variable];
76 [label="18_ uint256 public totalSupply;\n76-new_variable-19-19", type_label=new_variable];
81 [label="19_ mapping (address => uint256) public balanceOf;\n81-new_variable-20-20", type_label=new_variable];
88 [label="20_ mapping (address => mapping (address => uint256)) public allowance;\n88-new_variable-21-21", type_label=new_variable];
97 [label="21_ mapping (address => bool) public frozenAccount;\n97-new_variable-22-22", type_label=new_variable];
166 [label="31_ totalSupply = initialSupply * 10 ** uint256(decimals);\n166-expression_statement-32-32", type_label=expression_statement];
176 [label="32_ balanceOf[msg.sender] = totalSupply;\n176-expression_statement-33-33", type_label=expression_statement];
184 [label="33_ name = tokenName;\n184-expression_statement-34-34", type_label=expression_statement];
188 [label="34_ symbol = tokenSymbol;\n188-expression_statement-35-35", type_label=expression_statement];
192 [label="36_ _transfer\n192-function_definition-37-48", type_label=function_definition];
208 [label="37_ require(_to != address(0x0));\n208-expression_statement-38-38", type_label=expression_statement];
217 [label="38_ require(balanceOf[_from] >= _value);\n217-expression_statement-39-39", type_label=expression_statement];
226 [label="39_ require(balanceOf[_to] + _value >= balanceOf[_to]);\n226-expression_statement-40-40", type_label=expression_statement];
239 [label="40_ require(!frozenAccount[_from]);\n239-expression_statement-41-41", type_label=expression_statement];
247 [label="41_ require(!frozenAccount[_to]);\n247-expression_statement-42-42", type_label=expression_statement];
255 [label="42_ uint previousBalances = balanceOf[_from] + balanceOf[_to];\n255-new_variable-43-43", type_label=new_variable];
267 [label="43_ balanceOf[_from] -= _value;\n267-expression_statement-44-44", type_label=expression_statement];
273 [label="44_ balanceOf[_to] += _value;\n273-expression_statement-45-45", type_label=expression_statement];
287 [label="46_ assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n287-expression_statement-47-47", type_label=expression_statement];
300 [label="48_ transfer\n300-function_definition-49-52", type_label=function_definition];
317 [label="49_ _transfer(msg.sender, _to, _value);\n317-expression_statement-50-50", type_label=expression_statement];
328 [label="50_ return true;\n328-return-51-51", type_label=return];
331 [label="52_ transferFrom\n331-function_definition-53-58", type_label=function_definition];
352 [label="53_ require(_value <= allowance[_from][msg.sender]);\n352-expression_statement-54-54", type_label=expression_statement];
365 [label="54_ allowance[_from][msg.sender] -= _value;\n365-expression_statement-55-55", type_label=expression_statement];
375 [label="55_ _transfer(_from, _to, _value);\n375-expression_statement-56-56", type_label=expression_statement];
384 [label="56_ return true;\n384-return-57-57", type_label=return];
387 [label="58_ approve\n387-function_definition-59-63", type_label=function_definition];
404 [label="59_ allowance[msg.sender][_spender] = _value;\n404-expression_statement-60-60", type_label=expression_statement];
424 [label="61_ return true;\n424-return-62-62", type_label=return];
427 [label="63_ burn\n427-function_definition-64-70", type_label=function_definition];
440 [label="64_ require(balanceOf[msg.sender] >= _value);\n440-expression_statement-65-65", type_label=expression_statement];
451 [label="65_ balanceOf[msg.sender] -= _value;\n451-expression_statement-66-66", type_label=expression_statement];
459 [label="66_ totalSupply -= _value;\n459-expression_statement-67-67", type_label=expression_statement];
471 [label="68_ return true;\n471-return-69-69", type_label=return];
474 [label="70_ burnFrom\n474-function_definition-71-79", type_label=function_definition];
491 [label="71_ require(balanceOf[_from] >= _value);\n491-expression_statement-72-72", type_label=expression_statement];
500 [label="72_ require(_value <= allowance[_from][msg.sender]);\n500-expression_statement-73-73", type_label=expression_statement];
513 [label="73_ balanceOf[_from] -= _value;\n513-expression_statement-74-74", type_label=expression_statement];
519 [label="74_ allowance[_from][msg.sender] -= _value;\n519-expression_statement-75-75", type_label=expression_statement];
529 [label="75_ totalSupply -= _value;\n529-expression_statement-76-76", type_label=expression_statement];
539 [label="77_ return true;\n539-return-78-78", type_label=return];
542 [label="79_ freezeAccount\n542-function_definition-80-83", type_label=function_definition];
552 [label="79_ onlyOwner\n552-expression_statement-80-80", type_label=expression_statement];
556 [label="80_ frozenAccount[target] = freeze;\n556-expression_statement-81-81", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
29 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
40 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 65  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
65 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
70 -> 76  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
76 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 97  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
176 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
217 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
239 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
328 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
331 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
387 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
427 -> 440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
474 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
542 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
