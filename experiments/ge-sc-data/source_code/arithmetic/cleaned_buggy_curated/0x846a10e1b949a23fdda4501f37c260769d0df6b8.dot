digraph  {
12 [label="2_ mul\n12-function_definition-3-10", type_label=function_definition];
29 [label="3_ if__a == 0\n29-if-4-6", type_label=if];
1058 [label="3_ end_if", type_label=end_if];
34 [label="4_ return 0;\n34-return-5-5", type_label=return];
36 [label="6_ uint256 c = _a * _b;\n36-new_variable-7-7", type_label=new_variable];
44 [label="7_ require(c / _a == _b);\n44-expression_statement-8-8", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", type_label=return];
55 [label="10_ div\n55-function_definition-11-15", type_label=function_definition];
72 [label="11_ require(_b > 0);\n72-expression_statement-12-12", type_label=expression_statement];
79 [label="12_ uint256 c = _a / _b;\n79-new_variable-13-13", type_label=new_variable];
87 [label="13_ return c;\n87-return-14-14", type_label=return];
89 [label="15_ sub\n89-function_definition-16-20", type_label=function_definition];
106 [label="16_ require(_b <= _a);\n106-expression_statement-17-17", type_label=expression_statement];
113 [label="17_ uint256 c = _a - _b;\n113-new_variable-18-18", type_label=new_variable];
121 [label="18_ return c;\n121-return-19-19", type_label=return];
123 [label="20_ add\n123-function_definition-21-25", type_label=function_definition];
140 [label="21_ uint256 c = _a + _b;\n140-new_variable-22-22", type_label=new_variable];
148 [label="22_ require(c >= _a);\n148-expression_statement-23-23", type_label=expression_statement];
155 [label="23_ return c;\n155-return-24-24", type_label=return];
157 [label="25_ mod\n157-function_definition-26-29", type_label=function_definition];
174 [label="26_ require(b != 0);\n174-expression_statement-27-27", type_label=expression_statement];
181 [label="27_ return a % b;\n181-return-28-28", type_label=return];
188 [label="31_ address public owner;\n188-new_variable-32-32", type_label=new_variable];
211 [label="38_ owner = msg.sender;\n211-expression_statement-39-39", type_label=expression_statement];
217 [label="40_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n217-expression_statement-41-44", type_label=expression_statement];
220 [label="41_ require(msg.sender == owner);\n220-expression_statement-42-42", type_label=expression_statement];
229 [label="42_ _;\n229-expression_statement-43-43", type_label=expression_statement];
231 [label="44_ renounceOwnership\n231-function_definition-45-48", type_label=function_definition];
234 [label="44_ onlyOwner\n234-expression_statement-45-45", type_label=expression_statement];
241 [label="46_ owner = address(0);\n241-expression_statement-47-47", type_label=expression_statement];
247 [label="48_ transferOwnership\n247-function_definition-49-51", type_label=function_definition];
254 [label="48_ onlyOwner\n254-expression_statement-49-49", type_label=expression_statement];
257 [label="49_ _transferOwnership(_newOwner);\n257-expression_statement-50-50", type_label=expression_statement];
262 [label="51_ _transferOwnership\n262-function_definition-52-56", type_label=function_definition];
270 [label="52_ require(_newOwner != address(0));\n270-expression_statement-53-53", type_label=expression_statement];
285 [label="54_ owner = _newOwner;\n285-expression_statement-55-55", type_label=expression_statement];
292 [label="58_ totalSupply\n292-function_definition-59-59", type_label=function_definition];
300 [label="59_ balanceOf\n300-function_definition-60-60", type_label=function_definition];
312 [label="60_ allowance\n312-function_definition-61-62", type_label=function_definition];
328 [label="62_ transfer\n328-function_definition-63-63", type_label=function_definition];
343 [label="63_ approve\n343-function_definition-64-65", type_label=function_definition];
358 [label="65_ transferFrom\n358-function_definition-66-67", type_label=function_definition];
419 [label="80_ mapping (address => uint256) public balances;\n419-new_variable-81-81", type_label=new_variable];
426 [label="81_ mapping (address => mapping (address => uint256)) private allowed;\n426-new_variable-82-82", type_label=new_variable];
435 [label="82_ uint256 private totalSupply_ = 15000000 * 10 ** 4;\n435-new_variable-83-83", type_label=new_variable];
445 [label="83_ uint256 private maxTotalSupply_ = 20000000 * 10 ** 4;\n445-new_variable-84-84", type_label=new_variable];
455 [label="84_ address public crowdsale;\n455-new_variable-85-85", type_label=new_variable];
460 [label="85_ string public constant name = \"Bet It All Token\";\n460-new_variable-86-86", type_label=new_variable];
467 [label="86_ string public constant symbol = \"BIAT\";\n467-new_variable-87-87", type_label=new_variable];
474 [label="87_ uint8 public constant decimals = 4;\n474-new_variable-88-88", type_label=new_variable];
482 [label="89_ balances[msg.sender] = totalSupply_;\n482-expression_statement-90-90", type_label=expression_statement];
502 [label="92_ setAddressOfCrowdsale\n502-function_definition-93-96", type_label=function_definition];
509 [label="92_ onlyOwner\n509-expression_statement-93-93", type_label=expression_statement];
512 [label="93_ require(_address != 0x0);\n512-expression_statement-94-94", type_label=expression_statement];
519 [label="94_ crowdsale = _address;\n519-expression_statement-95-95", type_label=expression_statement];
523 [label="96_ totalSupply\n523-function_definition-97-99", type_label=function_definition];
532 [label="97_ return totalSupply_;\n532-return-98-98", type_label=return];
534 [label="99_ balanceOf\n534-function_definition-100-102", type_label=function_definition];
547 [label="100_ return balances[_owner];\n547-return-101-101", type_label=return];
551 [label="102_ allowance\n551-function_definition-103-112", type_label=function_definition];
568 [label="110_ return allowed[_owner][_spender];\n568-return-111-111", type_label=return];
574 [label="112_ transfer\n574-function_definition-113-120", type_label=function_definition];
590 [label="113_ require(_value <= balances[msg.sender]);\n590-expression_statement-114-114", type_label=expression_statement];
601 [label="114_ require(_to != address(0));\n601-expression_statement-115-115", type_label=expression_statement];
610 [label="115_ balances[msg.sender] = balances[msg.sender].sub(_value);\n610-expression_statement-116-116", type_label=expression_statement];
627 [label="116_ balances[_to] = balances[_to].add(_value);\n627-expression_statement-117-117", type_label=expression_statement];
650 [label="118_ return true;\n650-return-119-119", type_label=return];
653 [label="120_ approve\n653-function_definition-121-125", type_label=function_definition];
669 [label="121_ allowed[msg.sender][_spender] = _value;\n669-expression_statement-122-122", type_label=expression_statement];
689 [label="123_ return true;\n689-return-124-124", type_label=return];
692 [label="125_ transferFrom\n692-function_definition-126-142", type_label=function_definition];
712 [label="133_ require(_value <= balances[_from]);\n712-expression_statement-134-134", type_label=expression_statement];
721 [label="134_ require(_value <= allowed[_from][msg.sender]);\n721-expression_statement-135-135", type_label=expression_statement];
734 [label="135_ require(_to != address(0));\n734-expression_statement-136-136", type_label=expression_statement];
743 [label="136_ balances[_from] = balances[_from].sub(_value);\n743-expression_statement-137-137", type_label=expression_statement];
756 [label="137_ balances[_to] = balances[_to].add(_value);\n756-expression_statement-138-138", type_label=expression_statement];
769 [label="138_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n769-expression_statement-139-139", type_label=expression_statement];
798 [label="140_ return true;\n798-return-141-141", type_label=return];
801 [label="142_ increaseApproval\n801-function_definition-143-154", type_label=function_definition];
817 [label="149_ allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n817-expression_statement-150-151", type_label=expression_statement];
855 [label="152_ return true;\n855-return-153-153", type_label=return];
858 [label="154_ decreaseApproval\n858-function_definition-155-170", type_label=function_definition];
874 [label="161_ uint256 oldValue = allowed[msg.sender][_spender];\n874-new_variable-162-162", type_label=new_variable];
886 [label="162_ if__subtractedValue >= oldValue\n886-if-163-167", type_label=if];
1915 [label="162_ end_if", type_label=end_if];
891 [label="163_ allowed[msg.sender][_spender] = 0;\n891-expression_statement-164-164", type_label=expression_statement];
902 [label="165_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n902-expression_statement-166-166", type_label=expression_statement];
933 [label="168_ return true;\n933-return-169-169", type_label=return];
936 [label="170_ _mint\n936-function_definition-171-176", type_label=function_definition];
948 [label="171_ require(account != 0);\n948-expression_statement-172-172", type_label=expression_statement];
955 [label="172_ totalSupply_ = totalSupply_.add(value);\n955-expression_statement-173-173", type_label=expression_statement];
964 [label="173_ balances[account] = balances[account].add(value);\n964-expression_statement-174-174", type_label=expression_statement];
987 [label="176_ mint\n987-function_definition-177-182", type_label=function_definition];
1003 [label="177_ require(msg.sender == crowdsale);\n1003-expression_statement-178-178", type_label=expression_statement];
1012 [label="178_ require(totalSupply_.add(value) <= maxTotalSupply_);\n1012-expression_statement-179-179", type_label=expression_statement];
1024 [label="179_ _mint(to, value);\n1024-expression_statement-180-180", type_label=expression_statement];
1031 [label="180_ return true;\n1031-return-181-181", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
917;
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 1058  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1058 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 1058  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 79  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 87  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
89 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
123 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
148 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
157 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
220 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
532 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
534 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
551 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
574 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
590 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
653 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
692 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
721 -> 734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
756 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
798 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
801 -> 817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
858 -> 874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 891  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
886 -> 902  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1915 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 1915  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
902 -> 1915  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
933 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
936 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1024 -> 1031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
