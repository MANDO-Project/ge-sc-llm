digraph  {
12 [label="2_ totalSupply\n12-function_definition-3-3", type_label=function_definition];
20 [label="3_ balanceOf\n20-function_definition-4-4", type_label=function_definition];
32 [label="4_ transfer\n32-function_definition-5-5", type_label=function_definition];
64 [label="8_ mul\n64-function_definition-9-16", type_label=function_definition];
82 [label="9_ if_a == 0\n82-if-10-12", type_label=if];
1418 [label="9_ end_if", type_label=end_if];
87 [label="10_ return 0;\n87-return-11-11", type_label=return];
89 [label="12_ c = a * b;\n89-expression_statement-13-13", type_label=expression_statement];
95 [label="13_ assert(c / a == b);\n95-expression_statement-14-14", type_label=expression_statement];
104 [label="14_ return c;\n104-return-15-15", type_label=return];
106 [label="16_ div\n106-function_definition-17-19", type_label=function_definition];
123 [label="17_ return a / b;\n123-return-18-18", type_label=return];
127 [label="19_ sub\n127-function_definition-20-23", type_label=function_definition];
144 [label="20_ assert(b <= a);\n144-expression_statement-21-21", type_label=expression_statement];
151 [label="21_ return a - b;\n151-return-22-22", type_label=return];
155 [label="23_ add\n155-function_definition-24-28", type_label=function_definition];
173 [label="24_ c = a + b;\n173-expression_statement-25-25", type_label=expression_statement];
179 [label="25_ assert(c >= a);\n179-expression_statement-26-26", type_label=expression_statement];
186 [label="26_ return c;\n186-return-27-27", type_label=return];
199 [label="31_ mapping(address => uint256) balances;\n199-new_variable-32-32", type_label=new_variable];
205 [label="32_ uint256 totalSupply_;\n205-new_variable-33-33", type_label=new_variable];
209 [label="33_ totalSupply\n209-function_definition-34-36", type_label=function_definition];
218 [label="34_ return totalSupply_;\n218-return-35-35", type_label=return];
220 [label="36_ transfer\n220-function_definition-37-44", type_label=function_definition];
236 [label="37_ require(_to != address(0), 'Receiving address cannot be 0!');\n236-expression_statement-38-38", type_label=expression_statement];
248 [label="38_ require(_value <= balances[msg.sender], 'Not enough token funds for sender!');\n248-expression_statement-39-39", type_label=expression_statement];
262 [label="39_ balances[msg.sender] = balances[msg.sender].sub(_value);\n262-expression_statement-40-40", type_label=expression_statement];
279 [label="40_ balances[_to] = balances[_to].add(_value);\n279-expression_statement-41-41", type_label=expression_statement];
302 [label="42_ return true;\n302-return-43-43", type_label=return];
305 [label="44_ balanceOf\n305-function_definition-45-47", type_label=function_definition];
319 [label="45_ return balances[_owner];\n319-return-46-46", type_label=return];
326 [label="49_ allowance\n326-function_definition-50-50", type_label=function_definition];
342 [label="50_ transferFrom\n342-function_definition-51-51", type_label=function_definition];
361 [label="51_ approve\n361-function_definition-52-52", type_label=function_definition];
376 [label="52_ totalSupply\n376-function_definition-53-53", type_label=function_definition];
384 [label="53_ balanceOf\n384-function_definition-54-54", type_label=function_definition];
396 [label="54_ transfer\n396-function_definition-55-55", type_label=function_definition];
448 [label="59_ mapping (address => mapping (address => uint256)) internal allowed;\n448-new_variable-60-60", type_label=new_variable];
457 [label="60_ transferFrom\n457-function_definition-61-70", type_label=function_definition];
477 [label="61_ require(_to != address(0));\n477-expression_statement-62-62", type_label=expression_statement];
486 [label="62_ require(_value <= balances[_from]);\n486-expression_statement-63-63", type_label=expression_statement];
495 [label="63_ require(_value <= allowed[_from][msg.sender]);\n495-expression_statement-64-64", type_label=expression_statement];
508 [label="64_ balances[_from] = balances[_from].sub(_value);\n508-expression_statement-65-65", type_label=expression_statement];
521 [label="65_ balances[_to] = balances[_to].add(_value);\n521-expression_statement-66-66", type_label=expression_statement];
534 [label="66_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n534-expression_statement-67-67", type_label=expression_statement];
563 [label="68_ return true;\n563-return-69-69", type_label=return];
566 [label="70_ approve\n566-function_definition-71-75", type_label=function_definition];
582 [label="71_ allowed[msg.sender][_spender] = _value;\n582-expression_statement-72-72", type_label=expression_statement];
602 [label="73_ return true;\n602-return-74-74", type_label=return];
605 [label="75_ allowance\n605-function_definition-76-78", type_label=function_definition];
622 [label="76_ return allowed[_owner][_spender];\n622-return-77-77", type_label=return];
628 [label="78_ increaseApproval\n628-function_definition-79-83", type_label=function_definition];
644 [label="79_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n644-expression_statement-80-80", type_label=expression_statement];
681 [label="81_ return true;\n681-return-82-82", type_label=return];
684 [label="83_ decreaseApproval\n684-function_definition-84-93", type_label=function_definition];
700 [label="84_ uint oldValue = allowed[msg.sender][_spender];\n700-new_variable-85-85", type_label=new_variable];
712 [label="85_ if__subtractedValue > oldValue\n712-if-86-90", type_label=if];
2048 [label="85_ end_if", type_label=end_if];
717 [label="86_ allowed[msg.sender][_spender] = 0;\n717-expression_statement-87-87", type_label=expression_statement];
728 [label="88_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n728-expression_statement-89-89", type_label=expression_statement];
759 [label="91_ return true;\n759-return-92-92", type_label=return];
765 [label="95_ address public _owner;\n765-new_variable-96-96", type_label=new_variable];
782 [label="98_ _owner = msg.sender;\n782-expression_statement-99-99", type_label=expression_statement];
796 [label="101_ owner\n796-function_definition-102-104", type_label=function_definition];
805 [label="102_ return _owner;\n805-return-103-103", type_label=return];
807 [label="104_ modifier onlyOwner() {\n        require(isOwner(), \"only owner is able call this function\");\n        _;\n    }\n807-expression_statement-105-108", type_label=expression_statement];
810 [label="105_ require(isOwner(), \"only owner is able call this function\");\n810-expression_statement-106-106", type_label=expression_statement];
819 [label="106_ _;\n819-expression_statement-107-107", type_label=expression_statement];
821 [label="108_ isOwner\n821-function_definition-109-111", type_label=function_definition];
830 [label="109_ return msg.sender == _owner;\n830-return-110-110", type_label=return];
836 [label="111_ renounceOwnership\n836-function_definition-112-115", type_label=function_definition];
839 [label="111_ onlyOwner\n839-expression_statement-112-112", type_label=expression_statement];
850 [label="113_ _owner = address(0);\n850-expression_statement-114-114", type_label=expression_statement];
856 [label="115_ transferOwnership\n856-function_definition-116-118", type_label=function_definition];
863 [label="115_ onlyOwner\n863-expression_statement-116-116", type_label=expression_statement];
866 [label="116_ _transferOwnership(newOwner);\n866-expression_statement-117-117", type_label=expression_statement];
871 [label="118_ _transferOwnership\n871-function_definition-119-123", type_label=function_definition];
879 [label="119_ require(newOwner != address(0));\n879-expression_statement-120-120", type_label=expression_statement];
894 [label="121_ _owner = newOwner;\n894-expression_statement-122-122", type_label=expression_statement];
919 [label="127_ bool public mintingFinished = false;\n919-new_variable-128-128", type_label=new_variable];
926 [label="128_ modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n926-expression_statement-129-132", type_label=expression_statement];
929 [label="129_ require(!mintingFinished);\n929-expression_statement-130-130", type_label=expression_statement];
935 [label="130_ _;\n935-expression_statement-131-131", type_label=expression_statement];
937 [label="132_ mint\n937-function_definition-133-139", type_label=function_definition];
947 [label="132_ onlyOwner\n947-expression_statement-133-133", type_label=expression_statement];
949 [label="132_ canMint\n949-expression_statement-133-133", type_label=expression_statement];
957 [label="133_ totalSupply_ = totalSupply_.add(_amount);\n957-expression_statement-134-134", type_label=expression_statement];
966 [label="134_ balances[_to] = balances[_to].add(_amount);\n966-expression_statement-135-135", type_label=expression_statement];
995 [label="137_ return true;\n995-return-138-138", type_label=return];
998 [label="139_ finishMinting\n998-function_definition-140-144", type_label=function_definition];
1000 [label="139_ onlyOwner\n1000-expression_statement-140-140", type_label=expression_statement];
1002 [label="139_ canMint\n1002-expression_statement-140-140", type_label=expression_statement];
1010 [label="140_ mintingFinished = true;\n1010-expression_statement-141-141", type_label=expression_statement];
1017 [label="142_ return true;\n1017-return-143-143", type_label=return];
1030 [label="148_ bool private _paused;\n1030-new_variable-149-149", type_label=new_variable];
1037 [label="150_ _paused = false;\n1037-expression_statement-151-151", type_label=expression_statement];
1042 [label="152_ paused\n1042-function_definition-153-155", type_label=function_definition];
1051 [label="153_ return _paused;\n1051-return-154-154", type_label=return];
1053 [label="155_ modifier whenNotPaused() {\n        require(!_paused, \"must not be paused\");\n        _;\n    }\n1053-expression_statement-156-159", type_label=expression_statement];
1056 [label="156_ require(!_paused, \"must not be paused\");\n1056-expression_statement-157-157", type_label=expression_statement];
1065 [label="157_ _;\n1065-expression_statement-158-158", type_label=expression_statement];
1067 [label="159_ modifier whenPaused() {\n        require(_paused, \"must be paused\");\n        _;\n    }\n1067-expression_statement-160-163", type_label=expression_statement];
1070 [label="160_ require(_paused, \"must be paused\");\n1070-expression_statement-161-161", type_label=expression_statement];
1078 [label="161_ _;\n1078-expression_statement-162-162", type_label=expression_statement];
1080 [label="163_ pause\n1080-function_definition-164-167", type_label=function_definition];
1083 [label="163_ onlyOwner\n1083-expression_statement-164-164", type_label=expression_statement];
1085 [label="163_ whenNotPaused\n1085-expression_statement-164-164", type_label=expression_statement];
1088 [label="164_ _paused = true;\n1088-expression_statement-165-165", type_label=expression_statement];
1095 [label="167_ unpause\n1095-function_definition-168-171", type_label=function_definition];
1097 [label="167_ onlyOwner\n1097-expression_statement-168-168", type_label=expression_statement];
1099 [label="167_ whenPaused\n1099-expression_statement-168-168", type_label=expression_statement];
1103 [label="168_ _paused = false;\n1103-expression_statement-169-169", type_label=expression_statement];
1119 [label="173_ transfer\n1119-function_definition-174-176", type_label=function_definition];
1130 [label="173_ whenNotPaused\n1130-expression_statement-174-174", type_label=expression_statement];
1137 [label="174_ return super.transfer(_to, _value);\n1137-return-175-175", type_label=return];
1146 [label="176_ transferFrom\n1146-function_definition-177-179", type_label=function_definition];
1161 [label="176_ whenNotPaused\n1161-expression_statement-177-177", type_label=expression_statement];
1168 [label="177_ return super.transferFrom(_from, _to, _value);\n1168-return-178-178", type_label=return];
1179 [label="179_ approve\n1179-function_definition-180-182", type_label=function_definition];
1190 [label="179_ whenNotPaused\n1190-expression_statement-180-180", type_label=expression_statement];
1197 [label="180_ return super.approve(_spender, _value);\n1197-return-181-181", type_label=return];
1206 [label="182_ increaseApproval\n1206-function_definition-183-185", type_label=function_definition];
1217 [label="182_ whenNotPaused\n1217-expression_statement-183-183", type_label=expression_statement];
1225 [label="183_ return super.increaseApproval(_spender, _addedValue);\n1225-return-184-184", type_label=return];
1234 [label="185_ decreaseApproval\n1234-function_definition-186-188", type_label=function_definition];
1245 [label="185_ whenNotPaused\n1245-expression_statement-186-186", type_label=expression_statement];
1253 [label="186_ return super.decreaseApproval(_spender, _subtractedValue);\n1253-return-187-187", type_label=return];
1271 [label="190_ string private _name;\n1271-new_variable-191-191", type_label=new_variable];
1276 [label="191_ string private _symbol;\n1276-new_variable-192-192", type_label=new_variable];
1281 [label="192_ uint8 constant private _decimals = 18;\n1281-new_variable-193-193", type_label=new_variable];
1297 [label="194_ _name = name;\n1297-expression_statement-195-195", type_label=expression_statement];
1301 [label="195_ _symbol = symbol;\n1301-expression_statement-196-196", type_label=expression_statement];
1305 [label="196_ pause();\n1305-expression_statement-197-197", type_label=expression_statement];
1308 [label="198_ name\n1308-function_definition-199-201", type_label=function_definition];
1317 [label="199_ return _name;\n1317-return-200-200", type_label=return];
1319 [label="201_ symbol\n1319-function_definition-202-204", type_label=function_definition];
1328 [label="202_ return _symbol;\n1328-return-203-203", type_label=return];
1330 [label="204_ decimals\n1330-function_definition-205-207", type_label=function_definition];
1339 [label="205_ return _decimals;\n1339-return-206-206", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
743;
64 -> 82  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 87  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
82 -> 1418  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1418 -> 89  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 1418  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
87 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
89 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
106 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
127 -> 144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
155 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
218 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
220 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
248 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
305 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
457 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
566 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
605 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
628 -> 644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
684 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 717  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
712 -> 728  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2048 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 2048  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
728 -> 2048  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
759 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
796 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
810 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
836 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
856 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
947 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
998 -> 1010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1042 -> 1051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1051 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1053 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1070 -> 1078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1083 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1095 -> 1103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 1099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1119 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1146 -> 1168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1179 -> 1197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1206 -> 1225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1225 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1234 -> 1253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1271 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 1281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1308 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1317 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1319 -> 1328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1330 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
