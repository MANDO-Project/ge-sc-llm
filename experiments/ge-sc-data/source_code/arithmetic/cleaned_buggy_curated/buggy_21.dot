digraph  {
13 [label="2_ function transfer(address to, uint256 value) public returns (bool success);\n13-function_definition-3-3", method="transfer(address to,uint256 value)", type_label=function_definition];
29 [label="3_ function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou20;    \n}\n29-function_definition-4-7", method="bug_intou20(uint8 p_intou20)", type_label=function_definition];
37 [label="4_ uint8 vundflw1=0;\n37-new_variable-5-5", method="bug_intou20(uint8 p_intou20)", type_label=new_variable];
43 [label="5_ vundflw1 = vundflw1 + p_intou20;\n43-expression_statement-6-6", method="bug_intou20(uint8 p_intou20)", type_label=expression_statement];
49 [label="7_ function transferFrom(address from, address to, uint256 value) public returns (bool success);\n49-function_definition-8-8", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
69 [label="8_ function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou32;    \n}\n69-function_definition-9-12", method="bug_intou32(uint8 p_intou32)", type_label=function_definition];
77 [label="9_ uint8 vundflw1=0;\n77-new_variable-10-10", method="bug_intou32(uint8 p_intou32)", type_label=new_variable];
83 [label="10_ vundflw1 = vundflw1 + p_intou32;\n83-expression_statement-11-11", method="bug_intou32(uint8 p_intou32)", type_label=expression_statement];
89 [label="12_ function balanceOf(address account) external view returns(uint256);\n89-function_definition-13-13", method="balanceOf(address account)", type_label=function_definition];
101 [label="13_ mapping(address => uint) balances_intou38;\n101-new_variable-14-14", method="", type_label=new_variable];
107 [label="14_ function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] - _value >= 0);   \n    balances_intou38[msg.sender] -= _value;   \n    balances_intou38[_to] += _value;   \n    return true;\n  }\n107-function_definition-15-20", method="transfer_intou38(address _to,uint _value)", type_label=function_definition];
123 [label="15_ require(balances_intou38[msg.sender] - _value >= 0);\n123-expression_statement-16-16", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
136 [label="16_ balances_intou38[msg.sender] -= _value;\n136-expression_statement-17-17", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
144 [label="17_ balances_intou38[_to] += _value;\n144-expression_statement-18-18", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
150 [label="18_ return true;\n150-return-19-19", method="transfer_intou38(address _to,uint _value)", type_label=return];
153 [label="20_ function allowance(address _owner, address _spender)external view returns(uint256);\n153-function_definition-21-21", method="allowance(address _owner,address _spender)", type_label=function_definition];
169 [label="21_ function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou4;    \n}\n169-function_definition-22-25", method="bug_intou4(uint8 p_intou4)", type_label=function_definition];
177 [label="22_ uint8 vundflw1=0;\n177-new_variable-23-23", method="bug_intou4(uint8 p_intou4)", type_label=new_variable];
183 [label="23_ vundflw1 = vundflw1 + p_intou4;\n183-expression_statement-24-24", method="bug_intou4(uint8 p_intou4)", type_label=expression_statement];
192 [label="27_ function mul(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        if (a == 0) {\n        return 0;}\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n192-function_definition-28-35", method="mul(uint256 a,uint256 b)", type_label=function_definition];
209 [label="29_ if_a == 0\n209-if-30-31", method="mul(uint256 a,uint256 b)", type_label=if];
3524 [label="29_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
214 [label="30_ return 0;\n214-return-31-31", method="mul(uint256 a,uint256 b)", type_label=return];
216 [label="31_ uint256 c = a * b;\n216-new_variable-32-32", method="mul(uint256 a,uint256 b)", type_label=new_variable];
224 [label="32_ assert(c / a == b);\n224-expression_statement-33-33", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
233 [label="33_ return c;\n233-return-34-34", method="mul(uint256 a,uint256 b)", type_label=return];
235 [label="35_ function div(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a / b;\n        return c;\n    }\n235-function_definition-36-40", method="div(uint256 a,uint256 b)", type_label=function_definition];
252 [label="37_ uint256 c = a / b;\n252-new_variable-38-38", method="div(uint256 a,uint256 b)", type_label=new_variable];
260 [label="38_ return c;\n260-return-39-39", method="div(uint256 a,uint256 b)", type_label=return];
262 [label="40_ function sub(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        assert(b <= a);\n        return a - b;\n    }\n262-function_definition-41-45", method="sub(uint256 a,uint256 b)", type_label=function_definition];
279 [label="42_ assert(b <= a);\n279-expression_statement-43-43", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
286 [label="43_ return a - b;\n286-return-44-44", method="sub(uint256 a,uint256 b)", type_label=return];
290 [label="45_ function add(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n290-function_definition-46-51", method="add(uint256 a,uint256 b)", type_label=function_definition];
307 [label="47_ uint256 c = a + b;\n307-new_variable-48-48", method="add(uint256 a,uint256 b)", type_label=new_variable];
315 [label="48_ assert(c >= a);\n315-expression_statement-49-49", method="add(uint256 a,uint256 b)", type_label=expression_statement];
322 [label="49_ return c;\n322-return-50-50", method="add(uint256 a,uint256 b)", type_label=return];
332 [label="54_ mapping(address => uint) public lockTime_intou13;\n332-new_variable-55-55", method="", type_label=new_variable];
339 [label="55_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n339-function_definition-56-58", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
347 [label="56_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n347-expression_statement-57-57", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
355 [label="58_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n355-function_definition-59-63", method="withdraw_intou13()", type_label=function_definition];
359 [label="59_ require(now > lockTime_intou13[msg.sender]);\n359-expression_statement-60-60", method="withdraw_intou13()", type_label=expression_statement];
370 [label="60_ uint transferValue_intou13 = 10;\n370-new_variable-61-61", method="withdraw_intou13()", type_label=new_variable];
376 [label="61_ msg.sender.transfer(transferValue_intou13);\n376-expression_statement-62-62", method="withdraw_intou13()", type_label=expression_statement];
403 [label="64_ function bug_intou11() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n403-function_definition-65-68", method="bug_intou11()", type_label=function_definition];
407 [label="65_ uint8 vundflw =0;\n407-new_variable-66-66", method="bug_intou11()", type_label=new_variable];
413 [label="66_ vundflw = vundflw -10;\n413-expression_statement-67-67", method="bug_intou11()", type_label=expression_statement];
419 [label="68_ address payable admin;\n419-new_variable-69-69", method="", type_label=new_variable];
423 [label="69_ mapping(address => uint) public lockTime_intou1;\n423-new_variable-70-70", method="", type_label=new_variable];
430 [label="70_ function increaseLockTime_intou1(uint _secondsToIncrease) public {\n        lockTime_intou1[msg.sender] += _secondsToIncrease;   \n    }\n430-function_definition-71-73", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=function_definition];
438 [label="71_ lockTime_intou1[msg.sender] += _secondsToIncrease;\n438-expression_statement-72-72", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=expression_statement];
446 [label="73_ function withdraw_ovrflow1() public {\n        require(now > lockTime_intou1[msg.sender]);    \n        uint transferValue_intou1 = 10;           \n        msg.sender.transfer(transferValue_intou1);\n    }\n446-function_definition-74-78", method="withdraw_ovrflow1()", type_label=function_definition];
450 [label="74_ require(now > lockTime_intou1[msg.sender]);\n450-expression_statement-75-75", method="withdraw_ovrflow1()", type_label=expression_statement];
461 [label="75_ uint transferValue_intou1 = 10;\n461-new_variable-76-76", method="withdraw_ovrflow1()", type_label=new_variable];
467 [label="76_ msg.sender.transfer(transferValue_intou1);\n467-expression_statement-77-77", method="withdraw_ovrflow1()", type_label=expression_statement];
476 [label="78_ address public feeAddress;\n476-new_variable-79-79", method="", type_label=new_variable];
481 [label="79_ mapping(address => uint) balances_intou2;\n481-new_variable-80-80", method="", type_label=new_variable];
487 [label="80_ function transfer_undrflow2(address _to, uint _value) public returns (bool) {\n    require(balances_intou2[msg.sender] - _value >= 0);   \n    balances_intou2[msg.sender] -= _value;   \n    balances_intou2[_to] += _value;   \n    return true;\n  }\n487-function_definition-81-86", method="transfer_undrflow2(address _to,uint _value)", type_label=function_definition];
503 [label="81_ require(balances_intou2[msg.sender] - _value >= 0);\n503-expression_statement-82-82", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
516 [label="82_ balances_intou2[msg.sender] -= _value;\n516-expression_statement-83-83", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
524 [label="83_ balances_intou2[_to] += _value;\n524-expression_statement-84-84", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
530 [label="84_ return true;\n530-return-85-85", method="transfer_undrflow2(address _to,uint _value)", type_label=return];
533 [label="86_ bool private dexStatus;\n533-new_variable-87-87", method="", type_label=new_variable];
538 [label="87_ mapping(address => uint) public lockTime_intou17;\n538-new_variable-88-88", method="", type_label=new_variable];
545 [label="88_ function increaseLockTime_intou17(uint _secondsToIncrease) public {\n        lockTime_intou17[msg.sender] += _secondsToIncrease;   \n    }\n545-function_definition-89-91", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=function_definition];
553 [label="89_ lockTime_intou17[msg.sender] += _secondsToIncrease;\n553-expression_statement-90-90", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=expression_statement];
561 [label="91_ function withdraw_intou17() public {\n        require(now > lockTime_intou17[msg.sender]);    \n        uint transferValue_intou17 = 10;           \n        msg.sender.transfer(transferValue_intou17);\n    }\n561-function_definition-92-96", method="withdraw_intou17()", type_label=function_definition];
565 [label="92_ require(now > lockTime_intou17[msg.sender]);\n565-expression_statement-93-93", method="withdraw_intou17()", type_label=expression_statement];
576 [label="93_ uint transferValue_intou17 = 10;\n576-new_variable-94-94", method="withdraw_intou17()", type_label=new_variable];
582 [label="94_ msg.sender.transfer(transferValue_intou17);\n582-expression_statement-95-95", method="withdraw_intou17()", type_label=expression_statement];
591 [label="96_ uint256 public tokenId=0;\n591-new_variable-97-97", method="", type_label=new_variable];
597 [label="97_ struct orders{\n        address userAddress;\n        address tokenAddress;\n        uint256 type_;\n        uint256 price;\n        uint256 total;\n        uint256 _decimal;\n        uint256 tradeTotal;\n        uint256 amount;\n        uint256 tradeAmount;\n        uint256 pairOrderID;\n        uint256 status; \n    }\n597-expression_statement-98-110", method="orders()", type_label=expression_statement];
643 [label="110_ struct tokens{\n        address tokenAddress;\n        string tokenSymbol;\n        uint256 decimals;\n        bool status;\n    }\n643-expression_statement-111-116", method="tokens()", type_label=expression_statement];
671 [label="117_ admin = _admin;\n671-expression_statement-118-118", method="", type_label=expression_statement];
675 [label="118_ feeAddress = feeAddress_;\n675-expression_statement-119-119", method="", type_label=expression_statement];
679 [label="119_ dexStatus = true;\n679-expression_statement-120-120", method="", type_label=expression_statement];
684 [label="121_ function bug_intou7() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n684-function_definition-122-125", method="bug_intou7()", type_label=function_definition];
688 [label="122_ uint8 vundflw =0;\n688-new_variable-123-123", method="bug_intou7()", type_label=new_variable];
694 [label="123_ vundflw = vundflw -10;\n694-expression_statement-124-124", method="bug_intou7()", type_label=expression_statement];
700 [label="125_ mapping(address => uint) public lockTime_intou37;\n700-new_variable-126-126", method="", type_label=new_variable];
707 [label="126_ function increaseLockTime_intou37(uint _secondsToIncrease) public {\n        lockTime_intou37[msg.sender] += _secondsToIncrease;   \n    }\n707-function_definition-127-129", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=function_definition];
715 [label="127_ lockTime_intou37[msg.sender] += _secondsToIncrease;\n715-expression_statement-128-128", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=expression_statement];
723 [label="129_ function withdraw_intou37() public {\n        require(now > lockTime_intou37[msg.sender]);    \n        uint transferValue_intou37 = 10;           \n        msg.sender.transfer(transferValue_intou37);\n    }\n723-function_definition-130-134", method="withdraw_intou37()", type_label=function_definition];
727 [label="130_ require(now > lockTime_intou37[msg.sender]);\n727-expression_statement-131-131", method="withdraw_intou37()", type_label=expression_statement];
738 [label="131_ uint transferValue_intou37 = 10;\n738-new_variable-132-132", method="withdraw_intou37()", type_label=new_variable];
744 [label="132_ msg.sender.transfer(transferValue_intou37);\n744-expression_statement-133-133", method="withdraw_intou37()", type_label=expression_statement];
753 [label="134_ mapping(uint256=>orders) public Order;\n753-new_variable-135-135", method="", type_label=new_variable];
761 [label="135_ function bug_intou3() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n761-function_definition-136-139", method="bug_intou3()", type_label=function_definition];
765 [label="136_ uint8 vundflw =0;\n765-new_variable-137-137", method="bug_intou3()", type_label=new_variable];
771 [label="137_ vundflw = vundflw -10;\n771-expression_statement-138-138", method="bug_intou3()", type_label=expression_statement];
777 [label="139_ mapping(address=>mapping(address=>uint256))public userDetails;\n777-new_variable-140-140", method="", type_label=new_variable];
786 [label="140_ mapping(address => uint) public lockTime_intou9;\n786-new_variable-141-141", method="", type_label=new_variable];
793 [label="141_ function increaseLockTime_intou9(uint _secondsToIncrease) public {\n        lockTime_intou9[msg.sender] += _secondsToIncrease;   \n    }\n793-function_definition-142-144", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=function_definition];
801 [label="142_ lockTime_intou9[msg.sender] += _secondsToIncrease;\n801-expression_statement-143-143", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=expression_statement];
809 [label="144_ function withdraw_intou9() public {\n        require(now > lockTime_intou9[msg.sender]);    \n        uint transferValue_intou9 = 10;           \n        msg.sender.transfer(transferValue_intou9);\n    }\n809-function_definition-145-149", method="withdraw_intou9()", type_label=function_definition];
813 [label="145_ require(now > lockTime_intou9[msg.sender]);\n813-expression_statement-146-146", method="withdraw_intou9()", type_label=expression_statement];
824 [label="146_ uint transferValue_intou9 = 10;\n824-new_variable-147-147", method="withdraw_intou9()", type_label=new_variable];
830 [label="147_ msg.sender.transfer(transferValue_intou9);\n830-expression_statement-148-148", method="withdraw_intou9()", type_label=expression_statement];
839 [label="149_ mapping(address=>mapping(address=>uint256))public feeAmount;\n839-new_variable-150-150", method="", type_label=new_variable];
848 [label="150_ mapping(address => uint) public lockTime_intou25;\n848-new_variable-151-151", method="", type_label=new_variable];
855 [label="151_ function increaseLockTime_intou25(uint _secondsToIncrease) public {\n        lockTime_intou25[msg.sender] += _secondsToIncrease;   \n    }\n855-function_definition-152-154", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=function_definition];
863 [label="152_ lockTime_intou25[msg.sender] += _secondsToIncrease;\n863-expression_statement-153-153", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=expression_statement];
871 [label="154_ function withdraw_intou25() public {\n        require(now > lockTime_intou25[msg.sender]);    \n        uint transferValue_intou25 = 10;           \n        msg.sender.transfer(transferValue_intou25);\n    }\n871-function_definition-155-159", method="withdraw_intou25()", type_label=function_definition];
875 [label="155_ require(now > lockTime_intou25[msg.sender]);\n875-expression_statement-156-156", method="withdraw_intou25()", type_label=expression_statement];
886 [label="156_ uint transferValue_intou25 = 10;\n886-new_variable-157-157", method="withdraw_intou25()", type_label=new_variable];
892 [label="157_ msg.sender.transfer(transferValue_intou25);\n892-expression_statement-158-158", method="withdraw_intou25()", type_label=expression_statement];
901 [label="159_ mapping(address=>uint256) public withdrawfee;\n901-new_variable-160-160", method="", type_label=new_variable];
908 [label="160_ function bug_intou19() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n908-function_definition-161-164", method="bug_intou19()", type_label=function_definition];
912 [label="161_ uint8 vundflw =0;\n912-new_variable-162-162", method="bug_intou19()", type_label=new_variable];
918 [label="162_ vundflw = vundflw -10;\n918-expression_statement-163-163", method="bug_intou19()", type_label=expression_statement];
924 [label="164_ mapping(uint256=>mapping(uint256=>bool)) public orderPairStatus;\n924-new_variable-165-165", method="", type_label=new_variable];
933 [label="165_ mapping(address => uint) balances_intou26;\n933-new_variable-166-166", method="", type_label=new_variable];
939 [label="166_ function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] - _value >= 0);   \n    balances_intou26[msg.sender] -= _value;   \n    balances_intou26[_to] += _value;   \n    return true;\n  }\n939-function_definition-167-172", method="transfer_intou26(address _to,uint _value)", type_label=function_definition];
955 [label="167_ require(balances_intou26[msg.sender] - _value >= 0);\n955-expression_statement-168-168", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
968 [label="168_ balances_intou26[msg.sender] -= _value;\n968-expression_statement-169-169", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
976 [label="169_ balances_intou26[_to] += _value;\n976-expression_statement-170-170", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
982 [label="170_ return true;\n982-return-171-171", method="transfer_intou26(address _to,uint _value)", type_label=return];
985 [label="172_ mapping(address=>tokens) public tokendetails;\n985-new_variable-173-173", method="", type_label=new_variable];
993 [label="173_ modifier dexstatuscheck(){\n       require(dexStatus==true);\n       _;\n    }\n993-expression_statement-174-177", method="", type_label=expression_statement];
996 [label="174_ require(dexStatus==true);\n996-expression_statement-175-175", method="", type_label=expression_statement];
1004 [label="175_ _;\n1004-expression_statement-176-176", method="", type_label=expression_statement];
1006 [label="177_ function setDexStatus(bool status_) public returns(bool){\n        require(msg.sender == admin);\n        dexStatus = status_;\n        return true;\n    }\n1006-function_definition-178-182", method="setDexStatus(bool status_)", type_label=function_definition];
1018 [label="178_ require(msg.sender == admin);\n1018-expression_statement-179-179", method="setDexStatus(bool status_)", type_label=expression_statement];
1027 [label="179_ dexStatus = status_;\n1027-expression_statement-180-180", method="setDexStatus(bool status_)", type_label=expression_statement];
1031 [label="180_ return true;\n1031-return-181-181", method="setDexStatus(bool status_)", type_label=return];
1034 [label="182_ function bug_intou23() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1034-function_definition-183-186", method="bug_intou23()", type_label=function_definition];
1038 [label="183_ uint8 vundflw =0;\n1038-new_variable-184-184", method="bug_intou23()", type_label=new_variable];
1044 [label="184_ vundflw = vundflw -10;\n1044-expression_statement-185-185", method="bug_intou23()", type_label=expression_statement];
1050 [label="186_ function addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_) public returns(bool){\n        require(msg.sender == feeAddress && tokendetails[tokenAddress].status==false);\n        tokendetails[tokenAddress].tokenSymbol=tokenSymbol;\n        tokendetails[tokenAddress].decimals=decimal_;\n        tokendetails[tokenAddress].status=true;\n        return true;\n    }\n1050-function_definition-187-193", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=function_definition];
1070 [label="187_ require(msg.sender == feeAddress && tokendetails[tokenAddress].status==false);\n1070-expression_statement-188-188", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
1088 [label="188_ tokendetails[tokenAddress].tokenSymbol=tokenSymbol;\n1088-expression_statement-189-189", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
1096 [label="189_ tokendetails[tokenAddress].decimals=decimal_;\n1096-expression_statement-190-190", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
1104 [label="190_ tokendetails[tokenAddress].status=true;\n1104-expression_statement-191-191", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
1113 [label="191_ return true;\n1113-return-192-192", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=return];
1116 [label="193_ mapping(address => uint) balances_intou14;\n1116-new_variable-194-194", method="", type_label=new_variable];
1122 [label="194_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n1122-function_definition-195-200", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
1138 [label="195_ require(balances_intou14[msg.sender] - _value >= 0);\n1138-expression_statement-196-196", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1151 [label="196_ balances_intou14[msg.sender] -= _value;\n1151-expression_statement-197-197", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1159 [label="197_ balances_intou14[_to] += _value;\n1159-expression_statement-198-198", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1165 [label="198_ return true;\n1165-return-199-199", method="transfer_intou14(address _to,uint _value)", type_label=return];
1168 [label="200_ function deposit() dexstatuscheck public payable returns(bool) {\n        require(msg.value > 0);\n        userDetails[msg.sender][address(0)]=userDetails[msg.sender][address(0)].add(msg.value);\n        emit DepositandWithdraw( msg.sender, address(0),msg.value,0);\n        return true;\n    }\n1168-function_definition-201-206", method="deposit()", type_label=function_definition];
1170 [label="200_ dexstatuscheck\n1170-expression_statement-201-201", method="deposit()", type_label=expression_statement];
1179 [label="201_ require(msg.value > 0);\n1179-expression_statement-202-202", method="deposit()", type_label=expression_statement];
1188 [label="202_ userDetails[msg.sender][address(0)]=userDetails[msg.sender][address(0)].add(msg.value);\n1188-expression_statement-203-203", method="deposit()", type_label=expression_statement];
1231 [label="204_ return true;\n1231-return-205-205", method="deposit()", type_label=return];
1234 [label="206_ mapping(address => uint) balances_intou30;\n1234-new_variable-207-207", method="", type_label=new_variable];
1240 [label="207_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n1240-function_definition-208-213", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
1256 [label="208_ require(balances_intou30[msg.sender] - _value >= 0);\n1256-expression_statement-209-209", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1269 [label="209_ balances_intou30[msg.sender] -= _value;\n1269-expression_statement-210-210", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1277 [label="210_ balances_intou30[_to] += _value;\n1277-expression_statement-211-211", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1283 [label="211_ return true;\n1283-return-212-212", method="transfer_intou30(address _to,uint _value)", type_label=return];
1286 [label="213_ function tokenDeposit(address tokenaddr,uint256 tokenAmount) dexstatuscheck public returns(bool)\n    {\n        require(tokenAmount > 0 && tokendetails[tokenaddr].status==true);\n        require(tokenallowance(tokenaddr,msg.sender) > 0);\n        userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].add(tokenAmount);\n        Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);\n        emit DepositandWithdraw( msg.sender,tokenaddr,tokenAmount,0);\n        return true;\n    }\n1286-function_definition-214-222", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=function_definition];
1296 [label="213_ dexstatuscheck\n1296-expression_statement-214-214", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1304 [label="215_ require(tokenAmount > 0 && tokendetails[tokenaddr].status==true);\n1304-expression_statement-216-216", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1320 [label="216_ require(tokenallowance(tokenaddr,msg.sender) > 0);\n1320-expression_statement-217-217", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1334 [label="217_ userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].add(tokenAmount);\n1334-expression_statement-218-218", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1355 [label="218_ Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);\n1355-expression_statement-219-219", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1385 [label="220_ return true;\n1385-return-221-221", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=return];
1388 [label="222_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n1388-function_definition-223-226", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
1396 [label="223_ uint8 vundflw1=0;\n1396-new_variable-224-224", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
1402 [label="224_ vundflw1 = vundflw1 + p_intou8;\n1402-expression_statement-225-225", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
1408 [label="226_ function withdraw(uint8 type_,address tokenaddr,uint256 amount) dexstatuscheck public returns(bool) {\n        require(type_ ==0 || type_ == 1);\n         if(type_==0){  \n         require(tokenaddr == address(0));\n         require(amount>0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)]<amount);\n         require(amount<=address(this).balance);\n                msg.sender.transfer(amount.sub(withdrawfee[address(0)]));    \n                userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount);\n                feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]);\n        }\n        else{  \n        require(tokenaddr != address(0) && tokendetails[tokenaddr].status==true);\n        require(amount>0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr]<amount);\n              Token(tokenaddr).transfer(msg.sender, (amount.sub(withdrawfee[tokenaddr])));\n              userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount);\n              feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]);\n        }\n        emit DepositandWithdraw( msg.sender,tokenaddr,amount,1);\n        return true;\n    }\n1408-function_definition-227-246", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=function_definition];
1422 [label="226_ dexstatuscheck\n1422-expression_statement-227-227", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1430 [label="227_ require(type_ ==0 || type_ == 1);\n1430-expression_statement-228-228", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1441 [label="228_ if_type_==0\n1441-if-229-243", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=if];
4756 [label="228_ end_if", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=end_if];
1446 [label="229_ require(tokenaddr == address(0));\n1446-expression_statement-230-230", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1455 [label="230_ require(amount>0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)]<amount);\n1455-expression_statement-231-231", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1482 [label="231_ require(amount<=address(this).balance);\n1482-expression_statement-232-232", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1493 [label="232_ msg.sender.transfer(amount.sub(withdrawfee[address(0)]));\n1493-expression_statement-233-233", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1511 [label="233_ userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount);\n1511-expression_statement-234-234", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1536 [label="234_ feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]);\n1536-expression_statement-235-235", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1562 [label="237_ require(tokenaddr != address(0) && tokendetails[tokenaddr].status==true);\n1562-expression_statement-238-238", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1580 [label="238_ require(amount>0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr]<amount);\n1580-expression_statement-239-239", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1603 [label="239_ Token(tokenaddr).transfer(msg.sender, (amount.sub(withdrawfee[tokenaddr])));\n1603-expression_statement-240-240", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1625 [label="240_ userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount);\n1625-expression_statement-241-241", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1646 [label="241_ feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]);\n1646-expression_statement-242-242", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1677 [label="244_ return true;\n1677-return-245-245", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=return];
1680 [label="246_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1680-function_definition-247-250", method="bug_intou39()", type_label=function_definition];
1684 [label="247_ uint8 vundflw =0;\n1684-new_variable-248-248", method="bug_intou39()", type_label=new_variable];
1690 [label="248_ vundflw = vundflw -10;\n1690-expression_statement-249-249", method="bug_intou39()", type_label=expression_statement];
1696 [label="250_ function adminProfitWithdraw(uint8 type_,address tokenAddr)public returns(bool){  \n       require(msg.sender == admin);\n       require(type_ ==0 || type_ == 1);\n         if(type_==0){  \n            admin.transfer(feeAmount[admin][address(0)]);\n            feeAmount[admin][address(0)]=0;\n        }\n        else{  \n            require(tokenAddr != address(0)) ;\n            Token(tokenAddr).transfer(admin, feeAmount[admin][tokenAddr]);\n            feeAmount[admin][tokenAddr]=0;\n        }\n            return true;\n        }\n1696-function_definition-251-264", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=function_definition];
1712 [label="251_ require(msg.sender == admin);\n1712-expression_statement-252-252", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1721 [label="252_ require(type_ ==0 || type_ == 1);\n1721-expression_statement-253-253", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1732 [label="253_ if_type_==0\n1732-if-254-262", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=if];
5047 [label="253_ end_if", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=end_if];
1737 [label="254_ admin.transfer(feeAmount[admin][address(0)]);\n1737-expression_statement-255-255", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1750 [label="255_ feeAmount[admin][address(0)]=0;\n1750-expression_statement-256-256", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1761 [label="258_ require(tokenAddr != address(0)) ;\n1761-expression_statement-259-259", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1770 [label="259_ Token(tokenAddr).transfer(admin, feeAmount[admin][tokenAddr]);\n1770-expression_statement-260-260", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1786 [label="260_ feeAmount[admin][tokenAddr]=0;\n1786-expression_statement-261-261", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1794 [label="262_ return true;\n1794-return-263-263", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=return];
1797 [label="264_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n1797-function_definition-265-268", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
1805 [label="265_ uint8 vundflw1=0;\n1805-new_variable-266-266", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
1811 [label="266_ vundflw1 = vundflw1 + p_intou36;\n1811-expression_statement-267-267", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
1817 [label="268_ function setwithdrawfee(address[] memory addr,uint256[] memory feeamount)public returns(bool)\n        {\n          require(msg.sender==admin);\n          require(addr.length <10 && feeamount.length < 10 && addr.length==feeamount.length);\n          for(uint8 i=0;i<addr.length;i++){\n            withdrawfee[addr[i]]=feeamount[i];    \n          }\n           return true;\n        }\n1817-function_definition-269-277", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=function_definition];
1835 [label="270_ require(msg.sender==admin);\n1835-expression_statement-271-271", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1844 [label="271_ require(addr.length <10 && feeamount.length < 10 && addr.length==feeamount.length);\n1844-expression_statement-272-272", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1867 [label="272_ for(i<addr.length;;i++)\n1867-for-273-275", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=for];
5182 [label="272_ end_loop", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=end_loop];
1880 [label="272_ i++\n1880-expression_statement-273-273", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1883 [label="273_ withdrawfee[addr[i]]=feeamount[i];\n1883-expression_statement-274-274", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1893 [label="275_ return true;\n1893-return-276-276", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=return];
1896 [label="277_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1896-function_definition-278-281", method="bug_intou35()", type_label=function_definition];
1900 [label="278_ uint8 vundflw =0;\n1900-new_variable-279-279", method="bug_intou35()", type_label=new_variable];
1906 [label="279_ vundflw = vundflw -10;\n1906-expression_statement-280-280", method="bug_intou35()", type_label=expression_statement];
1912 [label="281_ function verify(string memory  message, uint8 v, bytes32 r, bytes32 s) private pure returns (address signer) {\n        string memory header = \"\x19Ethereum Signed Message:\n000000\";\n        uint256 lengthOffset;\n        uint256 length;\n        assembly {\n            length := mload(message)\n            lengthOffset := add(header, 57)\n        }\n        require(length <= 999999);\n        uint256 lengthLength = 0;\n        uint256 divisor = 100000; \n        while (divisor != 0) {\n            uint256 digit = length.div(divisor);\n            if (digit == 0) {\n                if (lengthLength == 0) {\n                      divisor = divisor.div(10);\n                      continue;\n                    }\n            }\n            lengthLength++;\n            length = length.sub(digit.mul(divisor));\n            divisor = divisor.div(10);\n            digit = digit.add(0x30);\n            lengthOffset++;\n            assembly {\n                mstore8(lengthOffset, digit)\n            }\n        }  \n        if (lengthLength == 0) {\n            lengthLength = 1 + 0x19 + 1;\n        } else {\n            lengthLength = lengthLength.add(1 + 0x19);\n        }\n        assembly {\n            mstore(header, lengthLength)\n        }\n        bytes32 check = keccak256(abi.encodePacked(header, message));\n        return ecrecover(check, v, r, s);\n    }\n1912-function_definition-282-320", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
1938 [label="282_ string memory header = \"\x19Ethereum Signed Message:\n000000\";\n1938-new_variable-283-283", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1945 [label="283_ uint256 lengthOffset;\n1945-new_variable-284-284", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1950 [label="284_ uint256 length;\n1950-new_variable-285-285", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1975 [label="289_ require(length <= 999999);\n1975-expression_statement-290-290", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1982 [label="290_ uint256 lengthLength = 0;\n1982-new_variable-291-291", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1988 [label="291_ uint256 divisor = 100000;\n1988-new_variable-292-292", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1994 [label="292_ while\n1994-while-293-309", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=while];
5309 [label="292_ end_loop", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_loop];
1999 [label="293_ uint256 digit = length.div(divisor);\n1999-new_variable-294-294", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2010 [label="294_ if_digit == 0\n2010-if-295-300", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5325 [label="294_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2015 [label="295_ if_lengthLength == 0\n2015-if-296-299", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5330 [label="295_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2020 [label="296_ divisor = divisor.div(10);\n2020-expression_statement-297-297", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2029 [label="297_ continue;\n2029-expression_statement-298-298", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2030 [label="300_ lengthLength++;\n2030-expression_statement-301-301", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2031 [label="300_ lengthLength++\n2031-expression_statement-301-301", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2033 [label="301_ length = length.sub(digit.mul(divisor));\n2033-expression_statement-302-302", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2047 [label="302_ divisor = divisor.div(10);\n2047-expression_statement-303-303", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2056 [label="303_ digit = digit.add(0x30);\n2056-expression_statement-304-304", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2065 [label="304_ lengthOffset++;\n2065-expression_statement-305-305", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2066 [label="304_ lengthOffset++\n2066-expression_statement-305-305", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2077 [label="309_ if_lengthLength == 0\n2077-if-310-314", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5392 [label="309_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2082 [label="310_ lengthLength = 1 + 0x19 + 1;\n2082-expression_statement-311-311", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2091 [label="312_ lengthLength = lengthLength.add(1 + 0x19);\n2091-expression_statement-313-313", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2111 [label="317_ bytes32 check = keccak256(abi.encodePacked(header, message));\n2111-new_variable-318-318", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2127 [label="318_ return ecrecover(check, v, r, s);\n2127-return-319-319", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2138 [label="320_ function makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s) dexstatuscheck public returns(bool){\n      require(msg.sender == feeAddress);\n       require(verify((message),v,r,s)==traderAddresses[1]);\n      uint256 amount__;\n        uint256 orderiD = tradeDetails[0];\n        if(Order[orderiD].status==0){    \n            if(tradeDetails[6] == 0){\n                amount__ = tradeDetails[3];\n            }\n            else if(tradeDetails[6] ==1){\n                amount__ = tradeDetails[1];\n            }\n            require(amount__ > 0 && amount__ <= userDetails[traderAddresses[1]][traderAddresses[0]]);\n                Order[orderiD].userAddress = traderAddresses[1];\n                Order[orderiD].type_ = tradeDetails[6];\n                Order[orderiD].price = tradeDetails[2];\n                Order[orderiD].amount  = tradeDetails[1];\n                Order[orderiD].total  = tradeDetails[3];\n                Order[orderiD].tradeTotal  = tradeDetails[3];\n                Order[orderiD]._decimal  = tradeDetails[7];\n                Order[orderiD].tokenAddress = traderAddresses[0];       \n                userDetails[traderAddresses[1]][traderAddresses[0]]=userDetails[traderAddresses[1]][traderAddresses[0]].sub(amount__);\n                Order[orderiD].tradeAmount=tradeDetails[1];\n                Order[orderiD].status=1;\n        }\n        else if(Order[orderiD].status==1 && tradeDetails[8]==0){  \n            cancelOrder(orderiD);\n        }\n        if(Order[orderiD].status==1 && tradeDetails[1] > 0 && tradeDetails[8]>0 && Order[tradeDetails[8]].status==1 && tradeDetails[3]>0){  \n                Order[orderiD].tradeAmount =Order[orderiD].tradeAmount.sub(tradeDetails[1]);\n                Order[tradeDetails[8]].tradeAmount =Order[tradeDetails[8]].tradeAmount.sub(tradeDetails[1]);\n                if(tradeDetails[2]>0){\n                    userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[2]);\n                }\n                Order[orderiD].tradeTotal =Order[orderiD].tradeTotal.sub(((tradeDetails[1].mul(Order[orderiD].price)).div(Order[orderiD]._decimal)));\n                Order[tradeDetails[8]].tradeTotal =Order[tradeDetails[8]].tradeTotal.sub(((tradeDetails[1].mul(Order[tradeDetails[8]].price)).div(Order[tradeDetails[8]]._decimal)));\n                    if(tradeDetails[6] == 1 || tradeDetails[6]==3)\n                    {\n                        userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1]);\n                        userDetails[Order[orderiD].userAddress][traderAddresses[0]]= userDetails[Order[orderiD].userAddress][traderAddresses[0]].sub(tradeDetails[4]);    \n                        feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[4]);\n                    }\n                    else\n                    {\n                         userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1].sub(tradeDetails[4]));\n                            feeAmount[admin][Order[tradeDetails[8]].tokenAddress]= feeAmount[admin][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[4]);\n                    }\n                    if(tradeDetails[6] == 2 || tradeDetails[6]==3)\n                    {\n                        userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3]);\n                        userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]]= userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]].sub(tradeDetails[5]);\n                        feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[5]);\n                    }\n                    else\n                    {\n                         userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3].sub(tradeDetails[5]));\n                         feeAmount[admin][Order[orderiD].tokenAddress]= feeAmount[admin][Order[orderiD].tokenAddress].add(tradeDetails[5]);\n                    }\n                if(Order[tradeDetails[8]].tradeAmount==0){\n                    Order[tradeDetails[8]].status=2;    \n                }\n                if(Order[orderiD].tradeAmount==0){\n                    Order[orderiD].status=2;    \n                }\n                orderPairStatus[orderiD][tradeDetails[8]] = true;\n            }\n        return true; \n    }\n2138-function_definition-321-388", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=function_definition];
2168 [label="320_ dexstatuscheck\n2168-expression_statement-321-321", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2176 [label="321_ require(msg.sender == feeAddress);\n2176-expression_statement-322-322", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2185 [label="322_ require(verify((message),v,r,s)==traderAddresses[1]);\n2185-expression_statement-323-323", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2204 [label="323_ uint256 amount__;\n2204-new_variable-324-324", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=new_variable];
2209 [label="324_ uint256 orderiD = tradeDetails[0];\n2209-new_variable-325-325", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=new_variable];
2217 [label="325_ if_Order[orderiD].status==0\n2217-if-326-348", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5532 [label="325_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2226 [label="326_ if_tradeDetails[6] == 0\n2226-if-327-332", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5541 [label="326_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2233 [label="327_ amount__ = tradeDetails[3];\n2233-expression_statement-328-328", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2239 [label="329_ if_tradeDetails[6] ==1\n2239-if-330-332", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
2246 [label="330_ amount__ = tradeDetails[1];\n2246-expression_statement-331-331", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2252 [label="332_ require(amount__ > 0 && amount__ <= userDetails[traderAddresses[1]][traderAddresses[0]]);\n2252-expression_statement-333-333", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2271 [label="333_ Order[orderiD].userAddress = traderAddresses[1];\n2271-expression_statement-334-334", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2281 [label="334_ Order[orderiD].type_ = tradeDetails[6];\n2281-expression_statement-335-335", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2291 [label="335_ Order[orderiD].price = tradeDetails[2];\n2291-expression_statement-336-336", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2301 [label="336_ Order[orderiD].amount  = tradeDetails[1];\n2301-expression_statement-337-337", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2311 [label="337_ Order[orderiD].total  = tradeDetails[3];\n2311-expression_statement-338-338", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2321 [label="338_ Order[orderiD].tradeTotal  = tradeDetails[3];\n2321-expression_statement-339-339", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2331 [label="339_ Order[orderiD]._decimal  = tradeDetails[7];\n2331-expression_statement-340-340", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2341 [label="340_ Order[orderiD].tokenAddress = traderAddresses[0];\n2341-expression_statement-341-341", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2351 [label="341_ userDetails[traderAddresses[1]][traderAddresses[0]]=userDetails[traderAddresses[1]][traderAddresses[0]].sub(amount__);\n2351-expression_statement-342-342", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2376 [label="342_ Order[orderiD].tradeAmount=tradeDetails[1];\n2376-expression_statement-343-343", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2386 [label="343_ Order[orderiD].status=1;\n2386-expression_statement-344-344", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2394 [label="345_ if_Order[orderiD].status==1 && tradeDetails[8]==0\n2394-if-346-348", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
2409 [label="346_ cancelOrder(orderiD);\n2409-expression_statement-347-347", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2414 [label="348_ if_Order[orderiD].status==1 && tradeDetails[1] > 0 && tradeDetails[8]>0 && Order[tradeDetails[8]].status==1 && tradeDetails[3]>0\n2414-if-349-386", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5729 [label="348_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2451 [label="349_ Order[orderiD].tradeAmount =Order[orderiD].tradeAmount.sub(tradeDetails[1]);\n2451-expression_statement-350-350", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2470 [label="350_ Order[tradeDetails[8]].tradeAmount =Order[tradeDetails[8]].tradeAmount.sub(tradeDetails[1]);\n2470-expression_statement-351-351", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2493 [label="351_ if_tradeDetails[2]>0\n2493-if-352-354", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5808 [label="351_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2500 [label="352_ userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[2]);\n2500-expression_statement-353-353", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2535 [label="354_ Order[orderiD].tradeTotal =Order[orderiD].tradeTotal.sub(((tradeDetails[1].mul(Order[orderiD].price)).div(Order[orderiD]._decimal)));\n2535-expression_statement-355-355", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2574 [label="355_ Order[tradeDetails[8]].tradeTotal =Order[tradeDetails[8]].tradeTotal.sub(((tradeDetails[1].mul(Order[tradeDetails[8]].price)).div(Order[tradeDetails[8]]._decimal)));\n2574-expression_statement-356-356", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2621 [label="356_ if_tradeDetails[6] == 1 || tradeDetails[6]==3\n2621-if-357-367", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5936 [label="356_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2634 [label="358_ userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1]);\n2634-expression_statement-359-359", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2673 [label="359_ userDetails[Order[orderiD].userAddress][traderAddresses[0]]= userDetails[Order[orderiD].userAddress][traderAddresses[0]].sub(tradeDetails[4]);\n2673-expression_statement-360-360", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2704 [label="360_ feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[4]);\n2704-expression_statement-361-361", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2728 [label="364_ userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1].sub(tradeDetails[4]));\n2728-expression_statement-365-365", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2774 [label="365_ feeAmount[admin][Order[tradeDetails[8]].tokenAddress]= feeAmount[admin][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[4]);\n2774-expression_statement-366-366", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2805 [label="367_ if_tradeDetails[6] == 2 || tradeDetails[6]==3\n2805-if-368-378", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
6120 [label="367_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2818 [label="369_ userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3]);\n2818-expression_statement-370-370", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2857 [label="370_ userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]]= userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]].sub(tradeDetails[5]);\n2857-expression_statement-371-371", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2892 [label="371_ feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[5]);\n2892-expression_statement-372-372", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2916 [label="375_ userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3].sub(tradeDetails[5]));\n2916-expression_statement-376-376", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2962 [label="376_ feeAmount[admin][Order[orderiD].tokenAddress]= feeAmount[admin][Order[orderiD].tokenAddress].add(tradeDetails[5]);\n2962-expression_statement-377-377", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2989 [label="378_ if_Order[tradeDetails[8]].tradeAmount==0\n2989-if-379-381", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
6304 [label="378_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
3000 [label="379_ Order[tradeDetails[8]].status=2;\n3000-expression_statement-380-380", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
3010 [label="381_ if_Order[orderiD].tradeAmount==0\n3010-if-382-384", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
6325 [label="381_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
3019 [label="382_ Order[orderiD].status=2;\n3019-expression_statement-383-383", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
3027 [label="384_ orderPairStatus[orderiD][tradeDetails[8]] = true;\n3027-expression_statement-385-385", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
3038 [label="386_ return true;\n3038-return-387-387", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=return];
3041 [label="388_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n3041-function_definition-389-392", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
3049 [label="389_ uint8 vundflw1=0;\n3049-new_variable-390-390", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
3055 [label="390_ vundflw1 = vundflw1 + p_intou40;\n3055-expression_statement-391-391", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
3061 [label="392_ function cancelOrder(uint256 orderid)internal returns(bool){\n        if(Order[orderid].status==1){\n            if(Order[orderid].type_ == 0){\n            userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeTotal);        \n            }\n            else{\n                userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeAmount);\n            }\n            Order[orderid].status=3;     \n        }\n        return true;\n}\n3061-function_definition-393-404", method="cancelOrder(uint256 orderid)", type_label=function_definition];
3073 [label="393_ if_Order[orderid].status==1\n3073-if-394-402", method="cancelOrder(uint256 orderid)", type_label=if];
6388 [label="393_ end_if", method="cancelOrder(uint256 orderid)", type_label=end_if];
3082 [label="394_ if_Order[orderid].type_ == 0\n3082-if-395-400", method="cancelOrder(uint256 orderid)", type_label=if];
6397 [label="394_ end_if", method="cancelOrder(uint256 orderid)", type_label=end_if];
3091 [label="395_ userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeTotal);\n3091-expression_statement-396-396", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
3129 [label="398_ userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeAmount);\n3129-expression_statement-399-399", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
3166 [label="400_ Order[orderid].status=3;\n3166-expression_statement-401-401", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
3174 [label="402_ return true;\n3174-return-403-403", method="cancelOrder(uint256 orderid)", type_label=return];
3177 [label="404_ mapping(address => uint) public lockTime_intou33;\n3177-new_variable-405-405", method="", type_label=new_variable];
3184 [label="405_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n3184-function_definition-406-408", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
3192 [label="406_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n3192-expression_statement-407-407", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
3200 [label="408_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n3200-function_definition-409-413", method="withdraw_intou33()", type_label=function_definition];
3204 [label="409_ require(now > lockTime_intou33[msg.sender]);\n3204-expression_statement-410-410", method="withdraw_intou33()", type_label=expression_statement];
3215 [label="410_ uint transferValue_intou33 = 10;\n3215-new_variable-411-411", method="withdraw_intou33()", type_label=new_variable];
3221 [label="411_ msg.sender.transfer(transferValue_intou33);\n3221-expression_statement-412-412", method="withdraw_intou33()", type_label=expression_statement];
3230 [label="413_ function viewTokenBalance(address tokenAddr,address baladdr)public view returns(uint256){\n        return Token(tokenAddr).balanceOf(baladdr);\n    }\n3230-function_definition-414-416", method="viewTokenBalance(address tokenAddr,address baladdr)", type_label=function_definition];
3247 [label="414_ return Token(tokenAddr).balanceOf(baladdr);\n3247-return-415-415", method="viewTokenBalance(address tokenAddr,address baladdr)", type_label=return];
3257 [label="416_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n3257-function_definition-417-420", method="bug_intou27()", type_label=function_definition];
3261 [label="417_ uint8 vundflw =0;\n3261-new_variable-418-418", method="bug_intou27()", type_label=new_variable];
3267 [label="418_ vundflw = vundflw -10;\n3267-expression_statement-419-419", method="bug_intou27()", type_label=expression_statement];
3273 [label="420_ function tokenallowance(address tokenAddr,address owner) public view returns(uint256){\n        return Token(tokenAddr).allowance(owner,address(this));\n    }\n3273-function_definition-421-423", method="tokenallowance(address tokenAddr,address owner)", type_label=function_definition];
3290 [label="421_ return Token(tokenAddr).allowance(owner,address(this));\n3290-return-422-422", method="tokenallowance(address tokenAddr,address owner)", type_label=return];
3304 [label="423_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n3304-function_definition-424-427", method="bug_intou31()", type_label=function_definition];
3308 [label="424_ uint8 vundflw =0;\n3308-new_variable-425-425", method="bug_intou31()", type_label=new_variable];
3314 [label="425_ vundflw = vundflw -10;\n3314-expression_statement-426-426", method="bug_intou31()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1665;
2102;
29 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 43  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 83  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
169 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 214  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
209 -> 3524  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3524 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 3524  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
214 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
216 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
224 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
235 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
260 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
262 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
290 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
339 -> 347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
533 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
576 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
591 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
738 -> 744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
777 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
793 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
839 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
908 -> 912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
924 -> 933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
982 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
985 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
996 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 1018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 1031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1034 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 1070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1070 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1104 -> 1113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1113 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1122 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1151 -> 1159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1159 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1168 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1240 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1269 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1277 -> 1283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1286 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 1320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1320 -> 1334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1334 -> 1355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1385 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1388 -> 1396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1396 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1408 -> 1430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1430 -> 1441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1441 -> 1446  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1441 -> 1562  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4756 -> 1665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1446 -> 1455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1455 -> 1482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1482 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1493 -> 1511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1511 -> 1536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1536 -> 4756  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1562 -> 1580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1580 -> 1603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1603 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 1646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1646 -> 4756  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1677 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1680 -> 1684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1684 -> 1690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1696 -> 1712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1712 -> 1721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1721 -> 1732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1732 -> 1737  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1732 -> 1761  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5047 -> 1794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1737 -> 1750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1750 -> 5047  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1761 -> 1770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1770 -> 1786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1786 -> 5047  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1794 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1797 -> 1805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1805 -> 1811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1817 -> 1835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1835 -> 1844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1844 -> 1867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1867 -> 1883  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1867 -> 5182  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5182 -> 1893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1880 -> 1867  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1883 -> 1880  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1893 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1896 -> 1900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1900 -> 1906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1912 -> 1938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1938 -> 1945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1945 -> 1950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1975 -> 1982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1982 -> 1988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1988 -> 1994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1994 -> 1999  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1994 -> 5309  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5309 -> 2077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1999 -> 2010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2010 -> 2015  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2010 -> 5325  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2015 -> 2020  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2015 -> 5330  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2020 -> 2029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2029 -> 1994  [color=red, controlflow_type=jump_next, edge_type=CFG_edge, key=0, label=jump_next];
2030 -> 2033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2033 -> 2047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2047 -> 2056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2056 -> 2065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2077 -> 2082  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2077 -> 2091  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5392 -> 2102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2082 -> 5392  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2091 -> 5392  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2111 -> 2127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2127 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2138 -> 2176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2176 -> 2185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2185 -> 2204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2204 -> 2209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2209 -> 2217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2217 -> 2226  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2217 -> 2394  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5532 -> 2414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2226 -> 2233  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2226 -> 2239  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5541 -> 2252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2233 -> 5541  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2239 -> 2246  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2239 -> 5541  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2246 -> 5541  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2252 -> 2271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2271 -> 2281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2281 -> 2291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2291 -> 2301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2301 -> 2311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2311 -> 2321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2321 -> 2331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2331 -> 2341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2341 -> 2351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2351 -> 2376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2376 -> 2386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2386 -> 5532  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2394 -> 2409  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2394 -> 5532  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2409 -> 5532  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2414 -> 2451  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2414 -> 5729  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5729 -> 3038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2451 -> 2470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2470 -> 2493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2493 -> 2500  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2493 -> 5808  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5808 -> 2535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2500 -> 5808  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2535 -> 2574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2574 -> 2621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2621 -> 2634  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2621 -> 2728  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5936 -> 2805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2634 -> 2673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2673 -> 2704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2704 -> 5936  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2728 -> 2774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2774 -> 5936  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2805 -> 2818  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2805 -> 2916  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6120 -> 2989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2818 -> 2857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2857 -> 2892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2892 -> 6120  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2916 -> 2962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2962 -> 6120  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2989 -> 3000  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2989 -> 6304  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6304 -> 3010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3000 -> 6304  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3010 -> 3019  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3010 -> 6325  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6325 -> 3027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3019 -> 6325  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3027 -> 5729  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3038 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3041 -> 3049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3049 -> 3055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3061 -> 3073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3073 -> 3082  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3073 -> 6388  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6388 -> 3174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3082 -> 3091  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3082 -> 3129  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6397 -> 3166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3091 -> 6397  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3129 -> 6397  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3166 -> 6388  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3174 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3184 -> 3192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3200 -> 3204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3204 -> 3215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3215 -> 3221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3230 -> 3247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3247 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3257 -> 3261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3261 -> 3267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3273 -> 3290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3290 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3304 -> 3308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3308 -> 3314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
