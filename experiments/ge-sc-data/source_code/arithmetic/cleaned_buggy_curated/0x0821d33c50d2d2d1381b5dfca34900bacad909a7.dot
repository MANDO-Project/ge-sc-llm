digraph  {
12 [label="2_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n12-expression_statement-3-6", type_label=expression_statement];
15 [label="3_ require(msg.sender == owner);\n15-expression_statement-4-4", type_label=expression_statement];
24 [label="4_ _;\n24-expression_statement-5-5", type_label=expression_statement];
26 [label="6_ address public owner;\n26-new_variable-7-7", type_label=new_variable];
31 [label="7_ Owned\n31-function_definition-8-8", type_label=function_definition];
35 [label="7_ owner = msg.sender;\n35-expression_statement-8-8", type_label=expression_statement];
41 [label="8_ changeOwner\n41-function_definition-9-11", type_label=function_definition];
48 [label="8_ onlyOwner\n48-expression_statement-9-9", type_label=expression_statement];
51 [label="9_ owner = _newOwner;\n51-expression_statement-10-10", type_label=expression_statement];
61 [label="13_ mapping(address => bool) public callers;\n61-new_variable-14-14", type_label=new_variable];
68 [label="14_ modifier onlyCaller {\n        require(callers[msg.sender]);\n        _;\n    }\n68-expression_statement-15-18", type_label=expression_statement];
71 [label="15_ require(callers[msg.sender]);\n71-expression_statement-16-16", type_label=expression_statement];
80 [label="16_ _;\n80-expression_statement-17-17", type_label=expression_statement];
82 [label="18_ updateCaller\n82-function_definition-19-21", type_label=function_definition];
93 [label="18_ onlyOwner\n93-expression_statement-19-19", type_label=expression_statement];
96 [label="19_ callers[_caller] = allowed;\n96-expression_statement-20-20", type_label=expression_statement];
108 [label="23_ mapping(bytes32 => uint) uIntStorage;\n108-new_variable-24-24", type_label=new_variable];
114 [label="24_ mapping(bytes32 => string) stringStorage;\n114-new_variable-25-25", type_label=new_variable];
120 [label="25_ mapping(bytes32 => address) addressStorage;\n120-new_variable-26-26", type_label=new_variable];
126 [label="26_ mapping(bytes32 => bytes) bytesStorage;\n126-new_variable-27-27", type_label=new_variable];
132 [label="27_ mapping(bytes32 => bool) boolStorage;\n132-new_variable-28-28", type_label=new_variable];
138 [label="28_ mapping(bytes32 => int) intStorage;\n138-new_variable-29-29", type_label=new_variable];
144 [label="29_ getUint\n144-function_definition-30-32", type_label=function_definition];
157 [label="30_ return uIntStorage[_key];\n157-return-31-31", type_label=return];
161 [label="32_ getString\n161-function_definition-33-35", type_label=function_definition];
174 [label="33_ return stringStorage[_key];\n174-return-34-34", type_label=return];
178 [label="35_ getAddress\n178-function_definition-36-38", type_label=function_definition];
191 [label="36_ return addressStorage[_key];\n191-return-37-37", type_label=return];
195 [label="38_ getBytes\n195-function_definition-39-41", type_label=function_definition];
208 [label="39_ return bytesStorage[_key];\n208-return-40-40", type_label=return];
212 [label="41_ getBool\n212-function_definition-42-44", type_label=function_definition];
225 [label="42_ return boolStorage[_key];\n225-return-43-43", type_label=return];
229 [label="44_ getInt\n229-function_definition-45-47", type_label=function_definition];
242 [label="45_ return intStorage[_key];\n242-return-46-46", type_label=return];
246 [label="47_ setUint\n246-function_definition-48-50", type_label=function_definition];
256 [label="47_ onlyCaller\n256-expression_statement-48-48", type_label=expression_statement];
260 [label="48_ uIntStorage[_key] = _value;\n260-expression_statement-49-49", type_label=expression_statement];
266 [label="50_ setString\n266-function_definition-51-53", type_label=function_definition];
276 [label="50_ onlyCaller\n276-expression_statement-51-51", type_label=expression_statement];
280 [label="51_ stringStorage[_key] = _value;\n280-expression_statement-52-52", type_label=expression_statement];
286 [label="53_ setAddress\n286-function_definition-54-56", type_label=function_definition];
296 [label="53_ onlyCaller\n296-expression_statement-54-54", type_label=expression_statement];
300 [label="54_ addressStorage[_key] = _value;\n300-expression_statement-55-55", type_label=expression_statement];
306 [label="56_ setBytes\n306-function_definition-57-59", type_label=function_definition];
316 [label="56_ onlyCaller\n316-expression_statement-57-57", type_label=expression_statement];
320 [label="57_ bytesStorage[_key] = _value;\n320-expression_statement-58-58", type_label=expression_statement];
326 [label="59_ setBool\n326-function_definition-60-62", type_label=function_definition];
336 [label="59_ onlyCaller\n336-expression_statement-60-60", type_label=expression_statement];
340 [label="60_ boolStorage[_key] = _value;\n340-expression_statement-61-61", type_label=expression_statement];
346 [label="62_ setInt\n346-function_definition-63-65", type_label=function_definition];
356 [label="62_ onlyCaller\n356-expression_statement-63-63", type_label=expression_statement];
360 [label="63_ intStorage[_key] = _value;\n360-expression_statement-64-64", type_label=expression_statement];
366 [label="65_ deleteUint\n366-function_definition-66-68", type_label=function_definition];
372 [label="65_ onlyCaller\n372-expression_statement-66-66", type_label=expression_statement];
376 [label="66_ delete uIntStorage[_key];\n376-expression_statement-67-67", type_label=expression_statement];
381 [label="68_ deleteString\n381-function_definition-69-71", type_label=function_definition];
387 [label="68_ onlyCaller\n387-expression_statement-69-69", type_label=expression_statement];
391 [label="69_ delete stringStorage[_key];\n391-expression_statement-70-70", type_label=expression_statement];
396 [label="71_ deleteAddress\n396-function_definition-72-74", type_label=function_definition];
402 [label="71_ onlyCaller\n402-expression_statement-72-72", type_label=expression_statement];
406 [label="72_ delete addressStorage[_key];\n406-expression_statement-73-73", type_label=expression_statement];
411 [label="74_ deleteBytes\n411-function_definition-75-77", type_label=function_definition];
417 [label="74_ onlyCaller\n417-expression_statement-75-75", type_label=expression_statement];
421 [label="75_ delete bytesStorage[_key];\n421-expression_statement-76-76", type_label=expression_statement];
426 [label="77_ deleteBool\n426-function_definition-78-80", type_label=function_definition];
432 [label="77_ onlyCaller\n432-expression_statement-78-78", type_label=expression_statement];
436 [label="78_ delete boolStorage[_key];\n436-expression_statement-79-79", type_label=expression_statement];
441 [label="80_ deleteInt\n441-function_definition-81-83", type_label=function_definition];
447 [label="80_ onlyCaller\n447-expression_statement-81-81", type_label=expression_statement];
451 [label="81_ delete intStorage[_key];\n451-expression_statement-82-82", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
12 -> 26  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
15 -> 24  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 35  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
41 -> 51  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
61 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
71 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 96  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
108 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
126 -> 132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
132 -> 138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
157 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
161 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
178 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
195 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
212 -> 225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
229 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
246 -> 260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
381 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
