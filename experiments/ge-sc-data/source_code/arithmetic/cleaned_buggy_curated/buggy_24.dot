digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n50-function_definition-8-10", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ return sub(a, b, \"SafeMath: subtraction overflow\");\n67-return-9-9", method="sub(uint256 a,uint256 b)", type_label=return];
77 [label="10_ function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n77-function_definition-11-15", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
98 [label="11_ require(b <= a, errorMessage);\n98-expression_statement-12-12", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
107 [label="12_ uint256 c = a - b;\n107-new_variable-13-13", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=new_variable];
115 [label="13_ return c;\n115-return-14-14", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
117 [label="15_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n117-function_definition-16-23", method="mul(uint256 a,uint256 b)", type_label=function_definition];
134 [label="16_ if_a == 0\n134-if-17-19", method="mul(uint256 a,uint256 b)", type_label=if];
5262 [label="16_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
139 [label="17_ return 0;\n139-return-18-18", method="mul(uint256 a,uint256 b)", type_label=return];
141 [label="19_ uint256 c = a * b;\n141-new_variable-20-20", method="mul(uint256 a,uint256 b)", type_label=new_variable];
149 [label="20_ require(c / a == b, \"SafeMath: multiplication overflow\");\n149-expression_statement-21-21", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
161 [label="21_ return c;\n161-return-22-22", method="mul(uint256 a,uint256 b)", type_label=return];
163 [label="23_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n163-function_definition-24-26", method="div(uint256 a,uint256 b)", type_label=function_definition];
180 [label="24_ return div(a, b, \"SafeMath: division by zero\");\n180-return-25-25", method="div(uint256 a,uint256 b)", type_label=return];
190 [label="26_ function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n190-function_definition-27-31", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
211 [label="27_ require(b > 0, errorMessage);\n211-expression_statement-28-28", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
220 [label="28_ uint256 c = a / b;\n220-new_variable-29-29", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=new_variable];
228 [label="29_ return c;\n228-return-30-30", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
230 [label="31_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n230-function_definition-32-34", method="mod(uint256 a,uint256 b)", type_label=function_definition];
247 [label="32_ return mod(a, b, \"SafeMath: modulo by zero\");\n247-return-33-33", method="mod(uint256 a,uint256 b)", type_label=return];
257 [label="34_ function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n257-function_definition-35-38", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
278 [label="35_ require(b != 0, errorMessage);\n278-expression_statement-36-36", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
287 [label="36_ return a % b;\n287-return-37-37", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
303 [label="42_ struct User {\n        uint256 totalInvestCount;\n        uint256 totalInvestAmount;\n        uint256 totalStaticCommissionWithdrawAmount;\n        uint256 totalDynamicCommissionWithdrawAmount;\n        uint256 totalWithdrawAmount;\n        uint256 downlineCount;\n        uint256 nodeCount;\n        uint256 totalDownlineInvestAmount;\n        uint256 currentInvestTime;\n        uint256 currentInvestAmount;\n        uint256 currentInvestCycle;\n        uint256 currentlevel;\n        uint256 currentStaticCommissionRatio;\n        uint256 currentStaticCommissionWithdrawAmount;\n        uint256 staticCommissionBalance;\n        uint256 dynamicCommissionBalance;\n        uint256 calcDynamicCommissionAmount;\n        address sponsorAddress;\n    }\n303-expression_statement-43-62", method="User()", type_label=expression_statement];
377 [label="62_ struct InvestRecord {\n        uint256 time;\n        uint256 amount;\n        uint256 cycle;\n    }\n377-expression_statement-63-67", method="InvestRecord()", type_label=expression_statement];
391 [label="67_ struct CommissionRecord {\n        uint256 time;\n        uint256 amount;\n    }\n391-expression_statement-68-71", method="CommissionRecord()", type_label=expression_statement];
401 [label="71_ uint256 private constant ONE_ETH = 1 ether;\n401-new_variable-72-72", method="", type_label=new_variable];
408 [label="72_ uint256 private constant ONE_DAY = 1 days;\n408-new_variable-73-73", method="", type_label=new_variable];
415 [label="73_ address private constant GENESIS_USER_ADDRESS = 0xe00d13D53Ba180EAD5F4838BD56b15629026A8C9;\n415-new_variable-74-74", method="", type_label=new_variable];
421 [label="74_ address private constant ENGINEER_ADDRESS = 0xddf0bB01f81059CCdB3D5bF5b1C7Bd540aDDFEac;\n421-new_variable-75-75", method="", type_label=new_variable];
427 [label="75_ bool private initialized = false;\n427-new_variable-76-76", method="", type_label=new_variable];
434 [label="76_ address public owner;\n434-new_variable-77-77", method="", type_label=new_variable];
439 [label="77_ uint256 public totalInvestCount;\n439-new_variable-78-78", method="", type_label=new_variable];
444 [label="78_ uint256 public totalInvestAmount;\n444-new_variable-79-79", method="", type_label=new_variable];
449 [label="79_ mapping(address => uint) balances_intou18;\n449-new_variable-80-80", method="", type_label=new_variable];
455 [label="80_ function transfer_intou18(address _to, uint _value) public returns (bool) {\n    require(balances_intou18[msg.sender] - _value >= 0);   \n    balances_intou18[msg.sender] -= _value;   \n    balances_intou18[_to] += _value;   \n    return true;\n  }\n455-function_definition-81-86", method="transfer_intou18(address _to,uint _value)", type_label=function_definition];
471 [label="81_ require(balances_intou18[msg.sender] - _value >= 0);\n471-expression_statement-82-82", method="transfer_intou18(address _to,uint _value)", type_label=expression_statement];
484 [label="82_ balances_intou18[msg.sender] -= _value;\n484-expression_statement-83-83", method="transfer_intou18(address _to,uint _value)", type_label=expression_statement];
492 [label="83_ balances_intou18[_to] += _value;\n492-expression_statement-84-84", method="transfer_intou18(address _to,uint _value)", type_label=expression_statement];
498 [label="84_ return true;\n498-return-85-85", method="transfer_intou18(address _to,uint _value)", type_label=return];
501 [label="86_ uint256 public totalStaticCommissionWithdrawAmount;\n501-new_variable-87-87", method="", type_label=new_variable];
506 [label="87_ mapping(address => uint) public lockTime_intou29;\n506-new_variable-88-88", method="", type_label=new_variable];
513 [label="88_ function increaseLockTime_intou29(uint _secondsToIncrease) public {\n        lockTime_intou29[msg.sender] += _secondsToIncrease;   \n    }\n513-function_definition-89-91", method="increaseLockTime_intou29(uint _secondsToIncrease)", type_label=function_definition];
521 [label="89_ lockTime_intou29[msg.sender] += _secondsToIncrease;\n521-expression_statement-90-90", method="increaseLockTime_intou29(uint _secondsToIncrease)", type_label=expression_statement];
529 [label="91_ function withdraw_intou29() public {\n        require(now > lockTime_intou29[msg.sender]);    \n        uint transferValue_intou29 = 10;           \n        msg.sender.transfer(transferValue_intou29);\n    }\n529-function_definition-92-96", method="withdraw_intou29()", type_label=function_definition];
533 [label="92_ require(now > lockTime_intou29[msg.sender]);\n533-expression_statement-93-93", method="withdraw_intou29()", type_label=expression_statement];
544 [label="93_ uint transferValue_intou29 = 10;\n544-new_variable-94-94", method="withdraw_intou29()", type_label=new_variable];
550 [label="94_ msg.sender.transfer(transferValue_intou29);\n550-expression_statement-95-95", method="withdraw_intou29()", type_label=expression_statement];
559 [label="96_ uint256 public totalDynamicCommissionWithdrawAmount;\n559-new_variable-97-97", method="", type_label=new_variable];
564 [label="97_ mapping(address => uint) balances_intou6;\n564-new_variable-98-98", method="", type_label=new_variable];
570 [label="98_ function transfer_intou62(address _to, uint _value) public returns (bool) {\n    require(balances_intou6[msg.sender] - _value >= 0);   \n    balances_intou6[msg.sender] -= _value;   \n    balances_intou6[_to] += _value;   \n    return true;\n  }\n570-function_definition-99-104", method="transfer_intou62(address _to,uint _value)", type_label=function_definition];
586 [label="99_ require(balances_intou6[msg.sender] - _value >= 0);\n586-expression_statement-100-100", method="transfer_intou62(address _to,uint _value)", type_label=expression_statement];
599 [label="100_ balances_intou6[msg.sender] -= _value;\n599-expression_statement-101-101", method="transfer_intou62(address _to,uint _value)", type_label=expression_statement];
607 [label="101_ balances_intou6[_to] += _value;\n607-expression_statement-102-102", method="transfer_intou62(address _to,uint _value)", type_label=expression_statement];
613 [label="102_ return true;\n613-return-103-103", method="transfer_intou62(address _to,uint _value)", type_label=return];
616 [label="104_ uint256 public totalWithdrawAmount;\n616-new_variable-105-105", method="", type_label=new_variable];
621 [label="105_ function bug_intou16(uint8 p_intou16) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou16;    \n}\n621-function_definition-106-109", method="bug_intou16(uint8 p_intou16)", type_label=function_definition];
629 [label="106_ uint8 vundflw1=0;\n629-new_variable-107-107", method="bug_intou16(uint8 p_intou16)", type_label=new_variable];
635 [label="107_ vundflw1 = vundflw1 + p_intou16;\n635-expression_statement-108-108", method="bug_intou16(uint8 p_intou16)", type_label=expression_statement];
641 [label="109_ uint256 public totalUserCount;\n641-new_variable-110-110", method="", type_label=new_variable];
646 [label="110_ function bug_intou24(uint8 p_intou24) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou24;    \n}\n646-function_definition-111-114", method="bug_intou24(uint8 p_intou24)", type_label=function_definition];
654 [label="111_ uint8 vundflw1=0;\n654-new_variable-112-112", method="bug_intou24(uint8 p_intou24)", type_label=new_variable];
660 [label="112_ vundflw1 = vundflw1 + p_intou24;\n660-expression_statement-113-113", method="bug_intou24(uint8 p_intou24)", type_label=expression_statement];
666 [label="114_ uint256 public engineerFunds;\n666-new_variable-115-115", method="", type_label=new_variable];
671 [label="115_ mapping(address => uint) public lockTime_intou5;\n671-new_variable-116-116", method="", type_label=new_variable];
678 [label="116_ function increaseLockTime_intou5(uint _secondsToIncrease) public {\n        lockTime_intou5[msg.sender] += _secondsToIncrease;   \n    }\n678-function_definition-117-119", method="increaseLockTime_intou5(uint _secondsToIncrease)", type_label=function_definition];
686 [label="117_ lockTime_intou5[msg.sender] += _secondsToIncrease;\n686-expression_statement-118-118", method="increaseLockTime_intou5(uint _secondsToIncrease)", type_label=expression_statement];
694 [label="119_ function withdraw_intou5() public {\n        require(now > lockTime_intou5[msg.sender]);    \n        uint transferValue_intou5 = 10;           \n        msg.sender.transfer(transferValue_intou5);\n    }\n694-function_definition-120-124", method="withdraw_intou5()", type_label=function_definition];
698 [label="120_ require(now > lockTime_intou5[msg.sender]);\n698-expression_statement-121-121", method="withdraw_intou5()", type_label=expression_statement];
709 [label="121_ uint transferValue_intou5 = 10;\n709-new_variable-122-122", method="withdraw_intou5()", type_label=new_variable];
715 [label="122_ msg.sender.transfer(transferValue_intou5);\n715-expression_statement-123-123", method="withdraw_intou5()", type_label=expression_statement];
724 [label="124_ uint256 public engineerWithdrawAmount;\n724-new_variable-125-125", method="", type_label=new_variable];
729 [label="125_ function bug_intou15() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n729-function_definition-126-129", method="bug_intou15()", type_label=function_definition];
733 [label="126_ uint8 vundflw =0;\n733-new_variable-127-127", method="bug_intou15()", type_label=new_variable];
739 [label="127_ vundflw = vundflw -10;\n739-expression_statement-128-128", method="bug_intou15()", type_label=expression_statement];
745 [label="129_ uint256 public operatorFunds;\n745-new_variable-130-130", method="", type_label=new_variable];
750 [label="130_ function bug_intou28(uint8 p_intou28) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou28;    \n}\n750-function_definition-131-134", method="bug_intou28(uint8 p_intou28)", type_label=function_definition];
758 [label="131_ uint8 vundflw1=0;\n758-new_variable-132-132", method="bug_intou28(uint8 p_intou28)", type_label=new_variable];
764 [label="132_ vundflw1 = vundflw1 + p_intou28;\n764-expression_statement-133-133", method="bug_intou28(uint8 p_intou28)", type_label=expression_statement];
770 [label="134_ uint256 public operatorWithdrawAmount;\n770-new_variable-135-135", method="", type_label=new_variable];
775 [label="135_ mapping(address => uint) balances_intou34;\n775-new_variable-136-136", method="", type_label=new_variable];
781 [label="136_ function transfer_intou34(address _to, uint _value) public returns (bool) {\n    require(balances_intou34[msg.sender] - _value >= 0);   \n    balances_intou34[msg.sender] -= _value;   \n    balances_intou34[_to] += _value;   \n    return true;\n  }\n781-function_definition-137-142", method="transfer_intou34(address _to,uint _value)", type_label=function_definition];
797 [label="137_ require(balances_intou34[msg.sender] - _value >= 0);\n797-expression_statement-138-138", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
810 [label="138_ balances_intou34[msg.sender] -= _value;\n810-expression_statement-139-139", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
818 [label="139_ balances_intou34[_to] += _value;\n818-expression_statement-140-140", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
824 [label="140_ return true;\n824-return-141-141", method="transfer_intou34(address _to,uint _value)", type_label=return];
827 [label="142_ mapping (address => User) private userMapping;\n827-new_variable-143-143", method="", type_label=new_variable];
835 [label="143_ mapping(address => uint) public lockTime_intou21;\n835-new_variable-144-144", method="", type_label=new_variable];
842 [label="144_ function increaseLockTime_intou21(uint _secondsToIncrease) public {\n        lockTime_intou21[msg.sender] += _secondsToIncrease;   \n    }\n842-function_definition-145-147", method="increaseLockTime_intou21(uint _secondsToIncrease)", type_label=function_definition];
850 [label="145_ lockTime_intou21[msg.sender] += _secondsToIncrease;\n850-expression_statement-146-146", method="increaseLockTime_intou21(uint _secondsToIncrease)", type_label=expression_statement];
858 [label="147_ function withdraw_intou21() public {\n        require(now > lockTime_intou21[msg.sender]);    \n        uint transferValue_intou21 = 10;           \n        msg.sender.transfer(transferValue_intou21);\n    }\n858-function_definition-148-152", method="withdraw_intou21()", type_label=function_definition];
862 [label="148_ require(now > lockTime_intou21[msg.sender]);\n862-expression_statement-149-149", method="withdraw_intou21()", type_label=expression_statement];
873 [label="149_ uint transferValue_intou21 = 10;\n873-new_variable-150-150", method="withdraw_intou21()", type_label=new_variable];
879 [label="150_ msg.sender.transfer(transferValue_intou21);\n879-expression_statement-151-151", method="withdraw_intou21()", type_label=expression_statement];
888 [label="152_ mapping (uint256 => address) private addressMapping;\n888-new_variable-153-153", method="", type_label=new_variable];
895 [label="153_ mapping(address => uint) balances_intou10;\n895-new_variable-154-154", method="", type_label=new_variable];
901 [label="154_ function transfer_intou10(address _to, uint _value) public returns (bool) {\n    require(balances_intou10[msg.sender] - _value >= 0);   \n    balances_intou10[msg.sender] -= _value;   \n    balances_intou10[_to] += _value;   \n    return true;\n  }\n901-function_definition-155-160", method="transfer_intou10(address _to,uint _value)", type_label=function_definition];
917 [label="155_ require(balances_intou10[msg.sender] - _value >= 0);\n917-expression_statement-156-156", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
930 [label="156_ balances_intou10[msg.sender] -= _value;\n930-expression_statement-157-157", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
938 [label="157_ balances_intou10[_to] += _value;\n938-expression_statement-158-158", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
944 [label="158_ return true;\n944-return-159-159", method="transfer_intou10(address _to,uint _value)", type_label=return];
947 [label="160_ mapping (address => InvestRecord[9]) private investRecordMapping;\n947-new_variable-161-161", method="", type_label=new_variable];
957 [label="161_ mapping(address => uint) balances_intou22;\n957-new_variable-162-162", method="", type_label=new_variable];
963 [label="162_ function transfer_intou22(address _to, uint _value) public returns (bool) {\n    require(balances_intou22[msg.sender] - _value >= 0);   \n    balances_intou22[msg.sender] -= _value;   \n    balances_intou22[_to] += _value;   \n    return true;\n  }\n963-function_definition-163-168", method="transfer_intou22(address _to,uint _value)", type_label=function_definition];
979 [label="163_ require(balances_intou22[msg.sender] - _value >= 0);\n979-expression_statement-164-164", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
992 [label="164_ balances_intou22[msg.sender] -= _value;\n992-expression_statement-165-165", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
1000 [label="165_ balances_intou22[_to] += _value;\n1000-expression_statement-166-166", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
1006 [label="166_ return true;\n1006-return-167-167", method="transfer_intou22(address _to,uint _value)", type_label=return];
1009 [label="168_ mapping (address => CommissionRecord[9]) private staticCommissionRecordMapping;\n1009-new_variable-169-169", method="", type_label=new_variable];
1019 [label="169_ function bug_intou12(uint8 p_intou12) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou12;    \n}\n1019-function_definition-170-173", method="bug_intou12(uint8 p_intou12)", type_label=function_definition];
1027 [label="170_ uint8 vundflw1=0;\n1027-new_variable-171-171", method="bug_intou12(uint8 p_intou12)", type_label=new_variable];
1033 [label="171_ vundflw1 = vundflw1 + p_intou12;\n1033-expression_statement-172-172", method="bug_intou12(uint8 p_intou12)", type_label=expression_statement];
1039 [label="173_ mapping (address => CommissionRecord[9]) private dynamicCommissionRecordMapping;\n1039-new_variable-174-174", method="", type_label=new_variable];
1049 [label="174_ function initialize() public {\n        require(!initialized, \"already initialized\");\n        owner = msg.sender;\n        userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n        initialized = true;\n    }\n1049-function_definition-175-180", method="initialize()", type_label=function_definition];
1053 [label="175_ require(!initialized, \"already initialized\");\n1053-expression_statement-176-176", method="initialize()", type_label=expression_statement];
1062 [label="176_ owner = msg.sender;\n1062-expression_statement-177-177", method="initialize()", type_label=expression_statement];
1068 [label="177_ userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n1068-expression_statement-178-178", method="initialize()", type_label=expression_statement];
1113 [label="178_ initialized = true;\n1113-expression_statement-179-179", method="initialize()", type_label=expression_statement];
1118 [label="180_ function bug_intou11() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1118-function_definition-181-184", method="bug_intou11()", type_label=function_definition];
1122 [label="181_ uint8 vundflw =0;\n1122-new_variable-182-182", method="bug_intou11()", type_label=new_variable];
1128 [label="182_ vundflw = vundflw -10;\n1128-expression_statement-183-183", method="bug_intou11()", type_label=expression_statement];
1136 [label="185_ initialize();\n1136-expression_statement-186-186", method="", type_label=expression_statement];
1139 [label="187_ mapping(address => uint) public lockTime_intou1;\n1139-new_variable-188-188", method="", type_label=new_variable];
1146 [label="188_ function increaseLockTime_intou1(uint _secondsToIncrease) public {\n        lockTime_intou1[msg.sender] += _secondsToIncrease;   \n    }\n1146-function_definition-189-191", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=function_definition];
1154 [label="189_ lockTime_intou1[msg.sender] += _secondsToIncrease;\n1154-expression_statement-190-190", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=expression_statement];
1162 [label="191_ function withdraw_ovrflow1() public {\n        require(now > lockTime_intou1[msg.sender]);    \n        uint transferValue_intou1 = 10;           \n        msg.sender.transfer(transferValue_intou1);\n    }\n1162-function_definition-192-196", method="withdraw_ovrflow1()", type_label=function_definition];
1166 [label="192_ require(now > lockTime_intou1[msg.sender]);\n1166-expression_statement-193-193", method="withdraw_ovrflow1()", type_label=expression_statement];
1177 [label="193_ uint transferValue_intou1 = 10;\n1177-new_variable-194-194", method="withdraw_ovrflow1()", type_label=new_variable];
1183 [label="194_ msg.sender.transfer(transferValue_intou1);\n1183-expression_statement-195-195", method="withdraw_ovrflow1()", type_label=expression_statement];
1192 [label="196_ modifier onlyOwner() {\n        require(msg.sender == owner, \"onlyOwner\");\n        _;\n    }\n1192-expression_statement-197-200", method="", type_label=expression_statement];
1195 [label="197_ require(msg.sender == owner, \"onlyOwner\");\n1195-expression_statement-198-198", method="", type_label=expression_statement];
1207 [label="198_ _;\n1207-expression_statement-199-199", method="", type_label=expression_statement];
1209 [label="200_ modifier onlyEngineer() {\n        require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n        _;\n    }\n1209-expression_statement-201-204", method="", type_label=expression_statement];
1212 [label="201_ require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n1212-expression_statement-202-202", method="", type_label=expression_statement];
1224 [label="202_ _;\n1224-expression_statement-203-203", method="", type_label=expression_statement];
1226 [label="204_ function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n        owner = newOwner;\n    }\n1226-function_definition-205-208", method="transferOwnership(address newOwner)", type_label=function_definition];
1233 [label="204_ onlyOwner\n1233-expression_statement-205-205", method="transferOwnership(address newOwner)", type_label=expression_statement];
1236 [label="205_ require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n1236-expression_statement-206-206", method="transferOwnership(address newOwner)", type_label=expression_statement];
1248 [label="206_ owner = newOwner;\n1248-expression_statement-207-207", method="transferOwnership(address newOwner)", type_label=expression_statement];
1252 [label="208_ mapping(address => uint) balances_intou2;\n1252-new_variable-209-209", method="", type_label=new_variable];
1258 [label="209_ function transfer_undrflow2(address _to, uint _value) public returns (bool) {\n    require(balances_intou2[msg.sender] - _value >= 0);   \n    balances_intou2[msg.sender] -= _value;   \n    balances_intou2[_to] += _value;   \n    return true;\n  }\n1258-function_definition-210-215", method="transfer_undrflow2(address _to,uint _value)", type_label=function_definition];
1274 [label="210_ require(balances_intou2[msg.sender] - _value >= 0);\n1274-expression_statement-211-211", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
1287 [label="211_ balances_intou2[msg.sender] -= _value;\n1287-expression_statement-212-212", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
1295 [label="212_ balances_intou2[_to] += _value;\n1295-expression_statement-213-213", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
1301 [label="213_ return true;\n1301-return-214-214", method="transfer_undrflow2(address _to,uint _value)", type_label=return];
1304 [label="215_ function getLevelByInvestAmount(uint256 investAmount) private pure returns (uint256 level) {\n        if (investAmount >= ONE_ETH.mul(11)) {\n            level = 3;\n        } else if (investAmount >= ONE_ETH.mul(6)) {\n            level = 2;\n        } else {\n            level = 1;\n        }\n    }\n1304-function_definition-216-224", method="getLevelByInvestAmount(uint256 investAmount)", type_label=function_definition];
1318 [label="216_ if\n1318-if-217-223", method="getLevelByInvestAmount(uint256 investAmount)", type_label=if];
6446 [label="216_ end_if", method="getLevelByInvestAmount(uint256 investAmount)", type_label=end_if];
1328 [label="217_ level = 3;\n1328-expression_statement-218-218", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1332 [label="218_ if\n1332-if-219-223", method="getLevelByInvestAmount(uint256 investAmount)", type_label=if];
1342 [label="219_ level = 2;\n1342-expression_statement-220-220", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1347 [label="221_ level = 1;\n1347-expression_statement-222-222", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1351 [label="224_ mapping(address => uint) public lockTime_intou17;\n1351-new_variable-225-225", method="", type_label=new_variable];
1358 [label="225_ function increaseLockTime_intou17(uint _secondsToIncrease) public {\n        lockTime_intou17[msg.sender] += _secondsToIncrease;   \n    }\n1358-function_definition-226-228", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=function_definition];
1366 [label="226_ lockTime_intou17[msg.sender] += _secondsToIncrease;\n1366-expression_statement-227-227", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=expression_statement];
1374 [label="228_ function withdraw_intou17() public {\n        require(now > lockTime_intou17[msg.sender]);    \n        uint transferValue_intou17 = 10;           \n        msg.sender.transfer(transferValue_intou17);\n    }\n1374-function_definition-229-233", method="withdraw_intou17()", type_label=function_definition];
1378 [label="229_ require(now > lockTime_intou17[msg.sender]);\n1378-expression_statement-230-230", method="withdraw_intou17()", type_label=expression_statement];
1389 [label="230_ uint transferValue_intou17 = 10;\n1389-new_variable-231-231", method="withdraw_intou17()", type_label=new_variable];
1395 [label="231_ msg.sender.transfer(transferValue_intou17);\n1395-expression_statement-232-232", method="withdraw_intou17()", type_label=expression_statement];
1404 [label="233_ function isInvestExpired(User memory user) private view returns (bool expired) {\n        expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n    }\n1404-function_definition-234-236", method="isInvestExpired(User memory user)", type_label=function_definition];
1419 [label="234_ expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n1419-expression_statement-235-235", method="isInvestExpired(User memory user)", type_label=expression_statement];
1440 [label="236_ mapping(address => uint) public lockTime_intou37;\n1440-new_variable-237-237", method="", type_label=new_variable];
1447 [label="237_ function increaseLockTime_intou37(uint _secondsToIncrease) public {\n        lockTime_intou37[msg.sender] += _secondsToIncrease;   \n    }\n1447-function_definition-238-240", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=function_definition];
1455 [label="238_ lockTime_intou37[msg.sender] += _secondsToIncrease;\n1455-expression_statement-239-239", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=expression_statement];
1463 [label="240_ function withdraw_intou37() public {\n        require(now > lockTime_intou37[msg.sender]);    \n        uint transferValue_intou37 = 10;           \n        msg.sender.transfer(transferValue_intou37);\n    }\n1463-function_definition-241-245", method="withdraw_intou37()", type_label=function_definition];
1467 [label="241_ require(now > lockTime_intou37[msg.sender]);\n1467-expression_statement-242-242", method="withdraw_intou37()", type_label=expression_statement];
1478 [label="242_ uint transferValue_intou37 = 10;\n1478-new_variable-243-243", method="withdraw_intou37()", type_label=new_variable];
1484 [label="243_ msg.sender.transfer(transferValue_intou37);\n1484-expression_statement-244-244", method="withdraw_intou37()", type_label=expression_statement];
1493 [label="245_ function getAbortInvestAmount(User memory user) private view returns (uint256 amount) {\n        uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n        require(commissionDays >= 3, \"Invest time must >= 3days\");\n        uint256 lossRatio = 15;\n        if (commissionDays >= 60) {\n            lossRatio = 5;\n        } else if (commissionDays >= 30) {\n            lossRatio = 10;\n        }\n        amount = user.currentInvestAmount;\n        amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n    }\n1493-function_definition-246-257", method="getAbortInvestAmount(User memory user)", type_label=function_definition];
1508 [label="246_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n1508-new_variable-247-247", method="getAbortInvestAmount(User memory user)", type_label=new_variable];
1526 [label="247_ require(commissionDays >= 3, \"Invest time must >= 3days\");\n1526-expression_statement-248-248", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1536 [label="248_ uint256 lossRatio = 15;\n1536-new_variable-249-249", method="getAbortInvestAmount(User memory user)", type_label=new_variable];
1542 [label="249_ if_commissionDays >= 60\n1542-if-250-254", method="getAbortInvestAmount(User memory user)", type_label=if];
6670 [label="249_ end_if", method="getAbortInvestAmount(User memory user)", type_label=end_if];
1547 [label="250_ lossRatio = 5;\n1547-expression_statement-251-251", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1551 [label="251_ if_commissionDays >= 30\n1551-if-252-254", method="getAbortInvestAmount(User memory user)", type_label=if];
1556 [label="252_ lossRatio = 10;\n1556-expression_statement-253-253", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1560 [label="254_ amount = user.currentInvestAmount;\n1560-expression_statement-255-255", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1566 [label="255_ amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n1566-expression_statement-256-256", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1587 [label="257_ function bug_intou3() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1587-function_definition-258-261", method="bug_intou3()", type_label=function_definition];
1591 [label="258_ uint8 vundflw =0;\n1591-new_variable-259-259", method="bug_intou3()", type_label=new_variable];
1597 [label="259_ vundflw = vundflw -10;\n1597-expression_statement-260-260", method="bug_intou3()", type_label=expression_statement];
1603 [label="261_ function getStaticCommissionRatio(uint256 level, uint256 investCycle) private pure returns (uint256 ratio) {\n        if (level == 1) {\n            if (investCycle == 30) {\n                ratio = 7;\n            } else if(investCycle == 60) {\n                ratio = 8;\n            } else {\n                ratio = 9;\n            }\n        } else if (level == 2) {\n            if (investCycle == 30) {\n                ratio = 8;\n            } else if(investCycle == 60) {\n                ratio = 9;\n            } else {\n                ratio = 10;\n            }\n        } else {\n            if (investCycle == 30) {\n                ratio = 11;\n            } else if(investCycle == 60) {\n                ratio = 12;\n            } else {\n                ratio = 13;\n            }\n        }\n    }\n1603-function_definition-262-288", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=function_definition];
1621 [label="262_ if_level == 1\n1621-if-263-287", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6749 [label="262_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1626 [label="263_ if_investCycle == 30\n1626-if-264-270", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6754 [label="263_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1631 [label="264_ ratio = 7;\n1631-expression_statement-265-265", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1635 [label="265_ if_investCycle == 60\n1635-if-266-270", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1640 [label="266_ ratio = 8;\n1640-expression_statement-267-267", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1645 [label="268_ ratio = 9;\n1645-expression_statement-269-269", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1649 [label="270_ if_level == 2\n1649-if-271-287", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1654 [label="271_ if_investCycle == 30\n1654-if-272-278", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6782 [label="271_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1659 [label="272_ ratio = 8;\n1659-expression_statement-273-273", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1663 [label="273_ if_investCycle == 60\n1663-if-274-278", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1668 [label="274_ ratio = 9;\n1668-expression_statement-275-275", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1673 [label="276_ ratio = 10;\n1673-expression_statement-277-277", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1678 [label="279_ if_investCycle == 30\n1678-if-280-286", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6806 [label="279_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1683 [label="280_ ratio = 11;\n1683-expression_statement-281-281", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1687 [label="281_ if_investCycle == 60\n1687-if-282-286", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1692 [label="282_ ratio = 12;\n1692-expression_statement-283-283", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1697 [label="284_ ratio = 13;\n1697-expression_statement-285-285", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1701 [label="288_ mapping(address => uint) public lockTime_intou9;\n1701-new_variable-289-289", method="", type_label=new_variable];
1708 [label="289_ function increaseLockTime_intou9(uint _secondsToIncrease) public {\n        lockTime_intou9[msg.sender] += _secondsToIncrease;   \n    }\n1708-function_definition-290-292", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=function_definition];
1716 [label="290_ lockTime_intou9[msg.sender] += _secondsToIncrease;\n1716-expression_statement-291-291", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=expression_statement];
1724 [label="292_ function withdraw_intou9() public {\n        require(now > lockTime_intou9[msg.sender]);    \n        uint transferValue_intou9 = 10;           \n        msg.sender.transfer(transferValue_intou9);\n    }\n1724-function_definition-293-297", method="withdraw_intou9()", type_label=function_definition];
1728 [label="293_ require(now > lockTime_intou9[msg.sender]);\n1728-expression_statement-294-294", method="withdraw_intou9()", type_label=expression_statement];
1739 [label="294_ uint transferValue_intou9 = 10;\n1739-new_variable-295-295", method="withdraw_intou9()", type_label=new_variable];
1745 [label="295_ msg.sender.transfer(transferValue_intou9);\n1745-expression_statement-296-296", method="withdraw_intou9()", type_label=expression_statement];
1754 [label="297_ function getDynamicCommissionRatio(User memory user, uint256 depth) private pure returns (uint256 ratio) {\n        if (user.currentlevel == 1) {\n            if (depth == 1) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else if (user.currentlevel == 2) {\n            if (depth == 1) {\n                ratio = 70;\n            } else if (depth == 2) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else {\n            if (depth == 1) {\n                ratio = 100;\n            } else if (depth == 2) {\n                ratio = 70;\n            } else if (depth == 3) {\n                ratio = 50;\n            } else if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }\n        }\n    }\n1754-function_definition-298-328", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=function_definition];
1773 [label="298_ if_user.currentlevel == 1\n1773-if-299-327", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6901 [label="298_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1780 [label="299_ if_depth == 1\n1780-if-300-304", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6908 [label="299_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1785 [label="300_ ratio = 50;\n1785-expression_statement-301-301", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1790 [label="302_ ratio = 0;\n1790-expression_statement-303-303", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1794 [label="304_ if_user.currentlevel == 2\n1794-if-305-327", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1801 [label="305_ if_depth == 1\n1801-if-306-312", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6929 [label="305_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1806 [label="306_ ratio = 70;\n1806-expression_statement-307-307", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1810 [label="307_ if_depth == 2\n1810-if-308-312", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1815 [label="308_ ratio = 50;\n1815-expression_statement-309-309", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1820 [label="310_ ratio = 0;\n1820-expression_statement-311-311", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1825 [label="313_ if_depth == 1\n1825-if-314-326", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6953 [label="313_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1830 [label="314_ ratio = 100;\n1830-expression_statement-315-315", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1834 [label="315_ if_depth == 2\n1834-if-316-326", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1839 [label="316_ ratio = 70;\n1839-expression_statement-317-317", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1843 [label="317_ if_depth == 3\n1843-if-318-326", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1848 [label="318_ ratio = 50;\n1848-expression_statement-319-319", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1852 [label="319_ if_depth >= 4 && depth <= 10\n1852-if-320-326", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1861 [label="320_ ratio = 10;\n1861-expression_statement-321-321", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1865 [label="321_ if_depth >= 11 && depth <= 20\n1865-if-322-326", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1874 [label="322_ ratio = 5;\n1874-expression_statement-323-323", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1879 [label="324_ ratio = 1;\n1879-expression_statement-325-325", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1883 [label="328_ mapping(address => uint) public lockTime_intou25;\n1883-new_variable-329-329", method="", type_label=new_variable];
1890 [label="329_ function increaseLockTime_intou25(uint _secondsToIncrease) public {\n        lockTime_intou25[msg.sender] += _secondsToIncrease;   \n    }\n1890-function_definition-330-332", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=function_definition];
1898 [label="330_ lockTime_intou25[msg.sender] += _secondsToIncrease;\n1898-expression_statement-331-331", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=expression_statement];
1906 [label="332_ function withdraw_intou25() public {\n        require(now > lockTime_intou25[msg.sender]);    \n        uint transferValue_intou25 = 10;           \n        msg.sender.transfer(transferValue_intou25);\n    }\n1906-function_definition-333-337", method="withdraw_intou25()", type_label=function_definition];
1910 [label="333_ require(now > lockTime_intou25[msg.sender]);\n1910-expression_statement-334-334", method="withdraw_intou25()", type_label=expression_statement];
1921 [label="334_ uint transferValue_intou25 = 10;\n1921-new_variable-335-335", method="withdraw_intou25()", type_label=new_variable];
1927 [label="335_ msg.sender.transfer(transferValue_intou25);\n1927-expression_statement-336-336", method="withdraw_intou25()", type_label=expression_statement];
1936 [label="337_ function getAvaliableStaticCommissionAmount(User memory user) private view returns (uint256 amount) {\n        if (user.currentInvestAmount == 0) {\n            amount = 0;\n        } else {\n            uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n            if (commissionDays > user.currentInvestCycle) {\n                commissionDays = user.currentInvestCycle;\n            }\n            amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n            amount = amount.div(1000);\n            amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n        }\n    }\n1936-function_definition-338-350", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=function_definition];
1951 [label="338_ if_user.currentInvestAmount == 0\n1951-if-339-349", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=if];
7079 [label="338_ end_if", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=end_if];
1958 [label="339_ amount = 0;\n1958-expression_statement-340-340", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1963 [label="341_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n1963-new_variable-342-342", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=new_variable];
1981 [label="342_ if_commissionDays > user.currentInvestCycle\n1981-if-343-345", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=if];
7109 [label="342_ end_if", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=end_if];
1988 [label="343_ commissionDays = user.currentInvestCycle;\n1988-expression_statement-344-344", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1994 [label="345_ amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n1994-expression_statement-346-346", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
2012 [label="346_ amount = amount.div(1000);\n2012-expression_statement-347-347", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
2021 [label="347_ amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n2021-expression_statement-348-348", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
2032 [label="350_ function bug_intou19() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n2032-function_definition-351-354", method="bug_intou19()", type_label=function_definition];
2036 [label="351_ uint8 vundflw =0;\n2036-new_variable-352-352", method="bug_intou19()", type_label=new_variable];
2042 [label="352_ vundflw = vundflw -10;\n2042-expression_statement-353-353", method="bug_intou19()", type_label=expression_statement];
2048 [label="354_ function addInvestRecord(address userAddress, uint256 time, uint256 amount, uint256 cycle) private {\n        InvestRecord[9] storage records = investRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            InvestRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = InvestRecord(time, amount, cycle);\n    }\n2048-function_definition-355-362", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=function_definition];
2068 [label="355_ InvestRecord[9] storage records = investRecordMapping[userAddress];\n2068-new_variable-356-356", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=new_variable];
2079 [label="356_ for(i > 0;;--i)\n2079-for-357-360", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=for];
7207 [label="356_ end_loop", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=end_loop];
2090 [label="356_ --i\n2090-expression_statement-357-357", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
2093 [label="357_ InvestRecord memory prevRecord = records[i - 1];\n2093-new_variable-358-358", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=new_variable];
2104 [label="358_ records[i] = prevRecord;\n2104-expression_statement-359-359", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
2110 [label="360_ records[0] = InvestRecord(time, amount, cycle);\n2110-expression_statement-361-361", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
2123 [label="362_ mapping(address => uint) balances_intou26;\n2123-new_variable-363-363", method="", type_label=new_variable];
2129 [label="363_ function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] - _value >= 0);   \n    balances_intou26[msg.sender] -= _value;   \n    balances_intou26[_to] += _value;   \n    return true;\n  }\n2129-function_definition-364-369", method="transfer_intou26(address _to,uint _value)", type_label=function_definition];
2145 [label="364_ require(balances_intou26[msg.sender] - _value >= 0);\n2145-expression_statement-365-365", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
2158 [label="365_ balances_intou26[msg.sender] -= _value;\n2158-expression_statement-366-366", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
2166 [label="366_ balances_intou26[_to] += _value;\n2166-expression_statement-367-367", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
2172 [label="367_ return true;\n2172-return-368-368", method="transfer_intou26(address _to,uint _value)", type_label=return];
2175 [label="369_ function addStaticCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }\n2175-function_definition-370-377", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=function_definition];
2191 [label="370_ CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n2191-new_variable-371-371", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2202 [label="371_ for(i > 0;;--i)\n2202-for-372-375", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=for];
7330 [label="371_ end_loop", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=end_loop];
2213 [label="371_ --i\n2213-expression_statement-372-372", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2216 [label="372_ CommissionRecord memory prevRecord = records[i - 1];\n2216-new_variable-373-373", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2227 [label="373_ records[i] = prevRecord;\n2227-expression_statement-374-374", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2233 [label="375_ records[0] = CommissionRecord(time, amount);\n2233-expression_statement-376-376", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2244 [label="377_ function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou20;    \n}\n2244-function_definition-378-381", method="bug_intou20(uint8 p_intou20)", type_label=function_definition];
2252 [label="378_ uint8 vundflw1=0;\n2252-new_variable-379-379", method="bug_intou20(uint8 p_intou20)", type_label=new_variable];
2258 [label="379_ vundflw1 = vundflw1 + p_intou20;\n2258-expression_statement-380-380", method="bug_intou20(uint8 p_intou20)", type_label=expression_statement];
2264 [label="381_ function addDynamicCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }\n2264-function_definition-382-389", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=function_definition];
2280 [label="382_ CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n2280-new_variable-383-383", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2291 [label="383_ for(i > 0;;--i)\n2291-for-384-387", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=for];
7419 [label="383_ end_loop", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=end_loop];
2302 [label="383_ --i\n2302-expression_statement-384-384", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2305 [label="384_ CommissionRecord memory prevRecord = records[i - 1];\n2305-new_variable-385-385", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2316 [label="385_ records[i] = prevRecord;\n2316-expression_statement-386-386", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2322 [label="387_ records[0] = CommissionRecord(time, amount);\n2322-expression_statement-388-388", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2333 [label="389_ function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou32;    \n}\n2333-function_definition-390-393", method="bug_intou32(uint8 p_intou32)", type_label=function_definition];
2341 [label="390_ uint8 vundflw1=0;\n2341-new_variable-391-391", method="bug_intou32(uint8 p_intou32)", type_label=new_variable];
2347 [label="391_ vundflw1 = vundflw1 + p_intou32;\n2347-expression_statement-392-392", method="bug_intou32(uint8 p_intou32)", type_label=expression_statement];
2353 [label="393_ function invest(address sponsorAddress, uint256 investCycle) external payable {\n        User storage sponsor = userMapping[sponsorAddress];\n        require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n        require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n        uint256 investAmount = msg.value.div(ONE_ETH);\n        investAmount = investAmount.mul(ONE_ETH);\n        require(investAmount == msg.value, \"Invest amount is not integer\");\n        require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n        User memory user = userMapping[msg.sender];\n        uint256 level = getLevelByInvestAmount(investAmount);\n        if (user.totalInvestCount > 0) {\n            require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n            require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n            require(user.currentInvestTime == 0, \"Invalid state\");\n            require(user.currentInvestCycle == 0, \"Invalid state\");\n            require(user.currentlevel == 0, \"Invalid state\");\n            require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n            require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n            user.totalInvestCount = user.totalInvestCount.add(1);\n            user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n            user.currentInvestTime = now;\n            user.currentInvestAmount = investAmount;\n            user.currentInvestCycle = investCycle;\n            user.currentlevel = level;\n            user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n            userMapping[msg.sender] = user;\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        } else {\n            userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n            addressMapping[totalUserCount] = msg.sender;\n            totalUserCount = totalUserCount.add(1);\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.downlineCount = sponsor.downlineCount.add(1);\n                if (addressWalker == sponsorAddress) {\n                    sponsor.nodeCount = sponsor.nodeCount.add(1);\n                }\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        }\n        addInvestRecord(msg.sender, now, investAmount, investCycle);\n        totalInvestCount = totalInvestCount.add(1);\n        totalInvestAmount = totalInvestAmount.add(investAmount);\n        engineerFunds = engineerFunds.add(investAmount.div(50));\n        operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n    }\n2353-function_definition-394-449", method="invest(address sponsorAddress,uint256 investCycle)", type_label=function_definition];
2366 [label="394_ User storage sponsor = userMapping[sponsorAddress];\n2366-new_variable-395-395", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2375 [label="395_ require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n2375-expression_statement-396-396", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2387 [label="396_ require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n2387-expression_statement-397-397", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2405 [label="397_ uint256 investAmount = msg.value.div(ONE_ETH);\n2405-new_variable-398-398", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2418 [label="398_ investAmount = investAmount.mul(ONE_ETH);\n2418-expression_statement-399-399", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2427 [label="399_ require(investAmount == msg.value, \"Invest amount is not integer\");\n2427-expression_statement-400-400", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2439 [label="400_ require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n2439-expression_statement-401-401", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2463 [label="401_ User memory user = userMapping[msg.sender];\n2463-new_variable-402-402", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2474 [label="402_ uint256 level = getLevelByInvestAmount(investAmount);\n2474-new_variable-403-403", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2483 [label="403_ if_user.totalInvestCount > 0\n2483-if-404-443", method="invest(address sponsorAddress,uint256 investCycle)", type_label=if];
7611 [label="403_ end_if", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_if];
2490 [label="404_ require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n2490-expression_statement-405-405", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2502 [label="405_ require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n2502-expression_statement-406-406", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2514 [label="406_ require(user.currentInvestTime == 0, \"Invalid state\");\n2514-expression_statement-407-407", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2526 [label="407_ require(user.currentInvestCycle == 0, \"Invalid state\");\n2526-expression_statement-408-408", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2538 [label="408_ require(user.currentlevel == 0, \"Invalid state\");\n2538-expression_statement-409-409", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2550 [label="409_ require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n2550-expression_statement-410-410", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2562 [label="410_ require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n2562-expression_statement-411-411", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2574 [label="411_ user.totalInvestCount = user.totalInvestCount.add(1);\n2574-expression_statement-412-412", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2587 [label="412_ user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n2587-expression_statement-413-413", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2600 [label="413_ user.currentInvestTime = now;\n2600-expression_statement-414-414", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2606 [label="414_ user.currentInvestAmount = investAmount;\n2606-expression_statement-415-415", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2612 [label="415_ user.currentInvestCycle = investCycle;\n2612-expression_statement-416-416", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2618 [label="416_ user.currentlevel = level;\n2618-expression_statement-417-417", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2624 [label="417_ user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n2624-expression_statement-418-418", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2635 [label="418_ userMapping[msg.sender] = user;\n2635-expression_statement-419-419", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2643 [label="419_ address addressWalker = sponsorAddress;\n2643-new_variable-420-420", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2649 [label="420_ while\n2649-while-421-425", method="invest(address sponsorAddress,uint256 investCycle)", type_label=while];
7777 [label="420_ end_loop", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_loop];
2654 [label="421_ sponsor = userMapping[addressWalker];\n2654-expression_statement-422-422", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2660 [label="422_ sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n2660-expression_statement-423-423", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2673 [label="423_ addressWalker = sponsor.sponsorAddress;\n2673-expression_statement-424-424", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2680 [label="426_ userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n2680-expression_statement-427-430", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2730 [label="430_ addressMapping[totalUserCount] = msg.sender;\n2730-expression_statement-431-431", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2738 [label="431_ totalUserCount = totalUserCount.add(1);\n2738-expression_statement-432-432", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2747 [label="432_ address addressWalker = sponsorAddress;\n2747-new_variable-433-433", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2753 [label="433_ while\n2753-while-434-442", method="invest(address sponsorAddress,uint256 investCycle)", type_label=while];
7881 [label="433_ end_loop", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_loop];
2758 [label="434_ sponsor = userMapping[addressWalker];\n2758-expression_statement-435-435", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2764 [label="435_ sponsor.downlineCount = sponsor.downlineCount.add(1);\n2764-expression_statement-436-436", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2777 [label="436_ if_addressWalker == sponsorAddress\n2777-if-437-439", method="invest(address sponsorAddress,uint256 investCycle)", type_label=if];
7905 [label="436_ end_if", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_if];
2782 [label="437_ sponsor.nodeCount = sponsor.nodeCount.add(1);\n2782-expression_statement-438-438", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2795 [label="439_ sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n2795-expression_statement-440-440", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2808 [label="440_ addressWalker = sponsor.sponsorAddress;\n2808-expression_statement-441-441", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2814 [label="443_ addInvestRecord(msg.sender, now, investAmount, investCycle);\n2814-expression_statement-444-444", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2827 [label="444_ totalInvestCount = totalInvestCount.add(1);\n2827-expression_statement-445-445", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2836 [label="445_ totalInvestAmount = totalInvestAmount.add(investAmount);\n2836-expression_statement-446-446", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2845 [label="446_ engineerFunds = engineerFunds.add(investAmount.div(50));\n2845-expression_statement-447-447", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2859 [label="447_ operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n2859-expression_statement-448-448", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2878 [label="449_ mapping(address => uint) balances_intou38;\n2878-new_variable-450-450", method="", type_label=new_variable];
2884 [label="450_ function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] - _value >= 0);   \n    balances_intou38[msg.sender] -= _value;   \n    balances_intou38[_to] += _value;   \n    return true;\n  }\n2884-function_definition-451-456", method="transfer_intou38(address _to,uint _value)", type_label=function_definition];
2900 [label="451_ require(balances_intou38[msg.sender] - _value >= 0);\n2900-expression_statement-452-452", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
2913 [label="452_ balances_intou38[msg.sender] -= _value;\n2913-expression_statement-453-453", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
2921 [label="453_ balances_intou38[_to] += _value;\n2921-expression_statement-454-454", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
2927 [label="454_ return true;\n2927-return-455-455", method="transfer_intou38(address _to,uint _value)", type_label=return];
2930 [label="456_ function userWithdraw() external {\n        User storage user = userMapping[msg.sender];\n        if (user.currentInvestAmount > 0) {\n            uint256 avaliableIA = user.currentInvestAmount;\n            if (!isInvestExpired(user)) {\n                avaliableIA = getAbortInvestAmount(user);\n            }\n            uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n            user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n            user.currentInvestTime = 0;\n            user.currentInvestAmount = 0;\n            user.currentInvestCycle = 0;\n            user.currentlevel = 0;\n            user.currentStaticCommissionRatio = 0;\n            user.currentStaticCommissionWithdrawAmount = 0;\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n            msg.sender.transfer(avaliableIA);\n        }\n    }\n2930-function_definition-457-476", method="userWithdraw()", type_label=function_definition];
2934 [label="457_ User storage user = userMapping[msg.sender];\n2934-new_variable-458-458", method="userWithdraw()", type_label=new_variable];
2945 [label="458_ if_user.currentInvestAmount > 0\n2945-if-459-475", method="userWithdraw()", type_label=if];
8073 [label="458_ end_if", method="userWithdraw()", type_label=end_if];
2952 [label="459_ uint256 avaliableIA = user.currentInvestAmount;\n2952-new_variable-460-460", method="userWithdraw()", type_label=new_variable];
2960 [label="460_ if\n2960-if-461-463", method="userWithdraw()", type_label=if];
8088 [label="460_ end_if", method="userWithdraw()", type_label=end_if];
2967 [label="461_ avaliableIA = getAbortInvestAmount(user);\n2967-expression_statement-462-462", method="userWithdraw()", type_label=expression_statement];
2974 [label="463_ uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n2974-new_variable-464-464", method="userWithdraw()", type_label=new_variable];
2983 [label="464_ user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n2983-expression_statement-465-465", method="userWithdraw()", type_label=expression_statement];
2996 [label="465_ user.currentInvestTime = 0;\n2996-expression_statement-466-466", method="userWithdraw()", type_label=expression_statement];
3002 [label="466_ user.currentInvestAmount = 0;\n3002-expression_statement-467-467", method="userWithdraw()", type_label=expression_statement];
3008 [label="467_ user.currentInvestCycle = 0;\n3008-expression_statement-468-468", method="userWithdraw()", type_label=expression_statement];
3014 [label="468_ user.currentlevel = 0;\n3014-expression_statement-469-469", method="userWithdraw()", type_label=expression_statement];
3020 [label="469_ user.currentStaticCommissionRatio = 0;\n3020-expression_statement-470-470", method="userWithdraw()", type_label=expression_statement];
3026 [label="470_ user.currentStaticCommissionWithdrawAmount = 0;\n3026-expression_statement-471-471", method="userWithdraw()", type_label=expression_statement];
3032 [label="471_ user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n3032-expression_statement-472-472", method="userWithdraw()", type_label=expression_statement];
3045 [label="472_ totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n3045-expression_statement-473-473", method="userWithdraw()", type_label=expression_statement];
3054 [label="473_ msg.sender.transfer(avaliableIA);\n3054-expression_statement-474-474", method="userWithdraw()", type_label=expression_statement];
3063 [label="476_ function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou4;    \n}\n3063-function_definition-477-480", method="bug_intou4(uint8 p_intou4)", type_label=function_definition];
3071 [label="477_ uint8 vundflw1=0;\n3071-new_variable-478-478", method="bug_intou4(uint8 p_intou4)", type_label=new_variable];
3077 [label="478_ vundflw1 = vundflw1 + p_intou4;\n3077-expression_statement-479-479", method="bug_intou4(uint8 p_intou4)", type_label=expression_statement];
3083 [label="480_ function userWithdrawCommission() external {\n        User storage user = userMapping[msg.sender];\n        uint256 avaliableDCB = user.dynamicCommissionBalance;\n        uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n        uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n        uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n        if (avaliableWithdrawAmount >= ONE_ETH.div(10)) {\n            user.staticCommissionBalance = 0;\n            user.dynamicCommissionBalance = 0;\n            user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n            user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n            totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n            if (avaliableSCB > 0) {\n                addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n            }\n            msg.sender.transfer(avaliableWithdrawAmount);\n        }\n    }\n3083-function_definition-481-502", method="userWithdrawCommission()", type_label=function_definition];
3087 [label="481_ User storage user = userMapping[msg.sender];\n3087-new_variable-482-482", method="userWithdrawCommission()", type_label=new_variable];
3098 [label="482_ uint256 avaliableDCB = user.dynamicCommissionBalance;\n3098-new_variable-483-483", method="userWithdrawCommission()", type_label=new_variable];
3106 [label="483_ uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n3106-new_variable-484-484", method="userWithdrawCommission()", type_label=new_variable];
3115 [label="484_ uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n3115-new_variable-485-485", method="userWithdrawCommission()", type_label=new_variable];
3128 [label="485_ uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n3128-new_variable-486-486", method="userWithdrawCommission()", type_label=new_variable];
3139 [label="486_ if\n3139-if-487-501", method="userWithdrawCommission()", type_label=if];
8267 [label="486_ end_if", method="userWithdrawCommission()", type_label=end_if];
3149 [label="487_ user.staticCommissionBalance = 0;\n3149-expression_statement-488-488", method="userWithdrawCommission()", type_label=expression_statement];
3155 [label="488_ user.dynamicCommissionBalance = 0;\n3155-expression_statement-489-489", method="userWithdrawCommission()", type_label=expression_statement];
3161 [label="489_ user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n3161-expression_statement-490-490", method="userWithdrawCommission()", type_label=expression_statement];
3174 [label="490_ user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n3174-expression_statement-491-491", method="userWithdrawCommission()", type_label=expression_statement];
3187 [label="491_ user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n3187-expression_statement-492-492", method="userWithdrawCommission()", type_label=expression_statement];
3200 [label="492_ user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n3200-expression_statement-493-493", method="userWithdrawCommission()", type_label=expression_statement];
3213 [label="493_ totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n3213-expression_statement-494-494", method="userWithdrawCommission()", type_label=expression_statement];
3222 [label="494_ totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n3222-expression_statement-495-495", method="userWithdrawCommission()", type_label=expression_statement];
3231 [label="495_ totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n3231-expression_statement-496-496", method="userWithdrawCommission()", type_label=expression_statement];
3240 [label="496_ if_avaliableSCB > 0\n3240-if-497-499", method="userWithdrawCommission()", type_label=if];
8368 [label="496_ end_if", method="userWithdrawCommission()", type_label=end_if];
3245 [label="497_ addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n3245-expression_statement-498-498", method="userWithdrawCommission()", type_label=expression_statement];
3256 [label="499_ msg.sender.transfer(avaliableWithdrawAmount);\n3256-expression_statement-500-500", method="userWithdrawCommission()", type_label=expression_statement];
3265 [label="502_ function bug_intou7() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n3265-function_definition-503-506", method="bug_intou7()", type_label=function_definition];
3269 [label="503_ uint8 vundflw =0;\n3269-new_variable-504-504", method="bug_intou7()", type_label=new_variable];
3275 [label="504_ vundflw = vundflw -10;\n3275-expression_statement-505-505", method="bug_intou7()", type_label=expression_statement];
3281 [label="506_ function engineerWithdraw() external onlyEngineer {\n        uint256 avaliableAmount = engineerFunds;\n        if (avaliableAmount > 0) {\n            engineerFunds = 0;\n            engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }\n3281-function_definition-507-514", method="engineerWithdraw()", type_label=function_definition];
3284 [label="506_ onlyEngineer\n3284-expression_statement-507-507", method="engineerWithdraw()", type_label=expression_statement];
3287 [label="507_ uint256 avaliableAmount = engineerFunds;\n3287-new_variable-508-508", method="engineerWithdraw()", type_label=new_variable];
3293 [label="508_ if_avaliableAmount > 0\n3293-if-509-513", method="engineerWithdraw()", type_label=if];
8421 [label="508_ end_if", method="engineerWithdraw()", type_label=end_if];
3298 [label="509_ engineerFunds = 0;\n3298-expression_statement-510-510", method="engineerWithdraw()", type_label=expression_statement];
3302 [label="510_ engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n3302-expression_statement-511-511", method="engineerWithdraw()", type_label=expression_statement];
3311 [label="511_ msg.sender.transfer(avaliableAmount);\n3311-expression_statement-512-512", method="engineerWithdraw()", type_label=expression_statement];
3320 [label="514_ function bug_intou23() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n3320-function_definition-515-518", method="bug_intou23()", type_label=function_definition];
3324 [label="515_ uint8 vundflw =0;\n3324-new_variable-516-516", method="bug_intou23()", type_label=new_variable];
3330 [label="516_ vundflw = vundflw -10;\n3330-expression_statement-517-517", method="bug_intou23()", type_label=expression_statement];
3336 [label="518_ function operatorWithdraw() external onlyOwner {\n        uint256 avaliableAmount = operatorFunds;\n        if (avaliableAmount > 0) {\n            operatorFunds = 0;\n            operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }\n3336-function_definition-519-526", method="operatorWithdraw()", type_label=function_definition];
3339 [label="518_ onlyOwner\n3339-expression_statement-519-519", method="operatorWithdraw()", type_label=expression_statement];
3342 [label="519_ uint256 avaliableAmount = operatorFunds;\n3342-new_variable-520-520", method="operatorWithdraw()", type_label=new_variable];
3348 [label="520_ if_avaliableAmount > 0\n3348-if-521-525", method="operatorWithdraw()", type_label=if];
8476 [label="520_ end_if", method="operatorWithdraw()", type_label=end_if];
3353 [label="521_ operatorFunds = 0;\n3353-expression_statement-522-522", method="operatorWithdraw()", type_label=expression_statement];
3357 [label="522_ operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n3357-expression_statement-523-523", method="operatorWithdraw()", type_label=expression_statement];
3366 [label="523_ msg.sender.transfer(avaliableAmount);\n3366-expression_statement-524-524", method="operatorWithdraw()", type_label=expression_statement];
3375 [label="526_ mapping(address => uint) balances_intou14;\n3375-new_variable-527-527", method="", type_label=new_variable];
3381 [label="527_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n3381-function_definition-528-533", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
3397 [label="528_ require(balances_intou14[msg.sender] - _value >= 0);\n3397-expression_statement-529-529", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
3410 [label="529_ balances_intou14[msg.sender] -= _value;\n3410-expression_statement-530-530", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
3418 [label="530_ balances_intou14[_to] += _value;\n3418-expression_statement-531-531", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
3424 [label="531_ return true;\n3424-return-532-532", method="transfer_intou14(address _to,uint _value)", type_label=return];
3427 [label="533_ function getSummary() public view returns (uint256[11] memory) {\n        return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n    }\n3427-function_definition-534-542", method="getSummary()", type_label=function_definition];
3438 [label="534_ return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n3438-return-535-541", method="getSummary()", type_label=return];
3456 [label="542_ mapping(address => uint) balances_intou30;\n3456-new_variable-543-543", method="", type_label=new_variable];
3462 [label="543_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n3462-function_definition-544-549", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
3478 [label="544_ require(balances_intou30[msg.sender] - _value >= 0);\n3478-expression_statement-545-545", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
3491 [label="545_ balances_intou30[msg.sender] -= _value;\n3491-expression_statement-546-546", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
3499 [label="546_ balances_intou30[_to] += _value;\n3499-expression_statement-547-547", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
3505 [label="547_ return true;\n3505-return-548-548", method="transfer_intou30(address _to,uint _value)", type_label=return];
3508 [label="549_ function getUserByAddress(address userAddress) public view returns(uint256[16] memory,\n                                                                       address) {\n        User memory user = userMapping[userAddress];\n        return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n    }\n3508-function_definition-550-566", method="getUserByAddress(address userAddress)", type_label=function_definition];
3526 [label="551_ User memory user = userMapping[userAddress];\n3526-new_variable-552-552", method="getUserByAddress(address userAddress)", type_label=new_variable];
3535 [label="552_ return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n3535-return-553-565", method="getUserByAddress(address userAddress)", type_label=return];
3597 [label="566_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n3597-function_definition-567-570", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
3605 [label="567_ uint8 vundflw1=0;\n3605-new_variable-568-568", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
3611 [label="568_ vundflw1 = vundflw1 + p_intou8;\n3611-expression_statement-569-569", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
3617 [label="570_ function getUserByIndex(uint256 index) external view onlyOwner returns(uint256[16] memory,\n                                                                           address) {\n        return getUserByAddress(addressMapping[index]);\n    }\n3617-function_definition-571-574", method="getUserByIndex(uint256 index)", type_label=function_definition];
3625 [label="570_ onlyOwner\n3625-expression_statement-571-571", method="getUserByIndex(uint256 index)", type_label=expression_statement];
3637 [label="572_ return getUserByAddress(addressMapping[index]);\n3637-return-573-573", method="getUserByIndex(uint256 index)", type_label=return];
3644 [label="574_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n3644-function_definition-575-578", method="bug_intou39()", type_label=function_definition];
3648 [label="575_ uint8 vundflw =0;\n3648-new_variable-576-576", method="bug_intou39()", type_label=new_variable];
3654 [label="576_ vundflw = vundflw -10;\n3654-expression_statement-577-577", method="bug_intou39()", type_label=expression_statement];
3660 [label="578_ function getInvestRecords(address userAddress) external view returns(uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory) {\n        InvestRecord[9] memory records = investRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n    }\n3660-function_definition-579-598", method="getInvestRecords(address userAddress)", type_label=function_definition];
3715 [label="587_ InvestRecord[9] memory records = investRecordMapping[userAddress];\n3715-new_variable-588-588", method="getInvestRecords(address userAddress)", type_label=new_variable];
3726 [label="588_ return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n3726-return-589-597", method="getInvestRecords(address userAddress)", type_label=return];
3872 [label="598_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n3872-function_definition-599-602", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
3880 [label="599_ uint8 vundflw1=0;\n3880-new_variable-600-600", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
3886 [label="600_ vundflw1 = vundflw1 + p_intou36;\n3886-expression_statement-601-601", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
3892 [label="602_ function getStaticCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory) {\n        CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }\n3892-function_definition-603-622", method="getStaticCommissionRecords(address userAddress)", type_label=function_definition];
3947 [label="611_ CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n3947-new_variable-612-612", method="getStaticCommissionRecords(address userAddress)", type_label=new_variable];
3958 [label="612_ return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n3958-return-613-621", method="getStaticCommissionRecords(address userAddress)", type_label=return];
4059 [label="622_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n4059-function_definition-623-626", method="bug_intou35()", type_label=function_definition];
4063 [label="623_ uint8 vundflw =0;\n4063-new_variable-624-624", method="bug_intou35()", type_label=new_variable];
4069 [label="624_ vundflw = vundflw -10;\n4069-expression_statement-625-625", method="bug_intou35()", type_label=expression_statement];
4075 [label="626_ function getDynamicCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory) {\n        CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }\n4075-function_definition-627-646", method="getDynamicCommissionRecords(address userAddress)", type_label=function_definition];
4130 [label="635_ CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n4130-new_variable-636-636", method="getDynamicCommissionRecords(address userAddress)", type_label=new_variable];
4141 [label="636_ return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n4141-return-637-645", method="getDynamicCommissionRecords(address userAddress)", type_label=return];
4242 [label="646_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n4242-function_definition-647-650", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
4250 [label="647_ uint8 vundflw1=0;\n4250-new_variable-648-648", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
4256 [label="648_ vundflw1 = vundflw1 + p_intou40;\n4256-expression_statement-649-649", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
4262 [label="650_ function calcDynamicCommission() external onlyOwner {\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }\n4262-function_definition-651-698", method="calcDynamicCommission()", type_label=function_definition];
4265 [label="650_ onlyOwner\n4265-expression_statement-651-651", method="calcDynamicCommission()", type_label=expression_statement];
4268 [label="651_ for(i < totalUserCount;;++i)\n4268-for-652-655", method="calcDynamicCommission()", type_label=for];
9396 [label="651_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4279 [label="651_ ++i\n4279-expression_statement-652-652", method="calcDynamicCommission()", type_label=expression_statement];
4282 [label="652_ User storage user = userMapping[addressMapping[i]];\n4282-new_variable-653-653", method="calcDynamicCommission()", type_label=new_variable];
4293 [label="653_ user.calcDynamicCommissionAmount = 0;\n4293-expression_statement-654-654", method="calcDynamicCommission()", type_label=expression_statement];
4299 [label="655_ for(i < totalUserCount;;++i)\n4299-for-656-689", method="calcDynamicCommission()", type_label=for];
9427 [label="655_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4310 [label="655_ ++i\n4310-expression_statement-656-656", method="calcDynamicCommission()", type_label=expression_statement];
4313 [label="656_ User memory user = userMapping[addressMapping[i]];\n4313-new_variable-657-657", method="calcDynamicCommission()", type_label=new_variable];
4324 [label="657_ if_user.currentInvestAmount > 0\n4324-if-658-688", method="calcDynamicCommission()", type_label=if];
9452 [label="657_ end_if", method="calcDynamicCommission()", type_label=end_if];
4331 [label="658_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n4331-new_variable-659-659", method="calcDynamicCommission()", type_label=new_variable];
4349 [label="659_ if_commissionDays >= 1 && commissionDays <= user.currentInvestCycle\n4349-if-660-687", method="calcDynamicCommission()", type_label=if];
9477 [label="659_ end_if", method="calcDynamicCommission()", type_label=end_if];
4360 [label="660_ uint256 depth = 1;\n4360-new_variable-661-661", method="calcDynamicCommission()", type_label=new_variable];
4366 [label="661_ address addressWalker = user.sponsorAddress;\n4366-new_variable-662-662", method="calcDynamicCommission()", type_label=new_variable];
4374 [label="662_ while\n4374-while-663-686", method="calcDynamicCommission()", type_label=while];
9502 [label="662_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4379 [label="663_ User storage sponsor = userMapping[addressWalker];\n4379-new_variable-664-664", method="calcDynamicCommission()", type_label=new_variable];
4388 [label="664_ if_sponsor.currentInvestAmount > 0\n4388-if-665-683", method="calcDynamicCommission()", type_label=if];
9516 [label="664_ end_if", method="calcDynamicCommission()", type_label=end_if];
4395 [label="665_ uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n4395-new_variable-666-666", method="calcDynamicCommission()", type_label=new_variable];
4406 [label="666_ if_dynamicCommissionRatio > 0\n4406-if-667-682", method="calcDynamicCommission()", type_label=if];
9534 [label="666_ end_if", method="calcDynamicCommission()", type_label=end_if];
4411 [label="667_ uint256 dynamicCA = sponsor.currentInvestAmount;\n4411-new_variable-668-668", method="calcDynamicCommission()", type_label=new_variable];
4419 [label="668_ if_dynamicCA > user.currentInvestAmount\n4419-if-669-671", method="calcDynamicCommission()", type_label=if];
9547 [label="668_ end_if", method="calcDynamicCommission()", type_label=end_if];
4426 [label="669_ dynamicCA = user.currentInvestAmount;\n4426-expression_statement-670-670", method="calcDynamicCommission()", type_label=expression_statement];
4432 [label="671_ dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n4432-expression_statement-672-672", method="calcDynamicCommission()", type_label=expression_statement];
4443 [label="672_ dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n4443-expression_statement-673-673", method="calcDynamicCommission()", type_label=expression_statement];
4452 [label="673_ if_sponsor.currentlevel == 1\n4452-if-674-680", method="calcDynamicCommission()", type_label=if];
9580 [label="673_ end_if", method="calcDynamicCommission()", type_label=end_if];
4459 [label="674_ dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n4459-expression_statement-675-675", method="calcDynamicCommission()", type_label=expression_statement];
4477 [label="675_ if_sponsor.currentlevel == 2\n4477-if-676-680", method="calcDynamicCommission()", type_label=if];
4484 [label="676_ dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n4484-expression_statement-677-677", method="calcDynamicCommission()", type_label=expression_statement];
4503 [label="678_ dynamicCA = dynamicCA.div(1000 * 100);\n4503-expression_statement-679-679", method="calcDynamicCommission()", type_label=expression_statement];
4514 [label="680_ sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n4514-expression_statement-681-681", method="calcDynamicCommission()", type_label=expression_statement];
4527 [label="683_ addressWalker = sponsor.sponsorAddress;\n4527-expression_statement-684-684", method="calcDynamicCommission()", type_label=expression_statement];
4533 [label="684_ depth = depth.add(1);\n4533-expression_statement-685-685", method="calcDynamicCommission()", type_label=expression_statement];
4542 [label="689_ for(i < totalUserCount;;++i)\n4542-for-690-697", method="calcDynamicCommission()", type_label=for];
9670 [label="689_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4553 [label="689_ ++i\n4553-expression_statement-690-690", method="calcDynamicCommission()", type_label=expression_statement];
4556 [label="690_ address userAddress = addressMapping[i];\n4556-new_variable-691-691", method="calcDynamicCommission()", type_label=new_variable];
4564 [label="691_ User storage user = userMapping[userAddress];\n4564-new_variable-692-692", method="calcDynamicCommission()", type_label=new_variable];
4573 [label="692_ if_user.calcDynamicCommissionAmount > 0\n4573-if-693-696", method="calcDynamicCommission()", type_label=if];
9701 [label="692_ end_if", method="calcDynamicCommission()", type_label=end_if];
4580 [label="693_ user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n4580-expression_statement-694-694", method="calcDynamicCommission()", type_label=expression_statement];
4595 [label="694_ addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n4595-expression_statement-695-695", method="calcDynamicCommission()", type_label=expression_statement];
4606 [label="698_ mapping(address => uint) public lockTime_intou33;\n4606-new_variable-699-699", method="", type_label=new_variable];
4613 [label="699_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n4613-function_definition-700-702", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
4621 [label="700_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n4621-expression_statement-701-701", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
4629 [label="702_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n4629-function_definition-703-707", method="withdraw_intou33()", type_label=function_definition];
4633 [label="703_ require(now > lockTime_intou33[msg.sender]);\n4633-expression_statement-704-704", method="withdraw_intou33()", type_label=expression_statement];
4644 [label="704_ uint transferValue_intou33 = 10;\n4644-new_variable-705-705", method="withdraw_intou33()", type_label=new_variable];
4650 [label="705_ msg.sender.transfer(transferValue_intou33);\n4650-expression_statement-706-706", method="withdraw_intou33()", type_label=expression_statement];
4659 [label="707_ function calcDynamicCommissionBegin(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n    }\n4659-function_definition-708-713", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=function_definition];
4670 [label="707_ onlyOwner\n4670-expression_statement-708-708", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4673 [label="708_ for(i < (index + length);;++i)\n4673-for-709-712", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=for];
9801 [label="708_ end_loop", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=end_loop];
4687 [label="708_ ++i\n4687-expression_statement-709-709", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4690 [label="709_ User storage user = userMapping[addressMapping[i]];\n4690-new_variable-710-710", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=new_variable];
4701 [label="710_ user.calcDynamicCommissionAmount = 0;\n4701-expression_statement-711-711", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4707 [label="713_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n4707-function_definition-714-717", method="bug_intou27()", type_label=function_definition];
4711 [label="714_ uint8 vundflw =0;\n4711-new_variable-715-715", method="bug_intou27()", type_label=new_variable];
4717 [label="715_ vundflw = vundflw -10;\n4717-expression_statement-716-716", method="bug_intou27()", type_label=expression_statement];
4723 [label="717_ function calcDynamicCommissionRange(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n    }\n4723-function_definition-718-753", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=function_definition];
4734 [label="717_ onlyOwner\n4734-expression_statement-718-718", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4737 [label="718_ for(i < (index + length);;++i)\n4737-for-719-752", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=for];
9865 [label="718_ end_loop", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_loop];
4751 [label="718_ ++i\n4751-expression_statement-719-719", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4754 [label="719_ User memory user = userMapping[addressMapping[i]];\n4754-new_variable-720-720", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4765 [label="720_ if_user.currentInvestAmount > 0\n4765-if-721-751", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9893 [label="720_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4772 [label="721_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n4772-new_variable-722-722", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4790 [label="722_ if_commissionDays >= 1 && commissionDays <= user.currentInvestCycle\n4790-if-723-750", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9918 [label="722_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4801 [label="723_ uint256 depth = 1;\n4801-new_variable-724-724", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4807 [label="724_ address addressWalker = user.sponsorAddress;\n4807-new_variable-725-725", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4815 [label="725_ while\n4815-while-726-749", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=while];
9943 [label="725_ end_loop", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_loop];
4820 [label="726_ User storage sponsor = userMapping[addressWalker];\n4820-new_variable-727-727", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4829 [label="727_ if_sponsor.currentInvestAmount > 0\n4829-if-728-746", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9957 [label="727_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4836 [label="728_ uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n4836-new_variable-729-729", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4847 [label="729_ if_dynamicCommissionRatio > 0\n4847-if-730-745", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9975 [label="729_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4852 [label="730_ uint256 dynamicCA = sponsor.currentInvestAmount;\n4852-new_variable-731-731", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4860 [label="731_ if_dynamicCA > user.currentInvestAmount\n4860-if-732-734", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9988 [label="731_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4867 [label="732_ dynamicCA = user.currentInvestAmount;\n4867-expression_statement-733-733", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4873 [label="734_ dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n4873-expression_statement-735-735", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4884 [label="735_ dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n4884-expression_statement-736-736", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4893 [label="736_ if_sponsor.currentlevel == 1\n4893-if-737-743", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
10021 [label="736_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4900 [label="737_ dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n4900-expression_statement-738-738", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4918 [label="738_ if_sponsor.currentlevel == 2\n4918-if-739-743", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
4925 [label="739_ dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n4925-expression_statement-740-740", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4944 [label="741_ dynamicCA = dynamicCA.div(1000 * 100);\n4944-expression_statement-742-742", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4955 [label="743_ sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n4955-expression_statement-744-744", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4968 [label="746_ addressWalker = sponsor.sponsorAddress;\n4968-expression_statement-747-747", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4974 [label="747_ depth = depth.add(1);\n4974-expression_statement-748-748", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4983 [label="753_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n4983-function_definition-754-757", method="bug_intou31()", type_label=function_definition];
4987 [label="754_ uint8 vundflw =0;\n4987-new_variable-755-755", method="bug_intou31()", type_label=new_variable];
4993 [label="755_ vundflw = vundflw -10;\n4993-expression_statement-756-756", method="bug_intou31()", type_label=expression_statement];
4999 [label="757_ function calcDynamicCommissionEnd(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }\n4999-function_definition-758-767", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=function_definition];
5010 [label="757_ onlyOwner\n5010-expression_statement-758-758", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
5013 [label="758_ for(i < (index + length);;++i)\n5013-for-759-766", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=for];
10141 [label="758_ end_loop", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=end_loop];
5027 [label="758_ ++i\n5027-expression_statement-759-759", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
5030 [label="759_ address userAddress = addressMapping[i];\n5030-new_variable-760-760", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=new_variable];
5038 [label="760_ User storage user = userMapping[userAddress];\n5038-new_variable-761-761", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=new_variable];
5047 [label="761_ if_user.calcDynamicCommissionAmount > 0\n5047-if-762-765", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=if];
10175 [label="761_ end_if", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=end_if];
5054 [label="762_ user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n5054-expression_statement-763-763", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
5069 [label="763_ addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n5069-expression_statement-764-764", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
5080 [label="767_ mapping(address => uint) public lockTime_intou13;\n5080-new_variable-768-768", method="", type_label=new_variable];
5087 [label="768_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n5087-function_definition-769-771", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
5095 [label="769_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n5095-expression_statement-770-770", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
5103 [label="771_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n5103-function_definition-772-776", method="withdraw_intou13()", type_label=function_definition];
5107 [label="772_ require(now > lockTime_intou13[msg.sender]);\n5107-expression_statement-773-773", method="withdraw_intou13()", type_label=expression_statement];
5118 [label="773_ uint transferValue_intou13 = 10;\n5118-new_variable-774-774", method="withdraw_intou13()", type_label=new_variable];
5124 [label="774_ msg.sender.transfer(transferValue_intou13);\n5124-expression_statement-775-775", method="withdraw_intou13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
77 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
117 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 139  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
134 -> 5262  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5262 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 5262  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
139 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
163 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
190 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
230 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
257 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
303 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
501 -> 506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
533 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
621 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
694 -> 698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
698 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
733 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
810 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
827 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
842 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
888 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
938 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
947 -> 957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1019 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 1033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1062 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1122 -> 1128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1177 -> 1183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 1209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1226 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1258 -> 1274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1274 -> 1287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1287 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1304 -> 1318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1318 -> 1328  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1318 -> 1332  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6446 -> 1351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 6446  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1332 -> 1342  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1332 -> 1347  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1342 -> 6446  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1347 -> 6446  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1358 -> 1366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1374 -> 1378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 1389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1389 -> 1395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 1455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1463 -> 1467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 1478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1478 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1493 -> 1508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1508 -> 1526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1526 -> 1536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1536 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 1547  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1542 -> 1551  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6670 -> 1560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 6670  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1551 -> 1556  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1551 -> 6670  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1556 -> 6670  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1560 -> 1566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1587 -> 1591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1591 -> 1597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1603 -> 1621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1621 -> 1626  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1621 -> 1649  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1626 -> 1631  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1626 -> 1635  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6754 -> 1649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1631 -> 6754  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1635 -> 1640  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1635 -> 1645  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1640 -> 6754  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1645 -> 6754  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1649 -> 1654  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1649 -> 1678  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1654 -> 6749  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1654 -> 1659  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1654 -> 1663  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6782 -> 1678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1659 -> 6782  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1663 -> 1668  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1663 -> 1673  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1668 -> 6782  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1673 -> 6782  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1678 -> 6749  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1678 -> 1683  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1678 -> 1687  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6806 -> 1701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1683 -> 6806  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1687 -> 1692  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1687 -> 1697  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1692 -> 6806  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1697 -> 6806  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1708 -> 1716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1724 -> 1728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1728 -> 1739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1739 -> 1745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1754 -> 1773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1773 -> 1780  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1773 -> 1794  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1780 -> 1785  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1780 -> 1790  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6908 -> 1794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1785 -> 6908  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1790 -> 6908  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1794 -> 1801  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1794 -> 1825  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1801 -> 6901  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1801 -> 1806  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1801 -> 1810  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6929 -> 1825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1806 -> 6929  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1810 -> 1815  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1810 -> 1820  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1815 -> 6929  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1820 -> 6929  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1825 -> 6901  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1825 -> 1830  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1825 -> 1834  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6953 -> 1883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1830 -> 6953  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1834 -> 1839  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1834 -> 1843  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1839 -> 6953  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1843 -> 1848  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1843 -> 1852  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1848 -> 6953  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1852 -> 1861  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1852 -> 1865  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1861 -> 6953  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1865 -> 1874  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1865 -> 1879  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1874 -> 6953  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1879 -> 6953  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1890 -> 1898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1906 -> 1910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1910 -> 1921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1921 -> 1927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1936 -> 1951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1951 -> 1958  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1951 -> 1963  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7079 -> 2032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1958 -> 7079  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1963 -> 1981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1981 -> 1988  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1981 -> 7109  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7109 -> 1994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1988 -> 7109  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1994 -> 2012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2012 -> 2021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2021 -> 7079  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2032 -> 2036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2036 -> 2042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2048 -> 2068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2068 -> 2079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2079 -> 2093  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2079 -> 7207  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7207 -> 2110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2090 -> 2079  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2093 -> 2104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2104 -> 2090  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2129 -> 2145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2145 -> 2158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2158 -> 2166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2166 -> 2172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2172 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2175 -> 2191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2191 -> 2202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2202 -> 2216  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2202 -> 7330  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7330 -> 2233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2213 -> 2202  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2216 -> 2227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2227 -> 2213  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2244 -> 2252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2252 -> 2258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2264 -> 2280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2280 -> 2291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2291 -> 2305  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2291 -> 7419  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7419 -> 2322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2302 -> 2291  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2305 -> 2316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2316 -> 2302  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2333 -> 2341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2341 -> 2347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2353 -> 2366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2366 -> 2375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2375 -> 2387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2387 -> 2405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2405 -> 2418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2418 -> 2427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2427 -> 2439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2439 -> 2463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2463 -> 2474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2474 -> 2483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2483 -> 2490  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2483 -> 2680  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2490 -> 2502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2502 -> 2514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2514 -> 2526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2526 -> 2538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2538 -> 2550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2550 -> 2562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2562 -> 2574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2574 -> 2587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2587 -> 2600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2600 -> 2606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2606 -> 2612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2612 -> 2618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2618 -> 2624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2624 -> 2635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2635 -> 2643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2643 -> 2649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2649 -> 2654  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2649 -> 7777  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7777 -> 2680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2654 -> 2660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2660 -> 2673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2673 -> 2649  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2680 -> 2730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2730 -> 2738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2738 -> 2747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2747 -> 2753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2753 -> 7611  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2753 -> 2758  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2753 -> 7881  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7881 -> 2814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2758 -> 2764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2764 -> 2777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2777 -> 2782  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2777 -> 7905  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7905 -> 2795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2782 -> 7905  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2795 -> 2808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2808 -> 2753  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2814 -> 2827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2827 -> 2836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2836 -> 2845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2845 -> 2859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2884 -> 2900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2900 -> 2913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2913 -> 2921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2921 -> 2927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2927 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2930 -> 2934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2934 -> 2945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2945 -> 2952  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2945 -> 8073  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8073 -> 3063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2952 -> 2960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2960 -> 2967  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2960 -> 8088  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8088 -> 2974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2967 -> 8088  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2974 -> 2983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2983 -> 2996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2996 -> 3002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3002 -> 3008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3008 -> 3014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3014 -> 3020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3020 -> 3026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3026 -> 3032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3032 -> 3045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3045 -> 3054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3054 -> 8073  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3063 -> 3071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3071 -> 3077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3083 -> 3087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3087 -> 3098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3098 -> 3106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3106 -> 3115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3115 -> 3128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3128 -> 3139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3139 -> 3149  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3139 -> 8267  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8267 -> 3265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3149 -> 3155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3155 -> 3161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3161 -> 3174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3174 -> 3187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3187 -> 3200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3200 -> 3213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3213 -> 3222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3222 -> 3231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3231 -> 3240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3240 -> 3245  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3240 -> 8368  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8368 -> 3256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3245 -> 8368  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3256 -> 8267  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3265 -> 3269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3269 -> 3275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3281 -> 3287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3287 -> 3293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3293 -> 3298  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3293 -> 8421  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8421 -> 3320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3298 -> 3302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3302 -> 3311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3311 -> 8421  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3320 -> 3324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3324 -> 3330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3336 -> 3342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3342 -> 3348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3348 -> 3353  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3348 -> 8476  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8476 -> 3375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3353 -> 3357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3357 -> 3366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3366 -> 8476  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3381 -> 3397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3397 -> 3410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3410 -> 3418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3418 -> 3424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3424 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3427 -> 3438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3438 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3462 -> 3478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3478 -> 3491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3491 -> 3499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3499 -> 3505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3505 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3508 -> 3526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3526 -> 3535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3535 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3597 -> 3605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3605 -> 3611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3617 -> 3637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3637 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3644 -> 3648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3648 -> 3654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3660 -> 3715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3715 -> 3726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3726 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3872 -> 3880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3880 -> 3886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3892 -> 3947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3947 -> 3958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3958 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4059 -> 4063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4063 -> 4069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4075 -> 4130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4130 -> 4141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4141 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4242 -> 4250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4250 -> 4256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4262 -> 4268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4268 -> 4282  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4268 -> 9396  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9396 -> 4299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4279 -> 4268  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4282 -> 4293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4293 -> 4279  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4299 -> 4313  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4299 -> 9427  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9427 -> 4542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4310 -> 4299  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4313 -> 4324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4324 -> 4331  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4324 -> 9452  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9452 -> 4310  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4331 -> 4349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4349 -> 4360  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4349 -> 9477  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4360 -> 4366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4366 -> 4374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4374 -> 4379  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4374 -> 9502  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9502 -> 4310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4379 -> 4388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4388 -> 4395  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4388 -> 9516  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4395 -> 4406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4406 -> 4411  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4406 -> 9534  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9534 -> 4527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4411 -> 4419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4419 -> 4426  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4419 -> 9547  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9547 -> 4432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4426 -> 9547  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4432 -> 4443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4443 -> 4452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4452 -> 4459  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4452 -> 4477  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9580 -> 4514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4459 -> 9580  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4477 -> 4484  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4477 -> 4503  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4484 -> 9580  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4503 -> 9580  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4514 -> 9534  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4527 -> 4533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4533 -> 4374  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4542 -> 4556  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4542 -> 9670  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9670 -> 4606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4553 -> 4542  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4556 -> 4564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4564 -> 4573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4573 -> 4580  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4573 -> 9701  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9701 -> 4553  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
9701 -> 4553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
4580 -> 4595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4595 -> 9701  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4613 -> 4621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4629 -> 4633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4633 -> 4644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4644 -> 4650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4659 -> 4673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4673 -> 4690  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4673 -> 9801  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9801 -> 4707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4687 -> 4673  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4690 -> 4701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4701 -> 4687  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4707 -> 4711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4711 -> 4717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4723 -> 4737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4737 -> 4754  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4737 -> 9865  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9865 -> 4983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4751 -> 4737  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4754 -> 4765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4765 -> 4772  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4765 -> 9893  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9893 -> 4751  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4772 -> 4790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4790 -> 4801  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4790 -> 9918  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4801 -> 4807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4807 -> 4815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4815 -> 4820  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4815 -> 9943  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9943 -> 4751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4820 -> 4829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4829 -> 4836  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4829 -> 9957  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4836 -> 4847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4847 -> 4852  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4847 -> 9975  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9975 -> 4968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4852 -> 4860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4860 -> 4867  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4860 -> 9988  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9988 -> 4873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4867 -> 9988  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4873 -> 4884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4884 -> 4893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4893 -> 4900  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4893 -> 4918  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10021 -> 4955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4900 -> 10021  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4918 -> 4925  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4918 -> 4944  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4925 -> 10021  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4944 -> 10021  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4955 -> 9975  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4968 -> 4974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4974 -> 4815  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4983 -> 4987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4987 -> 4993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4999 -> 5013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5013 -> 5030  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5013 -> 10141  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10141 -> 5080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5027 -> 5013  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5030 -> 5038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5038 -> 5047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5047 -> 5054  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5047 -> 10175  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10175 -> 5027  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
10175 -> 5027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
5054 -> 5069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5069 -> 10175  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5087 -> 5095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5103 -> 5107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5107 -> 5118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5118 -> 5124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
