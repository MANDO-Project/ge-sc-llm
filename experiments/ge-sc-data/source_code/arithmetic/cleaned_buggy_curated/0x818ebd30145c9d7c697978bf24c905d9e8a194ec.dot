digraph  {
12 [label="2_ address public owner;\n12-new_variable-3-3", type_label=new_variable];
17 [label="3_ uint256 public commissionFee;\n17-new_variable-4-4", type_label=new_variable];
22 [label="4_ uint256 public totalFee;\n22-new_variable-5-5", type_label=new_variable];
27 [label="5_ struct Transfer {\n    address from;\n    uint256 amount;\n  }\n27-expression_statement-6-9", type_label=expression_statement];
37 [label="9_ mapping(bytes32 => Transfer) private transferToPassword;\n37-new_variable-10-10", type_label=new_variable];
45 [label="10_ mapping(address => uint256) private indexToAddress;\n45-new_variable-11-11", type_label=new_variable];
52 [label="11_ mapping(address => mapping(uint256 => bytes32)) private passwordToAddress;\n52-new_variable-12-12", type_label=new_variable];
61 [label="12_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n61-expression_statement-13-16", type_label=expression_statement];
64 [label="13_ require(msg.sender == owner);\n64-expression_statement-14-14", type_label=expression_statement];
73 [label="14_ _;\n73-expression_statement-15-15", type_label=expression_statement];
75 [label="16_ modifier passwordOwner(bytes32 _byte) {\n    require(\n      transferToPassword[_byte].from == msg.sender &&\n      transferToPassword[_byte].amount > 0\n    );\n    _;\n  }\n75-expression_statement-17-23", type_label=expression_statement];
82 [label="17_ require(\n      transferToPassword[_byte].from == msg.sender &&\n      transferToPassword[_byte].amount > 0\n    );\n82-expression_statement-18-21", type_label=expression_statement];
103 [label="21_ _;\n103-expression_statement-22-22", type_label=expression_statement];
161 [label="29_ commissionFee = _fee;\n161-expression_statement-30-30", type_label=expression_statement];
165 [label="30_ owner = msg.sender;\n165-expression_statement-31-31", type_label=expression_statement];
171 [label="32_ changeCommissionFee\n171-function_definition-33-36", type_label=function_definition];
178 [label="32_ onlyOwner\n178-expression_statement-33-33", type_label=expression_statement];
181 [label="33_ commissionFee = _fee;\n181-expression_statement-34-34", type_label=expression_statement];
189 [label="36_ changeOwner\n189-function_definition-37-41", type_label=function_definition];
196 [label="36_ onlyOwner\n196-expression_statement-37-37", type_label=expression_statement];
199 [label="37_ address exOwner = owner;\n199-new_variable-38-38", type_label=new_variable];
205 [label="38_ owner = _newOwner;\n205-expression_statement-39-39", type_label=expression_statement];
215 [label="41_ deposit\n215-function_definition-42-53", type_label=function_definition];
224 [label="42_ require(\n      msg.value > commissionFee &&\n      transferToPassword[sha3(_password)].amount == 0\n    );\n224-expression_statement-43-46", type_label=expression_statement];
244 [label="46_ bytes32 pass = sha3(_password);\n244-new_variable-47-47", type_label=new_variable];
253 [label="47_ transferToPassword[pass] = Transfer(msg.sender, msg.value);\n253-expression_statement-48-48", type_label=expression_statement];
268 [label="48_ uint256 index = indexToAddress[msg.sender];\n268-new_variable-49-49", type_label=new_variable];
278 [label="49_ indexToAddress[msg.sender]++;\n278-expression_statement-50-50", type_label=expression_statement];
279 [label="49_ indexToAddress[msg.sender]++\n279-expression_statement-50-50", type_label=expression_statement];
285 [label="50_ passwordToAddress[msg.sender][index] = pass;\n285-expression_statement-51-51", type_label=expression_statement];
305 [label="53_ getTransfer\n305-function_definition-54-65", type_label=function_definition];
314 [label="54_ require(\n      transferToPassword[sha3(_password)].amount > 0\n    );\n314-expression_statement-55-57", type_label=expression_statement];
328 [label="57_ bytes32 pass = sha3(_password);\n328-new_variable-58-58", type_label=new_variable];
337 [label="58_ address from = transferToPassword[pass].from;\n337-new_variable-59-59", type_label=new_variable];
347 [label="59_ uint256 amount = transferToPassword[pass].amount - commissionFee;\n347-new_variable-60-60", type_label=new_variable];
359 [label="60_ totalFee += commissionFee;\n359-expression_statement-61-61", type_label=expression_statement];
363 [label="61_ transferToPassword[pass].amount = 0;\n363-expression_statement-62-62", type_label=expression_statement];
371 [label="62_ msg.sender.transfer(amount);\n371-expression_statement-63-63", type_label=expression_statement];
390 [label="65_ AdvancedDeposit\n390-function_definition-66-77", type_label=function_definition];
403 [label="66_ require(\n      msg.value >= commissionFee &&\n      transferToPassword[sha3(_password, _num)].amount == 0\n    );\n403-expression_statement-67-70", type_label=expression_statement];
425 [label="70_ bytes32 pass = sha3(_password, _num);\n425-new_variable-71-71", type_label=new_variable];
436 [label="71_ transferToPassword[pass] = Transfer(msg.sender, msg.value);\n436-expression_statement-72-72", type_label=expression_statement];
451 [label="72_ uint256 index = indexToAddress[msg.sender];\n451-new_variable-73-73", type_label=new_variable];
461 [label="73_ indexToAddress[msg.sender]++;\n461-expression_statement-74-74", type_label=expression_statement];
462 [label="73_ indexToAddress[msg.sender]++\n462-expression_statement-74-74", type_label=expression_statement];
468 [label="74_ passwordToAddress[msg.sender][index] = pass;\n468-expression_statement-75-75", type_label=expression_statement];
488 [label="77_ getAdvancedTransfer\n488-function_definition-78-89", type_label=function_definition];
501 [label="78_ require(\n      transferToPassword[sha3(_password, _num)].amount > 0\n    );\n501-expression_statement-79-81", type_label=expression_statement];
517 [label="81_ bytes32 pass = sha3(_password, _num);\n517-new_variable-82-82", type_label=new_variable];
528 [label="82_ address from = transferToPassword[pass].from;\n528-new_variable-83-83", type_label=new_variable];
538 [label="83_ uint256 amount = transferToPassword[pass].amount - commissionFee;\n538-new_variable-84-84", type_label=new_variable];
550 [label="84_ totalFee += commissionFee;\n550-expression_statement-85-85", type_label=expression_statement];
554 [label="85_ transferToPassword[pass].amount = 0;\n554-expression_statement-86-86", type_label=expression_statement];
562 [label="86_ msg.sender.transfer(amount);\n562-expression_statement-87-87", type_label=expression_statement];
581 [label="89_ viewIndexNumber\n581-function_definition-90-92", type_label=function_definition];
590 [label="90_ return indexToAddress[msg.sender];\n590-return-91-91", type_label=return];
596 [label="92_ viewPassword\n596-function_definition-93-97", type_label=function_definition];
612 [label="93_ bytes32 hash = passwordToAddress[msg.sender][_index];\n612-new_variable-94-94", type_label=new_variable];
624 [label="94_ uint256 value = transferToPassword[hash].amount;\n624-new_variable-95-95", type_label=new_variable];
634 [label="95_ return (hash, value);\n634-return-96-96", type_label=return];
638 [label="97_ emergency\n638-function_definition-98-104", type_label=function_definition];
646 [label="97_ passwordOwner(_byte)\n646-expression_statement-98-98", type_label=expression_statement];
651 [label="98_ uint256 amount = transferToPassword[_byte].amount - commissionFee * 2;\n651-new_variable-99-99", type_label=new_variable];
665 [label="99_ totalFee += commissionFee * 2;\n665-expression_statement-100-100", type_label=expression_statement];
671 [label="100_ transferToPassword[_byte].amount = 0;\n671-expression_statement-101-101", type_label=expression_statement];
679 [label="101_ msg.sender.transfer(amount);\n679-expression_statement-102-102", type_label=expression_statement];
696 [label="104_ withdrawFee\n696-function_definition-105-110", type_label=function_definition];
700 [label="104_ onlyOwner\n700-expression_statement-105-105", type_label=expression_statement];
703 [label="105_ require( totalFee > 0);\n703-expression_statement-106-106", type_label=expression_statement];
710 [label="106_ uint256 fee = totalFee;\n710-new_variable-107-107", type_label=new_variable];
716 [label="107_ totalFee = 0;\n716-expression_statement-108-108", type_label=expression_statement];
720 [label="108_ msg.sender.transfer(totalFee);\n720-expression_statement-109-109", type_label=expression_statement];
729 [label="110_ withdraw\n729-function_definition-111-113", type_label=function_definition];
733 [label="110_ onlyOwner\n733-expression_statement-111-111", type_label=expression_statement];
736 [label="111_ msg.sender.transfer(this.balance);\n736-expression_statement-112-112", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
12 -> 17  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
17 -> 22  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
22 -> 27  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
27 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 52  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
52 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
61 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
224 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
268 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
305 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
328 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
347 -> 359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
517 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
538 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
590 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
596 -> 612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
634 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
638 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
716 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
