digraph  {
9 [label="1_ uint public totalSupply;\n9-new_variable-2-2", type_label=new_variable];
14 [label="2_ balanceOf\n14-function_definition-3-3", type_label=function_definition];
20 [label="2_ constant\n20-expression_statement-3-3", type_label=expression_statement];
26 [label="3_ allowance\n26-function_definition-4-4", type_label=function_definition];
36 [label="3_ constant\n36-expression_statement-4-4", type_label=expression_statement];
42 [label="4_ transfer\n42-function_definition-5-5", type_label=function_definition];
57 [label="5_ transferFrom\n57-function_definition-6-6", type_label=function_definition];
76 [label="6_ approve\n76-function_definition-7-7", type_label=function_definition];
122 [label="11_ safeMul\n122-function_definition-12-16", type_label=function_definition];
138 [label="12_ uint c = a * b;\n138-new_variable-13-13", type_label=new_variable];
146 [label="13_ assert(a == 0 || c / a == b);\n146-expression_statement-14-14", type_label=expression_statement];
159 [label="14_ return c;\n159-return-15-15", type_label=return];
161 [label="16_ safeDiv\n161-function_definition-17-22", type_label=function_definition];
177 [label="17_ assert(b > 0);\n177-expression_statement-18-18", type_label=expression_statement];
184 [label="18_ uint c = a / b;\n184-new_variable-19-19", type_label=new_variable];
192 [label="19_ assert(a == b * c + a % b);\n192-expression_statement-20-20", type_label=expression_statement];
205 [label="20_ return c;\n205-return-21-21", type_label=return];
207 [label="22_ safeSub\n207-function_definition-23-26", type_label=function_definition];
223 [label="23_ assert(b <= a);\n223-expression_statement-24-24", type_label=expression_statement];
230 [label="24_ return a - b;\n230-return-25-25", type_label=return];
234 [label="26_ safeAdd\n234-function_definition-27-31", type_label=function_definition];
250 [label="27_ uint c = a + b;\n250-new_variable-28-28", type_label=new_variable];
258 [label="28_ assert(c>=a && c>=b);\n258-expression_statement-29-29", type_label=expression_statement];
269 [label="29_ return c;\n269-return-30-30", type_label=return];
271 [label="31_ max64\n271-function_definition-32-34", type_label=function_definition];
282 [label="31_ constant\n282-expression_statement-32-32", type_label=expression_statement];
289 [label="32_ return a >= b ? a : b;\n289-return-33-33", type_label=return];
296 [label="34_ min64\n296-function_definition-35-37", type_label=function_definition];
307 [label="34_ constant\n307-expression_statement-35-35", type_label=expression_statement];
314 [label="35_ return a < b ? a : b;\n314-return-36-36", type_label=return];
321 [label="37_ max256\n321-function_definition-38-40", type_label=function_definition];
332 [label="37_ constant\n332-expression_statement-38-38", type_label=expression_statement];
339 [label="38_ return a >= b ? a : b;\n339-return-39-39", type_label=return];
346 [label="40_ min256\n346-function_definition-41-43", type_label=function_definition];
357 [label="40_ constant\n357-expression_statement-41-41", type_label=expression_statement];
364 [label="41_ return a < b ? a : b;\n364-return-42-42", type_label=return];
371 [label="43_ assert\n371-function_definition-44-48", type_label=function_definition];
379 [label="44_ if\n379-if-45-47", type_label=if];
1945 [label="44_ end_if", type_label=end_if];
383 [label="45_ throw;\n383-expression_statement-46-46", type_label=expression_statement];
394 [label="50_ mapping(address => uint) balances;\n394-new_variable-51-51", type_label=new_variable];
400 [label="51_ mapping (address => mapping (address => uint)) allowed;\n400-new_variable-52-52", type_label=new_variable];
408 [label="52_ transfer\n408-function_definition-53-58", type_label=function_definition];
424 [label="53_ balances[msg.sender] = safeSub(balances[msg.sender], _value);\n424-expression_statement-54-54", type_label=expression_statement];
441 [label="54_ balances[_to] = safeAdd(balances[_to], _value);\n441-expression_statement-55-55", type_label=expression_statement];
454 [label="55_ Transfer(msg.sender, _to, _value);\n454-expression_statement-56-56", type_label=expression_statement];
465 [label="56_ return true;\n465-return-57-57", type_label=return];
468 [label="58_ transferFrom\n468-function_definition-59-66", type_label=function_definition];
488 [label="59_ var _allowance = allowed[_from][msg.sender];\n488-new_variable-60-60", type_label=new_variable];
500 [label="60_ balances[_to] = safeAdd(balances[_to], _value);\n500-expression_statement-61-61", type_label=expression_statement];
513 [label="61_ balances[_from] = safeSub(balances[_from], _value);\n513-expression_statement-62-62", type_label=expression_statement];
526 [label="62_ allowed[_from][msg.sender] = safeSub(_allowance, _value);\n526-expression_statement-63-63", type_label=expression_statement];
541 [label="63_ Transfer(_from, _to, _value);\n541-expression_statement-64-64", type_label=expression_statement];
550 [label="64_ return true;\n550-return-65-65", type_label=return];
553 [label="66_ balanceOf\n553-function_definition-67-69", type_label=function_definition];
559 [label="66_ constant\n559-expression_statement-67-67", type_label=expression_statement];
567 [label="67_ return balances[_owner];\n567-return-68-68", type_label=return];
571 [label="69_ approve\n571-function_definition-70-74", type_label=function_definition];
587 [label="70_ allowed[msg.sender][_spender] = _value;\n587-expression_statement-71-71", type_label=expression_statement];
597 [label="71_ Approval(msg.sender, _spender, _value);\n597-expression_statement-72-72", type_label=expression_statement];
608 [label="72_ return true;\n608-return-73-73", type_label=return];
611 [label="74_ allowance\n611-function_definition-75-77", type_label=function_definition];
621 [label="74_ constant\n621-expression_statement-75-75", type_label=expression_statement];
629 [label="75_ return allowed[_owner][_spender];\n629-return-76-76", type_label=return];
638 [label="79_ uint public originalSupply;\n638-new_variable-80-80", type_label=new_variable];
643 [label="80_ isUpgradeAgent\n643-function_definition-81-83", type_label=function_definition];
646 [label="80_ constant\n646-expression_statement-81-81", type_label=expression_statement];
653 [label="81_ return true;\n653-return-82-82", type_label=return];
656 [label="83_ upgradeFrom\n656-function_definition-84-84", type_label=function_definition];
670 [label="86_ times\n670-function_definition-87-91", type_label=function_definition];
685 [label="87_ uint c = a * b;\n685-new_variable-88-88", type_label=new_variable];
693 [label="88_ assert(a == 0 || c / a == b);\n693-expression_statement-89-89", type_label=expression_statement];
706 [label="89_ return c;\n706-return-90-90", type_label=return];
708 [label="91_ minus\n708-function_definition-92-95", type_label=function_definition];
723 [label="92_ assert(b <= a);\n723-expression_statement-93-93", type_label=expression_statement];
730 [label="93_ return a - b;\n730-return-94-94", type_label=return];
734 [label="95_ plus\n734-function_definition-96-100", type_label=function_definition];
749 [label="96_ uint c = a + b;\n749-new_variable-97-97", type_label=new_variable];
757 [label="97_ assert(c>=a && c>=b);\n757-expression_statement-98-98", type_label=expression_statement];
768 [label="98_ return c;\n768-return-99-99", type_label=return];
770 [label="100_ assert\n770-function_definition-101-103", type_label=function_definition];
778 [label="101_ if\n778-if-102-102", type_label=if];
2344 [label="101_ end_if", type_label=end_if];
781 [label="101_ throw;\n781-expression_statement-102-102", type_label=expression_statement];
794 [label="106_ address public upgradeMaster;\n794-new_variable-107-107", type_label=new_variable];
799 [label="107_ UpgradeAgent public upgradeAgent;\n799-new_variable-108-108", type_label=new_variable];
805 [label="108_ uint256 public totalUpgraded;\n805-new_variable-109-109", type_label=new_variable];
837 [label="112_ UpgradeAgentEnabledToken\n837-function_definition-113-115", type_label=function_definition];
844 [label="113_ upgradeMaster = _upgradeMaster;\n844-expression_statement-114-114", type_label=expression_statement];
848 [label="115_ upgrade\n848-function_definition-116-127", type_label=function_definition];
856 [label="116_ UpgradeState state = getUpgradeState();\n856-new_variable-117-117", type_label=new_variable];
864 [label="117_ if\n864-if-118-120", type_label=if];
2430 [label="117_ end_if", type_label=end_if];
879 [label="118_ throw;\n879-expression_statement-119-119", type_label=expression_statement];
881 [label="120_ if_value == 0\n881-if-121-121", type_label=if];
2447 [label="120_ end_if", type_label=end_if];
885 [label="120_ throw;\n885-expression_statement-121-121", type_label=expression_statement];
887 [label="121_ balances[msg.sender] = balances[msg.sender].minus(value);\n887-expression_statement-122-122", type_label=expression_statement];
904 [label="122_ totalSupply = totalSupply.minus(value);\n904-expression_statement-123-123", type_label=expression_statement];
913 [label="123_ totalUpgraded = totalUpgraded.plus(value);\n913-expression_statement-124-124", type_label=expression_statement];
922 [label="124_ upgradeAgent.upgradeFrom(msg.sender, value);\n922-expression_statement-125-125", type_label=expression_statement];
933 [label="125_ Upgrade(msg.sender, upgradeAgent, value);\n933-expression_statement-126-126", type_label=expression_statement];
944 [label="127_ setUpgradeAgent\n944-function_definition-128-139", type_label=function_definition];
952 [label="128_ if\n952-if-129-131", type_label=if];
2518 [label="128_ end_if", type_label=end_if];
957 [label="129_ throw;\n957-expression_statement-130-130", type_label=expression_statement];
959 [label="131_ if_agent == 0x0\n959-if-132-132", type_label=if];
2525 [label="131_ end_if", type_label=end_if];
963 [label="131_ throw;\n963-expression_statement-132-132", type_label=expression_statement];
965 [label="132_ if_msg.sender != upgradeMaster\n965-if-133-133", type_label=if];
2531 [label="132_ end_if", type_label=end_if];
971 [label="132_ throw;\n971-expression_statement-133-133", type_label=expression_statement];
973 [label="133_ if_getUpgradeState() == UpgradeState.Upgrading\n973-if-134-134", type_label=if];
2539 [label="133_ end_if", type_label=end_if];
980 [label="133_ throw;\n980-expression_statement-134-134", type_label=expression_statement];
982 [label="134_ upgradeAgent = UpgradeAgent(agent);\n982-expression_statement-135-135", type_label=expression_statement];
989 [label="135_ if\n989-if-136-136", type_label=if];
2555 [label="135_ end_if", type_label=end_if];
995 [label="135_ throw;\n995-expression_statement-136-136", type_label=expression_statement];
997 [label="136_ if_upgradeAgent.originalSupply() != totalSupply\n997-if-137-137", type_label=if];
2563 [label="136_ end_if", type_label=end_if];
1004 [label="136_ throw;\n1004-expression_statement-137-137", type_label=expression_statement];
1006 [label="137_ UpgradeAgentSet(upgradeAgent);\n1006-expression_statement-138-138", type_label=expression_statement];
1011 [label="139_ getUpgradeState\n1011-function_definition-140-145", type_label=function_definition];
1014 [label="139_ constant\n1014-expression_statement-140-140", type_label=expression_statement];
1022 [label="140_ if\n1022-if-141-144", type_label=if];
2588 [label="140_ end_if", type_label=end_if];
1026 [label="140_ return UpgradeState.NotAllowed;\n1026-return-141-141", type_label=return];
1030 [label="141_ if_address(upgradeAgent) == 0x00\n1030-if-142-144", type_label=if];
1036 [label="141_ return UpgradeState.WaitingForAgent;\n1036-return-142-142", type_label=return];
1040 [label="142_ if_totalUpgraded == 0\n1040-if-143-144", type_label=if];
1044 [label="142_ return UpgradeState.ReadyToUpgrade;\n1044-return-143-143", type_label=return];
1048 [label="143_ return UpgradeState.Upgrading;\n1048-return-144-144", type_label=return];
1052 [label="145_ setUpgradeMaster\n1052-function_definition-146-150", type_label=function_definition];
1060 [label="146_ if_master == 0x0\n1060-if-147-147", type_label=if];
2626 [label="146_ end_if", type_label=end_if];
1064 [label="146_ throw;\n1064-expression_statement-147-147", type_label=expression_statement];
1066 [label="147_ if_msg.sender != upgradeMaster\n1066-if-148-148", type_label=if];
2632 [label="147_ end_if", type_label=end_if];
1072 [label="147_ throw;\n1072-expression_statement-148-148", type_label=expression_statement];
1074 [label="148_ upgradeMaster = master;\n1074-expression_statement-149-149", type_label=expression_statement];
1078 [label="150_ canUpgrade\n1078-function_definition-151-153", type_label=function_definition];
1081 [label="150_ constant\n1081-expression_statement-151-151", type_label=expression_statement];
1088 [label="151_ return true;\n1088-return-152-152", type_label=return];
1094 [label="155_ address public owner;\n1094-new_variable-156-156", type_label=new_variable];
1099 [label="156_ Ownable\n1099-function_definition-157-159", type_label=function_definition];
1102 [label="157_ owner = msg.sender;\n1102-expression_statement-158-158", type_label=expression_statement];
1108 [label="159_ modifier onlyOwner() {\n    if (msg.sender != owner) {\n      throw;\n    }\n    _;\n  }\n1108-expression_statement-160-165", type_label=expression_statement];
1111 [label="160_ if_msg.sender != owner\n1111-if-161-163", type_label=if];
2677 [label="160_ end_if", type_label=end_if];
1118 [label="161_ throw;\n1118-expression_statement-162-162", type_label=expression_statement];
1120 [label="163_ _;\n1120-expression_statement-164-164", type_label=expression_statement];
1122 [label="165_ transferOwnership\n1122-function_definition-166-170", type_label=function_definition];
1128 [label="165_ onlyOwner\n1128-expression_statement-166-166", type_label=expression_statement];
1131 [label="166_ if_newOwner != address(0)\n1131-if-167-169", type_label=if];
2697 [label="166_ end_if", type_label=end_if];
1138 [label="167_ owner = newOwner;\n1138-expression_statement-168-168", type_label=expression_statement];
1151 [label="172_ address public releaseAgent;\n1151-new_variable-173-173", type_label=new_variable];
1156 [label="173_ bool public released = false;\n1156-new_variable-174-174", type_label=new_variable];
1163 [label="174_ mapping (address => bool) public transferAgents;\n1163-new_variable-175-175", type_label=new_variable];
1170 [label="175_ modifier canTransfer(address _sender) {\n    if(!released) {\n        if(!transferAgents[_sender]) {\n            throw;\n        }\n    }\n    _;\n  }\n1170-expression_statement-176-183", type_label=expression_statement];
1177 [label="176_ if\n1177-if-177-181", type_label=if];
2743 [label="176_ end_if", type_label=end_if];
1181 [label="177_ if\n1181-if-178-180", type_label=if];
2747 [label="177_ end_if", type_label=end_if];
1187 [label="178_ throw;\n1187-expression_statement-179-179", type_label=expression_statement];
1189 [label="181_ _;\n1189-expression_statement-182-182", type_label=expression_statement];
1191 [label="183_ setReleaseAgent\n1191-function_definition-184-186", type_label=function_definition];
1197 [label="183_ onlyOwner\n1197-expression_statement-184-184", type_label=expression_statement];
1199 [label="183_ inReleaseState(false)\n1199-expression_statement-184-184", type_label=expression_statement];
1206 [label="184_ releaseAgent = addr;\n1206-expression_statement-185-185", type_label=expression_statement];
1210 [label="186_ setTransferAgent\n1210-function_definition-187-189", type_label=function_definition];
1220 [label="186_ onlyOwner\n1220-expression_statement-187-187", type_label=expression_statement];
1222 [label="186_ inReleaseState(false)\n1222-expression_statement-187-187", type_label=expression_statement];
1229 [label="187_ transferAgents[addr] = state;\n1229-expression_statement-188-188", type_label=expression_statement];
1235 [label="189_ releaseTokenTransfer\n1235-function_definition-190-192", type_label=function_definition];
1238 [label="189_ onlyReleaseAgent\n1238-expression_statement-190-190", type_label=expression_statement];
1241 [label="190_ released = true;\n1241-expression_statement-191-191", type_label=expression_statement];
1246 [label="192_ modifier inReleaseState(bool releaseState) {\n    if(releaseState != released) {\n        throw;\n    }\n    _;\n  }\n1246-expression_statement-193-198", type_label=expression_statement];
1253 [label="193_ if_releaseState != released\n1253-if-194-196", type_label=if];
2819 [label="193_ end_if", type_label=end_if];
1258 [label="194_ throw;\n1258-expression_statement-195-195", type_label=expression_statement];
1260 [label="196_ _;\n1260-expression_statement-197-197", type_label=expression_statement];
1262 [label="198_ modifier onlyReleaseAgent() {\n    if(msg.sender != releaseAgent) {\n        throw;\n    }\n    _;\n  }\n1262-expression_statement-199-204", type_label=expression_statement];
1265 [label="199_ if_msg.sender != releaseAgent\n1265-if-200-202", type_label=if];
2831 [label="199_ end_if", type_label=end_if];
1272 [label="200_ throw;\n1272-expression_statement-201-201", type_label=expression_statement];
1274 [label="202_ _;\n1274-expression_statement-203-203", type_label=expression_statement];
1276 [label="204_ transfer\n1276-function_definition-205-207", type_label=function_definition];
1286 [label="204_ canTransfer(msg.sender)\n1286-expression_statement-205-205", type_label=expression_statement];
1298 [label="205_ return super.transfer(_to, _value);\n1298-return-206-206", type_label=return];
1307 [label="207_ transferFrom\n1307-function_definition-208-210", type_label=function_definition];
1321 [label="207_ canTransfer(_from)\n1321-expression_statement-208-208", type_label=expression_statement];
1331 [label="208_ return super.transferFrom(_from, _to, _value);\n1331-return-209-209", type_label=return];
1356 [label="213_ bool public mintingFinished = false;\n1356-new_variable-214-214", type_label=new_variable];
1363 [label="214_ mapping (address => bool) public mintAgents;\n1363-new_variable-215-215", type_label=new_variable];
1370 [label="215_ mint\n1370-function_definition-216-220", type_label=function_definition];
1380 [label="215_ onlyMintAgent\n1380-expression_statement-216-216", type_label=expression_statement];
1382 [label="215_ canMint\n1382-expression_statement-216-216", type_label=expression_statement];
1386 [label="216_ totalSupply = totalSupply.plus(amount);\n1386-expression_statement-217-217", type_label=expression_statement];
1395 [label="217_ balances[receiver] = balances[receiver].plus(amount);\n1395-expression_statement-218-218", type_label=expression_statement];
1408 [label="218_ Transfer(0, receiver, amount);\n1408-expression_statement-219-219", type_label=expression_statement];
1417 [label="220_ setMintAgent\n1417-function_definition-221-223", type_label=function_definition];
1427 [label="220_ onlyOwner\n1427-expression_statement-221-221", type_label=expression_statement];
1429 [label="220_ canMint\n1429-expression_statement-221-221", type_label=expression_statement];
1433 [label="221_ mintAgents[addr] = state;\n1433-expression_statement-222-222", type_label=expression_statement];
1439 [label="223_ modifier onlyMintAgent() {\n    if(!mintAgents[msg.sender]) {\n        throw;\n    }\n    _;\n  }\n1439-expression_statement-224-229", type_label=expression_statement];
1442 [label="224_ if\n1442-if-225-227", type_label=if];
3008 [label="224_ end_if", type_label=end_if];
1450 [label="225_ throw;\n1450-expression_statement-226-226", type_label=expression_statement];
1452 [label="227_ _;\n1452-expression_statement-228-228", type_label=expression_statement];
1454 [label="229_ modifier canMint() {\n    if(mintingFinished) throw;\n    _;\n  }\n1454-expression_statement-230-233", type_label=expression_statement];
1457 [label="230_ if\n1457-if-231-231", type_label=if];
3023 [label="230_ end_if", type_label=end_if];
1459 [label="230_ throw;\n1459-expression_statement-231-231", type_label=expression_statement];
1461 [label="231_ _;\n1461-expression_statement-232-232", type_label=expression_statement];
1475 [label="235_ string public name;\n1475-new_variable-236-236", type_label=new_variable];
1480 [label="236_ string public symbol;\n1480-new_variable-237-237", type_label=new_variable];
1485 [label="237_ uint public decimals;\n1485-new_variable-238-238", type_label=new_variable];
1490 [label="238_ CrowdsaleToken\n1490-function_definition-239-247", type_label=function_definition];
1509 [label="239_ owner = msg.sender;\n1509-expression_statement-240-240", type_label=expression_statement];
1515 [label="240_ upgradeMaster = owner;\n1515-expression_statement-241-241", type_label=expression_statement];
1519 [label="241_ name = _name;\n1519-expression_statement-242-242", type_label=expression_statement];
1523 [label="242_ symbol = _symbol;\n1523-expression_statement-243-243", type_label=expression_statement];
1527 [label="243_ totalSupply = _initialSupply;\n1527-expression_statement-244-244", type_label=expression_statement];
1531 [label="244_ decimals = _decimals;\n1531-expression_statement-245-245", type_label=expression_statement];
1535 [label="245_ balances[msg.sender] = totalSupply;\n1535-expression_statement-246-246", type_label=expression_statement];
1543 [label="247_ releaseTokenTransfer\n1543-function_definition-248-251", type_label=function_definition];
1546 [label="247_ onlyReleaseAgent\n1546-expression_statement-248-248", type_label=expression_statement];
1549 [label="248_ mintingFinished = true;\n1549-expression_statement-249-249", type_label=expression_statement];
1554 [label="249_ super.releaseTokenTransfer();\n1554-expression_statement-250-250", type_label=expression_statement];
1559 [label="251_ canUpgrade\n1559-function_definition-252-254", type_label=function_definition];
1562 [label="251_ constant\n1562-expression_statement-252-252", type_label=expression_statement];
1569 [label="252_ return released;\n1569-return-253-253", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
385;
783;
1049;
1142;
122 -> 138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
161 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
207 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
234 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
258 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
271 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
296 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
321 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
346 -> 364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
371 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 383  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
379 -> 1945  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1945 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 1945  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
394 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
468 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
526 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
553 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
571 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
608 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
611 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
643 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
670 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
706 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
708 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
730 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
734 -> 749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
770 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
778 -> 781  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
778 -> 2344  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2344 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 2344  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
794 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
848 -> 856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
856 -> 864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
864 -> 879  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
864 -> 2430  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2430 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
879 -> 2430  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
881 -> 885  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
881 -> 2447  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2447 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 2447  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
887 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
913 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 957  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
952 -> 2518  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2518 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 2518  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
959 -> 963  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
959 -> 2525  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2525 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 2525  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
965 -> 971  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
965 -> 2531  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2531 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
971 -> 2531  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
973 -> 980  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
973 -> 2539  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2539 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
980 -> 2539  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
982 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
989 -> 995  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
989 -> 2555  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2555 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 2555  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
997 -> 1004  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
997 -> 2563  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2563 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 2563  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1011 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1022 -> 1026  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1022 -> 1030  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2588 -> 1052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1026 -> 2588  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1026 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1030 -> 1036  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1030 -> 1040  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1036 -> 2588  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1036 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1040 -> 1044  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1040 -> 1048  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1044 -> 2588  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1044 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1048 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1052 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1060 -> 1064  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1060 -> 2626  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2626 -> 1066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1064 -> 2626  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1066 -> 1072  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1066 -> 2632  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2632 -> 1074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1072 -> 2632  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1078 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1099 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1118  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1111 -> 2677  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2677 -> 1120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 2677  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1122 -> 1131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1131 -> 1138  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1131 -> 2697  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2697 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 2697  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1151 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1177 -> 1181  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1177 -> 2743  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1181 -> 1187  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1181 -> 2747  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2747 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1187 -> 2747  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1191 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1210 -> 1229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 1241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 1258  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1253 -> 2819  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2819 -> 1260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1258 -> 2819  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1265 -> 1272  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1265 -> 2831  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2831 -> 1274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1272 -> 2831  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1276 -> 1298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1298 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1307 -> 1331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1356 -> 1363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1370 -> 1386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 1382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1386 -> 1395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1395 -> 1408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1417 -> 1433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1427 -> 1429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1439 -> 1454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1442 -> 1450  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1442 -> 3008  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3008 -> 1452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 3008  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1457 -> 1459  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1457 -> 3023  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3023 -> 1461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 3023  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1475 -> 1480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1480 -> 1485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1490 -> 1509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1509 -> 1515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1515 -> 1519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1519 -> 1523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1523 -> 1527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1527 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1543 -> 1549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1549 -> 1554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1559 -> 1569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1569 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1049 -> 2588  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
