digraph  {
12 [label="2_ address public owner;\n12-new_variable-3-3", type_label=new_variable];
35 [label="9_ owner = msg.sender;\n35-expression_statement-10-10", type_label=expression_statement];
41 [label="11_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n41-expression_statement-12-15", type_label=expression_statement];
44 [label="12_ require(msg.sender == owner);\n44-expression_statement-13-13", type_label=expression_statement];
53 [label="13_ _;\n53-expression_statement-14-14", type_label=expression_statement];
55 [label="15_ renounceOwnership\n55-function_definition-16-19", type_label=function_definition];
58 [label="15_ onlyOwner\n58-expression_statement-16-16", type_label=expression_statement];
65 [label="17_ owner = address(0);\n65-expression_statement-18-18", type_label=expression_statement];
71 [label="19_ transferOwnership\n71-function_definition-20-22", type_label=function_definition];
78 [label="19_ onlyOwner\n78-expression_statement-20-20", type_label=expression_statement];
81 [label="20_ _transferOwnership(_newOwner);\n81-expression_statement-21-21", type_label=expression_statement];
86 [label="22_ _transferOwnership\n86-function_definition-23-27", type_label=function_definition];
94 [label="23_ require(_newOwner != address(0));\n94-expression_statement-24-24", type_label=expression_statement];
109 [label="25_ owner = _newOwner;\n109-expression_statement-26-26", type_label=expression_statement];
116 [label="29_ totalSupply\n116-function_definition-30-30", type_label=function_definition];
124 [label="30_ balanceOf\n124-function_definition-31-31", type_label=function_definition];
136 [label="31_ transfer\n136-function_definition-32-32", type_label=function_definition];
168 [label="35_ mul\n168-function_definition-36-43", type_label=function_definition];
186 [label="36_ if__a == 0\n186-if-37-39", type_label=if];
1355 [label="36_ end_if", type_label=end_if];
191 [label="37_ return 0;\n191-return-38-38", type_label=return];
193 [label="39_ c = _a * _b;\n193-expression_statement-40-40", type_label=expression_statement];
199 [label="40_ assert(c / _a == _b);\n199-expression_statement-41-41", type_label=expression_statement];
208 [label="41_ return c;\n208-return-42-42", type_label=return];
210 [label="43_ div\n210-function_definition-44-46", type_label=function_definition];
227 [label="44_ return _a / _b;\n227-return-45-45", type_label=return];
231 [label="46_ sub\n231-function_definition-47-50", type_label=function_definition];
248 [label="47_ assert(_b <= _a);\n248-expression_statement-48-48", type_label=expression_statement];
255 [label="48_ return _a - _b;\n255-return-49-49", type_label=return];
259 [label="50_ add\n259-function_definition-51-55", type_label=function_definition];
277 [label="51_ c = _a + _b;\n277-expression_statement-52-52", type_label=expression_statement];
283 [label="52_ assert(c >= _a);\n283-expression_statement-53-53", type_label=expression_statement];
290 [label="53_ return c;\n290-return-54-54", type_label=return];
303 [label="58_ mapping(address => uint256) internal balances;\n303-new_variable-59-59", type_label=new_variable];
310 [label="59_ uint256 internal totalSupply_;\n310-new_variable-60-60", type_label=new_variable];
315 [label="60_ totalSupply\n315-function_definition-61-63", type_label=function_definition];
324 [label="61_ return totalSupply_;\n324-return-62-62", type_label=return];
326 [label="63_ transfer\n326-function_definition-64-71", type_label=function_definition];
342 [label="64_ require(_value <= balances[msg.sender]);\n342-expression_statement-65-65", type_label=expression_statement];
353 [label="65_ require(_to != address(0));\n353-expression_statement-66-66", type_label=expression_statement];
362 [label="66_ balances[msg.sender] = balances[msg.sender].sub(_value);\n362-expression_statement-67-67", type_label=expression_statement];
379 [label="67_ balances[_to] = balances[_to].add(_value);\n379-expression_statement-68-68", type_label=expression_statement];
402 [label="69_ return true;\n402-return-70-70", type_label=return];
405 [label="71_ balanceOf\n405-function_definition-72-74", type_label=function_definition];
418 [label="72_ return balances[_owner];\n418-return-73-73", type_label=return];
428 [label="76_ allowance\n428-function_definition-77-78", type_label=function_definition];
444 [label="78_ transferFrom\n444-function_definition-79-80", type_label=function_definition];
463 [label="80_ approve\n463-function_definition-81-81", type_label=function_definition];
501 [label="88_ mapping (address => mapping (address => uint256)) internal allowed;\n501-new_variable-89-89", type_label=new_variable];
510 [label="89_ transferFrom\n510-function_definition-90-106", type_label=function_definition];
530 [label="97_ require(_value <= balances[_from]);\n530-expression_statement-98-98", type_label=expression_statement];
539 [label="98_ require(_value <= allowed[_from][msg.sender]);\n539-expression_statement-99-99", type_label=expression_statement];
552 [label="99_ require(_to != address(0));\n552-expression_statement-100-100", type_label=expression_statement];
561 [label="100_ balances[_from] = balances[_from].sub(_value);\n561-expression_statement-101-101", type_label=expression_statement];
574 [label="101_ balances[_to] = balances[_to].add(_value);\n574-expression_statement-102-102", type_label=expression_statement];
587 [label="102_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n587-expression_statement-103-103", type_label=expression_statement];
616 [label="104_ return true;\n616-return-105-105", type_label=return];
619 [label="106_ approve\n619-function_definition-107-111", type_label=function_definition];
635 [label="107_ allowed[msg.sender][_spender] = _value;\n635-expression_statement-108-108", type_label=expression_statement];
655 [label="109_ return true;\n655-return-110-110", type_label=return];
658 [label="111_ allowance\n658-function_definition-112-121", type_label=function_definition];
675 [label="119_ return allowed[_owner][_spender];\n675-return-120-120", type_label=return];
681 [label="121_ increaseApproval\n681-function_definition-122-133", type_label=function_definition];
697 [label="128_ allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n697-expression_statement-129-130", type_label=expression_statement];
735 [label="131_ return true;\n735-return-132-132", type_label=return];
738 [label="133_ decreaseApproval\n738-function_definition-134-149", type_label=function_definition];
754 [label="140_ uint256 oldValue = allowed[msg.sender][_spender];\n754-new_variable-141-141", type_label=new_variable];
766 [label="141_ if__subtractedValue >= oldValue\n766-if-142-146", type_label=if];
1935 [label="141_ end_if", type_label=end_if];
771 [label="142_ allowed[msg.sender][_spender] = 0;\n771-expression_statement-143-143", type_label=expression_statement];
782 [label="144_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n782-expression_statement-145-145", type_label=expression_statement];
813 [label="147_ return true;\n813-return-148-148", type_label=return];
832 [label="152_ burn\n832-function_definition-153-155", type_label=function_definition];
840 [label="153_ _burn(msg.sender, _value);\n840-expression_statement-154-154", type_label=expression_statement];
849 [label="155_ _burn\n849-function_definition-156-162", type_label=function_definition];
861 [label="156_ require(_value <= balances[_who]);\n861-expression_statement-157-157", type_label=expression_statement];
870 [label="157_ balances[_who] = balances[_who].sub(_value);\n870-expression_statement-158-158", type_label=expression_statement];
883 [label="158_ totalSupply_ = totalSupply_.sub(_value);\n883-expression_statement-159-159", type_label=expression_statement];
917 [label="164_ burnFrom\n917-function_definition-165-169", type_label=function_definition];
929 [label="165_ require(_value <= allowed[_from][msg.sender]);\n929-expression_statement-166-166", type_label=expression_statement];
942 [label="166_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n942-expression_statement-167-167", type_label=expression_statement];
963 [label="167_ _burn(_from, _value);\n963-expression_statement-168-168", type_label=expression_statement];
979 [label="171_ string public constant name = \"Amplify\";\n979-new_variable-172-172", type_label=new_variable];
986 [label="172_ string public constant symbol = \"AMPX\";\n986-new_variable-173-173", type_label=new_variable];
993 [label="173_ uint8 public constant decimals = 18;\n993-new_variable-174-174", type_label=new_variable];
999 [label="174_ bool public crowdsaleActive = true;\n999-new_variable-175-175", type_label=new_variable];
1006 [label="175_ uint256 public constant INITIAL_SUPPLY = 1200000000000000000000000000;\n1006-new_variable-176-176", type_label=new_variable];
1014 [label="177_ totalSupply_ = INITIAL_SUPPLY;\n1014-expression_statement-178-178", type_label=expression_statement];
1018 [label="178_ balances[msg.sender] = INITIAL_SUPPLY;\n1018-expression_statement-179-179", type_label=expression_statement];
1038 [label="181_ modifier afterCrowdsale {\n        require(\n            msg.sender == owner || !crowdsaleActive,\n              \"Transfers are not allowed until after the crowdsale.\"\n        );\n        _;\n    }\n1038-expression_statement-182-188", type_label=expression_statement];
1041 [label="182_ require(\n            msg.sender == owner || !crowdsaleActive,\n              \"Transfers are not allowed until after the crowdsale.\"\n        );\n1041-expression_statement-183-186", type_label=expression_statement];
1056 [label="186_ _;\n1056-expression_statement-187-187", type_label=expression_statement];
1058 [label="188_ endCrowdsale\n1058-function_definition-189-191", type_label=function_definition];
1061 [label="188_ onlyOwner\n1061-expression_statement-189-189", type_label=expression_statement];
1064 [label="189_ crowdsaleActive = false;\n1064-expression_statement-190-190", type_label=expression_statement];
1069 [label="191_ transfer\n1069-function_definition-192-194", type_label=function_definition];
1080 [label="191_ afterCrowdsale\n1080-expression_statement-192-192", type_label=expression_statement];
1087 [label="192_ return BasicToken.transfer(_to, _value);\n1087-return-193-193", type_label=return];
1096 [label="194_ approve\n1096-function_definition-195-198", type_label=function_definition];
1112 [label="195_ require(_value == 0 || allowed[msg.sender][_spender] == 0, \"Use increaseApproval or decreaseApproval to prevent double-spend.\");\n1112-expression_statement-196-196", type_label=expression_statement];
1132 [label="196_ return StandardToken.approve(_spender, _value);\n1132-return-197-197", type_label=return];
1141 [label="198_ transferFrom\n1141-function_definition-199-201", type_label=function_definition];
1156 [label="198_ afterCrowdsale\n1156-expression_statement-199-199", type_label=expression_statement];
1163 [label="199_ return StandardToken.transferFrom(_from, _to, _value);\n1163-return-200-200", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
797;
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 65  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
71 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
86 -> 94  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 191  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
186 -> 1355  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1355 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 1355  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
191 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
193 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
210 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
231 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
248 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
259 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
290 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
303 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
326 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
402 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
405 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
510 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
552 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
616 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
619 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
655 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
658 -> 675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
681 -> 697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
738 -> 754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
754 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
766 -> 771  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
766 -> 782  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1935 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
771 -> 1935  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
782 -> 1935  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
813 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
832 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
870 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 1018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1041 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1069 -> 1087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1096 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1141 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
