digraph  {
13 [label="2_ totalSupply\n13-function_definition-3-3", type_label=function_definition];
21 [label="3_ balanceOf\n21-function_definition-4-4", type_label=function_definition];
33 [label="4_ allowance\n33-function_definition-5-5", type_label=function_definition];
49 [label="5_ transfer\n49-function_definition-6-6", type_label=function_definition];
64 [label="6_ approve\n64-function_definition-7-7", type_label=function_definition];
79 [label="7_ transferFrom\n79-function_definition-8-8", type_label=function_definition];
129 [label="12_ name\n129-function_definition-13-13", type_label=function_definition];
137 [label="13_ symbol\n137-function_definition-14-14", type_label=function_definition];
145 [label="14_ decimals\n145-function_definition-15-15", type_label=function_definition];
153 [label="15_ totalSupply\n153-function_definition-16-16", type_label=function_definition];
161 [label="16_ balanceOf\n161-function_definition-17-17", type_label=function_definition];
173 [label="17_ transfer\n173-function_definition-18-18", type_label=function_definition];
188 [label="18_ transfer\n188-function_definition-19-19", type_label=function_definition];
228 [label="22_ tokenFallback\n228-function_definition-23-24", type_label=function_definition];
247 [label="26_ mul\n247-function_definition-27-34", type_label=function_definition];
264 [label="27_ if_a == 0\n264-if-28-30", type_label=if];
1422 [label="27_ end_if", type_label=end_if];
269 [label="28_ return 0;\n269-return-29-29", type_label=return];
271 [label="30_ uint256 c = a * b;\n271-new_variable-31-31", type_label=new_variable];
279 [label="31_ require(c / a == b);\n279-expression_statement-32-32", type_label=expression_statement];
288 [label="32_ return c;\n288-return-33-33", type_label=return];
290 [label="34_ div\n290-function_definition-35-39", type_label=function_definition];
307 [label="35_ require(b > 0);\n307-expression_statement-36-36", type_label=expression_statement];
314 [label="36_ uint256 c = a / b;\n314-new_variable-37-37", type_label=new_variable];
322 [label="37_ return c;\n322-return-38-38", type_label=return];
324 [label="39_ sub\n324-function_definition-40-44", type_label=function_definition];
341 [label="40_ require(b <= a);\n341-expression_statement-41-41", type_label=expression_statement];
348 [label="41_ uint256 c = a - b;\n348-new_variable-42-42", type_label=new_variable];
356 [label="42_ return c;\n356-return-43-43", type_label=return];
358 [label="44_ add\n358-function_definition-45-49", type_label=function_definition];
375 [label="45_ uint256 c = a + b;\n375-new_variable-46-46", type_label=new_variable];
383 [label="46_ require(c >= a);\n383-expression_statement-47-47", type_label=expression_statement];
390 [label="47_ return c;\n390-return-48-48", type_label=return];
392 [label="49_ mod\n392-function_definition-50-53", type_label=function_definition];
409 [label="50_ require(b != 0);\n409-expression_statement-51-51", type_label=expression_statement];
416 [label="51_ return a % b;\n416-return-52-52", type_label=return];
429 [label="55_ uint256 public totalSupply;\n429-new_variable-56-56", type_label=new_variable];
439 [label="57_ mapping (address => uint256) internal balances;\n439-new_variable-58-58", type_label=new_variable];
446 [label="58_ mapping (address => mapping (address => uint256)) internal allowed;\n446-new_variable-59-59", type_label=new_variable];
455 [label="59_ balanceOf\n455-function_definition-60-62", type_label=function_definition];
469 [label="60_ return balances[_owner];\n469-return-61-61", type_label=return];
473 [label="62_ transferFrom\n473-function_definition-63-72", type_label=function_definition];
493 [label="63_ require(_to != address(0));\n493-expression_statement-64-64", type_label=expression_statement];
502 [label="64_ require(_value <= balances[_from]);\n502-expression_statement-65-65", type_label=expression_statement];
511 [label="65_ require(_value <= allowed[_from][msg.sender]);\n511-expression_statement-66-66", type_label=expression_statement];
524 [label="66_ balances[_from] = balances[_from].sub(_value);\n524-expression_statement-67-67", type_label=expression_statement];
537 [label="67_ balances[_to] = balances[_to].add(_value);\n537-expression_statement-68-68", type_label=expression_statement];
550 [label="68_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n550-expression_statement-69-69", type_label=expression_statement];
579 [label="70_ return true;\n579-return-71-71", type_label=return];
582 [label="72_ approve\n582-function_definition-73-77", type_label=function_definition];
598 [label="73_ allowed[msg.sender][_spender] = _value;\n598-expression_statement-74-74", type_label=expression_statement];
618 [label="75_ return true;\n618-return-76-76", type_label=return];
621 [label="77_ allowance\n621-function_definition-78-80", type_label=function_definition];
638 [label="78_ return allowed[_owner][_spender];\n638-return-79-79", type_label=return];
644 [label="80_ increaseApproval\n644-function_definition-81-85", type_label=function_definition];
660 [label="81_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n660-expression_statement-82-82", type_label=expression_statement];
697 [label="83_ return true;\n697-return-84-84", type_label=return];
700 [label="85_ decreaseApproval\n700-function_definition-86-95", type_label=function_definition];
716 [label="86_ uint oldValue = allowed[msg.sender][_spender];\n716-new_variable-87-87", type_label=new_variable];
728 [label="87_ if__subtractedValue > oldValue\n728-if-88-92", type_label=if];
1886 [label="87_ end_if", type_label=end_if];
733 [label="88_ allowed[msg.sender][_spender] = 0;\n733-expression_statement-89-89", type_label=expression_statement];
744 [label="90_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n744-expression_statement-91-91", type_label=expression_statement];
775 [label="93_ return true;\n775-return-94-94", type_label=return];
778 [label="95_ transfer\n778-function_definition-96-102", type_label=function_definition];
799 [label="96_ if\n799-if-97-101", type_label=if];
1957 [label="96_ end_if", type_label=end_if];
805 [label="97_ return transferToContract(_to, _value, _data);\n805-return-98-98", type_label=return];
815 [label="99_ return transferToAddress(_to, _value, _data);\n815-return-100-100", type_label=return];
824 [label="102_ transfer\n824-function_definition-103-110", type_label=function_definition];
841 [label="103_ bytes memory empty;\n841-new_variable-104-104", type_label=new_variable];
846 [label="104_ if\n846-if-105-109", type_label=if];
2004 [label="104_ end_if", type_label=end_if];
852 [label="105_ return transferToContract(_to, _value, empty);\n852-return-106-106", type_label=return];
862 [label="107_ return transferToAddress(_to, _value, empty);\n862-return-108-108", type_label=return];
871 [label="110_ isContract\n871-function_definition-111-118", type_label=function_definition];
885 [label="111_ uint length;\n885-new_variable-112-112", type_label=new_variable];
890 [label="112_ require(_addr != address(0));\n890-expression_statement-113-113", type_label=expression_statement];
909 [label="116_ return (length > 0);\n909-return-117-117", type_label=return];
914 [label="118_ transferToAddress\n914-function_definition-119-126", type_label=function_definition];
935 [label="119_ require(balances[msg.sender] >= _value);\n935-expression_statement-120-120", type_label=expression_statement];
946 [label="120_ balances[msg.sender] = balances[msg.sender].sub(_value);\n946-expression_statement-121-121", type_label=expression_statement];
963 [label="121_ balances[_to] = balances[_to].add(_value);\n963-expression_statement-122-122", type_label=expression_statement];
998 [label="124_ return true;\n998-return-125-125", type_label=return];
1001 [label="126_ transferToContract\n1001-function_definition-127-136", type_label=function_definition];
1022 [label="127_ require(balances[msg.sender] >= _value);\n1022-expression_statement-128-128", type_label=expression_statement];
1033 [label="128_ balances[msg.sender] = balances[msg.sender].sub(_value);\n1033-expression_statement-129-129", type_label=expression_statement];
1050 [label="129_ balances[_to] = balances[_to].add(_value);\n1050-expression_statement-130-130", type_label=expression_statement];
1063 [label="130_ ContractReceiver receiver = ContractReceiver(_to);\n1063-new_variable-131-131", type_label=new_variable];
1073 [label="131_ receiver.tokenFallback(msg.sender, _value, _data);\n1073-expression_statement-132-132", type_label=expression_statement];
1108 [label="134_ return true;\n1108-return-135-135", type_label=return];
1117 [label="138_ string public constant name = \"ACLYD CASH\";\n1117-new_variable-139-139", type_label=new_variable];
1124 [label="139_ string public constant symbol = \"ACLYD\";\n1124-new_variable-140-140", type_label=new_variable];
1131 [label="140_ uint8 public constant decimals = 18;\n1131-new_variable-141-141", type_label=new_variable];
1137 [label="141_ uint256 public constant initialSupply = 75000000 * 10 ** uint256(decimals);\n1137-new_variable-142-142", type_label=new_variable];
1151 [label="143_ totalSupply = initialSupply;\n1151-expression_statement-144-144", type_label=expression_statement];
1155 [label="144_ balances[msg.sender] = initialSupply;\n1155-expression_statement-145-145", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
759;
247 -> 264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
264 -> 269  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
264 -> 1422  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1422 -> 271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 1422  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
269 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
271 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
290 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
324 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
341 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
358 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
392 -> 409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
409 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
416 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
439 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
473 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
582 -> 598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
621 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
644 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
700 -> 716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
716 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
728 -> 733  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
728 -> 744  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1886 -> 759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
733 -> 1886  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
744 -> 1886  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
775 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
778 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 805  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
799 -> 815  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1957 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 1957  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
805 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
815 -> 1957  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
815 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
824 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 852  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
846 -> 862  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2004 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 2004  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
852 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
862 -> 2004  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
862 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
871 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
914 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
946 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
998 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1001 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1022 -> 1033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1033 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1108 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1117 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1131 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1151 -> 1155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
