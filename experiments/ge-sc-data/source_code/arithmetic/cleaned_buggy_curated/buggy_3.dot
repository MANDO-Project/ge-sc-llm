digraph  {
13 [label="2_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n13-function_definition-3-6", method="bug_intou27()", type_label=function_definition];
17 [label="3_ uint8 vundflw =0;\n17-new_variable-4-4", method="bug_intou27()", type_label=new_variable];
23 [label="4_ vundflw = vundflw -10;\n23-expression_statement-5-5", method="bug_intou27()", type_label=expression_statement];
43 [label="7_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n43-function_definition-8-11", method="bug_intou31()", type_label=function_definition];
47 [label="8_ uint8 vundflw =0;\n47-new_variable-9-9", method="bug_intou31()", type_label=new_variable];
53 [label="9_ vundflw = vundflw -10;\n53-expression_statement-10-10", method="bug_intou31()", type_label=expression_statement];
73 [label="12_ mapping(address => uint) public lockTime_intou13;\n73-new_variable-13-13", method="", type_label=new_variable];
80 [label="13_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n80-function_definition-14-16", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
88 [label="14_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n88-expression_statement-15-15", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
96 [label="16_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n96-function_definition-17-21", method="withdraw_intou13()", type_label=function_definition];
100 [label="17_ require(now > lockTime_intou13[msg.sender]);\n100-expression_statement-18-18", method="withdraw_intou13()", type_label=expression_statement];
111 [label="18_ uint transferValue_intou13 = 10;\n111-new_variable-19-19", method="withdraw_intou13()", type_label=new_variable];
117 [label="19_ msg.sender.transfer(transferValue_intou13);\n117-expression_statement-20-20", method="withdraw_intou13()", type_label=expression_statement];
140 [label="22_ mapping(address => uint) public lockTime_intou9;\n140-new_variable-23-23", method="", type_label=new_variable];
147 [label="23_ function increaseLockTime_intou9(uint _secondsToIncrease) public {\n        lockTime_intou9[msg.sender] += _secondsToIncrease;   \n    }\n147-function_definition-24-26", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=function_definition];
155 [label="24_ lockTime_intou9[msg.sender] += _secondsToIncrease;\n155-expression_statement-25-25", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=expression_statement];
163 [label="26_ function withdraw_intou9() public {\n        require(now > lockTime_intou9[msg.sender]);    \n        uint transferValue_intou9 = 10;           \n        msg.sender.transfer(transferValue_intou9);\n    }\n163-function_definition-27-31", method="withdraw_intou9()", type_label=function_definition];
167 [label="27_ require(now > lockTime_intou9[msg.sender]);\n167-expression_statement-28-28", method="withdraw_intou9()", type_label=expression_statement];
178 [label="28_ uint transferValue_intou9 = 10;\n178-new_variable-29-29", method="withdraw_intou9()", type_label=new_variable];
184 [label="29_ msg.sender.transfer(transferValue_intou9);\n184-expression_statement-30-30", method="withdraw_intou9()", type_label=expression_statement];
193 [label="31_ uint256 public totalSupply;\n193-new_variable-32-32", method="", type_label=new_variable];
198 [label="32_ mapping(address => uint) public lockTime_intou25;\n198-new_variable-33-33", method="", type_label=new_variable];
205 [label="33_ function increaseLockTime_intou25(uint _secondsToIncrease) public {\n        lockTime_intou25[msg.sender] += _secondsToIncrease;   \n    }\n205-function_definition-34-36", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=function_definition];
213 [label="34_ lockTime_intou25[msg.sender] += _secondsToIncrease;\n213-expression_statement-35-35", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=expression_statement];
221 [label="36_ function withdraw_intou25() public {\n        require(now > lockTime_intou25[msg.sender]);    \n        uint transferValue_intou25 = 10;           \n        msg.sender.transfer(transferValue_intou25);\n    }\n221-function_definition-37-41", method="withdraw_intou25()", type_label=function_definition];
225 [label="37_ require(now > lockTime_intou25[msg.sender]);\n225-expression_statement-38-38", method="withdraw_intou25()", type_label=expression_statement];
236 [label="38_ uint transferValue_intou25 = 10;\n236-new_variable-39-39", method="withdraw_intou25()", type_label=new_variable];
242 [label="39_ msg.sender.transfer(transferValue_intou25);\n242-expression_statement-40-40", method="withdraw_intou25()", type_label=expression_statement];
251 [label="41_ string public name;\n251-new_variable-42-42", method="", type_label=new_variable];
256 [label="42_ function bug_intou19() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n256-function_definition-43-46", method="bug_intou19()", type_label=function_definition];
260 [label="43_ uint8 vundflw =0;\n260-new_variable-44-44", method="bug_intou19()", type_label=new_variable];
266 [label="44_ vundflw = vundflw -10;\n266-expression_statement-45-45", method="bug_intou19()", type_label=expression_statement];
272 [label="46_ uint8 public decimals;\n272-new_variable-47-47", method="", type_label=new_variable];
277 [label="47_ mapping(address => uint) balances_intou26;\n277-new_variable-48-48", method="", type_label=new_variable];
283 [label="48_ function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] - _value >= 0);   \n    balances_intou26[msg.sender] -= _value;   \n    balances_intou26[_to] += _value;   \n    return true;\n  }\n283-function_definition-49-54", method="transfer_intou26(address _to,uint _value)", type_label=function_definition];
299 [label="49_ require(balances_intou26[msg.sender] - _value >= 0);\n299-expression_statement-50-50", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
312 [label="50_ balances_intou26[msg.sender] -= _value;\n312-expression_statement-51-51", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
320 [label="51_ balances_intou26[_to] += _value;\n320-expression_statement-52-52", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
326 [label="52_ return true;\n326-return-53-53", method="transfer_intou26(address _to,uint _value)", type_label=return];
329 [label="54_ string public symbol;\n329-new_variable-55-55", method="", type_label=new_variable];
334 [label="55_ function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou20;    \n}\n334-function_definition-56-59", method="bug_intou20(uint8 p_intou20)", type_label=function_definition];
342 [label="56_ uint8 vundflw1=0;\n342-new_variable-57-57", method="bug_intou20(uint8 p_intou20)", type_label=new_variable];
348 [label="57_ vundflw1 = vundflw1 + p_intou20;\n348-expression_statement-58-58", method="bug_intou20(uint8 p_intou20)", type_label=expression_statement];
354 [label="59_ address public owner;\n354-new_variable-60-60", method="", type_label=new_variable];
359 [label="60_ function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou32;    \n}\n359-function_definition-61-64", method="bug_intou32(uint8 p_intou32)", type_label=function_definition];
367 [label="61_ uint8 vundflw1=0;\n367-new_variable-62-62", method="bug_intou32(uint8 p_intou32)", type_label=new_variable];
373 [label="62_ vundflw1 = vundflw1 + p_intou32;\n373-expression_statement-63-63", method="bug_intou32(uint8 p_intou32)", type_label=expression_statement];
379 [label="64_ mapping (address => uint256) internal balances;\n379-new_variable-65-65", method="", type_label=new_variable];
386 [label="65_ mapping(address => uint) balances_intou38;\n386-new_variable-66-66", method="", type_label=new_variable];
392 [label="66_ function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] - _value >= 0);   \n    balances_intou38[msg.sender] -= _value;   \n    balances_intou38[_to] += _value;   \n    return true;\n  }\n392-function_definition-67-72", method="transfer_intou38(address _to,uint _value)", type_label=function_definition];
408 [label="67_ require(balances_intou38[msg.sender] - _value >= 0);\n408-expression_statement-68-68", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
421 [label="68_ balances_intou38[msg.sender] -= _value;\n421-expression_statement-69-69", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
429 [label="69_ balances_intou38[_to] += _value;\n429-expression_statement-70-70", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
435 [label="70_ return true;\n435-return-71-71", method="transfer_intou38(address _to,uint _value)", type_label=return];
438 [label="72_ mapping (address => mapping (address => uint256)) internal allowed;\n438-new_variable-73-73", method="", type_label=new_variable];
447 [label="73_ function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou4;    \n}\n447-function_definition-74-77", method="bug_intou4(uint8 p_intou4)", type_label=function_definition];
455 [label="74_ uint8 vundflw1=0;\n455-new_variable-75-75", method="bug_intou4(uint8 p_intou4)", type_label=new_variable];
461 [label="75_ vundflw1 = vundflw1 + p_intou4;\n461-expression_statement-76-76", method="bug_intou4(uint8 p_intou4)", type_label=expression_statement];
467 [label="77_ bool isTransPaused=false;\n467-new_variable-78-78", method="", type_label=new_variable];
483 [label="82_ owner=msg.sender;\n483-expression_statement-83-83", method="", type_label=expression_statement];
489 [label="83_ if__initialAmount<=0\n489-if-84-90", method="", type_label=if];
1709 [label="83_ end_if", method="", type_label=end_if];
494 [label="84_ totalSupply = 100000000000000000;\n494-expression_statement-85-85", method="", type_label=expression_statement];
498 [label="85_ balances[owner]=totalSupply;\n498-expression_statement-86-86", method="", type_label=expression_statement];
505 [label="87_ totalSupply = _initialAmount;\n505-expression_statement-88-88", method="", type_label=expression_statement];
509 [label="88_ balances[owner]=_initialAmount;\n509-expression_statement-89-89", method="", type_label=expression_statement];
515 [label="90_ if__decimalUnits<=0\n515-if-91-95", method="", type_label=if];
1735 [label="90_ end_if", method="", type_label=end_if];
520 [label="91_ decimals=2;\n520-expression_statement-92-92", method="", type_label=expression_statement];
525 [label="93_ decimals = _decimalUnits;\n525-expression_statement-94-94", method="", type_label=expression_statement];
529 [label="95_ name = \"CareerOn Chain Token\";\n529-expression_statement-96-96", method="", type_label=expression_statement];
534 [label="96_ symbol = \"COT\";\n534-expression_statement-97-97", method="", type_label=expression_statement];
539 [label="98_ function bug_intou7() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n539-function_definition-99-102", method="bug_intou7()", type_label=function_definition];
543 [label="99_ uint8 vundflw =0;\n543-new_variable-100-100", method="bug_intou7()", type_label=new_variable];
549 [label="100_ vundflw = vundflw -10;\n549-expression_statement-101-101", method="bug_intou7()", type_label=expression_statement];
555 [label="102_ function transfer(\n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n        balances[msg.sender] -= _value; \n        balances[_to] += _value; \n		if(msg.sender==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(msg.sender, _to, _value); \n		}\n        return true;\n    }\n555-function_definition-103-120", method="transfer(address _to,uint256 _value)", type_label=function_definition];
572 [label="106_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n572-expression_statement-107-111", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
602 [label="111_ balances[msg.sender] -= _value;\n602-expression_statement-112-112", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
610 [label="112_ balances[_to] += _value;\n610-expression_statement-113-113", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
616 [label="113_ if_msg.sender==owner\n616-if-114-118", method="transfer(address _to,uint256 _value)", type_label=if];
1836 [label="113_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
644 [label="118_ return true;\n644-return-119-119", method="transfer(address _to,uint256 _value)", type_label=return];
647 [label="120_ function bug_intou23() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n647-function_definition-121-124", method="bug_intou23()", type_label=function_definition];
651 [label="121_ uint8 vundflw =0;\n651-new_variable-122-122", method="bug_intou23()", type_label=new_variable];
657 [label="122_ vundflw = vundflw -10;\n657-expression_statement-123-123", method="bug_intou23()", type_label=expression_statement];
663 [label="124_ function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n        balances[_to] += _value; \n        balances[_from] -= _value;  \n        allowed[_from][msg.sender] -= _value; \n        if(_from==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(_from, _to, _value); \n		}\n        return true;\n    }\n663-function_definition-125-145", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
684 [label="129_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n684-expression_statement-130-135", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
724 [label="135_ balances[_to] += _value;\n724-expression_statement-136-136", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
730 [label="136_ balances[_from] -= _value;\n730-expression_statement-137-137", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
736 [label="137_ allowed[_from][msg.sender] -= _value;\n736-expression_statement-138-138", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
746 [label="138_ if__from==owner\n746-if-139-143", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1966 [label="138_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
770 [label="143_ return true;\n770-return-144-144", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
773 [label="145_ mapping(address => uint) balances_intou14;\n773-new_variable-146-146", method="", type_label=new_variable];
779 [label="146_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n779-function_definition-147-152", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
795 [label="147_ require(balances_intou14[msg.sender] - _value >= 0);\n795-expression_statement-148-148", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
808 [label="148_ balances_intou14[msg.sender] -= _value;\n808-expression_statement-149-149", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
816 [label="149_ balances_intou14[_to] += _value;\n816-expression_statement-150-150", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
822 [label="150_ return true;\n822-return-151-151", method="transfer_intou14(address _to,uint _value)", type_label=return];
825 [label="152_ function approve(address _spender, uint256 _value) public returns (bool success) \n    { \n        assert(msg.sender!=_spender && _value>0);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n825-function_definition-153-159", method="approve(address _spender,uint256 _value)", type_label=function_definition];
842 [label="154_ assert(msg.sender!=_spender && _value>0);\n842-expression_statement-155-155", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
855 [label="155_ allowed[msg.sender][_spender] = _value;\n855-expression_statement-156-156", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
875 [label="157_ return true;\n875-return-158-158", method="approve(address _spender,uint256 _value)", type_label=return];
878 [label="159_ mapping(address => uint) balances_intou30;\n878-new_variable-160-160", method="", type_label=new_variable];
884 [label="160_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n884-function_definition-161-166", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
900 [label="161_ require(balances_intou30[msg.sender] - _value >= 0);\n900-expression_statement-162-162", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
913 [label="162_ balances_intou30[msg.sender] -= _value;\n913-expression_statement-163-163", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
921 [label="163_ balances_intou30[_to] += _value;\n921-expression_statement-164-164", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
927 [label="164_ return true;\n927-return-165-165", method="transfer_intou30(address _to,uint _value)", type_label=return];
930 [label="166_ function allowance(\n        address _owner, \n        address _spender) public view returns (uint256 remaining) \n    {\n        return allowed[_owner][_spender]; \n    }\n930-function_definition-167-172", method="allowance(address _owner,address _spender)", type_label=function_definition];
948 [label="170_ return allowed[_owner][_spender];\n948-return-171-171", method="allowance(address _owner,address _spender)", type_label=return];
954 [label="172_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n954-function_definition-173-176", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
962 [label="173_ uint8 vundflw1=0;\n962-new_variable-174-174", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
968 [label="174_ vundflw1 = vundflw1 + p_intou8;\n968-expression_statement-175-175", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
974 [label="176_ function balanceOf(address accountAddr) public view returns (uint256) {\n        return balances[accountAddr];\n    }\n974-function_definition-177-179", method="balanceOf(address accountAddr)", type_label=function_definition];
987 [label="177_ return balances[accountAddr];\n987-return-178-178", method="balanceOf(address accountAddr)", type_label=return];
991 [label="179_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n991-function_definition-180-183", method="bug_intou39()", type_label=function_definition];
995 [label="180_ uint8 vundflw =0;\n995-new_variable-181-181", method="bug_intou39()", type_label=new_variable];
1001 [label="181_ vundflw = vundflw -10;\n1001-expression_statement-182-182", method="bug_intou39()", type_label=expression_statement];
1007 [label="183_ function changeOwner(address newOwner) public{\n        assert(msg.sender==owner && msg.sender!=newOwner);\n        balances[newOwner]=balances[owner];\n        balances[owner]=0;\n        owner=newOwner;\n        emit OwnerChang(msg.sender,newOwner,balances[owner]); \n    }\n1007-function_definition-184-190", method="changeOwner(address newOwner)", type_label=function_definition];
1015 [label="184_ assert(msg.sender==owner && msg.sender!=newOwner);\n1015-expression_statement-185-185", method="changeOwner(address newOwner)", type_label=expression_statement];
1030 [label="185_ balances[newOwner]=balances[owner];\n1030-expression_statement-186-186", method="changeOwner(address newOwner)", type_label=expression_statement];
1038 [label="186_ balances[owner]=0;\n1038-expression_statement-187-187", method="changeOwner(address newOwner)", type_label=expression_statement];
1044 [label="187_ owner=newOwner;\n1044-expression_statement-188-188", method="changeOwner(address newOwner)", type_label=expression_statement];
1060 [label="190_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n1060-function_definition-191-194", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
1068 [label="191_ uint8 vundflw1=0;\n1068-new_variable-192-192", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
1074 [label="192_ vundflw1 = vundflw1 + p_intou36;\n1074-expression_statement-193-193", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
1080 [label="194_ function setPauseStatus(bool isPaused)public{\n        assert(msg.sender==owner);\n        isTransPaused=isPaused;\n    }\n1080-function_definition-195-198", method="setPauseStatus(bool isPaused)", type_label=function_definition];
1088 [label="195_ assert(msg.sender==owner);\n1088-expression_statement-196-196", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1097 [label="196_ isTransPaused=isPaused;\n1097-expression_statement-197-197", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1101 [label="198_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1101-function_definition-199-202", method="bug_intou35()", type_label=function_definition];
1105 [label="199_ uint8 vundflw =0;\n1105-new_variable-200-200", method="bug_intou35()", type_label=new_variable];
1111 [label="200_ vundflw = vundflw -10;\n1111-expression_statement-201-201", method="bug_intou35()", type_label=expression_statement];
1117 [label="202_ function changeContractName(string memory _newName,string memory _newSymbol) public {\n        assert(msg.sender==owner);\n        name=_newName;\n        symbol=_newSymbol;\n    }\n1117-function_definition-203-207", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=function_definition];
1129 [label="203_ assert(msg.sender==owner);\n1129-expression_statement-204-204", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1138 [label="204_ name=_newName;\n1138-expression_statement-205-205", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1142 [label="205_ symbol=_newSymbol;\n1142-expression_statement-206-206", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1146 [label="207_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n1146-function_definition-208-211", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
1154 [label="208_ uint8 vundflw1=0;\n1154-new_variable-209-209", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
1160 [label="209_ vundflw1 = vundflw1 + p_intou40;\n1160-expression_statement-210-210", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
1172 [label="214_ mapping(address => uint) public lockTime_intou33;\n1172-new_variable-215-215", method="", type_label=new_variable];
1179 [label="215_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n1179-function_definition-216-218", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
1187 [label="216_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n1187-expression_statement-217-217", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
1195 [label="218_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n1195-function_definition-219-223", method="withdraw_intou33()", type_label=function_definition];
1199 [label="219_ require(now > lockTime_intou33[msg.sender]);\n1199-expression_statement-220-220", method="withdraw_intou33()", type_label=expression_statement];
1210 [label="220_ uint transferValue_intou33 = 10;\n1210-new_variable-221-221", method="withdraw_intou33()", type_label=new_variable];
1216 [label="221_ msg.sender.transfer(transferValue_intou33);\n1216-expression_statement-222-222", method="withdraw_intou33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
634;
762;
13 -> 17  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
17 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
43 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
111 -> 117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
147 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
221 -> 225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
256 -> 260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
260 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
272 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
312 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
334 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
367 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
429 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
447 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 494  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
489 -> 505  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1709 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 1709  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
505 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 1709  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
515 -> 520  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
515 -> 525  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1735 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 1735  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
525 -> 1735  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
529 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
644 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
647 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
730 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
779 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
825 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
842 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
884 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
913 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
930 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
954 -> 962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
962 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
974 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
991 -> 995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 1001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1007 -> 1015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1015 -> 1030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1030 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1060 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 1105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1105 -> 1111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1154 -> 1160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 1210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1210 -> 1216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
634 -> 1836  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
762 -> 1966  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
