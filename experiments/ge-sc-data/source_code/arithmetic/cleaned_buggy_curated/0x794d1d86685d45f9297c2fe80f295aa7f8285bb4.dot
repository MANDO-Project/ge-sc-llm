digraph  {
13 [label="2_ totalSupply\n13-function_definition-3-3", type_label=function_definition];
21 [label="3_ balanceOf\n21-function_definition-4-4", type_label=function_definition];
33 [label="4_ transfer\n33-function_definition-5-5", type_label=function_definition];
49 [label="5_ transferFrom\n49-function_definition-6-6", type_label=function_definition];
69 [label="6_ approve\n69-function_definition-7-7", type_label=function_definition];
85 [label="7_ allowance\n85-function_definition-8-8", type_label=function_definition];
133 [label="12_ mul\n133-function_definition-13-20", type_label=function_definition];
150 [label="13_ if_a == 0\n150-if-14-16", type_label=if];
969 [label="13_ end_if", type_label=end_if];
155 [label="14_ return 0;\n155-return-15-15", type_label=return];
157 [label="16_ uint256 c = a * b;\n157-new_variable-17-17", type_label=new_variable];
165 [label="17_ require(c / a == b);\n165-expression_statement-18-18", type_label=expression_statement];
174 [label="18_ return c;\n174-return-19-19", type_label=return];
176 [label="20_ div\n176-function_definition-21-25", type_label=function_definition];
193 [label="21_ require(b > 0);\n193-expression_statement-22-22", type_label=expression_statement];
200 [label="22_ uint256 c = a / b;\n200-new_variable-23-23", type_label=new_variable];
208 [label="23_ return c;\n208-return-24-24", type_label=return];
210 [label="25_ sub\n210-function_definition-26-30", type_label=function_definition];
227 [label="26_ require(b <= a);\n227-expression_statement-27-27", type_label=expression_statement];
234 [label="27_ uint256 c = a - b;\n234-new_variable-28-28", type_label=new_variable];
242 [label="28_ return c;\n242-return-29-29", type_label=return];
244 [label="30_ add\n244-function_definition-31-35", type_label=function_definition];
261 [label="31_ uint256 c = a + b;\n261-new_variable-32-32", type_label=new_variable];
269 [label="32_ require(c >= a);\n269-expression_statement-33-33", type_label=expression_statement];
276 [label="33_ return c;\n276-return-34-34", type_label=return];
278 [label="35_ mod\n278-function_definition-36-39", type_label=function_definition];
295 [label="36_ require(b != 0);\n295-expression_statement-37-37", type_label=expression_statement];
302 [label="37_ return a % b;\n302-return-38-38", type_label=return];
317 [label="42_ string public constant symbol = \"PALS\";\n317-new_variable-43-43", type_label=new_variable];
324 [label="43_ string public constant name = \"PALS\";\n324-new_variable-44-44", type_label=new_variable];
331 [label="44_ uint8 public constant decimals = 18;\n331-new_variable-45-45", type_label=new_variable];
337 [label="45_ uint256 _totalSupply = 500000000000000000000000000;\n337-new_variable-46-46", type_label=new_variable];
342 [label="46_ struct LockAccount{\n        uint status;\n    }\n342-expression_statement-47-49", type_label=expression_statement];
348 [label="49_ mapping (address => LockAccount) lockAccount;\n348-new_variable-50-50", type_label=new_variable];
355 [label="50_ address[] public AllLockAccounts;\n355-new_variable-51-51", type_label=new_variable];
361 [label="51_ address public owner;\n361-new_variable-52-52", type_label=new_variable];
366 [label="52_ mapping (address => uint256) balances;\n366-new_variable-53-53", type_label=new_variable];
372 [label="53_ mapping (address => mapping (address => uint256)) allowed;\n372-new_variable-54-54", type_label=new_variable];
380 [label="54_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n380-expression_statement-55-58", type_label=expression_statement];
383 [label="55_ require(msg.sender == owner);\n383-expression_statement-56-56", type_label=expression_statement];
392 [label="56_ _;\n392-expression_statement-57-57", type_label=expression_statement];
396 [label="59_ owner = msg.sender;\n396-expression_statement-60-60", type_label=expression_statement];
402 [label="60_ balances[owner] = _totalSupply;\n402-expression_statement-61-61", type_label=expression_statement];
408 [label="62_ totalSupply\n408-function_definition-63-65", type_label=function_definition];
417 [label="63_ return _totalSupply;\n417-return-64-64", type_label=return];
419 [label="65_ setLockAccount\n419-function_definition-66-70", type_label=function_definition];
427 [label="66_ require(msg.sender == owner);\n427-expression_statement-67-67", type_label=expression_statement];
436 [label="67_ lockAccount[_addr].status = 1;\n436-expression_statement-68-68", type_label=expression_statement];
444 [label="68_ AllLockAccounts.push(_addr) -1;\n444-expression_statement-69-69", type_label=expression_statement];
453 [label="70_ getLockAccounts\n453-function_definition-71-73", type_label=function_definition];
463 [label="71_ return AllLockAccounts;\n463-return-72-72", type_label=return];
465 [label="73_ unLockAccount\n465-function_definition-74-77", type_label=function_definition];
473 [label="74_ require(msg.sender == owner);\n473-expression_statement-75-75", type_label=expression_statement];
482 [label="75_ lockAccount[_addr].status = 0;\n482-expression_statement-76-76", type_label=expression_statement];
490 [label="77_ isLock\n490-function_definition-78-84", type_label=function_definition];
503 [label="78_ uint lS = lockAccount[_addr].status;\n503-new_variable-79-79", type_label=new_variable];
513 [label="79_ if_lS == 1\n513-if-80-82", type_label=if];
1332 [label="79_ end_if", type_label=end_if];
518 [label="80_ return true;\n518-return-81-81", type_label=return];
521 [label="82_ return false;\n521-return-83-83", type_label=return];
524 [label="84_ getLockAccount\n524-function_definition-85-87", type_label=function_definition];
537 [label="85_ return lockAccount[_addr].status;\n537-return-86-86", type_label=return];
543 [label="87_ balanceOf\n543-function_definition-88-90", type_label=function_definition];
556 [label="88_ return balances[_owner];\n556-return-89-89", type_label=return];
560 [label="90_ transfer\n560-function_definition-91-103", type_label=function_definition];
577 [label="91_ if\n577-if-92-102", type_label=if];
1396 [label="91_ end_if", type_label=end_if];
600 [label="94_ balances[msg.sender] = balances[msg.sender].sub(_amount);\n600-expression_statement-95-95", type_label=expression_statement];
617 [label="95_ balances[_to] = balances[_to].add(_amount);\n617-expression_statement-96-96", type_label=expression_statement];
640 [label="97_ return true;\n640-return-98-98", type_label=return];
644 [label="100_ return false;\n644-return-101-101", type_label=return];
647 [label="103_ transferFrom\n647-function_definition-104-122", type_label=function_definition];
667 [label="108_ if\n667-if-109-121", type_label=if];
1486 [label="108_ end_if", type_label=end_if];
698 [label="112_ balances[_from] = balances[_from].sub(_amount);\n698-expression_statement-113-113", type_label=expression_statement];
711 [label="113_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n711-expression_statement-114-114", type_label=expression_statement];
732 [label="114_ balances[_to] = balances[_to].add(_amount);\n732-expression_statement-115-115", type_label=expression_statement];
753 [label="116_ return true;\n753-return-117-117", type_label=return];
757 [label="119_ return false;\n757-return-120-120", type_label=return];
760 [label="122_ approve\n760-function_definition-123-127", type_label=function_definition];
777 [label="123_ allowed[msg.sender][_spender] = _amount;\n777-expression_statement-124-124", type_label=expression_statement];
797 [label="125_ return true;\n797-return-126-126", type_label=return];
800 [label="127_ allowance\n800-function_definition-128-130", type_label=function_definition];
818 [label="128_ return allowed[_owner][_spender];\n818-return-129-129", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 155  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
150 -> 969  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
969 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 969  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
157 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
176 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
210 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
234 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
244 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
276 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
278 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
317 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
372 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
419 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
465 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 518  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
513 -> 1332  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1332 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 1332  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
518 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
521 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
524 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
543 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
560 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 600  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
577 -> 644  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1396 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 1396  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
640 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
644 -> 1396  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
644 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
647 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
667 -> 698  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
667 -> 757  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1486 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
698 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
711 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
753 -> 1486  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
753 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
757 -> 1486  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
757 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
760 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
800 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
