digraph  {
13 [label="2_ totalSupply\n13-function_definition-3-3", type_label=function_definition];
21 [label="3_ balanceOf\n21-function_definition-4-4", type_label=function_definition];
33 [label="4_ allowance\n33-function_definition-5-5", type_label=function_definition];
49 [label="5_ transfer\n49-function_definition-6-6", type_label=function_definition];
64 [label="6_ approve\n64-function_definition-7-7", type_label=function_definition];
79 [label="7_ transferFrom\n79-function_definition-8-8", type_label=function_definition];
129 [label="12_ int256 constant private INT256_MIN = -2**255;\n129-new_variable-13-13", type_label=new_variable];
138 [label="13_ mul\n138-function_definition-14-21", type_label=function_definition];
155 [label="14_ if_a == 0\n155-if-15-17", type_label=if];
2025 [label="14_ end_if", type_label=end_if];
160 [label="15_ return 0;\n160-return-16-16", type_label=return];
162 [label="17_ uint256 c = a * b;\n162-new_variable-18-18", type_label=new_variable];
170 [label="18_ require(c / a == b);\n170-expression_statement-19-19", type_label=expression_statement];
179 [label="19_ return c;\n179-return-20-20", type_label=return];
181 [label="21_ mul\n181-function_definition-22-30", type_label=function_definition];
198 [label="22_ if_a == 0\n198-if-23-25", type_label=if];
2068 [label="22_ end_if", type_label=end_if];
203 [label="23_ return 0;\n203-return-24-24", type_label=return];
205 [label="25_ require(!(a == -1 && b == INT256_MIN));\n205-expression_statement-26-26", type_label=expression_statement];
219 [label="26_ int256 c = a * b;\n219-new_variable-27-27", type_label=new_variable];
227 [label="27_ require(c / a == b);\n227-expression_statement-28-28", type_label=expression_statement];
236 [label="28_ return c;\n236-return-29-29", type_label=return];
238 [label="30_ div\n238-function_definition-31-35", type_label=function_definition];
255 [label="31_ require(b > 0);\n255-expression_statement-32-32", type_label=expression_statement];
262 [label="32_ uint256 c = a / b;\n262-new_variable-33-33", type_label=new_variable];
270 [label="33_ return c;\n270-return-34-34", type_label=return];
272 [label="35_ div\n272-function_definition-36-41", type_label=function_definition];
289 [label="36_ require(b != 0);\n289-expression_statement-37-37", type_label=expression_statement];
296 [label="37_ require(!(b == -1 && a == INT256_MIN));\n296-expression_statement-38-38", type_label=expression_statement];
310 [label="38_ int256 c = a / b;\n310-new_variable-39-39", type_label=new_variable];
318 [label="39_ return c;\n318-return-40-40", type_label=return];
320 [label="41_ sub\n320-function_definition-42-46", type_label=function_definition];
337 [label="42_ require(b <= a);\n337-expression_statement-43-43", type_label=expression_statement];
344 [label="43_ uint256 c = a - b;\n344-new_variable-44-44", type_label=new_variable];
352 [label="44_ return c;\n352-return-45-45", type_label=return];
354 [label="46_ sub\n354-function_definition-47-51", type_label=function_definition];
371 [label="47_ int256 c = a - b;\n371-new_variable-48-48", type_label=new_variable];
379 [label="48_ require((b >= 0 && c <= a) || (b < 0 && c > a));\n379-expression_statement-49-49", type_label=expression_statement];
400 [label="49_ return c;\n400-return-50-50", type_label=return];
402 [label="51_ add\n402-function_definition-52-56", type_label=function_definition];
419 [label="52_ uint256 c = a + b;\n419-new_variable-53-53", type_label=new_variable];
427 [label="53_ require(c >= a);\n427-expression_statement-54-54", type_label=expression_statement];
434 [label="54_ return c;\n434-return-55-55", type_label=return];
436 [label="56_ add\n436-function_definition-57-61", type_label=function_definition];
453 [label="57_ int256 c = a + b;\n453-new_variable-58-58", type_label=new_variable];
461 [label="58_ require((b >= 0 && c >= a) || (b < 0 && c < a));\n461-expression_statement-59-59", type_label=expression_statement];
482 [label="59_ return c;\n482-return-60-60", type_label=return];
484 [label="61_ mod\n484-function_definition-62-65", type_label=function_definition];
501 [label="62_ require(b != 0);\n501-expression_statement-63-63", type_label=expression_statement];
508 [label="63_ return a % b;\n508-return-64-64", type_label=return];
523 [label="68_ mapping (address => uint256) private _balances;\n523-new_variable-69-69", type_label=new_variable];
530 [label="69_ mapping (address => mapping (address => uint256)) private _allowed;\n530-new_variable-70-70", type_label=new_variable];
539 [label="70_ uint256 private _totalSupply;\n539-new_variable-71-71", type_label=new_variable];
544 [label="71_ totalSupply\n544-function_definition-72-74", type_label=function_definition];
553 [label="72_ return _totalSupply;\n553-return-73-73", type_label=return];
555 [label="74_ balanceOf\n555-function_definition-75-77", type_label=function_definition];
568 [label="75_ return _balances[owner];\n568-return-76-76", type_label=return];
572 [label="77_ allowance\n572-function_definition-78-80", type_label=function_definition];
589 [label="78_ return _allowed[owner][spender];\n589-return-79-79", type_label=return];
595 [label="80_ transfer\n595-function_definition-81-84", type_label=function_definition];
611 [label="81_ _transfer(msg.sender, to, value);\n611-expression_statement-82-82", type_label=expression_statement];
622 [label="82_ return true;\n622-return-83-83", type_label=return];
625 [label="84_ approve\n625-function_definition-85-90", type_label=function_definition];
641 [label="85_ require(spender != address(0));\n641-expression_statement-86-86", type_label=expression_statement];
650 [label="86_ _allowed[msg.sender][spender] = value;\n650-expression_statement-87-87", type_label=expression_statement];
670 [label="88_ return true;\n670-return-89-89", type_label=return];
673 [label="90_ transferFrom\n673-function_definition-91-96", type_label=function_definition];
693 [label="91_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n693-expression_statement-92-92", type_label=expression_statement];
714 [label="92_ _transfer(from, to, value);\n714-expression_statement-93-93", type_label=expression_statement];
739 [label="94_ return true;\n739-return-95-95", type_label=return];
742 [label="96_ increaseAllowance\n742-function_definition-97-102", type_label=function_definition];
758 [label="97_ require(spender != address(0));\n758-expression_statement-98-98", type_label=expression_statement];
767 [label="98_ _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n767-expression_statement-99-99", type_label=expression_statement];
804 [label="100_ return true;\n804-return-101-101", type_label=return];
807 [label="102_ decreaseAllowance\n807-function_definition-103-108", type_label=function_definition];
823 [label="103_ require(spender != address(0));\n823-expression_statement-104-104", type_label=expression_statement];
832 [label="104_ _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n832-expression_statement-105-105", type_label=expression_statement];
869 [label="106_ return true;\n869-return-107-107", type_label=return];
872 [label="108_ _transfer\n872-function_definition-109-114", type_label=function_definition];
888 [label="109_ require(to != address(0));\n888-expression_statement-110-110", type_label=expression_statement];
897 [label="110_ _balances[from] = _balances[from].sub(value);\n897-expression_statement-111-111", type_label=expression_statement];
910 [label="111_ _balances[to] = _balances[to].add(value);\n910-expression_statement-112-112", type_label=expression_statement];
931 [label="114_ _mint\n931-function_definition-115-120", type_label=function_definition];
943 [label="115_ require(account != address(0));\n943-expression_statement-116-116", type_label=expression_statement];
952 [label="116_ _totalSupply = _totalSupply.add(value);\n952-expression_statement-117-117", type_label=expression_statement];
961 [label="117_ _balances[account] = _balances[account].add(value);\n961-expression_statement-118-118", type_label=expression_statement];
984 [label="120_ _burn\n984-function_definition-121-126", type_label=function_definition];
996 [label="121_ require(account != address(0));\n996-expression_statement-122-122", type_label=expression_statement];
1005 [label="122_ _totalSupply = _totalSupply.sub(value);\n1005-expression_statement-123-123", type_label=expression_statement];
1014 [label="123_ _balances[account] = _balances[account].sub(value);\n1014-expression_statement-124-124", type_label=expression_statement];
1037 [label="126_ _burnFrom\n1037-function_definition-127-131", type_label=function_definition];
1049 [label="127_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n1049-expression_statement-128-128", type_label=expression_statement];
1070 [label="128_ _burn(account, value);\n1070-expression_statement-129-129", type_label=expression_statement];
1096 [label="133_ address private _owner;\n1096-new_variable-134-134", type_label=new_variable];
1113 [label="136_ _owner = msg.sender;\n1113-expression_statement-137-137", type_label=expression_statement];
1127 [label="139_ owner\n1127-function_definition-140-142", type_label=function_definition];
1136 [label="140_ return _owner;\n1136-return-141-141", type_label=return];
1138 [label="142_ modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n1138-expression_statement-143-146", type_label=expression_statement];
1141 [label="143_ require(isOwner());\n1141-expression_statement-144-144", type_label=expression_statement];
1147 [label="144_ _;\n1147-expression_statement-145-145", type_label=expression_statement];
1149 [label="146_ isOwner\n1149-function_definition-147-149", type_label=function_definition];
1158 [label="147_ return msg.sender == _owner;\n1158-return-148-148", type_label=return];
1164 [label="149_ renounceOwnership\n1164-function_definition-150-153", type_label=function_definition];
1167 [label="149_ onlyOwner\n1167-expression_statement-150-150", type_label=expression_statement];
1178 [label="151_ _owner = address(0);\n1178-expression_statement-152-152", type_label=expression_statement];
1184 [label="153_ transferOwnership\n1184-function_definition-154-156", type_label=function_definition];
1191 [label="153_ onlyOwner\n1191-expression_statement-154-154", type_label=expression_statement];
1194 [label="154_ _transferOwnership(newOwner);\n1194-expression_statement-155-155", type_label=expression_statement];
1199 [label="156_ _transferOwnership\n1199-function_definition-157-161", type_label=function_definition];
1207 [label="157_ require(newOwner != address(0));\n1207-expression_statement-158-158", type_label=expression_statement];
1222 [label="159_ _owner = newOwner;\n1222-expression_statement-160-160", type_label=expression_statement];
1235 [label="163_ string public constant name = \"Bitenny\";\n1235-new_variable-164-164", type_label=new_variable];
1242 [label="164_ string public constant symbol = \"BTNY\";\n1242-new_variable-165-165", type_label=new_variable];
1249 [label="165_ uint32 public constant decimals = 18;\n1249-new_variable-166-166", type_label=new_variable];
1255 [label="166_ address public saleContract;\n1255-new_variable-167-167", type_label=new_variable];
1260 [label="167_ bool public saleContractActivated;\n1260-new_variable-168-168", type_label=new_variable];
1265 [label="168_ uint256 internal _startTime;\n1265-new_variable-169-169", type_label=new_variable];
1270 [label="169_ uint256 internal _foundation = uint256(9e7).mul(1 ether);\n1270-new_variable-170-170", type_label=new_variable];
1284 [label="170_ uint256 internal _bounty = uint256(1e7).mul(1 ether);\n1284-new_variable-171-171", type_label=new_variable];
1298 [label="171_ uint256 internal _tokensForSale = uint256(7e8).mul(1 ether);\n1298-new_variable-172-172", type_label=new_variable];
1312 [label="172_ uint256 internal _tokensForTeamAndAdvisors = uint256(2e8).mul(1 ether);\n1312-new_variable-173-173", type_label=new_variable];
1326 [label="173_ mapping(address => uint256) public team;\n1326-new_variable-174-174", type_label=new_variable];
1333 [label="174_ mapping(address => uint256) public teamReleased;\n1333-new_variable-175-175", type_label=new_variable];
1340 [label="175_ mapping(address => uint256) public advisors;\n1340-new_variable-176-176", type_label=new_variable];
1347 [label="176_ mapping(address => uint256) public advisorsReleased;\n1347-new_variable-177-177", type_label=new_variable];
1390 [label="181_ _transferOwnership(_newOwner);\n1390-expression_statement-182-182", type_label=expression_statement];
1395 [label="182_ _startTime = now;\n1395-expression_statement-183-183", type_label=expression_statement];
1399 [label="183_ uint256 tokens = _foundation.add(_bounty);\n1399-new_variable-184-184", type_label=new_variable];
1410 [label="184_ _foundation = 0;\n1410-expression_statement-185-185", type_label=expression_statement];
1414 [label="185_ _bounty = 0;\n1414-expression_statement-186-186", type_label=expression_statement];
1418 [label="186_ _mint(_newOwner, tokens);\n1418-expression_statement-187-187", type_label=expression_statement];
1425 [label="188_ _teamToRelease\n1425-function_definition-189-194", type_label=function_definition];
1438 [label="189_ uint256 teamStage = now.sub(_startTime).div(365 days);\n1438-new_variable-190-190", type_label=new_variable];
1455 [label="190_ if_teamStage > 3\n1455-if-191-191", type_label=if];
3325 [label="190_ end_if", type_label=end_if];
1459 [label="190_ teamStage = 3;\n1459-expression_statement-191-191", type_label=expression_statement];
1463 [label="191_ uint256 teamTokens = team[who].mul(teamStage).div(3).sub(teamReleased[who]);\n1463-new_variable-192-192", type_label=new_variable];
1488 [label="192_ return teamTokens;\n1488-return-193-193", type_label=return];
1490 [label="194_ _advisorsToRelease\n1490-function_definition-195-200", type_label=function_definition];
1503 [label="195_ uint256 advisorsStage = now.sub(_startTime).div(91 days);\n1503-new_variable-196-196", type_label=new_variable];
1520 [label="196_ if_advisorsStage > 4\n1520-if-197-197", type_label=if];
3390 [label="196_ end_if", type_label=end_if];
1524 [label="196_ advisorsStage = 4;\n1524-expression_statement-197-197", type_label=expression_statement];
1528 [label="197_ uint256 advisorsTokens = advisors[who].mul(advisorsStage).div(4).sub(advisorsReleased[who]);\n1528-new_variable-198-198", type_label=new_variable];
1553 [label="198_ return advisorsTokens;\n1553-return-199-199", type_label=return];
1555 [label="200_ toRelease\n1555-function_definition-201-205", type_label=function_definition];
1568 [label="201_ uint256 teamTokens = _teamToRelease(who);\n1568-new_variable-202-202", type_label=new_variable];
1577 [label="202_ uint256 advisorsTokens = _advisorsToRelease(who);\n1577-new_variable-203-203", type_label=new_variable];
1586 [label="203_ return teamTokens.add(advisorsTokens);\n1586-return-204-204", type_label=return];
1593 [label="205_ release\n1593-function_definition-206-217", type_label=function_definition];
1597 [label="206_ address who = msg.sender;\n1597-new_variable-207-207", type_label=new_variable];
1605 [label="207_ uint256 teamTokens = _teamToRelease(who);\n1605-new_variable-208-208", type_label=new_variable];
1614 [label="208_ uint256 advisorsTokens = _advisorsToRelease(who);\n1614-new_variable-209-209", type_label=new_variable];
1623 [label="209_ uint256 tokens = teamTokens.add(advisorsTokens);\n1623-new_variable-210-210", type_label=new_variable];
1634 [label="210_ require(tokens > 0);\n1634-expression_statement-211-211", type_label=expression_statement];
1641 [label="211_ if_teamTokens > 0\n1641-if-212-213", type_label=if];
3511 [label="211_ end_if", type_label=end_if];
1645 [label="212_ teamReleased[who] = teamReleased[who].add(teamTokens);\n1645-expression_statement-213-213", type_label=expression_statement];
1658 [label="213_ if_advisorsTokens > 0\n1658-if-214-215", type_label=if];
3528 [label="213_ end_if", type_label=end_if];
1662 [label="214_ advisorsReleased[who] = advisorsReleased[who].add(advisorsTokens);\n1662-expression_statement-215-215", type_label=expression_statement];
1675 [label="215_ _mint(who, tokens);\n1675-expression_statement-216-216", type_label=expression_statement];
1682 [label="217_ vestToTeam\n1682-function_definition-218-223", type_label=function_definition];
1693 [label="217_ onlyOwner\n1693-expression_statement-218-218", type_label=expression_statement];
1696 [label="218_ require(who != address(0));\n1696-expression_statement-219-219", type_label=expression_statement];
1705 [label="219_ _tokensForTeamAndAdvisors = _tokensForTeamAndAdvisors.sub(amount);\n1705-expression_statement-220-220", type_label=expression_statement];
1714 [label="220_ team[who] = team[who].add(amount);\n1714-expression_statement-221-221", type_label=expression_statement];
1733 [label="223_ vestToAdvisors\n1733-function_definition-224-229", type_label=function_definition];
1744 [label="223_ onlyOwner\n1744-expression_statement-224-224", type_label=expression_statement];
1747 [label="224_ require(who != address(0));\n1747-expression_statement-225-225", type_label=expression_statement];
1756 [label="225_ _tokensForTeamAndAdvisors = _tokensForTeamAndAdvisors.sub(amount);\n1756-expression_statement-226-226", type_label=expression_statement];
1765 [label="226_ advisors[who] = advisors[who].add(amount);\n1765-expression_statement-227-227", type_label=expression_statement];
1784 [label="229_ activateSaleContract\n1784-function_definition-230-238", type_label=function_definition];
1791 [label="229_ onlyOwner\n1791-expression_statement-230-230", type_label=expression_statement];
1794 [label="230_ require(saleContractAddress != address(0));\n1794-expression_statement-231-231", type_label=expression_statement];
1803 [label="231_ require(!saleContractActivated);\n1803-expression_statement-232-232", type_label=expression_statement];
1809 [label="232_ saleContract = saleContractAddress;\n1809-expression_statement-233-233", type_label=expression_statement];
1813 [label="233_ saleContractActivated = true;\n1813-expression_statement-234-234", type_label=expression_statement];
1818 [label="234_ _mint(saleContract, _tokensForSale);\n1818-expression_statement-235-235", type_label=expression_statement];
1825 [label="235_ _tokensForSale = 0;\n1825-expression_statement-236-236", type_label=expression_statement];
1835 [label="238_ burnTokensForSale\n1835-function_definition-239-244", type_label=function_definition];
1847 [label="239_ require(saleContract != address(0));\n1847-expression_statement-240-240", type_label=expression_statement];
1856 [label="240_ require(msg.sender == saleContract);\n1856-expression_statement-241-241", type_label=expression_statement];
1865 [label="241_ _burn(saleContract, amount);\n1865-expression_statement-242-242", type_label=expression_statement];
1872 [label="242_ return true;\n1872-return-243-243", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
138 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 160  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
155 -> 2025  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2025 -> 162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 2025  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
160 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
162 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
181 -> 198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
198 -> 203  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
198 -> 2068  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2068 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 2068  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
203 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
205 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
238 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
272 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
320 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
354 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
402 -> 419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
436 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
484 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
523 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
555 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
572 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
595 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
625 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
673 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
742 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
804 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
807 -> 823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
872 -> 888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
888 -> 897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
931 -> 943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
996 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1136 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1141 -> 1147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1164 -> 1178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1184 -> 1194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 1207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 1242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1242 -> 1249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1249 -> 1255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1255 -> 1260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1270 -> 1284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1284 -> 1298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1298 -> 1312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1312 -> 1326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1326 -> 1333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1333 -> 1340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1340 -> 1347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1390 -> 1395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1395 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 1414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1414 -> 1418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1425 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 1455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1455 -> 1459  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1455 -> 3325  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3325 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 3325  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1463 -> 1488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1488 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1490 -> 1503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1503 -> 1520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1520 -> 1524  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1520 -> 3390  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3390 -> 1528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1524 -> 3390  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1528 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1553 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1555 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 1577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1577 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1586 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1593 -> 1597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1597 -> 1605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1605 -> 1614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1614 -> 1623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1623 -> 1634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1634 -> 1641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1641 -> 1645  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1641 -> 3511  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3511 -> 1658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1645 -> 3511  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1658 -> 1662  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1658 -> 3528  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3528 -> 1675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1662 -> 3528  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1682 -> 1696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1696 -> 1705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1705 -> 1714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1733 -> 1747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1747 -> 1756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1756 -> 1765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1784 -> 1794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1794 -> 1803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1809 -> 1813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1813 -> 1818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1818 -> 1825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1835 -> 1847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1847 -> 1856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1856 -> 1865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1865 -> 1872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1872 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
