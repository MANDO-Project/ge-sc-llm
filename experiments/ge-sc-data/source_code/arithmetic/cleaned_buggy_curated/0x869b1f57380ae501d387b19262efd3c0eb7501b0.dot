digraph  {
12 [label="2_ add\n12-function_definition-3-6", type_label=function_definition];
30 [label="3_ c = a + b;\n30-expression_statement-4-4", type_label=expression_statement];
36 [label="4_ require(c >= a);\n36-expression_statement-5-5", type_label=expression_statement];
43 [label="6_ sub\n43-function_definition-7-10", type_label=function_definition];
61 [label="7_ require(b <= a);\n61-expression_statement-8-8", type_label=expression_statement];
68 [label="8_ c = a - b;\n68-expression_statement-9-9", type_label=expression_statement];
74 [label="10_ mul\n74-function_definition-11-14", type_label=function_definition];
92 [label="11_ c = a * b;\n92-expression_statement-12-12", type_label=expression_statement];
98 [label="12_ require(a == 0 || c / a == b);\n98-expression_statement-13-13", type_label=expression_statement];
111 [label="14_ div\n111-function_definition-15-18", type_label=function_definition];
129 [label="15_ require(b > 0);\n129-expression_statement-16-16", type_label=expression_statement];
136 [label="16_ c = a / b;\n136-expression_statement-17-17", type_label=expression_statement];
145 [label="20_ totalSupply\n145-function_definition-21-21", type_label=function_definition];
148 [label="20_ constant\n148-expression_statement-21-21", type_label=expression_statement];
154 [label="21_ balanceOf\n154-function_definition-22-22", type_label=function_definition];
161 [label="21_ constant\n161-expression_statement-22-22", type_label=expression_statement];
168 [label="22_ allowance\n168-function_definition-23-23", type_label=function_definition];
179 [label="22_ constant\n179-expression_statement-23-23", type_label=expression_statement];
186 [label="23_ transfer\n186-function_definition-24-24", type_label=function_definition];
202 [label="24_ approve\n202-function_definition-25-25", type_label=function_definition];
218 [label="25_ transferFrom\n218-function_definition-26-26", type_label=function_definition];
279 [label="31_ address public owner;\n279-new_variable-32-32", type_label=new_variable];
284 [label="32_ address public newOwner;\n284-new_variable-33-33", type_label=new_variable];
301 [label="35_ owner = msg.sender;\n301-expression_statement-36-36", type_label=expression_statement];
307 [label="37_ modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n307-expression_statement-38-41", type_label=expression_statement];
310 [label="38_ require(msg.sender == owner);\n310-expression_statement-39-39", type_label=expression_statement];
319 [label="39_ _;\n319-expression_statement-40-40", type_label=expression_statement];
321 [label="41_ transferOwnership\n321-function_definition-42-44", type_label=function_definition];
328 [label="41_ onlyOwner\n328-expression_statement-42-42", type_label=expression_statement];
331 [label="42_ newOwner = _newOwner;\n331-expression_statement-43-43", type_label=expression_statement];
335 [label="44_ acceptOwnership\n335-function_definition-45-50", type_label=function_definition];
339 [label="45_ require(msg.sender == newOwner);\n339-expression_statement-46-46", type_label=expression_statement];
348 [label="46_ owner = newOwner;\n348-expression_statement-47-47", type_label=expression_statement];
352 [label="47_ newOwner = address(0);\n352-expression_statement-48-48", type_label=expression_statement];
374 [label="54_ bool public paused = false;\n374-new_variable-55-55", type_label=new_variable];
381 [label="55_ modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n381-expression_statement-56-59", type_label=expression_statement];
384 [label="56_ require(!paused);\n384-expression_statement-57-57", type_label=expression_statement];
390 [label="57_ _;\n390-expression_statement-58-58", type_label=expression_statement];
392 [label="59_ modifier whenPaused() {\n    require(paused);\n    _;\n  }\n392-expression_statement-60-63", type_label=expression_statement];
395 [label="60_ require(paused);\n395-expression_statement-61-61", type_label=expression_statement];
400 [label="61_ _;\n400-expression_statement-62-62", type_label=expression_statement];
402 [label="63_ pause\n402-function_definition-64-67", type_label=function_definition];
404 [label="63_ onlyOwner\n404-expression_statement-64-64", type_label=expression_statement];
406 [label="63_ whenNotPaused\n406-expression_statement-64-64", type_label=expression_statement];
410 [label="64_ paused = true;\n410-expression_statement-65-65", type_label=expression_statement];
417 [label="67_ unpause\n417-function_definition-68-71", type_label=function_definition];
419 [label="67_ onlyOwner\n419-expression_statement-68-68", type_label=expression_statement];
421 [label="67_ whenPaused\n421-expression_statement-68-68", type_label=expression_statement];
425 [label="68_ paused = false;\n425-expression_statement-69-69", type_label=expression_statement];
449 [label="74_ string public symbol;\n449-new_variable-75-75", type_label=new_variable];
454 [label="75_ string public name;\n454-new_variable-76-76", type_label=new_variable];
459 [label="76_ uint8 public decimals;\n459-new_variable-77-77", type_label=new_variable];
464 [label="77_ uint _totalSupply;\n464-new_variable-78-78", type_label=new_variable];
468 [label="78_ mapping(address => uint) balances;\n468-new_variable-79-79", type_label=new_variable];
474 [label="79_ mapping(address => mapping(address => uint)) allowed;\n474-new_variable-80-80", type_label=new_variable];
484 [label="81_ symbol = \"OXY\";\n484-expression_statement-82-82", type_label=expression_statement];
489 [label="82_ name = \"Oxycoin\";\n489-expression_statement-83-83", type_label=expression_statement];
494 [label="83_ decimals = 18;\n494-expression_statement-84-84", type_label=expression_statement];
498 [label="84_ _totalSupply = 1200000000 * 10 ** uint(decimals);\n498-expression_statement-85-85", type_label=expression_statement];
508 [label="85_ balances[owner] = _totalSupply;\n508-expression_statement-86-86", type_label=expression_statement];
524 [label="88_ modifier onlyPayloadSize(uint numWords) {\n    assert(msg.data.length >= numWords * 32 + 4);\n    _;\n  }\n524-expression_statement-89-92", type_label=expression_statement];
531 [label="89_ assert(msg.data.length >= numWords * 32 + 4);\n531-expression_statement-90-90", type_label=expression_statement];
546 [label="90_ _;\n546-expression_statement-91-91", type_label=expression_statement];
548 [label="92_ isContract\n548-function_definition-93-99", type_label=function_definition];
562 [label="93_ uint256 length;\n562-new_variable-94-94", type_label=new_variable];
577 [label="97_ return (length > 0);\n577-return-98-98", type_label=return];
582 [label="99_ totalSupply\n582-function_definition-100-102", type_label=function_definition];
591 [label="100_ return _totalSupply;\n591-return-101-101", type_label=return];
593 [label="102_ balanceOf\n593-function_definition-103-105", type_label=function_definition];
607 [label="103_ return balances[tokenOwner];\n607-return-104-104", type_label=return];
611 [label="105_ allowance\n611-function_definition-106-108", type_label=function_definition];
629 [label="106_ return allowed[tokenOwner][spender];\n629-return-107-107", type_label=return];
635 [label="108_ transfer\n635-function_definition-109-117", type_label=function_definition];
646 [label="108_ whenNotPaused\n646-expression_statement-109-109", type_label=expression_statement];
648 [label="108_ onlyPayloadSize(2)\n648-expression_statement-109-109", type_label=expression_statement];
658 [label="109_ require(to != address(0));\n658-expression_statement-110-110", type_label=expression_statement];
667 [label="110_ require(tokens > 0);\n667-expression_statement-111-111", type_label=expression_statement];
674 [label="111_ require(tokens <= balances[msg.sender]);\n674-expression_statement-112-112", type_label=expression_statement];
685 [label="112_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n685-expression_statement-113-113", type_label=expression_statement];
702 [label="113_ balances[to] = balances[to].add(tokens);\n702-expression_statement-114-114", type_label=expression_statement];
725 [label="115_ return true;\n725-return-116-116", type_label=return];
728 [label="117_ approve\n728-function_definition-118-123", type_label=function_definition];
739 [label="117_ whenNotPaused\n739-expression_statement-118-118", type_label=expression_statement];
741 [label="117_ onlyPayloadSize(2)\n741-expression_statement-118-118", type_label=expression_statement];
751 [label="118_ require(spender != address(0));\n751-expression_statement-119-119", type_label=expression_statement];
760 [label="119_ allowed[msg.sender][spender] = tokens;\n760-expression_statement-120-120", type_label=expression_statement];
780 [label="121_ return true;\n780-return-122-122", type_label=return];
783 [label="123_ transferFrom\n783-function_definition-124-135", type_label=function_definition];
798 [label="123_ whenNotPaused\n798-expression_statement-124-124", type_label=expression_statement];
800 [label="123_ onlyPayloadSize(3)\n800-expression_statement-124-124", type_label=expression_statement];
810 [label="124_ require(tokens > 0);\n810-expression_statement-125-125", type_label=expression_statement];
817 [label="125_ require(from != address(0));\n817-expression_statement-126-126", type_label=expression_statement];
826 [label="126_ require(to != address(0));\n826-expression_statement-127-127", type_label=expression_statement];
835 [label="127_ require(allowed[from][msg.sender] > 0);\n835-expression_statement-128-128", type_label=expression_statement];
848 [label="128_ require(balances[from]>0);\n848-expression_statement-129-129", type_label=expression_statement];
857 [label="129_ balances[from] = balances[from].sub(tokens);\n857-expression_statement-130-130", type_label=expression_statement];
870 [label="130_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n870-expression_statement-131-131", type_label=expression_statement];
891 [label="131_ balances[to] = balances[to].add(tokens);\n891-expression_statement-132-132", type_label=expression_statement];
912 [label="133_ return true;\n912-return-134-134", type_label=return];
915 [label="135_ burn\n915-function_definition-136-142", type_label=function_definition];
928 [label="136_ require(balances[msg.sender] >= _value);\n928-expression_statement-137-137", type_label=expression_statement];
939 [label="137_ balances[msg.sender] = balances[msg.sender].sub(_value);\n939-expression_statement-138-138", type_label=expression_statement];
956 [label="138_ _totalSupply =_totalSupply.sub(_value);\n956-expression_statement-139-139", type_label=expression_statement];
973 [label="140_ return true;\n973-return-141-141", type_label=return];
976 [label="142_ burnFrom\n976-function_definition-143-151", type_label=function_definition];
993 [label="143_ require(balances[from] >= _value);\n993-expression_statement-144-144", type_label=expression_statement];
1002 [label="144_ require(_value <= allowed[from][msg.sender]);\n1002-expression_statement-145-145", type_label=expression_statement];
1015 [label="145_ balances[from] = balances[from].sub(_value);\n1015-expression_statement-146-146", type_label=expression_statement];
1028 [label="146_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(_value);\n1028-expression_statement-147-147", type_label=expression_statement];
1049 [label="147_ _totalSupply = _totalSupply.sub(_value);\n1049-expression_statement-148-148", type_label=expression_statement];
1064 [label="149_ return true;\n1064-return-150-150", type_label=return];
1067 [label="151_ mintToken\n1067-function_definition-152-159", type_label=function_definition];
1077 [label="151_ onlyOwner\n1077-expression_statement-152-152", type_label=expression_statement];
1085 [label="152_ require(mintedAmount > 0);\n1085-expression_statement-153-153", type_label=expression_statement];
1092 [label="153_ require(target != address(0));\n1092-expression_statement-154-154", type_label=expression_statement];
1101 [label="154_ balances[target] = balances[target].add(mintedAmount);\n1101-expression_statement-155-155", type_label=expression_statement];
1114 [label="155_ _totalSupply = _totalSupply.add(mintedAmount);\n1114-expression_statement-156-156", type_label=expression_statement];
1131 [label="157_ return true;\n1131-return-158-158", type_label=return];
1140 [label="162_ transferAnyERC20Token\n1140-function_definition-163-167", type_label=function_definition];
1151 [label="162_ onlyOwner\n1151-expression_statement-163-163", type_label=expression_statement];
1159 [label="163_ require(tokenAddress != address(0));\n1159-expression_statement-164-164", type_label=expression_statement];
1168 [label="164_ require(isContract(tokenAddress));\n1168-expression_statement-165-165", type_label=expression_statement];
1176 [label="165_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n1176-return-166-166", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
12 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
43 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
61 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
74 -> 92  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
92 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
111 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
381 -> 392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
402 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
459 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
548 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
582 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
591 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
593 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
611 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
635 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
667 -> 674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
728 -> 751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
751 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
783 -> 810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
798 -> 800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
810 -> 817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
817 -> 826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
826 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
848 -> 857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
870 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
915 -> 928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
976 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 1015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1015 -> 1028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1028 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1064 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1067 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1085 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1092 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 1114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1140 -> 1159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1159 -> 1168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1168 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
