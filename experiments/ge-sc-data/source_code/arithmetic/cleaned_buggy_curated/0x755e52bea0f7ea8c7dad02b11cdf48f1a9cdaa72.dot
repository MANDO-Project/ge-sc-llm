digraph  {
12 [label="2_ safeAdd\n12-function_definition-3-6", type_label=function_definition];
30 [label="3_ c = a + b;\n30-expression_statement-4-4", type_label=expression_statement];
36 [label="4_ require(c >= a);\n36-expression_statement-5-5", type_label=expression_statement];
43 [label="6_ safeSub\n43-function_definition-7-10", type_label=function_definition];
61 [label="7_ require(b <= a);\n61-expression_statement-8-8", type_label=expression_statement];
68 [label="8_ c = a - b;\n68-expression_statement-9-9", type_label=expression_statement];
74 [label="10_ safeMul\n74-function_definition-11-14", type_label=function_definition];
92 [label="11_ c = a * b;\n92-expression_statement-12-12", type_label=expression_statement];
98 [label="12_ require(a == 0 || c / a == b);\n98-expression_statement-13-13", type_label=expression_statement];
111 [label="14_ safeDiv\n111-function_definition-15-18", type_label=function_definition];
129 [label="15_ require(b > 0);\n129-expression_statement-16-16", type_label=expression_statement];
136 [label="16_ c = a / b;\n136-expression_statement-17-17", type_label=expression_statement];
145 [label="20_ totalSupply\n145-function_definition-21-21", type_label=function_definition];
153 [label="21_ balanceOf\n153-function_definition-22-22", type_label=function_definition];
166 [label="22_ allowance\n166-function_definition-23-23", type_label=function_definition];
183 [label="23_ transfer\n183-function_definition-24-24", type_label=function_definition];
199 [label="24_ approve\n199-function_definition-25-25", type_label=function_definition];
215 [label="25_ transferFrom\n215-function_definition-26-26", type_label=function_definition];
266 [label="30_ receiveApproval\n266-function_definition-31-31", type_label=function_definition];
288 [label="33_ address public owner;\n288-new_variable-34-34", type_label=new_variable];
293 [label="34_ address public newOwner;\n293-new_variable-35-35", type_label=new_variable];
308 [label="36_ Owned\n308-function_definition-37-39", type_label=function_definition];
312 [label="37_ owner = msg.sender;\n312-expression_statement-38-38", type_label=expression_statement];
318 [label="39_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n318-expression_statement-40-43", type_label=expression_statement];
321 [label="40_ require(msg.sender == owner);\n321-expression_statement-41-41", type_label=expression_statement];
330 [label="41_ _;\n330-expression_statement-42-42", type_label=expression_statement];
332 [label="43_ transferOwnership\n332-function_definition-44-46", type_label=function_definition];
339 [label="43_ onlyOwner\n339-expression_statement-44-44", type_label=expression_statement];
342 [label="44_ newOwner = _newOwner;\n342-expression_statement-45-45", type_label=expression_statement];
346 [label="46_ acceptOwnership\n346-function_definition-47-52", type_label=function_definition];
350 [label="47_ require(msg.sender == newOwner);\n350-expression_statement-48-48", type_label=expression_statement];
365 [label="49_ owner = newOwner;\n365-expression_statement-50-50", type_label=expression_statement];
369 [label="50_ newOwner = address(0);\n369-expression_statement-51-51", type_label=expression_statement];
387 [label="54_ string public symbol;\n387-new_variable-55-55", type_label=new_variable];
392 [label="55_ string public  name;\n392-new_variable-56-56", type_label=new_variable];
397 [label="56_ uint8 public decimals;\n397-new_variable-57-57", type_label=new_variable];
402 [label="57_ uint public _totalSupply;\n402-new_variable-58-58", type_label=new_variable];
407 [label="58_ uint256 public sellPrice;\n407-new_variable-59-59", type_label=new_variable];
412 [label="59_ uint256 public buyPrice;\n412-new_variable-60-60", type_label=new_variable];
417 [label="60_ mapping(address => uint) public balances;\n417-new_variable-61-61", type_label=new_variable];
424 [label="61_ mapping(address => mapping(address => uint)) public allowed;\n424-new_variable-62-62", type_label=new_variable];
433 [label="62_ mapping (address => bool) public frozenAccount;\n433-new_variable-63-63", type_label=new_variable];
460 [label="65_ modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n460-expression_statement-66-69", type_label=expression_statement];
467 [label="66_ assert(msg.data.length >= size + 4);\n467-expression_statement-67-67", type_label=expression_statement];
480 [label="67_ _;\n480-expression_statement-68-68", type_label=expression_statement];
482 [label="69_ EPSBets\n482-function_definition-70-77", type_label=function_definition];
486 [label="70_ symbol = \"EPSBETC\";\n486-expression_statement-71-71", type_label=expression_statement];
491 [label="71_ name = \"EPS BETS Token\";\n491-expression_statement-72-72", type_label=expression_statement];
496 [label="72_ decimals = 18;\n496-expression_statement-73-73", type_label=expression_statement];
500 [label="73_ _totalSupply = 10000000;\n500-expression_statement-74-74", type_label=expression_statement];
504 [label="74_ balances[owner] = _totalSupply;\n504-expression_statement-75-75", type_label=expression_statement];
520 [label="77_ totalSupply\n520-function_definition-78-80", type_label=function_definition];
529 [label="78_ return safeSub(_totalSupply , balances[address(0)]);\n529-return-79-79", type_label=return];
540 [label="80_ balanceOf\n540-function_definition-81-83", type_label=function_definition];
554 [label="81_ return balances[tokenOwner];\n554-return-82-82", type_label=return];
558 [label="83_ transfer\n558-function_definition-84-87", type_label=function_definition];
568 [label="83_ onlyPayloadSize(safeMul(2,32))\n568-expression_statement-84-84", type_label=expression_statement];
584 [label="84_ _transfer(msg.sender, to, tokens);\n584-expression_statement-85-85", type_label=expression_statement];
595 [label="85_ return true;\n595-return-86-86", type_label=return];
598 [label="87_ approve\n598-function_definition-88-92", type_label=function_definition];
615 [label="88_ allowed[msg.sender][spender] = tokens;\n615-expression_statement-89-89", type_label=expression_statement];
635 [label="90_ return true;\n635-return-91-91", type_label=return];
638 [label="92_ transferFrom\n638-function_definition-93-104", type_label=function_definition];
652 [label="92_ onlyPayloadSize(safeMul(3,32))\n652-expression_statement-93-93", type_label=expression_statement];
668 [label="93_ require (to != 0x0);\n668-expression_statement-94-94", type_label=expression_statement];
675 [label="94_ require (balances[from] >= tokens);\n675-expression_statement-95-95", type_label=expression_statement];
684 [label="95_ require (safeAdd(balances[to] , tokens) >= balances[to]);\n684-expression_statement-96-96", type_label=expression_statement];
700 [label="96_ require(!frozenAccount[from]);\n700-expression_statement-97-97", type_label=expression_statement];
708 [label="97_ require(!frozenAccount[to]);\n708-expression_statement-98-98", type_label=expression_statement];
716 [label="98_ balances[from] = safeSub(balances[from], tokens);\n716-expression_statement-99-99", type_label=expression_statement];
729 [label="99_ allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n729-expression_statement-100-100", type_label=expression_statement];
750 [label="100_ balances[to] = safeAdd(balances[to], tokens);\n750-expression_statement-101-101", type_label=expression_statement];
771 [label="102_ return true;\n771-return-103-103", type_label=return];
774 [label="104_ allowance\n774-function_definition-105-107", type_label=function_definition];
792 [label="105_ return allowed[tokenOwner][spender];\n792-return-106-106", type_label=return];
798 [label="107_ approveAndCall\n798-function_definition-108-113", type_label=function_definition];
819 [label="108_ allowed[msg.sender][spender] = tokens;\n819-expression_statement-109-109", type_label=expression_statement];
839 [label="110_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n839-expression_statement-111-111", type_label=expression_statement];
857 [label="111_ return true;\n857-return-112-112", type_label=return];
860 [label="113_ mintToken\n860-function_definition-114-119", type_label=function_definition];
870 [label="113_ onlyOwner\n870-expression_statement-114-114", type_label=expression_statement];
874 [label="114_ balances[target] = safeAdd(balances[target], mintedAmount);\n874-expression_statement-115-115", type_label=expression_statement];
887 [label="115_ _totalSupply = safeAdd(_totalSupply, mintedAmount);\n887-expression_statement-116-116", type_label=expression_statement];
912 [label="119_ freezeAccount\n912-function_definition-120-123", type_label=function_definition];
922 [label="119_ onlyOwner\n922-expression_statement-120-120", type_label=expression_statement];
926 [label="120_ frozenAccount[from] = freeze;\n926-expression_statement-121-121", type_label=expression_statement];
938 [label="123_ _transfer\n938-function_definition-124-133", type_label=function_definition];
954 [label="124_ require (_to != 0x0);\n954-expression_statement-125-125", type_label=expression_statement];
961 [label="125_ require (balances[_from] >= _value);\n961-expression_statement-126-126", type_label=expression_statement];
970 [label="126_ require (safeAdd(balances[_to] , _value) >= balances[_to]);\n970-expression_statement-127-127", type_label=expression_statement];
986 [label="127_ require(!frozenAccount[_from]);\n986-expression_statement-128-128", type_label=expression_statement];
994 [label="128_ require(!frozenAccount[_to]);\n994-expression_statement-129-129", type_label=expression_statement];
1002 [label="129_ balances[_from] = safeSub(balances[_from], _value);\n1002-expression_statement-130-130", type_label=expression_statement];
1015 [label="130_ balances[_to] = safeAdd(balances[_to], _value);\n1015-expression_statement-131-131", type_label=expression_statement];
1036 [label="133_ setPrices\n1036-function_definition-134-137", type_label=function_definition];
1046 [label="133_ onlyOwner\n1046-expression_statement-134-134", type_label=expression_statement];
1050 [label="134_ sellPrice = newSellPrice;\n1050-expression_statement-135-135", type_label=expression_statement];
1054 [label="135_ buyPrice = newBuyPrice;\n1054-expression_statement-136-136", type_label=expression_statement];
1058 [label="137_ buy\n1058-function_definition-138-141", type_label=function_definition];
1063 [label="138_ uint amount = safeDiv(msg.value , buyPrice);\n1063-new_variable-139-139", type_label=new_variable];
1076 [label="139_ _transfer(this, msg.sender, amount);\n1076-expression_statement-140-140", type_label=expression_statement];
1087 [label="141_ sell\n1087-function_definition-142-146", type_label=function_definition];
1095 [label="142_ require(address(this).balance >= safeMul(amount ,sellPrice));\n1095-expression_statement-143-143", type_label=expression_statement];
1111 [label="143_ _transfer(msg.sender, this, amount);\n1111-expression_statement-144-144", type_label=expression_statement];
1122 [label="144_ msg.sender.transfer(safeMul(amount ,sellPrice));\n1122-expression_statement-145-145", type_label=expression_statement];
1136 [label="146_ burn\n1136-function_definition-147-153", type_label=function_definition];
1149 [label="147_ require(balances[msg.sender] >= _value);\n1149-expression_statement-148-148", type_label=expression_statement];
1160 [label="148_ balances[msg.sender] = safeSub(balances[msg.sender], _value);\n1160-expression_statement-149-149", type_label=expression_statement];
1177 [label="149_ _totalSupply = safeSub(_totalSupply, _value);\n1177-expression_statement-150-150", type_label=expression_statement];
1194 [label="151_ return true;\n1194-return-152-152", type_label=return];
1197 [label="153_ burnFrom\n1197-function_definition-154-162", type_label=function_definition];
1214 [label="154_ require(balances[_from] >= _value);\n1214-expression_statement-155-155", type_label=expression_statement];
1223 [label="155_ require(_value <= allowed[_from][msg.sender]);\n1223-expression_statement-156-156", type_label=expression_statement];
1236 [label="156_ balances[_from] = safeSub(balances[_from], _value);\n1236-expression_statement-157-157", type_label=expression_statement];
1249 [label="157_ allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n1249-expression_statement-158-158", type_label=expression_statement];
1270 [label="158_ _totalSupply = safeSub(_totalSupply, _value);\n1270-expression_statement-159-159", type_label=expression_statement];
1285 [label="160_ return true;\n1285-return-161-161", type_label=return];
1288 [label="162_ transferAnyERC20Token\n1288-function_definition-163-165", type_label=function_definition];
1299 [label="162_ onlyOwner\n1299-expression_statement-163-163", type_label=expression_statement];
1307 [label="163_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n1307-return-164-164", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
12 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
43 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
61 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
74 -> 92  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
92 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
111 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
332 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
402 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
540 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
558 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
598 -> 615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
635 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
638 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
708 -> 716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
716 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
771 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
774 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
798 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
839 -> 857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
860 -> 874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
938 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
954 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 1015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 1095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1095 -> 1111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1136 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 1177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1194 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1197 -> 1214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1214 -> 1223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1223 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 1249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1249 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1285 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1288 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
