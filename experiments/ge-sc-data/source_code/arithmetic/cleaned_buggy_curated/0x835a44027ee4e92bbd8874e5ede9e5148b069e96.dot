digraph  {
13 [label="2_ totalSupply\n13-function_definition-3-3", type_label=function_definition];
15 [label="2_ constant\n15-expression_statement-3-3", type_label=expression_statement];
22 [label="3_ balanceOf\n22-function_definition-4-4", type_label=function_definition];
28 [label="3_ constant\n28-expression_statement-4-4", type_label=expression_statement];
35 [label="4_ transfer\n35-function_definition-5-5", type_label=function_definition];
50 [label="5_ transferFrom\n50-function_definition-6-7", type_label=function_definition];
69 [label="7_ approve\n69-function_definition-8-8", type_label=function_definition];
84 [label="8_ allowance\n84-function_definition-9-10", type_label=function_definition];
94 [label="8_ constant\n94-expression_statement-9-9", type_label=expression_statement];
136 [label="16_ uint256 constant private MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n136-new_variable-17-18", type_label=new_variable];
142 [label="18_ safeAdd\n142-function_definition-19-24", type_label=function_definition];
152 [label="19_ constant\n152-expression_statement-20-20", type_label=expression_statement];
161 [label="21_ assert (x <= MAX_UINT256 - y);\n161-expression_statement-22-22", type_label=expression_statement];
170 [label="22_ return x + y;\n170-return-23-23", type_label=return];
174 [label="24_ safeSub\n174-function_definition-25-30", type_label=function_definition];
184 [label="25_ constant\n184-expression_statement-26-26", type_label=expression_statement];
193 [label="27_ assert (x >= y);\n193-expression_statement-28-28", type_label=expression_statement];
200 [label="28_ return x - y;\n200-return-29-29", type_label=return];
204 [label="30_ safeMul\n204-function_definition-31-37", type_label=function_definition];
214 [label="31_ constant\n214-expression_statement-32-32", type_label=expression_statement];
223 [label="33_ if_y == 0\n223-if-34-34", type_label=if];
1165 [label="33_ end_if", type_label=end_if];
227 [label="33_ return 0;\n227-return-34-34", type_label=return];
229 [label="34_ assert (x <= MAX_UINT256 / y);\n229-expression_statement-35-35", type_label=expression_statement];
238 [label="35_ return x * y;\n238-return-36-36", type_label=return];
251 [label="39_ AbstractToken\n251-function_definition-40-41", type_label=function_definition];
254 [label="41_ balanceOf\n254-function_definition-42-44", type_label=function_definition];
260 [label="41_ constant\n260-expression_statement-42-42", type_label=expression_statement];
268 [label="42_ return accounts [_owner];\n268-return-43-43", type_label=return];
272 [label="44_ transfer\n272-function_definition-45-54", type_label=function_definition];
288 [label="45_ uint256 fromBalance = accounts [msg.sender];\n288-new_variable-46-46", type_label=new_variable];
298 [label="46_ if_fromBalance < _value\n298-if-47-47", type_label=if];
1240 [label="46_ end_if", type_label=end_if];
302 [label="46_ return false;\n302-return-47-47", type_label=return];
305 [label="47_ if__value > 0 && msg.sender != _to\n305-if-48-52", type_label=if];
1247 [label="47_ end_if", type_label=end_if];
316 [label="48_ accounts [msg.sender] = safeSub (fromBalance, _value);\n316-expression_statement-49-49", type_label=expression_statement];
329 [label="49_ accounts [_to] = safeAdd (accounts [_to], _value);\n329-expression_statement-50-50", type_label=expression_statement];
342 [label="50_ Transfer (msg.sender, _to, _value);\n342-expression_statement-51-51", type_label=expression_statement];
353 [label="52_ return true;\n353-return-53-53", type_label=return];
356 [label="54_ transferFrom\n356-function_definition-55-69", type_label=function_definition];
376 [label="56_ uint256 spenderAllowance = allowances [_from][msg.sender];\n376-new_variable-57-57", type_label=new_variable];
388 [label="57_ if_spenderAllowance < _value\n388-if-58-58", type_label=if];
1330 [label="57_ end_if", type_label=end_if];
392 [label="57_ return false;\n392-return-58-58", type_label=return];
395 [label="58_ uint256 fromBalance = accounts [_from];\n395-new_variable-59-59", type_label=new_variable];
403 [label="59_ if_fromBalance < _value\n403-if-60-60", type_label=if];
1345 [label="59_ end_if", type_label=end_if];
407 [label="59_ return false;\n407-return-60-60", type_label=return];
410 [label="60_ allowances [_from][msg.sender] =\n      safeSub (spenderAllowance, _value);\n410-expression_statement-61-62", type_label=expression_statement];
425 [label="62_ if__value > 0 && _from != _to\n425-if-63-67", type_label=if];
1367 [label="62_ end_if", type_label=end_if];
434 [label="63_ accounts [_from] = safeSub (fromBalance, _value);\n434-expression_statement-64-64", type_label=expression_statement];
445 [label="64_ accounts [_to] = safeAdd (accounts [_to], _value);\n445-expression_statement-65-65", type_label=expression_statement];
458 [label="65_ Transfer (_from, _to, _value);\n458-expression_statement-66-66", type_label=expression_statement];
467 [label="67_ return true;\n467-return-68-68", type_label=return];
470 [label="69_ approve\n470-function_definition-70-74", type_label=function_definition];
486 [label="70_ allowances [msg.sender][_spender] = _value;\n486-expression_statement-71-71", type_label=expression_statement];
496 [label="71_ Approval (msg.sender, _spender, _value);\n496-expression_statement-72-72", type_label=expression_statement];
507 [label="72_ return true;\n507-return-73-73", type_label=return];
510 [label="74_ allowance\n510-function_definition-75-78", type_label=function_definition];
520 [label="74_ constant\n520-expression_statement-75-75", type_label=expression_statement];
528 [label="76_ return allowances [_owner][_spender];\n528-return-77-77", type_label=return];
534 [label="78_ mapping (address => uint256) accounts;\n534-new_variable-79-79", type_label=new_variable];
540 [label="79_ mapping (address => mapping (address => uint256)) private allowances;\n540-new_variable-80-80", type_label=new_variable];
559 [label="83_ uint256 constant MAX_TOKEN_COUNT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n559-new_variable-84-84", type_label=new_variable];
564 [label="84_ address owner;\n564-new_variable-85-85", type_label=new_variable];
568 [label="85_ uint256 tokenCount = 0;\n568-new_variable-86-86", type_label=new_variable];
573 [label="86_ bool frozen = false;\n573-new_variable-87-87", type_label=new_variable];
579 [label="87_ ProtosToken\n579-function_definition-88-90", type_label=function_definition];
581 [label="87_ AbstractToken ()\n581-expression_statement-88-88", type_label=expression_statement];
584 [label="88_ owner = msg.sender;\n584-expression_statement-89-89", type_label=expression_statement];
590 [label="90_ name\n590-function_definition-91-93", type_label=function_definition];
592 [label="90_ constant\n592-expression_statement-91-91", type_label=expression_statement];
600 [label="91_ return \"PROTOS\";\n600-return-92-92", type_label=return];
603 [label="93_ symbol\n603-function_definition-94-96", type_label=function_definition];
605 [label="93_ constant\n605-expression_statement-94-94", type_label=expression_statement];
613 [label="94_ return \"PRTS\";\n613-return-95-95", type_label=return];
616 [label="96_ decimals\n616-function_definition-97-99", type_label=function_definition];
618 [label="96_ constant\n618-expression_statement-97-97", type_label=expression_statement];
626 [label="97_ return 0;\n626-return-98-98", type_label=return];
628 [label="99_ totalSupply\n628-function_definition-100-102", type_label=function_definition];
630 [label="99_ constant\n630-expression_statement-100-100", type_label=expression_statement];
638 [label="100_ return tokenCount;\n638-return-101-101", type_label=return];
640 [label="102_ transfer\n640-function_definition-103-106", type_label=function_definition];
656 [label="103_ if\n656-if-104-105", type_label=if];
1598 [label="103_ end_if", type_label=end_if];
658 [label="103_ return false;\n658-return-104-104", type_label=return];
661 [label="104_ return AbstractToken.transfer (_to, _value);\n661-return-105-105", type_label=return];
670 [label="106_ transferFrom\n670-function_definition-107-111", type_label=function_definition];
690 [label="108_ if\n690-if-109-110", type_label=if];
1632 [label="108_ end_if", type_label=end_if];
692 [label="108_ return false;\n692-return-109-109", type_label=return];
695 [label="109_ return AbstractToken.transferFrom (_from, _to, _value);\n695-return-110-110", type_label=return];
706 [label="111_ approve\n706-function_definition-112-117", type_label=function_definition];
726 [label="113_ if_allowance (msg.sender, _spender) == _currentValue\n726-if-114-116", type_label=if];
1668 [label="113_ end_if", type_label=end_if];
737 [label="114_ return approve (_spender, _newValue);\n737-return-115-115", type_label=return];
744 [label="115_ return false;\n744-return-116-116", type_label=return];
747 [label="117_ createTokens\n747-function_definition-118-127", type_label=function_definition];
759 [label="119_ require (msg.sender == owner);\n759-expression_statement-120-120", type_label=expression_statement];
768 [label="120_ if__value > 0\n768-if-121-125", type_label=if];
1710 [label="120_ end_if", type_label=end_if];
773 [label="121_ if\n773-if-122-122", type_label=if];
1715 [label="121_ end_if", type_label=end_if];
782 [label="121_ return false;\n782-return-122-122", type_label=return];
785 [label="122_ accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);\n785-expression_statement-123-123", type_label=expression_statement];
802 [label="123_ tokenCount = safeAdd (tokenCount, _value);\n802-expression_statement-124-124", type_label=expression_statement];
811 [label="125_ return true;\n811-return-126-126", type_label=return];
814 [label="127_ burnTokens\n814-function_definition-128-136", type_label=function_definition];
826 [label="128_ uint256 ownerBalance = accounts [msg.sender];\n826-new_variable-129-129", type_label=new_variable];
836 [label="129_ if__value > ownerBalance\n836-if-130-135", type_label=if];
1778 [label="129_ end_if", type_label=end_if];
840 [label="129_ return false;\n840-return-130-130", type_label=return];
843 [label="130_ if__value > 0\n843-if-131-135", type_label=if];
848 [label="131_ accounts [msg.sender] = safeSub (ownerBalance, _value);\n848-expression_statement-132-132", type_label=expression_statement];
861 [label="132_ tokenCount = safeSub (tokenCount, _value);\n861-expression_statement-133-133", type_label=expression_statement];
870 [label="133_ return true;\n870-return-134-134", type_label=return];
873 [label="134_ return true;\n873-return-135-135", type_label=return];
876 [label="136_ setOwner\n876-function_definition-137-140", type_label=function_definition];
883 [label="137_ require (msg.sender == owner);\n883-expression_statement-138-138", type_label=expression_statement];
892 [label="138_ owner = _newOwner;\n892-expression_statement-139-139", type_label=expression_statement];
896 [label="140_ freezeTransfers\n896-function_definition-141-147", type_label=function_definition];
899 [label="141_ require (msg.sender == owner);\n899-expression_statement-142-142", type_label=expression_statement];
908 [label="142_ if\n908-if-143-146", type_label=if];
1850 [label="142_ end_if", type_label=end_if];
912 [label="143_ frozen = true;\n912-expression_statement-144-144", type_label=expression_statement];
917 [label="144_ Freeze ();\n917-expression_statement-145-145", type_label=expression_statement];
920 [label="147_ unfreezeTransfers\n920-function_definition-148-154", type_label=function_definition];
923 [label="148_ require (msg.sender == owner);\n923-expression_statement-149-149", type_label=expression_statement];
932 [label="149_ if\n932-if-150-153", type_label=if];
1874 [label="149_ end_if", type_label=end_if];
935 [label="150_ frozen = false;\n935-expression_statement-151-151", type_label=expression_statement];
940 [label="151_ Unfreeze ();\n940-expression_statement-152-152", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
662;
696;
745;
874;
943;
142 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
174 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
204 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 227  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
223 -> 1165  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1165 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 1165  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
227 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
229 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
254 -> 268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
268 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
272 -> 288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 302  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
298 -> 1240  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1240 -> 305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 1240  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
302 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
305 -> 316  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
305 -> 1247  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1247 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 1247  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
353 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
356 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 392  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
388 -> 1330  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1330 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 1330  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
392 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
395 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 407  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
403 -> 1345  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1345 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 1345  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
407 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
410 -> 425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 434  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
425 -> 1367  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1367 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 1367  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
467 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
470 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
510 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
534 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
590 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
603 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
616 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
628 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
640 -> 656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
656 -> 658  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
656 -> 661  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1598 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 1598  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
658 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
661 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
670 -> 690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
690 -> 692  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
690 -> 695  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1632 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
692 -> 1632  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
692 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
695 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
706 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
726 -> 737  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
726 -> 744  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1668 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 1668  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
737 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
744 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
747 -> 759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 773  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
768 -> 1710  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1710 -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 782  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
773 -> 1715  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1715 -> 785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 1715  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
782 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
785 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 1710  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
811 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
814 -> 826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
826 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 840  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
836 -> 843  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1778 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 1778  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
840 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
843 -> 848  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
843 -> 873  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
848 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
870 -> 1778  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
870 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
873 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
876 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
896 -> 899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
899 -> 908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
908 -> 912  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
908 -> 1850  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1850 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 1850  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
920 -> 923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 935  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
932 -> 1874  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1874 -> 943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 1874  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
662 -> 1598  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
696 -> 1632  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
745 -> 1668  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
874 -> 1778  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
