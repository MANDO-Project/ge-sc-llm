digraph  {
13 [label="2_ mapping(address => uint) public lockTime_intou33;\n13-new_variable-3-3", method="", type_label=new_variable];
20 [label="3_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n20-function_definition-4-6", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
28 [label="4_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n28-expression_statement-5-5", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
36 [label="6_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n36-function_definition-7-11", method="withdraw_intou33()", type_label=function_definition];
40 [label="7_ require(now > lockTime_intou33[msg.sender]);\n40-expression_statement-8-8", method="withdraw_intou33()", type_label=expression_statement];
51 [label="8_ uint transferValue_intou33 = 10;\n51-new_variable-9-9", method="withdraw_intou33()", type_label=new_variable];
57 [label="9_ msg.sender.transfer(transferValue_intou33);\n57-expression_statement-10-10", method="withdraw_intou33()", type_label=expression_statement];
72 [label="12_ function _setMetadata(bytes memory metadata) internal {\n        emit MetadataSet(metadata);\n    }\n72-function_definition-13-15", method="_setMetadata(bytes memory metadata)", type_label=function_definition];
84 [label="15_ mapping(address => uint) balances_intou2;\n84-new_variable-16-16", method="", type_label=new_variable];
90 [label="16_ function transfer_undrflow2(address _to, uint _value) public returns (bool) {\n    require(balances_intou2[msg.sender] - _value >= 0);   \n    balances_intou2[msg.sender] -= _value;   \n    balances_intou2[_to] += _value;   \n    return true;\n  }\n90-function_definition-17-22", method="transfer_undrflow2(address _to,uint _value)", type_label=function_definition];
106 [label="17_ require(balances_intou2[msg.sender] - _value >= 0);\n106-expression_statement-18-18", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
119 [label="18_ balances_intou2[msg.sender] -= _value;\n119-expression_statement-19-19", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
127 [label="19_ balances_intou2[_to] += _value;\n127-expression_statement-20-20", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
133 [label="20_ return true;\n133-return-21-21", method="transfer_undrflow2(address _to,uint _value)", type_label=return];
139 [label="24_ mapping(address => uint) balances_intou22;\n139-new_variable-25-25", method="", type_label=new_variable];
145 [label="25_ function transfer_intou22(address _to, uint _value) public returns (bool) {\n    require(balances_intou22[msg.sender] - _value >= 0);   \n    balances_intou22[msg.sender] -= _value;   \n    balances_intou22[_to] += _value;   \n    return true;\n  }\n145-function_definition-26-31", method="transfer_intou22(address _to,uint _value)", type_label=function_definition];
161 [label="26_ require(balances_intou22[msg.sender] - _value >= 0);\n161-expression_statement-27-27", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
174 [label="27_ balances_intou22[msg.sender] -= _value;\n174-expression_statement-28-28", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
182 [label="28_ balances_intou22[_to] += _value;\n182-expression_statement-29-29", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
188 [label="29_ return true;\n188-return-30-30", method="transfer_intou22(address _to,uint _value)", type_label=return];
191 [label="31_ address private _operator;\n191-new_variable-32-32", method="", type_label=new_variable];
196 [label="32_ function bug_intou12(uint8 p_intou12) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou12;    \n}\n196-function_definition-33-36", method="bug_intou12(uint8 p_intou12)", type_label=function_definition];
204 [label="33_ uint8 vundflw1=0;\n204-new_variable-34-34", method="bug_intou12(uint8 p_intou12)", type_label=new_variable];
210 [label="34_ vundflw1 = vundflw1 + p_intou12;\n210-expression_statement-35-35", method="bug_intou12(uint8 p_intou12)", type_label=expression_statement];
216 [label="36_ bool private _status;\n216-new_variable-37-37", method="", type_label=new_variable];
221 [label="37_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n221-function_definition-38-41", method="bug_intou27()", type_label=function_definition];
225 [label="38_ uint8 vundflw =0;\n225-new_variable-39-39", method="bug_intou27()", type_label=new_variable];
231 [label="39_ vundflw = vundflw -10;\n231-expression_statement-40-40", method="bug_intou27()", type_label=expression_statement];
247 [label="42_ function _setOperator(address operator) internal {\n        require(_operator != operator, \"cannot set same operator\");\n        _operator = operator;\n        emit OperatorUpdated(operator, hasActiveOperator());\n    }\n247-function_definition-43-47", method="_setOperator(address operator)", type_label=function_definition];
255 [label="43_ require(_operator != operator, \"cannot set same operator\");\n255-expression_statement-44-44", method="_setOperator(address operator)", type_label=expression_statement];
265 [label="44_ _operator = operator;\n265-expression_statement-45-45", method="_setOperator(address operator)", type_label=expression_statement];
276 [label="47_ mapping(address => uint) public lockTime_intou17;\n276-new_variable-48-48", method="", type_label=new_variable];
283 [label="48_ function increaseLockTime_intou17(uint _secondsToIncrease) public {\n        lockTime_intou17[msg.sender] += _secondsToIncrease;   \n    }\n283-function_definition-49-51", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=function_definition];
291 [label="49_ lockTime_intou17[msg.sender] += _secondsToIncrease;\n291-expression_statement-50-50", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=expression_statement];
299 [label="51_ function withdraw_intou17() public {\n        require(now > lockTime_intou17[msg.sender]);    \n        uint transferValue_intou17 = 10;           \n        msg.sender.transfer(transferValue_intou17);\n    }\n299-function_definition-52-56", method="withdraw_intou17()", type_label=function_definition];
303 [label="52_ require(now > lockTime_intou17[msg.sender]);\n303-expression_statement-53-53", method="withdraw_intou17()", type_label=expression_statement];
314 [label="53_ uint transferValue_intou17 = 10;\n314-new_variable-54-54", method="withdraw_intou17()", type_label=new_variable];
320 [label="54_ msg.sender.transfer(transferValue_intou17);\n320-expression_statement-55-55", method="withdraw_intou17()", type_label=expression_statement];
329 [label="56_ function _transferOperator(address operator) internal {\n        require(_operator != address(0), \"operator not set\");\n        _setOperator(operator);\n    }\n329-function_definition-57-60", method="_transferOperator(address operator)", type_label=function_definition];
337 [label="57_ require(_operator != address(0), \"operator not set\");\n337-expression_statement-58-58", method="_transferOperator(address operator)", type_label=expression_statement];
349 [label="58_ _setOperator(operator);\n349-expression_statement-59-59", method="_transferOperator(address operator)", type_label=expression_statement];
354 [label="60_ mapping(address => uint) public lockTime_intou37;\n354-new_variable-61-61", method="", type_label=new_variable];
361 [label="61_ function increaseLockTime_intou37(uint _secondsToIncrease) public {\n        lockTime_intou37[msg.sender] += _secondsToIncrease;   \n    }\n361-function_definition-62-64", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=function_definition];
369 [label="62_ lockTime_intou37[msg.sender] += _secondsToIncrease;\n369-expression_statement-63-63", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=expression_statement];
377 [label="64_ function withdraw_intou37() public {\n        require(now > lockTime_intou37[msg.sender]);    \n        uint transferValue_intou37 = 10;           \n        msg.sender.transfer(transferValue_intou37);\n    }\n377-function_definition-65-69", method="withdraw_intou37()", type_label=function_definition];
381 [label="65_ require(now > lockTime_intou37[msg.sender]);\n381-expression_statement-66-66", method="withdraw_intou37()", type_label=expression_statement];
392 [label="66_ uint transferValue_intou37 = 10;\n392-new_variable-67-67", method="withdraw_intou37()", type_label=new_variable];
398 [label="67_ msg.sender.transfer(transferValue_intou37);\n398-expression_statement-68-68", method="withdraw_intou37()", type_label=expression_statement];
407 [label="69_ function _renounceOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _operator = address(0);\n        _status = false;\n        emit OperatorUpdated(address(0), false);\n    }\n407-function_definition-70-75", method="_renounceOperator()", type_label=function_definition];
411 [label="70_ require(hasActiveOperator(), \"only when operator active\");\n411-expression_statement-71-71", method="_renounceOperator()", type_label=expression_statement];
420 [label="71_ _operator = address(0);\n420-expression_statement-72-72", method="_renounceOperator()", type_label=expression_statement];
426 [label="72_ _status = false;\n426-expression_statement-73-73", method="_renounceOperator()", type_label=expression_statement];
440 [label="75_ function bug_intou3() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n440-function_definition-76-79", method="bug_intou3()", type_label=function_definition];
444 [label="76_ uint8 vundflw =0;\n444-new_variable-77-77", method="bug_intou3()", type_label=new_variable];
450 [label="77_ vundflw = vundflw -10;\n450-expression_statement-78-78", method="bug_intou3()", type_label=expression_statement];
456 [label="79_ function _activateOperator() internal {\n        require(!hasActiveOperator(), \"only when operator not active\");\n        _status = true;\n        emit OperatorUpdated(_operator, true);\n    }\n456-function_definition-80-84", method="_activateOperator()", type_label=function_definition];
460 [label="80_ require(!hasActiveOperator(), \"only when operator not active\");\n460-expression_statement-81-81", method="_activateOperator()", type_label=expression_statement];
470 [label="81_ _status = true;\n470-expression_statement-82-82", method="_activateOperator()", type_label=expression_statement];
482 [label="84_ mapping(address => uint) public lockTime_intou9;\n482-new_variable-85-85", method="", type_label=new_variable];
489 [label="85_ function increaseLockTime_intou9(uint _secondsToIncrease) public {\n        lockTime_intou9[msg.sender] += _secondsToIncrease;   \n    }\n489-function_definition-86-88", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=function_definition];
497 [label="86_ lockTime_intou9[msg.sender] += _secondsToIncrease;\n497-expression_statement-87-87", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=expression_statement];
505 [label="88_ function withdraw_intou9() public {\n        require(now > lockTime_intou9[msg.sender]);    \n        uint transferValue_intou9 = 10;           \n        msg.sender.transfer(transferValue_intou9);\n    }\n505-function_definition-89-93", method="withdraw_intou9()", type_label=function_definition];
509 [label="89_ require(now > lockTime_intou9[msg.sender]);\n509-expression_statement-90-90", method="withdraw_intou9()", type_label=expression_statement];
520 [label="90_ uint transferValue_intou9 = 10;\n520-new_variable-91-91", method="withdraw_intou9()", type_label=new_variable];
526 [label="91_ msg.sender.transfer(transferValue_intou9);\n526-expression_statement-92-92", method="withdraw_intou9()", type_label=expression_statement];
535 [label="93_ function _deactivateOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _status = false;\n        emit OperatorUpdated(_operator, false);\n    }\n535-function_definition-94-98", method="_deactivateOperator()", type_label=function_definition];
539 [label="94_ require(hasActiveOperator(), \"only when operator active\");\n539-expression_statement-95-95", method="_deactivateOperator()", type_label=expression_statement];
548 [label="95_ _status = false;\n548-expression_statement-96-96", method="_deactivateOperator()", type_label=expression_statement];
560 [label="98_ mapping(address => uint) public lockTime_intou25;\n560-new_variable-99-99", method="", type_label=new_variable];
567 [label="99_ function increaseLockTime_intou25(uint _secondsToIncrease) public {\n        lockTime_intou25[msg.sender] += _secondsToIncrease;   \n    }\n567-function_definition-100-102", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=function_definition];
575 [label="100_ lockTime_intou25[msg.sender] += _secondsToIncrease;\n575-expression_statement-101-101", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=expression_statement];
583 [label="102_ function withdraw_intou25() public {\n        require(now > lockTime_intou25[msg.sender]);    \n        uint transferValue_intou25 = 10;           \n        msg.sender.transfer(transferValue_intou25);\n    }\n583-function_definition-103-107", method="withdraw_intou25()", type_label=function_definition];
587 [label="103_ require(now > lockTime_intou25[msg.sender]);\n587-expression_statement-104-104", method="withdraw_intou25()", type_label=expression_statement];
598 [label="104_ uint transferValue_intou25 = 10;\n598-new_variable-105-105", method="withdraw_intou25()", type_label=new_variable];
604 [label="105_ msg.sender.transfer(transferValue_intou25);\n604-expression_statement-106-106", method="withdraw_intou25()", type_label=expression_statement];
613 [label="107_ function getOperator() public view returns (address operator) {\n        operator = _operator;\n    }\n613-function_definition-108-110", method="getOperator()", type_label=function_definition];
623 [label="108_ operator = _operator;\n623-expression_statement-109-109", method="getOperator()", type_label=expression_statement];
627 [label="110_ function bug_intou19() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n627-function_definition-111-114", method="bug_intou19()", type_label=function_definition];
631 [label="111_ uint8 vundflw =0;\n631-new_variable-112-112", method="bug_intou19()", type_label=new_variable];
637 [label="112_ vundflw = vundflw -10;\n637-expression_statement-113-113", method="bug_intou19()", type_label=expression_statement];
643 [label="114_ function isOperator(address caller) public view returns (bool ok) {\n        return (caller == getOperator());\n    }\n643-function_definition-115-117", method="isOperator(address caller)", type_label=function_definition];
657 [label="115_ return (caller == getOperator());\n657-return-116-116", method="isOperator(address caller)", type_label=return];
663 [label="117_ mapping(address => uint) balances_intou26;\n663-new_variable-118-118", method="", type_label=new_variable];
669 [label="118_ function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] - _value >= 0);   \n    balances_intou26[msg.sender] -= _value;   \n    balances_intou26[_to] += _value;   \n    return true;\n  }\n669-function_definition-119-124", method="transfer_intou26(address _to,uint _value)", type_label=function_definition];
685 [label="119_ require(balances_intou26[msg.sender] - _value >= 0);\n685-expression_statement-120-120", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
698 [label="120_ balances_intou26[msg.sender] -= _value;\n698-expression_statement-121-121", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
706 [label="121_ balances_intou26[_to] += _value;\n706-expression_statement-122-122", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
712 [label="122_ return true;\n712-return-123-123", method="transfer_intou26(address _to,uint _value)", type_label=return];
715 [label="124_ function hasActiveOperator() public view returns (bool ok) {\n        return _status;\n    }\n715-function_definition-125-127", method="hasActiveOperator()", type_label=function_definition];
725 [label="125_ return _status;\n725-return-126-126", method="hasActiveOperator()", type_label=return];
727 [label="127_ function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou20;    \n}\n727-function_definition-128-131", method="bug_intou20(uint8 p_intou20)", type_label=function_definition];
735 [label="128_ uint8 vundflw1=0;\n735-new_variable-129-129", method="bug_intou20(uint8 p_intou20)", type_label=new_variable];
741 [label="129_ vundflw1 = vundflw1 + p_intou20;\n741-expression_statement-130-130", method="bug_intou20(uint8 p_intou20)", type_label=expression_statement];
747 [label="131_ function isActiveOperator(address caller) public view returns (bool ok) {\n        return (isOperator(caller) && hasActiveOperator());\n    }\n747-function_definition-132-134", method="isActiveOperator(address caller)", type_label=function_definition];
761 [label="132_ return (isOperator(caller) && hasActiveOperator());\n761-return-133-133", method="isActiveOperator(address caller)", type_label=return];
770 [label="134_ function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou32;    \n}\n770-function_definition-135-138", method="bug_intou32(uint8 p_intou32)", type_label=function_definition];
778 [label="135_ uint8 vundflw1=0;\n778-new_variable-136-136", method="bug_intou32(uint8 p_intou32)", type_label=new_variable];
784 [label="136_ vundflw1 = vundflw1 + p_intou32;\n784-expression_statement-137-137", method="bug_intou32(uint8 p_intou32)", type_label=expression_statement];
793 [label="140_ struct MultiHash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 digestSize;\n    }\n793-expression_statement-141-145", method="MultiHash()", type_label=expression_statement];
807 [label="145_ function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {\n        bytes memory out = new bytes(34);\n        out[0] = byte(multihash.hashFunction);\n        out[1] = byte(multihash.digestSize);\n        uint8 i;\n        for (i = 0; i < 32; i++) {\n          out[i+2] = multihash.hash[i];\n        }\n        return out;\n    }\n807-function_definition-146-155", method="_combineMultiHash(MultiHash memory multihash)", type_label=function_definition];
821 [label="146_ bytes memory out = new bytes(34);\n821-new_variable-147-147", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
832 [label="147_ out[0] = byte(multihash.hashFunction);\n832-expression_statement-148-148", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
842 [label="148_ out[1] = byte(multihash.digestSize);\n842-expression_statement-149-149", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
852 [label="149_ uint8 i;\n852-new_variable-150-150", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
857 [label="150_ for(i < 32;;i++)\n857-for-151-153", method="_combineMultiHash(MultiHash memory multihash)", type_label=for];
2791 [label="150_ end_loop", method="_combineMultiHash(MultiHash memory multihash)", type_label=end_loop];
866 [label="150_ i++\n866-expression_statement-151-151", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
869 [label="151_ out[i+2] = multihash.hash[i];\n869-expression_statement-152-152", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
881 [label="153_ return out;\n881-return-154-154", method="_combineMultiHash(MultiHash memory multihash)", type_label=return];
883 [label="155_ mapping(address => uint) balances_intou38;\n883-new_variable-156-156", method="", type_label=new_variable];
889 [label="156_ function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] - _value >= 0);   \n    balances_intou38[msg.sender] -= _value;   \n    balances_intou38[_to] += _value;   \n    return true;\n  }\n889-function_definition-157-162", method="transfer_intou38(address _to,uint _value)", type_label=function_definition];
905 [label="157_ require(balances_intou38[msg.sender] - _value >= 0);\n905-expression_statement-158-158", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
918 [label="158_ balances_intou38[msg.sender] -= _value;\n918-expression_statement-159-159", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
926 [label="159_ balances_intou38[_to] += _value;\n926-expression_statement-160-160", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
932 [label="160_ return true;\n932-return-161-161", method="transfer_intou38(address _to,uint _value)", type_label=return];
935 [label="162_ function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {\n        require(source.length == 34, \"length of source must be 34\");\n        uint8 hashFunction = uint8(source[0]);\n        uint8 digestSize = uint8(source[1]);\n        bytes32 hash;\n        assembly {\n          hash := mload(add(source, 34))\n        }\n        return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n    }\n935-function_definition-163-176", method="_splitMultiHash(bytes memory source)", type_label=function_definition];
949 [label="163_ require(source.length == 34, \"length of source must be 34\");\n949-expression_statement-164-164", method="_splitMultiHash(bytes memory source)", type_label=expression_statement];
961 [label="164_ uint8 hashFunction = uint8(source[0]);\n961-new_variable-165-165", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
971 [label="165_ uint8 digestSize = uint8(source[1]);\n971-new_variable-166-166", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
981 [label="166_ bytes32 hash;\n981-new_variable-167-167", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
999 [label="170_ return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n999-return-171-175", method="_splitMultiHash(bytes memory source)", type_label=return];
1013 [label="176_ function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou4;    \n}\n1013-function_definition-177-180", method="bug_intou4(uint8 p_intou4)", type_label=function_definition];
1021 [label="177_ uint8 vundflw1=0;\n1021-new_variable-178-178", method="bug_intou4(uint8 p_intou4)", type_label=new_variable];
1027 [label="178_ vundflw1 = vundflw1 + p_intou4;\n1027-expression_statement-179-179", method="bug_intou4(uint8 p_intou4)", type_label=expression_statement];
1054 [label="183_ function create(bytes calldata initData) external returns (address instance);\n1054-function_definition-184-184", method="create(bytes calldata initData)", type_label=function_definition];
1066 [label="184_ function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);\n1066-function_definition-185-185", method="createSalty(bytes calldata initData,bytes32 salt)", type_label=function_definition];
1082 [label="185_ function getInitSelector() external view returns (bytes4 initSelector);\n1082-function_definition-186-186", method="getInitSelector()", type_label=function_definition];
1091 [label="186_ function getInstanceRegistry() external view returns (address instanceRegistry);\n1091-function_definition-187-187", method="getInstanceRegistry()", type_label=function_definition];
1100 [label="187_ function getTemplate() external view returns (address template);\n1100-function_definition-188-188", method="getTemplate()", type_label=function_definition];
1109 [label="188_ function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);\n1109-function_definition-189-189", method="getSaltyInstance(bytes calldata,bytes32 salt)", type_label=function_definition];
1125 [label="189_ function getNextInstance(bytes calldata) external view returns (address instance);\n1125-function_definition-190-190", method="getNextInstance(bytes calldata)", type_label=function_definition];
1137 [label="190_ function getInstanceCreator(address instance) external view returns (address creator);\n1137-function_definition-191-191", method="getInstanceCreator(address instance)", type_label=function_definition];
1150 [label="191_ function getInstanceType() external view returns (bytes4 instanceType);\n1150-function_definition-192-192", method="getInstanceType()", type_label=function_definition];
1159 [label="192_ function getInstanceCount() external view returns (uint256 count);\n1159-function_definition-193-193", method="getInstanceCount()", type_label=function_definition];
1168 [label="193_ function getInstance(uint256 index) external view returns (address instance);\n1168-function_definition-194-194", method="getInstance(uint256 index)", type_label=function_definition];
1181 [label="194_ function getInstances() external view returns (address[] memory instances);\n1181-function_definition-195-195", method="getInstances()", type_label=function_definition];
1191 [label="195_ function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n1191-function_definition-196-196", method="getPaginatedInstances(uint256 startIndex,uint256 endIndex)", type_label=function_definition];
1215 [label="198_ function bug_intou11() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1215-function_definition-199-202", method="bug_intou11()", type_label=function_definition];
1219 [label="199_ uint8 vundflw =0;\n1219-new_variable-200-200", method="bug_intou11()", type_label=new_variable];
1225 [label="200_ vundflw = vundflw -10;\n1225-expression_statement-201-201", method="bug_intou11()", type_label=expression_statement];
1231 [label="202_ MultiHash private _proofHash;\n1231-new_variable-203-203", method="", type_label=new_variable];
1237 [label="203_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1237-function_definition-204-207", method="bug_intou31()", type_label=function_definition];
1241 [label="204_ uint8 vundflw =0;\n1241-new_variable-205-205", method="bug_intou31()", type_label=new_variable];
1247 [label="205_ vundflw = vundflw -10;\n1247-expression_statement-206-206", method="bug_intou31()", type_label=expression_statement];
1263 [label="208_ function _setProofHash(bytes memory proofHash) internal {\n        _proofHash = MultiHashWrapper._splitMultiHash(proofHash);\n        emit ProofHashSet(msg.sender, proofHash);\n    }\n1263-function_definition-209-212", method="_setProofHash(bytes memory proofHash)", type_label=function_definition];
1271 [label="209_ _proofHash = MultiHashWrapper._splitMultiHash(proofHash);\n1271-expression_statement-210-210", method="_setProofHash(bytes memory proofHash)", type_label=expression_statement];
1288 [label="212_ function bug_intou7() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1288-function_definition-213-216", method="bug_intou7()", type_label=function_definition];
1292 [label="213_ uint8 vundflw =0;\n1292-new_variable-214-214", method="bug_intou7()", type_label=new_variable];
1298 [label="214_ vundflw = vundflw -10;\n1298-expression_statement-215-215", method="bug_intou7()", type_label=expression_statement];
1304 [label="216_ function getProofHash() public view returns (bytes memory proofHash) {\n        proofHash = MultiHashWrapper._combineMultiHash(_proofHash);\n    }\n1304-function_definition-217-219", method="getProofHash()", type_label=function_definition];
1314 [label="217_ proofHash = MultiHashWrapper._combineMultiHash(_proofHash);\n1314-expression_statement-218-218", method="getProofHash()", type_label=expression_statement];
1323 [label="219_ function bug_intou23() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1323-function_definition-220-223", method="bug_intou23()", type_label=function_definition];
1327 [label="220_ uint8 vundflw =0;\n1327-new_variable-221-221", method="bug_intou23()", type_label=new_variable];
1333 [label="221_ vundflw = vundflw -10;\n1333-expression_statement-222-222", method="bug_intou23()", type_label=expression_statement];
1342 [label="225_ mapping(address => uint) public lockTime_intou1;\n1342-new_variable-226-226", method="", type_label=new_variable];
1349 [label="226_ function increaseLockTime_intou1(uint _secondsToIncrease) public {\n        lockTime_intou1[msg.sender] += _secondsToIncrease;   \n    }\n1349-function_definition-227-229", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=function_definition];
1357 [label="227_ lockTime_intou1[msg.sender] += _secondsToIncrease;\n1357-expression_statement-228-228", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=expression_statement];
1365 [label="229_ function withdraw_ovrflow1() public {\n        require(now > lockTime_intou1[msg.sender]);    \n        uint transferValue_intou1 = 10;           \n        msg.sender.transfer(transferValue_intou1);\n    }\n1365-function_definition-230-234", method="withdraw_ovrflow1()", type_label=function_definition];
1369 [label="230_ require(now > lockTime_intou1[msg.sender]);\n1369-expression_statement-231-231", method="withdraw_ovrflow1()", type_label=expression_statement];
1380 [label="231_ uint transferValue_intou1 = 10;\n1380-new_variable-232-232", method="withdraw_ovrflow1()", type_label=new_variable];
1386 [label="232_ msg.sender.transfer(transferValue_intou1);\n1386-expression_statement-233-233", method="withdraw_ovrflow1()", type_label=expression_statement];
1395 [label="234_ address private _factory;\n1395-new_variable-235-235", method="", type_label=new_variable];
1400 [label="235_ modifier initializeTemplate() {\n        _factory = msg.sender;\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n1400-expression_statement-236-242", method="", type_label=expression_statement];
1403 [label="236_ _factory = msg.sender;\n1403-expression_statement-237-237", method="", type_label=expression_statement];
1409 [label="237_ uint32 codeSize;\n1409-new_variable-238-238", method="", type_label=new_variable];
1423 [label="239_ require(codeSize == 0, \"must be called within contract constructor\");\n1423-expression_statement-240-240", method="", type_label=expression_statement];
1433 [label="240_ _;\n1433-expression_statement-241-241", method="", type_label=expression_statement];
1435 [label="242_ function getCreator() public view returns (address creator) {\n        creator = iFactory(_factory).getInstanceCreator(address(this));\n    }\n1435-function_definition-243-245", method="getCreator()", type_label=function_definition];
1445 [label="243_ creator = iFactory(_factory).getInstanceCreator(address(this));\n1445-expression_statement-244-244", method="getCreator()", type_label=expression_statement];
1459 [label="245_ mapping(address => uint) balances_intou14;\n1459-new_variable-246-246", method="", type_label=new_variable];
1465 [label="246_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n1465-function_definition-247-252", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
1481 [label="247_ require(balances_intou14[msg.sender] - _value >= 0);\n1481-expression_statement-248-248", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1494 [label="248_ balances_intou14[msg.sender] -= _value;\n1494-expression_statement-249-249", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1502 [label="249_ balances_intou14[_to] += _value;\n1502-expression_statement-250-250", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
1508 [label="250_ return true;\n1508-return-251-251", method="transfer_intou14(address _to,uint _value)", type_label=return];
1511 [label="252_ function isCreator(address caller) public view returns (bool ok) {\n        ok = (caller == getCreator());\n    }\n1511-function_definition-253-255", method="isCreator(address caller)", type_label=function_definition];
1525 [label="253_ ok = (caller == getCreator());\n1525-expression_statement-254-254", method="isCreator(address caller)", type_label=expression_statement];
1533 [label="255_ mapping(address => uint) balances_intou30;\n1533-new_variable-256-256", method="", type_label=new_variable];
1539 [label="256_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n1539-function_definition-257-262", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
1555 [label="257_ require(balances_intou30[msg.sender] - _value >= 0);\n1555-expression_statement-258-258", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1568 [label="258_ balances_intou30[msg.sender] -= _value;\n1568-expression_statement-259-259", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1576 [label="259_ balances_intou30[_to] += _value;\n1576-expression_statement-260-260", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
1582 [label="260_ return true;\n1582-return-261-261", method="transfer_intou30(address _to,uint _value)", type_label=return];
1585 [label="262_ function getFactory() public view returns (address factory) {\n        factory = _factory;\n    }\n1585-function_definition-263-265", method="getFactory()", type_label=function_definition];
1595 [label="263_ factory = _factory;\n1595-expression_statement-264-264", method="getFactory()", type_label=expression_statement];
1599 [label="265_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n1599-function_definition-266-269", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
1607 [label="266_ uint8 vundflw1=0;\n1607-new_variable-267-267", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
1613 [label="267_ vundflw1 = vundflw1 + p_intou8;\n1613-expression_statement-268-268", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
1634 [label="271_ mapping(address => uint) public lockTime_intou13;\n1634-new_variable-272-272", method="", type_label=new_variable];
1641 [label="272_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n1641-function_definition-273-275", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
1649 [label="273_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n1649-expression_statement-274-274", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
1657 [label="275_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n1657-function_definition-276-280", method="withdraw_intou13()", type_label=function_definition];
1661 [label="276_ require(now > lockTime_intou13[msg.sender]);\n1661-expression_statement-277-277", method="withdraw_intou13()", type_label=expression_statement];
1672 [label="277_ uint transferValue_intou13 = 10;\n1672-new_variable-278-278", method="withdraw_intou13()", type_label=new_variable];
1678 [label="278_ msg.sender.transfer(transferValue_intou13);\n1678-expression_statement-279-279", method="withdraw_intou13()", type_label=expression_statement];
1701 [label="281_ function initialize(\n        address operator,\n        bytes memory multihash,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        if (multihash.length != 0) {\n            ProofHash._setProofHash(multihash);\n        }\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n        emit Initialized(operator, multihash, metadata);\n    }\n1701-function_definition-282-298", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=function_definition];
1716 [label="285_ initializeTemplate()\n1716-expression_statement-286-286", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1719 [label="286_ if_multihash.length != 0\n1719-if-287-289", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3653 [label="286_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1726 [label="287_ ProofHash._setProofHash(multihash);\n1726-expression_statement-288-288", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1733 [label="289_ if_operator != address(0)\n1733-if-290-293", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3667 [label="289_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1740 [label="290_ Operated._setOperator(operator);\n1740-expression_statement-291-291", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1747 [label="291_ Operated._activateOperator();\n1747-expression_statement-292-292", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1752 [label="293_ if_metadata.length != 0\n1752-if-294-296", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3686 [label="293_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1759 [label="294_ EventMetadata._setMetadata(metadata);\n1759-expression_statement-295-295", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1774 [label="298_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1774-function_definition-299-302", method="bug_intou39()", type_label=function_definition];
1778 [label="299_ uint8 vundflw =0;\n1778-new_variable-300-300", method="bug_intou39()", type_label=new_variable];
1784 [label="300_ vundflw = vundflw -10;\n1784-expression_statement-301-301", method="bug_intou39()", type_label=expression_statement];
1790 [label="302_ function setMetadata(bytes memory metadata) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        EventMetadata._setMetadata(metadata);\n    }\n1790-function_definition-303-306", method="setMetadata(bytes memory metadata)", type_label=function_definition];
1798 [label="303_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1798-expression_statement-304-304", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1822 [label="304_ EventMetadata._setMetadata(metadata);\n1822-expression_statement-305-305", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1829 [label="306_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n1829-function_definition-307-310", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
1837 [label="307_ uint8 vundflw1=0;\n1837-new_variable-308-308", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
1843 [label="308_ vundflw1 = vundflw1 + p_intou36;\n1843-expression_statement-309-309", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
1849 [label="310_ function transferOperator(address operator) public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._transferOperator(operator);\n    }\n1849-function_definition-311-314", method="transferOperator(address operator)", type_label=function_definition];
1857 [label="311_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1857-expression_statement-312-312", method="transferOperator(address operator)", type_label=expression_statement];
1872 [label="312_ Operated._transferOperator(operator);\n1872-expression_statement-313-313", method="transferOperator(address operator)", type_label=expression_statement];
1879 [label="314_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1879-function_definition-315-318", method="bug_intou35()", type_label=function_definition];
1883 [label="315_ uint8 vundflw =0;\n1883-new_variable-316-316", method="bug_intou35()", type_label=new_variable];
1889 [label="316_ vundflw = vundflw -10;\n1889-expression_statement-317-317", method="bug_intou35()", type_label=expression_statement];
1895 [label="318_ function renounceOperator() public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._renounceOperator();\n    }\n1895-function_definition-319-322", method="renounceOperator()", type_label=function_definition];
1899 [label="319_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1899-expression_statement-320-320", method="renounceOperator()", type_label=expression_statement];
1914 [label="320_ Operated._renounceOperator();\n1914-expression_statement-321-321", method="renounceOperator()", type_label=expression_statement];
1919 [label="322_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n1919-function_definition-323-326", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
1927 [label="323_ uint8 vundflw1=0;\n1927-new_variable-324-324", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
1933 [label="324_ vundflw1 = vundflw1 + p_intou40;\n1933-expression_statement-325-325", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1766;
20 -> 28  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
40 -> 51  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 57  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
133 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
145 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
196 -> 204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
204 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
221 -> 225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
381 -> 392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
627 -> 631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
631 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
669 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
698 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
706 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
715 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
727 -> 735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
770 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
778 -> 784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
842 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 869  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
857 -> 2791  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2791 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 857  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
869 -> 866  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
881 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
889 -> 905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
926 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
935 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
971 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1013 -> 1021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 1219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 1225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1241 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1263 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1288 -> 1292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1292 -> 1298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 1314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1323 -> 1327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1327 -> 1333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1349 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1365 -> 1369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1369 -> 1380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 1386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1395 -> 1400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 1433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1435 -> 1445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1481 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1494 -> 1502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1502 -> 1508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1508 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1511 -> 1525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1539 -> 1555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1555 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 1576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1576 -> 1582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1582 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1585 -> 1595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1599 -> 1607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 1613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1641 -> 1649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1657 -> 1661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1661 -> 1672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1672 -> 1678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1701 -> 1719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1719 -> 1726  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1719 -> 3653  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3653 -> 1733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1726 -> 3653  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1733 -> 1740  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1733 -> 3667  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3667 -> 1752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1740 -> 1747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1747 -> 3667  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1752 -> 1759  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1752 -> 3686  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3686 -> 1766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1759 -> 3686  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1774 -> 1778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1778 -> 1784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1790 -> 1798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1798 -> 1822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1829 -> 1837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1837 -> 1843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1849 -> 1857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1857 -> 1872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1879 -> 1883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1883 -> 1889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1895 -> 1899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1899 -> 1914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1919 -> 1927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1927 -> 1933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
