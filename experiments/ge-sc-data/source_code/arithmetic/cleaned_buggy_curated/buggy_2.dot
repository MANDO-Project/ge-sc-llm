digraph  {
13 [label="2_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n13-function_definition-3-6", method="bug_intou27()", type_label=function_definition];
17 [label="3_ uint8 vundflw =0;\n17-new_variable-4-4", method="bug_intou27()", type_label=new_variable];
23 [label="4_ vundflw = vundflw -10;\n23-expression_statement-5-5", method="bug_intou27()", type_label=expression_statement];
43 [label="7_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n43-function_definition-8-11", method="bug_intou31()", type_label=function_definition];
47 [label="8_ uint8 vundflw =0;\n47-new_variable-9-9", method="bug_intou31()", type_label=new_variable];
53 [label="9_ vundflw = vundflw -10;\n53-expression_statement-10-10", method="bug_intou31()", type_label=expression_statement];
73 [label="12_ mapping(address => uint) public lockTime_intou13;\n73-new_variable-13-13", method="", type_label=new_variable];
80 [label="13_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n80-function_definition-14-16", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
88 [label="14_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n88-expression_statement-15-15", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
96 [label="16_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n96-function_definition-17-21", method="withdraw_intou13()", type_label=function_definition];
100 [label="17_ require(now > lockTime_intou13[msg.sender]);\n100-expression_statement-18-18", method="withdraw_intou13()", type_label=expression_statement];
111 [label="18_ uint transferValue_intou13 = 10;\n111-new_variable-19-19", method="withdraw_intou13()", type_label=new_variable];
117 [label="19_ msg.sender.transfer(transferValue_intou13);\n117-expression_statement-20-20", method="withdraw_intou13()", type_label=expression_statement];
140 [label="22_ mapping(address => uint) public lockTime_intou25;\n140-new_variable-23-23", method="", type_label=new_variable];
147 [label="23_ function increaseLockTime_intou25(uint _secondsToIncrease) public {\n        lockTime_intou25[msg.sender] += _secondsToIncrease;   \n    }\n147-function_definition-24-26", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=function_definition];
155 [label="24_ lockTime_intou25[msg.sender] += _secondsToIncrease;\n155-expression_statement-25-25", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=expression_statement];
163 [label="26_ function withdraw_intou25() public {\n        require(now > lockTime_intou25[msg.sender]);    \n        uint transferValue_intou25 = 10;           \n        msg.sender.transfer(transferValue_intou25);\n    }\n163-function_definition-27-31", method="withdraw_intou25()", type_label=function_definition];
167 [label="27_ require(now > lockTime_intou25[msg.sender]);\n167-expression_statement-28-28", method="withdraw_intou25()", type_label=expression_statement];
178 [label="28_ uint transferValue_intou25 = 10;\n178-new_variable-29-29", method="withdraw_intou25()", type_label=new_variable];
184 [label="29_ msg.sender.transfer(transferValue_intou25);\n184-expression_statement-30-30", method="withdraw_intou25()", type_label=expression_statement];
193 [label="31_ uint256 public totalSupply;\n193-new_variable-32-32", method="", type_label=new_variable];
198 [label="32_ function bug_intou19() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n198-function_definition-33-36", method="bug_intou19()", type_label=function_definition];
202 [label="33_ uint8 vundflw =0;\n202-new_variable-34-34", method="bug_intou19()", type_label=new_variable];
208 [label="34_ vundflw = vundflw -10;\n208-expression_statement-35-35", method="bug_intou19()", type_label=expression_statement];
214 [label="36_ string public name;\n214-new_variable-37-37", method="", type_label=new_variable];
219 [label="37_ mapping(address => uint) balances_intou26;\n219-new_variable-38-38", method="", type_label=new_variable];
225 [label="38_ function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] - _value >= 0);   \n    balances_intou26[msg.sender] -= _value;   \n    balances_intou26[_to] += _value;   \n    return true;\n  }\n225-function_definition-39-44", method="transfer_intou26(address _to,uint _value)", type_label=function_definition];
241 [label="39_ require(balances_intou26[msg.sender] - _value >= 0);\n241-expression_statement-40-40", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
254 [label="40_ balances_intou26[msg.sender] -= _value;\n254-expression_statement-41-41", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
262 [label="41_ balances_intou26[_to] += _value;\n262-expression_statement-42-42", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
268 [label="42_ return true;\n268-return-43-43", method="transfer_intou26(address _to,uint _value)", type_label=return];
271 [label="44_ uint8 public decimals;\n271-new_variable-45-45", method="", type_label=new_variable];
276 [label="45_ function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou20;    \n}\n276-function_definition-46-49", method="bug_intou20(uint8 p_intou20)", type_label=function_definition];
284 [label="46_ uint8 vundflw1=0;\n284-new_variable-47-47", method="bug_intou20(uint8 p_intou20)", type_label=new_variable];
290 [label="47_ vundflw1 = vundflw1 + p_intou20;\n290-expression_statement-48-48", method="bug_intou20(uint8 p_intou20)", type_label=expression_statement];
296 [label="49_ string public symbol;\n296-new_variable-50-50", method="", type_label=new_variable];
301 [label="50_ function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou32;    \n}\n301-function_definition-51-54", method="bug_intou32(uint8 p_intou32)", type_label=function_definition];
309 [label="51_ uint8 vundflw1=0;\n309-new_variable-52-52", method="bug_intou32(uint8 p_intou32)", type_label=new_variable];
315 [label="52_ vundflw1 = vundflw1 + p_intou32;\n315-expression_statement-53-53", method="bug_intou32(uint8 p_intou32)", type_label=expression_statement];
321 [label="54_ address public owner;\n321-new_variable-55-55", method="", type_label=new_variable];
326 [label="55_ mapping(address => uint) balances_intou38;\n326-new_variable-56-56", method="", type_label=new_variable];
332 [label="56_ function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] - _value >= 0);   \n    balances_intou38[msg.sender] -= _value;   \n    balances_intou38[_to] += _value;   \n    return true;\n  }\n332-function_definition-57-62", method="transfer_intou38(address _to,uint _value)", type_label=function_definition];
348 [label="57_ require(balances_intou38[msg.sender] - _value >= 0);\n348-expression_statement-58-58", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
361 [label="58_ balances_intou38[msg.sender] -= _value;\n361-expression_statement-59-59", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
369 [label="59_ balances_intou38[_to] += _value;\n369-expression_statement-60-60", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
375 [label="60_ return true;\n375-return-61-61", method="transfer_intou38(address _to,uint _value)", type_label=return];
378 [label="62_ mapping (address => uint256) public balances;\n378-new_variable-63-63", method="", type_label=new_variable];
385 [label="63_ function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou4;    \n}\n385-function_definition-64-67", method="bug_intou4(uint8 p_intou4)", type_label=function_definition];
393 [label="64_ uint8 vundflw1=0;\n393-new_variable-65-65", method="bug_intou4(uint8 p_intou4)", type_label=new_variable];
399 [label="65_ vundflw1 = vundflw1 + p_intou4;\n399-expression_statement-66-66", method="bug_intou4(uint8 p_intou4)", type_label=expression_statement];
405 [label="67_ mapping (address => mapping (address => uint256)) public allowed;\n405-new_variable-68-68", method="", type_label=new_variable];
414 [label="68_ function bug_intou7() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n414-function_definition-69-72", method="bug_intou7()", type_label=function_definition];
418 [label="69_ uint8 vundflw =0;\n418-new_variable-70-70", method="bug_intou7()", type_label=new_variable];
424 [label="70_ vundflw = vundflw -10;\n424-expression_statement-71-71", method="bug_intou7()", type_label=expression_statement];
430 [label="72_ bool isTransPaused=false;\n430-new_variable-73-73", method="", type_label=new_variable];
446 [label="77_ owner=msg.sender;\n446-expression_statement-78-78", method="", type_label=expression_statement];
452 [label="78_ if__initialAmount<=0\n452-if-79-85", method="", type_label=if];
1602 [label="78_ end_if", method="", type_label=end_if];
457 [label="79_ totalSupply = 100000000000000000;\n457-expression_statement-80-80", method="", type_label=expression_statement];
461 [label="80_ balances[owner]=totalSupply;\n461-expression_statement-81-81", method="", type_label=expression_statement];
468 [label="82_ totalSupply = _initialAmount;\n468-expression_statement-83-83", method="", type_label=expression_statement];
472 [label="83_ balances[owner]=_initialAmount;\n472-expression_statement-84-84", method="", type_label=expression_statement];
478 [label="85_ if__decimalUnits<=0\n478-if-86-90", method="", type_label=if];
1628 [label="85_ end_if", method="", type_label=end_if];
483 [label="86_ decimals=2;\n483-expression_statement-87-87", method="", type_label=expression_statement];
488 [label="88_ decimals = _decimalUnits;\n488-expression_statement-89-89", method="", type_label=expression_statement];
492 [label="90_ name = \"CareerOn Chain Token\";\n492-expression_statement-91-91", method="", type_label=expression_statement];
497 [label="91_ symbol = \"COT\";\n497-expression_statement-92-92", method="", type_label=expression_statement];
502 [label="93_ function bug_intou23() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n502-function_definition-94-97", method="bug_intou23()", type_label=function_definition];
506 [label="94_ uint8 vundflw =0;\n506-new_variable-95-95", method="bug_intou23()", type_label=new_variable];
512 [label="95_ vundflw = vundflw -10;\n512-expression_statement-96-96", method="bug_intou23()", type_label=expression_statement];
518 [label="97_ function transfer(\n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n        balances[msg.sender] -= _value; \n        balances[_to] += _value; \n		if(msg.sender==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(msg.sender, _to, _value); \n		}\n        return true;\n    }\n518-function_definition-98-115", method="transfer(address _to,uint256 _value)", type_label=function_definition];
535 [label="101_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n535-expression_statement-102-106", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
565 [label="106_ balances[msg.sender] -= _value;\n565-expression_statement-107-107", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
573 [label="107_ balances[_to] += _value;\n573-expression_statement-108-108", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
579 [label="108_ if_msg.sender==owner\n579-if-109-113", method="transfer(address _to,uint256 _value)", type_label=if];
1729 [label="108_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
607 [label="113_ return true;\n607-return-114-114", method="transfer(address _to,uint256 _value)", type_label=return];
610 [label="115_ mapping(address => uint) balances_intou14;\n610-new_variable-116-116", method="", type_label=new_variable];
616 [label="116_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n616-function_definition-117-122", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
632 [label="117_ require(balances_intou14[msg.sender] - _value >= 0);\n632-expression_statement-118-118", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
645 [label="118_ balances_intou14[msg.sender] -= _value;\n645-expression_statement-119-119", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
653 [label="119_ balances_intou14[_to] += _value;\n653-expression_statement-120-120", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
659 [label="120_ return true;\n659-return-121-121", method="transfer_intou14(address _to,uint _value)", type_label=return];
662 [label="122_ function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n        balances[_to] += _value; \n        balances[_from] -= _value;  \n        allowed[_from][msg.sender] -= _value; \n        if(_from==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(_from, _to, _value); \n		}\n        return true;\n    }\n662-function_definition-123-143", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
683 [label="127_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n683-expression_statement-128-133", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
723 [label="133_ balances[_to] += _value;\n723-expression_statement-134-134", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
729 [label="134_ balances[_from] -= _value;\n729-expression_statement-135-135", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
735 [label="135_ allowed[_from][msg.sender] -= _value;\n735-expression_statement-136-136", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
745 [label="136_ if__from==owner\n745-if-137-141", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1895 [label="136_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
769 [label="141_ return true;\n769-return-142-142", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
772 [label="143_ mapping(address => uint) balances_intou30;\n772-new_variable-144-144", method="", type_label=new_variable];
778 [label="144_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n778-function_definition-145-150", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
794 [label="145_ require(balances_intou30[msg.sender] - _value >= 0);\n794-expression_statement-146-146", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
807 [label="146_ balances_intou30[msg.sender] -= _value;\n807-expression_statement-147-147", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
815 [label="147_ balances_intou30[_to] += _value;\n815-expression_statement-148-148", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
821 [label="148_ return true;\n821-return-149-149", method="transfer_intou30(address _to,uint _value)", type_label=return];
824 [label="150_ function approve(address _spender, uint256 _value) public returns (bool success) \n    { \n        assert(msg.sender!=_spender && _value>0);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n824-function_definition-151-157", method="approve(address _spender,uint256 _value)", type_label=function_definition];
841 [label="152_ assert(msg.sender!=_spender && _value>0);\n841-expression_statement-153-153", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
854 [label="153_ allowed[msg.sender][_spender] = _value;\n854-expression_statement-154-154", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
874 [label="155_ return true;\n874-return-156-156", method="approve(address _spender,uint256 _value)", type_label=return];
877 [label="157_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n877-function_definition-158-161", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
885 [label="158_ uint8 vundflw1=0;\n885-new_variable-159-159", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
891 [label="159_ vundflw1 = vundflw1 + p_intou8;\n891-expression_statement-160-160", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
897 [label="161_ function allowance(\n        address _owner, \n        address _spender) public view returns (uint256 remaining) \n    {\n        return allowed[_owner][_spender]; \n    }\n897-function_definition-162-167", method="allowance(address _owner,address _spender)", type_label=function_definition];
915 [label="165_ return allowed[_owner][_spender];\n915-return-166-166", method="allowance(address _owner,address _spender)", type_label=return];
921 [label="167_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n921-function_definition-168-171", method="bug_intou39()", type_label=function_definition];
925 [label="168_ uint8 vundflw =0;\n925-new_variable-169-169", method="bug_intou39()", type_label=new_variable];
931 [label="169_ vundflw = vundflw -10;\n931-expression_statement-170-170", method="bug_intou39()", type_label=expression_statement];
937 [label="171_ function changeOwner(address newOwner) public{\n        assert(msg.sender==owner && msg.sender!=newOwner);\n        balances[newOwner]=balances[owner];\n        balances[owner]=0;\n        owner=newOwner;\n        emit OwnerChang(msg.sender,newOwner,balances[owner]); \n    }\n937-function_definition-172-178", method="changeOwner(address newOwner)", type_label=function_definition];
945 [label="172_ assert(msg.sender==owner && msg.sender!=newOwner);\n945-expression_statement-173-173", method="changeOwner(address newOwner)", type_label=expression_statement];
960 [label="173_ balances[newOwner]=balances[owner];\n960-expression_statement-174-174", method="changeOwner(address newOwner)", type_label=expression_statement];
968 [label="174_ balances[owner]=0;\n968-expression_statement-175-175", method="changeOwner(address newOwner)", type_label=expression_statement];
974 [label="175_ owner=newOwner;\n974-expression_statement-176-176", method="changeOwner(address newOwner)", type_label=expression_statement];
990 [label="178_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n990-function_definition-179-182", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
998 [label="179_ uint8 vundflw1=0;\n998-new_variable-180-180", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
1004 [label="180_ vundflw1 = vundflw1 + p_intou36;\n1004-expression_statement-181-181", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
1010 [label="182_ function setPauseStatus(bool isPaused)public{\n        assert(msg.sender==owner);\n        isTransPaused=isPaused;\n    }\n1010-function_definition-183-186", method="setPauseStatus(bool isPaused)", type_label=function_definition];
1018 [label="183_ assert(msg.sender==owner);\n1018-expression_statement-184-184", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1027 [label="184_ isTransPaused=isPaused;\n1027-expression_statement-185-185", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1031 [label="186_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1031-function_definition-187-190", method="bug_intou35()", type_label=function_definition];
1035 [label="187_ uint8 vundflw =0;\n1035-new_variable-188-188", method="bug_intou35()", type_label=new_variable];
1041 [label="188_ vundflw = vundflw -10;\n1041-expression_statement-189-189", method="bug_intou35()", type_label=expression_statement];
1047 [label="190_ function changeContractName(string memory _newName,string memory _newSymbol) public {\n        assert(msg.sender==owner);\n        name=_newName;\n        symbol=_newSymbol;\n    }\n1047-function_definition-191-195", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=function_definition];
1059 [label="191_ assert(msg.sender==owner);\n1059-expression_statement-192-192", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1068 [label="192_ name=_newName;\n1068-expression_statement-193-193", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1072 [label="193_ symbol=_newSymbol;\n1072-expression_statement-194-194", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1076 [label="195_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n1076-function_definition-196-199", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
1084 [label="196_ uint8 vundflw1=0;\n1084-new_variable-197-197", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
1090 [label="197_ vundflw1 = vundflw1 + p_intou40;\n1090-expression_statement-198-198", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
1102 [label="202_ mapping(address => uint) public lockTime_intou33;\n1102-new_variable-203-203", method="", type_label=new_variable];
1109 [label="203_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n1109-function_definition-204-206", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
1117 [label="204_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n1117-expression_statement-205-205", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
1125 [label="206_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n1125-function_definition-207-211", method="withdraw_intou33()", type_label=function_definition];
1129 [label="207_ require(now > lockTime_intou33[msg.sender]);\n1129-expression_statement-208-208", method="withdraw_intou33()", type_label=expression_statement];
1140 [label="208_ uint transferValue_intou33 = 10;\n1140-new_variable-209-209", method="withdraw_intou33()", type_label=new_variable];
1146 [label="209_ msg.sender.transfer(transferValue_intou33);\n1146-expression_statement-210-210", method="withdraw_intou33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
597;
761;
13 -> 17  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
17 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
43 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
111 -> 117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
147 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
198 -> 202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
254 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
268 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
276 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
284 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
301 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
332 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
385 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 457  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
452 -> 468  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1602 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 1602  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
468 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 1602  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
478 -> 483  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
478 -> 488  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1628 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 1628  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
488 -> 1628  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
492 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
506 -> 512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
616 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
662 -> 683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
683 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
778 -> 794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
794 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
824 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
877 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
915 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
921 -> 925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
925 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
990 -> 998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
998 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1010 -> 1018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 1035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 1041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1047 -> 1059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1059 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1109 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1125 -> 1129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1140 -> 1146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 1729  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
761 -> 1895  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
