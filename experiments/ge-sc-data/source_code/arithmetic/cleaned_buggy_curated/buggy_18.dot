digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns(uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns(uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns(uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns(uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function limitLessThan(uint a, uint b) internal pure returns(uint c) {\n        if (a > b) return b;\n        return a;\n    }\n146-function_definition-21-24", method="limitLessThan(uint a,uint b)", type_label=function_definition];
164 [label="21_ if_a > b\n164-if-22-22", method="limitLessThan(uint a,uint b)", type_label=if];
3192 [label="21_ end_if", method="limitLessThan(uint a,uint b)", type_label=end_if];
168 [label="21_ return b;\n168-return-22-22", method="limitLessThan(uint a,uint b)", type_label=return];
170 [label="22_ return a;\n170-return-23-23", method="limitLessThan(uint a,uint b)", type_label=return];
175 [label="26_ function totalSupply() public view returns(uint);\n175-function_definition-27-27", method="totalSupply()", type_label=function_definition];
183 [label="27_ function bug_intou28(uint8 p_intou28) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou28;    \n}\n183-function_definition-28-31", method="bug_intou28(uint8 p_intou28)", type_label=function_definition];
191 [label="28_ uint8 vundflw1=0;\n191-new_variable-29-29", method="bug_intou28(uint8 p_intou28)", type_label=new_variable];
197 [label="29_ vundflw1 = vundflw1 + p_intou28;\n197-expression_statement-30-30", method="bug_intou28(uint8 p_intou28)", type_label=expression_statement];
203 [label="31_ function balanceOf(address tokenOwner) public view returns(uint balance);\n203-function_definition-32-32", method="balanceOf(address tokenOwner)", type_label=function_definition];
216 [label="32_ mapping(address => uint) balances_intou34;\n216-new_variable-33-33", method="", type_label=new_variable];
222 [label="33_ function transfer_intou34(address _to, uint _value) public returns (bool) {\n    require(balances_intou34[msg.sender] - _value >= 0);   \n    balances_intou34[msg.sender] -= _value;   \n    balances_intou34[_to] += _value;   \n    return true;\n  }\n222-function_definition-34-39", method="transfer_intou34(address _to,uint _value)", type_label=function_definition];
238 [label="34_ require(balances_intou34[msg.sender] - _value >= 0);\n238-expression_statement-35-35", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
251 [label="35_ balances_intou34[msg.sender] -= _value;\n251-expression_statement-36-36", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
259 [label="36_ balances_intou34[_to] += _value;\n259-expression_statement-37-37", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
265 [label="37_ return true;\n265-return-38-38", method="transfer_intou34(address _to,uint _value)", type_label=return];
268 [label="39_ function allowance(address tokenOwner, address spender) public view returns(uint remaining);\n268-function_definition-40-40", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
285 [label="40_ mapping(address => uint) public lockTime_intou21;\n285-new_variable-41-41", method="", type_label=new_variable];
292 [label="41_ function increaseLockTime_intou21(uint _secondsToIncrease) public {\n        lockTime_intou21[msg.sender] += _secondsToIncrease;   \n    }\n292-function_definition-42-44", method="increaseLockTime_intou21(uint _secondsToIncrease)", type_label=function_definition];
300 [label="42_ lockTime_intou21[msg.sender] += _secondsToIncrease;\n300-expression_statement-43-43", method="increaseLockTime_intou21(uint _secondsToIncrease)", type_label=expression_statement];
308 [label="44_ function withdraw_intou21() public {\n        require(now > lockTime_intou21[msg.sender]);    \n        uint transferValue_intou21 = 10;           \n        msg.sender.transfer(transferValue_intou21);\n    }\n308-function_definition-45-49", method="withdraw_intou21()", type_label=function_definition];
312 [label="45_ require(now > lockTime_intou21[msg.sender]);\n312-expression_statement-46-46", method="withdraw_intou21()", type_label=expression_statement];
323 [label="46_ uint transferValue_intou21 = 10;\n323-new_variable-47-47", method="withdraw_intou21()", type_label=new_variable];
329 [label="47_ msg.sender.transfer(transferValue_intou21);\n329-expression_statement-48-48", method="withdraw_intou21()", type_label=expression_statement];
338 [label="49_ function transfer(address to, uint tokens) public returns(bool success);\n338-function_definition-50-50", method="transfer(address to,uint tokens)", type_label=function_definition];
354 [label="50_ mapping(address => uint) balances_intou10;\n354-new_variable-51-51", method="", type_label=new_variable];
360 [label="51_ function transfer_intou10(address _to, uint _value) public returns (bool) {\n    require(balances_intou10[msg.sender] - _value >= 0);   \n    balances_intou10[msg.sender] -= _value;   \n    balances_intou10[_to] += _value;   \n    return true;\n  }\n360-function_definition-52-57", method="transfer_intou10(address _to,uint _value)", type_label=function_definition];
376 [label="52_ require(balances_intou10[msg.sender] - _value >= 0);\n376-expression_statement-53-53", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
389 [label="53_ balances_intou10[msg.sender] -= _value;\n389-expression_statement-54-54", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
397 [label="54_ balances_intou10[_to] += _value;\n397-expression_statement-55-55", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
403 [label="55_ return true;\n403-return-56-56", method="transfer_intou10(address _to,uint _value)", type_label=return];
406 [label="57_ function approve(address spender, uint tokens) public returns(bool success);\n406-function_definition-58-58", method="approve(address spender,uint tokens)", type_label=function_definition];
422 [label="58_ mapping(address => uint) balances_intou22;\n422-new_variable-59-59", method="", type_label=new_variable];
428 [label="59_ function transfer_intou22(address _to, uint _value) public returns (bool) {\n    require(balances_intou22[msg.sender] - _value >= 0);   \n    balances_intou22[msg.sender] -= _value;   \n    balances_intou22[_to] += _value;   \n    return true;\n  }\n428-function_definition-60-65", method="transfer_intou22(address _to,uint _value)", type_label=function_definition];
444 [label="60_ require(balances_intou22[msg.sender] - _value >= 0);\n444-expression_statement-61-61", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
457 [label="61_ balances_intou22[msg.sender] -= _value;\n457-expression_statement-62-62", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
465 [label="62_ balances_intou22[_to] += _value;\n465-expression_statement-63-63", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
471 [label="63_ return true;\n471-return-64-64", method="transfer_intou22(address _to,uint _value)", type_label=return];
474 [label="65_ function transferFrom(address from, address to, uint tokens) public returns(bool success);\n474-function_definition-66-66", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
494 [label="66_ function bug_intou12(uint8 p_intou12) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou12;    \n}\n494-function_definition-67-70", method="bug_intou12(uint8 p_intou12)", type_label=function_definition];
502 [label="67_ uint8 vundflw1=0;\n502-new_variable-68-68", method="bug_intou12(uint8 p_intou12)", type_label=new_variable];
508 [label="68_ vundflw1 = vundflw1 + p_intou12;\n508-expression_statement-69-69", method="bug_intou12(uint8 p_intou12)", type_label=expression_statement];
514 [label="70_ mapping(address => uint) public lockTime_intou33;\n514-new_variable-71-71", method="", type_label=new_variable];
521 [label="71_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n521-function_definition-72-74", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
529 [label="72_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n529-expression_statement-73-73", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
537 [label="74_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n537-function_definition-75-79", method="withdraw_intou33()", type_label=function_definition];
541 [label="75_ require(now > lockTime_intou33[msg.sender]);\n541-expression_statement-76-76", method="withdraw_intou33()", type_label=expression_statement];
552 [label="76_ uint transferValue_intou33 = 10;\n552-new_variable-77-77", method="withdraw_intou33()", type_label=new_variable];
558 [label="77_ msg.sender.transfer(transferValue_intou33);\n558-expression_statement-78-78", method="withdraw_intou33()", type_label=expression_statement];
581 [label="80_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n581-function_definition-81-84", method="bug_intou27()", type_label=function_definition];
585 [label="81_ uint8 vundflw =0;\n585-new_variable-82-82", method="bug_intou27()", type_label=new_variable];
591 [label="82_ vundflw = vundflw -10;\n591-expression_statement-83-83", method="bug_intou27()", type_label=expression_statement];
614 [label="87_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n614-function_definition-88-88", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
633 [label="88_ function bug_intou11() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n633-function_definition-89-92", method="bug_intou11()", type_label=function_definition];
637 [label="89_ uint8 vundflw =0;\n637-new_variable-90-90", method="bug_intou11()", type_label=new_variable];
643 [label="90_ vundflw = vundflw -10;\n643-expression_statement-91-91", method="bug_intou11()", type_label=expression_statement];
652 [label="94_ address public owner;\n652-new_variable-95-95", method="", type_label=new_variable];
657 [label="95_ address public newOwner;\n657-new_variable-96-96", method="", type_label=new_variable];
662 [label="96_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n662-function_definition-97-100", method="bug_intou31()", type_label=function_definition];
666 [label="97_ uint8 vundflw =0;\n666-new_variable-98-98", method="bug_intou31()", type_label=new_variable];
672 [label="98_ vundflw = vundflw -10;\n672-expression_statement-99-99", method="bug_intou31()", type_label=expression_statement];
690 [label="102_ owner = msg.sender;\n690-expression_statement-103-103", method="", type_label=expression_statement];
696 [label="104_ mapping(address => uint) public lockTime_intou1;\n696-new_variable-105-105", method="", type_label=new_variable];
703 [label="105_ function increaseLockTime_intou1(uint _secondsToIncrease) public {\n        lockTime_intou1[msg.sender] += _secondsToIncrease;   \n    }\n703-function_definition-106-108", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=function_definition];
711 [label="106_ lockTime_intou1[msg.sender] += _secondsToIncrease;\n711-expression_statement-107-107", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=expression_statement];
719 [label="108_ function withdraw_ovrflow1() public {\n        require(now > lockTime_intou1[msg.sender]);    \n        uint transferValue_intou1 = 10;           \n        msg.sender.transfer(transferValue_intou1);\n    }\n719-function_definition-109-113", method="withdraw_ovrflow1()", type_label=function_definition];
723 [label="109_ require(now > lockTime_intou1[msg.sender]);\n723-expression_statement-110-110", method="withdraw_ovrflow1()", type_label=expression_statement];
734 [label="110_ uint transferValue_intou1 = 10;\n734-new_variable-111-111", method="withdraw_ovrflow1()", type_label=new_variable];
740 [label="111_ msg.sender.transfer(transferValue_intou1);\n740-expression_statement-112-112", method="withdraw_ovrflow1()", type_label=expression_statement];
749 [label="113_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n749-expression_statement-114-117", method="", type_label=expression_statement];
752 [label="114_ require(msg.sender == owner);\n752-expression_statement-115-115", method="", type_label=expression_statement];
761 [label="115_ _;\n761-expression_statement-116-116", method="", type_label=expression_statement];
763 [label="117_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n763-function_definition-118-120", method="transferOwnership(address _newOwner)", type_label=function_definition];
770 [label="117_ onlyOwner\n770-expression_statement-118-118", method="transferOwnership(address _newOwner)", type_label=expression_statement];
773 [label="118_ newOwner = _newOwner;\n773-expression_statement-119-119", method="transferOwnership(address _newOwner)", type_label=expression_statement];
777 [label="120_ mapping(address => uint) balances_intou2;\n777-new_variable-121-121", method="", type_label=new_variable];
783 [label="121_ function transfer_undrflow2(address _to, uint _value) public returns (bool) {\n    require(balances_intou2[msg.sender] - _value >= 0);   \n    balances_intou2[msg.sender] -= _value;   \n    balances_intou2[_to] += _value;   \n    return true;\n  }\n783-function_definition-122-127", method="transfer_undrflow2(address _to,uint _value)", type_label=function_definition];
799 [label="122_ require(balances_intou2[msg.sender] - _value >= 0);\n799-expression_statement-123-123", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
812 [label="123_ balances_intou2[msg.sender] -= _value;\n812-expression_statement-124-124", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
820 [label="124_ balances_intou2[_to] += _value;\n820-expression_statement-125-125", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
826 [label="125_ return true;\n826-return-126-126", method="transfer_undrflow2(address _to,uint _value)", type_label=return];
829 [label="127_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n829-function_definition-128-133", method="acceptOwnership()", type_label=function_definition];
833 [label="128_ require(msg.sender == newOwner);\n833-expression_statement-129-129", method="acceptOwnership()", type_label=expression_statement];
848 [label="130_ owner = newOwner;\n848-expression_statement-131-131", method="acceptOwnership()", type_label=expression_statement];
852 [label="131_ newOwner = address(0);\n852-expression_statement-132-132", method="acceptOwnership()", type_label=expression_statement];
858 [label="133_ mapping(address => uint) public lockTime_intou17;\n858-new_variable-134-134", method="", type_label=new_variable];
865 [label="134_ function increaseLockTime_intou17(uint _secondsToIncrease) public {\n        lockTime_intou17[msg.sender] += _secondsToIncrease;   \n    }\n865-function_definition-135-137", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=function_definition];
873 [label="135_ lockTime_intou17[msg.sender] += _secondsToIncrease;\n873-expression_statement-136-136", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=expression_statement];
881 [label="137_ function withdraw_intou17() public {\n        require(now > lockTime_intou17[msg.sender]);    \n        uint transferValue_intou17 = 10;           \n        msg.sender.transfer(transferValue_intou17);\n    }\n881-function_definition-138-142", method="withdraw_intou17()", type_label=function_definition];
885 [label="138_ require(now > lockTime_intou17[msg.sender]);\n885-expression_statement-139-139", method="withdraw_intou17()", type_label=expression_statement];
896 [label="139_ uint transferValue_intou17 = 10;\n896-new_variable-140-140", method="withdraw_intou17()", type_label=new_variable];
902 [label="140_ msg.sender.transfer(transferValue_intou17);\n902-expression_statement-141-141", method="withdraw_intou17()", type_label=expression_statement];
930 [label="146_ string public symbol;\n930-new_variable-147-147", method="", type_label=new_variable];
935 [label="147_ string public name;\n935-new_variable-148-148", method="", type_label=new_variable];
940 [label="148_ uint8 public decimals;\n940-new_variable-149-149", method="", type_label=new_variable];
945 [label="149_ uint public _totalSupply;\n945-new_variable-150-150", method="", type_label=new_variable];
950 [label="150_ uint public latestDifficultyPeriodStarted;\n950-new_variable-151-151", method="", type_label=new_variable];
955 [label="151_ uint public epochCount;\n955-new_variable-152-152", method="", type_label=new_variable];
960 [label="152_ uint public _BLOCKS_PER_READJUSTMENT = 1024;\n960-new_variable-153-153", method="", type_label=new_variable];
966 [label="153_ uint public _MINIMUM_TARGET = 2 ** 16;\n966-new_variable-154-154", method="", type_label=new_variable];
974 [label="154_ uint public _MAXIMUM_TARGET = 2 ** 234;\n974-new_variable-155-155", method="", type_label=new_variable];
982 [label="155_ uint public miningTarget;\n982-new_variable-156-156", method="", type_label=new_variable];
987 [label="156_ bytes32 public challengeNumber;\n987-new_variable-157-157", method="", type_label=new_variable];
992 [label="157_ uint public rewardEra;\n992-new_variable-158-158", method="", type_label=new_variable];
997 [label="158_ uint public maxSupplyForEra;\n997-new_variable-159-159", method="", type_label=new_variable];
1002 [label="159_ address public lastRewardTo;\n1002-new_variable-160-160", method="", type_label=new_variable];
1007 [label="160_ mapping(address => uint) balances_intou18;\n1007-new_variable-161-161", method="", type_label=new_variable];
1013 [label="161_ function transfer_intou18(address _to, uint _value) public returns (bool) {\n    require(balances_intou18[msg.sender] - _value >= 0);   \n    balances_intou18[msg.sender] -= _value;   \n    balances_intou18[_to] += _value;   \n    return true;\n  }\n1013-function_definition-162-167", method="transfer_intou18(address _to,uint _value)", type_label=function_definition];
1029 [label="162_ require(balances_intou18[msg.sender] - _value >= 0);\n1029-expression_statement-163-163", method="transfer_intou18(address _to,uint _value)", type_label=expression_statement];
1042 [label="163_ balances_intou18[msg.sender] -= _value;\n1042-expression_statement-164-164", method="transfer_intou18(address _to,uint _value)", type_label=expression_statement];
1050 [label="164_ balances_intou18[_to] += _value;\n1050-expression_statement-165-165", method="transfer_intou18(address _to,uint _value)", type_label=expression_statement];
1056 [label="165_ return true;\n1056-return-166-166", method="transfer_intou18(address _to,uint _value)", type_label=return];
1059 [label="167_ uint public lastRewardAmount;\n1059-new_variable-168-168", method="", type_label=new_variable];
1064 [label="168_ mapping(address => uint) public lockTime_intou29;\n1064-new_variable-169-169", method="", type_label=new_variable];
1071 [label="169_ function increaseLockTime_intou29(uint _secondsToIncrease) public {\n        lockTime_intou29[msg.sender] += _secondsToIncrease;   \n    }\n1071-function_definition-170-172", method="increaseLockTime_intou29(uint _secondsToIncrease)", type_label=function_definition];
1079 [label="170_ lockTime_intou29[msg.sender] += _secondsToIncrease;\n1079-expression_statement-171-171", method="increaseLockTime_intou29(uint _secondsToIncrease)", type_label=expression_statement];
1087 [label="172_ function withdraw_intou29() public {\n        require(now > lockTime_intou29[msg.sender]);    \n        uint transferValue_intou29 = 10;           \n        msg.sender.transfer(transferValue_intou29);\n    }\n1087-function_definition-173-177", method="withdraw_intou29()", type_label=function_definition];
1091 [label="173_ require(now > lockTime_intou29[msg.sender]);\n1091-expression_statement-174-174", method="withdraw_intou29()", type_label=expression_statement];
1102 [label="174_ uint transferValue_intou29 = 10;\n1102-new_variable-175-175", method="withdraw_intou29()", type_label=new_variable];
1108 [label="175_ msg.sender.transfer(transferValue_intou29);\n1108-expression_statement-176-176", method="withdraw_intou29()", type_label=expression_statement];
1117 [label="177_ uint public lastRewardEthBlockNumber;\n1117-new_variable-178-178", method="", type_label=new_variable];
1122 [label="178_ mapping(address => uint) balances_intou6;\n1122-new_variable-179-179", method="", type_label=new_variable];
1128 [label="179_ function transfer_intou62(address _to, uint _value) public returns (bool) {\n    require(balances_intou6[msg.sender] - _value >= 0);   \n    balances_intou6[msg.sender] -= _value;   \n    balances_intou6[_to] += _value;   \n    return true;\n  }\n1128-function_definition-180-185", method="transfer_intou62(address _to,uint _value)", type_label=function_definition];
1144 [label="180_ require(balances_intou6[msg.sender] - _value >= 0);\n1144-expression_statement-181-181", method="transfer_intou62(address _to,uint _value)", type_label=expression_statement];
1157 [label="181_ balances_intou6[msg.sender] -= _value;\n1157-expression_statement-182-182", method="transfer_intou62(address _to,uint _value)", type_label=expression_statement];
1165 [label="182_ balances_intou6[_to] += _value;\n1165-expression_statement-183-183", method="transfer_intou62(address _to,uint _value)", type_label=expression_statement];
1171 [label="183_ return true;\n1171-return-184-184", method="transfer_intou62(address _to,uint _value)", type_label=return];
1174 [label="185_ bool locked = false;\n1174-new_variable-186-186", method="", type_label=new_variable];
1180 [label="186_ function bug_intou16(uint8 p_intou16) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou16;    \n}\n1180-function_definition-187-190", method="bug_intou16(uint8 p_intou16)", type_label=function_definition];
1188 [label="187_ uint8 vundflw1=0;\n1188-new_variable-188-188", method="bug_intou16(uint8 p_intou16)", type_label=new_variable];
1194 [label="188_ vundflw1 = vundflw1 + p_intou16;\n1194-expression_statement-189-189", method="bug_intou16(uint8 p_intou16)", type_label=expression_statement];
1200 [label="190_ mapping(bytes32 => bytes32) solutionForChallenge;\n1200-new_variable-191-191", method="", type_label=new_variable];
1206 [label="191_ function bug_intou24(uint8 p_intou24) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou24;    \n}\n1206-function_definition-192-195", method="bug_intou24(uint8 p_intou24)", type_label=function_definition];
1214 [label="192_ uint8 vundflw1=0;\n1214-new_variable-193-193", method="bug_intou24(uint8 p_intou24)", type_label=new_variable];
1220 [label="193_ vundflw1 = vundflw1 + p_intou24;\n1220-expression_statement-194-194", method="bug_intou24(uint8 p_intou24)", type_label=expression_statement];
1226 [label="195_ uint public tokensMinted;\n1226-new_variable-196-196", method="", type_label=new_variable];
1231 [label="196_ mapping(address => uint) balances;\n1231-new_variable-197-197", method="", type_label=new_variable];
1237 [label="197_ mapping(address => uint) public lockTime_intou5;\n1237-new_variable-198-198", method="", type_label=new_variable];
1244 [label="198_ function increaseLockTime_intou5(uint _secondsToIncrease) public {\n        lockTime_intou5[msg.sender] += _secondsToIncrease;   \n    }\n1244-function_definition-199-201", method="increaseLockTime_intou5(uint _secondsToIncrease)", type_label=function_definition];
1252 [label="199_ lockTime_intou5[msg.sender] += _secondsToIncrease;\n1252-expression_statement-200-200", method="increaseLockTime_intou5(uint _secondsToIncrease)", type_label=expression_statement];
1260 [label="201_ function withdraw_intou5() public {\n        require(now > lockTime_intou5[msg.sender]);    \n        uint transferValue_intou5 = 10;           \n        msg.sender.transfer(transferValue_intou5);\n    }\n1260-function_definition-202-206", method="withdraw_intou5()", type_label=function_definition];
1264 [label="202_ require(now > lockTime_intou5[msg.sender]);\n1264-expression_statement-203-203", method="withdraw_intou5()", type_label=expression_statement];
1275 [label="203_ uint transferValue_intou5 = 10;\n1275-new_variable-204-204", method="withdraw_intou5()", type_label=new_variable];
1281 [label="204_ msg.sender.transfer(transferValue_intou5);\n1281-expression_statement-205-205", method="withdraw_intou5()", type_label=expression_statement];
1290 [label="206_ mapping(address => mapping(address => uint)) allowed;\n1290-new_variable-207-207", method="", type_label=new_variable];
1298 [label="207_ function bug_intou15() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1298-function_definition-208-211", method="bug_intou15()", type_label=function_definition];
1302 [label="208_ uint8 vundflw =0;\n1302-new_variable-209-209", method="bug_intou15()", type_label=new_variable];
1308 [label="209_ vundflw = vundflw -10;\n1308-expression_statement-210-210", method="bug_intou15()", type_label=expression_statement];
1314 [label="211_ uint public burnPercent;\n1314-new_variable-212-212", method="", type_label=new_variable];
1319 [label="212_ mapping(address => uint) public lockTime_intou13;\n1319-new_variable-213-213", method="", type_label=new_variable];
1326 [label="213_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n1326-function_definition-214-216", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
1334 [label="214_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n1334-expression_statement-215-215", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
1342 [label="216_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n1342-function_definition-217-221", method="withdraw_intou13()", type_label=function_definition];
1346 [label="217_ require(now > lockTime_intou13[msg.sender]);\n1346-expression_statement-218-218", method="withdraw_intou13()", type_label=expression_statement];
1357 [label="218_ uint transferValue_intou13 = 10;\n1357-new_variable-219-219", method="withdraw_intou13()", type_label=new_variable];
1363 [label="219_ msg.sender.transfer(transferValue_intou13);\n1363-expression_statement-220-220", method="withdraw_intou13()", type_label=expression_statement];
1391 [label="222_ onlyOwner\n1391-expression_statement-223-223", method="", type_label=expression_statement];
1394 [label="223_ symbol = \"YESBUZ\";\n1394-expression_statement-224-224", method="", type_label=expression_statement];
1399 [label="224_ name = \"Yesbuzz\";\n1399-expression_statement-225-225", method="", type_label=expression_statement];
1404 [label="225_ decimals = 8;\n1404-expression_statement-226-226", method="", type_label=expression_statement];
1408 [label="226_ _totalSupply = 21000000 * 10 ** uint(decimals);\n1408-expression_statement-227-227", method="", type_label=expression_statement];
1418 [label="227_ if\n1418-if-228-228", method="", type_label=if];
4446 [label="227_ end_if", method="", type_label=end_if];
1422 [label="228_ locked = true;\n1422-expression_statement-229-229", method="", type_label=expression_statement];
1427 [label="229_ tokensMinted = 0;\n1427-expression_statement-230-230", method="", type_label=expression_statement];
1431 [label="230_ rewardEra = 0;\n1431-expression_statement-231-231", method="", type_label=expression_statement];
1435 [label="231_ maxSupplyForEra = _totalSupply.div(2);\n1435-expression_statement-232-232", method="", type_label=expression_statement];
1444 [label="232_ miningTarget = _MAXIMUM_TARGET;\n1444-expression_statement-233-233", method="", type_label=expression_statement];
1448 [label="233_ latestDifficultyPeriodStarted = block.number;\n1448-expression_statement-234-234", method="", type_label=expression_statement];
1454 [label="234_ burnPercent = 10;\n1454-expression_statement-235-235", method="", type_label=expression_statement];
1458 [label="235_ _startNewMiningEpoch();\n1458-expression_statement-236-236", method="", type_label=expression_statement];
1461 [label="237_ mapping(address => uint) public lockTime_intou37;\n1461-new_variable-238-238", method="", type_label=new_variable];
1468 [label="238_ function increaseLockTime_intou37(uint _secondsToIncrease) public {\n        lockTime_intou37[msg.sender] += _secondsToIncrease;   \n    }\n1468-function_definition-239-241", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=function_definition];
1476 [label="239_ lockTime_intou37[msg.sender] += _secondsToIncrease;\n1476-expression_statement-240-240", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=expression_statement];
1484 [label="241_ function withdraw_intou37() public {\n        require(now > lockTime_intou37[msg.sender]);    \n        uint transferValue_intou37 = 10;           \n        msg.sender.transfer(transferValue_intou37);\n    }\n1484-function_definition-242-246", method="withdraw_intou37()", type_label=function_definition];
1488 [label="242_ require(now > lockTime_intou37[msg.sender]);\n1488-expression_statement-243-243", method="withdraw_intou37()", type_label=expression_statement];
1499 [label="243_ uint transferValue_intou37 = 10;\n1499-new_variable-244-244", method="withdraw_intou37()", type_label=new_variable];
1505 [label="244_ msg.sender.transfer(transferValue_intou37);\n1505-expression_statement-245-245", method="withdraw_intou37()", type_label=expression_statement];
1514 [label="246_ function mint(uint256 nonce, bytes32 challenge_digest) public returns(bool success) {\n        bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\n        if (digest != challenge_digest) revert();\n        if (uint256(digest) > miningTarget) revert();\n        bytes32 solution = solutionForChallenge[challengeNumber];\n        solutionForChallenge[challengeNumber] = digest;\n        if (solution != 0x0) revert();  \n        uint reward_amount = getMiningReward();\n        balances[msg.sender] = balances[msg.sender].add(reward_amount);\n        tokensMinted = tokensMinted.add(reward_amount);\n        assert(tokensMinted <= maxSupplyForEra);\n        lastRewardTo = msg.sender;\n        lastRewardAmount = reward_amount;\n        lastRewardEthBlockNumber = block.number;\n        _startNewMiningEpoch();\n        emit Mint(msg.sender, reward_amount, epochCount, challengeNumber);\n        return true;\n    }\n1514-function_definition-247-264", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=function_definition];
1531 [label="247_ bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\n1531-new_variable-248-248", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
1551 [label="248_ if_digest != challenge_digest\n1551-if-249-249", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
4579 [label="248_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
1557 [label="249_ if_uint256(digest) > miningTarget\n1557-if-250-250", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
4585 [label="249_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
1565 [label="250_ bytes32 solution = solutionForChallenge[challengeNumber];\n1565-new_variable-251-251", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
1573 [label="251_ solutionForChallenge[challengeNumber] = digest;\n1573-expression_statement-252-252", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1579 [label="252_ if_solution != 0x0\n1579-if-253-253", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
4607 [label="252_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
1585 [label="253_ uint reward_amount = getMiningReward();\n1585-new_variable-254-254", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
1592 [label="254_ balances[msg.sender] = balances[msg.sender].add(reward_amount);\n1592-expression_statement-255-255", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1609 [label="255_ tokensMinted = tokensMinted.add(reward_amount);\n1609-expression_statement-256-256", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1618 [label="256_ assert(tokensMinted <= maxSupplyForEra);\n1618-expression_statement-257-257", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1625 [label="257_ lastRewardTo = msg.sender;\n1625-expression_statement-258-258", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1631 [label="258_ lastRewardAmount = reward_amount;\n1631-expression_statement-259-259", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1635 [label="259_ lastRewardEthBlockNumber = block.number;\n1635-expression_statement-260-260", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1641 [label="260_ _startNewMiningEpoch();\n1641-expression_statement-261-261", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1656 [label="262_ return true;\n1656-return-263-263", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=return];
1659 [label="264_ function bug_intou3() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1659-function_definition-265-268", method="bug_intou3()", type_label=function_definition];
1663 [label="265_ uint8 vundflw =0;\n1663-new_variable-266-266", method="bug_intou3()", type_label=new_variable];
1669 [label="266_ vundflw = vundflw -10;\n1669-expression_statement-267-267", method="bug_intou3()", type_label=expression_statement];
1675 [label="268_ function _startNewMiningEpoch() internal {\n        if (tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39) {\n            rewardEra = rewardEra + 1;\n        }\n        maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));\n        epochCount = epochCount.add(1);\n        if (epochCount % _BLOCKS_PER_READJUSTMENT == 0) {\n            _reAdjustDifficulty();\n        }\n        challengeNumber = blockhash(block.number - 1);\n    }\n1675-function_definition-269-279", method="_startNewMiningEpoch()", type_label=function_definition];
1679 [label="269_ if_tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39\n1679-if-270-272", method="_startNewMiningEpoch()", type_label=if];
4707 [label="269_ end_if", method="_startNewMiningEpoch()", type_label=end_if];
1694 [label="270_ rewardEra = rewardEra + 1;\n1694-expression_statement-271-271", method="_startNewMiningEpoch()", type_label=expression_statement];
1700 [label="272_ maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));\n1700-expression_statement-273-273", method="_startNewMiningEpoch()", type_label=expression_statement];
1716 [label="273_ epochCount = epochCount.add(1);\n1716-expression_statement-274-274", method="_startNewMiningEpoch()", type_label=expression_statement];
1725 [label="274_ if_epochCount % _BLOCKS_PER_READJUSTMENT == 0\n1725-if-275-277", method="_startNewMiningEpoch()", type_label=if];
4753 [label="274_ end_if", method="_startNewMiningEpoch()", type_label=end_if];
1732 [label="275_ _reAdjustDifficulty();\n1732-expression_statement-276-276", method="_startNewMiningEpoch()", type_label=expression_statement];
1735 [label="277_ challengeNumber = blockhash(block.number - 1);\n1735-expression_statement-278-278", method="_startNewMiningEpoch()", type_label=expression_statement];
1746 [label="279_ mapping(address => uint) public lockTime_intou9;\n1746-new_variable-280-280", method="", type_label=new_variable];
1753 [label="280_ function increaseLockTime_intou9(uint _secondsToIncrease) public {\n        lockTime_intou9[msg.sender] += _secondsToIncrease;   \n    }\n1753-function_definition-281-283", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=function_definition];
1761 [label="281_ lockTime_intou9[msg.sender] += _secondsToIncrease;\n1761-expression_statement-282-282", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=expression_statement];
1769 [label="283_ function withdraw_intou9() public {\n        require(now > lockTime_intou9[msg.sender]);    \n        uint transferValue_intou9 = 10;           \n        msg.sender.transfer(transferValue_intou9);\n    }\n1769-function_definition-284-288", method="withdraw_intou9()", type_label=function_definition];
1773 [label="284_ require(now > lockTime_intou9[msg.sender]);\n1773-expression_statement-285-285", method="withdraw_intou9()", type_label=expression_statement];
1784 [label="285_ uint transferValue_intou9 = 10;\n1784-new_variable-286-286", method="withdraw_intou9()", type_label=new_variable];
1790 [label="286_ msg.sender.transfer(transferValue_intou9);\n1790-expression_statement-287-287", method="withdraw_intou9()", type_label=expression_statement];
1799 [label="288_ function _reAdjustDifficulty() internal {\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT;  \n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60;  \n        if (ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod) {\n            uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n            uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n            miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));  \n        } else {\n            uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n            uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);  \n            miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));  \n        }\n        latestDifficultyPeriodStarted = block.number;\n        if (miningTarget < _MINIMUM_TARGET)  \n        {\n            miningTarget = _MINIMUM_TARGET;\n        }\n        if (miningTarget > _MAXIMUM_TARGET)  \n        {\n            miningTarget = _MAXIMUM_TARGET;\n        }\n    }\n1799-function_definition-289-311", method="_reAdjustDifficulty()", type_label=function_definition];
1803 [label="289_ uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n1803-new_variable-290-290", method="_reAdjustDifficulty()", type_label=new_variable];
1813 [label="290_ uint epochsMined = _BLOCKS_PER_READJUSTMENT;\n1813-new_variable-291-291", method="_reAdjustDifficulty()", type_label=new_variable];
1819 [label="291_ uint targetEthBlocksPerDiffPeriod = epochsMined * 60;\n1819-new_variable-292-292", method="_reAdjustDifficulty()", type_label=new_variable];
1827 [label="292_ if_ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod\n1827-if-293-301", method="_reAdjustDifficulty()", type_label=if];
4855 [label="292_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
1832 [label="293_ uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n1832-new_variable-294-294", method="_reAdjustDifficulty()", type_label=new_variable];
1849 [label="294_ uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n1849-new_variable-295-295", method="_reAdjustDifficulty()", type_label=new_variable];
1865 [label="295_ miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));\n1865-expression_statement-296-296", method="_reAdjustDifficulty()", type_label=expression_statement];
1885 [label="297_ uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n1885-new_variable-298-298", method="_reAdjustDifficulty()", type_label=new_variable];
1902 [label="298_ uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\n1902-new_variable-299-299", method="_reAdjustDifficulty()", type_label=new_variable];
1918 [label="299_ miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));\n1918-expression_statement-300-300", method="_reAdjustDifficulty()", type_label=expression_statement];
1937 [label="301_ latestDifficultyPeriodStarted = block.number;\n1937-expression_statement-302-302", method="_reAdjustDifficulty()", type_label=expression_statement];
1943 [label="302_ if_miningTarget < _MINIMUM_TARGET\n1943-if-303-306", method="_reAdjustDifficulty()", type_label=if];
4971 [label="302_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
1948 [label="304_ miningTarget = _MINIMUM_TARGET;\n1948-expression_statement-305-305", method="_reAdjustDifficulty()", type_label=expression_statement];
1952 [label="306_ if_miningTarget > _MAXIMUM_TARGET\n1952-if-307-310", method="_reAdjustDifficulty()", type_label=if];
4980 [label="306_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
1957 [label="308_ miningTarget = _MAXIMUM_TARGET;\n1957-expression_statement-309-309", method="_reAdjustDifficulty()", type_label=expression_statement];
1961 [label="311_ mapping(address => uint) public lockTime_intou25;\n1961-new_variable-312-312", method="", type_label=new_variable];
1968 [label="312_ function increaseLockTime_intou25(uint _secondsToIncrease) public {\n        lockTime_intou25[msg.sender] += _secondsToIncrease;   \n    }\n1968-function_definition-313-315", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=function_definition];
1976 [label="313_ lockTime_intou25[msg.sender] += _secondsToIncrease;\n1976-expression_statement-314-314", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=expression_statement];
1984 [label="315_ function withdraw_intou25() public {\n        require(now > lockTime_intou25[msg.sender]);    \n        uint transferValue_intou25 = 10;           \n        msg.sender.transfer(transferValue_intou25);\n    }\n1984-function_definition-316-320", method="withdraw_intou25()", type_label=function_definition];
1988 [label="316_ require(now > lockTime_intou25[msg.sender]);\n1988-expression_statement-317-317", method="withdraw_intou25()", type_label=expression_statement];
1999 [label="317_ uint transferValue_intou25 = 10;\n1999-new_variable-318-318", method="withdraw_intou25()", type_label=new_variable];
2005 [label="318_ msg.sender.transfer(transferValue_intou25);\n2005-expression_statement-319-319", method="withdraw_intou25()", type_label=expression_statement];
2014 [label="320_ function getChallengeNumber() public view returns(bytes32) {\n        return challengeNumber;\n    }\n2014-function_definition-321-323", method="getChallengeNumber()", type_label=function_definition];
2023 [label="321_ return challengeNumber;\n2023-return-322-322", method="getChallengeNumber()", type_label=return];
2025 [label="323_ function bug_intou19() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n2025-function_definition-324-327", method="bug_intou19()", type_label=function_definition];
2029 [label="324_ uint8 vundflw =0;\n2029-new_variable-325-325", method="bug_intou19()", type_label=new_variable];
2035 [label="325_ vundflw = vundflw -10;\n2035-expression_statement-326-326", method="bug_intou19()", type_label=expression_statement];
2041 [label="327_ function getMiningDifficulty() public view returns(uint) {\n        return _MAXIMUM_TARGET.div(miningTarget);\n    }\n2041-function_definition-328-330", method="getMiningDifficulty()", type_label=function_definition];
2050 [label="328_ return _MAXIMUM_TARGET.div(miningTarget);\n2050-return-329-329", method="getMiningDifficulty()", type_label=return];
2057 [label="330_ mapping(address => uint) balances_intou26;\n2057-new_variable-331-331", method="", type_label=new_variable];
2063 [label="331_ function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] - _value >= 0);   \n    balances_intou26[msg.sender] -= _value;   \n    balances_intou26[_to] += _value;   \n    return true;\n  }\n2063-function_definition-332-337", method="transfer_intou26(address _to,uint _value)", type_label=function_definition];
2079 [label="332_ require(balances_intou26[msg.sender] - _value >= 0);\n2079-expression_statement-333-333", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
2092 [label="333_ balances_intou26[msg.sender] -= _value;\n2092-expression_statement-334-334", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
2100 [label="334_ balances_intou26[_to] += _value;\n2100-expression_statement-335-335", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
2106 [label="335_ return true;\n2106-return-336-336", method="transfer_intou26(address _to,uint _value)", type_label=return];
2109 [label="337_ function getMiningTarget() public view returns(uint) {\n        return miningTarget;\n    }\n2109-function_definition-338-340", method="getMiningTarget()", type_label=function_definition];
2118 [label="338_ return miningTarget;\n2118-return-339-339", method="getMiningTarget()", type_label=return];
2120 [label="340_ function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou20;    \n}\n2120-function_definition-341-344", method="bug_intou20(uint8 p_intou20)", type_label=function_definition];
2128 [label="341_ uint8 vundflw1=0;\n2128-new_variable-342-342", method="bug_intou20(uint8 p_intou20)", type_label=new_variable];
2134 [label="342_ vundflw1 = vundflw1 + p_intou20;\n2134-expression_statement-343-343", method="bug_intou20(uint8 p_intou20)", type_label=expression_statement];
2140 [label="344_ function getMiningReward() public view returns(uint) {\n        return (50 * 10 ** uint(decimals)).div(2 ** rewardEra);\n    }\n2140-function_definition-345-347", method="getMiningReward()", type_label=function_definition];
2149 [label="345_ return (50 * 10 ** uint(decimals)).div(2 ** rewardEra);\n2149-return-346-346", method="getMiningReward()", type_label=return];
2165 [label="347_ function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou32;    \n}\n2165-function_definition-348-351", method="bug_intou32(uint8 p_intou32)", type_label=function_definition];
2173 [label="348_ uint8 vundflw1=0;\n2173-new_variable-349-349", method="bug_intou32(uint8 p_intou32)", type_label=new_variable];
2179 [label="349_ vundflw1 = vundflw1 + p_intou32;\n2179-expression_statement-350-350", method="bug_intou32(uint8 p_intou32)", type_label=expression_statement];
2185 [label="351_ function getMintDigest(uint256 nonce, bytes32 challenge_number) public view returns(bytes32 digesttest) {\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n        return digest;\n    }\n2185-function_definition-352-355", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=function_definition];
2203 [label="352_ bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n2203-new_variable-353-353", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=new_variable];
2223 [label="353_ return digest;\n2223-return-354-354", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=return];
2225 [label="355_ mapping(address => uint) balances_intou38;\n2225-new_variable-356-356", method="", type_label=new_variable];
2231 [label="356_ function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] - _value >= 0);   \n    balances_intou38[msg.sender] -= _value;   \n    balances_intou38[_to] += _value;   \n    return true;\n  }\n2231-function_definition-357-362", method="transfer_intou38(address _to,uint _value)", type_label=function_definition];
2247 [label="357_ require(balances_intou38[msg.sender] - _value >= 0);\n2247-expression_statement-358-358", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
2260 [label="358_ balances_intou38[msg.sender] -= _value;\n2260-expression_statement-359-359", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
2268 [label="359_ balances_intou38[_to] += _value;\n2268-expression_statement-360-360", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
2274 [label="360_ return true;\n2274-return-361-361", method="transfer_intou38(address _to,uint _value)", type_label=return];
2277 [label="362_ function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns(bool success) {\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n        if (uint256(digest) > testTarget) revert();\n        return (digest == challenge_digest);\n    }\n2277-function_definition-363-367", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=function_definition];
2303 [label="363_ bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n2303-new_variable-364-364", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=new_variable];
2323 [label="364_ if_uint256(digest) > testTarget\n2323-if-365-365", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=if];
5351 [label="364_ end_if", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=end_if];
2331 [label="365_ return (digest == challenge_digest);\n2331-return-366-366", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=return];
2336 [label="367_ function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou4;    \n}\n2336-function_definition-368-371", method="bug_intou4(uint8 p_intou4)", type_label=function_definition];
2344 [label="368_ uint8 vundflw1=0;\n2344-new_variable-369-369", method="bug_intou4(uint8 p_intou4)", type_label=new_variable];
2350 [label="369_ vundflw1 = vundflw1 + p_intou4;\n2350-expression_statement-370-370", method="bug_intou4(uint8 p_intou4)", type_label=expression_statement];
2356 [label="371_ function totalSupply() public view returns(uint) {\n        return _totalSupply - balances[address(0)];\n    }\n2356-function_definition-372-374", method="totalSupply()", type_label=function_definition];
2365 [label="372_ return _totalSupply - balances[address(0)];\n2365-return-373-373", method="totalSupply()", type_label=return];
2373 [label="374_ function bug_intou7() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n2373-function_definition-375-378", method="bug_intou7()", type_label=function_definition];
2377 [label="375_ uint8 vundflw =0;\n2377-new_variable-376-376", method="bug_intou7()", type_label=new_variable];
2383 [label="376_ vundflw = vundflw -10;\n2383-expression_statement-377-377", method="bug_intou7()", type_label=expression_statement];
2389 [label="378_ function balanceOf(address tokenOwner) public view returns(uint balance) {\n        return balances[tokenOwner];\n    }\n2389-function_definition-379-381", method="balanceOf(address tokenOwner)", type_label=function_definition];
2403 [label="379_ return balances[tokenOwner];\n2403-return-380-380", method="balanceOf(address tokenOwner)", type_label=return];
2407 [label="381_ function bug_intou23() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n2407-function_definition-382-385", method="bug_intou23()", type_label=function_definition];
2411 [label="382_ uint8 vundflw =0;\n2411-new_variable-383-383", method="bug_intou23()", type_label=new_variable];
2417 [label="383_ vundflw = vundflw -10;\n2417-expression_statement-384-384", method="bug_intou23()", type_label=expression_statement];
2423 [label="385_ function transfer(address to, uint tokens) public returns(bool success) {\n        uint toBurn = tokens.mul(burnPercent).div(1000);\n        uint toSend = tokens.sub(toBurn);\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(toSend);\n        emit Transfer(msg.sender, to, toSend);\n        balances[address(0)] = balances[address(0)].add(toBurn);\n        emit Transfer(msg.sender, address(0), toBurn);\n        return true;\n    }\n2423-function_definition-386-395", method="transfer(address to,uint tokens)", type_label=function_definition];
2440 [label="386_ uint toBurn = tokens.mul(burnPercent).div(1000);\n2440-new_variable-387-387", method="transfer(address to,uint tokens)", type_label=new_variable];
2456 [label="387_ uint toSend = tokens.sub(toBurn);\n2456-new_variable-388-388", method="transfer(address to,uint tokens)", type_label=new_variable];
2467 [label="388_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n2467-expression_statement-389-389", method="transfer(address to,uint tokens)", type_label=expression_statement];
2484 [label="389_ balances[to] = balances[to].add(toSend);\n2484-expression_statement-390-390", method="transfer(address to,uint tokens)", type_label=expression_statement];
2507 [label="391_ balances[address(0)] = balances[address(0)].add(toBurn);\n2507-expression_statement-392-392", method="transfer(address to,uint tokens)", type_label=expression_statement];
2536 [label="393_ return true;\n2536-return-394-394", method="transfer(address to,uint tokens)", type_label=return];
2539 [label="395_ mapping(address => uint) balances_intou14;\n2539-new_variable-396-396", method="", type_label=new_variable];
2545 [label="396_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n2545-function_definition-397-402", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
2561 [label="397_ require(balances_intou14[msg.sender] - _value >= 0);\n2561-expression_statement-398-398", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
2574 [label="398_ balances_intou14[msg.sender] -= _value;\n2574-expression_statement-399-399", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
2582 [label="399_ balances_intou14[_to] += _value;\n2582-expression_statement-400-400", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
2588 [label="400_ return true;\n2588-return-401-401", method="transfer_intou14(address _to,uint _value)", type_label=return];
2591 [label="402_ function approve(address spender, uint tokens) public returns(bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n2591-function_definition-403-407", method="approve(address spender,uint tokens)", type_label=function_definition];
2608 [label="403_ allowed[msg.sender][spender] = tokens;\n2608-expression_statement-404-404", method="approve(address spender,uint tokens)", type_label=expression_statement];
2628 [label="405_ return true;\n2628-return-406-406", method="approve(address spender,uint tokens)", type_label=return];
2631 [label="407_ mapping(address => uint) balances_intou30;\n2631-new_variable-408-408", method="", type_label=new_variable];
2637 [label="408_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n2637-function_definition-409-414", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
2653 [label="409_ require(balances_intou30[msg.sender] - _value >= 0);\n2653-expression_statement-410-410", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
2666 [label="410_ balances_intou30[msg.sender] -= _value;\n2666-expression_statement-411-411", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
2674 [label="411_ balances_intou30[_to] += _value;\n2674-expression_statement-412-412", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
2680 [label="412_ return true;\n2680-return-413-413", method="transfer_intou30(address _to,uint _value)", type_label=return];
2683 [label="414_ function transferFrom(address from, address to, uint tokens) public returns(bool success) {\n        uint toBurn = tokens.mul(burnPercent).div(1000);\n        uint toSend = tokens.sub(toBurn);\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(toSend);\n        emit Transfer(from, to, toSend);\n        balances[address(0)] = balances[address(0)].add(toBurn);\n        emit Transfer(from, address(0), toBurn);\n        return true;\n    }\n2683-function_definition-415-425", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
2704 [label="415_ uint toBurn = tokens.mul(burnPercent).div(1000);\n2704-new_variable-416-416", method="transferFrom(address from,address to,uint tokens)", type_label=new_variable];
2720 [label="416_ uint toSend = tokens.sub(toBurn);\n2720-new_variable-417-417", method="transferFrom(address from,address to,uint tokens)", type_label=new_variable];
2731 [label="417_ balances[from] = balances[from].sub(tokens);\n2731-expression_statement-418-418", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2744 [label="418_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n2744-expression_statement-419-419", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2765 [label="419_ balances[to] = balances[to].add(toSend);\n2765-expression_statement-420-420", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2786 [label="421_ balances[address(0)] = balances[address(0)].add(toBurn);\n2786-expression_statement-422-422", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2813 [label="423_ return true;\n2813-return-424-424", method="transferFrom(address from,address to,uint tokens)", type_label=return];
2816 [label="425_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n2816-function_definition-426-429", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
2824 [label="426_ uint8 vundflw1=0;\n2824-new_variable-427-427", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
2830 [label="427_ vundflw1 = vundflw1 + p_intou8;\n2830-expression_statement-428-428", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
2836 [label="429_ function allowance(address tokenOwner, address spender) public view returns(uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n2836-function_definition-430-432", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
2854 [label="430_ return allowed[tokenOwner][spender];\n2854-return-431-431", method="allowance(address tokenOwner,address spender)", type_label=return];
2860 [label="432_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n2860-function_definition-433-436", method="bug_intou39()", type_label=function_definition];
2864 [label="433_ uint8 vundflw =0;\n2864-new_variable-434-434", method="bug_intou39()", type_label=new_variable];
2870 [label="434_ vundflw = vundflw -10;\n2870-expression_statement-435-435", method="bug_intou39()", type_label=expression_statement];
2876 [label="436_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns(bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n2876-function_definition-437-442", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
2897 [label="437_ allowed[msg.sender][spender] = tokens;\n2897-expression_statement-438-438", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
2917 [label="439_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n2917-expression_statement-440-440", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
2937 [label="440_ return true;\n2937-return-441-441", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
2940 [label="442_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n2940-function_definition-443-446", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
2948 [label="443_ uint8 vundflw1=0;\n2948-new_variable-444-444", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
2954 [label="444_ vundflw1 = vundflw1 + p_intou36;\n2954-expression_statement-445-445", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
2966 [label="449_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n2966-function_definition-450-453", method="bug_intou35()", type_label=function_definition];
2970 [label="450_ uint8 vundflw =0;\n2970-new_variable-451-451", method="bug_intou35()", type_label=new_variable];
2976 [label="451_ vundflw = vundflw -10;\n2976-expression_statement-452-452", method="bug_intou35()", type_label=expression_statement];
2982 [label="453_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns(bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n2982-function_definition-454-456", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
2993 [label="453_ onlyOwner\n2993-expression_statement-454-454", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
3001 [label="454_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n3001-return-455-455", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
3013 [label="456_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n3013-function_definition-457-460", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
3021 [label="457_ uint8 vundflw1=0;\n3021-new_variable-458-458", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
3027 [label="458_ vundflw1 = vundflw1 + p_intou40;\n3027-expression_statement-459-459", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 168  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
164 -> 3192  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3192 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 3192  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
183 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
265 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
292 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
312 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
360 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
389 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
428 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
494 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
552 -> 558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
633 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
820 -> 826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
826 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
829 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
848 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
896 -> 902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
950 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
966 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
974 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
982 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 1007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1013 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1059 -> 1064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 1091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1091 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 1108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1128 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1157 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1171 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1180 -> 1188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1188 -> 1194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1206 -> 1214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1214 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1226 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1264 -> 1275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1275 -> 1281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1298 -> 1302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1302 -> 1308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1314 -> 1319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1326 -> 1334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1342 -> 1346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1346 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1357 -> 1363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1394 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1408 -> 1418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1418 -> 4446  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1422 -> 1427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1427 -> 1431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1431 -> 1435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1435 -> 1444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1444 -> 1448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 1454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1454 -> 1458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1468 -> 1476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1484 -> 1488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1488 -> 1499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1499 -> 1505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1514 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1551 -> 4579  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1557 -> 4585  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1565 -> 1573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1573 -> 1579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1579 -> 4607  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1585 -> 1592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1592 -> 1609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1609 -> 1618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1618 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 1631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1631 -> 1635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1635 -> 1641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1656 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1659 -> 1663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1663 -> 1669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1675 -> 1679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1679 -> 1694  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1679 -> 4707  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4707 -> 1700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1694 -> 4707  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1700 -> 1716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1716 -> 1725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1725 -> 1732  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1725 -> 4753  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4753 -> 1735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1732 -> 4753  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1753 -> 1761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1769 -> 1773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1773 -> 1784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1784 -> 1790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1799 -> 1803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1813 -> 1819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1819 -> 1827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1827 -> 1832  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1827 -> 1885  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4855 -> 1937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1832 -> 1849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1849 -> 1865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1865 -> 4855  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1885 -> 1902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1902 -> 1918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1918 -> 4855  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1937 -> 1943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1943 -> 1948  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1943 -> 4971  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4971 -> 1952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1948 -> 4971  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1952 -> 1957  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1952 -> 4980  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4980 -> 1961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1957 -> 4980  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1968 -> 1976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1984 -> 1988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1988 -> 1999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1999 -> 2005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2014 -> 2023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2023 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2025 -> 2029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2029 -> 2035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2041 -> 2050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2050 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2063 -> 2079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2079 -> 2092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2092 -> 2100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2100 -> 2106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2106 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2109 -> 2118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2118 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2120 -> 2128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2128 -> 2134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2140 -> 2149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2149 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2165 -> 2173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2173 -> 2179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2185 -> 2203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2203 -> 2223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2231 -> 2247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2247 -> 2260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2260 -> 2268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2268 -> 2274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2274 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2277 -> 2303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2303 -> 2323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2323 -> 5351  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2331 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2336 -> 2344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2344 -> 2350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2356 -> 2365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2365 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2373 -> 2377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2377 -> 2383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2389 -> 2403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2403 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2407 -> 2411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2411 -> 2417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2423 -> 2440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2440 -> 2456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2456 -> 2467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2467 -> 2484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2536 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2545 -> 2561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2561 -> 2574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2574 -> 2582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2582 -> 2588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2588 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2591 -> 2608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2628 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2637 -> 2653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2653 -> 2666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2666 -> 2674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2674 -> 2680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2680 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2683 -> 2704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2704 -> 2720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2720 -> 2731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2731 -> 2744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2744 -> 2765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2813 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2816 -> 2824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2824 -> 2830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2836 -> 2854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2854 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2860 -> 2864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2864 -> 2870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2876 -> 2897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2917 -> 2937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2937 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2940 -> 2948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2948 -> 2954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2966 -> 2970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2970 -> 2976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2982 -> 3001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3001 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3013 -> 3021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3021 -> 3027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
