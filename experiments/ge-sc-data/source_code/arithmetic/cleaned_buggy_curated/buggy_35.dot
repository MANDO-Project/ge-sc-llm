digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n50-function_definition-8-12", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ require(b <= a, \"SafeMath: subtraction overflow\");\n67-expression_statement-9-9", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
77 [label="9_ uint256 c = a - b;\n77-new_variable-10-10", method="sub(uint256 a,uint256 b)", type_label=new_variable];
85 [label="10_ return c;\n85-return-11-11", method="sub(uint256 a,uint256 b)", type_label=return];
87 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n87-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
104 [label="13_ if_a == 0\n104-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
3251 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
109 [label="14_ return 0;\n109-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
111 [label="16_ uint256 c = a * b;\n111-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
119 [label="17_ require(c / a == b, \"SafeMath: multiplication overflow\");\n119-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
131 [label="18_ return c;\n131-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
133 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n133-function_definition-21-25", method="div(uint256 a,uint256 b)", type_label=function_definition];
150 [label="21_ require(b > 0, \"SafeMath: division by zero\");\n150-expression_statement-22-22", method="div(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="22_ uint256 c = a / b;\n160-new_variable-23-23", method="div(uint256 a,uint256 b)", type_label=new_variable];
168 [label="23_ return c;\n168-return-24-24", method="div(uint256 a,uint256 b)", type_label=return];
170 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n170-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
187 [label="26_ require(b != 0, \"SafeMath: modulo by zero\");\n187-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
197 [label="27_ return a % b;\n197-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
204 [label="31_ function bug_intou15() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n204-function_definition-32-35", method="bug_intou15()", type_label=function_definition];
208 [label="32_ uint8 vundflw =0;\n208-new_variable-33-33", method="bug_intou15()", type_label=new_variable];
214 [label="33_ vundflw = vundflw -10;\n214-expression_statement-34-34", method="bug_intou15()", type_label=expression_statement];
220 [label="35_ address public owner;\n220-new_variable-36-36", method="", type_label=new_variable];
225 [label="36_ function bug_intou28(uint8 p_intou28) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou28;    \n}\n225-function_definition-37-40", method="bug_intou28(uint8 p_intou28)", type_label=function_definition];
233 [label="37_ uint8 vundflw1=0;\n233-new_variable-38-38", method="bug_intou28(uint8 p_intou28)", type_label=new_variable];
239 [label="38_ vundflw1 = vundflw1 + p_intou28;\n239-expression_statement-39-39", method="bug_intou28(uint8 p_intou28)", type_label=expression_statement];
245 [label="40_ address private newOwner;\n245-new_variable-41-41", method="", type_label=new_variable];
250 [label="41_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n250-function_definition-42-45", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
258 [label="42_ uint8 vundflw1=0;\n258-new_variable-43-43", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
264 [label="43_ vundflw1 = vundflw1 + p_intou36;\n264-expression_statement-44-44", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
286 [label="47_ owner = msg.sender;\n286-expression_statement-48-48", method="", type_label=expression_statement];
292 [label="49_ mapping(address => uint) public lockTime_intou1;\n292-new_variable-50-50", method="", type_label=new_variable];
299 [label="50_ function increaseLockTime_intou1(uint _secondsToIncrease) public {\n        lockTime_intou1[msg.sender] += _secondsToIncrease;   \n    }\n299-function_definition-51-53", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=function_definition];
307 [label="51_ lockTime_intou1[msg.sender] += _secondsToIncrease;\n307-expression_statement-52-52", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=expression_statement];
315 [label="53_ function withdraw_ovrflow1() public {\n        require(now > lockTime_intou1[msg.sender]);    \n        uint transferValue_intou1 = 10;           \n        msg.sender.transfer(transferValue_intou1);\n    }\n315-function_definition-54-58", method="withdraw_ovrflow1()", type_label=function_definition];
319 [label="54_ require(now > lockTime_intou1[msg.sender]);\n319-expression_statement-55-55", method="withdraw_ovrflow1()", type_label=expression_statement];
330 [label="55_ uint transferValue_intou1 = 10;\n330-new_variable-56-56", method="withdraw_ovrflow1()", type_label=new_variable];
336 [label="56_ msg.sender.transfer(transferValue_intou1);\n336-expression_statement-57-57", method="withdraw_ovrflow1()", type_label=expression_statement];
345 [label="58_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n345-expression_statement-59-62", method="", type_label=expression_statement];
348 [label="59_ require(msg.sender == owner);\n348-expression_statement-60-60", method="", type_label=expression_statement];
357 [label="60_ _;\n357-expression_statement-61-61", method="", type_label=expression_statement];
359 [label="62_ function onlyOwnerTransferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n359-function_definition-63-65", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=function_definition];
366 [label="62_ onlyOwner\n366-expression_statement-63-63", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=expression_statement];
369 [label="63_ newOwner = _newOwner;\n369-expression_statement-64-64", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=expression_statement];
373 [label="65_ mapping(address => uint) balances_intou2;\n373-new_variable-66-66", method="", type_label=new_variable];
379 [label="66_ function transfer_undrflow2(address _to, uint _value) public returns (bool) {\n    require(balances_intou2[msg.sender] - _value >= 0);   \n    balances_intou2[msg.sender] -= _value;   \n    balances_intou2[_to] += _value;   \n    return true;\n  }\n379-function_definition-67-72", method="transfer_undrflow2(address _to,uint _value)", type_label=function_definition];
395 [label="67_ require(balances_intou2[msg.sender] - _value >= 0);\n395-expression_statement-68-68", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
408 [label="68_ balances_intou2[msg.sender] -= _value;\n408-expression_statement-69-69", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
416 [label="69_ balances_intou2[_to] += _value;\n416-expression_statement-70-70", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
422 [label="70_ return true;\n422-return-71-71", method="transfer_undrflow2(address _to,uint _value)", type_label=return];
425 [label="72_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(now, owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n425-function_definition-73-78", method="acceptOwnership()", type_label=function_definition];
429 [label="73_ require(msg.sender == newOwner);\n429-expression_statement-74-74", method="acceptOwnership()", type_label=expression_statement];
446 [label="75_ owner = newOwner;\n446-expression_statement-76-76", method="acceptOwnership()", type_label=expression_statement];
450 [label="76_ newOwner = address(0);\n450-expression_statement-77-77", method="acceptOwnership()", type_label=expression_statement];
456 [label="78_ mapping(address => uint) public lockTime_intou17;\n456-new_variable-79-79", method="", type_label=new_variable];
463 [label="79_ function increaseLockTime_intou17(uint _secondsToIncrease) public {\n        lockTime_intou17[msg.sender] += _secondsToIncrease;   \n    }\n463-function_definition-80-82", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=function_definition];
471 [label="80_ lockTime_intou17[msg.sender] += _secondsToIncrease;\n471-expression_statement-81-81", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=expression_statement];
479 [label="82_ function withdraw_intou17() public {\n        require(now > lockTime_intou17[msg.sender]);    \n        uint transferValue_intou17 = 10;           \n        msg.sender.transfer(transferValue_intou17);\n    }\n479-function_definition-83-87", method="withdraw_intou17()", type_label=function_definition];
483 [label="83_ require(now > lockTime_intou17[msg.sender]);\n483-expression_statement-84-84", method="withdraw_intou17()", type_label=expression_statement];
494 [label="84_ uint transferValue_intou17 = 10;\n494-new_variable-85-85", method="withdraw_intou17()", type_label=new_variable];
500 [label="85_ msg.sender.transfer(transferValue_intou17);\n500-expression_statement-86-86", method="withdraw_intou17()", type_label=expression_statement];
512 [label="90_ function transfer(address _to, uint256 _amount) external returns (bool);\n512-function_definition-91-91", method="transfer(address _to,uint256 _amount)", type_label=function_definition];
527 [label="91_ function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\n527-function_definition-92-92", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=function_definition];
557 [label="95_ mapping(address => uint) balances_intou34;\n557-new_variable-96-96", method="", type_label=new_variable];
563 [label="96_ function transfer_intou34(address _to, uint _value) public returns (bool) {\n    require(balances_intou34[msg.sender] - _value >= 0);   \n    balances_intou34[msg.sender] -= _value;   \n    balances_intou34[_to] += _value;   \n    return true;\n  }\n563-function_definition-97-102", method="transfer_intou34(address _to,uint _value)", type_label=function_definition];
579 [label="97_ require(balances_intou34[msg.sender] - _value >= 0);\n579-expression_statement-98-98", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
592 [label="98_ balances_intou34[msg.sender] -= _value;\n592-expression_statement-99-99", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
600 [label="99_ balances_intou34[_to] += _value;\n600-expression_statement-100-100", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
606 [label="100_ return true;\n606-return-101-101", method="transfer_intou34(address _to,uint _value)", type_label=return];
609 [label="102_ bool public safeGuard;\n609-new_variable-103-103", method="", type_label=new_variable];
614 [label="103_ mapping(address => uint) public lockTime_intou21;\n614-new_variable-104-104", method="", type_label=new_variable];
621 [label="104_ function increaseLockTime_intou21(uint _secondsToIncrease) public {\n        lockTime_intou21[msg.sender] += _secondsToIncrease;   \n    }\n621-function_definition-105-107", method="increaseLockTime_intou21(uint _secondsToIncrease)", type_label=function_definition];
629 [label="105_ lockTime_intou21[msg.sender] += _secondsToIncrease;\n629-expression_statement-106-106", method="increaseLockTime_intou21(uint _secondsToIncrease)", type_label=expression_statement];
637 [label="107_ function withdraw_intou21() public {\n        require(now > lockTime_intou21[msg.sender]);    \n        uint transferValue_intou21 = 10;           \n        msg.sender.transfer(transferValue_intou21);\n    }\n637-function_definition-108-112", method="withdraw_intou21()", type_label=function_definition];
641 [label="108_ require(now > lockTime_intou21[msg.sender]);\n641-expression_statement-109-109", method="withdraw_intou21()", type_label=expression_statement];
652 [label="109_ uint transferValue_intou21 = 10;\n652-new_variable-110-110", method="withdraw_intou21()", type_label=new_variable];
658 [label="110_ msg.sender.transfer(transferValue_intou21);\n658-expression_statement-111-111", method="withdraw_intou21()", type_label=expression_statement];
667 [label="112_ address public feeAccount;\n667-new_variable-113-113", method="", type_label=new_variable];
672 [label="113_ mapping(address => uint) balances_intou10;\n672-new_variable-114-114", method="", type_label=new_variable];
678 [label="114_ function transfer_intou10(address _to, uint _value) public returns (bool) {\n    require(balances_intou10[msg.sender] - _value >= 0);   \n    balances_intou10[msg.sender] -= _value;   \n    balances_intou10[_to] += _value;   \n    return true;\n  }\n678-function_definition-115-120", method="transfer_intou10(address _to,uint _value)", type_label=function_definition];
694 [label="115_ require(balances_intou10[msg.sender] - _value >= 0);\n694-expression_statement-116-116", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
707 [label="116_ balances_intou10[msg.sender] -= _value;\n707-expression_statement-117-117", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
715 [label="117_ balances_intou10[_to] += _value;\n715-expression_statement-118-118", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
721 [label="118_ return true;\n721-return-119-119", method="transfer_intou10(address _to,uint _value)", type_label=return];
724 [label="120_ uint public tradingFee = 50;\n724-new_variable-121-121", method="", type_label=new_variable];
730 [label="121_ mapping(address => uint) balances_intou22;\n730-new_variable-122-122", method="", type_label=new_variable];
736 [label="122_ function transfer_intou22(address _to, uint _value) public returns (bool) {\n    require(balances_intou22[msg.sender] - _value >= 0);   \n    balances_intou22[msg.sender] -= _value;   \n    balances_intou22[_to] += _value;   \n    return true;\n  }\n736-function_definition-123-128", method="transfer_intou22(address _to,uint _value)", type_label=function_definition];
752 [label="123_ require(balances_intou22[msg.sender] - _value >= 0);\n752-expression_statement-124-124", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
765 [label="124_ balances_intou22[msg.sender] -= _value;\n765-expression_statement-125-125", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
773 [label="125_ balances_intou22[_to] += _value;\n773-expression_statement-126-126", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
779 [label="126_ return true;\n779-return-127-127", method="transfer_intou22(address _to,uint _value)", type_label=return];
782 [label="128_ mapping (address => mapping (address => uint)) public tokens;\n782-new_variable-129-129", method="", type_label=new_variable];
791 [label="129_ function bug_intou12(uint8 p_intou12) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou12;    \n}\n791-function_definition-130-133", method="bug_intou12(uint8 p_intou12)", type_label=function_definition];
799 [label="130_ uint8 vundflw1=0;\n799-new_variable-131-131", method="bug_intou12(uint8 p_intou12)", type_label=new_variable];
805 [label="131_ vundflw1 = vundflw1 + p_intou12;\n805-expression_statement-132-132", method="bug_intou12(uint8 p_intou12)", type_label=expression_statement];
811 [label="133_ mapping (address => mapping (bytes32 => bool)) public orders;\n811-new_variable-134-134", method="", type_label=new_variable];
820 [label="134_ function bug_intou11() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n820-function_definition-135-138", method="bug_intou11()", type_label=function_definition];
824 [label="135_ uint8 vundflw =0;\n824-new_variable-136-136", method="bug_intou11()", type_label=new_variable];
830 [label="136_ vundflw = vundflw -10;\n830-expression_statement-137-137", method="bug_intou11()", type_label=expression_statement];
836 [label="138_ mapping (address => mapping (bytes32 => uint)) public orderFills;\n836-new_variable-139-139", method="", type_label=new_variable];
845 [label="139_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n845-function_definition-140-143", method="bug_intou35()", type_label=function_definition];
849 [label="140_ uint8 vundflw =0;\n849-new_variable-141-141", method="bug_intou35()", type_label=new_variable];
855 [label="141_ vundflw = vundflw -10;\n855-expression_statement-142-142", method="bug_intou35()", type_label=expression_statement];
895 [label="144_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n895-function_definition-145-148", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
903 [label="145_ uint8 vundflw1=0;\n903-new_variable-146-146", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
909 [label="146_ vundflw1 = vundflw1 + p_intou40;\n909-expression_statement-147-147", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
961 [label="149_ mapping(address => uint) public lockTime_intou33;\n961-new_variable-150-150", method="", type_label=new_variable];
968 [label="150_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n968-function_definition-151-153", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
976 [label="151_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n976-expression_statement-152-152", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
984 [label="153_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n984-function_definition-154-158", method="withdraw_intou33()", type_label=function_definition];
988 [label="154_ require(now > lockTime_intou33[msg.sender]);\n988-expression_statement-155-155", method="withdraw_intou33()", type_label=expression_statement];
999 [label="155_ uint transferValue_intou33 = 10;\n999-new_variable-156-156", method="withdraw_intou33()", type_label=new_variable];
1005 [label="156_ msg.sender.transfer(transferValue_intou33);\n1005-expression_statement-157-157", method="withdraw_intou33()", type_label=expression_statement];
1044 [label="159_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1044-function_definition-160-163", method="bug_intou27()", type_label=function_definition];
1048 [label="160_ uint8 vundflw =0;\n1048-new_variable-161-161", method="bug_intou27()", type_label=new_variable];
1054 [label="161_ vundflw = vundflw -10;\n1054-expression_statement-162-162", method="bug_intou27()", type_label=expression_statement];
1082 [label="164_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1082-function_definition-165-168", method="bug_intou31()", type_label=function_definition];
1086 [label="165_ uint8 vundflw =0;\n1086-new_variable-166-166", method="bug_intou31()", type_label=new_variable];
1092 [label="166_ vundflw = vundflw -10;\n1092-expression_statement-167-167", method="bug_intou31()", type_label=expression_statement];
1120 [label="169_ mapping(address => uint) public lockTime_intou13;\n1120-new_variable-170-170", method="", type_label=new_variable];
1127 [label="170_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n1127-function_definition-171-173", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
1135 [label="171_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n1135-expression_statement-172-172", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
1143 [label="173_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n1143-function_definition-174-178", method="withdraw_intou13()", type_label=function_definition];
1147 [label="174_ require(now > lockTime_intou13[msg.sender]);\n1147-expression_statement-175-175", method="withdraw_intou13()", type_label=expression_statement];
1158 [label="175_ uint transferValue_intou13 = 10;\n1158-new_variable-176-176", method="withdraw_intou13()", type_label=new_variable];
1164 [label="176_ msg.sender.transfer(transferValue_intou13);\n1164-expression_statement-177-177", method="withdraw_intou13()", type_label=expression_statement];
1185 [label="180_ feeAccount = msg.sender;\n1185-expression_statement-181-181", method="", type_label=expression_statement];
1191 [label="182_ mapping(address => uint) public lockTime_intou37;\n1191-new_variable-183-183", method="", type_label=new_variable];
1198 [label="183_ function increaseLockTime_intou37(uint _secondsToIncrease) public {\n        lockTime_intou37[msg.sender] += _secondsToIncrease;   \n    }\n1198-function_definition-184-186", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=function_definition];
1206 [label="184_ lockTime_intou37[msg.sender] += _secondsToIncrease;\n1206-expression_statement-185-185", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=expression_statement];
1214 [label="186_ function withdraw_intou37() public {\n        require(now > lockTime_intou37[msg.sender]);    \n        uint transferValue_intou37 = 10;           \n        msg.sender.transfer(transferValue_intou37);\n    }\n1214-function_definition-187-191", method="withdraw_intou37()", type_label=function_definition];
1218 [label="187_ require(now > lockTime_intou37[msg.sender]);\n1218-expression_statement-188-188", method="withdraw_intou37()", type_label=expression_statement];
1229 [label="188_ uint transferValue_intou37 = 10;\n1229-new_variable-189-189", method="withdraw_intou37()", type_label=new_variable];
1235 [label="189_ msg.sender.transfer(transferValue_intou37);\n1235-expression_statement-190-190", method="withdraw_intou37()", type_label=expression_statement];
1244 [label="191_ function changeSafeguardStatus() onlyOwner public\n    {\n        if (safeGuard == false)\n        {\n            safeGuard = true;\n        }\n        else\n        {\n            safeGuard = false;    \n        }\n    }\n1244-function_definition-192-202", method="changeSafeguardStatus()", type_label=function_definition];
1246 [label="191_ onlyOwner\n1246-expression_statement-192-192", method="changeSafeguardStatus()", type_label=expression_statement];
1250 [label="193_ if_safeGuard == false\n1250-if-194-201", method="changeSafeguardStatus()", type_label=if];
4397 [label="193_ end_if", method="changeSafeguardStatus()", type_label=end_if];
1256 [label="195_ safeGuard = true;\n1256-expression_statement-196-196", method="changeSafeguardStatus()", type_label=expression_statement];
1262 [label="199_ safeGuard = false;\n1262-expression_statement-200-200", method="changeSafeguardStatus()", type_label=expression_statement];
1267 [label="202_ function bug_intou3() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1267-function_definition-203-206", method="bug_intou3()", type_label=function_definition];
1271 [label="203_ uint8 vundflw =0;\n1271-new_variable-204-204", method="bug_intou3()", type_label=new_variable];
1277 [label="204_ vundflw = vundflw -10;\n1277-expression_statement-205-205", method="bug_intou3()", type_label=expression_statement];
1283 [label="206_ function calculatePercentage(uint256 PercentOf, uint256 percentTo ) internal pure returns (uint256) \n    {\n        uint256 factor = 10000;\n        require(percentTo <= factor);\n        uint256 c = PercentOf.mul(percentTo).div(factor);\n        return c;\n    }\n1283-function_definition-207-213", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=function_definition];
1300 [label="208_ uint256 factor = 10000;\n1300-new_variable-209-209", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=new_variable];
1306 [label="209_ require(percentTo <= factor);\n1306-expression_statement-210-210", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=expression_statement];
1313 [label="210_ uint256 c = PercentOf.mul(percentTo).div(factor);\n1313-new_variable-211-211", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=new_variable];
1329 [label="211_ return c;\n1329-return-212-212", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=return];
1331 [label="213_ mapping(address => uint) public lockTime_intou9;\n1331-new_variable-214-214", method="", type_label=new_variable];
1338 [label="214_ function increaseLockTime_intou9(uint _secondsToIncrease) public {\n        lockTime_intou9[msg.sender] += _secondsToIncrease;   \n    }\n1338-function_definition-215-217", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=function_definition];
1346 [label="215_ lockTime_intou9[msg.sender] += _secondsToIncrease;\n1346-expression_statement-216-216", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=expression_statement];
1354 [label="217_ function withdraw_intou9() public {\n        require(now > lockTime_intou9[msg.sender]);    \n        uint transferValue_intou9 = 10;           \n        msg.sender.transfer(transferValue_intou9);\n    }\n1354-function_definition-218-222", method="withdraw_intou9()", type_label=function_definition];
1358 [label="218_ require(now > lockTime_intou9[msg.sender]);\n1358-expression_statement-219-219", method="withdraw_intou9()", type_label=expression_statement];
1369 [label="219_ uint transferValue_intou9 = 10;\n1369-new_variable-220-220", method="withdraw_intou9()", type_label=new_variable];
1375 [label="220_ msg.sender.transfer(transferValue_intou9);\n1375-expression_statement-221-221", method="withdraw_intou9()", type_label=expression_statement];
1384 [label="222_ function changeFeeAccount(address feeAccount_) public onlyOwner {\n    feeAccount = feeAccount_;\n  }\n1384-function_definition-223-225", method="changeFeeAccount(address feeAccount_)", type_label=function_definition];
1391 [label="222_ onlyOwner\n1391-expression_statement-223-223", method="changeFeeAccount(address feeAccount_)", type_label=expression_statement];
1394 [label="223_ feeAccount = feeAccount_;\n1394-expression_statement-224-224", method="changeFeeAccount(address feeAccount_)", type_label=expression_statement];
1398 [label="225_ mapping(address => uint) public lockTime_intou25;\n1398-new_variable-226-226", method="", type_label=new_variable];
1405 [label="226_ function increaseLockTime_intou25(uint _secondsToIncrease) public {\n        lockTime_intou25[msg.sender] += _secondsToIncrease;   \n    }\n1405-function_definition-227-229", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=function_definition];
1413 [label="227_ lockTime_intou25[msg.sender] += _secondsToIncrease;\n1413-expression_statement-228-228", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=expression_statement];
1421 [label="229_ function withdraw_intou25() public {\n        require(now > lockTime_intou25[msg.sender]);    \n        uint transferValue_intou25 = 10;           \n        msg.sender.transfer(transferValue_intou25);\n    }\n1421-function_definition-230-234", method="withdraw_intou25()", type_label=function_definition];
1425 [label="230_ require(now > lockTime_intou25[msg.sender]);\n1425-expression_statement-231-231", method="withdraw_intou25()", type_label=expression_statement];
1436 [label="231_ uint transferValue_intou25 = 10;\n1436-new_variable-232-232", method="withdraw_intou25()", type_label=new_variable];
1442 [label="232_ msg.sender.transfer(transferValue_intou25);\n1442-expression_statement-233-233", method="withdraw_intou25()", type_label=expression_statement];
1451 [label="234_ function changetradingFee(uint tradingFee_) public onlyOwner{\n    tradingFee = tradingFee_;\n  }\n1451-function_definition-235-237", method="changetradingFee(uint tradingFee_)", type_label=function_definition];
1458 [label="234_ onlyOwner\n1458-expression_statement-235-235", method="changetradingFee(uint tradingFee_)", type_label=expression_statement];
1461 [label="235_ tradingFee = tradingFee_;\n1461-expression_statement-236-236", method="changetradingFee(uint tradingFee_)", type_label=expression_statement];
1465 [label="237_ function bug_intou19() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1465-function_definition-238-241", method="bug_intou19()", type_label=function_definition];
1469 [label="238_ uint8 vundflw =0;\n1469-new_variable-239-239", method="bug_intou19()", type_label=new_variable];
1475 [label="239_ vundflw = vundflw -10;\n1475-expression_statement-240-240", method="bug_intou19()", type_label=expression_statement];
1481 [label="241_ function availableTradingFeeOwner() public view returns(uint256){\n      return tokens[address(0)][feeAccount];\n  }\n1481-function_definition-242-244", method="availableTradingFeeOwner()", type_label=function_definition];
1490 [label="242_ return tokens[address(0)][feeAccount];\n1490-return-243-243", method="availableTradingFeeOwner()", type_label=return];
1498 [label="244_ mapping(address => uint) balances_intou26;\n1498-new_variable-245-245", method="", type_label=new_variable];
1504 [label="245_ function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] - _value >= 0);   \n    balances_intou26[msg.sender] -= _value;   \n    balances_intou26[_to] += _value;   \n    return true;\n  }\n1504-function_definition-246-251", method="transfer_intou26(address _to,uint _value)", type_label=function_definition];
1520 [label="246_ require(balances_intou26[msg.sender] - _value >= 0);\n1520-expression_statement-247-247", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
1533 [label="247_ balances_intou26[msg.sender] -= _value;\n1533-expression_statement-248-248", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
1541 [label="248_ balances_intou26[_to] += _value;\n1541-expression_statement-249-249", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
1547 [label="249_ return true;\n1547-return-250-250", method="transfer_intou26(address _to,uint _value)", type_label=return];
1550 [label="251_ function withdrawTradingFeeOwner() public onlyOwner returns (string memory){\n      uint256 amount = availableTradingFeeOwner();\n      require (amount > 0, 'Nothing to withdraw');\n      tokens[address(0)][feeAccount] = 0;\n      msg.sender.transfer(amount);\n      emit OwnerWithdrawTradingFee(owner, amount);\n  }\n1550-function_definition-252-258", method="withdrawTradingFeeOwner()", type_label=function_definition];
1553 [label="251_ onlyOwner\n1553-expression_statement-252-252", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1560 [label="252_ uint256 amount = availableTradingFeeOwner();\n1560-new_variable-253-253", method="withdrawTradingFeeOwner()", type_label=new_variable];
1567 [label="253_ require (amount > 0, 'Nothing to withdraw');\n1567-expression_statement-254-254", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1577 [label="254_ tokens[address(0)][feeAccount] = 0;\n1577-expression_statement-255-255", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1587 [label="255_ msg.sender.transfer(amount);\n1587-expression_statement-256-256", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1602 [label="258_ function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou20;    \n}\n1602-function_definition-259-262", method="bug_intou20(uint8 p_intou20)", type_label=function_definition];
1610 [label="259_ uint8 vundflw1=0;\n1610-new_variable-260-260", method="bug_intou20(uint8 p_intou20)", type_label=new_variable];
1616 [label="260_ vundflw1 = vundflw1 + p_intou20;\n1616-expression_statement-261-261", method="bug_intou20(uint8 p_intou20)", type_label=expression_statement];
1622 [label="262_ function deposit() public payable {\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n    emit Deposit(now, address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\n  }\n1622-function_definition-263-266", method="deposit()", type_label=function_definition];
1627 [label="263_ tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n1627-expression_statement-264-264", method="deposit()", type_label=expression_statement];
1680 [label="266_ function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou32;    \n}\n1680-function_definition-267-270", method="bug_intou32(uint8 p_intou32)", type_label=function_definition];
1688 [label="267_ uint8 vundflw1=0;\n1688-new_variable-268-268", method="bug_intou32(uint8 p_intou32)", type_label=new_variable];
1694 [label="268_ vundflw1 = vundflw1 + p_intou32;\n1694-expression_statement-269-269", method="bug_intou32(uint8 p_intou32)", type_label=expression_statement];
1700 [label="270_ function withdraw(uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    require(tokens[address(0)][msg.sender] >= amount);\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n    msg.sender.transfer(amount);\n    emit Withdraw(now, address(0), msg.sender, amount, tokens[address(0)][msg.sender]);\n  }\n1700-function_definition-271-277", method="withdraw(uint amount)", type_label=function_definition];
1708 [label="271_ require(!safeGuard,\"System Paused by Admin\");\n1708-expression_statement-272-272", method="withdraw(uint amount)", type_label=expression_statement];
1717 [label="272_ require(tokens[address(0)][msg.sender] >= amount);\n1717-expression_statement-273-273", method="withdraw(uint amount)", type_label=expression_statement];
1732 [label="273_ tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n1732-expression_statement-274-274", method="withdraw(uint amount)", type_label=expression_statement];
1757 [label="274_ msg.sender.transfer(amount);\n1757-expression_statement-275-275", method="withdraw(uint amount)", type_label=expression_statement];
1790 [label="277_ mapping(address => uint) balances_intou38;\n1790-new_variable-278-278", method="", type_label=new_variable];
1796 [label="278_ function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] - _value >= 0);   \n    balances_intou38[msg.sender] -= _value;   \n    balances_intou38[_to] += _value;   \n    return true;\n  }\n1796-function_definition-279-284", method="transfer_intou38(address _to,uint _value)", type_label=function_definition];
1812 [label="279_ require(balances_intou38[msg.sender] - _value >= 0);\n1812-expression_statement-280-280", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
1825 [label="280_ balances_intou38[msg.sender] -= _value;\n1825-expression_statement-281-281", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
1833 [label="281_ balances_intou38[_to] += _value;\n1833-expression_statement-282-282", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
1839 [label="282_ return true;\n1839-return-283-283", method="transfer_intou38(address _to,uint _value)", type_label=return];
1842 [label="284_ function depositToken(address token, uint amount) public {\n    require(token!=address(0));\n    require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n    tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n    emit Deposit(now, token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n1842-function_definition-285-290", method="depositToken(address token,uint amount)", type_label=function_definition];
1854 [label="285_ require(token!=address(0));\n1854-expression_statement-286-286", method="depositToken(address token,uint amount)", type_label=expression_statement];
1863 [label="286_ require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n1863-expression_statement-287-287", method="depositToken(address token,uint amount)", type_label=expression_statement];
1884 [label="287_ tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n1884-expression_statement-288-288", method="depositToken(address token,uint amount)", type_label=expression_statement];
1925 [label="290_ function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou4;    \n}\n1925-function_definition-291-294", method="bug_intou4(uint8 p_intou4)", type_label=function_definition];
1933 [label="291_ uint8 vundflw1=0;\n1933-new_variable-292-292", method="bug_intou4(uint8 p_intou4)", type_label=new_variable];
1939 [label="292_ vundflw1 = vundflw1 + p_intou4;\n1939-expression_statement-293-293", method="bug_intou4(uint8 p_intou4)", type_label=expression_statement];
1945 [label="294_ function withdrawToken(address token, uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    require(token!=address(0));\n    require(tokens[token][msg.sender] >= amount);\n    tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n	  ERC20Essential(token).transfer(msg.sender, amount);\n    emit Withdraw(now, token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n1945-function_definition-295-302", method="withdrawToken(address token,uint amount)", type_label=function_definition];
1957 [label="295_ require(!safeGuard,\"System Paused by Admin\");\n1957-expression_statement-296-296", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1966 [label="296_ require(token!=address(0));\n1966-expression_statement-297-297", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1975 [label="297_ require(tokens[token][msg.sender] >= amount);\n1975-expression_statement-298-298", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1988 [label="298_ tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n1988-expression_statement-299-299", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
2009 [label="299_ ERC20Essential(token).transfer(msg.sender, amount);\n2009-expression_statement-300-300", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
2043 [label="302_ function bug_intou7() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n2043-function_definition-303-306", method="bug_intou7()", type_label=function_definition];
2047 [label="303_ uint8 vundflw =0;\n2047-new_variable-304-304", method="bug_intou7()", type_label=new_variable];
2053 [label="304_ vundflw = vundflw -10;\n2053-expression_statement-305-305", method="bug_intou7()", type_label=expression_statement];
2059 [label="306_ function balanceOf(address token, address user) public view returns (uint) {\n    return tokens[token][user];\n  }\n2059-function_definition-307-309", method="balanceOf(address token,address user)", type_label=function_definition];
2076 [label="307_ return tokens[token][user];\n2076-return-308-308", method="balanceOf(address token,address user)", type_label=return];
2082 [label="309_ function bug_intou23() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n2082-function_definition-310-313", method="bug_intou23()", type_label=function_definition];
2086 [label="310_ uint8 vundflw =0;\n2086-new_variable-311-311", method="bug_intou23()", type_label=new_variable];
2092 [label="311_ vundflw = vundflw -10;\n2092-expression_statement-312-312", method="bug_intou23()", type_label=expression_statement];
2098 [label="313_ function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    orders[msg.sender][hash] = true;\n    emit Order(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\n  }\n2098-function_definition-314-318", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=function_definition];
2126 [label="314_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2126-new_variable-315-315", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=new_variable];
2152 [label="315_ orders[msg.sender][hash] = true;\n2152-expression_statement-316-316", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=expression_statement];
2183 [label="318_ mapping(address => uint) balances_intou14;\n2183-new_variable-319-319", method="", type_label=new_variable];
2189 [label="319_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n2189-function_definition-320-325", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
2205 [label="320_ require(balances_intou14[msg.sender] - _value >= 0);\n2205-expression_statement-321-321", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
2218 [label="321_ balances_intou14[msg.sender] -= _value;\n2218-expression_statement-322-322", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
2226 [label="322_ balances_intou14[_to] += _value;\n2226-expression_statement-323-323", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
2232 [label="323_ return true;\n2232-return-324-324", method="transfer_intou14(address _to,uint _value)", type_label=return];
2235 [label="325_ function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    require((\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n    orderFills[user][hash] = orderFills[user][hash].add(amount);\n    emit Trade(now, tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);\n  }\n2235-function_definition-326-337", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=function_definition];
2283 [label="326_ require(!safeGuard,\"System Paused by Admin\");\n2283-expression_statement-327-327", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2292 [label="327_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2292-new_variable-328-328", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=new_variable];
2318 [label="328_ require((\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n2318-expression_statement-329-333", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2372 [label="333_ tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n2372-expression_statement-334-334", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2387 [label="334_ orderFills[user][hash] = orderFills[user][hash].add(amount);\n2387-expression_statement-335-335", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2426 [label="337_ function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) internal {\n    uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n    tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n    tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n    tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n    tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n    tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n  }\n2426-function_definition-338-345", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=function_definition];
2454 [label="338_ uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n2454-new_variable-339-339", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=new_variable];
2465 [label="339_ tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n2465-expression_statement-340-340", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2491 [label="340_ tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n2491-expression_statement-341-341", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2513 [label="341_ tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n2513-expression_statement-342-342", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2534 [label="342_ tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n2534-expression_statement-343-343", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2558 [label="343_ tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n2558-expression_statement-344-344", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2586 [label="345_ mapping(address => uint) balances_intou30;\n2586-new_variable-346-346", method="", type_label=new_variable];
2592 [label="346_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n2592-function_definition-347-352", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
2608 [label="347_ require(balances_intou30[msg.sender] - _value >= 0);\n2608-expression_statement-348-348", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
2621 [label="348_ balances_intou30[msg.sender] -= _value;\n2621-expression_statement-349-349", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
2629 [label="349_ balances_intou30[_to] += _value;\n2629-expression_statement-350-350", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
2635 [label="350_ return true;\n2635-return-351-351", method="transfer_intou30(address _to,uint _value)", type_label=return];
2638 [label="352_ function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public view returns(bool) {\n    if (!(\n      tokens[tokenGet][sender] >= amount &&\n      availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount\n    )) return false;\n    return true;\n  }\n2638-function_definition-353-359", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=function_definition];
2695 [label="353_ if\n2695-if-354-357", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=if];
5842 [label="353_ end_if", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=end_if];
2730 [label="356_ return false;\n2730-return-357-357", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=return];
2733 [label="357_ return true;\n2733-return-358-358", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=return];
2736 [label="359_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n2736-function_definition-360-363", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
2744 [label="360_ uint8 vundflw1=0;\n2744-new_variable-361-361", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
2750 [label="361_ vundflw1 = vundflw1 + p_intou8;\n2750-expression_statement-362-362", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
2756 [label="363_ function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    uint available1;\n    if (!(\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires\n    )) return 0;\n    available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\n    if (amountGet.sub(orderFills[user][hash])<available1) return amountGet.sub(orderFills[user][hash]);\n    return available1;\n  }\n2756-function_definition-364-374", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
2805 [label="364_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2805-new_variable-365-365", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2831 [label="365_ uint available1;\n2831-new_variable-366-366", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2836 [label="366_ if\n2836-if-367-370", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5983 [label="366_ end_if", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2875 [label="369_ return 0;\n2875-return-370-370", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2877 [label="370_ available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\n2877-expression_statement-371-371", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2892 [label="371_ if_amountGet.sub(orderFills[user][hash])<available1\n2892-if-372-372", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=if];
6039 [label="371_ end_if", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2905 [label="371_ return amountGet.sub(orderFills[user][hash]);\n2905-return-372-372", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2916 [label="372_ return available1;\n2916-return-373-373", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2918 [label="374_ function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user) public view returns(uint) {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    return orderFills[user][hash];\n  }\n2918-function_definition-375-378", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=function_definition];
2955 [label="375_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2955-new_variable-376-376", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=new_variable];
2981 [label="376_ return orderFills[user][hash];\n2981-return-377-377", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=return];
2987 [label="378_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n2987-function_definition-379-382", method="bug_intou39()", type_label=function_definition];
2991 [label="379_ uint8 vundflw =0;\n2991-new_variable-380-380", method="bug_intou39()", type_label=new_variable];
2997 [label="380_ vundflw = vundflw -10;\n2997-expression_statement-381-381", method="bug_intou39()", type_label=expression_statement];
3003 [label="382_ function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == msg.sender));\n    orderFills[msg.sender][hash] = amountGet;\n    emit Cancel(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n  }\n3003-function_definition-383-389", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
3043 [label="383_ require(!safeGuard,\"System Paused by Admin\");\n3043-expression_statement-384-384", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
3052 [label="384_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n3052-new_variable-385-385", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
3078 [label="385_ require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == msg.sender));\n3078-expression_statement-386-386", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
3116 [label="386_ orderFills[msg.sender][hash] = amountGet;\n3116-expression_statement-387-387", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
87 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 3251  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3251 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 3251  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
204 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
258 -> 264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
416 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
425 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
609 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
667 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
694 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
721 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
724 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
779 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
791 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
820 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
903 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1082 -> 1086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1086 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1143 -> 1147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1147 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1198 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1214 -> 1218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1218 -> 1229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1229 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 1250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 1256  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1250 -> 1262  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4397 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 4397  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1262 -> 4397  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1267 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1300 -> 1306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1306 -> 1313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1313 -> 1329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1329 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1338 -> 1346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1354 -> 1358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1358 -> 1369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1369 -> 1375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 1394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1405 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 1425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1425 -> 1436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1436 -> 1442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1451 -> 1461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1469 -> 1475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1481 -> 1490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1490 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1504 -> 1520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1520 -> 1533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1533 -> 1541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1541 -> 1547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1550 -> 1560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1560 -> 1567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1567 -> 1577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1577 -> 1587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1610 -> 1616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1622 -> 1627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1680 -> 1688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1688 -> 1694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1700 -> 1708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1708 -> 1717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1717 -> 1732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1732 -> 1757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1796 -> 1812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1812 -> 1825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1825 -> 1833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1833 -> 1839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1839 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1842 -> 1854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1854 -> 1863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1863 -> 1884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1925 -> 1933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1933 -> 1939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1945 -> 1957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1957 -> 1966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1966 -> 1975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1975 -> 1988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1988 -> 2009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2043 -> 2047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2047 -> 2053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2059 -> 2076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2076 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2082 -> 2086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2086 -> 2092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2098 -> 2126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2126 -> 2152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2189 -> 2205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2205 -> 2218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2218 -> 2226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2226 -> 2232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2232 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2235 -> 2283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2283 -> 2292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2292 -> 2318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2318 -> 2372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2372 -> 2387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2426 -> 2454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2454 -> 2465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2465 -> 2491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2491 -> 2513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2513 -> 2534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2534 -> 2558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2592 -> 2608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2608 -> 2621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2621 -> 2629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2629 -> 2635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2635 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2638 -> 2695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2695 -> 2730  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2695 -> 5842  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5842 -> 2733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2730 -> 5842  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2730 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2733 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2736 -> 2744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2744 -> 2750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2756 -> 2805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2805 -> 2831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2831 -> 2836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2836 -> 2875  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2836 -> 5983  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5983 -> 2877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2875 -> 5983  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2875 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2877 -> 2892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2892 -> 2905  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2892 -> 6039  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6039 -> 2916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2905 -> 6039  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2905 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2916 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2918 -> 2955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2955 -> 2981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2981 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2987 -> 2991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2991 -> 2997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3003 -> 3043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3043 -> 3052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3052 -> 3078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3078 -> 3116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
