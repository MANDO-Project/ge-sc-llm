digraph  {
13 [label="2_ mul\n13-function_definition-3-10", type_label=function_definition];
31 [label="3_ if_a == 0\n31-if-4-6", type_label=if];
1437 [label="3_ end_if", type_label=end_if];
36 [label="4_ return 0;\n36-return-5-5", type_label=return];
38 [label="6_ c = a * b;\n38-expression_statement-7-7", type_label=expression_statement];
44 [label="7_ assert(c / a == b);\n44-expression_statement-8-8", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", type_label=return];
55 [label="10_ div\n55-function_definition-11-13", type_label=function_definition];
72 [label="11_ return a / b;\n72-return-12-12", type_label=return];
76 [label="13_ sub\n76-function_definition-14-17", type_label=function_definition];
93 [label="14_ assert(b <= a);\n93-expression_statement-15-15", type_label=expression_statement];
100 [label="15_ return a - b;\n100-return-16-16", type_label=return];
104 [label="17_ add\n104-function_definition-18-22", type_label=function_definition];
122 [label="18_ c = a + b;\n122-expression_statement-19-19", type_label=expression_statement];
128 [label="19_ assert(c >= a);\n128-expression_statement-20-20", type_label=expression_statement];
135 [label="20_ return c;\n135-return-21-21", type_label=return];
140 [label="24_ max64\n140-function_definition-25-27", type_label=function_definition];
157 [label="25_ return a >= b ? a : b;\n157-return-26-26", type_label=return];
164 [label="27_ min64\n164-function_definition-28-30", type_label=function_definition];
181 [label="28_ return a < b ? a : b;\n181-return-29-29", type_label=return];
188 [label="30_ max256\n188-function_definition-31-33", type_label=function_definition];
205 [label="31_ return a >= b ? a : b;\n205-return-32-32", type_label=return];
212 [label="33_ min256\n212-function_definition-34-36", type_label=function_definition];
229 [label="34_ return a < b ? a : b;\n229-return-35-35", type_label=return];
239 [label="38_ totalSupply\n239-function_definition-39-39", type_label=function_definition];
247 [label="39_ balanceOf\n247-function_definition-40-40", type_label=function_definition];
259 [label="40_ transfer\n259-function_definition-41-41", type_label=function_definition];
294 [label="44_ allowance\n294-function_definition-45-46", type_label=function_definition];
310 [label="46_ transferFrom\n310-function_definition-47-48", type_label=function_definition];
329 [label="48_ approve\n329-function_definition-49-49", type_label=function_definition];
369 [label="57_ mapping(address => uint256) balances;\n369-new_variable-58-58", type_label=new_variable];
375 [label="58_ uint256 totalSupply_;\n375-new_variable-59-59", type_label=new_variable];
379 [label="59_ totalSupply\n379-function_definition-60-62", type_label=function_definition];
388 [label="60_ return totalSupply_;\n388-return-61-61", type_label=return];
390 [label="62_ transfer\n390-function_definition-63-70", type_label=function_definition];
406 [label="63_ require(_to != address(0));\n406-expression_statement-64-64", type_label=expression_statement];
415 [label="64_ require(_value <= balances[msg.sender]);\n415-expression_statement-65-65", type_label=expression_statement];
426 [label="65_ balances[msg.sender] = balances[msg.sender].sub(_value);\n426-expression_statement-66-66", type_label=expression_statement];
443 [label="66_ balances[_to] = balances[_to].add(_value);\n443-expression_statement-67-67", type_label=expression_statement];
466 [label="68_ return true;\n466-return-69-69", type_label=return];
469 [label="70_ balanceOf\n469-function_definition-71-73", type_label=function_definition];
482 [label="71_ return balances[_owner];\n482-return-72-72", type_label=return];
502 [label="76_ burn\n502-function_definition-77-79", type_label=function_definition];
510 [label="77_ _burn(msg.sender, _value);\n510-expression_statement-78-78", type_label=expression_statement];
519 [label="79_ _burn\n519-function_definition-80-86", type_label=function_definition];
531 [label="80_ require(_value <= balances[_who]);\n531-expression_statement-81-81", type_label=expression_statement];
540 [label="81_ balances[_who] = balances[_who].sub(_value);\n540-expression_statement-82-82", type_label=expression_statement];
553 [label="82_ totalSupply_ = totalSupply_.sub(_value);\n553-expression_statement-83-83", type_label=expression_statement];
587 [label="88_ mapping (address => mapping (address => uint256)) internal allowed;\n587-new_variable-89-89", type_label=new_variable];
596 [label="89_ transferFrom\n596-function_definition-90-106", type_label=function_definition];
616 [label="97_ require(_to != address(0));\n616-expression_statement-98-98", type_label=expression_statement];
625 [label="98_ require(_value <= balances[_from]);\n625-expression_statement-99-99", type_label=expression_statement];
634 [label="99_ require(_value <= allowed[_from][msg.sender]);\n634-expression_statement-100-100", type_label=expression_statement];
647 [label="100_ balances[_from] = balances[_from].sub(_value);\n647-expression_statement-101-101", type_label=expression_statement];
660 [label="101_ balances[_to] = balances[_to].add(_value);\n660-expression_statement-102-102", type_label=expression_statement];
673 [label="102_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n673-expression_statement-103-103", type_label=expression_statement];
702 [label="104_ return true;\n702-return-105-105", type_label=return];
705 [label="106_ approve\n705-function_definition-107-111", type_label=function_definition];
721 [label="107_ allowed[msg.sender][_spender] = _value;\n721-expression_statement-108-108", type_label=expression_statement];
741 [label="109_ return true;\n741-return-110-110", type_label=return];
744 [label="111_ allowance\n744-function_definition-112-121", type_label=function_definition];
761 [label="119_ return allowed[_owner][_spender];\n761-return-120-120", type_label=return];
767 [label="121_ increaseApproval\n767-function_definition-122-133", type_label=function_definition];
783 [label="128_ allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n783-expression_statement-129-130", type_label=expression_statement];
821 [label="131_ return true;\n821-return-132-132", type_label=return];
824 [label="133_ decreaseApproval\n824-function_definition-134-149", type_label=function_definition];
840 [label="140_ uint oldValue = allowed[msg.sender][_spender];\n840-new_variable-141-141", type_label=new_variable];
852 [label="141_ if__subtractedValue > oldValue\n852-if-142-146", type_label=if];
2258 [label="141_ end_if", type_label=end_if];
857 [label="142_ allowed[msg.sender][_spender] = 0;\n857-expression_statement-143-143", type_label=expression_statement];
868 [label="144_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n868-expression_statement-145-145", type_label=expression_statement];
899 [label="147_ return true;\n899-return-148-148", type_label=return];
905 [label="151_ address public owner;\n905-new_variable-152-152", type_label=new_variable];
928 [label="158_ owner = msg.sender;\n928-expression_statement-159-159", type_label=expression_statement];
934 [label="160_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n934-expression_statement-161-164", type_label=expression_statement];
937 [label="161_ require(msg.sender == owner);\n937-expression_statement-162-162", type_label=expression_statement];
946 [label="162_ _;\n946-expression_statement-163-163", type_label=expression_statement];
948 [label="164_ transferOwnership\n948-function_definition-165-169", type_label=function_definition];
955 [label="164_ onlyOwner\n955-expression_statement-165-165", type_label=expression_statement];
958 [label="165_ require(newOwner != address(0));\n958-expression_statement-166-166", type_label=expression_statement];
973 [label="167_ owner = newOwner;\n973-expression_statement-168-168", type_label=expression_statement];
977 [label="169_ renounceOwnership\n977-function_definition-170-173", type_label=function_definition];
980 [label="169_ onlyOwner\n980-expression_statement-170-170", type_label=expression_statement];
987 [label="171_ owner = address(0);\n987-expression_statement-172-172", type_label=expression_statement];
1014 [label="177_ bool public mintingFinished = false;\n1014-new_variable-178-178", type_label=new_variable];
1021 [label="178_ uint256 public maxMintQuantity;\n1021-new_variable-179-179", type_label=new_variable];
1026 [label="179_ bool public isLimitMint = false;\n1026-new_variable-180-180", type_label=new_variable];
1033 [label="180_ modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n1033-expression_statement-181-184", type_label=expression_statement];
1036 [label="181_ require(!mintingFinished);\n1036-expression_statement-182-182", type_label=expression_statement];
1042 [label="182_ _;\n1042-expression_statement-183-183", type_label=expression_statement];
1044 [label="184_ modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n1044-expression_statement-185-188", type_label=expression_statement];
1047 [label="185_ require(msg.sender == owner);\n1047-expression_statement-186-186", type_label=expression_statement];
1056 [label="186_ _;\n1056-expression_statement-187-187", type_label=expression_statement];
1058 [label="188_ mint\n1058-function_definition-189-204", type_label=function_definition];
1068 [label="192_ hasMintPermission\n1068-expression_statement-193-193", type_label=expression_statement];
1070 [label="193_ canMint\n1070-expression_statement-194-194", type_label=expression_statement];
1078 [label="197_ require(maxMintQuantity>=totalSupply_.add(_amount));\n1078-expression_statement-198-198", type_label=expression_statement];
1090 [label="198_ totalSupply_ = totalSupply_.add(_amount);\n1090-expression_statement-199-199", type_label=expression_statement];
1099 [label="199_ balances[_to] = balances[_to].add(_amount);\n1099-expression_statement-200-200", type_label=expression_statement];
1128 [label="202_ return true;\n1128-return-203-203", type_label=return];
1131 [label="204_ finishMinting\n1131-function_definition-205-209", type_label=function_definition];
1133 [label="204_ onlyOwner\n1133-expression_statement-205-205", type_label=expression_statement];
1135 [label="204_ canMint\n1135-expression_statement-205-205", type_label=expression_statement];
1143 [label="205_ mintingFinished = true;\n1143-expression_statement-206-206", type_label=expression_statement];
1150 [label="207_ return true;\n1150-return-208-208", type_label=return];
1163 [label="213_ bool public paused = false;\n1163-new_variable-214-214", type_label=new_variable];
1170 [label="214_ modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n1170-expression_statement-215-218", type_label=expression_statement];
1173 [label="215_ require(!paused);\n1173-expression_statement-216-216", type_label=expression_statement];
1179 [label="216_ _;\n1179-expression_statement-217-217", type_label=expression_statement];
1181 [label="218_ modifier whenPaused() {\n    require(paused);\n    _;\n  }\n1181-expression_statement-219-222", type_label=expression_statement];
1184 [label="219_ require(paused);\n1184-expression_statement-220-220", type_label=expression_statement];
1189 [label="220_ _;\n1189-expression_statement-221-221", type_label=expression_statement];
1191 [label="222_ pause\n1191-function_definition-223-226", type_label=function_definition];
1193 [label="222_ onlyOwner\n1193-expression_statement-223-223", type_label=expression_statement];
1195 [label="222_ whenNotPaused\n1195-expression_statement-223-223", type_label=expression_statement];
1199 [label="223_ paused = true;\n1199-expression_statement-224-224", type_label=expression_statement];
1206 [label="226_ unpause\n1206-function_definition-227-230", type_label=function_definition];
1208 [label="226_ onlyOwner\n1208-expression_statement-227-227", type_label=expression_statement];
1210 [label="226_ whenPaused\n1210-expression_statement-227-227", type_label=expression_statement];
1214 [label="227_ paused = false;\n1214-expression_statement-228-228", type_label=expression_statement];
1230 [label="232_ transfer\n1230-function_definition-233-242", type_label=function_definition];
1241 [label="237_ whenNotPaused\n1241-expression_statement-238-238", type_label=expression_statement];
1248 [label="240_ return super.transfer(_to, _value);\n1248-return-241-241", type_label=return];
1257 [label="242_ transferFrom\n1257-function_definition-243-253", type_label=function_definition];
1272 [label="248_ whenNotPaused\n1272-expression_statement-249-249", type_label=expression_statement];
1279 [label="251_ return super.transferFrom(_from, _to, _value);\n1279-return-252-252", type_label=return];
1290 [label="253_ approve\n1290-function_definition-254-263", type_label=function_definition];
1301 [label="258_ whenNotPaused\n1301-expression_statement-259-259", type_label=expression_statement];
1308 [label="261_ return super.approve(_spender, _value);\n1308-return-262-262", type_label=return];
1317 [label="263_ increaseApproval\n1317-function_definition-264-273", type_label=function_definition];
1328 [label="268_ whenNotPaused\n1328-expression_statement-269-269", type_label=expression_statement];
1336 [label="271_ return super.increaseApproval(_spender, _addedValue);\n1336-return-272-272", type_label=return];
1345 [label="273_ decreaseApproval\n1345-function_definition-274-283", type_label=function_definition];
1356 [label="278_ whenNotPaused\n1356-expression_statement-279-279", type_label=expression_statement];
1364 [label="281_ return super.decreaseApproval(_spender, _subtractedValue);\n1364-return-282-282", type_label=return];
1385 [label="285_ string public constant name = \"MOA COIN\";\n1385-new_variable-286-286", type_label=new_variable];
1392 [label="286_ string public constant symbol = \"MOA\";\n1392-new_variable-287-287", type_label=new_variable];
1399 [label="287_ uint8 public constant decimals = 18;\n1399-new_variable-288-288", type_label=new_variable];
1407 [label="289_ maxMintQuantity=2100000000000000000000000000;\n1407-expression_statement-290-290", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
883;
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 36  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
31 -> 1437  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1437 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 1437  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
36 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
38 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
76 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
104 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
140 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
157 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
164 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
188 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
212 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
369 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
390 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
469 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
502 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
616 -> 625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
634 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
705 -> 721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
741 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
744 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
767 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
824 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 857  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
852 -> 868  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2258 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 2258  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
868 -> 2258  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
899 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
937 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
977 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 1021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1026 -> 1033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1033 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1047 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1078 -> 1090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1128 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1131 -> 1143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 1135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1150 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1163 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1170 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1173 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1184 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1191 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1193 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1206 -> 1214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 1210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1230 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1248 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1257 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1279 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1290 -> 1308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1308 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1317 -> 1336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1336 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1345 -> 1364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1364 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1385 -> 1392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
