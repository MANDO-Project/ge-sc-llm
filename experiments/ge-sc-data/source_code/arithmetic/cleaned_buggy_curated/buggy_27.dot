digraph  {
13 [label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address who) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [label="4_ function allowance(address owner, address spender) external view returns (uint256);\n33-function_definition-5-5", method="allowance(address owner,address spender)", type_label=function_definition];
49 [label="5_ function transfer(address to, uint256 value) external returns (bool);\n49-function_definition-6-6", method="transfer(address to,uint256 value)", type_label=function_definition];
64 [label="6_ function approve(address spender, uint256 value) external returns (bool);\n64-function_definition-7-7", method="approve(address spender,uint256 value)", type_label=function_definition];
79 [label="7_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n79-function_definition-8-8", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
129 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n129-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
146 [label="13_ if_a == 0\n146-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
3268 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
151 [label="14_ return 0;\n151-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
153 [label="16_ uint256 c = a * b;\n153-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
161 [label="17_ assert(c / a == b);\n161-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
170 [label="18_ return c;\n170-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
172 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n172-function_definition-21-24", method="div(uint256 a,uint256 b)", type_label=function_definition];
189 [label="21_ uint256 c = a / b;\n189-new_variable-22-22", method="div(uint256 a,uint256 b)", type_label=new_variable];
197 [label="22_ return c;\n197-return-23-23", method="div(uint256 a,uint256 b)", type_label=return];
199 [label="24_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n199-function_definition-25-28", method="sub(uint256 a,uint256 b)", type_label=function_definition];
216 [label="25_ assert(b <= a);\n216-expression_statement-26-26", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
223 [label="26_ return a - b;\n223-return-27-27", method="sub(uint256 a,uint256 b)", type_label=return];
227 [label="28_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n227-function_definition-29-33", method="add(uint256 a,uint256 b)", type_label=function_definition];
244 [label="29_ uint256 c = a + b;\n244-new_variable-30-30", method="add(uint256 a,uint256 b)", type_label=new_variable];
252 [label="30_ assert(c >= a);\n252-expression_statement-31-31", method="add(uint256 a,uint256 b)", type_label=expression_statement];
259 [label="31_ return c;\n259-return-32-32", method="add(uint256 a,uint256 b)", type_label=return];
261 [label="33_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n261-function_definition-34-38", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
278 [label="34_ uint256 c = add(a,m);\n278-new_variable-35-35", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
289 [label="35_ uint256 d = sub(c,1);\n289-new_variable-36-36", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
300 [label="36_ return mul(div(d,m),m);\n300-return-37-37", method="ceil(uint256 a,uint256 m)", type_label=return];
315 [label="40_ address public owner;\n315-new_variable-41-41", method="", type_label=new_variable];
320 [label="41_ function bug_intou40(uint8 p_intou40) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou40;    \n}\n320-function_definition-42-45", method="bug_intou40(uint8 p_intou40)", type_label=function_definition];
328 [label="42_ uint8 vundflw1=0;\n328-new_variable-43-43", method="bug_intou40(uint8 p_intou40)", type_label=new_variable];
334 [label="43_ vundflw1 = vundflw1 + p_intou40;\n334-expression_statement-44-44", method="bug_intou40(uint8 p_intou40)", type_label=expression_statement];
352 [label="47_ owner = msg.sender;\n352-expression_statement-48-48", method="", type_label=expression_statement];
358 [label="49_ mapping(address => uint) balances_intou34;\n358-new_variable-50-50", method="", type_label=new_variable];
364 [label="50_ function transfer_intou34(address _to, uint _value) public returns (bool) {\n    require(balances_intou34[msg.sender] - _value >= 0);   \n    balances_intou34[msg.sender] -= _value;   \n    balances_intou34[_to] += _value;   \n    return true;\n  }\n364-function_definition-51-56", method="transfer_intou34(address _to,uint _value)", type_label=function_definition];
380 [label="51_ require(balances_intou34[msg.sender] - _value >= 0);\n380-expression_statement-52-52", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
393 [label="52_ balances_intou34[msg.sender] -= _value;\n393-expression_statement-53-53", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
401 [label="53_ balances_intou34[_to] += _value;\n401-expression_statement-54-54", method="transfer_intou34(address _to,uint _value)", type_label=expression_statement];
407 [label="54_ return true;\n407-return-55-55", method="transfer_intou34(address _to,uint _value)", type_label=return];
410 [label="56_ modifier onlyOwner() {\n      require(msg.sender == owner);\n      _;\n    }\n410-expression_statement-57-60", method="", type_label=expression_statement];
413 [label="57_ require(msg.sender == owner);\n413-expression_statement-58-58", method="", type_label=expression_statement];
422 [label="58_ _;\n422-expression_statement-59-59", method="", type_label=expression_statement];
424 [label="60_ function transferOwnership(address newOwner) public onlyOwner {\n      require(newOwner != address(0));\n      emit OwnershipTransferred(owner, newOwner);\n      owner = newOwner;\n    }\n424-function_definition-61-65", method="transferOwnership(address newOwner)", type_label=function_definition];
431 [label="60_ onlyOwner\n431-expression_statement-61-61", method="transferOwnership(address newOwner)", type_label=expression_statement];
434 [label="61_ require(newOwner != address(0));\n434-expression_statement-62-62", method="transferOwnership(address newOwner)", type_label=expression_statement];
449 [label="63_ owner = newOwner;\n449-expression_statement-64-64", method="transferOwnership(address newOwner)", type_label=expression_statement];
453 [label="65_ mapping(address => uint) public lockTime_intou21;\n453-new_variable-66-66", method="", type_label=new_variable];
460 [label="66_ function increaseLockTime_intou21(uint _secondsToIncrease) public {\n        lockTime_intou21[msg.sender] += _secondsToIncrease;   \n    }\n460-function_definition-67-69", method="increaseLockTime_intou21(uint _secondsToIncrease)", type_label=function_definition];
468 [label="67_ lockTime_intou21[msg.sender] += _secondsToIncrease;\n468-expression_statement-68-68", method="increaseLockTime_intou21(uint _secondsToIncrease)", type_label=expression_statement];
476 [label="69_ function withdraw_intou21() public {\n        require(now > lockTime_intou21[msg.sender]);    \n        uint transferValue_intou21 = 10;           \n        msg.sender.transfer(transferValue_intou21);\n    }\n476-function_definition-70-74", method="withdraw_intou21()", type_label=function_definition];
480 [label="70_ require(now > lockTime_intou21[msg.sender]);\n480-expression_statement-71-71", method="withdraw_intou21()", type_label=expression_statement];
491 [label="71_ uint transferValue_intou21 = 10;\n491-new_variable-72-72", method="withdraw_intou21()", type_label=new_variable];
497 [label="72_ msg.sender.transfer(transferValue_intou21);\n497-expression_statement-73-73", method="withdraw_intou21()", type_label=expression_statement];
512 [label="76_ string private _name;\n512-new_variable-77-77", method="", type_label=new_variable];
517 [label="77_ string private _symbol;\n517-new_variable-78-78", method="", type_label=new_variable];
522 [label="78_ uint8 private _decimals;\n522-new_variable-79-79", method="", type_label=new_variable];
541 [label="80_ _name = name;\n541-expression_statement-81-81", method="", type_label=expression_statement];
545 [label="81_ _symbol = symbol;\n545-expression_statement-82-82", method="", type_label=expression_statement];
549 [label="82_ _decimals = decimals;\n549-expression_statement-83-83", method="", type_label=expression_statement];
553 [label="84_ mapping(address => uint) balances_intou10;\n553-new_variable-85-85", method="", type_label=new_variable];
559 [label="85_ function transfer_intou10(address _to, uint _value) public returns (bool) {\n    require(balances_intou10[msg.sender] - _value >= 0);   \n    balances_intou10[msg.sender] -= _value;   \n    balances_intou10[_to] += _value;   \n    return true;\n  }\n559-function_definition-86-91", method="transfer_intou10(address _to,uint _value)", type_label=function_definition];
575 [label="86_ require(balances_intou10[msg.sender] - _value >= 0);\n575-expression_statement-87-87", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
588 [label="87_ balances_intou10[msg.sender] -= _value;\n588-expression_statement-88-88", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
596 [label="88_ balances_intou10[_to] += _value;\n596-expression_statement-89-89", method="transfer_intou10(address _to,uint _value)", type_label=expression_statement];
602 [label="89_ return true;\n602-return-90-90", method="transfer_intou10(address _to,uint _value)", type_label=return];
605 [label="91_ function name() public view returns(string memory) {\n    return _name;\n  }\n605-function_definition-92-94", method="name()", type_label=function_definition];
614 [label="92_ return _name;\n614-return-93-93", method="name()", type_label=return];
616 [label="94_ mapping(address => uint) balances_intou22;\n616-new_variable-95-95", method="", type_label=new_variable];
622 [label="95_ function transfer_intou22(address _to, uint _value) public returns (bool) {\n    require(balances_intou22[msg.sender] - _value >= 0);   \n    balances_intou22[msg.sender] -= _value;   \n    balances_intou22[_to] += _value;   \n    return true;\n  }\n622-function_definition-96-101", method="transfer_intou22(address _to,uint _value)", type_label=function_definition];
638 [label="96_ require(balances_intou22[msg.sender] - _value >= 0);\n638-expression_statement-97-97", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
651 [label="97_ balances_intou22[msg.sender] -= _value;\n651-expression_statement-98-98", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
659 [label="98_ balances_intou22[_to] += _value;\n659-expression_statement-99-99", method="transfer_intou22(address _to,uint _value)", type_label=expression_statement];
665 [label="99_ return true;\n665-return-100-100", method="transfer_intou22(address _to,uint _value)", type_label=return];
668 [label="101_ function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n668-function_definition-102-104", method="symbol()", type_label=function_definition];
677 [label="102_ return _symbol;\n677-return-103-103", method="symbol()", type_label=return];
679 [label="104_ function bug_intou12(uint8 p_intou12) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou12;    \n}\n679-function_definition-105-108", method="bug_intou12(uint8 p_intou12)", type_label=function_definition];
687 [label="105_ uint8 vundflw1=0;\n687-new_variable-106-106", method="bug_intou12(uint8 p_intou12)", type_label=new_variable];
693 [label="106_ vundflw1 = vundflw1 + p_intou12;\n693-expression_statement-107-107", method="bug_intou12(uint8 p_intou12)", type_label=expression_statement];
699 [label="108_ function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n699-function_definition-109-111", method="decimals()", type_label=function_definition];
708 [label="109_ return _decimals;\n708-return-110-110", method="decimals()", type_label=return];
710 [label="111_ function bug_intou11() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n710-function_definition-112-115", method="bug_intou11()", type_label=function_definition];
714 [label="112_ uint8 vundflw =0;\n714-new_variable-113-113", method="bug_intou11()", type_label=new_variable];
720 [label="113_ vundflw = vundflw -10;\n720-expression_statement-114-114", method="bug_intou11()", type_label=expression_statement];
740 [label="118_ mapping (address => uint256) private _balances;\n740-new_variable-119-119", method="", type_label=new_variable];
747 [label="119_ mapping (address => mapping (address => uint256)) private _allowed;\n747-new_variable-120-120", method="", type_label=new_variable];
756 [label="120_ string constant tokenName = \"Dan Pan Coin\";\n756-new_variable-121-121", method="", type_label=new_variable];
762 [label="121_ mapping(address => uint) balances_intou18;\n762-new_variable-122-122", method="", type_label=new_variable];
768 [label="122_ function transfer_intou18(address _to, uint _value) public returns (bool) {\n    require(balances_intou18[msg.sender] - _value >= 0);   \n    balances_intou18[msg.sender] -= _value;   \n    balances_intou18[_to] += _value;   \n    return true;\n  }\n768-function_definition-123-128", method="transfer_intou18(address _to,uint _value)", type_label=function_definition];
784 [label="123_ require(balances_intou18[msg.sender] - _value >= 0);\n784-expression_statement-124-124", method="transfer_intou18(address _to,uint _value)", type_label=expression_statement];
797 [label="124_ balances_intou18[msg.sender] -= _value;\n797-expression_statement-125-125", method="transfer_intou18(address _to,uint _value)", type_label=expression_statement];
805 [label="125_ balances_intou18[_to] += _value;\n805-expression_statement-126-126", method="transfer_intou18(address _to,uint _value)", type_label=expression_statement];
811 [label="126_ return true;\n811-return-127-127", method="transfer_intou18(address _to,uint _value)", type_label=return];
814 [label="128_ string constant tokenSymbol = \"DPC\";\n814-new_variable-129-129", method="", type_label=new_variable];
820 [label="129_ mapping(address => uint) public lockTime_intou29;\n820-new_variable-130-130", method="", type_label=new_variable];
827 [label="130_ function increaseLockTime_intou29(uint _secondsToIncrease) public {\n        lockTime_intou29[msg.sender] += _secondsToIncrease;   \n    }\n827-function_definition-131-133", method="increaseLockTime_intou29(uint _secondsToIncrease)", type_label=function_definition];
835 [label="131_ lockTime_intou29[msg.sender] += _secondsToIncrease;\n835-expression_statement-132-132", method="increaseLockTime_intou29(uint _secondsToIncrease)", type_label=expression_statement];
843 [label="133_ function withdraw_intou29() public {\n        require(now > lockTime_intou29[msg.sender]);    \n        uint transferValue_intou29 = 10;           \n        msg.sender.transfer(transferValue_intou29);\n    }\n843-function_definition-134-138", method="withdraw_intou29()", type_label=function_definition];
847 [label="134_ require(now > lockTime_intou29[msg.sender]);\n847-expression_statement-135-135", method="withdraw_intou29()", type_label=expression_statement];
858 [label="135_ uint transferValue_intou29 = 10;\n858-new_variable-136-136", method="withdraw_intou29()", type_label=new_variable];
864 [label="136_ msg.sender.transfer(transferValue_intou29);\n864-expression_statement-137-137", method="withdraw_intou29()", type_label=expression_statement];
873 [label="138_ uint8  constant tokenDecimals = 2;\n873-new_variable-139-139", method="", type_label=new_variable];
878 [label="139_ mapping(address => uint) balances_intou6;\n878-new_variable-140-140", method="", type_label=new_variable];
884 [label="140_ function transfer_intou62(address _to, uint _value) public returns (bool) {\n    require(balances_intou6[msg.sender] - _value >= 0);   \n    balances_intou6[msg.sender] -= _value;   \n    balances_intou6[_to] += _value;   \n    return true;\n  }\n884-function_definition-141-146", method="transfer_intou62(address _to,uint _value)", type_label=function_definition];
900 [label="141_ require(balances_intou6[msg.sender] - _value >= 0);\n900-expression_statement-142-142", method="transfer_intou62(address _to,uint _value)", type_label=expression_statement];
913 [label="142_ balances_intou6[msg.sender] -= _value;\n913-expression_statement-143-143", method="transfer_intou62(address _to,uint _value)", type_label=expression_statement];
921 [label="143_ balances_intou6[_to] += _value;\n921-expression_statement-144-144", method="transfer_intou62(address _to,uint _value)", type_label=expression_statement];
927 [label="144_ return true;\n927-return-145-145", method="transfer_intou62(address _to,uint _value)", type_label=return];
930 [label="146_ uint256 _totalSupply = 10000000000;\n930-new_variable-147-147", method="", type_label=new_variable];
935 [label="147_ function bug_intou16(uint8 p_intou16) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou16;    \n}\n935-function_definition-148-151", method="bug_intou16(uint8 p_intou16)", type_label=function_definition];
943 [label="148_ uint8 vundflw1=0;\n943-new_variable-149-149", method="bug_intou16(uint8 p_intou16)", type_label=new_variable];
949 [label="149_ vundflw1 = vundflw1 + p_intou16;\n949-expression_statement-150-150", method="bug_intou16(uint8 p_intou16)", type_label=expression_statement];
955 [label="151_ uint256 public basePercent = 100;\n955-new_variable-152-152", method="", type_label=new_variable];
961 [label="152_ function bug_intou24(uint8 p_intou24) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou24;    \n}\n961-function_definition-153-156", method="bug_intou24(uint8 p_intou24)", type_label=function_definition];
969 [label="153_ uint8 vundflw1=0;\n969-new_variable-154-154", method="bug_intou24(uint8 p_intou24)", type_label=new_variable];
975 [label="154_ vundflw1 = vundflw1 + p_intou24;\n975-expression_statement-155-155", method="bug_intou24(uint8 p_intou24)", type_label=expression_statement];
981 [label="156_ uint256 public dpPercent = 5;\n981-new_variable-157-157", method="", type_label=new_variable];
987 [label="157_ mapping(address => uint) public lockTime_intou5;\n987-new_variable-158-158", method="", type_label=new_variable];
994 [label="158_ function increaseLockTime_intou5(uint _secondsToIncrease) public {\n        lockTime_intou5[msg.sender] += _secondsToIncrease;   \n    }\n994-function_definition-159-161", method="increaseLockTime_intou5(uint _secondsToIncrease)", type_label=function_definition];
1002 [label="159_ lockTime_intou5[msg.sender] += _secondsToIncrease;\n1002-expression_statement-160-160", method="increaseLockTime_intou5(uint _secondsToIncrease)", type_label=expression_statement];
1010 [label="161_ function withdraw_intou5() public {\n        require(now > lockTime_intou5[msg.sender]);    \n        uint transferValue_intou5 = 10;           \n        msg.sender.transfer(transferValue_intou5);\n    }\n1010-function_definition-162-166", method="withdraw_intou5()", type_label=function_definition];
1014 [label="162_ require(now > lockTime_intou5[msg.sender]);\n1014-expression_statement-163-163", method="withdraw_intou5()", type_label=expression_statement];
1025 [label="163_ uint transferValue_intou5 = 10;\n1025-new_variable-164-164", method="withdraw_intou5()", type_label=new_variable];
1031 [label="164_ msg.sender.transfer(transferValue_intou5);\n1031-expression_statement-165-165", method="withdraw_intou5()", type_label=expression_statement];
1040 [label="166_ address public DanPanAddress = msg.sender;\n1040-new_variable-167-167", method="", type_label=new_variable];
1048 [label="167_ mapping(address => uint) public lockTime_intou33;\n1048-new_variable-168-168", method="", type_label=new_variable];
1055 [label="168_ function increaseLockTime_intou33(uint _secondsToIncrease) public {\n        lockTime_intou33[msg.sender] += _secondsToIncrease;   \n    }\n1055-function_definition-169-171", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=function_definition];
1063 [label="169_ lockTime_intou33[msg.sender] += _secondsToIncrease;\n1063-expression_statement-170-170", method="increaseLockTime_intou33(uint _secondsToIncrease)", type_label=expression_statement];
1071 [label="171_ function withdraw_intou33() public {\n        require(now > lockTime_intou33[msg.sender]);    \n        uint transferValue_intou33 = 10;           \n        msg.sender.transfer(transferValue_intou33);\n    }\n1071-function_definition-172-176", method="withdraw_intou33()", type_label=function_definition];
1075 [label="172_ require(now > lockTime_intou33[msg.sender]);\n1075-expression_statement-173-173", method="withdraw_intou33()", type_label=expression_statement];
1086 [label="173_ uint transferValue_intou33 = 10;\n1086-new_variable-174-174", method="withdraw_intou33()", type_label=new_variable];
1092 [label="174_ msg.sender.transfer(transferValue_intou33);\n1092-expression_statement-175-175", method="withdraw_intou33()", type_label=expression_statement];
1111 [label="177_ function bug_intou27() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1111-function_definition-178-181", method="bug_intou27()", type_label=function_definition];
1115 [label="178_ uint8 vundflw =0;\n1115-new_variable-179-179", method="bug_intou27()", type_label=new_variable];
1121 [label="179_ vundflw = vundflw -10;\n1121-expression_statement-180-180", method="bug_intou27()", type_label=expression_statement];
1137 [label="182_ function bug_intou31() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1137-function_definition-183-186", method="bug_intou31()", type_label=function_definition];
1141 [label="183_ uint8 vundflw =0;\n1141-new_variable-184-184", method="bug_intou31()", type_label=new_variable];
1147 [label="184_ vundflw = vundflw -10;\n1147-expression_statement-185-185", method="bug_intou31()", type_label=expression_statement];
1163 [label="187_ mapping(address => uint) public lockTime_intou13;\n1163-new_variable-188-188", method="", type_label=new_variable];
1170 [label="188_ function increaseLockTime_intou13(uint _secondsToIncrease) public {\n        lockTime_intou13[msg.sender] += _secondsToIncrease;   \n    }\n1170-function_definition-189-191", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=function_definition];
1178 [label="189_ lockTime_intou13[msg.sender] += _secondsToIncrease;\n1178-expression_statement-190-190", method="increaseLockTime_intou13(uint _secondsToIncrease)", type_label=expression_statement];
1186 [label="191_ function withdraw_intou13() public {\n        require(now > lockTime_intou13[msg.sender]);    \n        uint transferValue_intou13 = 10;           \n        msg.sender.transfer(transferValue_intou13);\n    }\n1186-function_definition-192-196", method="withdraw_intou13()", type_label=function_definition];
1190 [label="192_ require(now > lockTime_intou13[msg.sender]);\n1190-expression_statement-193-193", method="withdraw_intou13()", type_label=expression_statement];
1201 [label="193_ uint transferValue_intou13 = 10;\n1201-new_variable-194-194", method="withdraw_intou13()", type_label=new_variable];
1207 [label="194_ msg.sender.transfer(transferValue_intou13);\n1207-expression_statement-195-195", method="withdraw_intou13()", type_label=expression_statement];
1226 [label="197_ function bug_intou15() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1226-function_definition-198-201", method="bug_intou15()", type_label=function_definition];
1230 [label="198_ uint8 vundflw =0;\n1230-new_variable-199-199", method="bug_intou15()", type_label=new_variable];
1236 [label="199_ vundflw = vundflw -10;\n1236-expression_statement-200-200", method="bug_intou15()", type_label=expression_statement];
1242 [label="201_ mapping(address => bool) public whitelistFrom;\n1242-new_variable-202-202", method="", type_label=new_variable];
1249 [label="202_ function bug_intou28(uint8 p_intou28) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou28;    \n}\n1249-function_definition-203-206", method="bug_intou28(uint8 p_intou28)", type_label=function_definition];
1257 [label="203_ uint8 vundflw1=0;\n1257-new_variable-204-204", method="bug_intou28(uint8 p_intou28)", type_label=new_variable];
1263 [label="204_ vundflw1 = vundflw1 + p_intou28;\n1263-expression_statement-205-205", method="bug_intou28(uint8 p_intou28)", type_label=expression_statement];
1269 [label="206_ mapping(address => bool) public whitelistTo;\n1269-new_variable-207-207", method="", type_label=new_variable];
1277 [label="207_ ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\n1277-expression_statement-208-208", method="", type_label=expression_statement];
1286 [label="208_ _mint(msg.sender, _totalSupply);\n1286-expression_statement-209-209", method="", type_label=expression_statement];
1295 [label="210_ mapping(address => uint) public lockTime_intou1;\n1295-new_variable-211-211", method="", type_label=new_variable];
1302 [label="211_ function increaseLockTime_intou1(uint _secondsToIncrease) public {\n        lockTime_intou1[msg.sender] += _secondsToIncrease;   \n    }\n1302-function_definition-212-214", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=function_definition];
1310 [label="212_ lockTime_intou1[msg.sender] += _secondsToIncrease;\n1310-expression_statement-213-213", method="increaseLockTime_intou1(uint _secondsToIncrease)", type_label=expression_statement];
1318 [label="214_ function withdraw_ovrflow1() public {\n        require(now > lockTime_intou1[msg.sender]);    \n        uint transferValue_intou1 = 10;           \n        msg.sender.transfer(transferValue_intou1);\n    }\n1318-function_definition-215-219", method="withdraw_ovrflow1()", type_label=function_definition];
1322 [label="215_ require(now > lockTime_intou1[msg.sender]);\n1322-expression_statement-216-216", method="withdraw_ovrflow1()", type_label=expression_statement];
1333 [label="216_ uint transferValue_intou1 = 10;\n1333-new_variable-217-217", method="withdraw_ovrflow1()", type_label=new_variable];
1339 [label="217_ msg.sender.transfer(transferValue_intou1);\n1339-expression_statement-218-218", method="withdraw_ovrflow1()", type_label=expression_statement];
1348 [label="219_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n1348-function_definition-220-222", method="totalSupply()", type_label=function_definition];
1357 [label="220_ return _totalSupply;\n1357-return-221-221", method="totalSupply()", type_label=return];
1359 [label="222_ mapping(address => uint) balances_intou2;\n1359-new_variable-223-223", method="", type_label=new_variable];
1365 [label="223_ function transfer_undrflow2(address _to, uint _value) public returns (bool) {\n    require(balances_intou2[msg.sender] - _value >= 0);   \n    balances_intou2[msg.sender] -= _value;   \n    balances_intou2[_to] += _value;   \n    return true;\n  }\n1365-function_definition-224-229", method="transfer_undrflow2(address _to,uint _value)", type_label=function_definition];
1381 [label="224_ require(balances_intou2[msg.sender] - _value >= 0);\n1381-expression_statement-225-225", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
1394 [label="225_ balances_intou2[msg.sender] -= _value;\n1394-expression_statement-226-226", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
1402 [label="226_ balances_intou2[_to] += _value;\n1402-expression_statement-227-227", method="transfer_undrflow2(address _to,uint _value)", type_label=expression_statement];
1408 [label="227_ return true;\n1408-return-228-228", method="transfer_undrflow2(address _to,uint _value)", type_label=return];
1411 [label="229_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n1411-function_definition-230-232", method="balanceOf(address owner)", type_label=function_definition];
1424 [label="230_ return _balances[owner];\n1424-return-231-231", method="balanceOf(address owner)", type_label=return];
1428 [label="232_ mapping(address => uint) public lockTime_intou17;\n1428-new_variable-233-233", method="", type_label=new_variable];
1435 [label="233_ function increaseLockTime_intou17(uint _secondsToIncrease) public {\n        lockTime_intou17[msg.sender] += _secondsToIncrease;   \n    }\n1435-function_definition-234-236", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=function_definition];
1443 [label="234_ lockTime_intou17[msg.sender] += _secondsToIncrease;\n1443-expression_statement-235-235", method="increaseLockTime_intou17(uint _secondsToIncrease)", type_label=expression_statement];
1451 [label="236_ function withdraw_intou17() public {\n        require(now > lockTime_intou17[msg.sender]);    \n        uint transferValue_intou17 = 10;           \n        msg.sender.transfer(transferValue_intou17);\n    }\n1451-function_definition-237-241", method="withdraw_intou17()", type_label=function_definition];
1455 [label="237_ require(now > lockTime_intou17[msg.sender]);\n1455-expression_statement-238-238", method="withdraw_intou17()", type_label=expression_statement];
1466 [label="238_ uint transferValue_intou17 = 10;\n1466-new_variable-239-239", method="withdraw_intou17()", type_label=new_variable];
1472 [label="239_ msg.sender.transfer(transferValue_intou17);\n1472-expression_statement-240-240", method="withdraw_intou17()", type_label=expression_statement];
1481 [label="241_ function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n1481-function_definition-242-244", method="allowance(address owner,address spender)", type_label=function_definition];
1498 [label="242_ return _allowed[owner][spender];\n1498-return-243-243", method="allowance(address owner,address spender)", type_label=return];
1504 [label="244_ mapping(address => uint) public lockTime_intou37;\n1504-new_variable-245-245", method="", type_label=new_variable];
1511 [label="245_ function increaseLockTime_intou37(uint _secondsToIncrease) public {\n        lockTime_intou37[msg.sender] += _secondsToIncrease;   \n    }\n1511-function_definition-246-248", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=function_definition];
1519 [label="246_ lockTime_intou37[msg.sender] += _secondsToIncrease;\n1519-expression_statement-247-247", method="increaseLockTime_intou37(uint _secondsToIncrease)", type_label=expression_statement];
1527 [label="248_ function withdraw_intou37() public {\n        require(now > lockTime_intou37[msg.sender]);    \n        uint transferValue_intou37 = 10;           \n        msg.sender.transfer(transferValue_intou37);\n    }\n1527-function_definition-249-253", method="withdraw_intou37()", type_label=function_definition];
1531 [label="249_ require(now > lockTime_intou37[msg.sender]);\n1531-expression_statement-250-250", method="withdraw_intou37()", type_label=expression_statement];
1542 [label="250_ uint transferValue_intou37 = 10;\n1542-new_variable-251-251", method="withdraw_intou37()", type_label=new_variable];
1548 [label="251_ msg.sender.transfer(transferValue_intou37);\n1548-expression_statement-252-252", method="withdraw_intou37()", type_label=expression_statement];
1557 [label="253_ function findOnePercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 onePercent = roundValue.mul(basePercent).div(10000);\n    return onePercent;\n  }\n1557-function_definition-254-258", method="findOnePercent(uint256 value)", type_label=function_definition];
1570 [label="254_ uint256 roundValue = value.ceil(basePercent);\n1570-new_variable-255-255", method="findOnePercent(uint256 value)", type_label=new_variable];
1581 [label="255_ uint256 onePercent = roundValue.mul(basePercent).div(10000);\n1581-new_variable-256-256", method="findOnePercent(uint256 value)", type_label=new_variable];
1597 [label="256_ return onePercent;\n1597-return-257-257", method="findOnePercent(uint256 value)", type_label=return];
1599 [label="258_ function bug_intou3() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n1599-function_definition-259-262", method="bug_intou3()", type_label=function_definition];
1603 [label="259_ uint8 vundflw =0;\n1603-new_variable-260-260", method="bug_intou3()", type_label=new_variable];
1609 [label="260_ vundflw = vundflw -10;\n1609-expression_statement-261-261", method="bug_intou3()", type_label=expression_statement];
1615 [label="262_ function findDPPercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);\n    return DPPercent;\n  }\n1615-function_definition-263-267", method="findDPPercent(uint256 value)", type_label=function_definition];
1628 [label="263_ uint256 roundValue = value.ceil(basePercent);\n1628-new_variable-264-264", method="findDPPercent(uint256 value)", type_label=new_variable];
1639 [label="264_ uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);\n1639-new_variable-265-265", method="findDPPercent(uint256 value)", type_label=new_variable];
1660 [label="265_ return DPPercent;\n1660-return-266-266", method="findDPPercent(uint256 value)", type_label=return];
1662 [label="267_ mapping(address => uint) public lockTime_intou9;\n1662-new_variable-268-268", method="", type_label=new_variable];
1669 [label="268_ function increaseLockTime_intou9(uint _secondsToIncrease) public {\n        lockTime_intou9[msg.sender] += _secondsToIncrease;   \n    }\n1669-function_definition-269-271", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=function_definition];
1677 [label="269_ lockTime_intou9[msg.sender] += _secondsToIncrease;\n1677-expression_statement-270-270", method="increaseLockTime_intou9(uint _secondsToIncrease)", type_label=expression_statement];
1685 [label="271_ function withdraw_intou9() public {\n        require(now > lockTime_intou9[msg.sender]);    \n        uint transferValue_intou9 = 10;           \n        msg.sender.transfer(transferValue_intou9);\n    }\n1685-function_definition-272-276", method="withdraw_intou9()", type_label=function_definition];
1689 [label="272_ require(now > lockTime_intou9[msg.sender]);\n1689-expression_statement-273-273", method="withdraw_intou9()", type_label=expression_statement];
1700 [label="273_ uint transferValue_intou9 = 10;\n1700-new_variable-274-274", method="withdraw_intou9()", type_label=new_variable];
1706 [label="274_ msg.sender.transfer(transferValue_intou9);\n1706-expression_statement-275-275", method="withdraw_intou9()", type_label=expression_statement];
1715 [label="276_ function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n        if (value == 0) {\n            emit Transfer(msg.sender, to, 0);\n            return true;\n        }\n        uint256 tokensToTransfer = value;\n        uint256 tokensToBurn = 0;\n        uint256 tokensToDanPan = 0;\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        if (!_isWhitelisted(msg.sender, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(msg.sender, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n            emit Transfer(msg.sender, DanPanAddress, tokensToDanPan);\n        }\n        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n        emit Transfer(msg.sender, to, tokensToTransfer);\n    return true;\n  }\n1715-function_definition-277-301", method="transfer(address to,uint256 value)", type_label=function_definition];
1731 [label="277_ require(value <= _balances[msg.sender]);\n1731-expression_statement-278-278", method="transfer(address to,uint256 value)", type_label=expression_statement];
1742 [label="278_ require(to != address(0));\n1742-expression_statement-279-279", method="transfer(address to,uint256 value)", type_label=expression_statement];
1751 [label="279_ if_value == 0\n1751-if-280-283", method="transfer(address to,uint256 value)", type_label=if];
4873 [label="279_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1766 [label="281_ return true;\n1766-return-282-282", method="transfer(address to,uint256 value)", type_label=return];
1769 [label="283_ uint256 tokensToTransfer = value;\n1769-new_variable-284-284", method="transfer(address to,uint256 value)", type_label=new_variable];
1775 [label="284_ uint256 tokensToBurn = 0;\n1775-new_variable-285-285", method="transfer(address to,uint256 value)", type_label=new_variable];
1781 [label="285_ uint256 tokensToDanPan = 0;\n1781-new_variable-286-286", method="transfer(address to,uint256 value)", type_label=new_variable];
1787 [label="286_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n1787-expression_statement-287-287", method="transfer(address to,uint256 value)", type_label=expression_statement];
1804 [label="287_ if\n1804-if-288-296", method="transfer(address to,uint256 value)", type_label=if];
4926 [label="287_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1815 [label="288_ tokensToBurn = findOnePercent(value);\n1815-expression_statement-289-289", method="transfer(address to,uint256 value)", type_label=expression_statement];
1822 [label="289_ tokensToDanPan = findDPPercent(value);\n1822-expression_statement-290-290", method="transfer(address to,uint256 value)", type_label=expression_statement];
1829 [label="290_ tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n1829-expression_statement-291-291", method="transfer(address to,uint256 value)", type_label=expression_statement];
1843 [label="291_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1843-expression_statement-292-292", method="transfer(address to,uint256 value)", type_label=expression_statement];
1864 [label="293_ _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n1864-expression_statement-294-294", method="transfer(address to,uint256 value)", type_label=expression_statement];
1887 [label="296_ assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n1887-expression_statement-297-297", method="transfer(address to,uint256 value)", type_label=expression_statement];
1904 [label="297_ _balances[to] = _balances[to].add(tokensToTransfer);\n1904-expression_statement-298-298", method="transfer(address to,uint256 value)", type_label=expression_statement];
1927 [label="299_ return true;\n1927-return-300-300", method="transfer(address to,uint256 value)", type_label=return];
1930 [label="301_ mapping(address => uint) public lockTime_intou25;\n1930-new_variable-302-302", method="", type_label=new_variable];
1937 [label="302_ function increaseLockTime_intou25(uint _secondsToIncrease) public {\n        lockTime_intou25[msg.sender] += _secondsToIncrease;   \n    }\n1937-function_definition-303-305", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=function_definition];
1945 [label="303_ lockTime_intou25[msg.sender] += _secondsToIncrease;\n1945-expression_statement-304-304", method="increaseLockTime_intou25(uint _secondsToIncrease)", type_label=expression_statement];
1953 [label="305_ function withdraw_intou25() public {\n        require(now > lockTime_intou25[msg.sender]);    \n        uint transferValue_intou25 = 10;           \n        msg.sender.transfer(transferValue_intou25);\n    }\n1953-function_definition-306-310", method="withdraw_intou25()", type_label=function_definition];
1957 [label="306_ require(now > lockTime_intou25[msg.sender]);\n1957-expression_statement-307-307", method="withdraw_intou25()", type_label=expression_statement];
1968 [label="307_ uint transferValue_intou25 = 10;\n1968-new_variable-308-308", method="withdraw_intou25()", type_label=new_variable];
1974 [label="308_ msg.sender.transfer(transferValue_intou25);\n1974-expression_statement-309-309", method="withdraw_intou25()", type_label=expression_statement];
1983 [label="310_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n1983-function_definition-311-315", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
1997 [label="311_ for(i < receivers.length;;i++)\n1997-for-312-314", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
5119 [label="311_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
2010 [label="311_ i++\n2010-expression_statement-312-312", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
2013 [label="312_ transfer(receivers[i], amounts[i]);\n2013-expression_statement-313-313", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
2024 [label="315_ function bug_intou19() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n2024-function_definition-316-319", method="bug_intou19()", type_label=function_definition];
2028 [label="316_ uint8 vundflw =0;\n2028-new_variable-317-317", method="bug_intou19()", type_label=new_variable];
2034 [label="317_ vundflw = vundflw -10;\n2034-expression_statement-318-318", method="bug_intou19()", type_label=expression_statement];
2040 [label="319_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n2040-function_definition-320-325", method="approve(address spender,uint256 value)", type_label=function_definition];
2056 [label="320_ require(spender != address(0));\n2056-expression_statement-321-321", method="approve(address spender,uint256 value)", type_label=expression_statement];
2065 [label="321_ _allowed[msg.sender][spender] = value;\n2065-expression_statement-322-322", method="approve(address spender,uint256 value)", type_label=expression_statement];
2085 [label="323_ return true;\n2085-return-324-324", method="approve(address spender,uint256 value)", type_label=return];
2088 [label="325_ mapping(address => uint) balances_intou26;\n2088-new_variable-326-326", method="", type_label=new_variable];
2094 [label="326_ function transfer_intou26(address _to, uint _value) public returns (bool) {\n    require(balances_intou26[msg.sender] - _value >= 0);   \n    balances_intou26[msg.sender] -= _value;   \n    balances_intou26[_to] += _value;   \n    return true;\n  }\n2094-function_definition-327-332", method="transfer_intou26(address _to,uint _value)", type_label=function_definition];
2110 [label="327_ require(balances_intou26[msg.sender] - _value >= 0);\n2110-expression_statement-328-328", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
2123 [label="328_ balances_intou26[msg.sender] -= _value;\n2123-expression_statement-329-329", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
2131 [label="329_ balances_intou26[_to] += _value;\n2131-expression_statement-330-330", method="transfer_intou26(address _to,uint _value)", type_label=expression_statement];
2137 [label="330_ return true;\n2137-return-331-331", method="transfer_intou26(address _to,uint _value)", type_label=return];
2140 [label="332_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n        if (value == 0) {\n            emit Transfer(from, to, 0);\n            return true;\n        }\n        uint256 tokensToTransfer = value;\n        uint256 tokensToBurn = 0;\n        uint256 tokensToDanPan = 0;\n        _balances[from] = _balances[from].sub(value);\n        if (!_isWhitelisted(from, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(from, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n           emit Transfer(from, DanPanAddress, tokensToDanPan);\n        }\n        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n	_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, tokensToTransfer);\n    return true;\n  }\n2140-function_definition-333-359", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
2160 [label="333_ require(value <= _balances[from]);\n2160-expression_statement-334-334", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2169 [label="334_ require(value <= _allowed[from][msg.sender]);\n2169-expression_statement-335-335", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2182 [label="335_ require(to != address(0));\n2182-expression_statement-336-336", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2191 [label="336_ if_value == 0\n2191-if-337-340", method="transferFrom(address from,address to,uint256 value)", type_label=if];
5313 [label="336_ end_if", method="transferFrom(address from,address to,uint256 value)", type_label=end_if];
2204 [label="338_ return true;\n2204-return-339-339", method="transferFrom(address from,address to,uint256 value)", type_label=return];
2207 [label="340_ uint256 tokensToTransfer = value;\n2207-new_variable-341-341", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
2213 [label="341_ uint256 tokensToBurn = 0;\n2213-new_variable-342-342", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
2219 [label="342_ uint256 tokensToDanPan = 0;\n2219-new_variable-343-343", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
2225 [label="343_ _balances[from] = _balances[from].sub(value);\n2225-expression_statement-344-344", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2238 [label="344_ if\n2238-if-345-353", method="transferFrom(address from,address to,uint256 value)", type_label=if];
5360 [label="344_ end_if", method="transferFrom(address from,address to,uint256 value)", type_label=end_if];
2247 [label="345_ tokensToBurn = findOnePercent(value);\n2247-expression_statement-346-346", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2254 [label="346_ tokensToDanPan = findDPPercent(value);\n2254-expression_statement-347-347", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2261 [label="347_ tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n2261-expression_statement-348-348", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2275 [label="348_ _totalSupply = _totalSupply.sub(tokensToBurn);\n2275-expression_statement-349-349", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2294 [label="350_ _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n2294-expression_statement-351-351", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2315 [label="353_ assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n2315-expression_statement-354-354", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2332 [label="354_ _balances[to] = _balances[to].add(tokensToTransfer);\n2332-expression_statement-355-355", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2345 [label="355_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n2345-expression_statement-356-356", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2374 [label="357_ return true;\n2374-return-358-358", method="transferFrom(address from,address to,uint256 value)", type_label=return];
2377 [label="359_ function bug_intou20(uint8 p_intou20) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou20;    \n}\n2377-function_definition-360-363", method="bug_intou20(uint8 p_intou20)", type_label=function_definition];
2385 [label="360_ uint8 vundflw1=0;\n2385-new_variable-361-361", method="bug_intou20(uint8 p_intou20)", type_label=new_variable];
2391 [label="361_ vundflw1 = vundflw1 + p_intou20;\n2391-expression_statement-362-362", method="bug_intou20(uint8 p_intou20)", type_label=expression_statement];
2397 [label="363_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n2397-function_definition-364-369", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
2413 [label="364_ require(spender != address(0));\n2413-expression_statement-365-365", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
2422 [label="365_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n2422-expression_statement-366-366", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
2460 [label="367_ return true;\n2460-return-368-368", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
2463 [label="369_ function bug_intou32(uint8 p_intou32) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou32;    \n}\n2463-function_definition-370-373", method="bug_intou32(uint8 p_intou32)", type_label=function_definition];
2471 [label="370_ uint8 vundflw1=0;\n2471-new_variable-371-371", method="bug_intou32(uint8 p_intou32)", type_label=new_variable];
2477 [label="371_ vundflw1 = vundflw1 + p_intou32;\n2477-expression_statement-372-372", method="bug_intou32(uint8 p_intou32)", type_label=expression_statement];
2483 [label="373_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n2483-function_definition-374-379", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
2499 [label="374_ require(spender != address(0));\n2499-expression_statement-375-375", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2508 [label="375_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n2508-expression_statement-376-376", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2546 [label="377_ return true;\n2546-return-378-378", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
2549 [label="379_ mapping(address => uint) balances_intou38;\n2549-new_variable-380-380", method="", type_label=new_variable];
2555 [label="380_ function transfer_intou38(address _to, uint _value) public returns (bool) {\n    require(balances_intou38[msg.sender] - _value >= 0);   \n    balances_intou38[msg.sender] -= _value;   \n    balances_intou38[_to] += _value;   \n    return true;\n  }\n2555-function_definition-381-386", method="transfer_intou38(address _to,uint _value)", type_label=function_definition];
2571 [label="381_ require(balances_intou38[msg.sender] - _value >= 0);\n2571-expression_statement-382-382", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
2584 [label="382_ balances_intou38[msg.sender] -= _value;\n2584-expression_statement-383-383", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
2592 [label="383_ balances_intou38[_to] += _value;\n2592-expression_statement-384-384", method="transfer_intou38(address _to,uint _value)", type_label=expression_statement];
2598 [label="384_ return true;\n2598-return-385-385", method="transfer_intou38(address _to,uint _value)", type_label=return];
2601 [label="386_ function _mint(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n2601-function_definition-387-391", method="_mint(address account,uint256 amount)", type_label=function_definition];
2613 [label="387_ require(amount != 0);\n2613-expression_statement-388-388", method="_mint(address account,uint256 amount)", type_label=expression_statement];
2620 [label="388_ _balances[account] = _balances[account].add(amount);\n2620-expression_statement-389-389", method="_mint(address account,uint256 amount)", type_label=expression_statement];
2643 [label="391_ function bug_intou4(uint8 p_intou4) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou4;    \n}\n2643-function_definition-392-395", method="bug_intou4(uint8 p_intou4)", type_label=function_definition];
2651 [label="392_ uint8 vundflw1=0;\n2651-new_variable-393-393", method="bug_intou4(uint8 p_intou4)", type_label=new_variable];
2657 [label="393_ vundflw1 = vundflw1 + p_intou4;\n2657-expression_statement-394-394", method="bug_intou4(uint8 p_intou4)", type_label=expression_statement];
2663 [label="395_ function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n2663-function_definition-396-398", method="burn(uint256 amount)", type_label=function_definition];
2671 [label="396_ _burn(msg.sender, amount);\n2671-expression_statement-397-397", method="burn(uint256 amount)", type_label=expression_statement];
2680 [label="398_ function bug_intou7() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n2680-function_definition-399-402", method="bug_intou7()", type_label=function_definition];
2684 [label="399_ uint8 vundflw =0;\n2684-new_variable-400-400", method="bug_intou7()", type_label=new_variable];
2690 [label="400_ vundflw = vundflw -10;\n2690-expression_statement-401-401", method="bug_intou7()", type_label=expression_statement];
2696 [label="402_ function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n2696-function_definition-403-409", method="_burn(address account,uint256 amount)", type_label=function_definition];
2708 [label="403_ require(amount != 0);\n2708-expression_statement-404-404", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2715 [label="404_ require(amount <= _balances[account]);\n2715-expression_statement-405-405", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2724 [label="405_ _totalSupply = _totalSupply.sub(amount);\n2724-expression_statement-406-406", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2733 [label="406_ _balances[account] = _balances[account].sub(amount);\n2733-expression_statement-407-407", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2756 [label="409_ function bug_intou23() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n2756-function_definition-410-413", method="bug_intou23()", type_label=function_definition];
2760 [label="410_ uint8 vundflw =0;\n2760-new_variable-411-411", method="bug_intou23()", type_label=new_variable];
2766 [label="411_ vundflw = vundflw -10;\n2766-expression_statement-412-412", method="bug_intou23()", type_label=expression_statement];
2772 [label="413_ function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }\n2772-function_definition-414-418", method="burnFrom(address account,uint256 amount)", type_label=function_definition];
2784 [label="414_ require(amount <= _allowed[account][msg.sender]);\n2784-expression_statement-415-415", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2797 [label="415_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n2797-expression_statement-416-416", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2818 [label="416_ _burn(account, amount);\n2818-expression_statement-417-417", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2825 [label="418_ mapping(address => uint) balances_intou14;\n2825-new_variable-419-419", method="", type_label=new_variable];
2831 [label="419_ function transfer_intou14(address _to, uint _value) public returns (bool) {\n    require(balances_intou14[msg.sender] - _value >= 0);   \n    balances_intou14[msg.sender] -= _value;   \n    balances_intou14[_to] += _value;   \n    return true;\n  }\n2831-function_definition-420-425", method="transfer_intou14(address _to,uint _value)", type_label=function_definition];
2847 [label="420_ require(balances_intou14[msg.sender] - _value >= 0);\n2847-expression_statement-421-421", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
2860 [label="421_ balances_intou14[msg.sender] -= _value;\n2860-expression_statement-422-422", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
2868 [label="422_ balances_intou14[_to] += _value;\n2868-expression_statement-423-423", method="transfer_intou14(address _to,uint _value)", type_label=expression_statement];
2874 [label="423_ return true;\n2874-return-424-424", method="transfer_intou14(address _to,uint _value)", type_label=return];
2877 [label="425_ function NewDanPanAddress(address newDanPanaddress) external onlyOwner {\n    require(newDanPanaddress != address(0));\n      emit DanPanAddressChanged(DanPanAddress, newDanPanaddress);\n      DanPanAddress = newDanPanaddress;\n  }\n2877-function_definition-426-430", method="NewDanPanAddress(address newDanPanaddress)", type_label=function_definition];
2884 [label="425_ onlyOwner\n2884-expression_statement-426-426", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2887 [label="426_ require(newDanPanaddress != address(0));\n2887-expression_statement-427-427", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2902 [label="428_ DanPanAddress = newDanPanaddress;\n2902-expression_statement-429-429", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2906 [label="430_ mapping(address => uint) balances_intou30;\n2906-new_variable-431-431", method="", type_label=new_variable];
2912 [label="431_ function transfer_intou30(address _to, uint _value) public returns (bool) {\n    require(balances_intou30[msg.sender] - _value >= 0);   \n    balances_intou30[msg.sender] -= _value;   \n    balances_intou30[_to] += _value;   \n    return true;\n  }\n2912-function_definition-432-437", method="transfer_intou30(address _to,uint _value)", type_label=function_definition];
2928 [label="432_ require(balances_intou30[msg.sender] - _value >= 0);\n2928-expression_statement-433-433", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
2941 [label="433_ balances_intou30[msg.sender] -= _value;\n2941-expression_statement-434-434", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
2949 [label="434_ balances_intou30[_to] += _value;\n2949-expression_statement-435-435", method="transfer_intou30(address _to,uint _value)", type_label=expression_statement];
2955 [label="435_ return true;\n2955-return-436-436", method="transfer_intou30(address _to,uint _value)", type_label=return];
2958 [label="437_ function NewDanPanPercent(uint256 newDanPanpercent) external onlyOwner {\n      emit DanPanPercentChanged(dpPercent, newDanPanpercent);\n      dpPercent = newDanPanpercent;\n  }\n2958-function_definition-438-441", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=function_definition];
2965 [label="437_ onlyOwner\n2965-expression_statement-438-438", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=expression_statement];
2974 [label="439_ dpPercent = newDanPanpercent;\n2974-expression_statement-440-440", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=expression_statement];
2978 [label="441_ function bug_intou8(uint8 p_intou8) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou8;    \n}\n2978-function_definition-442-445", method="bug_intou8(uint8 p_intou8)", type_label=function_definition];
2986 [label="442_ uint8 vundflw1=0;\n2986-new_variable-443-443", method="bug_intou8(uint8 p_intou8)", type_label=new_variable];
2992 [label="443_ vundflw1 = vundflw1 + p_intou8;\n2992-expression_statement-444-444", method="bug_intou8(uint8 p_intou8)", type_label=expression_statement];
2998 [label="445_ function _isWhitelisted(address _from, address _to) internal view returns (bool) {\n        return whitelistFrom[_from]||whitelistTo[_to];\n}\n2998-function_definition-446-448", method="_isWhitelisted(address _from,address _to)", type_label=function_definition];
3015 [label="446_ return whitelistFrom[_from]||whitelistTo[_to];\n3015-return-447-447", method="_isWhitelisted(address _from,address _to)", type_label=return];
3023 [label="448_ function bug_intou39() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n3023-function_definition-449-452", method="bug_intou39()", type_label=function_definition];
3027 [label="449_ uint8 vundflw =0;\n3027-new_variable-450-450", method="bug_intou39()", type_label=new_variable];
3033 [label="450_ vundflw = vundflw -10;\n3033-expression_statement-451-451", method="bug_intou39()", type_label=expression_statement];
3039 [label="452_ function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner {\n        emit WhitelistTo(_addr, _whitelisted);\n        whitelistTo[_addr] = _whitelisted;\n    }\n3039-function_definition-453-456", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=function_definition];
3050 [label="452_ onlyOwner\n3050-expression_statement-453-453", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=expression_statement];
3059 [label="454_ whitelistTo[_addr] = _whitelisted;\n3059-expression_statement-455-455", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=expression_statement];
3065 [label="456_ function bug_intou36(uint8 p_intou36) public{\n    uint8 vundflw1=0;\n    vundflw1 = vundflw1 + p_intou36;    \n}\n3065-function_definition-457-460", method="bug_intou36(uint8 p_intou36)", type_label=function_definition];
3073 [label="457_ uint8 vundflw1=0;\n3073-new_variable-458-458", method="bug_intou36(uint8 p_intou36)", type_label=new_variable];
3079 [label="458_ vundflw1 = vundflw1 + p_intou36;\n3079-expression_statement-459-459", method="bug_intou36(uint8 p_intou36)", type_label=expression_statement];
3085 [label="460_ function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner {\n        emit WhitelistFrom(_addr, _whitelisted);\n        whitelistFrom[_addr] = _whitelisted;\n}\n3085-function_definition-461-464", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=function_definition];
3096 [label="460_ onlyOwner\n3096-expression_statement-461-461", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=expression_statement];
3105 [label="462_ whitelistFrom[_addr] = _whitelisted;\n3105-expression_statement-463-463", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=expression_statement];
3111 [label="464_ function bug_intou35() public{\n    uint8 vundflw =0;\n    vundflw = vundflw -10;    \n}\n3111-function_definition-465-468", method="bug_intou35()", type_label=function_definition];
3115 [label="465_ uint8 vundflw =0;\n3115-new_variable-466-466", method="bug_intou35()", type_label=new_variable];
3121 [label="466_ vundflw = vundflw -10;\n3121-expression_statement-467-467", method="bug_intou35()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
129 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> 3268  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3268 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 3268  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
227 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
261 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
320 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
328 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
380 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
413 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
517 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
605 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
622 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
668 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
679 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
687 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
708 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
710 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
714 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
740 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
756 -> 762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
784 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
811 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
814 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
827 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
913 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
935 -> 943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1010 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 1025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1025 -> 1031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1040 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 1075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 1086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1086 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1115 -> 1121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 1141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 1147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1170 -> 1178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1190 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1226 -> 1230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1230 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1249 -> 1257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1257 -> 1263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1302 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1318 -> 1322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1333 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1348 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1357 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1365 -> 1381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1381 -> 1394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1394 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1408 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1411 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1424 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1435 -> 1443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1451 -> 1455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1455 -> 1466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1466 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1481 -> 1498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1511 -> 1519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1527 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1557 -> 1570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1570 -> 1581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1581 -> 1597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1597 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1599 -> 1603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1603 -> 1609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1615 -> 1628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1628 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1639 -> 1660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1660 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1669 -> 1677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1685 -> 1689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1689 -> 1700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1700 -> 1706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1715 -> 1731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1731 -> 1742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1742 -> 1751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1751 -> 4873  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4873 -> 1769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1766 -> 4873  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1766 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1769 -> 1775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1775 -> 1781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1781 -> 1787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1787 -> 1804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1804 -> 1815  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1804 -> 4926  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1815 -> 1822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1822 -> 1829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1829 -> 1843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1887 -> 1904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1927 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1937 -> 1945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1953 -> 1957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1957 -> 1968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1968 -> 1974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1983 -> 1997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1997 -> 2013  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1997 -> 5119  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5119 -> 2024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2010 -> 1997  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2013 -> 2010  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2024 -> 2028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2028 -> 2034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2040 -> 2056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2056 -> 2065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2085 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2094 -> 2110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2110 -> 2123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2123 -> 2131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2131 -> 2137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2137 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2140 -> 2160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2160 -> 2169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2169 -> 2182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2182 -> 2191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2191 -> 5313  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5313 -> 2207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2204 -> 5313  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2204 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2207 -> 2213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2213 -> 2219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2219 -> 2225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2225 -> 2238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2238 -> 2247  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2238 -> 5360  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2247 -> 2254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2254 -> 2261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2261 -> 2275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2315 -> 2332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2332 -> 2345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2374 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2377 -> 2385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2385 -> 2391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2397 -> 2413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2413 -> 2422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2460 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2463 -> 2471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2471 -> 2477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2483 -> 2499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2499 -> 2508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2546 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2555 -> 2571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2571 -> 2584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2584 -> 2592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2592 -> 2598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2598 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2601 -> 2613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2613 -> 2620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2643 -> 2651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2651 -> 2657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2663 -> 2671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2680 -> 2684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2684 -> 2690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2696 -> 2708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2708 -> 2715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2715 -> 2724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2724 -> 2733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2756 -> 2760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2760 -> 2766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2772 -> 2784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2784 -> 2797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2797 -> 2818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2831 -> 2847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2847 -> 2860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2860 -> 2868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2868 -> 2874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2874 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2877 -> 2887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2912 -> 2928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2928 -> 2941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2941 -> 2949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2949 -> 2955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2955 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2958 -> 2974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2978 -> 2986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2986 -> 2992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2998 -> 3015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3015 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3023 -> 3027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3027 -> 3033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3039 -> 3059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3065 -> 3073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3073 -> 3079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3085 -> 3105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3111 -> 3115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3115 -> 3121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
