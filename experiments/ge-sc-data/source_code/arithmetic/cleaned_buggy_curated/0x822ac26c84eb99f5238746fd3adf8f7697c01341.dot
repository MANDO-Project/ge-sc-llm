digraph  {
12 [label="2_ mul\n12-function_definition-3-10", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", type_label=if];
899 [label="3_ end_if", type_label=end_if];
34 [label="4_ return 0;\n34-return-5-5", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", type_label=new_variable];
44 [label="7_ require(c / a == b);\n44-expression_statement-8-8", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", type_label=return];
55 [label="10_ div\n55-function_definition-11-15", type_label=function_definition];
72 [label="11_ require(b > 0);\n72-expression_statement-12-12", type_label=expression_statement];
79 [label="12_ uint256 c = a / b;\n79-new_variable-13-13", type_label=new_variable];
87 [label="13_ return c;\n87-return-14-14", type_label=return];
89 [label="15_ sub\n89-function_definition-16-20", type_label=function_definition];
106 [label="16_ require(b <= a);\n106-expression_statement-17-17", type_label=expression_statement];
113 [label="17_ uint256 c = a - b;\n113-new_variable-18-18", type_label=new_variable];
121 [label="18_ return c;\n121-return-19-19", type_label=return];
123 [label="20_ add\n123-function_definition-21-25", type_label=function_definition];
140 [label="21_ uint256 c = a + b;\n140-new_variable-22-22", type_label=new_variable];
148 [label="22_ require(c >= a);\n148-expression_statement-23-23", type_label=expression_statement];
155 [label="23_ return c;\n155-return-24-24", type_label=return];
160 [label="27_ address internal _owner;\n160-new_variable-28-28", type_label=new_variable];
165 [label="28_ address private _pendingOwner;\n165-new_variable-29-29", type_label=new_variable];
180 [label="30_ owner\n180-function_definition-31-33", type_label=function_definition];
189 [label="31_ return _owner;\n189-return-32-32", type_label=return];
191 [label="33_ modifier onlyOwner() {\n        require(isOwner(), \"The caller must be owner\");\n        _;\n    }\n191-expression_statement-34-37", type_label=expression_statement];
194 [label="34_ require(isOwner(), \"The caller must be owner\");\n194-expression_statement-35-35", type_label=expression_statement];
203 [label="35_ _;\n203-expression_statement-36-36", type_label=expression_statement];
205 [label="37_ isOwner\n205-function_definition-38-40", type_label=function_definition];
214 [label="38_ return msg.sender == _owner;\n214-return-39-39", type_label=return];
220 [label="40_ _transferOwnership\n220-function_definition-41-44", type_label=function_definition];
228 [label="41_ require(newOwner != address(0), \"Cannot transfer control of the contract to the zero address\");\n228-expression_statement-42-42", type_label=expression_statement];
240 [label="42_ _pendingOwner = newOwner;\n240-expression_statement-43-43", type_label=expression_statement];
244 [label="44_ receiveOwnership\n244-function_definition-45-50", type_label=function_definition];
248 [label="45_ require(msg.sender == _pendingOwner);\n248-expression_statement-46-46", type_label=expression_statement];
263 [label="47_ _owner = _pendingOwner;\n263-expression_statement-48-48", type_label=expression_statement];
267 [label="48_ _pendingOwner = address(0);\n267-expression_statement-49-49", type_label=expression_statement];
279 [label="52_ address private _operator;\n279-new_variable-53-53", type_label=new_variable];
294 [label="54_ operator\n294-function_definition-55-57", type_label=function_definition];
303 [label="55_ return _operator;\n303-return-56-56", type_label=return];
305 [label="57_ modifier onlyOperator() {\n        require(msg.sender == _operator, \"msg.sender should be operator\");\n        _;\n    }\n305-expression_statement-58-61", type_label=expression_statement];
308 [label="58_ require(msg.sender == _operator, \"msg.sender should be operator\");\n308-expression_statement-59-59", type_label=expression_statement];
320 [label="59_ _;\n320-expression_statement-60-60", type_label=expression_statement];
322 [label="61_ isContract\n322-function_definition-62-66", type_label=function_definition];
335 [label="62_ uint size;\n335-new_variable-63-63", type_label=new_variable];
350 [label="64_ return size > 0;\n350-return-65-65", type_label=return];
354 [label="66_ updateOperator\n354-function_definition-67-72", type_label=function_definition];
361 [label="66_ onlyOwner\n361-expression_statement-67-67", type_label=expression_statement];
364 [label="67_ require(_newOperator != address(0), \"Cannot change the newOperator to the zero address\");\n364-expression_statement-68-68", type_label=expression_statement];
376 [label="68_ require(isContract(_newOperator), \"New operator must be contract address\");\n376-expression_statement-69-69", type_label=expression_statement];
393 [label="70_ _operator = _newOperator;\n393-expression_statement-71-71", type_label=expression_statement];
408 [label="75_ bool private paused = false;\n408-new_variable-76-76", type_label=new_variable];
415 [label="76_ mapping (address => uint256) private balances;\n415-new_variable-77-77", type_label=new_variable];
422 [label="77_ mapping (address => mapping (address => uint256)) private allowances;\n422-new_variable-78-78", type_label=new_variable];
431 [label="78_ mapping (address=>bool) private blackList;\n431-new_variable-79-79", type_label=new_variable];
438 [label="79_ string private constant name = \"Digital USD\";\n438-new_variable-80-80", type_label=new_variable];
445 [label="80_ string private constant symbol = \"DUSD\";\n445-new_variable-81-81", type_label=new_variable];
452 [label="81_ uint8 private constant decimals = 18;\n452-new_variable-82-82", type_label=new_variable];
458 [label="82_ uint256 private totalSupply;\n458-new_variable-83-83", type_label=new_variable];
465 [label="84_ _owner = 0xfe30e619cc2915C905Ca45C1BA8311109A3cBdB1;\n465-expression_statement-85-85", type_label=expression_statement];
469 [label="86_ getTokenName\n469-function_definition-87-89", type_label=function_definition];
473 [label="86_ onlyOperator\n473-expression_statement-87-87", type_label=expression_statement];
480 [label="87_ return name;\n480-return-88-88", type_label=return];
482 [label="89_ getSymbol\n482-function_definition-90-92", type_label=function_definition];
486 [label="89_ onlyOperator\n486-expression_statement-90-90", type_label=expression_statement];
493 [label="90_ return symbol;\n493-return-91-91", type_label=return];
495 [label="92_ getDecimals\n495-function_definition-93-95", type_label=function_definition];
499 [label="92_ onlyOperator\n499-expression_statement-93-93", type_label=expression_statement];
506 [label="93_ return decimals;\n506-return-94-94", type_label=return];
508 [label="95_ getTotalSupply\n508-function_definition-96-98", type_label=function_definition];
512 [label="95_ onlyOperator\n512-expression_statement-96-96", type_label=expression_statement];
519 [label="96_ return totalSupply;\n519-return-97-97", type_label=return];
521 [label="98_ getBalance\n521-function_definition-99-101", type_label=function_definition];
529 [label="98_ onlyOperator\n529-expression_statement-99-99", type_label=expression_statement];
536 [label="99_ return balances[_holder];\n536-return-100-100", type_label=return];
540 [label="101_ addBalance\n540-function_definition-102-104", type_label=function_definition];
551 [label="101_ onlyOperator\n551-expression_statement-102-102", type_label=expression_statement];
554 [label="102_ balances[_holder] = balances[_holder].add(_value);\n554-expression_statement-103-103", type_label=expression_statement];
567 [label="104_ subBalance\n567-function_definition-105-107", type_label=function_definition];
578 [label="104_ onlyOperator\n578-expression_statement-105-105", type_label=expression_statement];
581 [label="105_ balances[_holder] = balances[_holder].sub(_value);\n581-expression_statement-106-106", type_label=expression_statement];
594 [label="107_ setBalance\n594-function_definition-108-110", type_label=function_definition];
605 [label="107_ onlyOperator\n605-expression_statement-108-108", type_label=expression_statement];
608 [label="108_ balances[_holder] = _value;\n608-expression_statement-109-109", type_label=expression_statement];
614 [label="110_ getAllowance\n614-function_definition-111-113", type_label=function_definition];
626 [label="110_ onlyOperator\n626-expression_statement-111-111", type_label=expression_statement];
633 [label="111_ return allowances[_holder][_spender];\n633-return-112-112", type_label=return];
639 [label="113_ addAllowance\n639-function_definition-114-116", type_label=function_definition];
654 [label="113_ onlyOperator\n654-expression_statement-114-114", type_label=expression_statement];
657 [label="114_ allowances[_holder][_spender] = allowances[_holder][_spender].add(_value);\n657-expression_statement-115-115", type_label=expression_statement];
674 [label="116_ subAllowance\n674-function_definition-117-119", type_label=function_definition];
689 [label="116_ onlyOperator\n689-expression_statement-117-117", type_label=expression_statement];
692 [label="117_ allowances[_holder][_spender] = allowances[_holder][_spender].sub(_value);\n692-expression_statement-118-118", type_label=expression_statement];
709 [label="119_ setAllowance\n709-function_definition-120-122", type_label=function_definition];
724 [label="119_ onlyOperator\n724-expression_statement-120-120", type_label=expression_statement];
727 [label="120_ allowances[_holder][_spender] = _value;\n727-expression_statement-121-121", type_label=expression_statement];
735 [label="122_ addTotalSupply\n735-function_definition-123-125", type_label=function_definition];
742 [label="122_ onlyOperator\n742-expression_statement-123-123", type_label=expression_statement];
745 [label="123_ totalSupply = totalSupply.add(_value);\n745-expression_statement-124-124", type_label=expression_statement];
754 [label="125_ subTotalSupply\n754-function_definition-126-128", type_label=function_definition];
761 [label="125_ onlyOperator\n761-expression_statement-126-126", type_label=expression_statement];
764 [label="126_ totalSupply = totalSupply.sub(_value);\n764-expression_statement-127-127", type_label=expression_statement];
773 [label="128_ setTotalSupply\n773-function_definition-129-131", type_label=function_definition];
780 [label="128_ onlyOperator\n780-expression_statement-129-129", type_label=expression_statement];
783 [label="129_ totalSupply = _value;\n783-expression_statement-130-130", type_label=expression_statement];
787 [label="131_ addBlackList\n787-function_definition-132-134", type_label=function_definition];
794 [label="131_ onlyOperator\n794-expression_statement-132-132", type_label=expression_statement];
797 [label="132_ blackList[user] = true;\n797-expression_statement-133-133", type_label=expression_statement];
804 [label="134_ removeBlackList\n804-function_definition-135-137", type_label=function_definition];
811 [label="134_ onlyOperator\n811-expression_statement-135-135", type_label=expression_statement];
814 [label="135_ blackList[user] = false;\n814-expression_statement-136-136", type_label=expression_statement];
821 [label="137_ isBlackList\n821-function_definition-138-140", type_label=function_definition];
829 [label="137_ onlyOperator\n829-expression_statement-138-138", type_label=expression_statement];
836 [label="138_ return blackList[user];\n836-return-139-139", type_label=return];
840 [label="140_ getPaused\n840-function_definition-141-143", type_label=function_definition];
844 [label="140_ onlyOperator\n844-expression_statement-141-141", type_label=expression_statement];
851 [label="141_ return paused;\n851-return-142-142", type_label=return];
853 [label="143_ pause\n853-function_definition-144-146", type_label=function_definition];
856 [label="143_ onlyOperator\n856-expression_statement-144-144", type_label=expression_statement];
859 [label="144_ paused = true;\n859-expression_statement-145-145", type_label=expression_statement];
864 [label="146_ unpause\n864-function_definition-147-149", type_label=function_definition];
867 [label="146_ onlyOperator\n867-expression_statement-147-147", type_label=expression_statement];
870 [label="147_ paused = false;\n870-expression_statement-148-148", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 899  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
899 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 899  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 79  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 87  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
89 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
123 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
148 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
160 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
194 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
220 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
308 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
354 -> 364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
431 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
438 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
482 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
495 -> 506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
506 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
508 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
521 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
540 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
633 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
639 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
754 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
804 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
840 -> 851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
853 -> 859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
864 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
