digraph  {
13 [label="2_ address payable winner_TOD27;\n13-new_variable-3-3", method="", type_label=new_variable];
17 [label="3_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n17-function_definition-4-8", method="play_TOD27(bytes32 guess)", type_label=function_definition];
25 [label="4_ if\n25-if-5-7", method="play_TOD27(bytes32 guess)", type_label=if];
1936 [label="4_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
47 [label="5_ winner_TOD27 = msg.sender;\n47-expression_statement-6-6", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
53 [label="8_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n53-function_definition-9-11", method="getReward_TOD27()", type_label=function_definition];
58 [label="9_ winner_TOD27.transfer(msg.value);\n58-expression_statement-10-10", method="getReward_TOD27()", type_label=expression_statement];
81 [label="12_ address payable winner_TOD31;\n81-new_variable-13-13", method="", type_label=new_variable];
85 [label="13_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n85-function_definition-14-18", method="play_TOD31(bytes32 guess)", type_label=function_definition];
93 [label="14_ if\n93-if-15-17", method="play_TOD31(bytes32 guess)", type_label=if];
2004 [label="14_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
115 [label="15_ winner_TOD31 = msg.sender;\n115-expression_statement-16-16", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
121 [label="18_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n121-function_definition-19-21", method="getReward_TOD31()", type_label=function_definition];
126 [label="19_ winner_TOD31.transfer(msg.value);\n126-expression_statement-20-20", method="getReward_TOD31()", type_label=expression_statement];
149 [label="22_ address payable winner_TOD13;\n149-new_variable-23-23", method="", type_label=new_variable];
153 [label="23_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n153-function_definition-24-28", method="play_TOD13(bytes32 guess)", type_label=function_definition];
161 [label="24_ if\n161-if-25-27", method="play_TOD13(bytes32 guess)", type_label=if];
2072 [label="24_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
183 [label="25_ winner_TOD13 = msg.sender;\n183-expression_statement-26-26", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
189 [label="28_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n189-function_definition-29-31", method="getReward_TOD13()", type_label=function_definition];
194 [label="29_ winner_TOD13.transfer(msg.value);\n194-expression_statement-30-30", method="getReward_TOD13()", type_label=expression_statement];
217 [label="32_ address payable winner_TOD25;\n217-new_variable-33-33", method="", type_label=new_variable];
221 [label="33_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n221-function_definition-34-38", method="play_TOD25(bytes32 guess)", type_label=function_definition];
229 [label="34_ if\n229-if-35-37", method="play_TOD25(bytes32 guess)", type_label=if];
2140 [label="34_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
251 [label="35_ winner_TOD25 = msg.sender;\n251-expression_statement-36-36", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
257 [label="38_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n257-function_definition-39-41", method="getReward_TOD25()", type_label=function_definition];
262 [label="39_ winner_TOD25.transfer(msg.value);\n262-expression_statement-40-40", method="getReward_TOD25()", type_label=expression_statement];
271 [label="41_ uint256 public totalSupply;\n271-new_variable-42-42", method="", type_label=new_variable];
276 [label="42_ address payable winner_TOD19;\n276-new_variable-43-43", method="", type_label=new_variable];
280 [label="43_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n280-function_definition-44-48", method="play_TOD19(bytes32 guess)", type_label=function_definition];
288 [label="44_ if\n288-if-45-47", method="play_TOD19(bytes32 guess)", type_label=if];
2199 [label="44_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
310 [label="45_ winner_TOD19 = msg.sender;\n310-expression_statement-46-46", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
316 [label="48_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n316-function_definition-49-51", method="getReward_TOD19()", type_label=function_definition];
321 [label="49_ winner_TOD19.transfer(msg.value);\n321-expression_statement-50-50", method="getReward_TOD19()", type_label=expression_statement];
330 [label="51_ string public name;\n330-new_variable-52-52", method="", type_label=new_variable];
335 [label="52_ bool claimed_TOD26 = false;\n335-new_variable-53-53", method="", type_label=new_variable];
341 [label="53_ address payable owner_TOD26;\n341-new_variable-54-54", method="", type_label=new_variable];
345 [label="54_ uint256 reward_TOD26;\n345-new_variable-55-55", method="", type_label=new_variable];
349 [label="55_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n349-function_definition-56-61", method="setReward_TOD26()", type_label=function_definition];
354 [label="56_ require (!claimed_TOD26);\n354-expression_statement-57-57", method="setReward_TOD26()", type_label=expression_statement];
360 [label="57_ require(msg.sender == owner_TOD26);\n360-expression_statement-58-58", method="setReward_TOD26()", type_label=expression_statement];
369 [label="58_ owner_TOD26.transfer(reward_TOD26);\n369-expression_statement-59-59", method="setReward_TOD26()", type_label=expression_statement];
376 [label="59_ reward_TOD26 = msg.value;\n376-expression_statement-60-60", method="setReward_TOD26()", type_label=expression_statement];
382 [label="61_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n382-function_definition-62-67", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
390 [label="62_ require (!claimed_TOD26);\n390-expression_statement-63-63", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
396 [label="63_ require(submission < 10);\n396-expression_statement-64-64", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
403 [label="64_ msg.sender.transfer(reward_TOD26);\n403-expression_statement-65-65", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
412 [label="65_ claimed_TOD26 = true;\n412-expression_statement-66-66", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
417 [label="67_ uint8 public decimals;\n417-new_variable-68-68", method="", type_label=new_variable];
422 [label="68_ bool claimed_TOD20 = false;\n422-new_variable-69-69", method="", type_label=new_variable];
428 [label="69_ address payable owner_TOD20;\n428-new_variable-70-70", method="", type_label=new_variable];
432 [label="70_ uint256 reward_TOD20;\n432-new_variable-71-71", method="", type_label=new_variable];
436 [label="71_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n436-function_definition-72-77", method="setReward_TOD20()", type_label=function_definition];
441 [label="72_ require (!claimed_TOD20);\n441-expression_statement-73-73", method="setReward_TOD20()", type_label=expression_statement];
447 [label="73_ require(msg.sender == owner_TOD20);\n447-expression_statement-74-74", method="setReward_TOD20()", type_label=expression_statement];
456 [label="74_ owner_TOD20.transfer(reward_TOD20);\n456-expression_statement-75-75", method="setReward_TOD20()", type_label=expression_statement];
463 [label="75_ reward_TOD20 = msg.value;\n463-expression_statement-76-76", method="setReward_TOD20()", type_label=expression_statement];
469 [label="77_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n469-function_definition-78-83", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
477 [label="78_ require (!claimed_TOD20);\n477-expression_statement-79-79", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
483 [label="79_ require(submission < 10);\n483-expression_statement-80-80", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
490 [label="80_ msg.sender.transfer(reward_TOD20);\n490-expression_statement-81-81", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
499 [label="81_ claimed_TOD20 = true;\n499-expression_statement-82-82", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
504 [label="83_ string public symbol;\n504-new_variable-84-84", method="", type_label=new_variable];
509 [label="84_ bool claimed_TOD32 = false;\n509-new_variable-85-85", method="", type_label=new_variable];
515 [label="85_ address payable owner_TOD32;\n515-new_variable-86-86", method="", type_label=new_variable];
519 [label="86_ uint256 reward_TOD32;\n519-new_variable-87-87", method="", type_label=new_variable];
523 [label="87_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n523-function_definition-88-93", method="setReward_TOD32()", type_label=function_definition];
528 [label="88_ require (!claimed_TOD32);\n528-expression_statement-89-89", method="setReward_TOD32()", type_label=expression_statement];
534 [label="89_ require(msg.sender == owner_TOD32);\n534-expression_statement-90-90", method="setReward_TOD32()", type_label=expression_statement];
543 [label="90_ owner_TOD32.transfer(reward_TOD32);\n543-expression_statement-91-91", method="setReward_TOD32()", type_label=expression_statement];
550 [label="91_ reward_TOD32 = msg.value;\n550-expression_statement-92-92", method="setReward_TOD32()", type_label=expression_statement];
556 [label="93_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n556-function_definition-94-99", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
564 [label="94_ require (!claimed_TOD32);\n564-expression_statement-95-95", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
570 [label="95_ require(submission < 10);\n570-expression_statement-96-96", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
577 [label="96_ msg.sender.transfer(reward_TOD32);\n577-expression_statement-97-97", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
586 [label="97_ claimed_TOD32 = true;\n586-expression_statement-98-98", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
591 [label="99_ address public owner;\n591-new_variable-100-100", method="", type_label=new_variable];
596 [label="100_ bool claimed_TOD38 = false;\n596-new_variable-101-101", method="", type_label=new_variable];
602 [label="101_ address payable owner_TOD38;\n602-new_variable-102-102", method="", type_label=new_variable];
606 [label="102_ uint256 reward_TOD38;\n606-new_variable-103-103", method="", type_label=new_variable];
610 [label="103_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n610-function_definition-104-109", method="setReward_TOD38()", type_label=function_definition];
615 [label="104_ require (!claimed_TOD38);\n615-expression_statement-105-105", method="setReward_TOD38()", type_label=expression_statement];
621 [label="105_ require(msg.sender == owner_TOD38);\n621-expression_statement-106-106", method="setReward_TOD38()", type_label=expression_statement];
630 [label="106_ owner_TOD38.transfer(reward_TOD38);\n630-expression_statement-107-107", method="setReward_TOD38()", type_label=expression_statement];
637 [label="107_ reward_TOD38 = msg.value;\n637-expression_statement-108-108", method="setReward_TOD38()", type_label=expression_statement];
643 [label="109_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n643-function_definition-110-115", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
651 [label="110_ require (!claimed_TOD38);\n651-expression_statement-111-111", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
657 [label="111_ require(submission < 10);\n657-expression_statement-112-112", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
664 [label="112_ msg.sender.transfer(reward_TOD38);\n664-expression_statement-113-113", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
673 [label="113_ claimed_TOD38 = true;\n673-expression_statement-114-114", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
678 [label="115_ mapping (address => uint256) public balances;\n678-new_variable-116-116", method="", type_label=new_variable];
685 [label="116_ bool claimed_TOD4 = false;\n685-new_variable-117-117", method="", type_label=new_variable];
691 [label="117_ address payable owner_TOD4;\n691-new_variable-118-118", method="", type_label=new_variable];
695 [label="118_ uint256 reward_TOD4;\n695-new_variable-119-119", method="", type_label=new_variable];
699 [label="119_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n699-function_definition-120-125", method="setReward_TOD4()", type_label=function_definition];
704 [label="120_ require (!claimed_TOD4);\n704-expression_statement-121-121", method="setReward_TOD4()", type_label=expression_statement];
710 [label="121_ require(msg.sender == owner_TOD4);\n710-expression_statement-122-122", method="setReward_TOD4()", type_label=expression_statement];
719 [label="122_ owner_TOD4.transfer(reward_TOD4);\n719-expression_statement-123-123", method="setReward_TOD4()", type_label=expression_statement];
726 [label="123_ reward_TOD4 = msg.value;\n726-expression_statement-124-124", method="setReward_TOD4()", type_label=expression_statement];
732 [label="125_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n732-function_definition-126-131", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
740 [label="126_ require (!claimed_TOD4);\n740-expression_statement-127-127", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
746 [label="127_ require(submission < 10);\n746-expression_statement-128-128", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
753 [label="128_ msg.sender.transfer(reward_TOD4);\n753-expression_statement-129-129", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
762 [label="129_ claimed_TOD4 = true;\n762-expression_statement-130-130", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
767 [label="131_ mapping (address => mapping (address => uint256)) public allowed;\n767-new_variable-132-132", method="", type_label=new_variable];
776 [label="132_ address payable winner_TOD7;\n776-new_variable-133-133", method="", type_label=new_variable];
780 [label="133_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n780-function_definition-134-138", method="play_TOD7(bytes32 guess)", type_label=function_definition];
788 [label="134_ if\n788-if-135-137", method="play_TOD7(bytes32 guess)", type_label=if];
2699 [label="134_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
810 [label="135_ winner_TOD7 = msg.sender;\n810-expression_statement-136-136", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
816 [label="138_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n816-function_definition-139-141", method="getReward_TOD7()", type_label=function_definition];
821 [label="139_ winner_TOD7.transfer(msg.value);\n821-expression_statement-140-140", method="getReward_TOD7()", type_label=expression_statement];
830 [label="141_ bool isTransPaused=false;\n830-new_variable-142-142", method="", type_label=new_variable];
846 [label="146_ owner=msg.sender;\n846-expression_statement-147-147", method="", type_label=expression_statement];
852 [label="147_ if__initialAmount<=0\n852-if-148-154", method="", type_label=if];
2763 [label="147_ end_if", method="", type_label=end_if];
857 [label="148_ totalSupply = 100000000000000000;\n857-expression_statement-149-149", method="", type_label=expression_statement];
861 [label="149_ balances[owner]=totalSupply;\n861-expression_statement-150-150", method="", type_label=expression_statement];
868 [label="151_ totalSupply = _initialAmount;\n868-expression_statement-152-152", method="", type_label=expression_statement];
872 [label="152_ balances[owner]=_initialAmount;\n872-expression_statement-153-153", method="", type_label=expression_statement];
878 [label="154_ if__decimalUnits<=0\n878-if-155-159", method="", type_label=if];
2789 [label="154_ end_if", method="", type_label=end_if];
883 [label="155_ decimals=2;\n883-expression_statement-156-156", method="", type_label=expression_statement];
888 [label="157_ decimals = _decimalUnits;\n888-expression_statement-158-158", method="", type_label=expression_statement];
892 [label="159_ name = \"CareerOn Chain Token\";\n892-expression_statement-160-160", method="", type_label=expression_statement];
897 [label="160_ symbol = \"COT\";\n897-expression_statement-161-161", method="", type_label=expression_statement];
902 [label="162_ address payable winner_TOD23;\n902-new_variable-163-163", method="", type_label=new_variable];
906 [label="163_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n906-function_definition-164-168", method="play_TOD23(bytes32 guess)", type_label=function_definition];
914 [label="164_ if\n914-if-165-167", method="play_TOD23(bytes32 guess)", type_label=if];
2825 [label="164_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
936 [label="165_ winner_TOD23 = msg.sender;\n936-expression_statement-166-166", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
942 [label="168_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n942-function_definition-169-171", method="getReward_TOD23()", type_label=function_definition];
947 [label="169_ winner_TOD23.transfer(msg.value);\n947-expression_statement-170-170", method="getReward_TOD23()", type_label=expression_statement];
956 [label="171_ function transfer(\n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n        balances[msg.sender] -= _value; \n        balances[_to] += _value; \n		if(msg.sender==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(msg.sender, _to, _value); \n		}\n        return true;\n    }\n956-function_definition-172-189", method="transfer(address _to,uint256 _value)", type_label=function_definition];
973 [label="175_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n973-expression_statement-176-180", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
1003 [label="180_ balances[msg.sender] -= _value;\n1003-expression_statement-181-181", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
1011 [label="181_ balances[_to] += _value;\n1011-expression_statement-182-182", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
1017 [label="182_ if_msg.sender==owner\n1017-if-183-187", method="transfer(address _to,uint256 _value)", type_label=if];
2928 [label="182_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
1045 [label="187_ return true;\n1045-return-188-188", method="transfer(address _to,uint256 _value)", type_label=return];
1048 [label="189_ bool claimed_TOD14 = false;\n1048-new_variable-190-190", method="", type_label=new_variable];
1054 [label="190_ address payable owner_TOD14;\n1054-new_variable-191-191", method="", type_label=new_variable];
1058 [label="191_ uint256 reward_TOD14;\n1058-new_variable-192-192", method="", type_label=new_variable];
1062 [label="192_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n1062-function_definition-193-198", method="setReward_TOD14()", type_label=function_definition];
1067 [label="193_ require (!claimed_TOD14);\n1067-expression_statement-194-194", method="setReward_TOD14()", type_label=expression_statement];
1073 [label="194_ require(msg.sender == owner_TOD14);\n1073-expression_statement-195-195", method="setReward_TOD14()", type_label=expression_statement];
1082 [label="195_ owner_TOD14.transfer(reward_TOD14);\n1082-expression_statement-196-196", method="setReward_TOD14()", type_label=expression_statement];
1089 [label="196_ reward_TOD14 = msg.value;\n1089-expression_statement-197-197", method="setReward_TOD14()", type_label=expression_statement];
1095 [label="198_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n1095-function_definition-199-204", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
1103 [label="199_ require (!claimed_TOD14);\n1103-expression_statement-200-200", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1109 [label="200_ require(submission < 10);\n1109-expression_statement-201-201", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1116 [label="201_ msg.sender.transfer(reward_TOD14);\n1116-expression_statement-202-202", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1125 [label="202_ claimed_TOD14 = true;\n1125-expression_statement-203-203", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1130 [label="204_ function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n        balances[_to] += _value; \n        balances[_from] -= _value;  \n        allowed[_from][msg.sender] -= _value; \n        if(_from==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(_from, _to, _value); \n		}\n        return true;\n    }\n1130-function_definition-205-225", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
1151 [label="209_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n1151-expression_statement-210-215", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1191 [label="215_ balances[_to] += _value;\n1191-expression_statement-216-216", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1197 [label="216_ balances[_from] -= _value;\n1197-expression_statement-217-217", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1203 [label="217_ allowed[_from][msg.sender] -= _value;\n1203-expression_statement-218-218", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1213 [label="218_ if__from==owner\n1213-if-219-223", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
3124 [label="218_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
1237 [label="223_ return true;\n1237-return-224-224", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
1240 [label="225_ bool claimed_TOD30 = false;\n1240-new_variable-226-226", method="", type_label=new_variable];
1246 [label="226_ address payable owner_TOD30;\n1246-new_variable-227-227", method="", type_label=new_variable];
1250 [label="227_ uint256 reward_TOD30;\n1250-new_variable-228-228", method="", type_label=new_variable];
1254 [label="228_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n1254-function_definition-229-234", method="setReward_TOD30()", type_label=function_definition];
1259 [label="229_ require (!claimed_TOD30);\n1259-expression_statement-230-230", method="setReward_TOD30()", type_label=expression_statement];
1265 [label="230_ require(msg.sender == owner_TOD30);\n1265-expression_statement-231-231", method="setReward_TOD30()", type_label=expression_statement];
1274 [label="231_ owner_TOD30.transfer(reward_TOD30);\n1274-expression_statement-232-232", method="setReward_TOD30()", type_label=expression_statement];
1281 [label="232_ reward_TOD30 = msg.value;\n1281-expression_statement-233-233", method="setReward_TOD30()", type_label=expression_statement];
1287 [label="234_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n1287-function_definition-235-240", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
1295 [label="235_ require (!claimed_TOD30);\n1295-expression_statement-236-236", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1301 [label="236_ require(submission < 10);\n1301-expression_statement-237-237", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1308 [label="237_ msg.sender.transfer(reward_TOD30);\n1308-expression_statement-238-238", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1317 [label="238_ claimed_TOD30 = true;\n1317-expression_statement-239-239", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1322 [label="240_ function approve(address _spender, uint256 _value) public returns (bool success) \n    { \n        assert(msg.sender!=_spender && _value>0);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n1322-function_definition-241-247", method="approve(address _spender,uint256 _value)", type_label=function_definition];
1339 [label="242_ assert(msg.sender!=_spender && _value>0);\n1339-expression_statement-243-243", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
1352 [label="243_ allowed[msg.sender][_spender] = _value;\n1352-expression_statement-244-244", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
1372 [label="245_ return true;\n1372-return-246-246", method="approve(address _spender,uint256 _value)", type_label=return];
1375 [label="247_ bool claimed_TOD8 = false;\n1375-new_variable-248-248", method="", type_label=new_variable];
1381 [label="248_ address payable owner_TOD8;\n1381-new_variable-249-249", method="", type_label=new_variable];
1385 [label="249_ uint256 reward_TOD8;\n1385-new_variable-250-250", method="", type_label=new_variable];
1389 [label="250_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n1389-function_definition-251-256", method="setReward_TOD8()", type_label=function_definition];
1394 [label="251_ require (!claimed_TOD8);\n1394-expression_statement-252-252", method="setReward_TOD8()", type_label=expression_statement];
1400 [label="252_ require(msg.sender == owner_TOD8);\n1400-expression_statement-253-253", method="setReward_TOD8()", type_label=expression_statement];
1409 [label="253_ owner_TOD8.transfer(reward_TOD8);\n1409-expression_statement-254-254", method="setReward_TOD8()", type_label=expression_statement];
1416 [label="254_ reward_TOD8 = msg.value;\n1416-expression_statement-255-255", method="setReward_TOD8()", type_label=expression_statement];
1422 [label="256_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n1422-function_definition-257-262", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
1430 [label="257_ require (!claimed_TOD8);\n1430-expression_statement-258-258", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1436 [label="258_ require(submission < 10);\n1436-expression_statement-259-259", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1443 [label="259_ msg.sender.transfer(reward_TOD8);\n1443-expression_statement-260-260", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1452 [label="260_ claimed_TOD8 = true;\n1452-expression_statement-261-261", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1457 [label="262_ function allowance(\n        address _owner, \n        address _spender) public view returns (uint256 remaining) \n    {\n        return allowed[_owner][_spender]; \n    }\n1457-function_definition-263-268", method="allowance(address _owner,address _spender)", type_label=function_definition];
1475 [label="266_ return allowed[_owner][_spender];\n1475-return-267-267", method="allowance(address _owner,address _spender)", type_label=return];
1481 [label="268_ address payable winner_TOD39;\n1481-new_variable-269-269", method="", type_label=new_variable];
1485 [label="269_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n1485-function_definition-270-274", method="play_TOD39(bytes32 guess)", type_label=function_definition];
1493 [label="270_ if\n1493-if-271-273", method="play_TOD39(bytes32 guess)", type_label=if];
3404 [label="270_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
1515 [label="271_ winner_TOD39 = msg.sender;\n1515-expression_statement-272-272", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
1521 [label="274_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n1521-function_definition-275-277", method="getReward_TOD39()", type_label=function_definition];
1526 [label="275_ winner_TOD39.transfer(msg.value);\n1526-expression_statement-276-276", method="getReward_TOD39()", type_label=expression_statement];
1535 [label="277_ function changeOwner(address newOwner) public{\n        assert(msg.sender==owner && msg.sender!=newOwner);\n        balances[newOwner]=balances[owner];\n        balances[owner]=0;\n        owner=newOwner;\n        emit OwnerChang(msg.sender,newOwner,balances[owner]); \n    }\n1535-function_definition-278-284", method="changeOwner(address newOwner)", type_label=function_definition];
1543 [label="278_ assert(msg.sender==owner && msg.sender!=newOwner);\n1543-expression_statement-279-279", method="changeOwner(address newOwner)", type_label=expression_statement];
1558 [label="279_ balances[newOwner]=balances[owner];\n1558-expression_statement-280-280", method="changeOwner(address newOwner)", type_label=expression_statement];
1566 [label="280_ balances[owner]=0;\n1566-expression_statement-281-281", method="changeOwner(address newOwner)", type_label=expression_statement];
1572 [label="281_ owner=newOwner;\n1572-expression_statement-282-282", method="changeOwner(address newOwner)", type_label=expression_statement];
1588 [label="284_ bool claimed_TOD36 = false;\n1588-new_variable-285-285", method="", type_label=new_variable];
1594 [label="285_ address payable owner_TOD36;\n1594-new_variable-286-286", method="", type_label=new_variable];
1598 [label="286_ uint256 reward_TOD36;\n1598-new_variable-287-287", method="", type_label=new_variable];
1602 [label="287_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n1602-function_definition-288-293", method="setReward_TOD36()", type_label=function_definition];
1607 [label="288_ require (!claimed_TOD36);\n1607-expression_statement-289-289", method="setReward_TOD36()", type_label=expression_statement];
1613 [label="289_ require(msg.sender == owner_TOD36);\n1613-expression_statement-290-290", method="setReward_TOD36()", type_label=expression_statement];
1622 [label="290_ owner_TOD36.transfer(reward_TOD36);\n1622-expression_statement-291-291", method="setReward_TOD36()", type_label=expression_statement];
1629 [label="291_ reward_TOD36 = msg.value;\n1629-expression_statement-292-292", method="setReward_TOD36()", type_label=expression_statement];
1635 [label="293_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n1635-function_definition-294-299", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
1643 [label="294_ require (!claimed_TOD36);\n1643-expression_statement-295-295", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1649 [label="295_ require(submission < 10);\n1649-expression_statement-296-296", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1656 [label="296_ msg.sender.transfer(reward_TOD36);\n1656-expression_statement-297-297", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1665 [label="297_ claimed_TOD36 = true;\n1665-expression_statement-298-298", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1670 [label="299_ function setPauseStatus(bool isPaused)public{\n        assert(msg.sender==owner);\n        isTransPaused=isPaused;\n    }\n1670-function_definition-300-303", method="setPauseStatus(bool isPaused)", type_label=function_definition];
1678 [label="300_ assert(msg.sender==owner);\n1678-expression_statement-301-301", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1687 [label="301_ isTransPaused=isPaused;\n1687-expression_statement-302-302", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1691 [label="303_ address payable winner_TOD35;\n1691-new_variable-304-304", method="", type_label=new_variable];
1695 [label="304_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n1695-function_definition-305-309", method="play_TOD35(bytes32 guess)", type_label=function_definition];
1703 [label="305_ if\n1703-if-306-308", method="play_TOD35(bytes32 guess)", type_label=if];
3614 [label="305_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
1725 [label="306_ winner_TOD35 = msg.sender;\n1725-expression_statement-307-307", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
1731 [label="309_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n1731-function_definition-310-312", method="getReward_TOD35()", type_label=function_definition];
1736 [label="310_ winner_TOD35.transfer(msg.value);\n1736-expression_statement-311-311", method="getReward_TOD35()", type_label=expression_statement];
1745 [label="312_ function changeContractName(string memory _newName,string memory _newSymbol) public {\n        assert(msg.sender==owner);\n        name=_newName;\n        symbol=_newSymbol;\n    }\n1745-function_definition-313-317", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=function_definition];
1757 [label="313_ assert(msg.sender==owner);\n1757-expression_statement-314-314", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1766 [label="314_ name=_newName;\n1766-expression_statement-315-315", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1770 [label="315_ symbol=_newSymbol;\n1770-expression_statement-316-316", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1774 [label="317_ bool claimed_TOD40 = false;\n1774-new_variable-318-318", method="", type_label=new_variable];
1780 [label="318_ address payable owner_TOD40;\n1780-new_variable-319-319", method="", type_label=new_variable];
1784 [label="319_ uint256 reward_TOD40;\n1784-new_variable-320-320", method="", type_label=new_variable];
1788 [label="320_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n1788-function_definition-321-326", method="setReward_TOD40()", type_label=function_definition];
1793 [label="321_ require (!claimed_TOD40);\n1793-expression_statement-322-322", method="setReward_TOD40()", type_label=expression_statement];
1799 [label="322_ require(msg.sender == owner_TOD40);\n1799-expression_statement-323-323", method="setReward_TOD40()", type_label=expression_statement];
1808 [label="323_ owner_TOD40.transfer(reward_TOD40);\n1808-expression_statement-324-324", method="setReward_TOD40()", type_label=expression_statement];
1815 [label="324_ reward_TOD40 = msg.value;\n1815-expression_statement-325-325", method="setReward_TOD40()", type_label=expression_statement];
1821 [label="326_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n1821-function_definition-327-332", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
1829 [label="327_ require (!claimed_TOD40);\n1829-expression_statement-328-328", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1835 [label="328_ require(submission < 10);\n1835-expression_statement-329-329", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1842 [label="329_ msg.sender.transfer(reward_TOD40);\n1842-expression_statement-330-330", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1851 [label="330_ claimed_TOD40 = true;\n1851-expression_statement-331-331", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1862 [label="335_ address payable winner_TOD33;\n1862-new_variable-336-336", method="", type_label=new_variable];
1866 [label="336_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n1866-function_definition-337-341", method="play_TOD33(bytes32 guess)", type_label=function_definition];
1874 [label="337_ if\n1874-if-338-340", method="play_TOD33(bytes32 guess)", type_label=if];
3785 [label="337_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
1896 [label="338_ winner_TOD33 = msg.sender;\n1896-expression_statement-339-339", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
1902 [label="341_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n1902-function_definition-342-344", method="getReward_TOD33()", type_label=function_definition];
1907 [label="342_ winner_TOD33.transfer(msg.value);\n1907-expression_statement-343-343", method="getReward_TOD33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1035;
1229;
17 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 47  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
25 -> 1936  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1936 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 1936  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
53 -> 58  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 115  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
93 -> 2004  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2004 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 2004  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
121 -> 126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 183  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
161 -> 2072  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2072 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
183 -> 2072  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
189 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
221 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 251  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
229 -> 2140  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2140 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 2140  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
257 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
271 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 310  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
288 -> 2199  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2199 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 2199  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
316 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
341 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
354 -> 360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
360 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
534 -> 543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
591 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
691 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
740 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
753 -> 762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
767 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 810  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
788 -> 2699  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2699 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
810 -> 2699  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
816 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 857  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
852 -> 868  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2763 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 2763  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
868 -> 872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
872 -> 2763  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
878 -> 883  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
878 -> 888  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2789 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 2789  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
888 -> 2789  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
892 -> 897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
906 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 936  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
914 -> 2825  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2825 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
936 -> 2825  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
942 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1011 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1045 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1048 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1062 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1073 -> 1082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1082 -> 1089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1095 -> 1103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1103 -> 1109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1109 -> 1116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1116 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1130 -> 1151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1151 -> 1191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1191 -> 1197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 1213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1240 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1254 -> 1259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1259 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1274 -> 1281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1287 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1308 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 1352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1372 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1375 -> 1381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1381 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1389 -> 1394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1394 -> 1400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1400 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1409 -> 1416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1422 -> 1430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1430 -> 1436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1436 -> 1443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1443 -> 1452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1457 -> 1475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1475 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1485 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1493 -> 1515  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1493 -> 3404  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3404 -> 1521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1515 -> 3404  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1521 -> 1526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1535 -> 1543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1543 -> 1558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1558 -> 1566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1566 -> 1572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 1598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 1613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1613 -> 1622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1622 -> 1629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1635 -> 1643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1643 -> 1649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1649 -> 1656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1656 -> 1665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1670 -> 1678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1678 -> 1687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1695 -> 1703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1703 -> 1725  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1703 -> 3614  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3614 -> 1731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1725 -> 3614  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1731 -> 1736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1745 -> 1757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1757 -> 1766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1766 -> 1770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1774 -> 1780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1780 -> 1784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1788 -> 1793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1793 -> 1799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1799 -> 1808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1808 -> 1815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1821 -> 1829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1829 -> 1835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1835 -> 1842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1842 -> 1851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1866 -> 1874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1874 -> 1896  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1874 -> 3785  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3785 -> 1902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1896 -> 3785  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1902 -> 1907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 2928  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1229 -> 3124  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
