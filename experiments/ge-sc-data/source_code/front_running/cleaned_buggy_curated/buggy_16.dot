digraph  {
13 [label="2_ function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n13-function_definition-3-6", method="mul(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a * b;\n31-expression_statement-4-4", method="mul(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(a == 0 || c / a == b);\n37-expression_statement-5-5", method="mul(uint a,uint b)", type_label=expression_statement];
50 [label="6_ function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n50-function_definition-7-10", method="div(uint a,uint b)", type_label=function_definition];
68 [label="7_ require(b > 0);\n68-expression_statement-8-8", method="div(uint a,uint b)", type_label=expression_statement];
75 [label="8_ c = a / b;\n75-expression_statement-9-9", method="div(uint a,uint b)", type_label=expression_statement];
81 [label="10_ function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n81-function_definition-11-14", method="sub(uint a,uint b)", type_label=function_definition];
99 [label="11_ require(b <= a);\n99-expression_statement-12-12", method="sub(uint a,uint b)", type_label=expression_statement];
106 [label="12_ c = a - b;\n106-expression_statement-13-13", method="sub(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n112-function_definition-15-18", method="add(uint a,uint b)", type_label=function_definition];
130 [label="15_ c = a + b;\n130-expression_statement-16-16", method="add(uint a,uint b)", type_label=expression_statement];
136 [label="16_ require(c >= a);\n136-expression_statement-17-17", method="add(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint256);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ bool claimed_TOD28 = false;\n154-new_variable-22-22", method="", type_label=new_variable];
160 [label="22_ address payable owner_TOD28;\n160-new_variable-23-23", method="", type_label=new_variable];
164 [label="23_ uint256 reward_TOD28;\n164-new_variable-24-24", method="", type_label=new_variable];
168 [label="24_ function setReward_TOD28() public payable {\n        require (!claimed_TOD28);\n        require(msg.sender == owner_TOD28);\n        owner_TOD28.transfer(reward_TOD28);\n        reward_TOD28 = msg.value;\n    }\n168-function_definition-25-30", method="setReward_TOD28()", type_label=function_definition];
173 [label="25_ require (!claimed_TOD28);\n173-expression_statement-26-26", method="setReward_TOD28()", type_label=expression_statement];
179 [label="26_ require(msg.sender == owner_TOD28);\n179-expression_statement-27-27", method="setReward_TOD28()", type_label=expression_statement];
188 [label="27_ owner_TOD28.transfer(reward_TOD28);\n188-expression_statement-28-28", method="setReward_TOD28()", type_label=expression_statement];
195 [label="28_ reward_TOD28 = msg.value;\n195-expression_statement-29-29", method="setReward_TOD28()", type_label=expression_statement];
201 [label="30_ function claimReward_TOD28(uint256 submission) public {\n        require (!claimed_TOD28);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD28);\n        claimed_TOD28 = true;\n    }\n201-function_definition-31-36", method="claimReward_TOD28(uint256 submission)", type_label=function_definition];
209 [label="31_ require (!claimed_TOD28);\n209-expression_statement-32-32", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
215 [label="32_ require(submission < 10);\n215-expression_statement-33-33", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
222 [label="33_ msg.sender.transfer(reward_TOD28);\n222-expression_statement-34-34", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
231 [label="34_ claimed_TOD28 = true;\n231-expression_statement-35-35", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
236 [label="36_ function balanceOf(address tokenOwner) public view returns (uint256 balance);\n236-function_definition-37-37", method="balanceOf(address tokenOwner)", type_label=function_definition];
249 [label="37_ bool claimed_TOD34 = false;\n249-new_variable-38-38", method="", type_label=new_variable];
255 [label="38_ address payable owner_TOD34;\n255-new_variable-39-39", method="", type_label=new_variable];
259 [label="39_ uint256 reward_TOD34;\n259-new_variable-40-40", method="", type_label=new_variable];
263 [label="40_ function setReward_TOD34() public payable {\n        require (!claimed_TOD34);\n        require(msg.sender == owner_TOD34);\n        owner_TOD34.transfer(reward_TOD34);\n        reward_TOD34 = msg.value;\n    }\n263-function_definition-41-46", method="setReward_TOD34()", type_label=function_definition];
268 [label="41_ require (!claimed_TOD34);\n268-expression_statement-42-42", method="setReward_TOD34()", type_label=expression_statement];
274 [label="42_ require(msg.sender == owner_TOD34);\n274-expression_statement-43-43", method="setReward_TOD34()", type_label=expression_statement];
283 [label="43_ owner_TOD34.transfer(reward_TOD34);\n283-expression_statement-44-44", method="setReward_TOD34()", type_label=expression_statement];
290 [label="44_ reward_TOD34 = msg.value;\n290-expression_statement-45-45", method="setReward_TOD34()", type_label=expression_statement];
296 [label="46_ function claimReward_TOD34(uint256 submission) public {\n        require (!claimed_TOD34);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD34);\n        claimed_TOD34 = true;\n    }\n296-function_definition-47-52", method="claimReward_TOD34(uint256 submission)", type_label=function_definition];
304 [label="47_ require (!claimed_TOD34);\n304-expression_statement-48-48", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
310 [label="48_ require(submission < 10);\n310-expression_statement-49-49", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
317 [label="49_ msg.sender.transfer(reward_TOD34);\n317-expression_statement-50-50", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
326 [label="50_ claimed_TOD34 = true;\n326-expression_statement-51-51", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
331 [label="52_ function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\n331-function_definition-53-53", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
348 [label="53_ address payable winner_TOD21;\n348-new_variable-54-54", method="", type_label=new_variable];
352 [label="54_ function play_TOD21(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD21 = msg.sender;\n        }\n    }\n352-function_definition-55-59", method="play_TOD21(bytes32 guess)", type_label=function_definition];
360 [label="55_ if\n360-if-56-58", method="play_TOD21(bytes32 guess)", type_label=if];
4301 [label="55_ end_if", method="play_TOD21(bytes32 guess)", type_label=end_if];
382 [label="56_ winner_TOD21 = msg.sender;\n382-expression_statement-57-57", method="play_TOD21(bytes32 guess)", type_label=expression_statement];
388 [label="59_ function getReward_TOD21() payable public{\n       winner_TOD21.transfer(msg.value);\n    }\n388-function_definition-60-62", method="getReward_TOD21()", type_label=function_definition];
393 [label="60_ winner_TOD21.transfer(msg.value);\n393-expression_statement-61-61", method="getReward_TOD21()", type_label=expression_statement];
402 [label="62_ function transfer(address to, uint256 tokens) public returns (bool success);\n402-function_definition-63-63", method="transfer(address to,uint256 tokens)", type_label=function_definition];
418 [label="63_ bool claimed_TOD10 = false;\n418-new_variable-64-64", method="", type_label=new_variable];
424 [label="64_ address payable owner_TOD10;\n424-new_variable-65-65", method="", type_label=new_variable];
428 [label="65_ uint256 reward_TOD10;\n428-new_variable-66-66", method="", type_label=new_variable];
432 [label="66_ function setReward_TOD10() public payable {\n        require (!claimed_TOD10);\n        require(msg.sender == owner_TOD10);\n        owner_TOD10.transfer(reward_TOD10);\n        reward_TOD10 = msg.value;\n    }\n432-function_definition-67-72", method="setReward_TOD10()", type_label=function_definition];
437 [label="67_ require (!claimed_TOD10);\n437-expression_statement-68-68", method="setReward_TOD10()", type_label=expression_statement];
443 [label="68_ require(msg.sender == owner_TOD10);\n443-expression_statement-69-69", method="setReward_TOD10()", type_label=expression_statement];
452 [label="69_ owner_TOD10.transfer(reward_TOD10);\n452-expression_statement-70-70", method="setReward_TOD10()", type_label=expression_statement];
459 [label="70_ reward_TOD10 = msg.value;\n459-expression_statement-71-71", method="setReward_TOD10()", type_label=expression_statement];
465 [label="72_ function claimReward_TOD10(uint256 submission) public {\n        require (!claimed_TOD10);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD10);\n        claimed_TOD10 = true;\n    }\n465-function_definition-73-78", method="claimReward_TOD10(uint256 submission)", type_label=function_definition];
473 [label="73_ require (!claimed_TOD10);\n473-expression_statement-74-74", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
479 [label="74_ require(submission < 10);\n479-expression_statement-75-75", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
486 [label="75_ msg.sender.transfer(reward_TOD10);\n486-expression_statement-76-76", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
495 [label="76_ claimed_TOD10 = true;\n495-expression_statement-77-77", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
500 [label="78_ function approve(address spender, uint256 tokens) public returns (bool success);\n500-function_definition-79-79", method="approve(address spender,uint256 tokens)", type_label=function_definition];
516 [label="79_ bool claimed_TOD22 = false;\n516-new_variable-80-80", method="", type_label=new_variable];
522 [label="80_ address payable owner_TOD22;\n522-new_variable-81-81", method="", type_label=new_variable];
526 [label="81_ uint256 reward_TOD22;\n526-new_variable-82-82", method="", type_label=new_variable];
530 [label="82_ function setReward_TOD22() public payable {\n        require (!claimed_TOD22);\n        require(msg.sender == owner_TOD22);\n        owner_TOD22.transfer(reward_TOD22);\n        reward_TOD22 = msg.value;\n    }\n530-function_definition-83-88", method="setReward_TOD22()", type_label=function_definition];
535 [label="83_ require (!claimed_TOD22);\n535-expression_statement-84-84", method="setReward_TOD22()", type_label=expression_statement];
541 [label="84_ require(msg.sender == owner_TOD22);\n541-expression_statement-85-85", method="setReward_TOD22()", type_label=expression_statement];
550 [label="85_ owner_TOD22.transfer(reward_TOD22);\n550-expression_statement-86-86", method="setReward_TOD22()", type_label=expression_statement];
557 [label="86_ reward_TOD22 = msg.value;\n557-expression_statement-87-87", method="setReward_TOD22()", type_label=expression_statement];
563 [label="88_ function claimReward_TOD22(uint256 submission) public {\n        require (!claimed_TOD22);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD22);\n        claimed_TOD22 = true;\n    }\n563-function_definition-89-94", method="claimReward_TOD22(uint256 submission)", type_label=function_definition];
571 [label="89_ require (!claimed_TOD22);\n571-expression_statement-90-90", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
577 [label="90_ require(submission < 10);\n577-expression_statement-91-91", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
584 [label="91_ msg.sender.transfer(reward_TOD22);\n584-expression_statement-92-92", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
593 [label="92_ claimed_TOD22 = true;\n593-expression_statement-93-93", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
598 [label="94_ function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n598-function_definition-95-95", method="transferFrom(address from,address to,uint256 tokens)", type_label=function_definition];
618 [label="95_ bool claimed_TOD12 = false;\n618-new_variable-96-96", method="", type_label=new_variable];
624 [label="96_ address payable owner_TOD12;\n624-new_variable-97-97", method="", type_label=new_variable];
628 [label="97_ uint256 reward_TOD12;\n628-new_variable-98-98", method="", type_label=new_variable];
632 [label="98_ function setReward_TOD12() public payable {\n        require (!claimed_TOD12);\n        require(msg.sender == owner_TOD12);\n        owner_TOD12.transfer(reward_TOD12);\n        reward_TOD12 = msg.value;\n    }\n632-function_definition-99-104", method="setReward_TOD12()", type_label=function_definition];
637 [label="99_ require (!claimed_TOD12);\n637-expression_statement-100-100", method="setReward_TOD12()", type_label=expression_statement];
643 [label="100_ require(msg.sender == owner_TOD12);\n643-expression_statement-101-101", method="setReward_TOD12()", type_label=expression_statement];
652 [label="101_ owner_TOD12.transfer(reward_TOD12);\n652-expression_statement-102-102", method="setReward_TOD12()", type_label=expression_statement];
659 [label="102_ reward_TOD12 = msg.value;\n659-expression_statement-103-103", method="setReward_TOD12()", type_label=expression_statement];
665 [label="104_ function claimReward_TOD12(uint256 submission) public {\n        require (!claimed_TOD12);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD12);\n        claimed_TOD12 = true;\n    }\n665-function_definition-105-110", method="claimReward_TOD12(uint256 submission)", type_label=function_definition];
673 [label="105_ require (!claimed_TOD12);\n673-expression_statement-106-106", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
679 [label="106_ require(submission < 10);\n679-expression_statement-107-107", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
686 [label="107_ msg.sender.transfer(reward_TOD12);\n686-expression_statement-108-108", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
695 [label="108_ claimed_TOD12 = true;\n695-expression_statement-109-109", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
700 [label="110_ address payable winner_TOD35;\n700-new_variable-111-111", method="", type_label=new_variable];
704 [label="111_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n704-function_definition-112-116", method="play_TOD35(bytes32 guess)", type_label=function_definition];
712 [label="112_ if\n712-if-113-115", method="play_TOD35(bytes32 guess)", type_label=if];
4653 [label="112_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
734 [label="113_ winner_TOD35 = msg.sender;\n734-expression_statement-114-114", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
740 [label="116_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n740-function_definition-117-119", method="getReward_TOD35()", type_label=function_definition];
745 [label="117_ winner_TOD35.transfer(msg.value);\n745-expression_statement-118-118", method="getReward_TOD35()", type_label=expression_statement];
768 [label="120_ bool claimed_TOD40 = false;\n768-new_variable-121-121", method="", type_label=new_variable];
774 [label="121_ address payable owner_TOD40;\n774-new_variable-122-122", method="", type_label=new_variable];
778 [label="122_ uint256 reward_TOD40;\n778-new_variable-123-123", method="", type_label=new_variable];
782 [label="123_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n782-function_definition-124-129", method="setReward_TOD40()", type_label=function_definition];
787 [label="124_ require (!claimed_TOD40);\n787-expression_statement-125-125", method="setReward_TOD40()", type_label=expression_statement];
793 [label="125_ require(msg.sender == owner_TOD40);\n793-expression_statement-126-126", method="setReward_TOD40()", type_label=expression_statement];
802 [label="126_ owner_TOD40.transfer(reward_TOD40);\n802-expression_statement-127-127", method="setReward_TOD40()", type_label=expression_statement];
809 [label="127_ reward_TOD40 = msg.value;\n809-expression_statement-128-128", method="setReward_TOD40()", type_label=expression_statement];
815 [label="129_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n815-function_definition-130-135", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
823 [label="130_ require (!claimed_TOD40);\n823-expression_statement-131-131", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
829 [label="131_ require(submission < 10);\n829-expression_statement-132-132", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
836 [label="132_ msg.sender.transfer(reward_TOD40);\n836-expression_statement-133-133", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
845 [label="133_ claimed_TOD40 = true;\n845-expression_statement-134-134", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
867 [label="138_ address payable public owner;\n867-new_variable-139-139", method="", type_label=new_variable];
872 [label="139_ address payable winner_TOD33;\n872-new_variable-140-140", method="", type_label=new_variable];
876 [label="140_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n876-function_definition-141-145", method="play_TOD33(bytes32 guess)", type_label=function_definition];
884 [label="141_ if\n884-if-142-144", method="play_TOD33(bytes32 guess)", type_label=if];
4825 [label="141_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
906 [label="142_ winner_TOD33 = msg.sender;\n906-expression_statement-143-143", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
912 [label="145_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n912-function_definition-146-148", method="getReward_TOD33()", type_label=function_definition];
917 [label="146_ winner_TOD33.transfer(msg.value);\n917-expression_statement-147-147", method="getReward_TOD33()", type_label=expression_statement];
938 [label="150_ owner = msg.sender;\n938-expression_statement-151-151", method="", type_label=expression_statement];
944 [label="152_ address payable winner_TOD11;\n944-new_variable-153-153", method="", type_label=new_variable];
948 [label="153_ function play_TOD11(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD11 = msg.sender;\n        }\n    }\n948-function_definition-154-158", method="play_TOD11(bytes32 guess)", type_label=function_definition];
956 [label="154_ if\n956-if-155-157", method="play_TOD11(bytes32 guess)", type_label=if];
4897 [label="154_ end_if", method="play_TOD11(bytes32 guess)", type_label=end_if];
978 [label="155_ winner_TOD11 = msg.sender;\n978-expression_statement-156-156", method="play_TOD11(bytes32 guess)", type_label=expression_statement];
984 [label="158_ function getReward_TOD11() payable public{\n       winner_TOD11.transfer(msg.value);\n    }\n984-function_definition-159-161", method="getReward_TOD11()", type_label=function_definition];
989 [label="159_ winner_TOD11.transfer(msg.value);\n989-expression_statement-160-160", method="getReward_TOD11()", type_label=expression_statement];
998 [label="161_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n998-expression_statement-162-165", method="", type_label=expression_statement];
1001 [label="162_ require(msg.sender == owner);\n1001-expression_statement-163-163", method="", type_label=expression_statement];
1010 [label="163_ _;\n1010-expression_statement-164-164", method="", type_label=expression_statement];
1012 [label="165_ function transferOwnership(address payable newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n1012-function_definition-166-170", method="transferOwnership(address payable newOwner)", type_label=function_definition];
1019 [label="165_ onlyOwner\n1019-expression_statement-166-166", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
1022 [label="166_ require(newOwner != address(0));\n1022-expression_statement-167-167", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
1037 [label="168_ owner = newOwner;\n1037-expression_statement-169-169", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
1041 [label="170_ address payable winner_TOD1;\n1041-new_variable-171-171", method="", type_label=new_variable];
1045 [label="171_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n1045-function_definition-172-176", method="play_TOD1(bytes32 guess)", type_label=function_definition];
1053 [label="172_ if\n1053-if-173-175", method="play_TOD1(bytes32 guess)", type_label=if];
4994 [label="172_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
1075 [label="173_ winner_TOD1 = msg.sender;\n1075-expression_statement-174-174", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
1081 [label="176_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n1081-function_definition-177-179", method="getReward_TOD1()", type_label=function_definition];
1086 [label="177_ winner_TOD1.transfer(msg.value);\n1086-expression_statement-178-178", method="getReward_TOD1()", type_label=expression_statement];
1109 [label="182_ mapping (address => uint256) balances;\n1109-new_variable-183-183", method="", type_label=new_variable];
1115 [label="183_ bool claimed_TOD18 = false;\n1115-new_variable-184-184", method="", type_label=new_variable];
1121 [label="184_ address payable owner_TOD18;\n1121-new_variable-185-185", method="", type_label=new_variable];
1125 [label="185_ uint256 reward_TOD18;\n1125-new_variable-186-186", method="", type_label=new_variable];
1129 [label="186_ function setReward_TOD18() public payable {\n        require (!claimed_TOD18);\n        require(msg.sender == owner_TOD18);\n        owner_TOD18.transfer(reward_TOD18);\n        reward_TOD18 = msg.value;\n    }\n1129-function_definition-187-192", method="setReward_TOD18()", type_label=function_definition];
1134 [label="187_ require (!claimed_TOD18);\n1134-expression_statement-188-188", method="setReward_TOD18()", type_label=expression_statement];
1140 [label="188_ require(msg.sender == owner_TOD18);\n1140-expression_statement-189-189", method="setReward_TOD18()", type_label=expression_statement];
1149 [label="189_ owner_TOD18.transfer(reward_TOD18);\n1149-expression_statement-190-190", method="setReward_TOD18()", type_label=expression_statement];
1156 [label="190_ reward_TOD18 = msg.value;\n1156-expression_statement-191-191", method="setReward_TOD18()", type_label=expression_statement];
1162 [label="192_ function claimReward_TOD18(uint256 submission) public {\n        require (!claimed_TOD18);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD18);\n        claimed_TOD18 = true;\n    }\n1162-function_definition-193-198", method="claimReward_TOD18(uint256 submission)", type_label=function_definition];
1170 [label="193_ require (!claimed_TOD18);\n1170-expression_statement-194-194", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
1176 [label="194_ require(submission < 10);\n1176-expression_statement-195-195", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
1183 [label="195_ msg.sender.transfer(reward_TOD18);\n1183-expression_statement-196-196", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
1192 [label="196_ claimed_TOD18 = true;\n1192-expression_statement-197-197", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
1197 [label="198_ mapping (address => mapping (address => uint256)) allowed;\n1197-new_variable-199-199", method="", type_label=new_variable];
1205 [label="199_ address payable winner_TOD29;\n1205-new_variable-200-200", method="", type_label=new_variable];
1209 [label="200_ function play_TOD29(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD29 = msg.sender;\n        }\n    }\n1209-function_definition-201-205", method="play_TOD29(bytes32 guess)", type_label=function_definition];
1217 [label="201_ if\n1217-if-202-204", method="play_TOD29(bytes32 guess)", type_label=if];
5158 [label="201_ end_if", method="play_TOD29(bytes32 guess)", type_label=end_if];
1239 [label="202_ winner_TOD29 = msg.sender;\n1239-expression_statement-203-203", method="play_TOD29(bytes32 guess)", type_label=expression_statement];
1245 [label="205_ function getReward_TOD29() payable public{\n       winner_TOD29.transfer(msg.value);\n    }\n1245-function_definition-206-208", method="getReward_TOD29()", type_label=function_definition];
1250 [label="206_ winner_TOD29.transfer(msg.value);\n1250-expression_statement-207-207", method="getReward_TOD29()", type_label=expression_statement];
1259 [label="208_ string public name = \"Exclusive Platform\";\n1259-new_variable-209-209", method="", type_label=new_variable];
1266 [label="209_ bool claimed_TOD6 = false;\n1266-new_variable-210-210", method="", type_label=new_variable];
1272 [label="210_ address payable owner_TOD6;\n1272-new_variable-211-211", method="", type_label=new_variable];
1276 [label="211_ uint256 reward_TOD6;\n1276-new_variable-212-212", method="", type_label=new_variable];
1280 [label="212_ function setReward_TOD6() public payable {\n        require (!claimed_TOD6);\n        require(msg.sender == owner_TOD6);\n        owner_TOD6.transfer(reward_TOD6);\n        reward_TOD6 = msg.value;\n    }\n1280-function_definition-213-218", method="setReward_TOD6()", type_label=function_definition];
1285 [label="213_ require (!claimed_TOD6);\n1285-expression_statement-214-214", method="setReward_TOD6()", type_label=expression_statement];
1291 [label="214_ require(msg.sender == owner_TOD6);\n1291-expression_statement-215-215", method="setReward_TOD6()", type_label=expression_statement];
1300 [label="215_ owner_TOD6.transfer(reward_TOD6);\n1300-expression_statement-216-216", method="setReward_TOD6()", type_label=expression_statement];
1307 [label="216_ reward_TOD6 = msg.value;\n1307-expression_statement-217-217", method="setReward_TOD6()", type_label=expression_statement];
1313 [label="218_ function claimReward_TOD6(uint256 submission) public {\n        require (!claimed_TOD6);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD6);\n        claimed_TOD6 = true;\n    }\n1313-function_definition-219-224", method="claimReward_TOD6(uint256 submission)", type_label=function_definition];
1321 [label="219_ require (!claimed_TOD6);\n1321-expression_statement-220-220", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
1327 [label="220_ require(submission < 10);\n1327-expression_statement-221-221", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
1334 [label="221_ msg.sender.transfer(reward_TOD6);\n1334-expression_statement-222-222", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
1343 [label="222_ claimed_TOD6 = true;\n1343-expression_statement-223-223", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
1348 [label="224_ string public symbol = \"XPL\";\n1348-new_variable-225-225", method="", type_label=new_variable];
1355 [label="225_ bool claimed_TOD16 = false;\n1355-new_variable-226-226", method="", type_label=new_variable];
1361 [label="226_ address payable owner_TOD16;\n1361-new_variable-227-227", method="", type_label=new_variable];
1365 [label="227_ uint256 reward_TOD16;\n1365-new_variable-228-228", method="", type_label=new_variable];
1369 [label="228_ function setReward_TOD16() public payable {\n        require (!claimed_TOD16);\n        require(msg.sender == owner_TOD16);\n        owner_TOD16.transfer(reward_TOD16);\n        reward_TOD16 = msg.value;\n    }\n1369-function_definition-229-234", method="setReward_TOD16()", type_label=function_definition];
1374 [label="229_ require (!claimed_TOD16);\n1374-expression_statement-230-230", method="setReward_TOD16()", type_label=expression_statement];
1380 [label="230_ require(msg.sender == owner_TOD16);\n1380-expression_statement-231-231", method="setReward_TOD16()", type_label=expression_statement];
1389 [label="231_ owner_TOD16.transfer(reward_TOD16);\n1389-expression_statement-232-232", method="setReward_TOD16()", type_label=expression_statement];
1396 [label="232_ reward_TOD16 = msg.value;\n1396-expression_statement-233-233", method="setReward_TOD16()", type_label=expression_statement];
1402 [label="234_ function claimReward_TOD16(uint256 submission) public {\n        require (!claimed_TOD16);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD16);\n        claimed_TOD16 = true;\n    }\n1402-function_definition-235-240", method="claimReward_TOD16(uint256 submission)", type_label=function_definition];
1410 [label="235_ require (!claimed_TOD16);\n1410-expression_statement-236-236", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
1416 [label="236_ require(submission < 10);\n1416-expression_statement-237-237", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
1423 [label="237_ msg.sender.transfer(reward_TOD16);\n1423-expression_statement-238-238", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
1432 [label="238_ claimed_TOD16 = true;\n1432-expression_statement-239-239", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
1437 [label="240_ uint256 public decimals = 8;\n1437-new_variable-241-241", method="", type_label=new_variable];
1443 [label="241_ bool claimed_TOD24 = false;\n1443-new_variable-242-242", method="", type_label=new_variable];
1449 [label="242_ address payable owner_TOD24;\n1449-new_variable-243-243", method="", type_label=new_variable];
1453 [label="243_ uint256 reward_TOD24;\n1453-new_variable-244-244", method="", type_label=new_variable];
1457 [label="244_ function setReward_TOD24() public payable {\n        require (!claimed_TOD24);\n        require(msg.sender == owner_TOD24);\n        owner_TOD24.transfer(reward_TOD24);\n        reward_TOD24 = msg.value;\n    }\n1457-function_definition-245-250", method="setReward_TOD24()", type_label=function_definition];
1462 [label="245_ require (!claimed_TOD24);\n1462-expression_statement-246-246", method="setReward_TOD24()", type_label=expression_statement];
1468 [label="246_ require(msg.sender == owner_TOD24);\n1468-expression_statement-247-247", method="setReward_TOD24()", type_label=expression_statement];
1477 [label="247_ owner_TOD24.transfer(reward_TOD24);\n1477-expression_statement-248-248", method="setReward_TOD24()", type_label=expression_statement];
1484 [label="248_ reward_TOD24 = msg.value;\n1484-expression_statement-249-249", method="setReward_TOD24()", type_label=expression_statement];
1490 [label="250_ function claimReward_TOD24(uint256 submission) public {\n        require (!claimed_TOD24);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD24);\n        claimed_TOD24 = true;\n    }\n1490-function_definition-251-256", method="claimReward_TOD24(uint256 submission)", type_label=function_definition];
1498 [label="251_ require (!claimed_TOD24);\n1498-expression_statement-252-252", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
1504 [label="252_ require(submission < 10);\n1504-expression_statement-253-253", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
1511 [label="253_ msg.sender.transfer(reward_TOD24);\n1511-expression_statement-254-254", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
1520 [label="254_ claimed_TOD24 = true;\n1520-expression_statement-255-255", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
1525 [label="256_ uint256 public _totalSupply;\n1525-new_variable-257-257", method="", type_label=new_variable];
1530 [label="257_ address payable winner_TOD5;\n1530-new_variable-258-258", method="", type_label=new_variable];
1534 [label="258_ function play_TOD5(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD5 = msg.sender;\n        }\n    }\n1534-function_definition-259-263", method="play_TOD5(bytes32 guess)", type_label=function_definition];
1542 [label="259_ if\n1542-if-260-262", method="play_TOD5(bytes32 guess)", type_label=if];
5483 [label="259_ end_if", method="play_TOD5(bytes32 guess)", type_label=end_if];
1564 [label="260_ winner_TOD5 = msg.sender;\n1564-expression_statement-261-261", method="play_TOD5(bytes32 guess)", type_label=expression_statement];
1570 [label="263_ function getReward_TOD5() payable public{\n       winner_TOD5.transfer(msg.value);\n    }\n1570-function_definition-264-266", method="getReward_TOD5()", type_label=function_definition];
1575 [label="264_ winner_TOD5.transfer(msg.value);\n1575-expression_statement-265-265", method="getReward_TOD5()", type_label=expression_statement];
1584 [label="266_ uint256 public XPLPerEther = 8000000e8;\n1584-new_variable-267-267", method="", type_label=new_variable];
1590 [label="267_ uint256 public minimumBuy = 1 ether / 100;\n1590-new_variable-268-268", method="", type_label=new_variable];
1599 [label="268_ address payable winner_TOD15;\n1599-new_variable-269-269", method="", type_label=new_variable];
1603 [label="269_ function play_TOD15(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD15 = msg.sender;\n        }\n    }\n1603-function_definition-270-274", method="play_TOD15(bytes32 guess)", type_label=function_definition];
1611 [label="270_ if\n1611-if-271-273", method="play_TOD15(bytes32 guess)", type_label=if];
5552 [label="270_ end_if", method="play_TOD15(bytes32 guess)", type_label=end_if];
1633 [label="271_ winner_TOD15 = msg.sender;\n1633-expression_statement-272-272", method="play_TOD15(bytes32 guess)", type_label=expression_statement];
1639 [label="274_ function getReward_TOD15() payable public{\n       winner_TOD15.transfer(msg.value);\n    }\n1639-function_definition-275-277", method="getReward_TOD15()", type_label=function_definition];
1644 [label="275_ winner_TOD15.transfer(msg.value);\n1644-expression_statement-276-276", method="getReward_TOD15()", type_label=expression_statement];
1653 [label="277_ bool public crowdsaleIsOn = true;\n1653-new_variable-278-278", method="", type_label=new_variable];
1660 [label="278_ modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n1660-expression_statement-279-282", method="", type_label=expression_statement];
1667 [label="279_ assert(msg.data.length >= size + 4);\n1667-expression_statement-280-280", method="", type_label=expression_statement];
1680 [label="280_ _;\n1680-expression_statement-281-281", method="", type_label=expression_statement];
1684 [label="283_ _totalSupply = 10000000000e8;\n1684-expression_statement-284-284", method="", type_label=expression_statement];
1688 [label="284_ balances[owner] = _totalSupply;\n1688-expression_statement-285-285", method="", type_label=expression_statement];
1704 [label="287_ bool claimed_TOD2 = false;\n1704-new_variable-288-288", method="", type_label=new_variable];
1710 [label="288_ address payable owner_TOD2;\n1710-new_variable-289-289", method="", type_label=new_variable];
1714 [label="289_ uint256 reward_TOD2;\n1714-new_variable-290-290", method="", type_label=new_variable];
1718 [label="290_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n1718-function_definition-291-296", method="setReward_TOD2()", type_label=function_definition];
1723 [label="291_ require (!claimed_TOD2);\n1723-expression_statement-292-292", method="setReward_TOD2()", type_label=expression_statement];
1729 [label="292_ require(msg.sender == owner_TOD2);\n1729-expression_statement-293-293", method="setReward_TOD2()", type_label=expression_statement];
1738 [label="293_ owner_TOD2.transfer(reward_TOD2);\n1738-expression_statement-294-294", method="setReward_TOD2()", type_label=expression_statement];
1745 [label="294_ reward_TOD2 = msg.value;\n1745-expression_statement-295-295", method="setReward_TOD2()", type_label=expression_statement];
1751 [label="296_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n1751-function_definition-297-302", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
1759 [label="297_ require (!claimed_TOD2);\n1759-expression_statement-298-298", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1765 [label="298_ require(submission < 10);\n1765-expression_statement-299-299", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1772 [label="299_ msg.sender.transfer(reward_TOD2);\n1772-expression_statement-300-300", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1781 [label="300_ claimed_TOD2 = true;\n1781-expression_statement-301-301", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1786 [label="302_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1786-function_definition-303-305", method="totalSupply()", type_label=function_definition];
1795 [label="303_ return _totalSupply;\n1795-return-304-304", method="totalSupply()", type_label=return];
1797 [label="305_ address payable winner_TOD17;\n1797-new_variable-306-306", method="", type_label=new_variable];
1801 [label="306_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n1801-function_definition-307-311", method="play_TOD17(bytes32 guess)", type_label=function_definition];
1809 [label="307_ if\n1809-if-308-310", method="play_TOD17(bytes32 guess)", type_label=if];
5750 [label="307_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
1831 [label="308_ winner_TOD17 = msg.sender;\n1831-expression_statement-309-309", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
1837 [label="311_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n1837-function_definition-312-314", method="getReward_TOD17()", type_label=function_definition];
1842 [label="312_ winner_TOD17.transfer(msg.value);\n1842-expression_statement-313-313", method="getReward_TOD17()", type_label=expression_statement];
1851 [label="314_ function updateXPLPerEther(uint _XPLPerEther) public onlyOwner {        \n        emit NewPrice(owner, XPLPerEther, _XPLPerEther);\n        XPLPerEther = _XPLPerEther;\n    }\n1851-function_definition-315-318", method="updateXPLPerEther(uint _XPLPerEther)", type_label=function_definition];
1858 [label="314_ onlyOwner\n1858-expression_statement-315-315", method="updateXPLPerEther(uint _XPLPerEther)", type_label=expression_statement];
1869 [label="316_ XPLPerEther = _XPLPerEther;\n1869-expression_statement-317-317", method="updateXPLPerEther(uint _XPLPerEther)", type_label=expression_statement];
1873 [label="318_ address payable winner_TOD37;\n1873-new_variable-319-319", method="", type_label=new_variable];
1877 [label="319_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n1877-function_definition-320-324", method="play_TOD37(bytes32 guess)", type_label=function_definition];
1885 [label="320_ if\n1885-if-321-323", method="play_TOD37(bytes32 guess)", type_label=if];
5826 [label="320_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
1907 [label="321_ winner_TOD37 = msg.sender;\n1907-expression_statement-322-322", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
1913 [label="324_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n1913-function_definition-325-327", method="getReward_TOD37()", type_label=function_definition];
1918 [label="325_ winner_TOD37.transfer(msg.value);\n1918-expression_statement-326-326", method="getReward_TOD37()", type_label=expression_statement];
1927 [label="327_ function switchCrowdsale() public onlyOwner {\n        crowdsaleIsOn = !(crowdsaleIsOn);\n    }\n1927-function_definition-328-330", method="switchCrowdsale()", type_label=function_definition];
1930 [label="327_ onlyOwner\n1930-expression_statement-328-328", method="switchCrowdsale()", type_label=expression_statement];
1933 [label="328_ crowdsaleIsOn = !(crowdsaleIsOn);\n1933-expression_statement-329-329", method="switchCrowdsale()", type_label=expression_statement];
1939 [label="330_ address payable winner_TOD3;\n1939-new_variable-331-331", method="", type_label=new_variable];
1943 [label="331_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n1943-function_definition-332-336", method="play_TOD3(bytes32 guess)", type_label=function_definition];
1951 [label="332_ if\n1951-if-333-335", method="play_TOD3(bytes32 guess)", type_label=if];
5892 [label="332_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
1973 [label="333_ winner_TOD3 = msg.sender;\n1973-expression_statement-334-334", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
1979 [label="336_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n1979-function_definition-337-339", method="getReward_TOD3()", type_label=function_definition];
1984 [label="337_ winner_TOD3.transfer(msg.value);\n1984-expression_statement-338-338", method="getReward_TOD3()", type_label=expression_statement];
1993 [label="339_ function getBonus(uint256 _amount) internal view returns (uint256) {\n        if (_amount >= XPLPerEther.mul(5)) {\n            return ((20 * _amount).div(100)).add(_amount);  \n        } else if (_amount >= XPLPerEther) {\n            return ((5 * _amount).div(100)).add(_amount);  \n        }\n        return _amount;\n    }\n1993-function_definition-340-347", method="getBonus(uint256 _amount)", type_label=function_definition];
2006 [label="340_ if\n2006-if-341-345", method="getBonus(uint256 _amount)", type_label=if];
5947 [label="340_ end_if", method="getBonus(uint256 _amount)", type_label=end_if];
2016 [label="341_ return ((20 * _amount).div(100)).add(_amount);\n2016-return-342-342", method="getBonus(uint256 _amount)", type_label=return];
2032 [label="342_ if__amount >= XPLPerEther\n2032-if-343-345", method="getBonus(uint256 _amount)", type_label=if];
2037 [label="343_ return ((5 * _amount).div(100)).add(_amount);\n2037-return-344-344", method="getBonus(uint256 _amount)", type_label=return];
2053 [label="345_ return _amount;\n2053-return-346-346", method="getBonus(uint256 _amount)", type_label=return];
2055 [label="347_ address payable winner_TOD9;\n2055-new_variable-348-348", method="", type_label=new_variable];
2059 [label="348_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n2059-function_definition-349-353", method="play_TOD9(bytes32 guess)", type_label=function_definition];
2067 [label="349_ if\n2067-if-350-352", method="play_TOD9(bytes32 guess)", type_label=if];
6008 [label="349_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
2089 [label="350_ winner_TOD9 = msg.sender;\n2089-expression_statement-351-351", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
2095 [label="353_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n2095-function_definition-354-356", method="getReward_TOD9()", type_label=function_definition];
2100 [label="354_ winner_TOD9.transfer(msg.value);\n2100-expression_statement-355-355", method="getReward_TOD9()", type_label=expression_statement];
2113 [label="357_ require(crowdsaleIsOn && msg.value >= minimumBuy);\n2113-expression_statement-358-358", method="", type_label=expression_statement];
2124 [label="358_ uint256 totalBuy =  (XPLPerEther.mul(msg.value)).div(1 ether);\n2124-new_variable-359-359", method="", type_label=new_variable];
2144 [label="359_ totalBuy = getBonus(totalBuy);\n2144-expression_statement-360-360", method="", type_label=expression_statement];
2151 [label="360_ doTransfer(owner, msg.sender, totalBuy);\n2151-expression_statement-361-361", method="", type_label=expression_statement];
2162 [label="362_ address payable winner_TOD25;\n2162-new_variable-363-363", method="", type_label=new_variable];
2166 [label="363_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n2166-function_definition-364-368", method="play_TOD25(bytes32 guess)", type_label=function_definition];
2174 [label="364_ if\n2174-if-365-367", method="play_TOD25(bytes32 guess)", type_label=if];
6115 [label="364_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
2196 [label="365_ winner_TOD25 = msg.sender;\n2196-expression_statement-366-366", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
2202 [label="368_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n2202-function_definition-369-371", method="getReward_TOD25()", type_label=function_definition];
2207 [label="369_ winner_TOD25.transfer(msg.value);\n2207-expression_statement-370-370", method="getReward_TOD25()", type_label=expression_statement];
2216 [label="371_ function distribute(address[] calldata _addresses, uint256 _amount) external {        \n        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amount);}\n    }\n2216-function_definition-372-374", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=function_definition];
2229 [label="372_ for(i < _addresses.length;;i++)\n2229-for-373-373", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=for];
6170 [label="372_ end_loop", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=end_loop];
2242 [label="372_ i++\n2242-expression_statement-373-373", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=expression_statement];
2245 [label="372_ transfer(_addresses[i], _amount);\n2245-expression_statement-373-373", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=expression_statement];
2254 [label="374_ address payable winner_TOD19;\n2254-new_variable-375-375", method="", type_label=new_variable];
2258 [label="375_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n2258-function_definition-376-380", method="play_TOD19(bytes32 guess)", type_label=function_definition];
2266 [label="376_ if\n2266-if-377-379", method="play_TOD19(bytes32 guess)", type_label=if];
6207 [label="376_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
2288 [label="377_ winner_TOD19 = msg.sender;\n2288-expression_statement-378-378", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
2294 [label="380_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n2294-function_definition-381-383", method="getReward_TOD19()", type_label=function_definition];
2299 [label="381_ winner_TOD19.transfer(msg.value);\n2299-expression_statement-382-382", method="getReward_TOD19()", type_label=expression_statement];
2308 [label="383_ function distributeWithAmount(address[] calldata _addresses, uint256[] calldata _amounts) external {\n        require(_addresses.length == _amounts.length);\n        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amounts[i]);}\n    }\n2308-function_definition-384-387", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=function_definition];
2322 [label="384_ require(_addresses.length == _amounts.length);\n2322-expression_statement-385-385", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
2333 [label="385_ for(i < _addresses.length;;i++)\n2333-for-386-386", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=for];
6274 [label="385_ end_loop", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=end_loop];
2346 [label="385_ i++\n2346-expression_statement-386-386", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
2349 [label="385_ transfer(_addresses[i], _amounts[i]);\n2349-expression_statement-386-386", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
2360 [label="387_ bool claimed_TOD26 = false;\n2360-new_variable-388-388", method="", type_label=new_variable];
2366 [label="388_ address payable owner_TOD26;\n2366-new_variable-389-389", method="", type_label=new_variable];
2370 [label="389_ uint256 reward_TOD26;\n2370-new_variable-390-390", method="", type_label=new_variable];
2374 [label="390_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n2374-function_definition-391-396", method="setReward_TOD26()", type_label=function_definition];
2379 [label="391_ require (!claimed_TOD26);\n2379-expression_statement-392-392", method="setReward_TOD26()", type_label=expression_statement];
2385 [label="392_ require(msg.sender == owner_TOD26);\n2385-expression_statement-393-393", method="setReward_TOD26()", type_label=expression_statement];
2394 [label="393_ owner_TOD26.transfer(reward_TOD26);\n2394-expression_statement-394-394", method="setReward_TOD26()", type_label=expression_statement];
2401 [label="394_ reward_TOD26 = msg.value;\n2401-expression_statement-395-395", method="setReward_TOD26()", type_label=expression_statement];
2407 [label="396_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n2407-function_definition-397-402", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
2415 [label="397_ require (!claimed_TOD26);\n2415-expression_statement-398-398", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2421 [label="398_ require(submission < 10);\n2421-expression_statement-399-399", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2428 [label="399_ msg.sender.transfer(reward_TOD26);\n2428-expression_statement-400-400", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2437 [label="400_ claimed_TOD26 = true;\n2437-expression_statement-401-401", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2442 [label="402_ function doTransfer(address _from, address _to, uint _amount) internal {\n        require((_to != address(0)));\n        require(_amount <= balances[_from]);\n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n    }\n2442-function_definition-403-409", method="doTransfer(address _from,address _to,uint _amount)", type_label=function_definition];
2458 [label="403_ require((_to != address(0)));\n2458-expression_statement-404-404", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
2468 [label="404_ require(_amount <= balances[_from]);\n2468-expression_statement-405-405", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
2477 [label="405_ balances[_from] = balances[_from].sub(_amount);\n2477-expression_statement-406-406", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
2490 [label="406_ balances[_to] = balances[_to].add(_amount);\n2490-expression_statement-407-407", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
2511 [label="409_ bool claimed_TOD20 = false;\n2511-new_variable-410-410", method="", type_label=new_variable];
2517 [label="410_ address payable owner_TOD20;\n2517-new_variable-411-411", method="", type_label=new_variable];
2521 [label="411_ uint256 reward_TOD20;\n2521-new_variable-412-412", method="", type_label=new_variable];
2525 [label="412_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n2525-function_definition-413-418", method="setReward_TOD20()", type_label=function_definition];
2530 [label="413_ require (!claimed_TOD20);\n2530-expression_statement-414-414", method="setReward_TOD20()", type_label=expression_statement];
2536 [label="414_ require(msg.sender == owner_TOD20);\n2536-expression_statement-415-415", method="setReward_TOD20()", type_label=expression_statement];
2545 [label="415_ owner_TOD20.transfer(reward_TOD20);\n2545-expression_statement-416-416", method="setReward_TOD20()", type_label=expression_statement];
2552 [label="416_ reward_TOD20 = msg.value;\n2552-expression_statement-417-417", method="setReward_TOD20()", type_label=expression_statement];
2558 [label="418_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n2558-function_definition-419-424", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
2566 [label="419_ require (!claimed_TOD20);\n2566-expression_statement-420-420", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2572 [label="420_ require(submission < 10);\n2572-expression_statement-421-421", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2579 [label="421_ msg.sender.transfer(reward_TOD20);\n2579-expression_statement-422-422", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2588 [label="422_ claimed_TOD20 = true;\n2588-expression_statement-423-423", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2593 [label="424_ function balanceOf(address _owner) view public returns (uint256) {\n        return balances[_owner];\n    }\n2593-function_definition-425-427", method="balanceOf(address _owner)", type_label=function_definition];
2606 [label="425_ return balances[_owner];\n2606-return-426-426", method="balanceOf(address _owner)", type_label=return];
2610 [label="427_ bool claimed_TOD32 = false;\n2610-new_variable-428-428", method="", type_label=new_variable];
2616 [label="428_ address payable owner_TOD32;\n2616-new_variable-429-429", method="", type_label=new_variable];
2620 [label="429_ uint256 reward_TOD32;\n2620-new_variable-430-430", method="", type_label=new_variable];
2624 [label="430_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n2624-function_definition-431-436", method="setReward_TOD32()", type_label=function_definition];
2629 [label="431_ require (!claimed_TOD32);\n2629-expression_statement-432-432", method="setReward_TOD32()", type_label=expression_statement];
2635 [label="432_ require(msg.sender == owner_TOD32);\n2635-expression_statement-433-433", method="setReward_TOD32()", type_label=expression_statement];
2644 [label="433_ owner_TOD32.transfer(reward_TOD32);\n2644-expression_statement-434-434", method="setReward_TOD32()", type_label=expression_statement];
2651 [label="434_ reward_TOD32 = msg.value;\n2651-expression_statement-435-435", method="setReward_TOD32()", type_label=expression_statement];
2657 [label="436_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n2657-function_definition-437-442", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
2665 [label="437_ require (!claimed_TOD32);\n2665-expression_statement-438-438", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2671 [label="438_ require(submission < 10);\n2671-expression_statement-439-439", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2678 [label="439_ msg.sender.transfer(reward_TOD32);\n2678-expression_statement-440-440", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2687 [label="440_ claimed_TOD32 = true;\n2687-expression_statement-441-441", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2692 [label="442_ function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        doTransfer(msg.sender, _to, _amount);\n        return true;\n    }\n2692-function_definition-443-446", method="transfer(address _to,uint256 _amount)", type_label=function_definition];
2702 [label="442_ onlyPayloadSize(2 * 32)\n2702-expression_statement-443-443", method="transfer(address _to,uint256 _amount)", type_label=expression_statement];
2715 [label="443_ doTransfer(msg.sender, _to, _amount);\n2715-expression_statement-444-444", method="transfer(address _to,uint256 _amount)", type_label=expression_statement];
2726 [label="444_ return true;\n2726-return-445-445", method="transfer(address _to,uint256 _amount)", type_label=return];
2729 [label="446_ bool claimed_TOD38 = false;\n2729-new_variable-447-447", method="", type_label=new_variable];
2735 [label="447_ address payable owner_TOD38;\n2735-new_variable-448-448", method="", type_label=new_variable];
2739 [label="448_ uint256 reward_TOD38;\n2739-new_variable-449-449", method="", type_label=new_variable];
2743 [label="449_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n2743-function_definition-450-455", method="setReward_TOD38()", type_label=function_definition];
2748 [label="450_ require (!claimed_TOD38);\n2748-expression_statement-451-451", method="setReward_TOD38()", type_label=expression_statement];
2754 [label="451_ require(msg.sender == owner_TOD38);\n2754-expression_statement-452-452", method="setReward_TOD38()", type_label=expression_statement];
2763 [label="452_ owner_TOD38.transfer(reward_TOD38);\n2763-expression_statement-453-453", method="setReward_TOD38()", type_label=expression_statement];
2770 [label="453_ reward_TOD38 = msg.value;\n2770-expression_statement-454-454", method="setReward_TOD38()", type_label=expression_statement];
2776 [label="455_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n2776-function_definition-456-461", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
2784 [label="456_ require (!claimed_TOD38);\n2784-expression_statement-457-457", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2790 [label="457_ require(submission < 10);\n2790-expression_statement-458-458", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2797 [label="458_ msg.sender.transfer(reward_TOD38);\n2797-expression_statement-459-459", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2806 [label="459_ claimed_TOD38 = true;\n2806-expression_statement-460-460", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2811 [label="461_ function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(allowed[_from][msg.sender] >= _amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        doTransfer(_from, _to, _amount);\n        return true;\n    }\n2811-function_definition-462-467", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=function_definition];
2825 [label="461_ onlyPayloadSize(3 * 32)\n2825-expression_statement-462-462", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
2838 [label="462_ require(allowed[_from][msg.sender] >= _amount);\n2838-expression_statement-463-463", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
2851 [label="463_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n2851-expression_statement-464-464", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
2872 [label="464_ doTransfer(_from, _to, _amount);\n2872-expression_statement-465-465", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
2881 [label="465_ return true;\n2881-return-466-466", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=return];
2884 [label="467_ bool claimed_TOD4 = false;\n2884-new_variable-468-468", method="", type_label=new_variable];
2890 [label="468_ address payable owner_TOD4;\n2890-new_variable-469-469", method="", type_label=new_variable];
2894 [label="469_ uint256 reward_TOD4;\n2894-new_variable-470-470", method="", type_label=new_variable];
2898 [label="470_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n2898-function_definition-471-476", method="setReward_TOD4()", type_label=function_definition];
2903 [label="471_ require (!claimed_TOD4);\n2903-expression_statement-472-472", method="setReward_TOD4()", type_label=expression_statement];
2909 [label="472_ require(msg.sender == owner_TOD4);\n2909-expression_statement-473-473", method="setReward_TOD4()", type_label=expression_statement];
2918 [label="473_ owner_TOD4.transfer(reward_TOD4);\n2918-expression_statement-474-474", method="setReward_TOD4()", type_label=expression_statement];
2925 [label="474_ reward_TOD4 = msg.value;\n2925-expression_statement-475-475", method="setReward_TOD4()", type_label=expression_statement];
2931 [label="476_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n2931-function_definition-477-482", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
2939 [label="477_ require (!claimed_TOD4);\n2939-expression_statement-478-478", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2945 [label="478_ require(submission < 10);\n2945-expression_statement-479-479", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2952 [label="479_ msg.sender.transfer(reward_TOD4);\n2952-expression_statement-480-480", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2961 [label="480_ claimed_TOD4 = true;\n2961-expression_statement-481-481", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2966 [label="482_ function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n2966-function_definition-483-488", method="approve(address _spender,uint256 _amount)", type_label=function_definition];
2983 [label="483_ require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n2983-expression_statement-484-484", method="approve(address _spender,uint256 _amount)", type_label=expression_statement];
3002 [label="484_ allowed[msg.sender][_spender] = _amount;\n3002-expression_statement-485-485", method="approve(address _spender,uint256 _amount)", type_label=expression_statement];
3022 [label="486_ return true;\n3022-return-487-487", method="approve(address _spender,uint256 _amount)", type_label=return];
3025 [label="488_ address payable winner_TOD7;\n3025-new_variable-489-489", method="", type_label=new_variable];
3029 [label="489_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n3029-function_definition-490-494", method="play_TOD7(bytes32 guess)", type_label=function_definition];
3037 [label="490_ if\n3037-if-491-493", method="play_TOD7(bytes32 guess)", type_label=if];
6978 [label="490_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
3059 [label="491_ winner_TOD7 = msg.sender;\n3059-expression_statement-492-492", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
3065 [label="494_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n3065-function_definition-495-497", method="getReward_TOD7()", type_label=function_definition];
3070 [label="495_ winner_TOD7.transfer(msg.value);\n3070-expression_statement-496-496", method="getReward_TOD7()", type_label=expression_statement];
3079 [label="497_ function allowance(address _owner, address _spender) view public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n3079-function_definition-498-500", method="allowance(address _owner,address _spender)", type_label=function_definition];
3096 [label="498_ return allowed[_owner][_spender];\n3096-return-499-499", method="allowance(address _owner,address _spender)", type_label=return];
3102 [label="500_ address payable winner_TOD23;\n3102-new_variable-501-501", method="", type_label=new_variable];
3106 [label="501_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n3106-function_definition-502-506", method="play_TOD23(bytes32 guess)", type_label=function_definition];
3114 [label="502_ if\n3114-if-503-505", method="play_TOD23(bytes32 guess)", type_label=if];
7055 [label="502_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
3136 [label="503_ winner_TOD23 = msg.sender;\n3136-expression_statement-504-504", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
3142 [label="506_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n3142-function_definition-507-509", method="getReward_TOD23()", type_label=function_definition];
3147 [label="507_ winner_TOD23.transfer(msg.value);\n3147-expression_statement-508-508", method="getReward_TOD23()", type_label=expression_statement];
3156 [label="509_ function transferEther(address payable _receiver, uint256 _amount) public onlyOwner {\n        require(_amount <= address(this).balance);\n        emit TransferEther(address(this), _receiver, _amount);\n        _receiver.transfer(_amount);\n    }\n3156-function_definition-510-514", method="transferEther(address payable _receiver,uint256 _amount)", type_label=function_definition];
3167 [label="509_ onlyOwner\n3167-expression_statement-510-510", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
3170 [label="510_ require(_amount <= address(this).balance);\n3170-expression_statement-511-511", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
3191 [label="512_ _receiver.transfer(_amount);\n3191-expression_statement-513-513", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
3198 [label="514_ bool claimed_TOD14 = false;\n3198-new_variable-515-515", method="", type_label=new_variable];
3204 [label="515_ address payable owner_TOD14;\n3204-new_variable-516-516", method="", type_label=new_variable];
3208 [label="516_ uint256 reward_TOD14;\n3208-new_variable-517-517", method="", type_label=new_variable];
3212 [label="517_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n3212-function_definition-518-523", method="setReward_TOD14()", type_label=function_definition];
3217 [label="518_ require (!claimed_TOD14);\n3217-expression_statement-519-519", method="setReward_TOD14()", type_label=expression_statement];
3223 [label="519_ require(msg.sender == owner_TOD14);\n3223-expression_statement-520-520", method="setReward_TOD14()", type_label=expression_statement];
3232 [label="520_ owner_TOD14.transfer(reward_TOD14);\n3232-expression_statement-521-521", method="setReward_TOD14()", type_label=expression_statement];
3239 [label="521_ reward_TOD14 = msg.value;\n3239-expression_statement-522-522", method="setReward_TOD14()", type_label=expression_statement];
3245 [label="523_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n3245-function_definition-524-529", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
3253 [label="524_ require (!claimed_TOD14);\n3253-expression_statement-525-525", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3259 [label="525_ require(submission < 10);\n3259-expression_statement-526-526", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3266 [label="526_ msg.sender.transfer(reward_TOD14);\n3266-expression_statement-527-527", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3275 [label="527_ claimed_TOD14 = true;\n3275-expression_statement-528-528", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3280 [label="529_ function withdrawFund() onlyOwner public {\n        uint256 balance = address(this).balance;\n        owner.transfer(balance);\n    }\n3280-function_definition-530-533", method="withdrawFund()", type_label=function_definition];
3282 [label="529_ onlyOwner\n3282-expression_statement-530-530", method="withdrawFund()", type_label=expression_statement];
3286 [label="530_ uint256 balance = address(this).balance;\n3286-new_variable-531-531", method="withdrawFund()", type_label=new_variable];
3296 [label="531_ owner.transfer(balance);\n3296-expression_statement-532-532", method="withdrawFund()", type_label=expression_statement];
3303 [label="533_ bool claimed_TOD30 = false;\n3303-new_variable-534-534", method="", type_label=new_variable];
3309 [label="534_ address payable owner_TOD30;\n3309-new_variable-535-535", method="", type_label=new_variable];
3313 [label="535_ uint256 reward_TOD30;\n3313-new_variable-536-536", method="", type_label=new_variable];
3317 [label="536_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n3317-function_definition-537-542", method="setReward_TOD30()", type_label=function_definition];
3322 [label="537_ require (!claimed_TOD30);\n3322-expression_statement-538-538", method="setReward_TOD30()", type_label=expression_statement];
3328 [label="538_ require(msg.sender == owner_TOD30);\n3328-expression_statement-539-539", method="setReward_TOD30()", type_label=expression_statement];
3337 [label="539_ owner_TOD30.transfer(reward_TOD30);\n3337-expression_statement-540-540", method="setReward_TOD30()", type_label=expression_statement];
3344 [label="540_ reward_TOD30 = msg.value;\n3344-expression_statement-541-541", method="setReward_TOD30()", type_label=expression_statement];
3350 [label="542_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n3350-function_definition-543-548", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
3358 [label="543_ require (!claimed_TOD30);\n3358-expression_statement-544-544", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3364 [label="544_ require(submission < 10);\n3364-expression_statement-545-545", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3371 [label="545_ msg.sender.transfer(reward_TOD30);\n3371-expression_statement-546-546", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3380 [label="546_ claimed_TOD30 = true;\n3380-expression_statement-547-547", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3385 [label="548_ function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }\n3385-function_definition-549-555", method="burn(uint256 _value)", type_label=function_definition];
3391 [label="548_ onlyOwner\n3391-expression_statement-549-549", method="burn(uint256 _value)", type_label=expression_statement];
3395 [label="549_ require(_value <= balances[msg.sender]);\n3395-expression_statement-550-550", method="burn(uint256 _value)", type_label=expression_statement];
3406 [label="550_ address burner = msg.sender;\n3406-new_variable-551-551", method="burn(uint256 _value)", type_label=new_variable];
3414 [label="551_ balances[burner] = balances[burner].sub(_value);\n3414-expression_statement-552-552", method="burn(uint256 _value)", type_label=expression_statement];
3427 [label="552_ _totalSupply = _totalSupply.sub(_value);\n3427-expression_statement-553-553", method="burn(uint256 _value)", type_label=expression_statement];
3442 [label="555_ bool claimed_TOD8 = false;\n3442-new_variable-556-556", method="", type_label=new_variable];
3448 [label="556_ address payable owner_TOD8;\n3448-new_variable-557-557", method="", type_label=new_variable];
3452 [label="557_ uint256 reward_TOD8;\n3452-new_variable-558-558", method="", type_label=new_variable];
3456 [label="558_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n3456-function_definition-559-564", method="setReward_TOD8()", type_label=function_definition];
3461 [label="559_ require (!claimed_TOD8);\n3461-expression_statement-560-560", method="setReward_TOD8()", type_label=expression_statement];
3467 [label="560_ require(msg.sender == owner_TOD8);\n3467-expression_statement-561-561", method="setReward_TOD8()", type_label=expression_statement];
3476 [label="561_ owner_TOD8.transfer(reward_TOD8);\n3476-expression_statement-562-562", method="setReward_TOD8()", type_label=expression_statement];
3483 [label="562_ reward_TOD8 = msg.value;\n3483-expression_statement-563-563", method="setReward_TOD8()", type_label=expression_statement];
3489 [label="564_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n3489-function_definition-565-570", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
3497 [label="565_ require (!claimed_TOD8);\n3497-expression_statement-566-566", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3503 [label="566_ require(submission < 10);\n3503-expression_statement-567-567", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3510 [label="567_ msg.sender.transfer(reward_TOD8);\n3510-expression_statement-568-568", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3519 [label="568_ claimed_TOD8 = true;\n3519-expression_statement-569-569", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3524 [label="570_ function getForeignTokenBalance(address tokenAddress, address who) view public returns (uint){\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        uint bal = token.balanceOf(who);\n        return bal;\n    }\n3524-function_definition-571-575", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=function_definition];
3541 [label="571_ ERC20Interface token = ERC20Interface(tokenAddress);\n3541-new_variable-572-572", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=new_variable];
3551 [label="572_ uint bal = token.balanceOf(who);\n3551-new_variable-573-573", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=new_variable];
3562 [label="573_ return bal;\n3562-return-574-574", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=return];
3564 [label="575_ address payable winner_TOD39;\n3564-new_variable-576-576", method="", type_label=new_variable];
3568 [label="576_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n3568-function_definition-577-581", method="play_TOD39(bytes32 guess)", type_label=function_definition];
3576 [label="577_ if\n3576-if-578-580", method="play_TOD39(bytes32 guess)", type_label=if];
7517 [label="577_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
3598 [label="578_ winner_TOD39 = msg.sender;\n3598-expression_statement-579-579", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
3604 [label="581_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n3604-function_definition-582-584", method="getReward_TOD39()", type_label=function_definition];
3609 [label="582_ winner_TOD39.transfer(msg.value);\n3609-expression_statement-583-583", method="getReward_TOD39()", type_label=expression_statement];
3618 [label="584_ function withdrawForeignTokens(address tokenAddress) onlyOwner public returns (bool) {\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n3618-function_definition-585-589", method="withdrawForeignTokens(address tokenAddress)", type_label=function_definition];
3624 [label="584_ onlyOwner\n3624-expression_statement-585-585", method="withdrawForeignTokens(address tokenAddress)", type_label=expression_statement];
3632 [label="585_ ERC20Interface token = ERC20Interface(tokenAddress);\n3632-new_variable-586-586", method="withdrawForeignTokens(address tokenAddress)", type_label=new_variable];
3642 [label="586_ uint256 amount = token.balanceOf(address(this));\n3642-new_variable-587-587", method="withdrawForeignTokens(address tokenAddress)", type_label=new_variable];
3655 [label="587_ return token.transfer(owner, amount);\n3655-return-588-588", method="withdrawForeignTokens(address tokenAddress)", type_label=return];
3664 [label="589_ bool claimed_TOD36 = false;\n3664-new_variable-590-590", method="", type_label=new_variable];
3670 [label="590_ address payable owner_TOD36;\n3670-new_variable-591-591", method="", type_label=new_variable];
3674 [label="591_ uint256 reward_TOD36;\n3674-new_variable-592-592", method="", type_label=new_variable];
3678 [label="592_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n3678-function_definition-593-598", method="setReward_TOD36()", type_label=function_definition];
3683 [label="593_ require (!claimed_TOD36);\n3683-expression_statement-594-594", method="setReward_TOD36()", type_label=expression_statement];
3689 [label="594_ require(msg.sender == owner_TOD36);\n3689-expression_statement-595-595", method="setReward_TOD36()", type_label=expression_statement];
3698 [label="595_ owner_TOD36.transfer(reward_TOD36);\n3698-expression_statement-596-596", method="setReward_TOD36()", type_label=expression_statement];
3705 [label="596_ reward_TOD36 = msg.value;\n3705-expression_statement-597-597", method="setReward_TOD36()", type_label=expression_statement];
3711 [label="598_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n3711-function_definition-599-604", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
3719 [label="599_ require (!claimed_TOD36);\n3719-expression_statement-600-600", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
3725 [label="600_ require(submission < 10);\n3725-expression_statement-601-601", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
3732 [label="601_ msg.sender.transfer(reward_TOD36);\n3732-expression_statement-602-602", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
3741 [label="602_ claimed_TOD36 = true;\n3741-expression_statement-603-603", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
3746 [label="604_ address payable winner_TOD27;\n3746-new_variable-605-605", method="", type_label=new_variable];
3750 [label="605_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n3750-function_definition-606-610", method="play_TOD27(bytes32 guess)", type_label=function_definition];
3758 [label="606_ if\n3758-if-607-609", method="play_TOD27(bytes32 guess)", type_label=if];
7699 [label="606_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
3780 [label="607_ winner_TOD27 = msg.sender;\n3780-expression_statement-608-608", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
3786 [label="610_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n3786-function_definition-611-613", method="getReward_TOD27()", type_label=function_definition];
3791 [label="611_ winner_TOD27.transfer(msg.value);\n3791-expression_statement-612-612", method="getReward_TOD27()", type_label=expression_statement];
3814 [label="614_ address payable winner_TOD31;\n3814-new_variable-615-615", method="", type_label=new_variable];
3818 [label="615_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n3818-function_definition-616-620", method="play_TOD31(bytes32 guess)", type_label=function_definition];
3826 [label="616_ if\n3826-if-617-619", method="play_TOD31(bytes32 guess)", type_label=if];
7767 [label="616_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
3848 [label="617_ winner_TOD31 = msg.sender;\n3848-expression_statement-618-618", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
3854 [label="620_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n3854-function_definition-621-623", method="getReward_TOD31()", type_label=function_definition];
3859 [label="621_ winner_TOD31.transfer(msg.value);\n3859-expression_statement-622-622", method="getReward_TOD31()", type_label=expression_statement];
3882 [label="624_ address payable winner_TOD13;\n3882-new_variable-625-625", method="", type_label=new_variable];
3886 [label="625_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n3886-function_definition-626-630", method="play_TOD13(bytes32 guess)", type_label=function_definition];
3894 [label="626_ if\n3894-if-627-629", method="play_TOD13(bytes32 guess)", type_label=if];
7835 [label="626_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
3916 [label="627_ winner_TOD13 = msg.sender;\n3916-expression_statement-628-628", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
3922 [label="630_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n3922-function_definition-631-633", method="getReward_TOD13()", type_label=function_definition];
3927 [label="631_ winner_TOD13.transfer(msg.value);\n3927-expression_statement-632-632", method="getReward_TOD13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
268 -> 274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
274 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
360 -> 382  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
360 -> 4301  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4301 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 4301  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
388 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 734  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
712 -> 4653  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4653 -> 740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 4653  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
740 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
774 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
793 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
867 -> 872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
876 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 906  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
884 -> 4825  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4825 -> 912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
906 -> 4825  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
912 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 978  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
956 -> 4897  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4897 -> 984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 4897  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
984 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1001 -> 1010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1045 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 1075  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1053 -> 4994  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4994 -> 1081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 4994  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1081 -> 1086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1109 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1115 -> 1121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1121 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1134 -> 1140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1140 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1170 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 1183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1183 -> 1192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1209 -> 1217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1217 -> 1239  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1217 -> 5158  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5158 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1239 -> 5158  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1245 -> 1250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1259 -> 1266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1266 -> 1272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1272 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1280 -> 1285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1285 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1291 -> 1300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1300 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1313 -> 1321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 1327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1327 -> 1334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1334 -> 1343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1348 -> 1355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1355 -> 1361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1361 -> 1365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1369 -> 1374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1374 -> 1380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 1389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1389 -> 1396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 1416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1416 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 1432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1437 -> 1443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1443 -> 1449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1449 -> 1453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1457 -> 1462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1462 -> 1468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1468 -> 1477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1477 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1490 -> 1498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 1504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 1511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1511 -> 1520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1525 -> 1530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1534 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 1564  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1542 -> 5483  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5483 -> 1570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1564 -> 5483  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1570 -> 1575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 1590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1590 -> 1599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1603 -> 1611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1611 -> 1633  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1611 -> 5552  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5552 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1633 -> 5552  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1639 -> 1644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1667 -> 1680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1684 -> 1688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1704 -> 1710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1710 -> 1714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1718 -> 1723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1723 -> 1729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1729 -> 1738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1738 -> 1745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1751 -> 1759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1759 -> 1765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1765 -> 1772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1772 -> 1781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1786 -> 1795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1795 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1801 -> 1809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1809 -> 1831  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1809 -> 5750  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5750 -> 1837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1831 -> 5750  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1837 -> 1842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1851 -> 1869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1877 -> 1885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1885 -> 1907  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1885 -> 5826  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5826 -> 1913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1907 -> 5826  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1913 -> 1918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1927 -> 1933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1943 -> 1951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1951 -> 1973  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1951 -> 5892  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5892 -> 1979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1973 -> 5892  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1979 -> 1984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1993 -> 2006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2006 -> 2016  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2006 -> 2032  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5947 -> 2053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2016 -> 5947  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2016 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2032 -> 2037  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2032 -> 5947  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2037 -> 5947  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2037 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2053 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2059 -> 2067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2067 -> 2089  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2067 -> 6008  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6008 -> 2095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2089 -> 6008  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2095 -> 2100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2113 -> 2124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2124 -> 2144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2144 -> 2151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2166 -> 2174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2174 -> 2196  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2174 -> 6115  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6115 -> 2202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2196 -> 6115  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2202 -> 2207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2216 -> 2229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2229 -> 2245  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2229 -> 6170  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6170 -> 2254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2242 -> 2229  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2245 -> 2242  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2258 -> 2266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2266 -> 2288  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2266 -> 6207  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6207 -> 2294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2288 -> 6207  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2294 -> 2299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2308 -> 2322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2322 -> 2333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2333 -> 2349  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2333 -> 6274  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6274 -> 2360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2346 -> 2333  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2349 -> 2346  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2360 -> 2366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2366 -> 2370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2374 -> 2379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2379 -> 2385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2385 -> 2394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2394 -> 2401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2407 -> 2415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2415 -> 2421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2421 -> 2428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2428 -> 2437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2442 -> 2458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2458 -> 2468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2468 -> 2477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2477 -> 2490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2511 -> 2517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2517 -> 2521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2525 -> 2530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2530 -> 2536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2536 -> 2545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2545 -> 2552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2558 -> 2566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2566 -> 2572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2572 -> 2579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2579 -> 2588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2593 -> 2606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2606 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2610 -> 2616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2616 -> 2620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2624 -> 2629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2629 -> 2635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2635 -> 2644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2644 -> 2651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2657 -> 2665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2665 -> 2671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2671 -> 2678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2678 -> 2687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2692 -> 2715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2715 -> 2726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2726 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2729 -> 2735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2735 -> 2739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2743 -> 2748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2748 -> 2754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2754 -> 2763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2763 -> 2770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2776 -> 2784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2784 -> 2790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2790 -> 2797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2797 -> 2806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2811 -> 2838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2838 -> 2851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2851 -> 2872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2872 -> 2881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2881 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2884 -> 2890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2890 -> 2894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2898 -> 2903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2903 -> 2909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2909 -> 2918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2918 -> 2925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2931 -> 2939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2939 -> 2945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2945 -> 2952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2952 -> 2961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2966 -> 2983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2983 -> 3002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3022 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3029 -> 3037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3037 -> 3059  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3037 -> 6978  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6978 -> 3065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3059 -> 6978  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3065 -> 3070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3079 -> 3096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3096 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3106 -> 3114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3114 -> 3136  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3114 -> 7055  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7055 -> 3142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3136 -> 7055  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3142 -> 3147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3156 -> 3170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3198 -> 3204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3204 -> 3208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3212 -> 3217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3217 -> 3223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3223 -> 3232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3232 -> 3239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3245 -> 3253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3253 -> 3259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3259 -> 3266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3266 -> 3275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3280 -> 3286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3286 -> 3296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3303 -> 3309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3309 -> 3313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3317 -> 3322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3322 -> 3328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3328 -> 3337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3337 -> 3344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3350 -> 3358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3358 -> 3364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3364 -> 3371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3371 -> 3380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3385 -> 3395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3395 -> 3406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3406 -> 3414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3414 -> 3427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3442 -> 3448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3448 -> 3452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3456 -> 3461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3461 -> 3467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3467 -> 3476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3476 -> 3483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3489 -> 3497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3497 -> 3503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3503 -> 3510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3510 -> 3519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3524 -> 3541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3541 -> 3551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3551 -> 3562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3562 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3568 -> 3576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3576 -> 3598  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3576 -> 7517  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7517 -> 3604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3598 -> 7517  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3604 -> 3609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3618 -> 3632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3632 -> 3642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3642 -> 3655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3655 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3664 -> 3670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3670 -> 3674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3678 -> 3683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3683 -> 3689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3689 -> 3698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3698 -> 3705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3711 -> 3719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3719 -> 3725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3725 -> 3732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3732 -> 3741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3750 -> 3758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3758 -> 3780  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3758 -> 7699  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7699 -> 3786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3780 -> 7699  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3786 -> 3791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3818 -> 3826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3826 -> 3848  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3826 -> 7767  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7767 -> 3854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3848 -> 7767  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3854 -> 3859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3886 -> 3894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3894 -> 3916  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3894 -> 7835  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7835 -> 3922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3916 -> 7835  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3922 -> 3927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
