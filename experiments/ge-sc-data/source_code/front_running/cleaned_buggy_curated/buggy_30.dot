digraph  {
13 [label="2_ function name() external view returns (string memory);\n13-function_definition-3-3", method="name()", type_label=function_definition];
21 [label="3_ function symbol() external view returns (string memory);\n21-function_definition-4-4", method="symbol()", type_label=function_definition];
29 [label="4_ function granularity() external view returns (uint256);\n29-function_definition-5-5", method="granularity()", type_label=function_definition];
37 [label="5_ function totalSupply() external view returns (uint256);\n37-function_definition-6-6", method="totalSupply()", type_label=function_definition];
45 [label="6_ function balanceOf(address owner) external view returns (uint256);\n45-function_definition-7-7", method="balanceOf(address owner)", type_label=function_definition];
57 [label="7_ function send(address recipient, uint256 amount, bytes calldata data) external;\n57-function_definition-8-8", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=function_definition];
72 [label="8_ function burn(uint256 amount, bytes calldata data) external;\n72-function_definition-9-9", method="burn(uint256 amount,bytes calldata data)", type_label=function_definition];
83 [label="9_ function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n83-function_definition-10-10", method="isOperatorFor(address operator,address tokenHolder)", type_label=function_definition];
99 [label="10_ function authorizeOperator(address operator) external;\n99-function_definition-11-11", method="authorizeOperator(address operator)", type_label=function_definition];
106 [label="11_ function revokeOperator(address operator) external;\n106-function_definition-12-12", method="revokeOperator(address operator)", type_label=function_definition];
113 [label="12_ function defaultOperators() external view returns (address[] memory);\n113-function_definition-13-13", method="defaultOperators()", type_label=function_definition];
122 [label="13_ function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n122-function_definition-14-20", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
145 [label="20_ function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n145-function_definition-21-26", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
257 [label="40_ function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n257-function_definition-41-48", method="tokensReceived(address operator,address from,address to,uint amount,bytes calldata userData,bytes calldata operatorData)", type_label=function_definition];
287 [label="50_ function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n287-function_definition-51-58", method="tokensToSend(address operator,address from,address to,uint amount,bytes calldata userData,bytes calldata operatorData)", type_label=function_definition];
317 [label="60_ function totalSupply() external view returns (uint256);\n317-function_definition-61-61", method="totalSupply()", type_label=function_definition];
325 [label="61_ function balanceOf(address account) external view returns (uint256);\n325-function_definition-62-62", method="balanceOf(address account)", type_label=function_definition];
337 [label="62_ function transfer(address recipient, uint256 amount) external returns (bool);\n337-function_definition-63-63", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
352 [label="63_ function allowance(address owner, address spender) external view returns (uint256);\n352-function_definition-64-64", method="allowance(address owner,address spender)", type_label=function_definition];
368 [label="64_ function approve(address spender, uint256 amount) external returns (bool);\n368-function_definition-65-65", method="approve(address spender,uint256 amount)", type_label=function_definition];
383 [label="65_ function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n383-function_definition-66-66", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
433 [label="70_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n433-function_definition-71-75", method="add(uint256 a,uint256 b)", type_label=function_definition];
450 [label="71_ uint256 c = a + b;\n450-new_variable-72-72", method="add(uint256 a,uint256 b)", type_label=new_variable];
458 [label="72_ require(c >= a, \"SafeMath: addition overflow\");\n458-expression_statement-73-73", method="add(uint256 a,uint256 b)", type_label=expression_statement];
468 [label="73_ return c;\n468-return-74-74", method="add(uint256 a,uint256 b)", type_label=return];
470 [label="75_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n470-function_definition-76-80", method="sub(uint256 a,uint256 b)", type_label=function_definition];
487 [label="76_ require(b <= a, \"SafeMath: subtraction overflow\");\n487-expression_statement-77-77", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
497 [label="77_ uint256 c = a - b;\n497-new_variable-78-78", method="sub(uint256 a,uint256 b)", type_label=new_variable];
505 [label="78_ return c;\n505-return-79-79", method="sub(uint256 a,uint256 b)", type_label=return];
507 [label="80_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n507-function_definition-81-88", method="mul(uint256 a,uint256 b)", type_label=function_definition];
524 [label="81_ if_a == 0\n524-if-82-84", method="mul(uint256 a,uint256 b)", type_label=if];
6089 [label="81_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
529 [label="82_ return 0;\n529-return-83-83", method="mul(uint256 a,uint256 b)", type_label=return];
531 [label="84_ uint256 c = a * b;\n531-new_variable-85-85", method="mul(uint256 a,uint256 b)", type_label=new_variable];
539 [label="85_ require(c / a == b, \"SafeMath: multiplication overflow\");\n539-expression_statement-86-86", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
551 [label="86_ return c;\n551-return-87-87", method="mul(uint256 a,uint256 b)", type_label=return];
553 [label="88_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n553-function_definition-89-93", method="div(uint256 a,uint256 b)", type_label=function_definition];
570 [label="89_ require(b > 0, \"SafeMath: division by zero\");\n570-expression_statement-90-90", method="div(uint256 a,uint256 b)", type_label=expression_statement];
580 [label="90_ uint256 c = a / b;\n580-new_variable-91-91", method="div(uint256 a,uint256 b)", type_label=new_variable];
588 [label="91_ return c;\n588-return-92-92", method="div(uint256 a,uint256 b)", type_label=return];
590 [label="93_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n590-function_definition-94-97", method="mod(uint256 a,uint256 b)", type_label=function_definition];
607 [label="94_ require(b != 0, \"SafeMath: modulo by zero\");\n607-expression_statement-95-95", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
617 [label="95_ return a % b;\n617-return-96-96", method="mod(uint256 a,uint256 b)", type_label=return];
624 [label="99_ function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n624-function_definition-100-104", method="isContract(address account)", type_label=function_definition];
637 [label="100_ uint256 size;\n637-new_variable-101-101", method="isContract(address account)", type_label=new_variable];
652 [label="102_ return size > 0;\n652-return-103-103", method="isContract(address account)", type_label=return];
659 [label="106_ function setManager(address account, address newManager) external;\n659-function_definition-107-107", method="setManager(address account,address newManager)", type_label=function_definition];
670 [label="107_ function getManager(address account) external view returns (address);\n670-function_definition-108-108", method="getManager(address account)", type_label=function_definition];
682 [label="108_ function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n682-function_definition-109-109", method="setInterfaceImplementer(address account,bytes32 interfaceHash,address implementer)", type_label=function_definition];
697 [label="109_ function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n697-function_definition-110-110", method="getInterfaceImplementer(address account,bytes32 interfaceHash)", type_label=function_definition];
713 [label="110_ function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n713-function_definition-111-111", method="interfaceHash(string calldata interfaceName)", type_label=function_definition];
725 [label="111_ function updateERC165Cache(address account, bytes4 interfaceId) external;\n725-function_definition-112-112", method="updateERC165Cache(address account,bytes4 interfaceId)", type_label=function_definition];
736 [label="112_ function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n736-function_definition-113-113", method="implementsERC165Interface(address account,bytes4 interfaceId)", type_label=function_definition];
752 [label="113_ function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n752-function_definition-114-114", method="implementsERC165InterfaceNoCache(address account,bytes4 interfaceId)", type_label=function_definition];
811 [label="120_ IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n811-new_variable-121-121", method="", type_label=new_variable];
821 [label="121_ mapping(address => uint256) private _balances;\n821-new_variable-122-122", method="", type_label=new_variable];
828 [label="122_ uint256 private _totalSupply;\n828-new_variable-123-123", method="", type_label=new_variable];
833 [label="123_ string private _name;\n833-new_variable-124-124", method="", type_label=new_variable];
838 [label="124_ string private _symbol;\n838-new_variable-125-125", method="", type_label=new_variable];
843 [label="125_ bytes32 constant private TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n843-new_variable-126-127", method="", type_label=new_variable];
849 [label="127_ bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n849-new_variable-128-129", method="", type_label=new_variable];
855 [label="129_ address[] private _defaultOperatorsArray;\n855-new_variable-130-130", method="", type_label=new_variable];
861 [label="130_ mapping(address => bool) private _defaultOperators;\n861-new_variable-131-131", method="", type_label=new_variable];
868 [label="131_ mapping(address => mapping(address => bool)) private _operators;\n868-new_variable-132-132", method="", type_label=new_variable];
877 [label="132_ mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n877-new_variable-133-133", method="", type_label=new_variable];
886 [label="133_ mapping (address => mapping (address => uint256)) private _allowances;\n886-new_variable-134-134", method="", type_label=new_variable];
910 [label="139_ _name = name;\n910-expression_statement-140-140", method="", type_label=expression_statement];
914 [label="140_ _symbol = symbol;\n914-expression_statement-141-141", method="", type_label=expression_statement];
918 [label="141_ _defaultOperatorsArray = defaultOperators;\n918-expression_statement-142-142", method="", type_label=expression_statement];
922 [label="142_ for(i < _defaultOperatorsArray.length;;i++)\n922-for-143-145", method="", type_label=for];
6487 [label="142_ end_loop", method="", type_label=end_loop];
935 [label="142_ i++\n935-expression_statement-143-143", method="", type_label=expression_statement];
938 [label="143_ _defaultOperators[_defaultOperatorsArray[i]] = true;\n938-expression_statement-144-144", method="", type_label=expression_statement];
947 [label="145_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n947-expression_statement-146-146", method="", type_label=expression_statement];
966 [label="146_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n966-expression_statement-147-147", method="", type_label=expression_statement];
985 [label="148_ function name() public view returns (string memory) {\n        return _name;\n    }\n985-function_definition-149-151", method="name()", type_label=function_definition];
994 [label="149_ return _name;\n994-return-150-150", method="name()", type_label=return];
996 [label="151_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n996-function_definition-152-154", method="symbol()", type_label=function_definition];
1005 [label="152_ return _symbol;\n1005-return-153-153", method="symbol()", type_label=return];
1007 [label="154_ function decimals() public pure returns (uint8) {\n        return 18;\n    }\n1007-function_definition-155-157", method="decimals()", type_label=function_definition];
1016 [label="155_ return 18;\n1016-return-156-156", method="decimals()", type_label=return];
1018 [label="157_ function granularity() public view returns (uint256) {\n        return 1;\n    }\n1018-function_definition-158-160", method="granularity()", type_label=function_definition];
1027 [label="158_ return 1;\n1027-return-159-159", method="granularity()", type_label=return];
1029 [label="160_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1029-function_definition-161-163", method="totalSupply()", type_label=function_definition];
1038 [label="161_ return _totalSupply;\n1038-return-162-162", method="totalSupply()", type_label=return];
1040 [label="163_ function balanceOf(address tokenHolder) public view returns (uint256) {\n        return _balances[tokenHolder];\n    }\n1040-function_definition-164-166", method="balanceOf(address tokenHolder)", type_label=function_definition];
1053 [label="164_ return _balances[tokenHolder];\n1053-return-165-165", method="balanceOf(address tokenHolder)", type_label=return];
1057 [label="166_ function send(address recipient, uint256 amount, bytes calldata data) external {\n        _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n    }\n1057-function_definition-167-169", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=function_definition];
1073 [label="167_ _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n1073-expression_statement-168-168", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=expression_statement];
1096 [label="169_ function transfer(address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        address from = msg.sender;\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n        _move(from, from, recipient, amount, \"\", \"\");\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n1096-function_definition-170-177", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
1112 [label="170_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n1112-expression_statement-171-171", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1124 [label="171_ address from = msg.sender;\n1124-new_variable-172-172", method="transfer(address recipient,uint256 amount)", type_label=new_variable];
1132 [label="172_ _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n1132-expression_statement-173-173", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1149 [label="173_ _move(from, from, recipient, amount, \"\", \"\");\n1149-expression_statement-174-174", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1166 [label="174_ _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n1166-expression_statement-175-175", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1186 [label="175_ return true;\n1186-return-176-176", method="transfer(address recipient,uint256 amount)", type_label=return];
1189 [label="177_ function burn(uint256 amount, bytes calldata data) external {\n        _burn(msg.sender, msg.sender, amount, data, \"\");\n    }\n1189-function_definition-178-180", method="burn(uint256 amount,bytes calldata data)", type_label=function_definition];
1201 [label="178_ _burn(msg.sender, msg.sender, amount, data, \"\");\n1201-expression_statement-179-179", method="burn(uint256 amount,bytes calldata data)", type_label=expression_statement];
1219 [label="180_ function isOperatorFor(\n        address operator,\n        address tokenHolder\n    ) public view returns (bool) {\n        return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n    }\n1219-function_definition-181-188", method="isOperatorFor(address operator,address tokenHolder)", type_label=function_definition];
1236 [label="184_ return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n1236-return-185-187", method="isOperatorFor(address operator,address tokenHolder)", type_label=return];
1258 [label="188_ bool claimed_TOD18 = false;\n1258-new_variable-189-189", method="", type_label=new_variable];
1264 [label="189_ address payable owner_TOD18;\n1264-new_variable-190-190", method="", type_label=new_variable];
1268 [label="190_ uint256 reward_TOD18;\n1268-new_variable-191-191", method="", type_label=new_variable];
1272 [label="191_ function setReward_TOD18() public payable {\n        require (!claimed_TOD18);\n        require(msg.sender == owner_TOD18);\n        owner_TOD18.transfer(reward_TOD18);\n        reward_TOD18 = msg.value;\n    }\n1272-function_definition-192-197", method="setReward_TOD18()", type_label=function_definition];
1277 [label="192_ require (!claimed_TOD18);\n1277-expression_statement-193-193", method="setReward_TOD18()", type_label=expression_statement];
1283 [label="193_ require(msg.sender == owner_TOD18);\n1283-expression_statement-194-194", method="setReward_TOD18()", type_label=expression_statement];
1292 [label="194_ owner_TOD18.transfer(reward_TOD18);\n1292-expression_statement-195-195", method="setReward_TOD18()", type_label=expression_statement];
1299 [label="195_ reward_TOD18 = msg.value;\n1299-expression_statement-196-196", method="setReward_TOD18()", type_label=expression_statement];
1305 [label="197_ function claimReward_TOD18(uint256 submission) public {\n        require (!claimed_TOD18);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD18);\n        claimed_TOD18 = true;\n    }\n1305-function_definition-198-203", method="claimReward_TOD18(uint256 submission)", type_label=function_definition];
1313 [label="198_ require (!claimed_TOD18);\n1313-expression_statement-199-199", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
1319 [label="199_ require(submission < 10);\n1319-expression_statement-200-200", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
1326 [label="200_ msg.sender.transfer(reward_TOD18);\n1326-expression_statement-201-201", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
1335 [label="201_ claimed_TOD18 = true;\n1335-expression_statement-202-202", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
1340 [label="203_ function authorizeOperator(address operator) external {\n        require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n        if (_defaultOperators[operator]) {\n            delete _revokedDefaultOperators[msg.sender][operator];\n        } else {\n            _operators[msg.sender][operator] = true;\n        }\n        emit AuthorizedOperator(operator, msg.sender);\n    }\n1340-function_definition-204-212", method="authorizeOperator(address operator)", type_label=function_definition];
1348 [label="204_ require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n1348-expression_statement-205-205", method="authorizeOperator(address operator)", type_label=expression_statement];
1360 [label="205_ if\n1360-if-206-210", method="authorizeOperator(address operator)", type_label=if];
6925 [label="205_ end_if", method="authorizeOperator(address operator)", type_label=end_if];
1365 [label="206_ delete _revokedDefaultOperators[msg.sender][operator];\n1365-expression_statement-207-207", method="authorizeOperator(address operator)", type_label=expression_statement];
1375 [label="208_ _operators[msg.sender][operator] = true;\n1375-expression_statement-209-209", method="authorizeOperator(address operator)", type_label=expression_statement];
1394 [label="212_ address payable winner_TOD29;\n1394-new_variable-213-213", method="", type_label=new_variable];
1398 [label="213_ function play_TOD29(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD29 = msg.sender;\n        }\n    }\n1398-function_definition-214-218", method="play_TOD29(bytes32 guess)", type_label=function_definition];
1406 [label="214_ if\n1406-if-215-217", method="play_TOD29(bytes32 guess)", type_label=if];
6971 [label="214_ end_if", method="play_TOD29(bytes32 guess)", type_label=end_if];
1428 [label="215_ winner_TOD29 = msg.sender;\n1428-expression_statement-216-216", method="play_TOD29(bytes32 guess)", type_label=expression_statement];
1434 [label="218_ function getReward_TOD29() payable public{\n       winner_TOD29.transfer(msg.value);\n    }\n1434-function_definition-219-221", method="getReward_TOD29()", type_label=function_definition];
1439 [label="219_ winner_TOD29.transfer(msg.value);\n1439-expression_statement-220-220", method="getReward_TOD29()", type_label=expression_statement];
1448 [label="221_ function revokeOperator(address operator) external {\n        require(operator != msg.sender, \"ERC777: revoking self as operator\");\n        if (_defaultOperators[operator]) {\n            _revokedDefaultOperators[msg.sender][operator] = true;\n        } else {\n            delete _operators[msg.sender][operator];\n        }\n        emit RevokedOperator(operator, msg.sender);\n    }\n1448-function_definition-222-230", method="revokeOperator(address operator)", type_label=function_definition];
1456 [label="222_ require(operator != msg.sender, \"ERC777: revoking self as operator\");\n1456-expression_statement-223-223", method="revokeOperator(address operator)", type_label=expression_statement];
1468 [label="223_ if\n1468-if-224-228", method="revokeOperator(address operator)", type_label=if];
7033 [label="223_ end_if", method="revokeOperator(address operator)", type_label=end_if];
1473 [label="224_ _revokedDefaultOperators[msg.sender][operator] = true;\n1473-expression_statement-225-225", method="revokeOperator(address operator)", type_label=expression_statement];
1485 [label="226_ delete _operators[msg.sender][operator];\n1485-expression_statement-227-227", method="revokeOperator(address operator)", type_label=expression_statement];
1502 [label="230_ bool claimed_TOD6 = false;\n1502-new_variable-231-231", method="", type_label=new_variable];
1508 [label="231_ address payable owner_TOD6;\n1508-new_variable-232-232", method="", type_label=new_variable];
1512 [label="232_ uint256 reward_TOD6;\n1512-new_variable-233-233", method="", type_label=new_variable];
1516 [label="233_ function setReward_TOD6() public payable {\n        require (!claimed_TOD6);\n        require(msg.sender == owner_TOD6);\n        owner_TOD6.transfer(reward_TOD6);\n        reward_TOD6 = msg.value;\n    }\n1516-function_definition-234-239", method="setReward_TOD6()", type_label=function_definition];
1521 [label="234_ require (!claimed_TOD6);\n1521-expression_statement-235-235", method="setReward_TOD6()", type_label=expression_statement];
1527 [label="235_ require(msg.sender == owner_TOD6);\n1527-expression_statement-236-236", method="setReward_TOD6()", type_label=expression_statement];
1536 [label="236_ owner_TOD6.transfer(reward_TOD6);\n1536-expression_statement-237-237", method="setReward_TOD6()", type_label=expression_statement];
1543 [label="237_ reward_TOD6 = msg.value;\n1543-expression_statement-238-238", method="setReward_TOD6()", type_label=expression_statement];
1549 [label="239_ function claimReward_TOD6(uint256 submission) public {\n        require (!claimed_TOD6);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD6);\n        claimed_TOD6 = true;\n    }\n1549-function_definition-240-245", method="claimReward_TOD6(uint256 submission)", type_label=function_definition];
1557 [label="240_ require (!claimed_TOD6);\n1557-expression_statement-241-241", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
1563 [label="241_ require(submission < 10);\n1563-expression_statement-242-242", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
1570 [label="242_ msg.sender.transfer(reward_TOD6);\n1570-expression_statement-243-243", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
1579 [label="243_ claimed_TOD6 = true;\n1579-expression_statement-244-244", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
1584 [label="245_ function defaultOperators() public view returns (address[] memory) {\n        return _defaultOperatorsArray;\n    }\n1584-function_definition-246-248", method="defaultOperators()", type_label=function_definition];
1594 [label="246_ return _defaultOperatorsArray;\n1594-return-247-247", method="defaultOperators()", type_label=return];
1596 [label="248_ bool claimed_TOD16 = false;\n1596-new_variable-249-249", method="", type_label=new_variable];
1602 [label="249_ address payable owner_TOD16;\n1602-new_variable-250-250", method="", type_label=new_variable];
1606 [label="250_ uint256 reward_TOD16;\n1606-new_variable-251-251", method="", type_label=new_variable];
1610 [label="251_ function setReward_TOD16() public payable {\n        require (!claimed_TOD16);\n        require(msg.sender == owner_TOD16);\n        owner_TOD16.transfer(reward_TOD16);\n        reward_TOD16 = msg.value;\n    }\n1610-function_definition-252-257", method="setReward_TOD16()", type_label=function_definition];
1615 [label="252_ require (!claimed_TOD16);\n1615-expression_statement-253-253", method="setReward_TOD16()", type_label=expression_statement];
1621 [label="253_ require(msg.sender == owner_TOD16);\n1621-expression_statement-254-254", method="setReward_TOD16()", type_label=expression_statement];
1630 [label="254_ owner_TOD16.transfer(reward_TOD16);\n1630-expression_statement-255-255", method="setReward_TOD16()", type_label=expression_statement];
1637 [label="255_ reward_TOD16 = msg.value;\n1637-expression_statement-256-256", method="setReward_TOD16()", type_label=expression_statement];
1643 [label="257_ function claimReward_TOD16(uint256 submission) public {\n        require (!claimed_TOD16);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD16);\n        claimed_TOD16 = true;\n    }\n1643-function_definition-258-263", method="claimReward_TOD16(uint256 submission)", type_label=function_definition];
1651 [label="258_ require (!claimed_TOD16);\n1651-expression_statement-259-259", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
1657 [label="259_ require(submission < 10);\n1657-expression_statement-260-260", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
1664 [label="260_ msg.sender.transfer(reward_TOD16);\n1664-expression_statement-261-261", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
1673 [label="261_ claimed_TOD16 = true;\n1673-expression_statement-262-262", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
1678 [label="263_ function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    )\n    external\n    {\n        require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n        _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n    }\n1678-function_definition-264-275", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
1702 [label="272_ require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n1702-expression_statement-273-273", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1717 [label="273_ _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n1717-expression_statement-274-274", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1737 [label="275_ bool claimed_TOD24 = false;\n1737-new_variable-276-276", method="", type_label=new_variable];
1743 [label="276_ address payable owner_TOD24;\n1743-new_variable-277-277", method="", type_label=new_variable];
1747 [label="277_ uint256 reward_TOD24;\n1747-new_variable-278-278", method="", type_label=new_variable];
1751 [label="278_ function setReward_TOD24() public payable {\n        require (!claimed_TOD24);\n        require(msg.sender == owner_TOD24);\n        owner_TOD24.transfer(reward_TOD24);\n        reward_TOD24 = msg.value;\n    }\n1751-function_definition-279-284", method="setReward_TOD24()", type_label=function_definition];
1756 [label="279_ require (!claimed_TOD24);\n1756-expression_statement-280-280", method="setReward_TOD24()", type_label=expression_statement];
1762 [label="280_ require(msg.sender == owner_TOD24);\n1762-expression_statement-281-281", method="setReward_TOD24()", type_label=expression_statement];
1771 [label="281_ owner_TOD24.transfer(reward_TOD24);\n1771-expression_statement-282-282", method="setReward_TOD24()", type_label=expression_statement];
1778 [label="282_ reward_TOD24 = msg.value;\n1778-expression_statement-283-283", method="setReward_TOD24()", type_label=expression_statement];
1784 [label="284_ function claimReward_TOD24(uint256 submission) public {\n        require (!claimed_TOD24);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD24);\n        claimed_TOD24 = true;\n    }\n1784-function_definition-285-290", method="claimReward_TOD24(uint256 submission)", type_label=function_definition];
1792 [label="285_ require (!claimed_TOD24);\n1792-expression_statement-286-286", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
1798 [label="286_ require(submission < 10);\n1798-expression_statement-287-287", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
1805 [label="287_ msg.sender.transfer(reward_TOD24);\n1805-expression_statement-288-288", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
1814 [label="288_ claimed_TOD24 = true;\n1814-expression_statement-289-289", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
1819 [label="290_ function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external {\n        require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n        _burn(msg.sender, account, amount, data, operatorData);\n    }\n1819-function_definition-291-294", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
1839 [label="291_ require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n1839-expression_statement-292-292", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1854 [label="292_ _burn(msg.sender, account, amount, data, operatorData);\n1854-expression_statement-293-293", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1869 [label="294_ address payable winner_TOD5;\n1869-new_variable-295-295", method="", type_label=new_variable];
1873 [label="295_ function play_TOD5(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD5 = msg.sender;\n        }\n    }\n1873-function_definition-296-300", method="play_TOD5(bytes32 guess)", type_label=function_definition];
1881 [label="296_ if\n1881-if-297-299", method="play_TOD5(bytes32 guess)", type_label=if];
7446 [label="296_ end_if", method="play_TOD5(bytes32 guess)", type_label=end_if];
1903 [label="297_ winner_TOD5 = msg.sender;\n1903-expression_statement-298-298", method="play_TOD5(bytes32 guess)", type_label=expression_statement];
1909 [label="300_ function getReward_TOD5() payable public{\n       winner_TOD5.transfer(msg.value);\n    }\n1909-function_definition-301-303", method="getReward_TOD5()", type_label=function_definition];
1914 [label="301_ winner_TOD5.transfer(msg.value);\n1914-expression_statement-302-302", method="getReward_TOD5()", type_label=expression_statement];
1923 [label="303_ function allowance(address holder, address spender) public view returns (uint256) {\n        return _allowances[holder][spender];\n    }\n1923-function_definition-304-306", method="allowance(address holder,address spender)", type_label=function_definition];
1940 [label="304_ return _allowances[holder][spender];\n1940-return-305-305", method="allowance(address holder,address spender)", type_label=return];
1946 [label="306_ address payable winner_TOD15;\n1946-new_variable-307-307", method="", type_label=new_variable];
1950 [label="307_ function play_TOD15(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD15 = msg.sender;\n        }\n    }\n1950-function_definition-308-312", method="play_TOD15(bytes32 guess)", type_label=function_definition];
1958 [label="308_ if\n1958-if-309-311", method="play_TOD15(bytes32 guess)", type_label=if];
7523 [label="308_ end_if", method="play_TOD15(bytes32 guess)", type_label=end_if];
1980 [label="309_ winner_TOD15 = msg.sender;\n1980-expression_statement-310-310", method="play_TOD15(bytes32 guess)", type_label=expression_statement];
1986 [label="312_ function getReward_TOD15() payable public{\n       winner_TOD15.transfer(msg.value);\n    }\n1986-function_definition-313-315", method="getReward_TOD15()", type_label=function_definition];
1991 [label="313_ winner_TOD15.transfer(msg.value);\n1991-expression_statement-314-314", method="getReward_TOD15()", type_label=expression_statement];
2000 [label="315_ function approve(address spender, uint256 value) external returns (bool) {\n        address holder = msg.sender;\n        _approve(holder, spender, value);\n        return true;\n    }\n2000-function_definition-316-320", method="approve(address spender,uint256 value)", type_label=function_definition];
2016 [label="316_ address holder = msg.sender;\n2016-new_variable-317-317", method="approve(address spender,uint256 value)", type_label=new_variable];
2024 [label="317_ _approve(holder, spender, value);\n2024-expression_statement-318-318", method="approve(address spender,uint256 value)", type_label=expression_statement];
2033 [label="318_ return true;\n2033-return-319-319", method="approve(address spender,uint256 value)", type_label=return];
2036 [label="320_ bool claimed_TOD28 = false;\n2036-new_variable-321-321", method="", type_label=new_variable];
2042 [label="321_ address payable owner_TOD28;\n2042-new_variable-322-322", method="", type_label=new_variable];
2046 [label="322_ uint256 reward_TOD28;\n2046-new_variable-323-323", method="", type_label=new_variable];
2050 [label="323_ function setReward_TOD28() public payable {\n        require (!claimed_TOD28);\n        require(msg.sender == owner_TOD28);\n        owner_TOD28.transfer(reward_TOD28);\n        reward_TOD28 = msg.value;\n    }\n2050-function_definition-324-329", method="setReward_TOD28()", type_label=function_definition];
2055 [label="324_ require (!claimed_TOD28);\n2055-expression_statement-325-325", method="setReward_TOD28()", type_label=expression_statement];
2061 [label="325_ require(msg.sender == owner_TOD28);\n2061-expression_statement-326-326", method="setReward_TOD28()", type_label=expression_statement];
2070 [label="326_ owner_TOD28.transfer(reward_TOD28);\n2070-expression_statement-327-327", method="setReward_TOD28()", type_label=expression_statement];
2077 [label="327_ reward_TOD28 = msg.value;\n2077-expression_statement-328-328", method="setReward_TOD28()", type_label=expression_statement];
2083 [label="329_ function claimReward_TOD28(uint256 submission) public {\n        require (!claimed_TOD28);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD28);\n        claimed_TOD28 = true;\n    }\n2083-function_definition-330-335", method="claimReward_TOD28(uint256 submission)", type_label=function_definition];
2091 [label="330_ require (!claimed_TOD28);\n2091-expression_statement-331-331", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
2097 [label="331_ require(submission < 10);\n2097-expression_statement-332-332", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
2104 [label="332_ msg.sender.transfer(reward_TOD28);\n2104-expression_statement-333-333", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
2113 [label="333_ claimed_TOD28 = true;\n2113-expression_statement-334-334", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
2118 [label="335_ function transferFrom(address holder, address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\n        address spender = msg.sender;\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n        _move(spender, holder, recipient, amount, \"\", \"\");\n        _approve(holder, spender, _allowances[holder][spender].sub(amount));\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n2118-function_definition-336-345", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=function_definition];
2138 [label="336_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n2138-expression_statement-337-337", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2150 [label="337_ require(holder != address(0), \"ERC777: transfer from the zero address\");\n2150-expression_statement-338-338", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2162 [label="338_ address spender = msg.sender;\n2162-new_variable-339-339", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=new_variable];
2170 [label="339_ _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n2170-expression_statement-340-340", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2187 [label="340_ _move(spender, holder, recipient, amount, \"\", \"\");\n2187-expression_statement-341-341", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2204 [label="341_ _approve(holder, spender, _allowances[holder][spender].sub(amount));\n2204-expression_statement-342-342", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2222 [label="342_ _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n2222-expression_statement-343-343", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2242 [label="343_ return true;\n2242-return-344-344", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=return];
2245 [label="345_ bool claimed_TOD34 = false;\n2245-new_variable-346-346", method="", type_label=new_variable];
2251 [label="346_ address payable owner_TOD34;\n2251-new_variable-347-347", method="", type_label=new_variable];
2255 [label="347_ uint256 reward_TOD34;\n2255-new_variable-348-348", method="", type_label=new_variable];
2259 [label="348_ function setReward_TOD34() public payable {\n        require (!claimed_TOD34);\n        require(msg.sender == owner_TOD34);\n        owner_TOD34.transfer(reward_TOD34);\n        reward_TOD34 = msg.value;\n    }\n2259-function_definition-349-354", method="setReward_TOD34()", type_label=function_definition];
2264 [label="349_ require (!claimed_TOD34);\n2264-expression_statement-350-350", method="setReward_TOD34()", type_label=expression_statement];
2270 [label="350_ require(msg.sender == owner_TOD34);\n2270-expression_statement-351-351", method="setReward_TOD34()", type_label=expression_statement];
2279 [label="351_ owner_TOD34.transfer(reward_TOD34);\n2279-expression_statement-352-352", method="setReward_TOD34()", type_label=expression_statement];
2286 [label="352_ reward_TOD34 = msg.value;\n2286-expression_statement-353-353", method="setReward_TOD34()", type_label=expression_statement];
2292 [label="354_ function claimReward_TOD34(uint256 submission) public {\n        require (!claimed_TOD34);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD34);\n        claimed_TOD34 = true;\n    }\n2292-function_definition-355-360", method="claimReward_TOD34(uint256 submission)", type_label=function_definition];
2300 [label="355_ require (!claimed_TOD34);\n2300-expression_statement-356-356", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
2306 [label="356_ require(submission < 10);\n2306-expression_statement-357-357", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
2313 [label="357_ msg.sender.transfer(reward_TOD34);\n2313-expression_statement-358-358", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
2322 [label="358_ claimed_TOD34 = true;\n2322-expression_statement-359-359", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
2327 [label="360_ function _mint(\n        address operator,\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n    internal\n    {\n        require(account != address(0), \"ERC777: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n2327-function_definition-361-376", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2351 [label="369_ require(account != address(0), \"ERC777: mint to the zero address\");\n2351-expression_statement-370-370", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2363 [label="370_ _totalSupply = _totalSupply.add(amount);\n2363-expression_statement-371-371", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2372 [label="371_ _balances[account] = _balances[account].add(amount);\n2372-expression_statement-372-372", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2385 [label="372_ _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n2385-expression_statement-373-373", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2427 [label="376_ address payable winner_TOD21;\n2427-new_variable-377-377", method="", type_label=new_variable];
2431 [label="377_ function play_TOD21(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD21 = msg.sender;\n        }\n    }\n2431-function_definition-378-382", method="play_TOD21(bytes32 guess)", type_label=function_definition];
2439 [label="378_ if\n2439-if-379-381", method="play_TOD21(bytes32 guess)", type_label=if];
8004 [label="378_ end_if", method="play_TOD21(bytes32 guess)", type_label=end_if];
2461 [label="379_ winner_TOD21 = msg.sender;\n2461-expression_statement-380-380", method="play_TOD21(bytes32 guess)", type_label=expression_statement];
2467 [label="382_ function getReward_TOD21() payable public{\n       winner_TOD21.transfer(msg.value);\n    }\n2467-function_definition-383-385", method="getReward_TOD21()", type_label=function_definition];
2472 [label="383_ winner_TOD21.transfer(msg.value);\n2472-expression_statement-384-384", method="getReward_TOD21()", type_label=expression_statement];
2481 [label="385_ function _send(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        require(from != address(0), \"ERC777: send from the zero address\");\n        require(to != address(0), \"ERC777: send to the zero address\");\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n        _move(operator, from, to, amount, userData, operatorData);\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n2481-function_definition-386-402", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=function_definition];
2513 [label="396_ require(from != address(0), \"ERC777: send from the zero address\");\n2513-expression_statement-397-397", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2525 [label="397_ require(to != address(0), \"ERC777: send to the zero address\");\n2525-expression_statement-398-398", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2537 [label="398_ _callTokensToSend(operator, from, to, amount, userData, operatorData);\n2537-expression_statement-399-399", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2552 [label="399_ _move(operator, from, to, amount, userData, operatorData);\n2552-expression_statement-400-400", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2567 [label="400_ _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n2567-expression_statement-401-401", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2584 [label="402_ bool claimed_TOD10 = false;\n2584-new_variable-403-403", method="", type_label=new_variable];
2590 [label="403_ address payable owner_TOD10;\n2590-new_variable-404-404", method="", type_label=new_variable];
2594 [label="404_ uint256 reward_TOD10;\n2594-new_variable-405-405", method="", type_label=new_variable];
2598 [label="405_ function setReward_TOD10() public payable {\n        require (!claimed_TOD10);\n        require(msg.sender == owner_TOD10);\n        owner_TOD10.transfer(reward_TOD10);\n        reward_TOD10 = msg.value;\n    }\n2598-function_definition-406-411", method="setReward_TOD10()", type_label=function_definition];
2603 [label="406_ require (!claimed_TOD10);\n2603-expression_statement-407-407", method="setReward_TOD10()", type_label=expression_statement];
2609 [label="407_ require(msg.sender == owner_TOD10);\n2609-expression_statement-408-408", method="setReward_TOD10()", type_label=expression_statement];
2618 [label="408_ owner_TOD10.transfer(reward_TOD10);\n2618-expression_statement-409-409", method="setReward_TOD10()", type_label=expression_statement];
2625 [label="409_ reward_TOD10 = msg.value;\n2625-expression_statement-410-410", method="setReward_TOD10()", type_label=expression_statement];
2631 [label="411_ function claimReward_TOD10(uint256 submission) public {\n        require (!claimed_TOD10);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD10);\n        claimed_TOD10 = true;\n    }\n2631-function_definition-412-417", method="claimReward_TOD10(uint256 submission)", type_label=function_definition];
2639 [label="412_ require (!claimed_TOD10);\n2639-expression_statement-413-413", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
2645 [label="413_ require(submission < 10);\n2645-expression_statement-414-414", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
2652 [label="414_ msg.sender.transfer(reward_TOD10);\n2652-expression_statement-415-415", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
2661 [label="415_ claimed_TOD10 = true;\n2661-expression_statement-416-416", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
2666 [label="417_ function _burn(\n        address operator,\n        address from,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n        private\n    {\n        require(from != address(0), \"ERC777: burn from the zero address\");\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[from] = _balances[from].sub(amount);\n        emit Burned(operator, from, amount, data, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n2666-function_definition-418-433", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=function_definition];
2690 [label="426_ require(from != address(0), \"ERC777: burn from the zero address\");\n2690-expression_statement-427-427", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2702 [label="427_ _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n2702-expression_statement-428-428", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2719 [label="428_ _totalSupply = _totalSupply.sub(amount);\n2719-expression_statement-429-429", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2728 [label="429_ _balances[from] = _balances[from].sub(amount);\n2728-expression_statement-430-430", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2763 [label="433_ bool claimed_TOD22 = false;\n2763-new_variable-434-434", method="", type_label=new_variable];
2769 [label="434_ address payable owner_TOD22;\n2769-new_variable-435-435", method="", type_label=new_variable];
2773 [label="435_ uint256 reward_TOD22;\n2773-new_variable-436-436", method="", type_label=new_variable];
2777 [label="436_ function setReward_TOD22() public payable {\n        require (!claimed_TOD22);\n        require(msg.sender == owner_TOD22);\n        owner_TOD22.transfer(reward_TOD22);\n        reward_TOD22 = msg.value;\n    }\n2777-function_definition-437-442", method="setReward_TOD22()", type_label=function_definition];
2782 [label="437_ require (!claimed_TOD22);\n2782-expression_statement-438-438", method="setReward_TOD22()", type_label=expression_statement];
2788 [label="438_ require(msg.sender == owner_TOD22);\n2788-expression_statement-439-439", method="setReward_TOD22()", type_label=expression_statement];
2797 [label="439_ owner_TOD22.transfer(reward_TOD22);\n2797-expression_statement-440-440", method="setReward_TOD22()", type_label=expression_statement];
2804 [label="440_ reward_TOD22 = msg.value;\n2804-expression_statement-441-441", method="setReward_TOD22()", type_label=expression_statement];
2810 [label="442_ function claimReward_TOD22(uint256 submission) public {\n        require (!claimed_TOD22);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD22);\n        claimed_TOD22 = true;\n    }\n2810-function_definition-443-448", method="claimReward_TOD22(uint256 submission)", type_label=function_definition];
2818 [label="443_ require (!claimed_TOD22);\n2818-expression_statement-444-444", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
2824 [label="444_ require(submission < 10);\n2824-expression_statement-445-445", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
2831 [label="445_ msg.sender.transfer(reward_TOD22);\n2831-expression_statement-446-446", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
2840 [label="446_ claimed_TOD22 = true;\n2840-expression_statement-447-447", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
2845 [label="448_ function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount);\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n2845-function_definition-449-463", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2873 [label="458_ _balances[from] = _balances[from].sub(amount);\n2873-expression_statement-459-459", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2886 [label="459_ _balances[to] = _balances[to].add(amount);\n2886-expression_statement-460-460", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2921 [label="463_ bool claimed_TOD12 = false;\n2921-new_variable-464-464", method="", type_label=new_variable];
2927 [label="464_ address payable owner_TOD12;\n2927-new_variable-465-465", method="", type_label=new_variable];
2931 [label="465_ uint256 reward_TOD12;\n2931-new_variable-466-466", method="", type_label=new_variable];
2935 [label="466_ function setReward_TOD12() public payable {\n        require (!claimed_TOD12);\n        require(msg.sender == owner_TOD12);\n        owner_TOD12.transfer(reward_TOD12);\n        reward_TOD12 = msg.value;\n    }\n2935-function_definition-467-472", method="setReward_TOD12()", type_label=function_definition];
2940 [label="467_ require (!claimed_TOD12);\n2940-expression_statement-468-468", method="setReward_TOD12()", type_label=expression_statement];
2946 [label="468_ require(msg.sender == owner_TOD12);\n2946-expression_statement-469-469", method="setReward_TOD12()", type_label=expression_statement];
2955 [label="469_ owner_TOD12.transfer(reward_TOD12);\n2955-expression_statement-470-470", method="setReward_TOD12()", type_label=expression_statement];
2962 [label="470_ reward_TOD12 = msg.value;\n2962-expression_statement-471-471", method="setReward_TOD12()", type_label=expression_statement];
2968 [label="472_ function claimReward_TOD12(uint256 submission) public {\n        require (!claimed_TOD12);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD12);\n        claimed_TOD12 = true;\n    }\n2968-function_definition-473-478", method="claimReward_TOD12(uint256 submission)", type_label=function_definition];
2976 [label="473_ require (!claimed_TOD12);\n2976-expression_statement-474-474", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
2982 [label="474_ require(submission < 10);\n2982-expression_statement-475-475", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
2989 [label="475_ msg.sender.transfer(reward_TOD12);\n2989-expression_statement-476-476", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
2998 [label="476_ claimed_TOD12 = true;\n2998-expression_statement-477-477", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
3003 [label="478_ function _approve(address holder, address spender, uint256 value) private {\n        require(spender != address(0), \"ERC777: approve to the zero address\");\n        _allowances[holder][spender] = value;\n        emit Approval(holder, spender, value);\n    }\n3003-function_definition-479-483", method="_approve(address holder,address spender,uint256 value)", type_label=function_definition];
3019 [label="479_ require(spender != address(0), \"ERC777: approve to the zero address\");\n3019-expression_statement-480-480", method="_approve(address holder,address spender,uint256 value)", type_label=expression_statement];
3031 [label="480_ _allowances[holder][spender] = value;\n3031-expression_statement-481-481", method="_approve(address holder,address spender,uint256 value)", type_label=expression_statement];
3047 [label="483_ address payable winner_TOD11;\n3047-new_variable-484-484", method="", type_label=new_variable];
3051 [label="484_ function play_TOD11(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD11 = msg.sender;\n        }\n    }\n3051-function_definition-485-489", method="play_TOD11(bytes32 guess)", type_label=function_definition];
3059 [label="485_ if\n3059-if-486-488", method="play_TOD11(bytes32 guess)", type_label=if];
8624 [label="485_ end_if", method="play_TOD11(bytes32 guess)", type_label=end_if];
3081 [label="486_ winner_TOD11 = msg.sender;\n3081-expression_statement-487-487", method="play_TOD11(bytes32 guess)", type_label=expression_statement];
3087 [label="489_ function getReward_TOD11() payable public{\n       winner_TOD11.transfer(msg.value);\n    }\n3087-function_definition-490-492", method="getReward_TOD11()", type_label=function_definition];
3092 [label="490_ winner_TOD11.transfer(msg.value);\n3092-expression_statement-491-491", method="getReward_TOD11()", type_label=expression_statement];
3101 [label="492_ function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n3101-function_definition-493-507", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
3129 [label="502_ address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n3129-new_variable-503-503", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=new_variable];
3142 [label="503_ if_implementer != address(0)\n3142-if-504-506", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=if];
8707 [label="503_ end_if", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=end_if];
3149 [label="504_ IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n3149-expression_statement-505-505", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
3169 [label="507_ address payable winner_TOD1;\n3169-new_variable-508-508", method="", type_label=new_variable];
3173 [label="508_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n3173-function_definition-509-513", method="play_TOD1(bytes32 guess)", type_label=function_definition];
3181 [label="509_ if\n3181-if-510-512", method="play_TOD1(bytes32 guess)", type_label=if];
8746 [label="509_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
3203 [label="510_ winner_TOD1 = msg.sender;\n3203-expression_statement-511-511", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
3209 [label="513_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n3209-function_definition-514-516", method="getReward_TOD1()", type_label=function_definition];
3214 [label="514_ winner_TOD1.transfer(msg.value);\n3214-expression_statement-515-515", method="getReward_TOD1()", type_label=expression_statement];
3223 [label="516_ function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n        }\n    }\n3223-function_definition-517-534", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=function_definition];
3255 [label="527_ address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n3255-new_variable-528-528", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=new_variable];
3268 [label="528_ if_implementer != address(0)\n3268-if-529-533", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=if];
8833 [label="528_ end_if", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=end_if];
3275 [label="529_ IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n3275-expression_statement-530-530", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
3295 [label="530_ if\n3295-if-531-533", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=if];
3298 [label="531_ require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n3298-expression_statement-532-532", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
3310 [label="534_ bool claimed_TOD2 = false;\n3310-new_variable-535-535", method="", type_label=new_variable];
3316 [label="535_ address payable owner_TOD2;\n3316-new_variable-536-536", method="", type_label=new_variable];
3320 [label="536_ uint256 reward_TOD2;\n3320-new_variable-537-537", method="", type_label=new_variable];
3324 [label="537_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n3324-function_definition-538-543", method="setReward_TOD2()", type_label=function_definition];
3329 [label="538_ require (!claimed_TOD2);\n3329-expression_statement-539-539", method="setReward_TOD2()", type_label=expression_statement];
3335 [label="539_ require(msg.sender == owner_TOD2);\n3335-expression_statement-540-540", method="setReward_TOD2()", type_label=expression_statement];
3344 [label="540_ owner_TOD2.transfer(reward_TOD2);\n3344-expression_statement-541-541", method="setReward_TOD2()", type_label=expression_statement];
3351 [label="541_ reward_TOD2 = msg.value;\n3351-expression_statement-542-542", method="setReward_TOD2()", type_label=expression_statement];
3357 [label="543_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n3357-function_definition-544-549", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
3365 [label="544_ require (!claimed_TOD2);\n3365-expression_statement-545-545", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
3371 [label="545_ require(submission < 10);\n3371-expression_statement-546-546", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
3378 [label="546_ msg.sender.transfer(reward_TOD2);\n3378-expression_statement-547-547", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
3387 [label="547_ claimed_TOD2 = true;\n3387-expression_statement-548-548", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
3395 [label="551_ struct Role {\n        mapping (address => bool) bearer;\n    }\n3395-expression_statement-552-554", method="Role()", type_label=expression_statement];
3403 [label="554_ function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n3403-function_definition-555-558", method="add(Role storage role,address account)", type_label=function_definition];
3416 [label="555_ require(!has(role, account), \"Roles: account already has role\");\n3416-expression_statement-556-556", method="add(Role storage role,address account)", type_label=expression_statement];
3430 [label="556_ role.bearer[account] = true;\n3430-expression_statement-557-557", method="add(Role storage role,address account)", type_label=expression_statement];
3439 [label="558_ function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n3439-function_definition-559-562", method="remove(Role storage role,address account)", type_label=function_definition];
3452 [label="559_ require(has(role, account), \"Roles: account does not have role\");\n3452-expression_statement-560-560", method="remove(Role storage role,address account)", type_label=expression_statement];
3465 [label="560_ role.bearer[account] = false;\n3465-expression_statement-561-561", method="remove(Role storage role,address account)", type_label=expression_statement];
3474 [label="562_ function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n3474-function_definition-563-566", method="has(Role storage role,address account)", type_label=function_definition];
3492 [label="563_ require(account != address(0), \"Roles: account is the zero address\");\n3492-expression_statement-564-564", method="has(Role storage role,address account)", type_label=expression_statement];
3504 [label="564_ return role.bearer[account];\n3504-return-565-565", method="has(Role storage role,address account)", type_label=return];
3520 [label="569_ address payable winner_TOD35;\n3520-new_variable-570-570", method="", type_label=new_variable];
3524 [label="570_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n3524-function_definition-571-575", method="play_TOD35(bytes32 guess)", type_label=function_definition];
3532 [label="571_ if\n3532-if-572-574", method="play_TOD35(bytes32 guess)", type_label=if];
9097 [label="571_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
3554 [label="572_ winner_TOD35 = msg.sender;\n3554-expression_statement-573-573", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
3560 [label="575_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n3560-function_definition-576-578", method="getReward_TOD35()", type_label=function_definition];
3565 [label="576_ winner_TOD35.transfer(msg.value);\n3565-expression_statement-577-577", method="getReward_TOD35()", type_label=expression_statement];
3580 [label="579_ bool claimed_TOD40 = false;\n3580-new_variable-580-580", method="", type_label=new_variable];
3586 [label="580_ address payable owner_TOD40;\n3586-new_variable-581-581", method="", type_label=new_variable];
3590 [label="581_ uint256 reward_TOD40;\n3590-new_variable-582-582", method="", type_label=new_variable];
3594 [label="582_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n3594-function_definition-583-588", method="setReward_TOD40()", type_label=function_definition];
3599 [label="583_ require (!claimed_TOD40);\n3599-expression_statement-584-584", method="setReward_TOD40()", type_label=expression_statement];
3605 [label="584_ require(msg.sender == owner_TOD40);\n3605-expression_statement-585-585", method="setReward_TOD40()", type_label=expression_statement];
3614 [label="585_ owner_TOD40.transfer(reward_TOD40);\n3614-expression_statement-586-586", method="setReward_TOD40()", type_label=expression_statement];
3621 [label="586_ reward_TOD40 = msg.value;\n3621-expression_statement-587-587", method="setReward_TOD40()", type_label=expression_statement];
3627 [label="588_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n3627-function_definition-589-594", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
3635 [label="589_ require (!claimed_TOD40);\n3635-expression_statement-590-590", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3641 [label="590_ require(submission < 10);\n3641-expression_statement-591-591", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3648 [label="591_ msg.sender.transfer(reward_TOD40);\n3648-expression_statement-592-592", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3657 [label="592_ claimed_TOD40 = true;\n3657-expression_statement-593-593", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3668 [label="595_ Roles.Role private _minters;\n3668-new_variable-596-596", method="", type_label=new_variable];
3677 [label="597_ _addMinter(msg.sender);\n3677-expression_statement-598-598", method="", type_label=expression_statement];
3684 [label="599_ address payable winner_TOD17;\n3684-new_variable-600-600", method="", type_label=new_variable];
3688 [label="600_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n3688-function_definition-601-605", method="play_TOD17(bytes32 guess)", type_label=function_definition];
3696 [label="601_ if\n3696-if-602-604", method="play_TOD17(bytes32 guess)", type_label=if];
9261 [label="601_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
3718 [label="602_ winner_TOD17 = msg.sender;\n3718-expression_statement-603-603", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
3724 [label="605_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n3724-function_definition-606-608", method="getReward_TOD17()", type_label=function_definition];
3729 [label="606_ winner_TOD17.transfer(msg.value);\n3729-expression_statement-607-607", method="getReward_TOD17()", type_label=expression_statement];
3738 [label="608_ modifier onlyMinter() {\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n3738-expression_statement-609-612", method="", type_label=expression_statement];
3741 [label="609_ require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n3741-expression_statement-610-610", method="", type_label=expression_statement];
3754 [label="610_ _;\n3754-expression_statement-611-611", method="", type_label=expression_statement];
3756 [label="612_ function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n3756-function_definition-613-615", method="isMinter(address account)", type_label=function_definition];
3769 [label="613_ return _minters.has(account);\n3769-return-614-614", method="isMinter(address account)", type_label=return];
3776 [label="615_ address payable winner_TOD37;\n3776-new_variable-616-616", method="", type_label=new_variable];
3780 [label="616_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n3780-function_definition-617-621", method="play_TOD37(bytes32 guess)", type_label=function_definition];
3788 [label="617_ if\n3788-if-618-620", method="play_TOD37(bytes32 guess)", type_label=if];
9353 [label="617_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
3810 [label="618_ winner_TOD37 = msg.sender;\n3810-expression_statement-619-619", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
3816 [label="621_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n3816-function_definition-622-624", method="getReward_TOD37()", type_label=function_definition];
3821 [label="622_ winner_TOD37.transfer(msg.value);\n3821-expression_statement-623-623", method="getReward_TOD37()", type_label=expression_statement];
3830 [label="624_ function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n3830-function_definition-625-627", method="addMinter(address account)", type_label=function_definition];
3837 [label="624_ onlyMinter\n3837-expression_statement-625-625", method="addMinter(address account)", type_label=expression_statement];
3840 [label="625_ _addMinter(account);\n3840-expression_statement-626-626", method="addMinter(address account)", type_label=expression_statement];
3845 [label="627_ address payable winner_TOD3;\n3845-new_variable-628-628", method="", type_label=new_variable];
3849 [label="628_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n3849-function_definition-629-633", method="play_TOD3(bytes32 guess)", type_label=function_definition];
3857 [label="629_ if\n3857-if-630-632", method="play_TOD3(bytes32 guess)", type_label=if];
9422 [label="629_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
3879 [label="630_ winner_TOD3 = msg.sender;\n3879-expression_statement-631-631", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
3885 [label="633_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n3885-function_definition-634-636", method="getReward_TOD3()", type_label=function_definition];
3890 [label="634_ winner_TOD3.transfer(msg.value);\n3890-expression_statement-635-635", method="getReward_TOD3()", type_label=expression_statement];
3899 [label="636_ function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n3899-function_definition-637-639", method="renounceMinter()", type_label=function_definition];
3903 [label="637_ _removeMinter(msg.sender);\n3903-expression_statement-638-638", method="renounceMinter()", type_label=expression_statement];
3910 [label="639_ address payable winner_TOD9;\n3910-new_variable-640-640", method="", type_label=new_variable];
3914 [label="640_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n3914-function_definition-641-645", method="play_TOD9(bytes32 guess)", type_label=function_definition];
3922 [label="641_ if\n3922-if-642-644", method="play_TOD9(bytes32 guess)", type_label=if];
9487 [label="641_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
3944 [label="642_ winner_TOD9 = msg.sender;\n3944-expression_statement-643-643", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
3950 [label="645_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n3950-function_definition-646-648", method="getReward_TOD9()", type_label=function_definition];
3955 [label="646_ winner_TOD9.transfer(msg.value);\n3955-expression_statement-647-647", method="getReward_TOD9()", type_label=expression_statement];
3964 [label="648_ function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n3964-function_definition-649-652", method="_addMinter(address account)", type_label=function_definition];
3972 [label="649_ _minters.add(account);\n3972-expression_statement-650-650", method="_addMinter(address account)", type_label=expression_statement];
3983 [label="652_ address payable winner_TOD25;\n3983-new_variable-653-653", method="", type_label=new_variable];
3987 [label="653_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n3987-function_definition-654-658", method="play_TOD25(bytes32 guess)", type_label=function_definition];
3995 [label="654_ if\n3995-if-655-657", method="play_TOD25(bytes32 guess)", type_label=if];
9560 [label="654_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
4017 [label="655_ winner_TOD25 = msg.sender;\n4017-expression_statement-656-656", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
4023 [label="658_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n4023-function_definition-659-661", method="getReward_TOD25()", type_label=function_definition];
4028 [label="659_ winner_TOD25.transfer(msg.value);\n4028-expression_statement-660-660", method="getReward_TOD25()", type_label=expression_statement];
4037 [label="661_ function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n4037-function_definition-662-665", method="_removeMinter(address account)", type_label=function_definition];
4045 [label="662_ _minters.remove(account);\n4045-expression_statement-663-663", method="_removeMinter(address account)", type_label=expression_statement];
4056 [label="665_ address payable winner_TOD19;\n4056-new_variable-666-666", method="", type_label=new_variable];
4060 [label="666_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n4060-function_definition-667-671", method="play_TOD19(bytes32 guess)", type_label=function_definition];
4068 [label="667_ if\n4068-if-668-670", method="play_TOD19(bytes32 guess)", type_label=if];
9633 [label="667_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
4090 [label="668_ winner_TOD19 = msg.sender;\n4090-expression_statement-669-669", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
4096 [label="671_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n4096-function_definition-672-674", method="getReward_TOD19()", type_label=function_definition];
4101 [label="672_ winner_TOD19.transfer(msg.value);\n4101-expression_statement-673-673", method="getReward_TOD19()", type_label=expression_statement];
4120 [label="677_ address payable winner_TOD33;\n4120-new_variable-678-678", method="", type_label=new_variable];
4124 [label="678_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n4124-function_definition-679-683", method="play_TOD33(bytes32 guess)", type_label=function_definition];
4132 [label="679_ if\n4132-if-680-682", method="play_TOD33(bytes32 guess)", type_label=if];
9697 [label="679_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
4154 [label="680_ winner_TOD33 = msg.sender;\n4154-expression_statement-681-681", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
4160 [label="683_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n4160-function_definition-684-686", method="getReward_TOD33()", type_label=function_definition];
4165 [label="684_ winner_TOD33.transfer(msg.value);\n4165-expression_statement-685-685", method="getReward_TOD33()", type_label=expression_statement];
4180 [label="687_ address payable winner_TOD27;\n4180-new_variable-688-688", method="", type_label=new_variable];
4184 [label="688_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n4184-function_definition-689-693", method="play_TOD27(bytes32 guess)", type_label=function_definition];
4192 [label="689_ if\n4192-if-690-692", method="play_TOD27(bytes32 guess)", type_label=if];
9757 [label="689_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
4214 [label="690_ winner_TOD27 = msg.sender;\n4214-expression_statement-691-691", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
4220 [label="693_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n4220-function_definition-694-696", method="getReward_TOD27()", type_label=function_definition];
4225 [label="694_ winner_TOD27.transfer(msg.value);\n4225-expression_statement-695-695", method="getReward_TOD27()", type_label=expression_statement];
4240 [label="697_ Roles.Role private _pausers;\n4240-new_variable-698-698", method="", type_label=new_variable];
4249 [label="699_ _addPauser(msg.sender);\n4249-expression_statement-700-700", method="", type_label=expression_statement];
4256 [label="701_ bool claimed_TOD26 = false;\n4256-new_variable-702-702", method="", type_label=new_variable];
4262 [label="702_ address payable owner_TOD26;\n4262-new_variable-703-703", method="", type_label=new_variable];
4266 [label="703_ uint256 reward_TOD26;\n4266-new_variable-704-704", method="", type_label=new_variable];
4270 [label="704_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n4270-function_definition-705-710", method="setReward_TOD26()", type_label=function_definition];
4275 [label="705_ require (!claimed_TOD26);\n4275-expression_statement-706-706", method="setReward_TOD26()", type_label=expression_statement];
4281 [label="706_ require(msg.sender == owner_TOD26);\n4281-expression_statement-707-707", method="setReward_TOD26()", type_label=expression_statement];
4290 [label="707_ owner_TOD26.transfer(reward_TOD26);\n4290-expression_statement-708-708", method="setReward_TOD26()", type_label=expression_statement];
4297 [label="708_ reward_TOD26 = msg.value;\n4297-expression_statement-709-709", method="setReward_TOD26()", type_label=expression_statement];
4303 [label="710_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n4303-function_definition-711-716", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
4311 [label="711_ require (!claimed_TOD26);\n4311-expression_statement-712-712", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
4317 [label="712_ require(submission < 10);\n4317-expression_statement-713-713", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
4324 [label="713_ msg.sender.transfer(reward_TOD26);\n4324-expression_statement-714-714", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
4333 [label="714_ claimed_TOD26 = true;\n4333-expression_statement-715-715", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
4338 [label="716_ modifier onlyPauser() {\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n4338-expression_statement-717-720", method="", type_label=expression_statement];
4341 [label="717_ require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n4341-expression_statement-718-718", method="", type_label=expression_statement];
4354 [label="718_ _;\n4354-expression_statement-719-719", method="", type_label=expression_statement];
4356 [label="720_ function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n4356-function_definition-721-723", method="isPauser(address account)", type_label=function_definition];
4369 [label="721_ return _pausers.has(account);\n4369-return-722-722", method="isPauser(address account)", type_label=return];
4376 [label="723_ bool claimed_TOD20 = false;\n4376-new_variable-724-724", method="", type_label=new_variable];
4382 [label="724_ address payable owner_TOD20;\n4382-new_variable-725-725", method="", type_label=new_variable];
4386 [label="725_ uint256 reward_TOD20;\n4386-new_variable-726-726", method="", type_label=new_variable];
4390 [label="726_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n4390-function_definition-727-732", method="setReward_TOD20()", type_label=function_definition];
4395 [label="727_ require (!claimed_TOD20);\n4395-expression_statement-728-728", method="setReward_TOD20()", type_label=expression_statement];
4401 [label="728_ require(msg.sender == owner_TOD20);\n4401-expression_statement-729-729", method="setReward_TOD20()", type_label=expression_statement];
4410 [label="729_ owner_TOD20.transfer(reward_TOD20);\n4410-expression_statement-730-730", method="setReward_TOD20()", type_label=expression_statement];
4417 [label="730_ reward_TOD20 = msg.value;\n4417-expression_statement-731-731", method="setReward_TOD20()", type_label=expression_statement];
4423 [label="732_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n4423-function_definition-733-738", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
4431 [label="733_ require (!claimed_TOD20);\n4431-expression_statement-734-734", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
4437 [label="734_ require(submission < 10);\n4437-expression_statement-735-735", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
4444 [label="735_ msg.sender.transfer(reward_TOD20);\n4444-expression_statement-736-736", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
4453 [label="736_ claimed_TOD20 = true;\n4453-expression_statement-737-737", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
4458 [label="738_ function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n4458-function_definition-739-741", method="addPauser(address account)", type_label=function_definition];
4465 [label="738_ onlyPauser\n4465-expression_statement-739-739", method="addPauser(address account)", type_label=expression_statement];
4468 [label="739_ _addPauser(account);\n4468-expression_statement-740-740", method="addPauser(address account)", type_label=expression_statement];
4473 [label="741_ bool claimed_TOD32 = false;\n4473-new_variable-742-742", method="", type_label=new_variable];
4479 [label="742_ address payable owner_TOD32;\n4479-new_variable-743-743", method="", type_label=new_variable];
4483 [label="743_ uint256 reward_TOD32;\n4483-new_variable-744-744", method="", type_label=new_variable];
4487 [label="744_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n4487-function_definition-745-750", method="setReward_TOD32()", type_label=function_definition];
4492 [label="745_ require (!claimed_TOD32);\n4492-expression_statement-746-746", method="setReward_TOD32()", type_label=expression_statement];
4498 [label="746_ require(msg.sender == owner_TOD32);\n4498-expression_statement-747-747", method="setReward_TOD32()", type_label=expression_statement];
4507 [label="747_ owner_TOD32.transfer(reward_TOD32);\n4507-expression_statement-748-748", method="setReward_TOD32()", type_label=expression_statement];
4514 [label="748_ reward_TOD32 = msg.value;\n4514-expression_statement-749-749", method="setReward_TOD32()", type_label=expression_statement];
4520 [label="750_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n4520-function_definition-751-756", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
4528 [label="751_ require (!claimed_TOD32);\n4528-expression_statement-752-752", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
4534 [label="752_ require(submission < 10);\n4534-expression_statement-753-753", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
4541 [label="753_ msg.sender.transfer(reward_TOD32);\n4541-expression_statement-754-754", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
4550 [label="754_ claimed_TOD32 = true;\n4550-expression_statement-755-755", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
4555 [label="756_ function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n4555-function_definition-757-759", method="renouncePauser()", type_label=function_definition];
4559 [label="757_ _removePauser(msg.sender);\n4559-expression_statement-758-758", method="renouncePauser()", type_label=expression_statement];
4566 [label="759_ bool claimed_TOD38 = false;\n4566-new_variable-760-760", method="", type_label=new_variable];
4572 [label="760_ address payable owner_TOD38;\n4572-new_variable-761-761", method="", type_label=new_variable];
4576 [label="761_ uint256 reward_TOD38;\n4576-new_variable-762-762", method="", type_label=new_variable];
4580 [label="762_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n4580-function_definition-763-768", method="setReward_TOD38()", type_label=function_definition];
4585 [label="763_ require (!claimed_TOD38);\n4585-expression_statement-764-764", method="setReward_TOD38()", type_label=expression_statement];
4591 [label="764_ require(msg.sender == owner_TOD38);\n4591-expression_statement-765-765", method="setReward_TOD38()", type_label=expression_statement];
4600 [label="765_ owner_TOD38.transfer(reward_TOD38);\n4600-expression_statement-766-766", method="setReward_TOD38()", type_label=expression_statement];
4607 [label="766_ reward_TOD38 = msg.value;\n4607-expression_statement-767-767", method="setReward_TOD38()", type_label=expression_statement];
4613 [label="768_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n4613-function_definition-769-774", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
4621 [label="769_ require (!claimed_TOD38);\n4621-expression_statement-770-770", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
4627 [label="770_ require(submission < 10);\n4627-expression_statement-771-771", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
4634 [label="771_ msg.sender.transfer(reward_TOD38);\n4634-expression_statement-772-772", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
4643 [label="772_ claimed_TOD38 = true;\n4643-expression_statement-773-773", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
4648 [label="774_ function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n4648-function_definition-775-778", method="_addPauser(address account)", type_label=function_definition];
4656 [label="775_ _pausers.add(account);\n4656-expression_statement-776-776", method="_addPauser(address account)", type_label=expression_statement];
4667 [label="778_ bool claimed_TOD4 = false;\n4667-new_variable-779-779", method="", type_label=new_variable];
4673 [label="779_ address payable owner_TOD4;\n4673-new_variable-780-780", method="", type_label=new_variable];
4677 [label="780_ uint256 reward_TOD4;\n4677-new_variable-781-781", method="", type_label=new_variable];
4681 [label="781_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n4681-function_definition-782-787", method="setReward_TOD4()", type_label=function_definition];
4686 [label="782_ require (!claimed_TOD4);\n4686-expression_statement-783-783", method="setReward_TOD4()", type_label=expression_statement];
4692 [label="783_ require(msg.sender == owner_TOD4);\n4692-expression_statement-784-784", method="setReward_TOD4()", type_label=expression_statement];
4701 [label="784_ owner_TOD4.transfer(reward_TOD4);\n4701-expression_statement-785-785", method="setReward_TOD4()", type_label=expression_statement];
4708 [label="785_ reward_TOD4 = msg.value;\n4708-expression_statement-786-786", method="setReward_TOD4()", type_label=expression_statement];
4714 [label="787_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n4714-function_definition-788-793", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
4722 [label="788_ require (!claimed_TOD4);\n4722-expression_statement-789-789", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
4728 [label="789_ require(submission < 10);\n4728-expression_statement-790-790", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
4735 [label="790_ msg.sender.transfer(reward_TOD4);\n4735-expression_statement-791-791", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
4744 [label="791_ claimed_TOD4 = true;\n4744-expression_statement-792-792", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
4749 [label="793_ function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n4749-function_definition-794-797", method="_removePauser(address account)", type_label=function_definition];
4757 [label="794_ _pausers.remove(account);\n4757-expression_statement-795-795", method="_removePauser(address account)", type_label=expression_statement];
4768 [label="797_ address payable winner_TOD7;\n4768-new_variable-798-798", method="", type_label=new_variable];
4772 [label="798_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n4772-function_definition-799-803", method="play_TOD7(bytes32 guess)", type_label=function_definition];
4780 [label="799_ if\n4780-if-800-802", method="play_TOD7(bytes32 guess)", type_label=if];
10345 [label="799_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
4802 [label="800_ winner_TOD7 = msg.sender;\n4802-expression_statement-801-801", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
4808 [label="803_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n4808-function_definition-804-806", method="getReward_TOD7()", type_label=function_definition];
4813 [label="804_ winner_TOD7.transfer(msg.value);\n4813-expression_statement-805-805", method="getReward_TOD7()", type_label=expression_statement];
4828 [label="808_ address payable winner_TOD31;\n4828-new_variable-809-809", method="", type_label=new_variable];
4832 [label="809_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n4832-function_definition-810-814", method="play_TOD31(bytes32 guess)", type_label=function_definition];
4840 [label="810_ if\n4840-if-811-813", method="play_TOD31(bytes32 guess)", type_label=if];
10405 [label="810_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
4862 [label="811_ winner_TOD31 = msg.sender;\n4862-expression_statement-812-812", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
4868 [label="814_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n4868-function_definition-815-817", method="getReward_TOD31()", type_label=function_definition];
4873 [label="815_ winner_TOD31.transfer(msg.value);\n4873-expression_statement-816-816", method="getReward_TOD31()", type_label=expression_statement];
4888 [label="818_ address payable winner_TOD13;\n4888-new_variable-819-819", method="", type_label=new_variable];
4892 [label="819_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n4892-function_definition-820-824", method="play_TOD13(bytes32 guess)", type_label=function_definition];
4900 [label="820_ if\n4900-if-821-823", method="play_TOD13(bytes32 guess)", type_label=if];
10465 [label="820_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
4922 [label="821_ winner_TOD13 = msg.sender;\n4922-expression_statement-822-822", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
4928 [label="824_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n4928-function_definition-825-827", method="getReward_TOD13()", type_label=function_definition];
4933 [label="825_ winner_TOD13.transfer(msg.value);\n4933-expression_statement-826-826", method="getReward_TOD13()", type_label=expression_statement];
4948 [label="828_ bool private _paused;\n4948-new_variable-829-829", method="", type_label=new_variable];
4955 [label="830_ _paused = false;\n4955-expression_statement-831-831", method="", type_label=expression_statement];
4960 [label="832_ address payable winner_TOD23;\n4960-new_variable-833-833", method="", type_label=new_variable];
4964 [label="833_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n4964-function_definition-834-838", method="play_TOD23(bytes32 guess)", type_label=function_definition];
4972 [label="834_ if\n4972-if-835-837", method="play_TOD23(bytes32 guess)", type_label=if];
10537 [label="834_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
4994 [label="835_ winner_TOD23 = msg.sender;\n4994-expression_statement-836-836", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
5000 [label="838_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n5000-function_definition-839-841", method="getReward_TOD23()", type_label=function_definition];
5005 [label="839_ winner_TOD23.transfer(msg.value);\n5005-expression_statement-840-840", method="getReward_TOD23()", type_label=expression_statement];
5014 [label="841_ function paused() public view returns (bool) {\n        return _paused;\n    }\n5014-function_definition-842-844", method="paused()", type_label=function_definition];
5023 [label="842_ return _paused;\n5023-return-843-843", method="paused()", type_label=return];
5025 [label="844_ bool claimed_TOD14 = false;\n5025-new_variable-845-845", method="", type_label=new_variable];
5031 [label="845_ address payable owner_TOD14;\n5031-new_variable-846-846", method="", type_label=new_variable];
5035 [label="846_ uint256 reward_TOD14;\n5035-new_variable-847-847", method="", type_label=new_variable];
5039 [label="847_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n5039-function_definition-848-853", method="setReward_TOD14()", type_label=function_definition];
5044 [label="848_ require (!claimed_TOD14);\n5044-expression_statement-849-849", method="setReward_TOD14()", type_label=expression_statement];
5050 [label="849_ require(msg.sender == owner_TOD14);\n5050-expression_statement-850-850", method="setReward_TOD14()", type_label=expression_statement];
5059 [label="850_ owner_TOD14.transfer(reward_TOD14);\n5059-expression_statement-851-851", method="setReward_TOD14()", type_label=expression_statement];
5066 [label="851_ reward_TOD14 = msg.value;\n5066-expression_statement-852-852", method="setReward_TOD14()", type_label=expression_statement];
5072 [label="853_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n5072-function_definition-854-859", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
5080 [label="854_ require (!claimed_TOD14);\n5080-expression_statement-855-855", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
5086 [label="855_ require(submission < 10);\n5086-expression_statement-856-856", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
5093 [label="856_ msg.sender.transfer(reward_TOD14);\n5093-expression_statement-857-857", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
5102 [label="857_ claimed_TOD14 = true;\n5102-expression_statement-858-858", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
5107 [label="859_ modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n5107-expression_statement-860-863", method="", type_label=expression_statement];
5110 [label="860_ require(!_paused, \"Pausable: paused\");\n5110-expression_statement-861-861", method="", type_label=expression_statement];
5119 [label="861_ _;\n5119-expression_statement-862-862", method="", type_label=expression_statement];
5121 [label="863_ modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n5121-expression_statement-864-867", method="", type_label=expression_statement];
5124 [label="864_ require(_paused, \"Pausable: not paused\");\n5124-expression_statement-865-865", method="", type_label=expression_statement];
5132 [label="865_ _;\n5132-expression_statement-866-866", method="", type_label=expression_statement];
5134 [label="867_ function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n5134-function_definition-868-871", method="pause()", type_label=function_definition];
5137 [label="867_ onlyPauser\n5137-expression_statement-868-868", method="pause()", type_label=expression_statement];
5139 [label="867_ whenNotPaused\n5139-expression_statement-868-868", method="pause()", type_label=expression_statement];
5142 [label="868_ _paused = true;\n5142-expression_statement-869-869", method="pause()", type_label=expression_statement];
5153 [label="871_ bool claimed_TOD30 = false;\n5153-new_variable-872-872", method="", type_label=new_variable];
5159 [label="872_ address payable owner_TOD30;\n5159-new_variable-873-873", method="", type_label=new_variable];
5163 [label="873_ uint256 reward_TOD30;\n5163-new_variable-874-874", method="", type_label=new_variable];
5167 [label="874_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n5167-function_definition-875-880", method="setReward_TOD30()", type_label=function_definition];
5172 [label="875_ require (!claimed_TOD30);\n5172-expression_statement-876-876", method="setReward_TOD30()", type_label=expression_statement];
5178 [label="876_ require(msg.sender == owner_TOD30);\n5178-expression_statement-877-877", method="setReward_TOD30()", type_label=expression_statement];
5187 [label="877_ owner_TOD30.transfer(reward_TOD30);\n5187-expression_statement-878-878", method="setReward_TOD30()", type_label=expression_statement];
5194 [label="878_ reward_TOD30 = msg.value;\n5194-expression_statement-879-879", method="setReward_TOD30()", type_label=expression_statement];
5200 [label="880_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n5200-function_definition-881-886", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
5208 [label="881_ require (!claimed_TOD30);\n5208-expression_statement-882-882", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
5214 [label="882_ require(submission < 10);\n5214-expression_statement-883-883", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
5221 [label="883_ msg.sender.transfer(reward_TOD30);\n5221-expression_statement-884-884", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
5230 [label="884_ claimed_TOD30 = true;\n5230-expression_statement-885-885", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
5235 [label="886_ function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n5235-function_definition-887-890", method="unpause()", type_label=function_definition];
5238 [label="886_ onlyPauser\n5238-expression_statement-887-887", method="unpause()", type_label=expression_statement];
5240 [label="886_ whenPaused\n5240-expression_statement-887-887", method="unpause()", type_label=expression_statement];
5243 [label="887_ _paused = false;\n5243-expression_statement-888-888", method="unpause()", type_label=expression_statement];
5254 [label="890_ bool claimed_TOD8 = false;\n5254-new_variable-891-891", method="", type_label=new_variable];
5260 [label="891_ address payable owner_TOD8;\n5260-new_variable-892-892", method="", type_label=new_variable];
5264 [label="892_ uint256 reward_TOD8;\n5264-new_variable-893-893", method="", type_label=new_variable];
5268 [label="893_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n5268-function_definition-894-899", method="setReward_TOD8()", type_label=function_definition];
5273 [label="894_ require (!claimed_TOD8);\n5273-expression_statement-895-895", method="setReward_TOD8()", type_label=expression_statement];
5279 [label="895_ require(msg.sender == owner_TOD8);\n5279-expression_statement-896-896", method="setReward_TOD8()", type_label=expression_statement];
5288 [label="896_ owner_TOD8.transfer(reward_TOD8);\n5288-expression_statement-897-897", method="setReward_TOD8()", type_label=expression_statement];
5295 [label="897_ reward_TOD8 = msg.value;\n5295-expression_statement-898-898", method="setReward_TOD8()", type_label=expression_statement];
5301 [label="899_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n5301-function_definition-900-905", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
5309 [label="900_ require (!claimed_TOD8);\n5309-expression_statement-901-901", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
5315 [label="901_ require(submission < 10);\n5315-expression_statement-902-902", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
5322 [label="902_ msg.sender.transfer(reward_TOD8);\n5322-expression_statement-903-903", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
5331 [label="903_ claimed_TOD8 = true;\n5331-expression_statement-904-904", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
5358 [label="911_ ERC777(\"SKYBIT\", \"SKYBIT\", defaultOperators)\n5358-expression_statement-912-912", method="", type_label=expression_statement];
5369 [label="913_ _mint(msg.sender, msg.sender, initialSupply, \"\", \"\");\n5369-expression_statement-914-914", method="", type_label=expression_statement];
5388 [label="915_ address payable winner_TOD39;\n5388-new_variable-916-916", method="", type_label=new_variable];
5392 [label="916_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n5392-function_definition-917-921", method="play_TOD39(bytes32 guess)", type_label=function_definition];
5400 [label="917_ if\n5400-if-918-920", method="play_TOD39(bytes32 guess)", type_label=if];
10965 [label="917_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
5422 [label="918_ winner_TOD39 = msg.sender;\n5422-expression_statement-919-919", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
5428 [label="921_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n5428-function_definition-922-924", method="getReward_TOD39()", type_label=function_definition];
5433 [label="922_ winner_TOD39.transfer(msg.value);\n5433-expression_statement-923-923", method="getReward_TOD39()", type_label=expression_statement];
5442 [label="924_ function mint(address operator, address account, uint256 amount, bytes memory userData, bytes memory operatorData) public onlyMinter returns (bool) {\n        _mint(operator, account, amount, userData, operatorData);\n        return true;\n    }\n5442-function_definition-925-928", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
5465 [label="924_ onlyMinter\n5465-expression_statement-925-925", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
5472 [label="925_ _mint(operator, account, amount, userData, operatorData);\n5472-expression_statement-926-926", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
5485 [label="926_ return true;\n5485-return-927-927", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=return];
5488 [label="928_ bool claimed_TOD36 = false;\n5488-new_variable-929-929", method="", type_label=new_variable];
5494 [label="929_ address payable owner_TOD36;\n5494-new_variable-930-930", method="", type_label=new_variable];
5498 [label="930_ uint256 reward_TOD36;\n5498-new_variable-931-931", method="", type_label=new_variable];
5502 [label="931_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n5502-function_definition-932-937", method="setReward_TOD36()", type_label=function_definition];
5507 [label="932_ require (!claimed_TOD36);\n5507-expression_statement-933-933", method="setReward_TOD36()", type_label=expression_statement];
5513 [label="933_ require(msg.sender == owner_TOD36);\n5513-expression_statement-934-934", method="setReward_TOD36()", type_label=expression_statement];
5522 [label="934_ owner_TOD36.transfer(reward_TOD36);\n5522-expression_statement-935-935", method="setReward_TOD36()", type_label=expression_statement];
5529 [label="935_ reward_TOD36 = msg.value;\n5529-expression_statement-936-936", method="setReward_TOD36()", type_label=expression_statement];
5535 [label="937_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n5535-function_definition-938-943", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
5543 [label="938_ require (!claimed_TOD36);\n5543-expression_statement-939-939", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
5549 [label="939_ require(submission < 10);\n5549-expression_statement-940-940", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
5556 [label="940_ msg.sender.transfer(reward_TOD36);\n5556-expression_statement-941-941", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
5565 [label="941_ claimed_TOD36 = true;\n5565-expression_statement-942-942", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1386;
1494;
433 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
470 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
507 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 529  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
524 -> 6089  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6089 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 6089  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
529 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
531 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
553 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
590 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
624 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
811 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 938  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
922 -> 6487  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6487 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 922  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
938 -> 935  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
947 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
996 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1007 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1018 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1029 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1040 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1057 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1189 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1258 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1264 -> 1268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1272 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1277 -> 1283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1292 -> 1299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1305 -> 1313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1313 -> 1319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1319 -> 1326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1326 -> 1335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1340 -> 1348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1348 -> 1360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1360 -> 1365  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1360 -> 1375  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6925 -> 1386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1365 -> 6925  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1375 -> 6925  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1398 -> 1406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1406 -> 1428  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1406 -> 6971  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6971 -> 1434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1428 -> 6971  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1434 -> 1439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1456 -> 1468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1468 -> 1473  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1468 -> 1485  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7033 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1473 -> 7033  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1485 -> 7033  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1502 -> 1508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1508 -> 1512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1516 -> 1521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1521 -> 1527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1527 -> 1536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1536 -> 1543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1549 -> 1557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1557 -> 1563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> 1570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1570 -> 1579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1596 -> 1602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1610 -> 1615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1615 -> 1621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1621 -> 1630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1630 -> 1637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1643 -> 1651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1651 -> 1657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1657 -> 1664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1664 -> 1673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1678 -> 1702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1702 -> 1717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1737 -> 1743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1743 -> 1747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1751 -> 1756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1756 -> 1762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1762 -> 1771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1771 -> 1778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1784 -> 1792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1792 -> 1798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1798 -> 1805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1805 -> 1814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1819 -> 1839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1839 -> 1854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1873 -> 1881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1881 -> 1903  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1881 -> 7446  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7446 -> 1909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1903 -> 7446  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1909 -> 1914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1923 -> 1940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1940 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1950 -> 1958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1958 -> 1980  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1958 -> 7523  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7523 -> 1986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1980 -> 7523  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1986 -> 1991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2000 -> 2016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2016 -> 2024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2024 -> 2033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2033 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2036 -> 2042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2042 -> 2046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2050 -> 2055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2055 -> 2061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2061 -> 2070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2070 -> 2077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2083 -> 2091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2091 -> 2097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2097 -> 2104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2104 -> 2113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2118 -> 2138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2138 -> 2150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2150 -> 2162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2162 -> 2170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2170 -> 2187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2187 -> 2204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2204 -> 2222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2222 -> 2242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2242 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2245 -> 2251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2251 -> 2255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2259 -> 2264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2264 -> 2270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2270 -> 2279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2279 -> 2286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2292 -> 2300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2300 -> 2306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2306 -> 2313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2313 -> 2322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2327 -> 2351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2351 -> 2363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2363 -> 2372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2372 -> 2385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2431 -> 2439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2439 -> 2461  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2439 -> 8004  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8004 -> 2467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2461 -> 8004  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2467 -> 2472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2481 -> 2513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2513 -> 2525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2525 -> 2537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2537 -> 2552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2552 -> 2567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2584 -> 2590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2590 -> 2594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2598 -> 2603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2603 -> 2609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2609 -> 2618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2618 -> 2625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2631 -> 2639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2639 -> 2645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2645 -> 2652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2652 -> 2661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2666 -> 2690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2690 -> 2702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2702 -> 2719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2719 -> 2728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2763 -> 2769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2769 -> 2773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2777 -> 2782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2782 -> 2788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2788 -> 2797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2797 -> 2804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2810 -> 2818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2818 -> 2824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2824 -> 2831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2831 -> 2840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2845 -> 2873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2873 -> 2886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2921 -> 2927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2927 -> 2931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2935 -> 2940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2940 -> 2946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2946 -> 2955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2955 -> 2962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2968 -> 2976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2976 -> 2982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2982 -> 2989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2989 -> 2998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3003 -> 3019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3019 -> 3031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3051 -> 3059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3059 -> 3081  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3059 -> 8624  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8624 -> 3087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3081 -> 8624  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3087 -> 3092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3101 -> 3129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3129 -> 3142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3142 -> 3149  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3142 -> 8707  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8707 -> 3169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3149 -> 8707  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3173 -> 3181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3181 -> 3203  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3181 -> 8746  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8746 -> 3209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3203 -> 8746  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3209 -> 3214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3223 -> 3255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3255 -> 3268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3268 -> 3275  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3268 -> 3295  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8833 -> 3310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3275 -> 8833  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3295 -> 3298  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3295 -> 8833  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3298 -> 8833  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3310 -> 3316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3316 -> 3320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3324 -> 3329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3329 -> 3335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3335 -> 3344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3344 -> 3351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3357 -> 3365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3365 -> 3371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3371 -> 3378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3378 -> 3387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3403 -> 3416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3416 -> 3430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3439 -> 3452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3452 -> 3465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3474 -> 3492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3492 -> 3504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3504 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3524 -> 3532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3532 -> 3554  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3532 -> 9097  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9097 -> 3560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3554 -> 9097  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3560 -> 3565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3580 -> 3586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3586 -> 3590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3594 -> 3599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3599 -> 3605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3605 -> 3614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3614 -> 3621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3627 -> 3635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3635 -> 3641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3641 -> 3648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3648 -> 3657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3688 -> 3696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3696 -> 3718  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3696 -> 9261  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9261 -> 3724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3718 -> 9261  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3724 -> 3729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3741 -> 3754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3756 -> 3769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3769 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3780 -> 3788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3788 -> 3810  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3788 -> 9353  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9353 -> 3816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3810 -> 9353  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3816 -> 3821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3830 -> 3840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3849 -> 3857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3857 -> 3879  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3857 -> 9422  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9422 -> 3885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3879 -> 9422  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3885 -> 3890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3899 -> 3903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3914 -> 3922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3922 -> 3944  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3922 -> 9487  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9487 -> 3950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3944 -> 9487  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3950 -> 3955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3964 -> 3972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3987 -> 3995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3995 -> 4017  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3995 -> 9560  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9560 -> 4023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4017 -> 9560  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4023 -> 4028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4037 -> 4045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4060 -> 4068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4068 -> 4090  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4068 -> 9633  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9633 -> 4096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4090 -> 9633  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4096 -> 4101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4124 -> 4132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4132 -> 4154  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4132 -> 9697  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9697 -> 4160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4154 -> 9697  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4160 -> 4165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4184 -> 4192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4192 -> 4214  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4192 -> 9757  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9757 -> 4220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4214 -> 9757  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4220 -> 4225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4256 -> 4262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4262 -> 4266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4270 -> 4275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4275 -> 4281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4281 -> 4290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4290 -> 4297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4303 -> 4311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4311 -> 4317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4317 -> 4324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4324 -> 4333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4341 -> 4354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4356 -> 4369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4369 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4376 -> 4382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4382 -> 4386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4390 -> 4395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4395 -> 4401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4401 -> 4410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4410 -> 4417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4423 -> 4431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4431 -> 4437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4437 -> 4444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4444 -> 4453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4458 -> 4468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4473 -> 4479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4479 -> 4483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4487 -> 4492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4492 -> 4498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4498 -> 4507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4507 -> 4514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4520 -> 4528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4528 -> 4534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4534 -> 4541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4541 -> 4550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4555 -> 4559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4566 -> 4572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4572 -> 4576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4580 -> 4585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4585 -> 4591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4591 -> 4600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4600 -> 4607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4613 -> 4621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4621 -> 4627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4627 -> 4634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4634 -> 4643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4648 -> 4656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4667 -> 4673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4673 -> 4677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4681 -> 4686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4686 -> 4692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4692 -> 4701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4701 -> 4708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4714 -> 4722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4722 -> 4728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4728 -> 4735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4735 -> 4744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4749 -> 4757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4772 -> 4780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4780 -> 4802  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4780 -> 10345  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10345 -> 4808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4802 -> 10345  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4808 -> 4813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4832 -> 4840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4840 -> 4862  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4840 -> 10405  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10405 -> 4868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4862 -> 10405  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4868 -> 4873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4892 -> 4900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4900 -> 4922  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4900 -> 10465  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10465 -> 4928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4922 -> 10465  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4928 -> 4933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4964 -> 4972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4972 -> 4994  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4972 -> 10537  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10537 -> 5000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4994 -> 10537  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5000 -> 5005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5014 -> 5023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5023 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
5025 -> 5031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5031 -> 5035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5039 -> 5044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5044 -> 5050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5050 -> 5059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5059 -> 5066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5072 -> 5080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5080 -> 5086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5086 -> 5093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5093 -> 5102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5107 -> 5121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5110 -> 5119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5124 -> 5132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5134 -> 5142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5137 -> 5139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5153 -> 5159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5159 -> 5163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5167 -> 5172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5172 -> 5178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5178 -> 5187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5187 -> 5194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5200 -> 5208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5208 -> 5214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5214 -> 5221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5221 -> 5230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5235 -> 5243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5238 -> 5240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5254 -> 5260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5260 -> 5264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5268 -> 5273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5273 -> 5279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5279 -> 5288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5288 -> 5295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5301 -> 5309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5309 -> 5315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5315 -> 5322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5322 -> 5331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5392 -> 5400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5400 -> 5422  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5400 -> 10965  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10965 -> 5428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5422 -> 10965  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5428 -> 5433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5442 -> 5472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5472 -> 5485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5485 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
5488 -> 5494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5494 -> 5498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5502 -> 5507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5507 -> 5513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5513 -> 5522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5522 -> 5529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5535 -> 5543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5543 -> 5549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5549 -> 5556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5556 -> 5565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
