digraph  {
13 [label="2_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n13-function_definition-3-3", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
33 [label="3_ address payable winner_TOD7;\n33-new_variable-4-4", method="", type_label=new_variable];
37 [label="4_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n37-function_definition-5-9", method="play_TOD7(bytes32 guess)", type_label=function_definition];
45 [label="5_ if\n45-if-6-8", method="play_TOD7(bytes32 guess)", type_label=if];
2253 [label="5_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
67 [label="6_ winner_TOD7 = msg.sender;\n67-expression_statement-7-7", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
73 [label="9_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n73-function_definition-10-12", method="getReward_TOD7()", type_label=function_definition];
78 [label="10_ winner_TOD7.transfer(msg.value);\n78-expression_statement-11-11", method="getReward_TOD7()", type_label=expression_statement];
90 [label="14_ function allowance(address owner, address spender) external view returns (uint256);\n90-function_definition-15-15", method="allowance(address owner,address spender)", type_label=function_definition];
106 [label="15_ address payable winner_TOD23;\n106-new_variable-16-16", method="", type_label=new_variable];
110 [label="16_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n110-function_definition-17-21", method="play_TOD23(bytes32 guess)", type_label=function_definition];
118 [label="17_ if\n118-if-18-20", method="play_TOD23(bytes32 guess)", type_label=if];
2326 [label="17_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
140 [label="18_ winner_TOD23 = msg.sender;\n140-expression_statement-19-19", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
146 [label="21_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n146-function_definition-22-24", method="getReward_TOD23()", type_label=function_definition];
151 [label="22_ winner_TOD23.transfer(msg.value);\n151-expression_statement-23-23", method="getReward_TOD23()", type_label=expression_statement];
160 [label="24_ function balanceOf(address account) external view returns (uint256);\n160-function_definition-25-25", method="balanceOf(address account)", type_label=function_definition];
172 [label="25_ bool claimed_TOD14 = false;\n172-new_variable-26-26", method="", type_label=new_variable];
178 [label="26_ address payable owner_TOD14;\n178-new_variable-27-27", method="", type_label=new_variable];
182 [label="27_ uint256 reward_TOD14;\n182-new_variable-28-28", method="", type_label=new_variable];
186 [label="28_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n186-function_definition-29-34", method="setReward_TOD14()", type_label=function_definition];
191 [label="29_ require (!claimed_TOD14);\n191-expression_statement-30-30", method="setReward_TOD14()", type_label=expression_statement];
197 [label="30_ require(msg.sender == owner_TOD14);\n197-expression_statement-31-31", method="setReward_TOD14()", type_label=expression_statement];
206 [label="31_ owner_TOD14.transfer(reward_TOD14);\n206-expression_statement-32-32", method="setReward_TOD14()", type_label=expression_statement];
213 [label="32_ reward_TOD14 = msg.value;\n213-expression_statement-33-33", method="setReward_TOD14()", type_label=expression_statement];
219 [label="34_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n219-function_definition-35-40", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
227 [label="35_ require (!claimed_TOD14);\n227-expression_statement-36-36", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
233 [label="36_ require(submission < 10);\n233-expression_statement-37-37", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
240 [label="37_ msg.sender.transfer(reward_TOD14);\n240-expression_statement-38-38", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
249 [label="38_ claimed_TOD14 = true;\n249-expression_statement-39-39", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
266 [label="43_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n266-function_definition-44-48", method="add(uint256 a,uint256 b)", type_label=function_definition];
283 [label="44_ uint256 c = a + b;\n283-new_variable-45-45", method="add(uint256 a,uint256 b)", type_label=new_variable];
291 [label="45_ require(c >= a, \"SafeMath: addition overflow\");\n291-expression_statement-46-46", method="add(uint256 a,uint256 b)", type_label=expression_statement];
301 [label="46_ return c;\n301-return-47-47", method="add(uint256 a,uint256 b)", type_label=return];
303 [label="48_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n303-function_definition-49-53", method="sub(uint256 a,uint256 b)", type_label=function_definition];
320 [label="49_ require(b <= a, \"SafeMath: subtraction overflow\");\n320-expression_statement-50-50", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
330 [label="50_ uint256 c = a - b;\n330-new_variable-51-51", method="sub(uint256 a,uint256 b)", type_label=new_variable];
338 [label="51_ return c;\n338-return-52-52", method="sub(uint256 a,uint256 b)", type_label=return];
340 [label="53_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n340-function_definition-54-61", method="mul(uint256 a,uint256 b)", type_label=function_definition];
357 [label="54_ if_a == 0\n357-if-55-57", method="mul(uint256 a,uint256 b)", type_label=if];
2565 [label="54_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
362 [label="55_ return 0;\n362-return-56-56", method="mul(uint256 a,uint256 b)", type_label=return];
364 [label="57_ uint256 c = a * b;\n364-new_variable-58-58", method="mul(uint256 a,uint256 b)", type_label=new_variable];
372 [label="58_ require(c / a == b, \"SafeMath: multiplication overflow\");\n372-expression_statement-59-59", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
384 [label="59_ return c;\n384-return-60-60", method="mul(uint256 a,uint256 b)", type_label=return];
386 [label="61_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n386-function_definition-62-66", method="div(uint256 a,uint256 b)", type_label=function_definition];
403 [label="62_ require(b > 0, \"SafeMath: division by zero\");\n403-expression_statement-63-63", method="div(uint256 a,uint256 b)", type_label=expression_statement];
413 [label="63_ uint256 c = a / b;\n413-new_variable-64-64", method="div(uint256 a,uint256 b)", type_label=new_variable];
421 [label="64_ return c;\n421-return-65-65", method="div(uint256 a,uint256 b)", type_label=return];
423 [label="66_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n423-function_definition-67-70", method="mod(uint256 a,uint256 b)", type_label=function_definition];
440 [label="67_ require(b != 0, \"SafeMath: modulo by zero\");\n440-expression_statement-68-68", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
450 [label="68_ return a % b;\n450-return-69-69", method="mod(uint256 a,uint256 b)", type_label=return];
462 [label="73_ RaffleToken constant public raffleContract = RaffleToken(0x0C8cDC16973E88FAb31DD0FCB844DdF0e1056dE2);\n462-new_variable-74-74", method="", type_label=new_variable];
472 [label="74_ address payable winner_TOD19;\n472-new_variable-75-75", method="", type_label=new_variable];
476 [label="75_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n476-function_definition-76-80", method="play_TOD19(bytes32 guess)", type_label=function_definition];
484 [label="76_ if\n484-if-77-79", method="play_TOD19(bytes32 guess)", type_label=if];
2692 [label="76_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
506 [label="77_ winner_TOD19 = msg.sender;\n506-expression_statement-78-78", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
512 [label="80_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n512-function_definition-81-83", method="getReward_TOD19()", type_label=function_definition];
517 [label="81_ winner_TOD19.transfer(msg.value);\n517-expression_statement-82-82", method="getReward_TOD19()", type_label=expression_statement];
526 [label="83_ bool public paused;\n526-new_variable-84-84", method="", type_label=new_variable];
531 [label="84_ bool claimed_TOD26 = false;\n531-new_variable-85-85", method="", type_label=new_variable];
537 [label="85_ address payable owner_TOD26;\n537-new_variable-86-86", method="", type_label=new_variable];
541 [label="86_ uint256 reward_TOD26;\n541-new_variable-87-87", method="", type_label=new_variable];
545 [label="87_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n545-function_definition-88-93", method="setReward_TOD26()", type_label=function_definition];
550 [label="88_ require (!claimed_TOD26);\n550-expression_statement-89-89", method="setReward_TOD26()", type_label=expression_statement];
556 [label="89_ require(msg.sender == owner_TOD26);\n556-expression_statement-90-90", method="setReward_TOD26()", type_label=expression_statement];
565 [label="90_ owner_TOD26.transfer(reward_TOD26);\n565-expression_statement-91-91", method="setReward_TOD26()", type_label=expression_statement];
572 [label="91_ reward_TOD26 = msg.value;\n572-expression_statement-92-92", method="setReward_TOD26()", type_label=expression_statement];
578 [label="93_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n578-function_definition-94-99", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
586 [label="94_ require (!claimed_TOD26);\n586-expression_statement-95-95", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
592 [label="95_ require(submission < 10);\n592-expression_statement-96-96", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
599 [label="96_ msg.sender.transfer(reward_TOD26);\n599-expression_statement-97-97", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
608 [label="97_ claimed_TOD26 = true;\n608-expression_statement-98-98", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
613 [label="99_ address payable public owner;\n613-new_variable-100-100", method="", type_label=new_variable];
618 [label="100_ bool claimed_TOD20 = false;\n618-new_variable-101-101", method="", type_label=new_variable];
624 [label="101_ address payable owner_TOD20;\n624-new_variable-102-102", method="", type_label=new_variable];
628 [label="102_ uint256 reward_TOD20;\n628-new_variable-103-103", method="", type_label=new_variable];
632 [label="103_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n632-function_definition-104-109", method="setReward_TOD20()", type_label=function_definition];
637 [label="104_ require (!claimed_TOD20);\n637-expression_statement-105-105", method="setReward_TOD20()", type_label=expression_statement];
643 [label="105_ require(msg.sender == owner_TOD20);\n643-expression_statement-106-106", method="setReward_TOD20()", type_label=expression_statement];
652 [label="106_ owner_TOD20.transfer(reward_TOD20);\n652-expression_statement-107-107", method="setReward_TOD20()", type_label=expression_statement];
659 [label="107_ reward_TOD20 = msg.value;\n659-expression_statement-108-108", method="setReward_TOD20()", type_label=expression_statement];
665 [label="109_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n665-function_definition-110-115", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
673 [label="110_ require (!claimed_TOD20);\n673-expression_statement-111-111", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
679 [label="111_ require(submission < 10);\n679-expression_statement-112-112", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
686 [label="112_ msg.sender.transfer(reward_TOD20);\n686-expression_statement-113-113", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
695 [label="113_ claimed_TOD20 = true;\n695-expression_statement-114-114", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
700 [label="115_ uint256 public nextListingId;\n700-new_variable-116-116", method="", type_label=new_variable];
705 [label="116_ bool claimed_TOD32 = false;\n705-new_variable-117-117", method="", type_label=new_variable];
711 [label="117_ address payable owner_TOD32;\n711-new_variable-118-118", method="", type_label=new_variable];
715 [label="118_ uint256 reward_TOD32;\n715-new_variable-119-119", method="", type_label=new_variable];
719 [label="119_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n719-function_definition-120-125", method="setReward_TOD32()", type_label=function_definition];
724 [label="120_ require (!claimed_TOD32);\n724-expression_statement-121-121", method="setReward_TOD32()", type_label=expression_statement];
730 [label="121_ require(msg.sender == owner_TOD32);\n730-expression_statement-122-122", method="setReward_TOD32()", type_label=expression_statement];
739 [label="122_ owner_TOD32.transfer(reward_TOD32);\n739-expression_statement-123-123", method="setReward_TOD32()", type_label=expression_statement];
746 [label="123_ reward_TOD32 = msg.value;\n746-expression_statement-124-124", method="setReward_TOD32()", type_label=expression_statement];
752 [label="125_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n752-function_definition-126-131", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
760 [label="126_ require (!claimed_TOD32);\n760-expression_statement-127-127", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
766 [label="127_ require(submission < 10);\n766-expression_statement-128-128", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
773 [label="128_ msg.sender.transfer(reward_TOD32);\n773-expression_statement-129-129", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
782 [label="129_ claimed_TOD32 = true;\n782-expression_statement-130-130", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
787 [label="131_ mapping (uint256 => Listing) public listingsById;\n787-new_variable-132-132", method="", type_label=new_variable];
795 [label="132_ bool claimed_TOD38 = false;\n795-new_variable-133-133", method="", type_label=new_variable];
801 [label="133_ address payable owner_TOD38;\n801-new_variable-134-134", method="", type_label=new_variable];
805 [label="134_ uint256 reward_TOD38;\n805-new_variable-135-135", method="", type_label=new_variable];
809 [label="135_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n809-function_definition-136-141", method="setReward_TOD38()", type_label=function_definition];
814 [label="136_ require (!claimed_TOD38);\n814-expression_statement-137-137", method="setReward_TOD38()", type_label=expression_statement];
820 [label="137_ require(msg.sender == owner_TOD38);\n820-expression_statement-138-138", method="setReward_TOD38()", type_label=expression_statement];
829 [label="138_ owner_TOD38.transfer(reward_TOD38);\n829-expression_statement-139-139", method="setReward_TOD38()", type_label=expression_statement];
836 [label="139_ reward_TOD38 = msg.value;\n836-expression_statement-140-140", method="setReward_TOD38()", type_label=expression_statement];
842 [label="141_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n842-function_definition-142-147", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
850 [label="142_ require (!claimed_TOD38);\n850-expression_statement-143-143", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
856 [label="143_ require(submission < 10);\n856-expression_statement-144-144", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
863 [label="144_ msg.sender.transfer(reward_TOD38);\n863-expression_statement-145-145", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
872 [label="145_ claimed_TOD38 = true;\n872-expression_statement-146-146", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
877 [label="147_ mapping (uint256 => Purchase) public purchasesById;\n877-new_variable-148-148", method="", type_label=new_variable];
885 [label="148_ bool claimed_TOD4 = false;\n885-new_variable-149-149", method="", type_label=new_variable];
891 [label="149_ address payable owner_TOD4;\n891-new_variable-150-150", method="", type_label=new_variable];
895 [label="150_ uint256 reward_TOD4;\n895-new_variable-151-151", method="", type_label=new_variable];
899 [label="151_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n899-function_definition-152-157", method="setReward_TOD4()", type_label=function_definition];
904 [label="152_ require (!claimed_TOD4);\n904-expression_statement-153-153", method="setReward_TOD4()", type_label=expression_statement];
910 [label="153_ require(msg.sender == owner_TOD4);\n910-expression_statement-154-154", method="setReward_TOD4()", type_label=expression_statement];
919 [label="154_ owner_TOD4.transfer(reward_TOD4);\n919-expression_statement-155-155", method="setReward_TOD4()", type_label=expression_statement];
926 [label="155_ reward_TOD4 = msg.value;\n926-expression_statement-156-156", method="setReward_TOD4()", type_label=expression_statement];
932 [label="157_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n932-function_definition-158-163", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
940 [label="158_ require (!claimed_TOD4);\n940-expression_statement-159-159", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
946 [label="159_ require(submission < 10);\n946-expression_statement-160-160", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
953 [label="160_ msg.sender.transfer(reward_TOD4);\n953-expression_statement-161-161", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
962 [label="161_ claimed_TOD4 = true;\n962-expression_statement-162-162", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
967 [label="163_ uint256 public nextPurchaseId;\n967-new_variable-164-164", method="", type_label=new_variable];
972 [label="164_ struct Listing {\n        uint256 pricePerToken;\n        uint256 initialAmount;\n        uint256 amountLeft;\n        address payable seller;\n        bool active;\n    }\n972-expression_statement-165-171", method="Listing()", type_label=expression_statement];
994 [label="171_ struct Purchase {\n        uint256 totalAmount;\n        uint256 totalAmountPayed;\n        uint256 timestamp;\n    }\n994-expression_statement-172-176", method="Purchase()", type_label=expression_statement];
1008 [label="176_ address payable winner_TOD27;\n1008-new_variable-177-177", method="", type_label=new_variable];
1012 [label="177_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n1012-function_definition-178-182", method="play_TOD27(bytes32 guess)", type_label=function_definition];
1020 [label="178_ if\n1020-if-179-181", method="play_TOD27(bytes32 guess)", type_label=if];
3228 [label="178_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
1042 [label="179_ winner_TOD27 = msg.sender;\n1042-expression_statement-180-180", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
1048 [label="182_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n1048-function_definition-183-185", method="getReward_TOD27()", type_label=function_definition];
1053 [label="183_ winner_TOD27.transfer(msg.value);\n1053-expression_statement-184-184", method="getReward_TOD27()", type_label=expression_statement];
1080 [label="186_ address payable winner_TOD31;\n1080-new_variable-187-187", method="", type_label=new_variable];
1084 [label="187_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n1084-function_definition-188-192", method="play_TOD31(bytes32 guess)", type_label=function_definition];
1092 [label="188_ if\n1092-if-189-191", method="play_TOD31(bytes32 guess)", type_label=if];
3300 [label="188_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
1114 [label="189_ winner_TOD31 = msg.sender;\n1114-expression_statement-190-190", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
1120 [label="192_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n1120-function_definition-193-195", method="getReward_TOD31()", type_label=function_definition];
1125 [label="193_ winner_TOD31.transfer(msg.value);\n1125-expression_statement-194-194", method="getReward_TOD31()", type_label=expression_statement];
1140 [label="196_ address payable winner_TOD13;\n1140-new_variable-197-197", method="", type_label=new_variable];
1144 [label="197_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n1144-function_definition-198-202", method="play_TOD13(bytes32 guess)", type_label=function_definition];
1152 [label="198_ if\n1152-if-199-201", method="play_TOD13(bytes32 guess)", type_label=if];
3360 [label="198_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
1174 [label="199_ winner_TOD13 = msg.sender;\n1174-expression_statement-200-200", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
1180 [label="202_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n1180-function_definition-203-205", method="getReward_TOD13()", type_label=function_definition];
1185 [label="203_ winner_TOD13.transfer(msg.value);\n1185-expression_statement-204-204", method="getReward_TOD13()", type_label=expression_statement];
1212 [label="206_ modifier onlyContractOwner {\n        require(msg.sender == owner, \"Function called by non-owner.\");\n        _;\n    }\n1212-expression_statement-207-210", method="", type_label=expression_statement];
1215 [label="207_ require(msg.sender == owner, \"Function called by non-owner.\");\n1215-expression_statement-208-208", method="", type_label=expression_statement];
1227 [label="208_ _;\n1227-expression_statement-209-209", method="", type_label=expression_statement];
1229 [label="210_ modifier onlyUnpaused {\n        require(paused == false, \"Exchange is paused.\");\n        _;\n    }\n1229-expression_statement-211-214", method="", type_label=expression_statement];
1232 [label="211_ require(paused == false, \"Exchange is paused.\");\n1232-expression_statement-212-212", method="", type_label=expression_statement];
1243 [label="212_ _;\n1243-expression_statement-213-213", method="", type_label=expression_statement];
1247 [label="215_ owner = msg.sender;\n1247-expression_statement-216-216", method="", type_label=expression_statement];
1253 [label="216_ nextListingId = 916;\n1253-expression_statement-217-217", method="", type_label=expression_statement];
1257 [label="217_ nextPurchaseId = 344;\n1257-expression_statement-218-218", method="", type_label=expression_statement];
1261 [label="219_ bool claimed_TOD30 = false;\n1261-new_variable-220-220", method="", type_label=new_variable];
1267 [label="220_ address payable owner_TOD30;\n1267-new_variable-221-221", method="", type_label=new_variable];
1271 [label="221_ uint256 reward_TOD30;\n1271-new_variable-222-222", method="", type_label=new_variable];
1275 [label="222_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n1275-function_definition-223-228", method="setReward_TOD30()", type_label=function_definition];
1280 [label="223_ require (!claimed_TOD30);\n1280-expression_statement-224-224", method="setReward_TOD30()", type_label=expression_statement];
1286 [label="224_ require(msg.sender == owner_TOD30);\n1286-expression_statement-225-225", method="setReward_TOD30()", type_label=expression_statement];
1295 [label="225_ owner_TOD30.transfer(reward_TOD30);\n1295-expression_statement-226-226", method="setReward_TOD30()", type_label=expression_statement];
1302 [label="226_ reward_TOD30 = msg.value;\n1302-expression_statement-227-227", method="setReward_TOD30()", type_label=expression_statement];
1308 [label="228_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n1308-function_definition-229-234", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
1316 [label="229_ require (!claimed_TOD30);\n1316-expression_statement-230-230", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1322 [label="230_ require(submission < 10);\n1322-expression_statement-231-231", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1329 [label="231_ msg.sender.transfer(reward_TOD30);\n1329-expression_statement-232-232", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1338 [label="232_ claimed_TOD30 = true;\n1338-expression_statement-233-233", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1343 [label="234_ function buyRaffle(uint256[] calldata amounts, uint256[] calldata listingIds) payable external onlyUnpaused {\n        require(amounts.length == listingIds.length, \"You have to provide amounts for every single listing!\");\n        uint256 totalAmount;\n        uint256 totalAmountPayed;\n        for (uint256 i = 0; i < listingIds.length; i++) {\n            uint256 id = listingIds[i];\n            uint256 amount = amounts[i];\n            Listing storage listing = listingsById[id];\n            require(listing.active, \"Listing is not active anymore!\");\n            listing.amountLeft = listing.amountLeft.sub(amount);\n            require(listing.amountLeft >= 0, \"Amount left needs to be higher than 0.\");\n            if(listing.amountLeft == 0) { listing.active = false; }\n            uint256 amountToPay = listing.pricePerToken * amount;\n            listing.seller.transfer(amountToPay);\n            totalAmountPayed = totalAmountPayed.add(amountToPay);\n            totalAmount = totalAmount.add(amount);\n            require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');\n        }\n        require(totalAmountPayed <= msg.value, 'Overpayed!');\n        uint256 id = nextPurchaseId++;\n        Purchase storage purchase = purchasesById[id];\n        purchase.totalAmount = totalAmount;\n        purchase.totalAmountPayed = totalAmountPayed;\n        purchase.timestamp = now;\n        emit Purchased(id, totalAmount, totalAmountPayed, now);\n    }\n1343-function_definition-235-260", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=function_definition];
1357 [label="234_ onlyUnpaused\n1357-expression_statement-235-235", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1360 [label="235_ require(amounts.length == listingIds.length, \"You have to provide amounts for every single listing!\");\n1360-expression_statement-236-236", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1374 [label="236_ uint256 totalAmount;\n1374-new_variable-237-237", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1379 [label="237_ uint256 totalAmountPayed;\n1379-new_variable-238-238", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1384 [label="238_ for(i < listingIds.length;;i++)\n1384-for-239-252", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=for];
3592 [label="238_ end_loop", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=end_loop];
1397 [label="238_ i++\n1397-expression_statement-239-239", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1400 [label="239_ uint256 id = listingIds[i];\n1400-new_variable-240-240", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1408 [label="240_ uint256 amount = amounts[i];\n1408-new_variable-241-241", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1416 [label="241_ Listing storage listing = listingsById[id];\n1416-new_variable-242-242", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1425 [label="242_ require(listing.active, \"Listing is not active anymore!\");\n1425-expression_statement-243-243", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1435 [label="243_ listing.amountLeft = listing.amountLeft.sub(amount);\n1435-expression_statement-244-244", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1448 [label="244_ require(listing.amountLeft >= 0, \"Amount left needs to be higher than 0.\");\n1448-expression_statement-245-245", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1460 [label="245_ if_listing.amountLeft == 0\n1460-if-246-246", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=if];
3668 [label="245_ end_if", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=end_if];
1467 [label="245_ listing.active = false;\n1467-expression_statement-246-246", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1474 [label="246_ uint256 amountToPay = listing.pricePerToken * amount;\n1474-new_variable-247-247", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1484 [label="247_ listing.seller.transfer(amountToPay);\n1484-expression_statement-248-248", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1493 [label="248_ totalAmountPayed = totalAmountPayed.add(amountToPay);\n1493-expression_statement-249-249", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1502 [label="249_ totalAmount = totalAmount.add(amount);\n1502-expression_statement-250-250", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1511 [label="250_ require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');\n1511-expression_statement-251-251", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1532 [label="252_ require(totalAmountPayed <= msg.value, 'Overpayed!');\n1532-expression_statement-253-253", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1544 [label="253_ uint256 id = nextPurchaseId++;\n1544-new_variable-254-254", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1549 [label="253_ nextPurchaseId++\n1549-expression_statement-254-254", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1551 [label="254_ Purchase storage purchase = purchasesById[id];\n1551-new_variable-255-255", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1560 [label="255_ purchase.totalAmount = totalAmount;\n1560-expression_statement-256-256", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1566 [label="256_ purchase.totalAmountPayed = totalAmountPayed;\n1566-expression_statement-257-257", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1572 [label="257_ purchase.timestamp = now;\n1572-expression_statement-258-258", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1588 [label="260_ bool claimed_TOD8 = false;\n1588-new_variable-261-261", method="", type_label=new_variable];
1594 [label="261_ address payable owner_TOD8;\n1594-new_variable-262-262", method="", type_label=new_variable];
1598 [label="262_ uint256 reward_TOD8;\n1598-new_variable-263-263", method="", type_label=new_variable];
1602 [label="263_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n1602-function_definition-264-269", method="setReward_TOD8()", type_label=function_definition];
1607 [label="264_ require (!claimed_TOD8);\n1607-expression_statement-265-265", method="setReward_TOD8()", type_label=expression_statement];
1613 [label="265_ require(msg.sender == owner_TOD8);\n1613-expression_statement-266-266", method="setReward_TOD8()", type_label=expression_statement];
1622 [label="266_ owner_TOD8.transfer(reward_TOD8);\n1622-expression_statement-267-267", method="setReward_TOD8()", type_label=expression_statement];
1629 [label="267_ reward_TOD8 = msg.value;\n1629-expression_statement-268-268", method="setReward_TOD8()", type_label=expression_statement];
1635 [label="269_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n1635-function_definition-270-275", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
1643 [label="270_ require (!claimed_TOD8);\n1643-expression_statement-271-271", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1649 [label="271_ require(submission < 10);\n1649-expression_statement-272-272", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1656 [label="272_ msg.sender.transfer(reward_TOD8);\n1656-expression_statement-273-273", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1665 [label="273_ claimed_TOD8 = true;\n1665-expression_statement-274-274", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1670 [label="275_ function addListing(uint256 initialAmount, uint256 pricePerToken) external onlyUnpaused {\n        require(raffleContract.balanceOf(msg.sender) >= initialAmount, \"Amount to sell is higher than balance!\");\n        require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, \"Allowance is to small (increase allowance)!\");\n        uint256 id = nextListingId++;\n        Listing storage listing = listingsById[id];\n        listing.initialAmount = initialAmount;\n        listing.amountLeft = initialAmount;\n        listing.pricePerToken = pricePerToken;\n        listing.seller = msg.sender;\n        listing.active = true;\n        emit Listed(id, listing.pricePerToken, listing.initialAmount, listing.seller);\n    }\n1670-function_definition-276-287", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=function_definition];
1681 [label="275_ onlyUnpaused\n1681-expression_statement-276-276", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1684 [label="276_ require(raffleContract.balanceOf(msg.sender) >= initialAmount, \"Amount to sell is higher than balance!\");\n1684-expression_statement-277-277", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1701 [label="277_ require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, \"Allowance is to small (increase allowance)!\");\n1701-expression_statement-278-278", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1722 [label="278_ uint256 id = nextListingId++;\n1722-new_variable-279-279", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=new_variable];
1727 [label="278_ nextListingId++\n1727-expression_statement-279-279", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1729 [label="279_ Listing storage listing = listingsById[id];\n1729-new_variable-280-280", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=new_variable];
1738 [label="280_ listing.initialAmount = initialAmount;\n1738-expression_statement-281-281", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1744 [label="281_ listing.amountLeft = initialAmount;\n1744-expression_statement-282-282", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1750 [label="282_ listing.pricePerToken = pricePerToken;\n1750-expression_statement-283-283", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1756 [label="283_ listing.seller = msg.sender;\n1756-expression_statement-284-284", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1764 [label="284_ listing.active = true;\n1764-expression_statement-285-285", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1787 [label="287_ address payable winner_TOD39;\n1787-new_variable-288-288", method="", type_label=new_variable];
1791 [label="288_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n1791-function_definition-289-293", method="play_TOD39(bytes32 guess)", type_label=function_definition];
1799 [label="289_ if\n1799-if-290-292", method="play_TOD39(bytes32 guess)", type_label=if];
4007 [label="289_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
1821 [label="290_ winner_TOD39 = msg.sender;\n1821-expression_statement-291-291", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
1827 [label="293_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n1827-function_definition-294-296", method="getReward_TOD39()", type_label=function_definition];
1832 [label="294_ winner_TOD39.transfer(msg.value);\n1832-expression_statement-295-295", method="getReward_TOD39()", type_label=expression_statement];
1841 [label="296_ function cancelListing(uint256 id) external {\n        Listing storage listing = listingsById[id];\n        require(listing.active, \"This listing was turned inactive already!\");\n        require(listing.seller == msg.sender || owner == msg.sender, \"Only the listing owner or the contract owner can cancel the listing!\");\n        listing.active = false;\n        emit Canceled(id);\n    }\n1841-function_definition-297-303", method="cancelListing(uint256 id)", type_label=function_definition];
1849 [label="297_ Listing storage listing = listingsById[id];\n1849-new_variable-298-298", method="cancelListing(uint256 id)", type_label=new_variable];
1858 [label="298_ require(listing.active, \"This listing was turned inactive already!\");\n1858-expression_statement-299-299", method="cancelListing(uint256 id)", type_label=expression_statement];
1868 [label="299_ require(listing.seller == msg.sender || owner == msg.sender, \"Only the listing owner or the contract owner can cancel the listing!\");\n1868-expression_statement-300-300", method="cancelListing(uint256 id)", type_label=expression_statement];
1888 [label="300_ listing.active = false;\n1888-expression_statement-301-301", method="cancelListing(uint256 id)", type_label=expression_statement];
1899 [label="303_ bool claimed_TOD36 = false;\n1899-new_variable-304-304", method="", type_label=new_variable];
1905 [label="304_ address payable owner_TOD36;\n1905-new_variable-305-305", method="", type_label=new_variable];
1909 [label="305_ uint256 reward_TOD36;\n1909-new_variable-306-306", method="", type_label=new_variable];
1913 [label="306_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n1913-function_definition-307-312", method="setReward_TOD36()", type_label=function_definition];
1918 [label="307_ require (!claimed_TOD36);\n1918-expression_statement-308-308", method="setReward_TOD36()", type_label=expression_statement];
1924 [label="308_ require(msg.sender == owner_TOD36);\n1924-expression_statement-309-309", method="setReward_TOD36()", type_label=expression_statement];
1933 [label="309_ owner_TOD36.transfer(reward_TOD36);\n1933-expression_statement-310-310", method="setReward_TOD36()", type_label=expression_statement];
1940 [label="310_ reward_TOD36 = msg.value;\n1940-expression_statement-311-311", method="setReward_TOD36()", type_label=expression_statement];
1946 [label="312_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n1946-function_definition-313-318", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
1954 [label="313_ require (!claimed_TOD36);\n1954-expression_statement-314-314", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1960 [label="314_ require(submission < 10);\n1960-expression_statement-315-315", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1967 [label="315_ msg.sender.transfer(reward_TOD36);\n1967-expression_statement-316-316", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1976 [label="316_ claimed_TOD36 = true;\n1976-expression_statement-317-317", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1981 [label="318_ function setPaused(bool value) external onlyContractOwner {\n        paused = value;\n    }\n1981-function_definition-319-321", method="setPaused(bool value)", type_label=function_definition];
1988 [label="318_ onlyContractOwner\n1988-expression_statement-319-319", method="setPaused(bool value)", type_label=expression_statement];
1991 [label="319_ paused = value;\n1991-expression_statement-320-320", method="setPaused(bool value)", type_label=expression_statement];
1995 [label="321_ address payable winner_TOD35;\n1995-new_variable-322-322", method="", type_label=new_variable];
1999 [label="322_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n1999-function_definition-323-327", method="play_TOD35(bytes32 guess)", type_label=function_definition];
2007 [label="323_ if\n2007-if-324-326", method="play_TOD35(bytes32 guess)", type_label=if];
4215 [label="323_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
2029 [label="324_ winner_TOD35 = msg.sender;\n2029-expression_statement-325-325", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
2035 [label="327_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n2035-function_definition-328-330", method="getReward_TOD35()", type_label=function_definition];
2040 [label="328_ winner_TOD35.transfer(msg.value);\n2040-expression_statement-329-329", method="getReward_TOD35()", type_label=expression_statement];
2049 [label="330_ function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {\n        owner.transfer(withdrawAmount);\n    }\n2049-function_definition-331-333", method="withdrawFunds(uint256 withdrawAmount)", type_label=function_definition];
2056 [label="330_ onlyContractOwner\n2056-expression_statement-331-331", method="withdrawFunds(uint256 withdrawAmount)", type_label=expression_statement];
2059 [label="331_ owner.transfer(withdrawAmount);\n2059-expression_statement-332-332", method="withdrawFunds(uint256 withdrawAmount)", type_label=expression_statement];
2066 [label="333_ bool claimed_TOD40 = false;\n2066-new_variable-334-334", method="", type_label=new_variable];
2072 [label="334_ address payable owner_TOD40;\n2072-new_variable-335-335", method="", type_label=new_variable];
2076 [label="335_ uint256 reward_TOD40;\n2076-new_variable-336-336", method="", type_label=new_variable];
2080 [label="336_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n2080-function_definition-337-342", method="setReward_TOD40()", type_label=function_definition];
2085 [label="337_ require (!claimed_TOD40);\n2085-expression_statement-338-338", method="setReward_TOD40()", type_label=expression_statement];
2091 [label="338_ require(msg.sender == owner_TOD40);\n2091-expression_statement-339-339", method="setReward_TOD40()", type_label=expression_statement];
2100 [label="339_ owner_TOD40.transfer(reward_TOD40);\n2100-expression_statement-340-340", method="setReward_TOD40()", type_label=expression_statement];
2107 [label="340_ reward_TOD40 = msg.value;\n2107-expression_statement-341-341", method="setReward_TOD40()", type_label=expression_statement];
2113 [label="342_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n2113-function_definition-343-348", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
2121 [label="343_ require (!claimed_TOD40);\n2121-expression_statement-344-344", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2127 [label="344_ require(submission < 10);\n2127-expression_statement-345-345", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2134 [label="345_ msg.sender.transfer(reward_TOD40);\n2134-expression_statement-346-346", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2143 [label="346_ claimed_TOD40 = true;\n2143-expression_statement-347-347", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2148 [label="348_ function kill() external onlyContractOwner {\n        selfdestruct(owner);\n    }\n2148-function_definition-349-351", method="kill()", type_label=function_definition];
2151 [label="348_ onlyContractOwner\n2151-expression_statement-349-349", method="kill()", type_label=expression_statement];
2154 [label="349_ selfdestruct(owner);\n2154-expression_statement-350-350", method="kill()", type_label=expression_statement];
2159 [label="351_ address payable winner_TOD33;\n2159-new_variable-352-352", method="", type_label=new_variable];
2163 [label="352_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n2163-function_definition-353-357", method="play_TOD33(bytes32 guess)", type_label=function_definition];
2171 [label="353_ if\n2171-if-354-356", method="play_TOD33(bytes32 guess)", type_label=if];
4379 [label="353_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
2193 [label="354_ winner_TOD33 = msg.sender;\n2193-expression_statement-355-355", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
2199 [label="357_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n2199-function_definition-358-360", method="getReward_TOD33()", type_label=function_definition];
2204 [label="358_ winner_TOD33.transfer(msg.value);\n2204-expression_statement-359-359", method="getReward_TOD33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 67  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
45 -> 2253  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2253 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 2253  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
73 -> 78  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
110 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
118 -> 140  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
118 -> 2326  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2326 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 2326  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
146 -> 151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
240 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
301 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
303 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
338 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
340 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 362  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
357 -> 2565  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2565 -> 364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 2565  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
362 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
364 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
372 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
386 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
423 -> 440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
462 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 506  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
484 -> 2692  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2692 -> 512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
506 -> 2692  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
512 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
526 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
711 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
730 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
760 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
766 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
801 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
814 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
820 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
842 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
856 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
899 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
946 -> 953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
953 -> 962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1020 -> 1042  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1020 -> 3228  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3228 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 3228  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1048 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1092 -> 1114  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1092 -> 3300  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3300 -> 1120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1114 -> 3300  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1120 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1152 -> 1174  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1152 -> 3360  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3360 -> 1180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1174 -> 3360  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1180 -> 1185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 1229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 1227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 1257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1261 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1275 -> 1280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1280 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1286 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1308 -> 1316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1316 -> 1322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1329 -> 1338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1343 -> 1360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1360 -> 1374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1374 -> 1379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1379 -> 1384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 1400  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1384 -> 3592  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3592 -> 1532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1397 -> 1384  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1400 -> 1408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1408 -> 1416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1416 -> 1425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1425 -> 1435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1435 -> 1448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 1460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1467  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1460 -> 3668  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3668 -> 1474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 3668  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1474 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1484 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1493 -> 1502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1502 -> 1511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1511 -> 1397  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1532 -> 1544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1544 -> 1551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1551 -> 1560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1560 -> 1566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1566 -> 1572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 1598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 1613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1613 -> 1622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1622 -> 1629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1635 -> 1643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1643 -> 1649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1649 -> 1656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1656 -> 1665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1670 -> 1684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1684 -> 1701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1701 -> 1722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1722 -> 1729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1729 -> 1738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1738 -> 1744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1744 -> 1750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1750 -> 1756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1756 -> 1764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1791 -> 1799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1799 -> 1821  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1799 -> 4007  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4007 -> 1827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1821 -> 4007  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1827 -> 1832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1841 -> 1849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1849 -> 1858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1858 -> 1868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1868 -> 1888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1899 -> 1905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1905 -> 1909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1913 -> 1918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1918 -> 1924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1924 -> 1933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1933 -> 1940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1946 -> 1954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1954 -> 1960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1960 -> 1967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1967 -> 1976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1981 -> 1991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1999 -> 2007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2007 -> 2029  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2007 -> 4215  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4215 -> 2035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2029 -> 4215  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2035 -> 2040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2049 -> 2059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2066 -> 2072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2072 -> 2076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2080 -> 2085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2085 -> 2091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2091 -> 2100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2100 -> 2107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2113 -> 2121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2121 -> 2127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2127 -> 2134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2134 -> 2143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2148 -> 2154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2163 -> 2171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2171 -> 2193  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2171 -> 4379  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4379 -> 2199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2193 -> 4379  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2199 -> 2204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
