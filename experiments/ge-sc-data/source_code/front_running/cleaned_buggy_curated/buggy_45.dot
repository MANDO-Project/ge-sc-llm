digraph  {
13 [label="2_ address payable winner_TOD39;\n13-new_variable-3-3", method="", type_label=new_variable];
17 [label="3_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n17-function_definition-4-8", method="play_TOD39(bytes32 guess)", type_label=function_definition];
25 [label="4_ if\n25-if-5-7", method="play_TOD39(bytes32 guess)", type_label=if];
2461 [label="4_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
47 [label="5_ winner_TOD39 = msg.sender;\n47-expression_statement-6-6", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
53 [label="8_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n53-function_definition-9-11", method="getReward_TOD39()", type_label=function_definition];
58 [label="9_ winner_TOD39.transfer(msg.value);\n58-expression_statement-10-10", method="getReward_TOD39()", type_label=expression_statement];
73 [label="12_ bool claimed_TOD36 = false;\n73-new_variable-13-13", method="", type_label=new_variable];
79 [label="13_ address payable owner_TOD36;\n79-new_variable-14-14", method="", type_label=new_variable];
83 [label="14_ uint256 reward_TOD36;\n83-new_variable-15-15", method="", type_label=new_variable];
87 [label="15_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n87-function_definition-16-21", method="setReward_TOD36()", type_label=function_definition];
92 [label="16_ require (!claimed_TOD36);\n92-expression_statement-17-17", method="setReward_TOD36()", type_label=expression_statement];
98 [label="17_ require(msg.sender == owner_TOD36);\n98-expression_statement-18-18", method="setReward_TOD36()", type_label=expression_statement];
107 [label="18_ owner_TOD36.transfer(reward_TOD36);\n107-expression_statement-19-19", method="setReward_TOD36()", type_label=expression_statement];
114 [label="19_ reward_TOD36 = msg.value;\n114-expression_statement-20-20", method="setReward_TOD36()", type_label=expression_statement];
120 [label="21_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n120-function_definition-22-27", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
128 [label="22_ require (!claimed_TOD36);\n128-expression_statement-23-23", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
134 [label="23_ require(submission < 10);\n134-expression_statement-24-24", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
141 [label="24_ msg.sender.transfer(reward_TOD36);\n141-expression_statement-25-25", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
150 [label="25_ claimed_TOD36 = true;\n150-expression_statement-26-26", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
161 [label="28_ address payable winner_TOD35;\n161-new_variable-29-29", method="", type_label=new_variable];
165 [label="29_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n165-function_definition-30-34", method="play_TOD35(bytes32 guess)", type_label=function_definition];
173 [label="30_ if\n173-if-31-33", method="play_TOD35(bytes32 guess)", type_label=if];
2609 [label="30_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
195 [label="31_ winner_TOD35 = msg.sender;\n195-expression_statement-32-32", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
201 [label="34_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n201-function_definition-35-37", method="getReward_TOD35()", type_label=function_definition];
206 [label="35_ winner_TOD35.transfer(msg.value);\n206-expression_statement-36-36", method="getReward_TOD35()", type_label=expression_statement];
217 [label="38_ bool claimed_TOD40 = false;\n217-new_variable-39-39", method="", type_label=new_variable];
223 [label="39_ address payable owner_TOD40;\n223-new_variable-40-40", method="", type_label=new_variable];
227 [label="40_ uint256 reward_TOD40;\n227-new_variable-41-41", method="", type_label=new_variable];
231 [label="41_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n231-function_definition-42-47", method="setReward_TOD40()", type_label=function_definition];
236 [label="42_ require (!claimed_TOD40);\n236-expression_statement-43-43", method="setReward_TOD40()", type_label=expression_statement];
242 [label="43_ require(msg.sender == owner_TOD40);\n242-expression_statement-44-44", method="setReward_TOD40()", type_label=expression_statement];
251 [label="44_ owner_TOD40.transfer(reward_TOD40);\n251-expression_statement-45-45", method="setReward_TOD40()", type_label=expression_statement];
258 [label="45_ reward_TOD40 = msg.value;\n258-expression_statement-46-46", method="setReward_TOD40()", type_label=expression_statement];
264 [label="47_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n264-function_definition-48-53", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
272 [label="48_ require (!claimed_TOD40);\n272-expression_statement-49-49", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
278 [label="49_ require(submission < 10);\n278-expression_statement-50-50", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
285 [label="50_ msg.sender.transfer(reward_TOD40);\n285-expression_statement-51-51", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
294 [label="51_ claimed_TOD40 = true;\n294-expression_statement-52-52", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
305 [label="54_ address payable winner_TOD33;\n305-new_variable-55-55", method="", type_label=new_variable];
309 [label="55_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n309-function_definition-56-60", method="play_TOD33(bytes32 guess)", type_label=function_definition];
317 [label="56_ if\n317-if-57-59", method="play_TOD33(bytes32 guess)", type_label=if];
2753 [label="56_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
339 [label="57_ winner_TOD33 = msg.sender;\n339-expression_statement-58-58", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
345 [label="60_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n345-function_definition-61-63", method="getReward_TOD33()", type_label=function_definition];
350 [label="61_ winner_TOD33.transfer(msg.value);\n350-expression_statement-62-62", method="getReward_TOD33()", type_label=expression_statement];
365 [label="64_ address payable winner_TOD27;\n365-new_variable-65-65", method="", type_label=new_variable];
369 [label="65_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n369-function_definition-66-70", method="play_TOD27(bytes32 guess)", type_label=function_definition];
377 [label="66_ if\n377-if-67-69", method="play_TOD27(bytes32 guess)", type_label=if];
2813 [label="66_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
399 [label="67_ winner_TOD27 = msg.sender;\n399-expression_statement-68-68", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
405 [label="70_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n405-function_definition-71-73", method="getReward_TOD27()", type_label=function_definition];
410 [label="71_ winner_TOD27.transfer(msg.value);\n410-expression_statement-72-72", method="getReward_TOD27()", type_label=expression_statement];
429 [label="74_ address payable winner_TOD31;\n429-new_variable-75-75", method="", type_label=new_variable];
433 [label="75_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n433-function_definition-76-80", method="play_TOD31(bytes32 guess)", type_label=function_definition];
441 [label="76_ if\n441-if-77-79", method="play_TOD31(bytes32 guess)", type_label=if];
2877 [label="76_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
463 [label="77_ winner_TOD31 = msg.sender;\n463-expression_statement-78-78", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
469 [label="80_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n469-function_definition-81-83", method="getReward_TOD31()", type_label=function_definition];
474 [label="81_ winner_TOD31.transfer(msg.value);\n474-expression_statement-82-82", method="getReward_TOD31()", type_label=expression_statement];
493 [label="84_ address payable winner_TOD13;\n493-new_variable-85-85", method="", type_label=new_variable];
497 [label="85_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n497-function_definition-86-90", method="play_TOD13(bytes32 guess)", type_label=function_definition];
505 [label="86_ if\n505-if-87-89", method="play_TOD13(bytes32 guess)", type_label=if];
2941 [label="86_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
527 [label="87_ winner_TOD13 = msg.sender;\n527-expression_statement-88-88", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
533 [label="90_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n533-function_definition-91-93", method="getReward_TOD13()", type_label=function_definition];
538 [label="91_ winner_TOD13.transfer(msg.value);\n538-expression_statement-92-92", method="getReward_TOD13()", type_label=expression_statement];
566 [label="102_ struct Guess {\n        mapping (address => PaidStatus) players;\n        uint guesses_number;\n    }\n566-expression_statement-103-106", method="Guess()", type_label=expression_statement];
579 [label="106_ bool claimed_TOD12 = false;\n579-new_variable-107-107", method="", type_label=new_variable];
585 [label="107_ address payable owner_TOD12;\n585-new_variable-108-108", method="", type_label=new_variable];
589 [label="108_ uint256 reward_TOD12;\n589-new_variable-109-109", method="", type_label=new_variable];
593 [label="109_ function setReward_TOD12() public payable {\n        require (!claimed_TOD12);\n        require(msg.sender == owner_TOD12);\n        owner_TOD12.transfer(reward_TOD12);\n        reward_TOD12 = msg.value;\n    }\n593-function_definition-110-115", method="setReward_TOD12()", type_label=function_definition];
598 [label="110_ require (!claimed_TOD12);\n598-expression_statement-111-111", method="setReward_TOD12()", type_label=expression_statement];
604 [label="111_ require(msg.sender == owner_TOD12);\n604-expression_statement-112-112", method="setReward_TOD12()", type_label=expression_statement];
613 [label="112_ owner_TOD12.transfer(reward_TOD12);\n613-expression_statement-113-113", method="setReward_TOD12()", type_label=expression_statement];
620 [label="113_ reward_TOD12 = msg.value;\n620-expression_statement-114-114", method="setReward_TOD12()", type_label=expression_statement];
626 [label="115_ function claimReward_TOD12(uint256 submission) public {\n        require (!claimed_TOD12);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD12);\n        claimed_TOD12 = true;\n    }\n626-function_definition-116-121", method="claimReward_TOD12(uint256 submission)", type_label=function_definition];
634 [label="116_ require (!claimed_TOD12);\n634-expression_statement-117-117", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
640 [label="117_ require(submission < 10);\n640-expression_statement-118-118", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
647 [label="118_ msg.sender.transfer(reward_TOD12);\n647-expression_statement-119-119", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
656 [label="119_ claimed_TOD12 = true;\n656-expression_statement-120-120", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
661 [label="121_ address payable public owner;\n661-new_variable-122-122", method="", type_label=new_variable];
666 [label="122_ address payable winner_TOD11;\n666-new_variable-123-123", method="", type_label=new_variable];
670 [label="123_ function play_TOD11(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD11 = msg.sender;\n        }\n    }\n670-function_definition-124-128", method="play_TOD11(bytes32 guess)", type_label=function_definition];
678 [label="124_ if\n678-if-125-127", method="play_TOD11(bytes32 guess)", type_label=if];
3114 [label="124_ end_if", method="play_TOD11(bytes32 guess)", type_label=end_if];
700 [label="125_ winner_TOD11 = msg.sender;\n700-expression_statement-126-126", method="play_TOD11(bytes32 guess)", type_label=expression_statement];
706 [label="128_ function getReward_TOD11() payable public{\n       winner_TOD11.transfer(msg.value);\n    }\n706-function_definition-129-131", method="getReward_TOD11()", type_label=function_definition];
711 [label="129_ winner_TOD11.transfer(msg.value);\n711-expression_statement-130-130", method="getReward_TOD11()", type_label=expression_statement];
720 [label="131_ address public oracle;\n720-new_variable-132-132", method="", type_label=new_variable];
725 [label="132_ address payable winner_TOD1;\n725-new_variable-133-133", method="", type_label=new_variable];
729 [label="133_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n729-function_definition-134-138", method="play_TOD1(bytes32 guess)", type_label=function_definition];
737 [label="134_ if\n737-if-135-137", method="play_TOD1(bytes32 guess)", type_label=if];
3173 [label="134_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
759 [label="135_ winner_TOD1 = msg.sender;\n759-expression_statement-136-136", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
765 [label="138_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n765-function_definition-139-141", method="getReward_TOD1()", type_label=function_definition];
770 [label="139_ winner_TOD1.transfer(msg.value);\n770-expression_statement-140-140", method="getReward_TOD1()", type_label=expression_statement];
779 [label="141_ State public state;\n779-new_variable-142-142", method="", type_label=new_variable];
785 [label="142_ bool claimed_TOD2 = false;\n785-new_variable-143-143", method="", type_label=new_variable];
791 [label="143_ address payable owner_TOD2;\n791-new_variable-144-144", method="", type_label=new_variable];
795 [label="144_ uint256 reward_TOD2;\n795-new_variable-145-145", method="", type_label=new_variable];
799 [label="145_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n799-function_definition-146-151", method="setReward_TOD2()", type_label=function_definition];
804 [label="146_ require (!claimed_TOD2);\n804-expression_statement-147-147", method="setReward_TOD2()", type_label=expression_statement];
810 [label="147_ require(msg.sender == owner_TOD2);\n810-expression_statement-148-148", method="setReward_TOD2()", type_label=expression_statement];
819 [label="148_ owner_TOD2.transfer(reward_TOD2);\n819-expression_statement-149-149", method="setReward_TOD2()", type_label=expression_statement];
826 [label="149_ reward_TOD2 = msg.value;\n826-expression_statement-150-150", method="setReward_TOD2()", type_label=expression_statement];
832 [label="151_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n832-function_definition-152-157", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
840 [label="152_ require (!claimed_TOD2);\n840-expression_statement-153-153", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
846 [label="153_ require(submission < 10);\n846-expression_statement-154-154", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
853 [label="154_ msg.sender.transfer(reward_TOD2);\n853-expression_statement-155-155", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
862 [label="155_ claimed_TOD2 = true;\n862-expression_statement-156-156", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
867 [label="157_ mapping (uint => Guess) public guesses;\n867-new_variable-158-158", method="", type_label=new_variable];
875 [label="158_ address payable winner_TOD17;\n875-new_variable-159-159", method="", type_label=new_variable];
879 [label="159_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n879-function_definition-160-164", method="play_TOD17(bytes32 guess)", type_label=function_definition];
887 [label="160_ if\n887-if-161-163", method="play_TOD17(bytes32 guess)", type_label=if];
3323 [label="160_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
909 [label="161_ winner_TOD17 = msg.sender;\n909-expression_statement-162-162", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
915 [label="164_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n915-function_definition-165-167", method="getReward_TOD17()", type_label=function_definition];
920 [label="165_ winner_TOD17.transfer(msg.value);\n920-expression_statement-166-166", method="getReward_TOD17()", type_label=expression_statement];
929 [label="167_ uint256 public bet;\n929-new_variable-168-168", method="", type_label=new_variable];
934 [label="168_ uint256 splitJackpot;\n934-new_variable-169-169", method="", type_label=new_variable];
938 [label="169_ address payable winner_TOD37;\n938-new_variable-170-170", method="", type_label=new_variable];
942 [label="170_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n942-function_definition-171-175", method="play_TOD37(bytes32 guess)", type_label=function_definition];
950 [label="171_ if\n950-if-172-174", method="play_TOD37(bytes32 guess)", type_label=if];
3386 [label="171_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
972 [label="172_ winner_TOD37 = msg.sender;\n972-expression_statement-173-173", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
978 [label="175_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n978-function_definition-176-178", method="getReward_TOD37()", type_label=function_definition];
983 [label="176_ winner_TOD37.transfer(msg.value);\n983-expression_statement-177-177", method="getReward_TOD37()", type_label=expression_statement];
992 [label="178_ uint public result;\n992-new_variable-179-179", method="", type_label=new_variable];
997 [label="179_ address payable winner_TOD3;\n997-new_variable-180-180", method="", type_label=new_variable];
1001 [label="180_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n1001-function_definition-181-185", method="play_TOD3(bytes32 guess)", type_label=function_definition];
1009 [label="181_ if\n1009-if-182-184", method="play_TOD3(bytes32 guess)", type_label=if];
3445 [label="181_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
1031 [label="182_ winner_TOD3 = msg.sender;\n1031-expression_statement-183-183", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
1037 [label="185_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n1037-function_definition-186-188", method="getReward_TOD3()", type_label=function_definition];
1042 [label="186_ winner_TOD3.transfer(msg.value);\n1042-expression_statement-187-187", method="getReward_TOD3()", type_label=expression_statement];
1051 [label="188_ uint256 public initialPrice;\n1051-new_variable-189-189", method="", type_label=new_variable];
1056 [label="189_ address payable winner_TOD9;\n1056-new_variable-190-190", method="", type_label=new_variable];
1060 [label="190_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n1060-function_definition-191-195", method="play_TOD9(bytes32 guess)", type_label=function_definition];
1068 [label="191_ if\n1068-if-192-194", method="play_TOD9(bytes32 guess)", type_label=if];
3504 [label="191_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
1090 [label="192_ winner_TOD9 = msg.sender;\n1090-expression_statement-193-193", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
1096 [label="195_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n1096-function_definition-196-198", method="getReward_TOD9()", type_label=function_definition];
1101 [label="196_ winner_TOD9.transfer(msg.value);\n1101-expression_statement-197-197", method="getReward_TOD9()", type_label=expression_statement];
1110 [label="198_ uint256 public finalPrice;\n1110-new_variable-199-199", method="", type_label=new_variable];
1115 [label="199_ address payable winner_TOD25;\n1115-new_variable-200-200", method="", type_label=new_variable];
1119 [label="200_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n1119-function_definition-201-205", method="play_TOD25(bytes32 guess)", type_label=function_definition];
1127 [label="201_ if\n1127-if-202-204", method="play_TOD25(bytes32 guess)", type_label=if];
3563 [label="201_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
1149 [label="202_ winner_TOD25 = msg.sender;\n1149-expression_statement-203-203", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
1155 [label="205_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n1155-function_definition-206-208", method="getReward_TOD25()", type_label=function_definition];
1160 [label="206_ winner_TOD25.transfer(msg.value);\n1160-expression_statement-207-207", method="getReward_TOD25()", type_label=expression_statement];
1169 [label="208_ uint constant UP = 1;\n1169-new_variable-209-209", method="", type_label=new_variable];
1174 [label="209_ address payable winner_TOD19;\n1174-new_variable-210-210", method="", type_label=new_variable];
1178 [label="210_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n1178-function_definition-211-215", method="play_TOD19(bytes32 guess)", type_label=function_definition];
1186 [label="211_ if\n1186-if-212-214", method="play_TOD19(bytes32 guess)", type_label=if];
3622 [label="211_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
1208 [label="212_ winner_TOD19 = msg.sender;\n1208-expression_statement-213-213", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
1214 [label="215_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n1214-function_definition-216-218", method="getReward_TOD19()", type_label=function_definition];
1219 [label="216_ winner_TOD19.transfer(msg.value);\n1219-expression_statement-217-217", method="getReward_TOD19()", type_label=expression_statement];
1228 [label="218_ uint constant DOWN = 0;\n1228-new_variable-219-219", method="", type_label=new_variable];
1233 [label="219_ modifier byPlayer(){\n        require(msg.sender != oracle);\n        _;\n    }\n1233-expression_statement-220-223", method="", type_label=expression_statement];
1236 [label="220_ require(msg.sender != oracle);\n1236-expression_statement-221-221", method="", type_label=expression_statement];
1245 [label="221_ _;\n1245-expression_statement-222-222", method="", type_label=expression_statement];
1247 [label="223_ modifier byOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n1247-expression_statement-224-227", method="", type_label=expression_statement];
1250 [label="224_ require(msg.sender == owner);\n1250-expression_statement-225-225", method="", type_label=expression_statement];
1259 [label="225_ _;\n1259-expression_statement-226-226", method="", type_label=expression_statement];
1261 [label="227_ modifier byOracle(){\n        require(msg.sender == oracle);\n        _;\n    }\n1261-expression_statement-228-231", method="", type_label=expression_statement];
1264 [label="228_ require(msg.sender == oracle);\n1264-expression_statement-229-229", method="", type_label=expression_statement];
1273 [label="229_ _;\n1273-expression_statement-230-230", method="", type_label=expression_statement];
1275 [label="231_ modifier inState(State expected) {\n        require(state == expected);\n        _;\n    }\n1275-expression_statement-232-235", method="", type_label=expression_statement];
1283 [label="232_ require(state == expected);\n1283-expression_statement-233-233", method="", type_label=expression_statement];
1290 [label="233_ _;\n1290-expression_statement-234-234", method="", type_label=expression_statement];
1298 [label="236_ require(_bet > 0);\n1298-expression_statement-237-237", method="", type_label=expression_statement];
1305 [label="237_ owner = msg.sender;\n1305-expression_statement-238-238", method="", type_label=expression_statement];
1311 [label="238_ state = State.SETUP;\n1311-expression_statement-239-239", method="", type_label=expression_statement];
1317 [label="239_ bet = _bet;\n1317-expression_statement-240-240", method="", type_label=expression_statement];
1325 [label="242_ bool claimed_TOD26 = false;\n1325-new_variable-243-243", method="", type_label=new_variable];
1331 [label="243_ address payable owner_TOD26;\n1331-new_variable-244-244", method="", type_label=new_variable];
1335 [label="244_ uint256 reward_TOD26;\n1335-new_variable-245-245", method="", type_label=new_variable];
1339 [label="245_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n1339-function_definition-246-251", method="setReward_TOD26()", type_label=function_definition];
1344 [label="246_ require (!claimed_TOD26);\n1344-expression_statement-247-247", method="setReward_TOD26()", type_label=expression_statement];
1350 [label="247_ require(msg.sender == owner_TOD26);\n1350-expression_statement-248-248", method="setReward_TOD26()", type_label=expression_statement];
1359 [label="248_ owner_TOD26.transfer(reward_TOD26);\n1359-expression_statement-249-249", method="setReward_TOD26()", type_label=expression_statement];
1366 [label="249_ reward_TOD26 = msg.value;\n1366-expression_statement-250-250", method="setReward_TOD26()", type_label=expression_statement];
1372 [label="251_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n1372-function_definition-252-257", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
1380 [label="252_ require (!claimed_TOD26);\n1380-expression_statement-253-253", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1386 [label="253_ require(submission < 10);\n1386-expression_statement-254-254", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1393 [label="254_ msg.sender.transfer(reward_TOD26);\n1393-expression_statement-255-255", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1402 [label="255_ claimed_TOD26 = true;\n1402-expression_statement-256-256", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1407 [label="257_ function setOracle(address _oracle) public payable byOwner inState(State.SETUP) {\n        oracle = _oracle;\n        emit OracleSet(oracle);\n    }\n1407-function_definition-258-261", method="setOracle(address _oracle)", type_label=function_definition];
1415 [label="257_ byOwner\n1415-expression_statement-258-258", method="setOracle(address _oracle)", type_label=expression_statement];
1417 [label="257_ inState(State.SETUP)\n1417-expression_statement-258-258", method="setOracle(address _oracle)", type_label=expression_statement];
1424 [label="258_ oracle = _oracle;\n1424-expression_statement-259-259", method="setOracle(address _oracle)", type_label=expression_statement];
1432 [label="261_ bool claimed_TOD20 = false;\n1432-new_variable-262-262", method="", type_label=new_variable];
1438 [label="262_ address payable owner_TOD20;\n1438-new_variable-263-263", method="", type_label=new_variable];
1442 [label="263_ uint256 reward_TOD20;\n1442-new_variable-264-264", method="", type_label=new_variable];
1446 [label="264_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n1446-function_definition-265-270", method="setReward_TOD20()", type_label=function_definition];
1451 [label="265_ require (!claimed_TOD20);\n1451-expression_statement-266-266", method="setReward_TOD20()", type_label=expression_statement];
1457 [label="266_ require(msg.sender == owner_TOD20);\n1457-expression_statement-267-267", method="setReward_TOD20()", type_label=expression_statement];
1466 [label="267_ owner_TOD20.transfer(reward_TOD20);\n1466-expression_statement-268-268", method="setReward_TOD20()", type_label=expression_statement];
1473 [label="268_ reward_TOD20 = msg.value;\n1473-expression_statement-269-269", method="setReward_TOD20()", type_label=expression_statement];
1479 [label="270_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n1479-function_definition-271-276", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
1487 [label="271_ require (!claimed_TOD20);\n1487-expression_statement-272-272", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1493 [label="272_ require(submission < 10);\n1493-expression_statement-273-273", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1500 [label="273_ msg.sender.transfer(reward_TOD20);\n1500-expression_statement-274-274", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1509 [label="274_ claimed_TOD20 = true;\n1509-expression_statement-275-275", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1514 [label="276_ function setInitialPrice(uint256 _value) public payable byOracle inState(State.SETUP) {\n        initialPrice = _value;\n        state = State.OPEN;\n        emit GameOpened(initialPrice);\n    }\n1514-function_definition-277-281", method="setInitialPrice(uint256 _value)", type_label=function_definition];
1522 [label="276_ byOracle\n1522-expression_statement-277-277", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
1524 [label="276_ inState(State.SETUP)\n1524-expression_statement-277-277", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
1531 [label="277_ initialPrice = _value;\n1531-expression_statement-278-278", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
1535 [label="278_ state = State.OPEN;\n1535-expression_statement-279-279", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
1545 [label="281_ bool claimed_TOD32 = false;\n1545-new_variable-282-282", method="", type_label=new_variable];
1551 [label="282_ address payable owner_TOD32;\n1551-new_variable-283-283", method="", type_label=new_variable];
1555 [label="283_ uint256 reward_TOD32;\n1555-new_variable-284-284", method="", type_label=new_variable];
1559 [label="284_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n1559-function_definition-285-290", method="setReward_TOD32()", type_label=function_definition];
1564 [label="285_ require (!claimed_TOD32);\n1564-expression_statement-286-286", method="setReward_TOD32()", type_label=expression_statement];
1570 [label="286_ require(msg.sender == owner_TOD32);\n1570-expression_statement-287-287", method="setReward_TOD32()", type_label=expression_statement];
1579 [label="287_ owner_TOD32.transfer(reward_TOD32);\n1579-expression_statement-288-288", method="setReward_TOD32()", type_label=expression_statement];
1586 [label="288_ reward_TOD32 = msg.value;\n1586-expression_statement-289-289", method="setReward_TOD32()", type_label=expression_statement];
1592 [label="290_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n1592-function_definition-291-296", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
1600 [label="291_ require (!claimed_TOD32);\n1600-expression_statement-292-292", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1606 [label="292_ require(submission < 10);\n1606-expression_statement-293-293", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1613 [label="293_ msg.sender.transfer(reward_TOD32);\n1613-expression_statement-294-294", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1622 [label="294_ claimed_TOD32 = true;\n1622-expression_statement-295-295", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1627 [label="296_ function closeGame() public byOwner inState(State.OPEN){\n        state = State.CLOSED;\n        emit GameClosed();\n    }\n1627-function_definition-297-300", method="closeGame()", type_label=function_definition];
1630 [label="296_ byOwner\n1630-expression_statement-297-297", method="closeGame()", type_label=expression_statement];
1632 [label="296_ inState(State.OPEN)\n1632-expression_statement-297-297", method="closeGame()", type_label=expression_statement];
1639 [label="297_ state = State.CLOSED;\n1639-expression_statement-298-298", method="closeGame()", type_label=expression_statement];
1647 [label="300_ bool claimed_TOD38 = false;\n1647-new_variable-301-301", method="", type_label=new_variable];
1653 [label="301_ address payable owner_TOD38;\n1653-new_variable-302-302", method="", type_label=new_variable];
1657 [label="302_ uint256 reward_TOD38;\n1657-new_variable-303-303", method="", type_label=new_variable];
1661 [label="303_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n1661-function_definition-304-309", method="setReward_TOD38()", type_label=function_definition];
1666 [label="304_ require (!claimed_TOD38);\n1666-expression_statement-305-305", method="setReward_TOD38()", type_label=expression_statement];
1672 [label="305_ require(msg.sender == owner_TOD38);\n1672-expression_statement-306-306", method="setReward_TOD38()", type_label=expression_statement];
1681 [label="306_ owner_TOD38.transfer(reward_TOD38);\n1681-expression_statement-307-307", method="setReward_TOD38()", type_label=expression_statement];
1688 [label="307_ reward_TOD38 = msg.value;\n1688-expression_statement-308-308", method="setReward_TOD38()", type_label=expression_statement];
1694 [label="309_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n1694-function_definition-310-315", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
1702 [label="310_ require (!claimed_TOD38);\n1702-expression_statement-311-311", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1708 [label="311_ require(submission < 10);\n1708-expression_statement-312-312", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1715 [label="312_ msg.sender.transfer(reward_TOD38);\n1715-expression_statement-313-313", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1724 [label="313_ claimed_TOD38 = true;\n1724-expression_statement-314-314", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1729 [label="315_ function betUp() public payable byPlayer inState(State.OPEN){\n        require(msg.value == (bet*0.001 ether));\n        guesses[UP].guesses_number++;\n        guesses[UP].players[msg.sender] = PaidStatus.NOT_PAID;\n        emit PlayerBet(msg.sender, UP);\n    }\n1729-function_definition-316-321", method="betUp()", type_label=function_definition];
1733 [label="315_ byPlayer\n1733-expression_statement-316-316", method="betUp()", type_label=expression_statement];
1735 [label="315_ inState(State.OPEN)\n1735-expression_statement-316-316", method="betUp()", type_label=expression_statement];
1742 [label="316_ require(msg.value == (bet*0.001 ether));\n1742-expression_statement-317-317", method="betUp()", type_label=expression_statement];
1755 [label="317_ guesses[UP].guesses_number++;\n1755-expression_statement-318-318", method="betUp()", type_label=expression_statement];
1756 [label="317_ guesses[UP].guesses_number++\n1756-expression_statement-318-318", method="betUp()", type_label=expression_statement];
1762 [label="318_ guesses[UP].players[msg.sender] = PaidStatus.NOT_PAID;\n1762-expression_statement-319-319", method="betUp()", type_label=expression_statement];
1784 [label="321_ bool claimed_TOD4 = false;\n1784-new_variable-322-322", method="", type_label=new_variable];
1790 [label="322_ address payable owner_TOD4;\n1790-new_variable-323-323", method="", type_label=new_variable];
1794 [label="323_ uint256 reward_TOD4;\n1794-new_variable-324-324", method="", type_label=new_variable];
1798 [label="324_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n1798-function_definition-325-330", method="setReward_TOD4()", type_label=function_definition];
1803 [label="325_ require (!claimed_TOD4);\n1803-expression_statement-326-326", method="setReward_TOD4()", type_label=expression_statement];
1809 [label="326_ require(msg.sender == owner_TOD4);\n1809-expression_statement-327-327", method="setReward_TOD4()", type_label=expression_statement];
1818 [label="327_ owner_TOD4.transfer(reward_TOD4);\n1818-expression_statement-328-328", method="setReward_TOD4()", type_label=expression_statement];
1825 [label="328_ reward_TOD4 = msg.value;\n1825-expression_statement-329-329", method="setReward_TOD4()", type_label=expression_statement];
1831 [label="330_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n1831-function_definition-331-336", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
1839 [label="331_ require (!claimed_TOD4);\n1839-expression_statement-332-332", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1845 [label="332_ require(submission < 10);\n1845-expression_statement-333-333", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1852 [label="333_ msg.sender.transfer(reward_TOD4);\n1852-expression_statement-334-334", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1861 [label="334_ claimed_TOD4 = true;\n1861-expression_statement-335-335", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1866 [label="336_ function betDown() public payable byPlayer inState(State.OPEN){\n        require(msg.value == (bet*0.001 ether));\n        guesses[DOWN].guesses_number++;\n        guesses[DOWN].players[msg.sender] = PaidStatus.NOT_PAID;\n        emit PlayerBet(msg.sender, DOWN);\n    }\n1866-function_definition-337-342", method="betDown()", type_label=function_definition];
1870 [label="336_ byPlayer\n1870-expression_statement-337-337", method="betDown()", type_label=expression_statement];
1872 [label="336_ inState(State.OPEN)\n1872-expression_statement-337-337", method="betDown()", type_label=expression_statement];
1879 [label="337_ require(msg.value == (bet*0.001 ether));\n1879-expression_statement-338-338", method="betDown()", type_label=expression_statement];
1892 [label="338_ guesses[DOWN].guesses_number++;\n1892-expression_statement-339-339", method="betDown()", type_label=expression_statement];
1893 [label="338_ guesses[DOWN].guesses_number++\n1893-expression_statement-339-339", method="betDown()", type_label=expression_statement];
1899 [label="339_ guesses[DOWN].players[msg.sender] = PaidStatus.NOT_PAID;\n1899-expression_statement-340-340", method="betDown()", type_label=expression_statement];
1921 [label="342_ address payable winner_TOD7;\n1921-new_variable-343-343", method="", type_label=new_variable];
1925 [label="343_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n1925-function_definition-344-348", method="play_TOD7(bytes32 guess)", type_label=function_definition];
1933 [label="344_ if\n1933-if-345-347", method="play_TOD7(bytes32 guess)", type_label=if];
4369 [label="344_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
1955 [label="345_ winner_TOD7 = msg.sender;\n1955-expression_statement-346-346", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
1961 [label="348_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n1961-function_definition-349-351", method="getReward_TOD7()", type_label=function_definition];
1966 [label="349_ winner_TOD7.transfer(msg.value);\n1966-expression_statement-350-350", method="getReward_TOD7()", type_label=expression_statement];
1975 [label="351_ function setFinalPrice(uint256 _value) public payable byOracle inState(State.CLOSED) {\n        finalPrice = _value;\n        emit FinalPriceSet(finalPrice);\n        if(finalPrice > initialPrice){\n            result = UP;\n        }else{\n            result = DOWN;\n        }\n        if(guesses[result].guesses_number > 0){\n            state = State.PLAYERS_WIN;\n            splitJackpot = getBalance()/guesses[result].guesses_number;\n            emit PlayersWin(result, splitJackpot);\n        }else{\n            state = State.OWNER_WIN;\n            emit OwnerWins(owner);\n        }\n    }\n1975-function_definition-352-368", method="setFinalPrice(uint256 _value)", type_label=function_definition];
1983 [label="351_ byOracle\n1983-expression_statement-352-352", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1985 [label="351_ inState(State.CLOSED)\n1985-expression_statement-352-352", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1992 [label="352_ finalPrice = _value;\n1992-expression_statement-353-353", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
2000 [label="354_ if_finalPrice > initialPrice\n2000-if-355-359", method="setFinalPrice(uint256 _value)", type_label=if];
4436 [label="354_ end_if", method="setFinalPrice(uint256 _value)", type_label=end_if];
2005 [label="355_ result = UP;\n2005-expression_statement-356-356", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
2010 [label="357_ result = DOWN;\n2010-expression_statement-358-358", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
2014 [label="359_ if_guesses[result].guesses_number > 0\n2014-if-360-367", method="setFinalPrice(uint256 _value)", type_label=if];
4450 [label="359_ end_if", method="setFinalPrice(uint256 _value)", type_label=end_if];
2023 [label="360_ state = State.PLAYERS_WIN;\n2023-expression_statement-361-361", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
2029 [label="361_ splitJackpot = getBalance()/guesses[result].guesses_number;\n2029-expression_statement-362-362", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
2047 [label="364_ state = State.OWNER_WIN;\n2047-expression_statement-365-365", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
2057 [label="368_ address payable winner_TOD23;\n2057-new_variable-369-369", method="", type_label=new_variable];
2061 [label="369_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n2061-function_definition-370-374", method="play_TOD23(bytes32 guess)", type_label=function_definition];
2069 [label="370_ if\n2069-if-371-373", method="play_TOD23(bytes32 guess)", type_label=if];
4505 [label="370_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
2091 [label="371_ winner_TOD23 = msg.sender;\n2091-expression_statement-372-372", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
2097 [label="374_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n2097-function_definition-375-377", method="getReward_TOD23()", type_label=function_definition];
2102 [label="375_ winner_TOD23.transfer(msg.value);\n2102-expression_statement-376-376", method="getReward_TOD23()", type_label=expression_statement];
2111 [label="377_ function collectOwnerWinnings() public byOwner inState(State.OWNER_WIN){\n        selfdestruct(owner);\n    }\n2111-function_definition-378-380", method="collectOwnerWinnings()", type_label=function_definition];
2114 [label="377_ byOwner\n2114-expression_statement-378-378", method="collectOwnerWinnings()", type_label=expression_statement];
2116 [label="377_ inState(State.OWNER_WIN)\n2116-expression_statement-378-378", method="collectOwnerWinnings()", type_label=expression_statement];
2123 [label="378_ selfdestruct(owner);\n2123-expression_statement-379-379", method="collectOwnerWinnings()", type_label=expression_statement];
2128 [label="380_ bool claimed_TOD14 = false;\n2128-new_variable-381-381", method="", type_label=new_variable];
2134 [label="381_ address payable owner_TOD14;\n2134-new_variable-382-382", method="", type_label=new_variable];
2138 [label="382_ uint256 reward_TOD14;\n2138-new_variable-383-383", method="", type_label=new_variable];
2142 [label="383_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n2142-function_definition-384-389", method="setReward_TOD14()", type_label=function_definition];
2147 [label="384_ require (!claimed_TOD14);\n2147-expression_statement-385-385", method="setReward_TOD14()", type_label=expression_statement];
2153 [label="385_ require(msg.sender == owner_TOD14);\n2153-expression_statement-386-386", method="setReward_TOD14()", type_label=expression_statement];
2162 [label="386_ owner_TOD14.transfer(reward_TOD14);\n2162-expression_statement-387-387", method="setReward_TOD14()", type_label=expression_statement];
2169 [label="387_ reward_TOD14 = msg.value;\n2169-expression_statement-388-388", method="setReward_TOD14()", type_label=expression_statement];
2175 [label="389_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n2175-function_definition-390-395", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
2183 [label="390_ require (!claimed_TOD14);\n2183-expression_statement-391-391", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2189 [label="391_ require(submission < 10);\n2189-expression_statement-392-392", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2196 [label="392_ msg.sender.transfer(reward_TOD14);\n2196-expression_statement-393-393", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2205 [label="393_ claimed_TOD14 = true;\n2205-expression_statement-394-394", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2210 [label="395_ function collectPlayerWinnings() public byPlayer inState(State.PLAYERS_WIN){\n        if(guesses[result].players[msg.sender] == PaidStatus.NOT_PAID){\n            guesses[result].players[msg.sender] = PaidStatus.PAID;\n            msg.sender.transfer(splitJackpot);\n        } else revert();\n    }\n2210-function_definition-396-401", method="collectPlayerWinnings()", type_label=function_definition];
2213 [label="395_ byPlayer\n2213-expression_statement-396-396", method="collectPlayerWinnings()", type_label=expression_statement];
2215 [label="395_ inState(State.PLAYERS_WIN)\n2215-expression_statement-396-396", method="collectPlayerWinnings()", type_label=expression_statement];
2222 [label="396_ if_guesses[result].players[msg.sender] == PaidStatus.NOT_PAID\n2222-if-397-400", method="collectPlayerWinnings()", type_label=if];
4658 [label="396_ end_if", method="collectPlayerWinnings()", type_label=end_if];
2237 [label="397_ guesses[result].players[msg.sender] = PaidStatus.PAID;\n2237-expression_statement-398-398", method="collectPlayerWinnings()", type_label=expression_statement];
2251 [label="398_ msg.sender.transfer(splitJackpot);\n2251-expression_statement-399-399", method="collectPlayerWinnings()", type_label=expression_statement];
2262 [label="401_ bool claimed_TOD30 = false;\n2262-new_variable-402-402", method="", type_label=new_variable];
2268 [label="402_ address payable owner_TOD30;\n2268-new_variable-403-403", method="", type_label=new_variable];
2272 [label="403_ uint256 reward_TOD30;\n2272-new_variable-404-404", method="", type_label=new_variable];
2276 [label="404_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n2276-function_definition-405-410", method="setReward_TOD30()", type_label=function_definition];
2281 [label="405_ require (!claimed_TOD30);\n2281-expression_statement-406-406", method="setReward_TOD30()", type_label=expression_statement];
2287 [label="406_ require(msg.sender == owner_TOD30);\n2287-expression_statement-407-407", method="setReward_TOD30()", type_label=expression_statement];
2296 [label="407_ owner_TOD30.transfer(reward_TOD30);\n2296-expression_statement-408-408", method="setReward_TOD30()", type_label=expression_statement];
2303 [label="408_ reward_TOD30 = msg.value;\n2303-expression_statement-409-409", method="setReward_TOD30()", type_label=expression_statement];
2309 [label="410_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n2309-function_definition-411-416", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
2317 [label="411_ require (!claimed_TOD30);\n2317-expression_statement-412-412", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2323 [label="412_ require(submission < 10);\n2323-expression_statement-413-413", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2330 [label="413_ msg.sender.transfer(reward_TOD30);\n2330-expression_statement-414-414", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2339 [label="414_ claimed_TOD30 = true;\n2339-expression_statement-415-415", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2344 [label="416_ function getBalance() private view returns (uint256){\n        return address(this).balance;\n    }\n2344-function_definition-417-419", method="getBalance()", type_label=function_definition];
2353 [label="417_ return address(this).balance;\n2353-return-418-418", method="getBalance()", type_label=return];
2359 [label="419_ bool claimed_TOD8 = false;\n2359-new_variable-420-420", method="", type_label=new_variable];
2365 [label="420_ address payable owner_TOD8;\n2365-new_variable-421-421", method="", type_label=new_variable];
2369 [label="421_ uint256 reward_TOD8;\n2369-new_variable-422-422", method="", type_label=new_variable];
2373 [label="422_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n2373-function_definition-423-428", method="setReward_TOD8()", type_label=function_definition];
2378 [label="423_ require (!claimed_TOD8);\n2378-expression_statement-424-424", method="setReward_TOD8()", type_label=expression_statement];
2384 [label="424_ require(msg.sender == owner_TOD8);\n2384-expression_statement-425-425", method="setReward_TOD8()", type_label=expression_statement];
2393 [label="425_ owner_TOD8.transfer(reward_TOD8);\n2393-expression_statement-426-426", method="setReward_TOD8()", type_label=expression_statement];
2400 [label="426_ reward_TOD8 = msg.value;\n2400-expression_statement-427-427", method="setReward_TOD8()", type_label=expression_statement];
2406 [label="428_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n2406-function_definition-429-434", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
2414 [label="429_ require (!claimed_TOD8);\n2414-expression_statement-430-430", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2420 [label="430_ require(submission < 10);\n2420-expression_statement-431-431", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2427 [label="431_ msg.sender.transfer(reward_TOD8);\n2427-expression_statement-432-432", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2436 [label="432_ claimed_TOD8 = true;\n2436-expression_statement-433-433", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
2053;
2261;
17 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 47  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
25 -> 2461  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2461 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 2461  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
53 -> 58  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 79  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 83  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 92  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
92 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 195  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
173 -> 2609  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2609 -> 201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 2609  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
201 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
217 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
264 -> 272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
272 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 339  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
317 -> 2753  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2753 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 2753  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
345 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 399  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
377 -> 2813  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2813 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
399 -> 2813  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
405 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 463  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
441 -> 2877  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2877 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 2877  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
469 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 527  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
505 -> 2941  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2941 -> 533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
527 -> 2941  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
533 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
566 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
634 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 700  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
678 -> 3114  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3114 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 3114  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
706 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 759  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
737 -> 3173  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3173 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 3173  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
765 -> 770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
779 -> 785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
785 -> 791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
791 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
804 -> 810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
810 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
853 -> 862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
867 -> 875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
879 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
887 -> 909  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
887 -> 3323  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3323 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 3323  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
915 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
934 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
950 -> 972  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
950 -> 3386  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3386 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 3386  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
978 -> 983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1001 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 1031  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1009 -> 3445  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3445 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 3445  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1037 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1051 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1060 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1090  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1068 -> 3504  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3504 -> 1096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 3504  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1096 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1119 -> 1127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1149  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1127 -> 3563  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3563 -> 1155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 3563  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1155 -> 1160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1169 -> 1174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1178 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1208  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1186 -> 3622  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3622 -> 1214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 3622  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1214 -> 1219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1233 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 1259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1261 -> 1275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1264 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1298 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1305 -> 1311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1325 -> 1331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 1344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1344 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1359 -> 1366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1372 -> 1380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 1386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1386 -> 1393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1393 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1407 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1415 -> 1417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1432 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 1442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1446 -> 1451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1451 -> 1457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1457 -> 1466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1466 -> 1473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1479 -> 1487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1487 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1493 -> 1500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1500 -> 1509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1514 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1522 -> 1524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1545 -> 1551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1551 -> 1555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1559 -> 1564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1564 -> 1570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1570 -> 1579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1579 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1592 -> 1600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1600 -> 1606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1606 -> 1613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1613 -> 1622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1627 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1630 -> 1632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1647 -> 1653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1661 -> 1666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1666 -> 1672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1672 -> 1681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1681 -> 1688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1694 -> 1702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1702 -> 1708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1708 -> 1715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1715 -> 1724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1729 -> 1742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1733 -> 1735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1742 -> 1755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1755 -> 1762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1784 -> 1790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1790 -> 1794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1798 -> 1803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1809 -> 1818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1818 -> 1825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1831 -> 1839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1839 -> 1845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1845 -> 1852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1852 -> 1861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1866 -> 1879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1870 -> 1872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1879 -> 1892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1892 -> 1899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1925 -> 1933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1933 -> 1955  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1933 -> 4369  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4369 -> 1961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1955 -> 4369  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1961 -> 1966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1975 -> 1992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1983 -> 1985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2000 -> 2005  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2000 -> 2010  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4436 -> 2014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2005 -> 4436  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2010 -> 4436  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2014 -> 2023  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2014 -> 2047  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2023 -> 2029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2061 -> 2069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2069 -> 2091  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2069 -> 4505  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4505 -> 2097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2091 -> 4505  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2097 -> 2102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2111 -> 2123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2114 -> 2116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2128 -> 2134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2134 -> 2138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2142 -> 2147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2147 -> 2153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2153 -> 2162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2162 -> 2169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2175 -> 2183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2183 -> 2189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2189 -> 2196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2196 -> 2205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2210 -> 2222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2213 -> 2215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2222 -> 2237  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2222 -> 2237  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=1, label=neg_next];
4658 -> 2262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2237 -> 2251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2251 -> 4658  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2262 -> 2268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2268 -> 2272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2276 -> 2281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2281 -> 2287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2287 -> 2296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2296 -> 2303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2309 -> 2317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2317 -> 2323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2323 -> 2330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2330 -> 2339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2344 -> 2353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2353 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2359 -> 2365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2365 -> 2369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2373 -> 2378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2378 -> 2384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2384 -> 2393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2393 -> 2400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2406 -> 2414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2414 -> 2420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2420 -> 2427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2427 -> 2436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2053 -> 4450  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2261 -> 4658  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
