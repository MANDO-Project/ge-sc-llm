digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns (uint c) {	 \n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns (uint c) {	 \n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns (uint c) {	 \n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns (uint c) {	 \n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ address payable winner_TOD17;\n154-new_variable-22-22", method="", type_label=new_variable];
158 [label="22_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n158-function_definition-23-27", method="play_TOD17(bytes32 guess)", type_label=function_definition];
166 [label="23_ if\n166-if-24-26", method="play_TOD17(bytes32 guess)", type_label=if];
3236 [label="23_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
188 [label="24_ winner_TOD17 = msg.sender;\n188-expression_statement-25-25", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
194 [label="27_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n194-function_definition-28-30", method="getReward_TOD17()", type_label=function_definition];
199 [label="28_ winner_TOD17.transfer(msg.value);\n199-expression_statement-29-29", method="getReward_TOD17()", type_label=expression_statement];
208 [label="30_ function balanceOf(address tokenOwner) public view returns (uint balance);\n208-function_definition-31-31", method="balanceOf(address tokenOwner)", type_label=function_definition];
221 [label="31_ address payable winner_TOD37;\n221-new_variable-32-32", method="", type_label=new_variable];
225 [label="32_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n225-function_definition-33-37", method="play_TOD37(bytes32 guess)", type_label=function_definition];
233 [label="33_ if\n233-if-34-36", method="play_TOD37(bytes32 guess)", type_label=if];
3303 [label="33_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
255 [label="34_ winner_TOD37 = msg.sender;\n255-expression_statement-35-35", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
261 [label="37_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n261-function_definition-38-40", method="getReward_TOD37()", type_label=function_definition];
266 [label="38_ winner_TOD37.transfer(msg.value);\n266-expression_statement-39-39", method="getReward_TOD37()", type_label=expression_statement];
275 [label="40_ function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n275-function_definition-41-41", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
292 [label="41_ address payable winner_TOD3;\n292-new_variable-42-42", method="", type_label=new_variable];
296 [label="42_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n296-function_definition-43-47", method="play_TOD3(bytes32 guess)", type_label=function_definition];
304 [label="43_ if\n304-if-44-46", method="play_TOD3(bytes32 guess)", type_label=if];
3374 [label="43_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
326 [label="44_ winner_TOD3 = msg.sender;\n326-expression_statement-45-45", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
332 [label="47_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n332-function_definition-48-50", method="getReward_TOD3()", type_label=function_definition];
337 [label="48_ winner_TOD3.transfer(msg.value);\n337-expression_statement-49-49", method="getReward_TOD3()", type_label=expression_statement];
346 [label="50_ function transfer(address to, uint tokens) public returns (bool success);\n346-function_definition-51-51", method="transfer(address to,uint tokens)", type_label=function_definition];
362 [label="51_ address payable winner_TOD9;\n362-new_variable-52-52", method="", type_label=new_variable];
366 [label="52_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n366-function_definition-53-57", method="play_TOD9(bytes32 guess)", type_label=function_definition];
374 [label="53_ if\n374-if-54-56", method="play_TOD9(bytes32 guess)", type_label=if];
3444 [label="53_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
396 [label="54_ winner_TOD9 = msg.sender;\n396-expression_statement-55-55", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
402 [label="57_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n402-function_definition-58-60", method="getReward_TOD9()", type_label=function_definition];
407 [label="58_ winner_TOD9.transfer(msg.value);\n407-expression_statement-59-59", method="getReward_TOD9()", type_label=expression_statement];
416 [label="60_ function approve(address spender, uint tokens) public returns (bool success);\n416-function_definition-61-61", method="approve(address spender,uint tokens)", type_label=function_definition];
432 [label="61_ address payable winner_TOD25;\n432-new_variable-62-62", method="", type_label=new_variable];
436 [label="62_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n436-function_definition-63-67", method="play_TOD25(bytes32 guess)", type_label=function_definition];
444 [label="63_ if\n444-if-64-66", method="play_TOD25(bytes32 guess)", type_label=if];
3514 [label="63_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
466 [label="64_ winner_TOD25 = msg.sender;\n466-expression_statement-65-65", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
472 [label="67_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n472-function_definition-68-70", method="getReward_TOD25()", type_label=function_definition];
477 [label="68_ winner_TOD25.transfer(msg.value);\n477-expression_statement-69-69", method="getReward_TOD25()", type_label=expression_statement];
486 [label="70_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n486-function_definition-71-71", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
506 [label="71_ address payable winner_TOD19;\n506-new_variable-72-72", method="", type_label=new_variable];
510 [label="72_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n510-function_definition-73-77", method="play_TOD19(bytes32 guess)", type_label=function_definition];
518 [label="73_ if\n518-if-74-76", method="play_TOD19(bytes32 guess)", type_label=if];
3588 [label="73_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
540 [label="74_ winner_TOD19 = msg.sender;\n540-expression_statement-75-75", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
546 [label="77_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n546-function_definition-78-80", method="getReward_TOD19()", type_label=function_definition];
551 [label="78_ winner_TOD19.transfer(msg.value);\n551-expression_statement-79-79", method="getReward_TOD19()", type_label=expression_statement];
560 [label="80_ address payable winner_TOD27;\n560-new_variable-81-81", method="", type_label=new_variable];
564 [label="81_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n564-function_definition-82-86", method="play_TOD27(bytes32 guess)", type_label=function_definition];
572 [label="82_ if\n572-if-83-85", method="play_TOD27(bytes32 guess)", type_label=if];
3642 [label="82_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
594 [label="83_ winner_TOD27 = msg.sender;\n594-expression_statement-84-84", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
600 [label="86_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n600-function_definition-87-89", method="getReward_TOD27()", type_label=function_definition];
605 [label="87_ winner_TOD27.transfer(msg.value);\n605-expression_statement-88-88", method="getReward_TOD27()", type_label=expression_statement];
628 [label="90_ address payable winner_TOD31;\n628-new_variable-91-91", method="", type_label=new_variable];
632 [label="91_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n632-function_definition-92-96", method="play_TOD31(bytes32 guess)", type_label=function_definition];
640 [label="92_ if\n640-if-93-95", method="play_TOD31(bytes32 guess)", type_label=if];
3710 [label="92_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
662 [label="93_ winner_TOD31 = msg.sender;\n662-expression_statement-94-94", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
668 [label="96_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n668-function_definition-97-99", method="getReward_TOD31()", type_label=function_definition];
673 [label="97_ winner_TOD31.transfer(msg.value);\n673-expression_statement-98-98", method="getReward_TOD31()", type_label=expression_statement];
699 [label="102_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n699-function_definition-103-103", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
718 [label="103_ bool claimed_TOD26 = false;\n718-new_variable-104-104", method="", type_label=new_variable];
724 [label="104_ address payable owner_TOD26;\n724-new_variable-105-105", method="", type_label=new_variable];
728 [label="105_ uint256 reward_TOD26;\n728-new_variable-106-106", method="", type_label=new_variable];
732 [label="106_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n732-function_definition-107-112", method="setReward_TOD26()", type_label=function_definition];
737 [label="107_ require (!claimed_TOD26);\n737-expression_statement-108-108", method="setReward_TOD26()", type_label=expression_statement];
743 [label="108_ require(msg.sender == owner_TOD26);\n743-expression_statement-109-109", method="setReward_TOD26()", type_label=expression_statement];
752 [label="109_ owner_TOD26.transfer(reward_TOD26);\n752-expression_statement-110-110", method="setReward_TOD26()", type_label=expression_statement];
759 [label="110_ reward_TOD26 = msg.value;\n759-expression_statement-111-111", method="setReward_TOD26()", type_label=expression_statement];
765 [label="112_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n765-function_definition-113-118", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
773 [label="113_ require (!claimed_TOD26);\n773-expression_statement-114-114", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
779 [label="114_ require(submission < 10);\n779-expression_statement-115-115", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
786 [label="115_ msg.sender.transfer(reward_TOD26);\n786-expression_statement-116-116", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
795 [label="116_ claimed_TOD26 = true;\n795-expression_statement-117-117", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
803 [label="120_ bool claimed_TOD34 = false;\n803-new_variable-121-121", method="", type_label=new_variable];
809 [label="121_ address payable owner_TOD34;\n809-new_variable-122-122", method="", type_label=new_variable];
813 [label="122_ uint256 reward_TOD34;\n813-new_variable-123-123", method="", type_label=new_variable];
817 [label="123_ function setReward_TOD34() public payable {\n        require (!claimed_TOD34);\n        require(msg.sender == owner_TOD34);\n        owner_TOD34.transfer(reward_TOD34);\n        reward_TOD34 = msg.value;\n    }\n817-function_definition-124-129", method="setReward_TOD34()", type_label=function_definition];
822 [label="124_ require (!claimed_TOD34);\n822-expression_statement-125-125", method="setReward_TOD34()", type_label=expression_statement];
828 [label="125_ require(msg.sender == owner_TOD34);\n828-expression_statement-126-126", method="setReward_TOD34()", type_label=expression_statement];
837 [label="126_ owner_TOD34.transfer(reward_TOD34);\n837-expression_statement-127-127", method="setReward_TOD34()", type_label=expression_statement];
844 [label="127_ reward_TOD34 = msg.value;\n844-expression_statement-128-128", method="setReward_TOD34()", type_label=expression_statement];
850 [label="129_ function claimReward_TOD34(uint256 submission) public {\n        require (!claimed_TOD34);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD34);\n        claimed_TOD34 = true;\n    }\n850-function_definition-130-135", method="claimReward_TOD34(uint256 submission)", type_label=function_definition];
858 [label="130_ require (!claimed_TOD34);\n858-expression_statement-131-131", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
864 [label="131_ require(submission < 10);\n864-expression_statement-132-132", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
871 [label="132_ msg.sender.transfer(reward_TOD34);\n871-expression_statement-133-133", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
880 [label="133_ claimed_TOD34 = true;\n880-expression_statement-134-134", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
885 [label="135_ address public owner;\n885-new_variable-136-136", method="", type_label=new_variable];
890 [label="136_ address payable winner_TOD21;\n890-new_variable-137-137", method="", type_label=new_variable];
894 [label="137_ function play_TOD21(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD21 = msg.sender;\n        }\n    }\n894-function_definition-138-142", method="play_TOD21(bytes32 guess)", type_label=function_definition];
902 [label="138_ if\n902-if-139-141", method="play_TOD21(bytes32 guess)", type_label=if];
3972 [label="138_ end_if", method="play_TOD21(bytes32 guess)", type_label=end_if];
924 [label="139_ winner_TOD21 = msg.sender;\n924-expression_statement-140-140", method="play_TOD21(bytes32 guess)", type_label=expression_statement];
930 [label="142_ function getReward_TOD21() payable public{\n       winner_TOD21.transfer(msg.value);\n    }\n930-function_definition-143-145", method="getReward_TOD21()", type_label=function_definition];
935 [label="143_ winner_TOD21.transfer(msg.value);\n935-expression_statement-144-144", method="getReward_TOD21()", type_label=expression_statement];
944 [label="145_ address public newOwner;\n944-new_variable-146-146", method="", type_label=new_variable];
949 [label="146_ address payable winner_TOD13;\n949-new_variable-147-147", method="", type_label=new_variable];
953 [label="147_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n953-function_definition-148-152", method="play_TOD13(bytes32 guess)", type_label=function_definition];
961 [label="148_ if\n961-if-149-151", method="play_TOD13(bytes32 guess)", type_label=if];
4031 [label="148_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
983 [label="149_ winner_TOD13 = msg.sender;\n983-expression_statement-150-150", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
989 [label="152_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n989-function_definition-153-155", method="getReward_TOD13()", type_label=function_definition];
994 [label="153_ winner_TOD13.transfer(msg.value);\n994-expression_statement-154-154", method="getReward_TOD13()", type_label=expression_statement];
1015 [label="157_ owner = msg.sender;\n1015-expression_statement-158-158", method="", type_label=expression_statement];
1021 [label="159_ bool claimed_TOD20 = false;\n1021-new_variable-160-160", method="", type_label=new_variable];
1027 [label="160_ address payable owner_TOD20;\n1027-new_variable-161-161", method="", type_label=new_variable];
1031 [label="161_ uint256 reward_TOD20;\n1031-new_variable-162-162", method="", type_label=new_variable];
1035 [label="162_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n1035-function_definition-163-168", method="setReward_TOD20()", type_label=function_definition];
1040 [label="163_ require (!claimed_TOD20);\n1040-expression_statement-164-164", method="setReward_TOD20()", type_label=expression_statement];
1046 [label="164_ require(msg.sender == owner_TOD20);\n1046-expression_statement-165-165", method="setReward_TOD20()", type_label=expression_statement];
1055 [label="165_ owner_TOD20.transfer(reward_TOD20);\n1055-expression_statement-166-166", method="setReward_TOD20()", type_label=expression_statement];
1062 [label="166_ reward_TOD20 = msg.value;\n1062-expression_statement-167-167", method="setReward_TOD20()", type_label=expression_statement];
1068 [label="168_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n1068-function_definition-169-174", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
1076 [label="169_ require (!claimed_TOD20);\n1076-expression_statement-170-170", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1082 [label="170_ require(submission < 10);\n1082-expression_statement-171-171", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1089 [label="171_ msg.sender.transfer(reward_TOD20);\n1089-expression_statement-172-172", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1098 [label="172_ claimed_TOD20 = true;\n1098-expression_statement-173-173", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1103 [label="174_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n1103-expression_statement-175-178", method="", type_label=expression_statement];
1106 [label="175_ require(msg.sender == owner);\n1106-expression_statement-176-176", method="", type_label=expression_statement];
1115 [label="176_ _;\n1115-expression_statement-177-177", method="", type_label=expression_statement];
1117 [label="178_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n1117-function_definition-179-181", method="transferOwnership(address _newOwner)", type_label=function_definition];
1124 [label="178_ onlyOwner\n1124-expression_statement-179-179", method="transferOwnership(address _newOwner)", type_label=expression_statement];
1127 [label="179_ newOwner = _newOwner;\n1127-expression_statement-180-180", method="transferOwnership(address _newOwner)", type_label=expression_statement];
1131 [label="181_ bool claimed_TOD32 = false;\n1131-new_variable-182-182", method="", type_label=new_variable];
1137 [label="182_ address payable owner_TOD32;\n1137-new_variable-183-183", method="", type_label=new_variable];
1141 [label="183_ uint256 reward_TOD32;\n1141-new_variable-184-184", method="", type_label=new_variable];
1145 [label="184_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n1145-function_definition-185-190", method="setReward_TOD32()", type_label=function_definition];
1150 [label="185_ require (!claimed_TOD32);\n1150-expression_statement-186-186", method="setReward_TOD32()", type_label=expression_statement];
1156 [label="186_ require(msg.sender == owner_TOD32);\n1156-expression_statement-187-187", method="setReward_TOD32()", type_label=expression_statement];
1165 [label="187_ owner_TOD32.transfer(reward_TOD32);\n1165-expression_statement-188-188", method="setReward_TOD32()", type_label=expression_statement];
1172 [label="188_ reward_TOD32 = msg.value;\n1172-expression_statement-189-189", method="setReward_TOD32()", type_label=expression_statement];
1178 [label="190_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n1178-function_definition-191-196", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
1186 [label="191_ require (!claimed_TOD32);\n1186-expression_statement-192-192", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1192 [label="192_ require(submission < 10);\n1192-expression_statement-193-193", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1199 [label="193_ msg.sender.transfer(reward_TOD32);\n1199-expression_statement-194-194", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1208 [label="194_ claimed_TOD32 = true;\n1208-expression_statement-195-195", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1213 [label="196_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);	 \n        owner = newOwner;\n        newOwner = address(0);\n    }\n1213-function_definition-197-202", method="acceptOwnership()", type_label=function_definition];
1217 [label="197_ require(msg.sender == newOwner);\n1217-expression_statement-198-198", method="acceptOwnership()", type_label=expression_statement];
1232 [label="199_ owner = newOwner;\n1232-expression_statement-200-200", method="acceptOwnership()", type_label=expression_statement];
1236 [label="200_ newOwner = address(0);\n1236-expression_statement-201-201", method="acceptOwnership()", type_label=expression_statement];
1242 [label="202_ bool claimed_TOD38 = false;\n1242-new_variable-203-203", method="", type_label=new_variable];
1248 [label="203_ address payable owner_TOD38;\n1248-new_variable-204-204", method="", type_label=new_variable];
1252 [label="204_ uint256 reward_TOD38;\n1252-new_variable-205-205", method="", type_label=new_variable];
1256 [label="205_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n1256-function_definition-206-211", method="setReward_TOD38()", type_label=function_definition];
1261 [label="206_ require (!claimed_TOD38);\n1261-expression_statement-207-207", method="setReward_TOD38()", type_label=expression_statement];
1267 [label="207_ require(msg.sender == owner_TOD38);\n1267-expression_statement-208-208", method="setReward_TOD38()", type_label=expression_statement];
1276 [label="208_ owner_TOD38.transfer(reward_TOD38);\n1276-expression_statement-209-209", method="setReward_TOD38()", type_label=expression_statement];
1283 [label="209_ reward_TOD38 = msg.value;\n1283-expression_statement-210-210", method="setReward_TOD38()", type_label=expression_statement];
1289 [label="211_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n1289-function_definition-212-217", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
1297 [label="212_ require (!claimed_TOD38);\n1297-expression_statement-213-213", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1303 [label="213_ require(submission < 10);\n1303-expression_statement-214-214", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1310 [label="214_ msg.sender.transfer(reward_TOD38);\n1310-expression_statement-215-215", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1319 [label="215_ claimed_TOD38 = true;\n1319-expression_statement-216-216", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1338 [label="220_ bool claimed_TOD10 = false;\n1338-new_variable-221-221", method="", type_label=new_variable];
1344 [label="221_ address payable owner_TOD10;\n1344-new_variable-222-222", method="", type_label=new_variable];
1348 [label="222_ uint256 reward_TOD10;\n1348-new_variable-223-223", method="", type_label=new_variable];
1352 [label="223_ function setReward_TOD10() public payable {\n        require (!claimed_TOD10);\n        require(msg.sender == owner_TOD10);\n        owner_TOD10.transfer(reward_TOD10);\n        reward_TOD10 = msg.value;\n    }\n1352-function_definition-224-229", method="setReward_TOD10()", type_label=function_definition];
1357 [label="224_ require (!claimed_TOD10);\n1357-expression_statement-225-225", method="setReward_TOD10()", type_label=expression_statement];
1363 [label="225_ require(msg.sender == owner_TOD10);\n1363-expression_statement-226-226", method="setReward_TOD10()", type_label=expression_statement];
1372 [label="226_ owner_TOD10.transfer(reward_TOD10);\n1372-expression_statement-227-227", method="setReward_TOD10()", type_label=expression_statement];
1379 [label="227_ reward_TOD10 = msg.value;\n1379-expression_statement-228-228", method="setReward_TOD10()", type_label=expression_statement];
1385 [label="229_ function claimReward_TOD10(uint256 submission) public {\n        require (!claimed_TOD10);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD10);\n        claimed_TOD10 = true;\n    }\n1385-function_definition-230-235", method="claimReward_TOD10(uint256 submission)", type_label=function_definition];
1393 [label="230_ require (!claimed_TOD10);\n1393-expression_statement-231-231", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
1399 [label="231_ require(submission < 10);\n1399-expression_statement-232-232", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
1406 [label="232_ msg.sender.transfer(reward_TOD10);\n1406-expression_statement-233-233", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
1415 [label="233_ claimed_TOD10 = true;\n1415-expression_statement-234-234", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
1420 [label="235_ string public symbol;\n1420-new_variable-236-236", method="", type_label=new_variable];
1425 [label="236_ bool claimed_TOD22 = false;\n1425-new_variable-237-237", method="", type_label=new_variable];
1431 [label="237_ address payable owner_TOD22;\n1431-new_variable-238-238", method="", type_label=new_variable];
1435 [label="238_ uint256 reward_TOD22;\n1435-new_variable-239-239", method="", type_label=new_variable];
1439 [label="239_ function setReward_TOD22() public payable {\n        require (!claimed_TOD22);\n        require(msg.sender == owner_TOD22);\n        owner_TOD22.transfer(reward_TOD22);\n        reward_TOD22 = msg.value;\n    }\n1439-function_definition-240-245", method="setReward_TOD22()", type_label=function_definition];
1444 [label="240_ require (!claimed_TOD22);\n1444-expression_statement-241-241", method="setReward_TOD22()", type_label=expression_statement];
1450 [label="241_ require(msg.sender == owner_TOD22);\n1450-expression_statement-242-242", method="setReward_TOD22()", type_label=expression_statement];
1459 [label="242_ owner_TOD22.transfer(reward_TOD22);\n1459-expression_statement-243-243", method="setReward_TOD22()", type_label=expression_statement];
1466 [label="243_ reward_TOD22 = msg.value;\n1466-expression_statement-244-244", method="setReward_TOD22()", type_label=expression_statement];
1472 [label="245_ function claimReward_TOD22(uint256 submission) public {\n        require (!claimed_TOD22);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD22);\n        claimed_TOD22 = true;\n    }\n1472-function_definition-246-251", method="claimReward_TOD22(uint256 submission)", type_label=function_definition];
1480 [label="246_ require (!claimed_TOD22);\n1480-expression_statement-247-247", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1486 [label="247_ require(submission < 10);\n1486-expression_statement-248-248", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1493 [label="248_ msg.sender.transfer(reward_TOD22);\n1493-expression_statement-249-249", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1502 [label="249_ claimed_TOD22 = true;\n1502-expression_statement-250-250", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1507 [label="251_ string public  name;\n1507-new_variable-252-252", method="", type_label=new_variable];
1512 [label="252_ bool claimed_TOD12 = false;\n1512-new_variable-253-253", method="", type_label=new_variable];
1518 [label="253_ address payable owner_TOD12;\n1518-new_variable-254-254", method="", type_label=new_variable];
1522 [label="254_ uint256 reward_TOD12;\n1522-new_variable-255-255", method="", type_label=new_variable];
1526 [label="255_ function setReward_TOD12() public payable {\n        require (!claimed_TOD12);\n        require(msg.sender == owner_TOD12);\n        owner_TOD12.transfer(reward_TOD12);\n        reward_TOD12 = msg.value;\n    }\n1526-function_definition-256-261", method="setReward_TOD12()", type_label=function_definition];
1531 [label="256_ require (!claimed_TOD12);\n1531-expression_statement-257-257", method="setReward_TOD12()", type_label=expression_statement];
1537 [label="257_ require(msg.sender == owner_TOD12);\n1537-expression_statement-258-258", method="setReward_TOD12()", type_label=expression_statement];
1546 [label="258_ owner_TOD12.transfer(reward_TOD12);\n1546-expression_statement-259-259", method="setReward_TOD12()", type_label=expression_statement];
1553 [label="259_ reward_TOD12 = msg.value;\n1553-expression_statement-260-260", method="setReward_TOD12()", type_label=expression_statement];
1559 [label="261_ function claimReward_TOD12(uint256 submission) public {\n        require (!claimed_TOD12);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD12);\n        claimed_TOD12 = true;\n    }\n1559-function_definition-262-267", method="claimReward_TOD12(uint256 submission)", type_label=function_definition];
1567 [label="262_ require (!claimed_TOD12);\n1567-expression_statement-263-263", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1573 [label="263_ require(submission < 10);\n1573-expression_statement-264-264", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1580 [label="264_ msg.sender.transfer(reward_TOD12);\n1580-expression_statement-265-265", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1589 [label="265_ claimed_TOD12 = true;\n1589-expression_statement-266-266", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1594 [label="267_ uint8 public decimals;\n1594-new_variable-268-268", method="", type_label=new_variable];
1599 [label="268_ address payable winner_TOD11;\n1599-new_variable-269-269", method="", type_label=new_variable];
1603 [label="269_ function play_TOD11(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD11 = msg.sender;\n        }\n    }\n1603-function_definition-270-274", method="play_TOD11(bytes32 guess)", type_label=function_definition];
1611 [label="270_ if\n1611-if-271-273", method="play_TOD11(bytes32 guess)", type_label=if];
4681 [label="270_ end_if", method="play_TOD11(bytes32 guess)", type_label=end_if];
1633 [label="271_ winner_TOD11 = msg.sender;\n1633-expression_statement-272-272", method="play_TOD11(bytes32 guess)", type_label=expression_statement];
1639 [label="274_ function getReward_TOD11() payable public{\n       winner_TOD11.transfer(msg.value);\n    }\n1639-function_definition-275-277", method="getReward_TOD11()", type_label=function_definition];
1644 [label="275_ winner_TOD11.transfer(msg.value);\n1644-expression_statement-276-276", method="getReward_TOD11()", type_label=expression_statement];
1653 [label="277_ uint _totalSupply;\n1653-new_variable-278-278", method="", type_label=new_variable];
1657 [label="278_ address payable winner_TOD1;\n1657-new_variable-279-279", method="", type_label=new_variable];
1661 [label="279_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n1661-function_definition-280-284", method="play_TOD1(bytes32 guess)", type_label=function_definition];
1669 [label="280_ if\n1669-if-281-283", method="play_TOD1(bytes32 guess)", type_label=if];
4739 [label="280_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
1691 [label="281_ winner_TOD1 = msg.sender;\n1691-expression_statement-282-282", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
1697 [label="284_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n1697-function_definition-285-287", method="getReward_TOD1()", type_label=function_definition];
1702 [label="285_ winner_TOD1.transfer(msg.value);\n1702-expression_statement-286-286", method="getReward_TOD1()", type_label=expression_statement];
1711 [label="287_ mapping(address => uint) balances;\n1711-new_variable-288-288", method="", type_label=new_variable];
1717 [label="288_ bool claimed_TOD2 = false;\n1717-new_variable-289-289", method="", type_label=new_variable];
1723 [label="289_ address payable owner_TOD2;\n1723-new_variable-290-290", method="", type_label=new_variable];
1727 [label="290_ uint256 reward_TOD2;\n1727-new_variable-291-291", method="", type_label=new_variable];
1731 [label="291_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n1731-function_definition-292-297", method="setReward_TOD2()", type_label=function_definition];
1736 [label="292_ require (!claimed_TOD2);\n1736-expression_statement-293-293", method="setReward_TOD2()", type_label=expression_statement];
1742 [label="293_ require(msg.sender == owner_TOD2);\n1742-expression_statement-294-294", method="setReward_TOD2()", type_label=expression_statement];
1751 [label="294_ owner_TOD2.transfer(reward_TOD2);\n1751-expression_statement-295-295", method="setReward_TOD2()", type_label=expression_statement];
1758 [label="295_ reward_TOD2 = msg.value;\n1758-expression_statement-296-296", method="setReward_TOD2()", type_label=expression_statement];
1764 [label="297_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n1764-function_definition-298-303", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
1772 [label="298_ require (!claimed_TOD2);\n1772-expression_statement-299-299", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1778 [label="299_ require(submission < 10);\n1778-expression_statement-300-300", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1785 [label="300_ msg.sender.transfer(reward_TOD2);\n1785-expression_statement-301-301", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1794 [label="301_ claimed_TOD2 = true;\n1794-expression_statement-302-302", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1799 [label="303_ mapping(address => mapping(address => uint)) allowed;\n1799-new_variable-304-304", method="", type_label=new_variable];
1809 [label="305_ symbol = \"XQC\";\n1809-expression_statement-306-306", method="", type_label=expression_statement];
1814 [label="306_ name = \"Quras Token\";\n1814-expression_statement-307-307", method="", type_label=expression_statement];
1819 [label="307_ decimals = 8;\n1819-expression_statement-308-308", method="", type_label=expression_statement];
1823 [label="308_ _totalSupply = 88888888800000000;\n1823-expression_statement-309-309", method="", type_label=expression_statement];
1827 [label="309_ balances[owner] = _totalSupply;\n1827-expression_statement-310-310", method="", type_label=expression_statement];
1843 [label="312_ bool claimed_TOD4 = false;\n1843-new_variable-313-313", method="", type_label=new_variable];
1849 [label="313_ address payable owner_TOD4;\n1849-new_variable-314-314", method="", type_label=new_variable];
1853 [label="314_ uint256 reward_TOD4;\n1853-new_variable-315-315", method="", type_label=new_variable];
1857 [label="315_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n1857-function_definition-316-321", method="setReward_TOD4()", type_label=function_definition];
1862 [label="316_ require (!claimed_TOD4);\n1862-expression_statement-317-317", method="setReward_TOD4()", type_label=expression_statement];
1868 [label="317_ require(msg.sender == owner_TOD4);\n1868-expression_statement-318-318", method="setReward_TOD4()", type_label=expression_statement];
1877 [label="318_ owner_TOD4.transfer(reward_TOD4);\n1877-expression_statement-319-319", method="setReward_TOD4()", type_label=expression_statement];
1884 [label="319_ reward_TOD4 = msg.value;\n1884-expression_statement-320-320", method="setReward_TOD4()", type_label=expression_statement];
1890 [label="321_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n1890-function_definition-322-327", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
1898 [label="322_ require (!claimed_TOD4);\n1898-expression_statement-323-323", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1904 [label="323_ require(submission < 10);\n1904-expression_statement-324-324", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1911 [label="324_ msg.sender.transfer(reward_TOD4);\n1911-expression_statement-325-325", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1920 [label="325_ claimed_TOD4 = true;\n1920-expression_statement-326-326", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1925 [label="327_ function totalSupply() public view returns (uint) {		 \n        return _totalSupply.sub(balances[address(0)]);\n    }\n1925-function_definition-328-330", method="totalSupply()", type_label=function_definition];
1934 [label="328_ return _totalSupply.sub(balances[address(0)]);\n1934-return-329-329", method="totalSupply()", type_label=return];
1945 [label="330_ address payable winner_TOD7;\n1945-new_variable-331-331", method="", type_label=new_variable];
1949 [label="331_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n1949-function_definition-332-336", method="play_TOD7(bytes32 guess)", type_label=function_definition];
1957 [label="332_ if\n1957-if-333-335", method="play_TOD7(bytes32 guess)", type_label=if];
5027 [label="332_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
1979 [label="333_ winner_TOD7 = msg.sender;\n1979-expression_statement-334-334", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
1985 [label="336_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n1985-function_definition-337-339", method="getReward_TOD7()", type_label=function_definition];
1990 [label="337_ winner_TOD7.transfer(msg.value);\n1990-expression_statement-338-338", method="getReward_TOD7()", type_label=expression_statement];
1999 [label="339_ function balanceOf(address tokenOwner) public view returns (uint balance) {		 \n        return balances[tokenOwner];\n    }\n1999-function_definition-340-342", method="balanceOf(address tokenOwner)", type_label=function_definition];
2013 [label="340_ return balances[tokenOwner];\n2013-return-341-341", method="balanceOf(address tokenOwner)", type_label=return];
2017 [label="342_ address payable winner_TOD23;\n2017-new_variable-343-343", method="", type_label=new_variable];
2021 [label="343_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n2021-function_definition-344-348", method="play_TOD23(bytes32 guess)", type_label=function_definition];
2029 [label="344_ if\n2029-if-345-347", method="play_TOD23(bytes32 guess)", type_label=if];
5099 [label="344_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
2051 [label="345_ winner_TOD23 = msg.sender;\n2051-expression_statement-346-346", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
2057 [label="348_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n2057-function_definition-349-351", method="getReward_TOD23()", type_label=function_definition];
2062 [label="349_ winner_TOD23.transfer(msg.value);\n2062-expression_statement-350-350", method="getReward_TOD23()", type_label=expression_statement];
2071 [label="351_ function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);		 \n        return true;\n    }\n2071-function_definition-352-357", method="transfer(address to,uint tokens)", type_label=function_definition];
2088 [label="352_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n2088-expression_statement-353-353", method="transfer(address to,uint tokens)", type_label=expression_statement];
2105 [label="353_ balances[to] = balances[to].add(tokens);\n2105-expression_statement-354-354", method="transfer(address to,uint tokens)", type_label=expression_statement];
2128 [label="355_ return true;\n2128-return-356-356", method="transfer(address to,uint tokens)", type_label=return];
2131 [label="357_ bool claimed_TOD14 = false;\n2131-new_variable-358-358", method="", type_label=new_variable];
2137 [label="358_ address payable owner_TOD14;\n2137-new_variable-359-359", method="", type_label=new_variable];
2141 [label="359_ uint256 reward_TOD14;\n2141-new_variable-360-360", method="", type_label=new_variable];
2145 [label="360_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n2145-function_definition-361-366", method="setReward_TOD14()", type_label=function_definition];
2150 [label="361_ require (!claimed_TOD14);\n2150-expression_statement-362-362", method="setReward_TOD14()", type_label=expression_statement];
2156 [label="362_ require(msg.sender == owner_TOD14);\n2156-expression_statement-363-363", method="setReward_TOD14()", type_label=expression_statement];
2165 [label="363_ owner_TOD14.transfer(reward_TOD14);\n2165-expression_statement-364-364", method="setReward_TOD14()", type_label=expression_statement];
2172 [label="364_ reward_TOD14 = msg.value;\n2172-expression_statement-365-365", method="setReward_TOD14()", type_label=expression_statement];
2178 [label="366_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n2178-function_definition-367-372", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
2186 [label="367_ require (!claimed_TOD14);\n2186-expression_statement-368-368", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2192 [label="368_ require(submission < 10);\n2192-expression_statement-369-369", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2199 [label="369_ msg.sender.transfer(reward_TOD14);\n2199-expression_statement-370-370", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2208 [label="370_ claimed_TOD14 = true;\n2208-expression_statement-371-371", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2213 [label="372_ function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n2213-function_definition-373-377", method="increaseApproval(address _spender,uint _addedValue)", type_label=function_definition];
2229 [label="373_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n2229-expression_statement-374-374", method="increaseApproval(address _spender,uint _addedValue)", type_label=expression_statement];
2266 [label="375_ return true;\n2266-return-376-376", method="increaseApproval(address _spender,uint _addedValue)", type_label=return];
2269 [label="377_ bool claimed_TOD30 = false;\n2269-new_variable-378-378", method="", type_label=new_variable];
2275 [label="378_ address payable owner_TOD30;\n2275-new_variable-379-379", method="", type_label=new_variable];
2279 [label="379_ uint256 reward_TOD30;\n2279-new_variable-380-380", method="", type_label=new_variable];
2283 [label="380_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n2283-function_definition-381-386", method="setReward_TOD30()", type_label=function_definition];
2288 [label="381_ require (!claimed_TOD30);\n2288-expression_statement-382-382", method="setReward_TOD30()", type_label=expression_statement];
2294 [label="382_ require(msg.sender == owner_TOD30);\n2294-expression_statement-383-383", method="setReward_TOD30()", type_label=expression_statement];
2303 [label="383_ owner_TOD30.transfer(reward_TOD30);\n2303-expression_statement-384-384", method="setReward_TOD30()", type_label=expression_statement];
2310 [label="384_ reward_TOD30 = msg.value;\n2310-expression_statement-385-385", method="setReward_TOD30()", type_label=expression_statement];
2316 [label="386_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n2316-function_definition-387-392", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
2324 [label="387_ require (!claimed_TOD30);\n2324-expression_statement-388-388", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2330 [label="388_ require(submission < 10);\n2330-expression_statement-389-389", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2337 [label="389_ msg.sender.transfer(reward_TOD30);\n2337-expression_statement-390-390", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2346 [label="390_ claimed_TOD30 = true;\n2346-expression_statement-391-391", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2351 [label="392_ function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n2351-function_definition-393-402", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=function_definition];
2367 [label="393_ uint oldValue = allowed[msg.sender][_spender];\n2367-new_variable-394-394", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=new_variable];
2379 [label="394_ if__subtractedValue > oldValue\n2379-if-395-399", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=if];
5449 [label="394_ end_if", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=end_if];
2384 [label="395_ allowed[msg.sender][_spender] = 0;\n2384-expression_statement-396-396", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
2395 [label="397_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n2395-expression_statement-398-398", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
2426 [label="400_ return true;\n2426-return-401-401", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=return];
2429 [label="402_ bool claimed_TOD8 = false;\n2429-new_variable-403-403", method="", type_label=new_variable];
2435 [label="403_ address payable owner_TOD8;\n2435-new_variable-404-404", method="", type_label=new_variable];
2439 [label="404_ uint256 reward_TOD8;\n2439-new_variable-405-405", method="", type_label=new_variable];
2443 [label="405_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n2443-function_definition-406-411", method="setReward_TOD8()", type_label=function_definition];
2448 [label="406_ require (!claimed_TOD8);\n2448-expression_statement-407-407", method="setReward_TOD8()", type_label=expression_statement];
2454 [label="407_ require(msg.sender == owner_TOD8);\n2454-expression_statement-408-408", method="setReward_TOD8()", type_label=expression_statement];
2463 [label="408_ owner_TOD8.transfer(reward_TOD8);\n2463-expression_statement-409-409", method="setReward_TOD8()", type_label=expression_statement];
2470 [label="409_ reward_TOD8 = msg.value;\n2470-expression_statement-410-410", method="setReward_TOD8()", type_label=expression_statement];
2476 [label="411_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n2476-function_definition-412-417", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
2484 [label="412_ require (!claimed_TOD8);\n2484-expression_statement-413-413", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2490 [label="413_ require(submission < 10);\n2490-expression_statement-414-414", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2497 [label="414_ msg.sender.transfer(reward_TOD8);\n2497-expression_statement-415-415", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2506 [label="415_ claimed_TOD8 = true;\n2506-expression_statement-416-416", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2511 [label="417_ function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);		 \n        return true;\n    }\n2511-function_definition-418-422", method="approve(address spender,uint tokens)", type_label=function_definition];
2528 [label="418_ allowed[msg.sender][spender] = tokens;\n2528-expression_statement-419-419", method="approve(address spender,uint tokens)", type_label=expression_statement];
2548 [label="420_ return true;\n2548-return-421-421", method="approve(address spender,uint tokens)", type_label=return];
2551 [label="422_ address payable winner_TOD39;\n2551-new_variable-423-423", method="", type_label=new_variable];
2555 [label="423_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n2555-function_definition-424-428", method="play_TOD39(bytes32 guess)", type_label=function_definition];
2563 [label="424_ if\n2563-if-425-427", method="play_TOD39(bytes32 guess)", type_label=if];
5633 [label="424_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
2585 [label="425_ winner_TOD39 = msg.sender;\n2585-expression_statement-426-426", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
2591 [label="428_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n2591-function_definition-429-431", method="getReward_TOD39()", type_label=function_definition];
2596 [label="429_ winner_TOD39.transfer(msg.value);\n2596-expression_statement-430-430", method="getReward_TOD39()", type_label=expression_statement];
2605 [label="431_ function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);		 \n        return true;\n    }\n2605-function_definition-432-438", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
2626 [label="432_ balances[from] = balances[from].sub(tokens);\n2626-expression_statement-433-433", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2639 [label="433_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n2639-expression_statement-434-434", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2660 [label="434_ balances[to] = balances[to].add(tokens);\n2660-expression_statement-435-435", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2681 [label="436_ return true;\n2681-return-437-437", method="transferFrom(address from,address to,uint tokens)", type_label=return];
2684 [label="438_ bool claimed_TOD36 = false;\n2684-new_variable-439-439", method="", type_label=new_variable];
2690 [label="439_ address payable owner_TOD36;\n2690-new_variable-440-440", method="", type_label=new_variable];
2694 [label="440_ uint256 reward_TOD36;\n2694-new_variable-441-441", method="", type_label=new_variable];
2698 [label="441_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n2698-function_definition-442-447", method="setReward_TOD36()", type_label=function_definition];
2703 [label="442_ require (!claimed_TOD36);\n2703-expression_statement-443-443", method="setReward_TOD36()", type_label=expression_statement];
2709 [label="443_ require(msg.sender == owner_TOD36);\n2709-expression_statement-444-444", method="setReward_TOD36()", type_label=expression_statement];
2718 [label="444_ owner_TOD36.transfer(reward_TOD36);\n2718-expression_statement-445-445", method="setReward_TOD36()", type_label=expression_statement];
2725 [label="445_ reward_TOD36 = msg.value;\n2725-expression_statement-446-446", method="setReward_TOD36()", type_label=expression_statement];
2731 [label="447_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n2731-function_definition-448-453", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
2739 [label="448_ require (!claimed_TOD36);\n2739-expression_statement-449-449", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2745 [label="449_ require(submission < 10);\n2745-expression_statement-450-450", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2752 [label="450_ msg.sender.transfer(reward_TOD36);\n2752-expression_statement-451-451", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2761 [label="451_ claimed_TOD36 = true;\n2761-expression_statement-452-452", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2766 [label="453_ function allowance(address tokenOwner, address spender) public view returns (uint remaining) {		 \n        return allowed[tokenOwner][spender];\n    }\n2766-function_definition-454-456", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
2784 [label="454_ return allowed[tokenOwner][spender];\n2784-return-455-455", method="allowance(address tokenOwner,address spender)", type_label=return];
2790 [label="456_ address payable winner_TOD35;\n2790-new_variable-457-457", method="", type_label=new_variable];
2794 [label="457_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n2794-function_definition-458-462", method="play_TOD35(bytes32 guess)", type_label=function_definition];
2802 [label="458_ if\n2802-if-459-461", method="play_TOD35(bytes32 guess)", type_label=if];
5872 [label="458_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
2824 [label="459_ winner_TOD35 = msg.sender;\n2824-expression_statement-460-460", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
2830 [label="462_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n2830-function_definition-463-465", method="getReward_TOD35()", type_label=function_definition];
2835 [label="463_ winner_TOD35.transfer(msg.value);\n2835-expression_statement-464-464", method="getReward_TOD35()", type_label=expression_statement];
2844 [label="465_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);		 \n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n2844-function_definition-466-471", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
2865 [label="466_ allowed[msg.sender][spender] = tokens;\n2865-expression_statement-467-467", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
2885 [label="468_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n2885-expression_statement-469-469", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
2905 [label="469_ return true;\n2905-return-470-470", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
2908 [label="471_ bool claimed_TOD40 = false;\n2908-new_variable-472-472", method="", type_label=new_variable];
2914 [label="472_ address payable owner_TOD40;\n2914-new_variable-473-473", method="", type_label=new_variable];
2918 [label="473_ uint256 reward_TOD40;\n2918-new_variable-474-474", method="", type_label=new_variable];
2922 [label="474_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n2922-function_definition-475-480", method="setReward_TOD40()", type_label=function_definition];
2927 [label="475_ require (!claimed_TOD40);\n2927-expression_statement-476-476", method="setReward_TOD40()", type_label=expression_statement];
2933 [label="476_ require(msg.sender == owner_TOD40);\n2933-expression_statement-477-477", method="setReward_TOD40()", type_label=expression_statement];
2942 [label="477_ owner_TOD40.transfer(reward_TOD40);\n2942-expression_statement-478-478", method="setReward_TOD40()", type_label=expression_statement];
2949 [label="478_ reward_TOD40 = msg.value;\n2949-expression_statement-479-479", method="setReward_TOD40()", type_label=expression_statement];
2955 [label="480_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n2955-function_definition-481-486", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
2963 [label="481_ require (!claimed_TOD40);\n2963-expression_statement-482-482", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2969 [label="482_ require(submission < 10);\n2969-expression_statement-483-483", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2976 [label="483_ msg.sender.transfer(reward_TOD40);\n2976-expression_statement-484-484", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2985 [label="484_ claimed_TOD40 = true;\n2985-expression_statement-485-485", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2990 [label="486_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n2990-function_definition-487-489", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
3001 [label="486_ onlyOwner\n3001-expression_statement-487-487", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
3009 [label="487_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n3009-return-488-488", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
3021 [label="489_ address payable winner_TOD33;\n3021-new_variable-490-490", method="", type_label=new_variable];
3025 [label="490_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n3025-function_definition-491-495", method="play_TOD33(bytes32 guess)", type_label=function_definition];
3033 [label="491_ if\n3033-if-492-494", method="play_TOD33(bytes32 guess)", type_label=if];
6103 [label="491_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
3055 [label="492_ winner_TOD33 = msg.sender;\n3055-expression_statement-493-493", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
3061 [label="495_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n3061-function_definition-496-498", method="getReward_TOD33()", type_label=function_definition];
3066 [label="496_ winner_TOD33.transfer(msg.value);\n3066-expression_statement-497-497", method="getReward_TOD33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
2410;
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 188  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
166 -> 3236  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3236 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 3236  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
194 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 255  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
233 -> 3303  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3303 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 3303  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
261 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 326  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
304 -> 3374  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3374 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 3374  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
332 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 396  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
374 -> 3444  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3444 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 3444  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
402 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 466  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
444 -> 3514  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3514 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 3514  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
472 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 540  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
518 -> 3588  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3588 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 3588  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
546 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 594  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
572 -> 3642  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3642 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 3642  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
600 -> 605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 662  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
640 -> 3710  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3710 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 3710  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
668 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
779 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
817 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
864 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
894 -> 902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
902 -> 924  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
902 -> 3972  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3972 -> 930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
924 -> 3972  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
930 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
953 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 983  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
961 -> 4031  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4031 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 4031  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
989 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 1031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 1040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1040 -> 1046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1046 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1082 -> 1089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1089 -> 1098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1131 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 1141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1145 -> 1150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1150 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1178 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 1208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1213 -> 1217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1242 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1248 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1261 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 1283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1289 -> 1297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 1303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1303 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1338 -> 1344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1344 -> 1348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1352 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1357 -> 1363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1363 -> 1372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1372 -> 1379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1385 -> 1393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1393 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1406 -> 1415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1420 -> 1425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1425 -> 1431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1431 -> 1435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1439 -> 1444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1444 -> 1450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 1459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 1466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1472 -> 1480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1480 -> 1486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1493 -> 1502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 1512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1512 -> 1518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1518 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1526 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1537 -> 1546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1546 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1559 -> 1567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1567 -> 1573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1573 -> 1580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1580 -> 1589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 1599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1603 -> 1611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1611 -> 1633  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1611 -> 4681  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4681 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1633 -> 4681  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1639 -> 1644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1661 -> 1669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1669 -> 1691  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1669 -> 4739  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4739 -> 1697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1691 -> 4739  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1697 -> 1702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1711 -> 1717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1717 -> 1723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1723 -> 1727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1731 -> 1736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1736 -> 1742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1742 -> 1751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1751 -> 1758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1764 -> 1772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1772 -> 1778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1778 -> 1785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1785 -> 1794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1809 -> 1814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1814 -> 1819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1819 -> 1823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1823 -> 1827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1843 -> 1849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1849 -> 1853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1857 -> 1862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1862 -> 1868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1868 -> 1877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1877 -> 1884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1890 -> 1898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1898 -> 1904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1904 -> 1911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1911 -> 1920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1925 -> 1934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1934 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1949 -> 1957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1957 -> 1979  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1957 -> 5027  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5027 -> 1985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1979 -> 5027  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1985 -> 1990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1999 -> 2013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2013 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2021 -> 2029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2029 -> 2051  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2029 -> 5099  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5099 -> 2057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2051 -> 5099  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2057 -> 2062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2071 -> 2088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2088 -> 2105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2128 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2131 -> 2137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2137 -> 2141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2145 -> 2150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2150 -> 2156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2156 -> 2165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2165 -> 2172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2178 -> 2186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2186 -> 2192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2192 -> 2199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2199 -> 2208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2213 -> 2229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2266 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2269 -> 2275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2275 -> 2279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2283 -> 2288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2288 -> 2294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2294 -> 2303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2303 -> 2310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2316 -> 2324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2324 -> 2330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2330 -> 2337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2337 -> 2346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2351 -> 2367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2367 -> 2379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2379 -> 2384  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2379 -> 2395  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5449 -> 2410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2384 -> 5449  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2395 -> 5449  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2426 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2429 -> 2435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2435 -> 2439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2443 -> 2448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2448 -> 2454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2454 -> 2463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2463 -> 2470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2476 -> 2484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2484 -> 2490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2490 -> 2497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2497 -> 2506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2511 -> 2528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2548 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2555 -> 2563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2563 -> 2585  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2563 -> 5633  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5633 -> 2591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2585 -> 5633  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2591 -> 2596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2605 -> 2626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2626 -> 2639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2639 -> 2660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2681 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2684 -> 2690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2690 -> 2694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2698 -> 2703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2703 -> 2709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2709 -> 2718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2718 -> 2725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2731 -> 2739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2739 -> 2745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2745 -> 2752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2752 -> 2761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2766 -> 2784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2784 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2794 -> 2802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2802 -> 2824  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2802 -> 5872  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5872 -> 2830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2824 -> 5872  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2830 -> 2835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2844 -> 2865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2885 -> 2905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2905 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2908 -> 2914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2914 -> 2918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2922 -> 2927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2927 -> 2933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2933 -> 2942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2942 -> 2949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2955 -> 2963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2963 -> 2969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2969 -> 2976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2976 -> 2985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2990 -> 3009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3009 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3025 -> 3033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3033 -> 3055  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3033 -> 6103  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6103 -> 3061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3055 -> 6103  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3061 -> 3066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
