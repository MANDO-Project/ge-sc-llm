digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
3120 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ require(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0);\n    uint256 c = a / b;\n    return c;\n  }\n56-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ require(b > 0);\n73-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
80 [label="12_ uint256 c = a / b;\n80-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
88 [label="13_ return c;\n88-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
90 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n90-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
107 [label="16_ require(b <= a);\n107-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
114 [label="17_ uint256 c = a - b;\n114-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
122 [label="18_ return c;\n122-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
124 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a && c >= b);\n    return c;\n  }\n124-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
141 [label="21_ uint256 c = a + b;\n141-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
149 [label="22_ require(c >= a && c >= b);\n149-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="23_ return c;\n160-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
162 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n162-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
179 [label="26_ require(b != 0);\n179-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
186 [label="27_ return a % b;\n186-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
190 [label="29_ function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n190-function_definition-30-32", method="max256(uint256 a,uint256 b)", type_label=function_definition];
207 [label="30_ return a >= b ? a : b;\n207-return-31-31", method="max256(uint256 a,uint256 b)", type_label=return];
214 [label="32_ function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n214-function_definition-33-35", method="min256(uint256 a,uint256 b)", type_label=function_definition];
231 [label="33_ return a < b ? a : b;\n231-return-34-34", method="min256(uint256 a,uint256 b)", type_label=return];
241 [label="37_ bool claimed_TOD10 = false;\n241-new_variable-38-38", method="", type_label=new_variable];
247 [label="38_ address payable owner_TOD10;\n247-new_variable-39-39", method="", type_label=new_variable];
251 [label="39_ uint256 reward_TOD10;\n251-new_variable-40-40", method="", type_label=new_variable];
255 [label="40_ function setReward_TOD10() public payable {\n        require (!claimed_TOD10);\n        require(msg.sender == owner_TOD10);\n        owner_TOD10.transfer(reward_TOD10);\n        reward_TOD10 = msg.value;\n    }\n255-function_definition-41-46", method="setReward_TOD10()", type_label=function_definition];
260 [label="41_ require (!claimed_TOD10);\n260-expression_statement-42-42", method="setReward_TOD10()", type_label=expression_statement];
266 [label="42_ require(msg.sender == owner_TOD10);\n266-expression_statement-43-43", method="setReward_TOD10()", type_label=expression_statement];
275 [label="43_ owner_TOD10.transfer(reward_TOD10);\n275-expression_statement-44-44", method="setReward_TOD10()", type_label=expression_statement];
282 [label="44_ reward_TOD10 = msg.value;\n282-expression_statement-45-45", method="setReward_TOD10()", type_label=expression_statement];
288 [label="46_ function claimReward_TOD10(uint256 submission) public {\n        require (!claimed_TOD10);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD10);\n        claimed_TOD10 = true;\n    }\n288-function_definition-47-52", method="claimReward_TOD10(uint256 submission)", type_label=function_definition];
296 [label="47_ require (!claimed_TOD10);\n296-expression_statement-48-48", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
302 [label="48_ require(submission < 10);\n302-expression_statement-49-49", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
309 [label="49_ msg.sender.transfer(reward_TOD10);\n309-expression_statement-50-50", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
318 [label="50_ claimed_TOD10 = true;\n318-expression_statement-51-51", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
323 [label="52_ address public owner;\n323-new_variable-53-53", method="", type_label=new_variable];
330 [label="54_ owner = msg.sender;\n330-expression_statement-55-55", method="", type_label=expression_statement];
336 [label="56_ bool claimed_TOD20 = false;\n336-new_variable-57-57", method="", type_label=new_variable];
342 [label="57_ address payable owner_TOD20;\n342-new_variable-58-58", method="", type_label=new_variable];
346 [label="58_ uint256 reward_TOD20;\n346-new_variable-59-59", method="", type_label=new_variable];
350 [label="59_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n350-function_definition-60-65", method="setReward_TOD20()", type_label=function_definition];
355 [label="60_ require (!claimed_TOD20);\n355-expression_statement-61-61", method="setReward_TOD20()", type_label=expression_statement];
361 [label="61_ require(msg.sender == owner_TOD20);\n361-expression_statement-62-62", method="setReward_TOD20()", type_label=expression_statement];
370 [label="62_ owner_TOD20.transfer(reward_TOD20);\n370-expression_statement-63-63", method="setReward_TOD20()", type_label=expression_statement];
377 [label="63_ reward_TOD20 = msg.value;\n377-expression_statement-64-64", method="setReward_TOD20()", type_label=expression_statement];
383 [label="65_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n383-function_definition-66-71", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
391 [label="66_ require (!claimed_TOD20);\n391-expression_statement-67-67", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
397 [label="67_ require(submission < 10);\n397-expression_statement-68-68", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
404 [label="68_ msg.sender.transfer(reward_TOD20);\n404-expression_statement-69-69", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
413 [label="69_ claimed_TOD20 = true;\n413-expression_statement-70-70", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
418 [label="71_ modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n418-expression_statement-72-75", method="", type_label=expression_statement];
421 [label="72_ require(msg.sender == owner);\n421-expression_statement-73-73", method="", type_label=expression_statement];
430 [label="73_ _;\n430-expression_statement-74-74", method="", type_label=expression_statement];
432 [label="75_ function transferOwnership(address newOwner) onlyOwner public {\n    owner = newOwner;\n  }\n432-function_definition-76-78", method="transferOwnership(address newOwner)", type_label=function_definition];
438 [label="75_ onlyOwner\n438-expression_statement-76-76", method="transferOwnership(address newOwner)", type_label=expression_statement];
442 [label="76_ owner = newOwner;\n442-expression_statement-77-77", method="transferOwnership(address newOwner)", type_label=expression_statement];
446 [label="78_ bool claimed_TOD32 = false;\n446-new_variable-79-79", method="", type_label=new_variable];
452 [label="79_ address payable owner_TOD32;\n452-new_variable-80-80", method="", type_label=new_variable];
456 [label="80_ uint256 reward_TOD32;\n456-new_variable-81-81", method="", type_label=new_variable];
460 [label="81_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n460-function_definition-82-87", method="setReward_TOD32()", type_label=function_definition];
465 [label="82_ require (!claimed_TOD32);\n465-expression_statement-83-83", method="setReward_TOD32()", type_label=expression_statement];
471 [label="83_ require(msg.sender == owner_TOD32);\n471-expression_statement-84-84", method="setReward_TOD32()", type_label=expression_statement];
480 [label="84_ owner_TOD32.transfer(reward_TOD32);\n480-expression_statement-85-85", method="setReward_TOD32()", type_label=expression_statement];
487 [label="85_ reward_TOD32 = msg.value;\n487-expression_statement-86-86", method="setReward_TOD32()", type_label=expression_statement];
493 [label="87_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n493-function_definition-88-93", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
501 [label="88_ require (!claimed_TOD32);\n501-expression_statement-89-89", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
507 [label="89_ require(submission < 10);\n507-expression_statement-90-90", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
514 [label="90_ msg.sender.transfer(reward_TOD32);\n514-expression_statement-91-91", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
523 [label="91_ claimed_TOD32 = true;\n523-expression_statement-92-92", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
531 [label="95_ function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n531-function_definition-96-96", method="receiveApproval(address _from,uint256 _value,address _token,bytes calldata _extraData)", type_label=function_definition];
558 [label="99_ bool claimed_TOD22 = false;\n558-new_variable-100-100", method="", type_label=new_variable];
564 [label="100_ address payable owner_TOD22;\n564-new_variable-101-101", method="", type_label=new_variable];
568 [label="101_ uint256 reward_TOD22;\n568-new_variable-102-102", method="", type_label=new_variable];
572 [label="102_ function setReward_TOD22() public payable {\n        require (!claimed_TOD22);\n        require(msg.sender == owner_TOD22);\n        owner_TOD22.transfer(reward_TOD22);\n        reward_TOD22 = msg.value;\n    }\n572-function_definition-103-108", method="setReward_TOD22()", type_label=function_definition];
577 [label="103_ require (!claimed_TOD22);\n577-expression_statement-104-104", method="setReward_TOD22()", type_label=expression_statement];
583 [label="104_ require(msg.sender == owner_TOD22);\n583-expression_statement-105-105", method="setReward_TOD22()", type_label=expression_statement];
592 [label="105_ owner_TOD22.transfer(reward_TOD22);\n592-expression_statement-106-106", method="setReward_TOD22()", type_label=expression_statement];
599 [label="106_ reward_TOD22 = msg.value;\n599-expression_statement-107-107", method="setReward_TOD22()", type_label=expression_statement];
605 [label="108_ function claimReward_TOD22(uint256 submission) public {\n        require (!claimed_TOD22);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD22);\n        claimed_TOD22 = true;\n    }\n605-function_definition-109-114", method="claimReward_TOD22(uint256 submission)", type_label=function_definition];
613 [label="109_ require (!claimed_TOD22);\n613-expression_statement-110-110", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
619 [label="110_ require(submission < 10);\n619-expression_statement-111-111", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
626 [label="111_ msg.sender.transfer(reward_TOD22);\n626-expression_statement-112-112", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
635 [label="112_ claimed_TOD22 = true;\n635-expression_statement-113-113", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
640 [label="114_ string public name;\n640-new_variable-115-115", method="", type_label=new_variable];
645 [label="115_ bool claimed_TOD12 = false;\n645-new_variable-116-116", method="", type_label=new_variable];
651 [label="116_ address payable owner_TOD12;\n651-new_variable-117-117", method="", type_label=new_variable];
655 [label="117_ uint256 reward_TOD12;\n655-new_variable-118-118", method="", type_label=new_variable];
659 [label="118_ function setReward_TOD12() public payable {\n        require (!claimed_TOD12);\n        require(msg.sender == owner_TOD12);\n        owner_TOD12.transfer(reward_TOD12);\n        reward_TOD12 = msg.value;\n    }\n659-function_definition-119-124", method="setReward_TOD12()", type_label=function_definition];
664 [label="119_ require (!claimed_TOD12);\n664-expression_statement-120-120", method="setReward_TOD12()", type_label=expression_statement];
670 [label="120_ require(msg.sender == owner_TOD12);\n670-expression_statement-121-121", method="setReward_TOD12()", type_label=expression_statement];
679 [label="121_ owner_TOD12.transfer(reward_TOD12);\n679-expression_statement-122-122", method="setReward_TOD12()", type_label=expression_statement];
686 [label="122_ reward_TOD12 = msg.value;\n686-expression_statement-123-123", method="setReward_TOD12()", type_label=expression_statement];
692 [label="124_ function claimReward_TOD12(uint256 submission) public {\n        require (!claimed_TOD12);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD12);\n        claimed_TOD12 = true;\n    }\n692-function_definition-125-130", method="claimReward_TOD12(uint256 submission)", type_label=function_definition];
700 [label="125_ require (!claimed_TOD12);\n700-expression_statement-126-126", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
706 [label="126_ require(submission < 10);\n706-expression_statement-127-127", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
713 [label="127_ msg.sender.transfer(reward_TOD12);\n713-expression_statement-128-128", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
722 [label="128_ claimed_TOD12 = true;\n722-expression_statement-129-129", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
727 [label="130_ string public symbol;\n727-new_variable-131-131", method="", type_label=new_variable];
732 [label="131_ address payable winner_TOD11;\n732-new_variable-132-132", method="", type_label=new_variable];
736 [label="132_ function play_TOD11(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD11 = msg.sender;\n        }\n    }\n736-function_definition-133-137", method="play_TOD11(bytes32 guess)", type_label=function_definition];
744 [label="133_ if\n744-if-134-136", method="play_TOD11(bytes32 guess)", type_label=if];
3834 [label="133_ end_if", method="play_TOD11(bytes32 guess)", type_label=end_if];
766 [label="134_ winner_TOD11 = msg.sender;\n766-expression_statement-135-135", method="play_TOD11(bytes32 guess)", type_label=expression_statement];
772 [label="137_ function getReward_TOD11() payable public{\n       winner_TOD11.transfer(msg.value);\n    }\n772-function_definition-138-140", method="getReward_TOD11()", type_label=function_definition];
777 [label="138_ winner_TOD11.transfer(msg.value);\n777-expression_statement-139-139", method="getReward_TOD11()", type_label=expression_statement];
786 [label="140_ uint8 public decimals;\n786-new_variable-141-141", method="", type_label=new_variable];
791 [label="141_ address payable winner_TOD1;\n791-new_variable-142-142", method="", type_label=new_variable];
795 [label="142_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n795-function_definition-143-147", method="play_TOD1(bytes32 guess)", type_label=function_definition];
803 [label="143_ if\n803-if-144-146", method="play_TOD1(bytes32 guess)", type_label=if];
3893 [label="143_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
825 [label="144_ winner_TOD1 = msg.sender;\n825-expression_statement-145-145", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
831 [label="147_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n831-function_definition-148-150", method="getReward_TOD1()", type_label=function_definition];
836 [label="148_ winner_TOD1.transfer(msg.value);\n836-expression_statement-149-149", method="getReward_TOD1()", type_label=expression_statement];
845 [label="150_ uint256 public totalSupply;\n845-new_variable-151-151", method="", type_label=new_variable];
850 [label="151_ bool claimed_TOD2 = false;\n850-new_variable-152-152", method="", type_label=new_variable];
856 [label="152_ address payable owner_TOD2;\n856-new_variable-153-153", method="", type_label=new_variable];
860 [label="153_ uint256 reward_TOD2;\n860-new_variable-154-154", method="", type_label=new_variable];
864 [label="154_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n864-function_definition-155-160", method="setReward_TOD2()", type_label=function_definition];
869 [label="155_ require (!claimed_TOD2);\n869-expression_statement-156-156", method="setReward_TOD2()", type_label=expression_statement];
875 [label="156_ require(msg.sender == owner_TOD2);\n875-expression_statement-157-157", method="setReward_TOD2()", type_label=expression_statement];
884 [label="157_ owner_TOD2.transfer(reward_TOD2);\n884-expression_statement-158-158", method="setReward_TOD2()", type_label=expression_statement];
891 [label="158_ reward_TOD2 = msg.value;\n891-expression_statement-159-159", method="setReward_TOD2()", type_label=expression_statement];
897 [label="160_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n897-function_definition-161-166", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
905 [label="161_ require (!claimed_TOD2);\n905-expression_statement-162-162", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
911 [label="162_ require(submission < 10);\n911-expression_statement-163-163", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
918 [label="163_ msg.sender.transfer(reward_TOD2);\n918-expression_statement-164-164", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
927 [label="164_ claimed_TOD2 = true;\n927-expression_statement-165-165", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
932 [label="166_ mapping (address => uint256) public balanceOf;\n932-new_variable-167-167", method="", type_label=new_variable];
939 [label="167_ address payable winner_TOD17;\n939-new_variable-168-168", method="", type_label=new_variable];
943 [label="168_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n943-function_definition-169-173", method="play_TOD17(bytes32 guess)", type_label=function_definition];
951 [label="169_ if\n951-if-170-172", method="play_TOD17(bytes32 guess)", type_label=if];
4041 [label="169_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
973 [label="170_ winner_TOD17 = msg.sender;\n973-expression_statement-171-171", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
979 [label="173_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n979-function_definition-174-176", method="getReward_TOD17()", type_label=function_definition];
984 [label="174_ winner_TOD17.transfer(msg.value);\n984-expression_statement-175-175", method="getReward_TOD17()", type_label=expression_statement];
993 [label="176_ mapping (address => mapping (address => uint256)) public allowance;\n993-new_variable-177-177", method="", type_label=new_variable];
1002 [label="177_ address payable winner_TOD27;\n1002-new_variable-178-178", method="", type_label=new_variable];
1006 [label="178_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n1006-function_definition-179-183", method="play_TOD27(bytes32 guess)", type_label=function_definition];
1014 [label="179_ if\n1014-if-180-182", method="play_TOD27(bytes32 guess)", type_label=if];
4104 [label="179_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
1036 [label="180_ winner_TOD27 = msg.sender;\n1036-expression_statement-181-181", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
1042 [label="183_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n1042-function_definition-184-186", method="getReward_TOD27()", type_label=function_definition];
1047 [label="184_ winner_TOD27.transfer(msg.value);\n1047-expression_statement-185-185", method="getReward_TOD27()", type_label=expression_statement];
1070 [label="187_ address payable winner_TOD31;\n1070-new_variable-188-188", method="", type_label=new_variable];
1074 [label="188_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n1074-function_definition-189-193", method="play_TOD31(bytes32 guess)", type_label=function_definition];
1082 [label="189_ if\n1082-if-190-192", method="play_TOD31(bytes32 guess)", type_label=if];
4172 [label="189_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
1104 [label="190_ winner_TOD31 = msg.sender;\n1104-expression_statement-191-191", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
1110 [label="193_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n1110-function_definition-194-196", method="getReward_TOD31()", type_label=function_definition];
1115 [label="194_ winner_TOD31.transfer(msg.value);\n1115-expression_statement-195-195", method="getReward_TOD31()", type_label=expression_statement];
1138 [label="197_ address payable winner_TOD13;\n1138-new_variable-198-198", method="", type_label=new_variable];
1142 [label="198_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n1142-function_definition-199-203", method="play_TOD13(bytes32 guess)", type_label=function_definition];
1150 [label="199_ if\n1150-if-200-202", method="play_TOD13(bytes32 guess)", type_label=if];
4240 [label="199_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
1172 [label="200_ winner_TOD13 = msg.sender;\n1172-expression_statement-201-201", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
1178 [label="203_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n1178-function_definition-204-206", method="getReward_TOD13()", type_label=function_definition];
1183 [label="204_ winner_TOD13.transfer(msg.value);\n1183-expression_statement-205-205", method="getReward_TOD13()", type_label=expression_statement];
1216 [label="208_ decimals = dec;\n1216-expression_statement-209-209", method="", type_label=expression_statement];
1220 [label="209_ name = tokenName;\n1220-expression_statement-210-210", method="", type_label=expression_statement];
1224 [label="210_ symbol = tokenSymbol;\n1224-expression_statement-211-211", method="", type_label=expression_statement];
1228 [label="212_ bool claimed_TOD38 = false;\n1228-new_variable-213-213", method="", type_label=new_variable];
1234 [label="213_ address payable owner_TOD38;\n1234-new_variable-214-214", method="", type_label=new_variable];
1238 [label="214_ uint256 reward_TOD38;\n1238-new_variable-215-215", method="", type_label=new_variable];
1242 [label="215_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n1242-function_definition-216-221", method="setReward_TOD38()", type_label=function_definition];
1247 [label="216_ require (!claimed_TOD38);\n1247-expression_statement-217-217", method="setReward_TOD38()", type_label=expression_statement];
1253 [label="217_ require(msg.sender == owner_TOD38);\n1253-expression_statement-218-218", method="setReward_TOD38()", type_label=expression_statement];
1262 [label="218_ owner_TOD38.transfer(reward_TOD38);\n1262-expression_statement-219-219", method="setReward_TOD38()", type_label=expression_statement];
1269 [label="219_ reward_TOD38 = msg.value;\n1269-expression_statement-220-220", method="setReward_TOD38()", type_label=expression_statement];
1275 [label="221_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n1275-function_definition-222-227", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
1283 [label="222_ require (!claimed_TOD38);\n1283-expression_statement-223-223", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1289 [label="223_ require(submission < 10);\n1289-expression_statement-224-224", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1296 [label="224_ msg.sender.transfer(reward_TOD38);\n1296-expression_statement-225-225", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1305 [label="225_ claimed_TOD38 = true;\n1305-expression_statement-226-226", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1310 [label="227_ function _transfer(address _from, address _to, uint _value) internal {\n    require(_to != address(0x0));\n    balanceOf[_from] = balanceOf[_from].sub(_value);\n    balanceOf[_to] = balanceOf[_to].add(_value);\n    emit Transfer(_from, _to, _value);\n  }\n1310-function_definition-228-233", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
1326 [label="228_ require(_to != address(0x0));\n1326-expression_statement-229-229", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1335 [label="229_ balanceOf[_from] = balanceOf[_from].sub(_value);\n1335-expression_statement-230-230", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1348 [label="230_ balanceOf[_to] = balanceOf[_to].add(_value);\n1348-expression_statement-231-231", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1369 [label="233_ bool claimed_TOD4 = false;\n1369-new_variable-234-234", method="", type_label=new_variable];
1375 [label="234_ address payable owner_TOD4;\n1375-new_variable-235-235", method="", type_label=new_variable];
1379 [label="235_ uint256 reward_TOD4;\n1379-new_variable-236-236", method="", type_label=new_variable];
1383 [label="236_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n1383-function_definition-237-242", method="setReward_TOD4()", type_label=function_definition];
1388 [label="237_ require (!claimed_TOD4);\n1388-expression_statement-238-238", method="setReward_TOD4()", type_label=expression_statement];
1394 [label="238_ require(msg.sender == owner_TOD4);\n1394-expression_statement-239-239", method="setReward_TOD4()", type_label=expression_statement];
1403 [label="239_ owner_TOD4.transfer(reward_TOD4);\n1403-expression_statement-240-240", method="setReward_TOD4()", type_label=expression_statement];
1410 [label="240_ reward_TOD4 = msg.value;\n1410-expression_statement-241-241", method="setReward_TOD4()", type_label=expression_statement];
1416 [label="242_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n1416-function_definition-243-248", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
1424 [label="243_ require (!claimed_TOD4);\n1424-expression_statement-244-244", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1430 [label="244_ require(submission < 10);\n1430-expression_statement-245-245", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1437 [label="245_ msg.sender.transfer(reward_TOD4);\n1437-expression_statement-246-246", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1446 [label="246_ claimed_TOD4 = true;\n1446-expression_statement-247-247", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1451 [label="248_ function transfer(address _to, uint256 _value) public returns (bool success) {\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n1451-function_definition-249-252", method="transfer(address _to,uint256 _value)", type_label=function_definition];
1468 [label="249_ _transfer(msg.sender, _to, _value);\n1468-expression_statement-250-250", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
1479 [label="250_ return true;\n1479-return-251-251", method="transfer(address _to,uint256 _value)", type_label=return];
1482 [label="252_ address payable winner_TOD7;\n1482-new_variable-253-253", method="", type_label=new_variable];
1486 [label="253_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n1486-function_definition-254-258", method="play_TOD7(bytes32 guess)", type_label=function_definition];
1494 [label="254_ if\n1494-if-255-257", method="play_TOD7(bytes32 guess)", type_label=if];
4584 [label="254_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
1516 [label="255_ winner_TOD7 = msg.sender;\n1516-expression_statement-256-256", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
1522 [label="258_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n1522-function_definition-259-261", method="getReward_TOD7()", type_label=function_definition];
1527 [label="259_ winner_TOD7.transfer(msg.value);\n1527-expression_statement-260-260", method="getReward_TOD7()", type_label=expression_statement];
1536 [label="261_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n		_transfer(_from, _to, _value);\n		return true;\n  }\n1536-function_definition-262-266", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
1557 [label="262_ allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n1557-expression_statement-263-263", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1578 [label="263_ _transfer(_from, _to, _value);\n1578-expression_statement-264-264", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1587 [label="264_ return true;\n1587-return-265-265", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
1590 [label="266_ address payable winner_TOD23;\n1590-new_variable-267-267", method="", type_label=new_variable];
1594 [label="267_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n1594-function_definition-268-272", method="play_TOD23(bytes32 guess)", type_label=function_definition];
1602 [label="268_ if\n1602-if-269-271", method="play_TOD23(bytes32 guess)", type_label=if];
4692 [label="268_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
1624 [label="269_ winner_TOD23 = msg.sender;\n1624-expression_statement-270-270", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
1630 [label="272_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n1630-function_definition-273-275", method="getReward_TOD23()", type_label=function_definition];
1635 [label="273_ winner_TOD23.transfer(msg.value);\n1635-expression_statement-274-274", method="getReward_TOD23()", type_label=expression_statement];
1644 [label="275_ function approve(address _spender, uint256 _value) public returns (bool success) {\n    allowance[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n1644-function_definition-276-280", method="approve(address _spender,uint256 _value)", type_label=function_definition];
1661 [label="276_ allowance[msg.sender][_spender] = _value;\n1661-expression_statement-277-277", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
1681 [label="278_ return true;\n1681-return-279-279", method="approve(address _spender,uint256 _value)", type_label=return];
1684 [label="280_ bool claimed_TOD14 = false;\n1684-new_variable-281-281", method="", type_label=new_variable];
1690 [label="281_ address payable owner_TOD14;\n1690-new_variable-282-282", method="", type_label=new_variable];
1694 [label="282_ uint256 reward_TOD14;\n1694-new_variable-283-283", method="", type_label=new_variable];
1698 [label="283_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n1698-function_definition-284-289", method="setReward_TOD14()", type_label=function_definition];
1703 [label="284_ require (!claimed_TOD14);\n1703-expression_statement-285-285", method="setReward_TOD14()", type_label=expression_statement];
1709 [label="285_ require(msg.sender == owner_TOD14);\n1709-expression_statement-286-286", method="setReward_TOD14()", type_label=expression_statement];
1718 [label="286_ owner_TOD14.transfer(reward_TOD14);\n1718-expression_statement-287-287", method="setReward_TOD14()", type_label=expression_statement];
1725 [label="287_ reward_TOD14 = msg.value;\n1725-expression_statement-288-288", method="setReward_TOD14()", type_label=expression_statement];
1731 [label="289_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n1731-function_definition-290-295", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
1739 [label="290_ require (!claimed_TOD14);\n1739-expression_statement-291-291", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1745 [label="291_ require(submission < 10);\n1745-expression_statement-292-292", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1752 [label="292_ msg.sender.transfer(reward_TOD14);\n1752-expression_statement-293-293", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1761 [label="293_ claimed_TOD14 = true;\n1761-expression_statement-294-294", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1766 [label="295_ function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n    tokenRecipient spender = tokenRecipient(_spender);\n    if (approve(_spender, _value)) {\n      spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n      return true;\n    }\n  }\n1766-function_definition-296-302", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=function_definition];
1787 [label="296_ tokenRecipient spender = tokenRecipient(_spender);\n1787-new_variable-297-297", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=new_variable];
1797 [label="297_ if\n1797-if-298-301", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=if];
4887 [label="297_ end_if", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=end_if];
1805 [label="298_ spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n1805-expression_statement-299-299", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=expression_statement];
1822 [label="299_ return true;\n1822-return-300-300", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=return];
1825 [label="302_ bool claimed_TOD30 = false;\n1825-new_variable-303-303", method="", type_label=new_variable];
1831 [label="303_ address payable owner_TOD30;\n1831-new_variable-304-304", method="", type_label=new_variable];
1835 [label="304_ uint256 reward_TOD30;\n1835-new_variable-305-305", method="", type_label=new_variable];
1839 [label="305_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n1839-function_definition-306-311", method="setReward_TOD30()", type_label=function_definition];
1844 [label="306_ require (!claimed_TOD30);\n1844-expression_statement-307-307", method="setReward_TOD30()", type_label=expression_statement];
1850 [label="307_ require(msg.sender == owner_TOD30);\n1850-expression_statement-308-308", method="setReward_TOD30()", type_label=expression_statement];
1859 [label="308_ owner_TOD30.transfer(reward_TOD30);\n1859-expression_statement-309-309", method="setReward_TOD30()", type_label=expression_statement];
1866 [label="309_ reward_TOD30 = msg.value;\n1866-expression_statement-310-310", method="setReward_TOD30()", type_label=expression_statement];
1872 [label="311_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n1872-function_definition-312-317", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
1880 [label="312_ require (!claimed_TOD30);\n1880-expression_statement-313-313", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1886 [label="313_ require(submission < 10);\n1886-expression_statement-314-314", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1893 [label="314_ msg.sender.transfer(reward_TOD30);\n1893-expression_statement-315-315", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1902 [label="315_ claimed_TOD30 = true;\n1902-expression_statement-316-316", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1916 [label="319_ address payable winner_TOD37;\n1916-new_variable-320-320", method="", type_label=new_variable];
1920 [label="320_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n1920-function_definition-321-325", method="play_TOD37(bytes32 guess)", type_label=function_definition];
1928 [label="321_ if\n1928-if-322-324", method="play_TOD37(bytes32 guess)", type_label=if];
5018 [label="321_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
1950 [label="322_ winner_TOD37 = msg.sender;\n1950-expression_statement-323-323", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
1956 [label="325_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n1956-function_definition-326-328", method="getReward_TOD37()", type_label=function_definition];
1961 [label="326_ winner_TOD37.transfer(msg.value);\n1961-expression_statement-327-327", method="getReward_TOD37()", type_label=expression_statement];
1970 [label="328_ string _tokenName = \"AZ FundChain\";\n1970-new_variable-329-329", method="", type_label=new_variable];
1976 [label="328_ address payable winner_TOD3;\n1976-new_variable-329-329", method="", type_label=new_variable];
1980 [label="329_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n1980-function_definition-330-334", method="play_TOD3(bytes32 guess)", type_label=function_definition];
1988 [label="330_ if\n1988-if-331-333", method="play_TOD3(bytes32 guess)", type_label=if];
5078 [label="330_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
2010 [label="331_ winner_TOD3 = msg.sender;\n2010-expression_statement-332-332", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
2016 [label="334_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n2016-function_definition-335-337", method="getReward_TOD3()", type_label=function_definition];
2021 [label="335_ winner_TOD3.transfer(msg.value);\n2021-expression_statement-336-336", method="getReward_TOD3()", type_label=expression_statement];
2030 [label="337_ string _tokenSymbol = \"AZT\";\n2030-new_variable-338-338", method="", type_label=new_variable];
2036 [label="338_ address payable winner_TOD9;\n2036-new_variable-339-339", method="", type_label=new_variable];
2040 [label="339_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n2040-function_definition-340-344", method="play_TOD9(bytes32 guess)", type_label=function_definition];
2048 [label="340_ if\n2048-if-341-343", method="play_TOD9(bytes32 guess)", type_label=if];
5138 [label="340_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
2070 [label="341_ winner_TOD9 = msg.sender;\n2070-expression_statement-342-342", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
2076 [label="344_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n2076-function_definition-345-347", method="getReward_TOD9()", type_label=function_definition];
2081 [label="345_ winner_TOD9.transfer(msg.value);\n2081-expression_statement-346-346", method="getReward_TOD9()", type_label=expression_statement];
2090 [label="347_ uint8 _decimals = 18;\n2090-new_variable-348-348", method="", type_label=new_variable];
2095 [label="348_ address payable winner_TOD25;\n2095-new_variable-349-349", method="", type_label=new_variable];
2099 [label="349_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n2099-function_definition-350-354", method="play_TOD25(bytes32 guess)", type_label=function_definition];
2107 [label="350_ if\n2107-if-351-353", method="play_TOD25(bytes32 guess)", type_label=if];
5197 [label="350_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
2129 [label="351_ winner_TOD25 = msg.sender;\n2129-expression_statement-352-352", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
2135 [label="354_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n2135-function_definition-355-357", method="getReward_TOD25()", type_label=function_definition];
2140 [label="355_ winner_TOD25.transfer(msg.value);\n2140-expression_statement-356-356", method="getReward_TOD25()", type_label=expression_statement];
2149 [label="357_ address[] public frozenAddresses;\n2149-new_variable-358-358", method="", type_label=new_variable];
2155 [label="358_ address payable winner_TOD19;\n2155-new_variable-359-359", method="", type_label=new_variable];
2159 [label="359_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n2159-function_definition-360-364", method="play_TOD19(bytes32 guess)", type_label=function_definition];
2167 [label="360_ if\n2167-if-361-363", method="play_TOD19(bytes32 guess)", type_label=if];
5257 [label="360_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
2189 [label="361_ winner_TOD19 = msg.sender;\n2189-expression_statement-362-362", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
2195 [label="364_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n2195-function_definition-365-367", method="getReward_TOD19()", type_label=function_definition];
2200 [label="365_ winner_TOD19.transfer(msg.value);\n2200-expression_statement-366-366", method="getReward_TOD19()", type_label=expression_statement];
2209 [label="367_ bool public tokenFrozen;\n2209-new_variable-368-368", method="", type_label=new_variable];
2214 [label="368_ struct frozenWallet {\n    bool isFrozen;  \n    uint256 rewardedAmount;  \n    uint256 frozenAmount;  \n    uint256 frozenTime;  \n  }\n2214-expression_statement-369-374", method="frozenWallet()", type_label=expression_statement];
2232 [label="374_ bool claimed_TOD26 = false;\n2232-new_variable-375-375", method="", type_label=new_variable];
2238 [label="375_ address payable owner_TOD26;\n2238-new_variable-376-376", method="", type_label=new_variable];
2242 [label="376_ uint256 reward_TOD26;\n2242-new_variable-377-377", method="", type_label=new_variable];
2246 [label="377_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n2246-function_definition-378-383", method="setReward_TOD26()", type_label=function_definition];
2251 [label="378_ require (!claimed_TOD26);\n2251-expression_statement-379-379", method="setReward_TOD26()", type_label=expression_statement];
2257 [label="379_ require(msg.sender == owner_TOD26);\n2257-expression_statement-380-380", method="setReward_TOD26()", type_label=expression_statement];
2266 [label="380_ owner_TOD26.transfer(reward_TOD26);\n2266-expression_statement-381-381", method="setReward_TOD26()", type_label=expression_statement];
2273 [label="381_ reward_TOD26 = msg.value;\n2273-expression_statement-382-382", method="setReward_TOD26()", type_label=expression_statement];
2279 [label="383_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n2279-function_definition-384-389", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
2287 [label="384_ require (!claimed_TOD26);\n2287-expression_statement-385-385", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2293 [label="385_ require(submission < 10);\n2293-expression_statement-386-386", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2300 [label="386_ msg.sender.transfer(reward_TOD26);\n2300-expression_statement-387-387", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2309 [label="387_ claimed_TOD26 = true;\n2309-expression_statement-388-388", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2314 [label="389_ mapping (address => frozenWallet) public frozenWallets;\n2314-new_variable-390-390", method="", type_label=new_variable];
2323 [label="390_ TokenERC20(_tokenName, _tokenSymbol, _decimals)\n2323-expression_statement-391-391", method="", type_label=expression_statement];
2332 [label="391_ frozenAddresses.push(address(0x9fd50776F133751E8Ae6abE1Be124638Bb917E05));\n2332-expression_statement-392-392", method="", type_label=expression_statement];
2341 [label="392_ frozenWallets[frozenAddresses[0]] = frozenWallet({\n      isFrozen: true,\n      rewardedAmount: 30000000 * 10 ** uint256(decimals),\n      frozenAmount: 0 * 10 ** uint256(decimals),\n      frozenTime: now + 1 * 1 hours  \n    });\n2341-expression_statement-393-398", method="", type_label=expression_statement];
2381 [label="398_ for(i < frozenAddresses.length;;i++)\n2381-for-399-402", method="", type_label=for];
5471 [label="398_ end_loop", method="", type_label=end_loop];
2394 [label="398_ i++\n2394-expression_statement-399-399", method="", type_label=expression_statement];
2397 [label="399_ balanceOf[frozenAddresses[i]] = frozenWallets[frozenAddresses[i]].rewardedAmount;\n2397-expression_statement-400-400", method="", type_label=expression_statement];
2411 [label="400_ totalSupply = totalSupply.add(frozenWallets[frozenAddresses[i]].rewardedAmount);\n2411-expression_statement-401-401", method="", type_label=expression_statement];
2426 [label="403_ bool claimed_TOD8 = false;\n2426-new_variable-404-404", method="", type_label=new_variable];
2432 [label="404_ address payable owner_TOD8;\n2432-new_variable-405-405", method="", type_label=new_variable];
2436 [label="405_ uint256 reward_TOD8;\n2436-new_variable-406-406", method="", type_label=new_variable];
2440 [label="406_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n2440-function_definition-407-412", method="setReward_TOD8()", type_label=function_definition];
2445 [label="407_ require (!claimed_TOD8);\n2445-expression_statement-408-408", method="setReward_TOD8()", type_label=expression_statement];
2451 [label="408_ require(msg.sender == owner_TOD8);\n2451-expression_statement-409-409", method="setReward_TOD8()", type_label=expression_statement];
2460 [label="409_ owner_TOD8.transfer(reward_TOD8);\n2460-expression_statement-410-410", method="setReward_TOD8()", type_label=expression_statement];
2467 [label="410_ reward_TOD8 = msg.value;\n2467-expression_statement-411-411", method="setReward_TOD8()", type_label=expression_statement];
2473 [label="412_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n2473-function_definition-413-418", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
2481 [label="413_ require (!claimed_TOD8);\n2481-expression_statement-414-414", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2487 [label="414_ require(submission < 10);\n2487-expression_statement-415-415", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2494 [label="415_ msg.sender.transfer(reward_TOD8);\n2494-expression_statement-416-416", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2503 [label="416_ claimed_TOD8 = true;\n2503-expression_statement-417-417", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2508 [label="418_ function _transfer(address _from, address _to, uint _value) internal {\n    require(_to != address(0x0));\n    require(checkFrozenWallet(_from, _value));\n    balanceOf[_from] = balanceOf[_from].sub(_value);      \n    balanceOf[_to] = balanceOf[_to].add(_value);     \n    emit Transfer(_from, _to, _value);\n  }\n2508-function_definition-419-425", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
2524 [label="419_ require(_to != address(0x0));\n2524-expression_statement-420-420", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
2533 [label="420_ require(checkFrozenWallet(_from, _value));\n2533-expression_statement-421-421", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
2543 [label="421_ balanceOf[_from] = balanceOf[_from].sub(_value);\n2543-expression_statement-422-422", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
2556 [label="422_ balanceOf[_to] = balanceOf[_to].add(_value);\n2556-expression_statement-423-423", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
2577 [label="425_ address payable winner_TOD39;\n2577-new_variable-426-426", method="", type_label=new_variable];
2581 [label="426_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n2581-function_definition-427-431", method="play_TOD39(bytes32 guess)", type_label=function_definition];
2589 [label="427_ if\n2589-if-428-430", method="play_TOD39(bytes32 guess)", type_label=if];
5679 [label="427_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
2611 [label="428_ winner_TOD39 = msg.sender;\n2611-expression_statement-429-429", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
2617 [label="431_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n2617-function_definition-432-434", method="getReward_TOD39()", type_label=function_definition];
2622 [label="432_ winner_TOD39.transfer(msg.value);\n2622-expression_statement-433-433", method="getReward_TOD39()", type_label=expression_statement];
2631 [label="434_ function checkFrozenWallet(address _from, uint _value) public view returns (bool) {\n    return(\n      _from==owner || \n      (!tokenFrozen && \n      (!frozenWallets[_from].isFrozen || \n       now>=frozenWallets[_from].frozenTime || \n       balanceOf[_from].sub(_value)>=frozenWallets[_from].frozenAmount))\n    );\n  }\n2631-function_definition-435-443", method="checkFrozenWallet(address _from,uint _value)", type_label=function_definition];
2648 [label="435_ return(\n      _from==owner || \n      (!tokenFrozen && \n      (!frozenWallets[_from].isFrozen || \n       now>=frozenWallets[_from].frozenTime || \n       balanceOf[_from].sub(_value)>=frozenWallets[_from].frozenAmount))\n    );\n2648-return-436-442", method="checkFrozenWallet(address _from,uint _value)", type_label=return];
2688 [label="443_ bool claimed_TOD36 = false;\n2688-new_variable-444-444", method="", type_label=new_variable];
2694 [label="444_ address payable owner_TOD36;\n2694-new_variable-445-445", method="", type_label=new_variable];
2698 [label="445_ uint256 reward_TOD36;\n2698-new_variable-446-446", method="", type_label=new_variable];
2702 [label="446_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n2702-function_definition-447-452", method="setReward_TOD36()", type_label=function_definition];
2707 [label="447_ require (!claimed_TOD36);\n2707-expression_statement-448-448", method="setReward_TOD36()", type_label=expression_statement];
2713 [label="448_ require(msg.sender == owner_TOD36);\n2713-expression_statement-449-449", method="setReward_TOD36()", type_label=expression_statement];
2722 [label="449_ owner_TOD36.transfer(reward_TOD36);\n2722-expression_statement-450-450", method="setReward_TOD36()", type_label=expression_statement];
2729 [label="450_ reward_TOD36 = msg.value;\n2729-expression_statement-451-451", method="setReward_TOD36()", type_label=expression_statement];
2735 [label="452_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n2735-function_definition-453-458", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
2743 [label="453_ require (!claimed_TOD36);\n2743-expression_statement-454-454", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2749 [label="454_ require(submission < 10);\n2749-expression_statement-455-455", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2756 [label="455_ msg.sender.transfer(reward_TOD36);\n2756-expression_statement-456-456", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2765 [label="456_ claimed_TOD36 = true;\n2765-expression_statement-457-457", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2770 [label="458_ function burn(uint256 _value) onlyOwner public returns (bool success) {\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);    \n    totalSupply = totalSupply.sub(_value);                       \n    emit Burn(msg.sender, _value);\n    return true;\n  }\n2770-function_definition-459-464", method="burn(uint256 _value)", type_label=function_definition];
2776 [label="458_ onlyOwner\n2776-expression_statement-459-459", method="burn(uint256 _value)", type_label=expression_statement];
2785 [label="459_ balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n2785-expression_statement-460-460", method="burn(uint256 _value)", type_label=expression_statement];
2802 [label="460_ totalSupply = totalSupply.sub(_value);\n2802-expression_statement-461-461", method="burn(uint256 _value)", type_label=expression_statement];
2819 [label="462_ return true;\n2819-return-463-463", method="burn(uint256 _value)", type_label=return];
2822 [label="464_ address payable winner_TOD35;\n2822-new_variable-465-465", method="", type_label=new_variable];
2826 [label="465_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n2826-function_definition-466-470", method="play_TOD35(bytes32 guess)", type_label=function_definition];
2834 [label="466_ if\n2834-if-467-469", method="play_TOD35(bytes32 guess)", type_label=if];
5924 [label="466_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
2856 [label="467_ winner_TOD35 = msg.sender;\n2856-expression_statement-468-468", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
2862 [label="470_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n2862-function_definition-471-473", method="getReward_TOD35()", type_label=function_definition];
2867 [label="471_ winner_TOD35.transfer(msg.value);\n2867-expression_statement-472-472", method="getReward_TOD35()", type_label=expression_statement];
2876 [label="473_ function burnFrom(address _from, uint256 _value) public returns (bool success) {\n    balanceOf[_from] = balanceOf[_from].sub(_value);                           \n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);    \n    totalSupply = totalSupply.sub(_value);                               \n    emit Burn(_from, _value);\n    return true;\n  }\n2876-function_definition-474-480", method="burnFrom(address _from,uint256 _value)", type_label=function_definition];
2893 [label="474_ balanceOf[_from] = balanceOf[_from].sub(_value);\n2893-expression_statement-475-475", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
2906 [label="475_ allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n2906-expression_statement-476-476", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
2927 [label="476_ totalSupply = totalSupply.sub(_value);\n2927-expression_statement-477-477", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
2942 [label="478_ return true;\n2942-return-479-479", method="burnFrom(address _from,uint256 _value)", type_label=return];
2945 [label="480_ bool claimed_TOD40 = false;\n2945-new_variable-481-481", method="", type_label=new_variable];
2951 [label="481_ address payable owner_TOD40;\n2951-new_variable-482-482", method="", type_label=new_variable];
2955 [label="482_ uint256 reward_TOD40;\n2955-new_variable-483-483", method="", type_label=new_variable];
2959 [label="483_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n2959-function_definition-484-489", method="setReward_TOD40()", type_label=function_definition];
2964 [label="484_ require (!claimed_TOD40);\n2964-expression_statement-485-485", method="setReward_TOD40()", type_label=expression_statement];
2970 [label="485_ require(msg.sender == owner_TOD40);\n2970-expression_statement-486-486", method="setReward_TOD40()", type_label=expression_statement];
2979 [label="486_ owner_TOD40.transfer(reward_TOD40);\n2979-expression_statement-487-487", method="setReward_TOD40()", type_label=expression_statement];
2986 [label="487_ reward_TOD40 = msg.value;\n2986-expression_statement-488-488", method="setReward_TOD40()", type_label=expression_statement];
2992 [label="489_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n2992-function_definition-490-495", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
3000 [label="490_ require (!claimed_TOD40);\n3000-expression_statement-491-491", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3006 [label="491_ require(submission < 10);\n3006-expression_statement-492-492", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3013 [label="492_ msg.sender.transfer(reward_TOD40);\n3013-expression_statement-493-493", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3022 [label="493_ claimed_TOD40 = true;\n3022-expression_statement-494-494", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3027 [label="495_ function freezeToken(bool freeze) onlyOwner public {\n    tokenFrozen = freeze;\n  }\n3027-function_definition-496-498", method="freezeToken(bool freeze)", type_label=function_definition];
3033 [label="495_ onlyOwner\n3033-expression_statement-496-496", method="freezeToken(bool freeze)", type_label=expression_statement];
3037 [label="496_ tokenFrozen = freeze;\n3037-expression_statement-497-497", method="freezeToken(bool freeze)", type_label=expression_statement];
3041 [label="498_ address payable winner_TOD33;\n3041-new_variable-499-499", method="", type_label=new_variable];
3045 [label="499_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n3045-function_definition-500-504", method="play_TOD33(bytes32 guess)", type_label=function_definition];
3053 [label="500_ if\n3053-if-501-503", method="play_TOD33(bytes32 guess)", type_label=if];
6143 [label="500_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
3075 [label="501_ winner_TOD33 = msg.sender;\n3075-expression_statement-502-502", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
3081 [label="504_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n3081-function_definition-505-507", method="getReward_TOD33()", type_label=function_definition];
3086 [label="505_ winner_TOD33.transfer(msg.value);\n3086-expression_statement-506-506", method="getReward_TOD33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 3120  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3120 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 3120  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
90 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
124 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
162 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
190 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
214 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
241 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
260 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
275 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
514 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
605 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
619 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
692 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
706 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 766  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
744 -> 3834  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3834 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
766 -> 3834  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
772 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 825  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
803 -> 3893  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3893 -> 831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 3893  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
831 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
856 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
864 -> 869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
951 -> 973  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
951 -> 4041  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4041 -> 979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 4041  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
979 -> 984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 1036  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1014 -> 4104  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4104 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 4104  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1042 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1074 -> 1082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1082 -> 1104  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1082 -> 4172  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4172 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1104 -> 4172  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1110 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1150 -> 1172  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1150 -> 4240  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4240 -> 1178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1172 -> 4240  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1178 -> 1183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1216 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1234 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1242 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 1262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1262 -> 1269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1275 -> 1283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1289 -> 1296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1296 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1326 -> 1335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1335 -> 1348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1369 -> 1375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1375 -> 1379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1383 -> 1388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1388 -> 1394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1394 -> 1403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 1410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1416 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1424 -> 1430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1430 -> 1437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1437 -> 1446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1451 -> 1468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1468 -> 1479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1479 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1486 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1494 -> 1516  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1494 -> 4584  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4584 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1516 -> 4584  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1522 -> 1527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1536 -> 1557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1557 -> 1578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1578 -> 1587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1587 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1594 -> 1602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1624  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1602 -> 4692  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4692 -> 1630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1624 -> 4692  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1630 -> 1635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1644 -> 1661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1681 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1684 -> 1690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1690 -> 1694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1698 -> 1703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1703 -> 1709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1709 -> 1718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1718 -> 1725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1731 -> 1739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1739 -> 1745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1745 -> 1752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1752 -> 1761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1766 -> 1787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1787 -> 1797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1797 -> 1805  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1797 -> 4887  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4887 -> 1825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1805 -> 1822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1822 -> 4887  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1822 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1825 -> 1831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1831 -> 1835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1839 -> 1844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1844 -> 1850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1850 -> 1859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1859 -> 1866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1872 -> 1880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1880 -> 1886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1886 -> 1893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1893 -> 1902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1920 -> 1928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1928 -> 1950  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1928 -> 5018  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5018 -> 1956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1950 -> 5018  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1956 -> 1961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1970 -> 1976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1980 -> 1988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1988 -> 2010  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1988 -> 5078  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5078 -> 2016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2010 -> 5078  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2016 -> 2021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2030 -> 2036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2040 -> 2048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2048 -> 2070  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2048 -> 5138  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5138 -> 2076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2070 -> 5138  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2076 -> 2081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2090 -> 2095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2099 -> 2107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2107 -> 2129  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2107 -> 5197  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5197 -> 2135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2129 -> 5197  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2135 -> 2140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2149 -> 2155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2159 -> 2167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2167 -> 2189  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2167 -> 5257  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5257 -> 2195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2189 -> 5257  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2195 -> 2200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2209 -> 2214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2214 -> 2232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2232 -> 2238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2238 -> 2242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2246 -> 2251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2251 -> 2257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2257 -> 2266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2266 -> 2273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2279 -> 2287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2287 -> 2293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2293 -> 2300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2300 -> 2309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2332 -> 2341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2341 -> 2381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2381 -> 2397  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2381 -> 5471  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5471 -> 2426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2394 -> 2381  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2397 -> 2411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2411 -> 2394  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2426 -> 2432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2432 -> 2436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2440 -> 2445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2445 -> 2451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2451 -> 2460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2460 -> 2467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2473 -> 2481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2481 -> 2487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2487 -> 2494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2494 -> 2503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2508 -> 2524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2524 -> 2533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2533 -> 2543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2543 -> 2556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2581 -> 2589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2589 -> 2611  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2589 -> 5679  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5679 -> 2617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2611 -> 5679  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2617 -> 2622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2631 -> 2648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2648 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2688 -> 2694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2694 -> 2698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2702 -> 2707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2707 -> 2713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2713 -> 2722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2722 -> 2729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2735 -> 2743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2743 -> 2749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2749 -> 2756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2756 -> 2765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2770 -> 2785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2785 -> 2802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2819 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2826 -> 2834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2834 -> 2856  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2834 -> 5924  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5924 -> 2862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2856 -> 5924  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2862 -> 2867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2876 -> 2893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2893 -> 2906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2906 -> 2927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2942 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2945 -> 2951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2951 -> 2955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2959 -> 2964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2964 -> 2970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2970 -> 2979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2979 -> 2986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2992 -> 3000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3000 -> 3006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3006 -> 3013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3013 -> 3022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3027 -> 3037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3045 -> 3053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3053 -> 3075  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3053 -> 6143  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6143 -> 3081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3075 -> 6143  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3081 -> 3086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
