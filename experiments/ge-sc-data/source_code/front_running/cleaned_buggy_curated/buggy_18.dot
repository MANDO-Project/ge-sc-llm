digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns(uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns(uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns(uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns(uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function limitLessThan(uint a, uint b) internal pure returns(uint c) {\n        if (a > b) return b;\n        return a;\n    }\n146-function_definition-21-24", method="limitLessThan(uint a,uint b)", type_label=function_definition];
164 [label="21_ if_a > b\n164-if-22-22", method="limitLessThan(uint a,uint b)", type_label=if];
4502 [label="21_ end_if", method="limitLessThan(uint a,uint b)", type_label=end_if];
168 [label="21_ return b;\n168-return-22-22", method="limitLessThan(uint a,uint b)", type_label=return];
170 [label="22_ return a;\n170-return-23-23", method="limitLessThan(uint a,uint b)", type_label=return];
175 [label="26_ function totalSupply() public view returns(uint);\n175-function_definition-27-27", method="totalSupply()", type_label=function_definition];
183 [label="27_ bool claimed_TOD28 = false;\n183-new_variable-28-28", method="", type_label=new_variable];
189 [label="28_ address payable owner_TOD28;\n189-new_variable-29-29", method="", type_label=new_variable];
193 [label="29_ uint256 reward_TOD28;\n193-new_variable-30-30", method="", type_label=new_variable];
197 [label="30_ function setReward_TOD28() public payable {\n        require (!claimed_TOD28);\n        require(msg.sender == owner_TOD28);\n        owner_TOD28.transfer(reward_TOD28);\n        reward_TOD28 = msg.value;\n    }\n197-function_definition-31-36", method="setReward_TOD28()", type_label=function_definition];
202 [label="31_ require (!claimed_TOD28);\n202-expression_statement-32-32", method="setReward_TOD28()", type_label=expression_statement];
208 [label="32_ require(msg.sender == owner_TOD28);\n208-expression_statement-33-33", method="setReward_TOD28()", type_label=expression_statement];
217 [label="33_ owner_TOD28.transfer(reward_TOD28);\n217-expression_statement-34-34", method="setReward_TOD28()", type_label=expression_statement];
224 [label="34_ reward_TOD28 = msg.value;\n224-expression_statement-35-35", method="setReward_TOD28()", type_label=expression_statement];
230 [label="36_ function claimReward_TOD28(uint256 submission) public {\n        require (!claimed_TOD28);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD28);\n        claimed_TOD28 = true;\n    }\n230-function_definition-37-42", method="claimReward_TOD28(uint256 submission)", type_label=function_definition];
238 [label="37_ require (!claimed_TOD28);\n238-expression_statement-38-38", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
244 [label="38_ require(submission < 10);\n244-expression_statement-39-39", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
251 [label="39_ msg.sender.transfer(reward_TOD28);\n251-expression_statement-40-40", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
260 [label="40_ claimed_TOD28 = true;\n260-expression_statement-41-41", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
265 [label="42_ function balanceOf(address tokenOwner) public view returns(uint balance);\n265-function_definition-43-43", method="balanceOf(address tokenOwner)", type_label=function_definition];
278 [label="43_ bool claimed_TOD34 = false;\n278-new_variable-44-44", method="", type_label=new_variable];
284 [label="44_ address payable owner_TOD34;\n284-new_variable-45-45", method="", type_label=new_variable];
288 [label="45_ uint256 reward_TOD34;\n288-new_variable-46-46", method="", type_label=new_variable];
292 [label="46_ function setReward_TOD34() public payable {\n        require (!claimed_TOD34);\n        require(msg.sender == owner_TOD34);\n        owner_TOD34.transfer(reward_TOD34);\n        reward_TOD34 = msg.value;\n    }\n292-function_definition-47-52", method="setReward_TOD34()", type_label=function_definition];
297 [label="47_ require (!claimed_TOD34);\n297-expression_statement-48-48", method="setReward_TOD34()", type_label=expression_statement];
303 [label="48_ require(msg.sender == owner_TOD34);\n303-expression_statement-49-49", method="setReward_TOD34()", type_label=expression_statement];
312 [label="49_ owner_TOD34.transfer(reward_TOD34);\n312-expression_statement-50-50", method="setReward_TOD34()", type_label=expression_statement];
319 [label="50_ reward_TOD34 = msg.value;\n319-expression_statement-51-51", method="setReward_TOD34()", type_label=expression_statement];
325 [label="52_ function claimReward_TOD34(uint256 submission) public {\n        require (!claimed_TOD34);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD34);\n        claimed_TOD34 = true;\n    }\n325-function_definition-53-58", method="claimReward_TOD34(uint256 submission)", type_label=function_definition];
333 [label="53_ require (!claimed_TOD34);\n333-expression_statement-54-54", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
339 [label="54_ require(submission < 10);\n339-expression_statement-55-55", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
346 [label="55_ msg.sender.transfer(reward_TOD34);\n346-expression_statement-56-56", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
355 [label="56_ claimed_TOD34 = true;\n355-expression_statement-57-57", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
360 [label="58_ function allowance(address tokenOwner, address spender) public view returns(uint remaining);\n360-function_definition-59-59", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
377 [label="59_ address payable winner_TOD21;\n377-new_variable-60-60", method="", type_label=new_variable];
381 [label="60_ function play_TOD21(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD21 = msg.sender;\n        }\n    }\n381-function_definition-61-65", method="play_TOD21(bytes32 guess)", type_label=function_definition];
389 [label="61_ if\n389-if-62-64", method="play_TOD21(bytes32 guess)", type_label=if];
4727 [label="61_ end_if", method="play_TOD21(bytes32 guess)", type_label=end_if];
411 [label="62_ winner_TOD21 = msg.sender;\n411-expression_statement-63-63", method="play_TOD21(bytes32 guess)", type_label=expression_statement];
417 [label="65_ function getReward_TOD21() payable public{\n       winner_TOD21.transfer(msg.value);\n    }\n417-function_definition-66-68", method="getReward_TOD21()", type_label=function_definition];
422 [label="66_ winner_TOD21.transfer(msg.value);\n422-expression_statement-67-67", method="getReward_TOD21()", type_label=expression_statement];
431 [label="68_ function transfer(address to, uint tokens) public returns(bool success);\n431-function_definition-69-69", method="transfer(address to,uint tokens)", type_label=function_definition];
447 [label="69_ bool claimed_TOD10 = false;\n447-new_variable-70-70", method="", type_label=new_variable];
453 [label="70_ address payable owner_TOD10;\n453-new_variable-71-71", method="", type_label=new_variable];
457 [label="71_ uint256 reward_TOD10;\n457-new_variable-72-72", method="", type_label=new_variable];
461 [label="72_ function setReward_TOD10() public payable {\n        require (!claimed_TOD10);\n        require(msg.sender == owner_TOD10);\n        owner_TOD10.transfer(reward_TOD10);\n        reward_TOD10 = msg.value;\n    }\n461-function_definition-73-78", method="setReward_TOD10()", type_label=function_definition];
466 [label="73_ require (!claimed_TOD10);\n466-expression_statement-74-74", method="setReward_TOD10()", type_label=expression_statement];
472 [label="74_ require(msg.sender == owner_TOD10);\n472-expression_statement-75-75", method="setReward_TOD10()", type_label=expression_statement];
481 [label="75_ owner_TOD10.transfer(reward_TOD10);\n481-expression_statement-76-76", method="setReward_TOD10()", type_label=expression_statement];
488 [label="76_ reward_TOD10 = msg.value;\n488-expression_statement-77-77", method="setReward_TOD10()", type_label=expression_statement];
494 [label="78_ function claimReward_TOD10(uint256 submission) public {\n        require (!claimed_TOD10);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD10);\n        claimed_TOD10 = true;\n    }\n494-function_definition-79-84", method="claimReward_TOD10(uint256 submission)", type_label=function_definition];
502 [label="79_ require (!claimed_TOD10);\n502-expression_statement-80-80", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
508 [label="80_ require(submission < 10);\n508-expression_statement-81-81", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
515 [label="81_ msg.sender.transfer(reward_TOD10);\n515-expression_statement-82-82", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
524 [label="82_ claimed_TOD10 = true;\n524-expression_statement-83-83", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
529 [label="84_ function approve(address spender, uint tokens) public returns(bool success);\n529-function_definition-85-85", method="approve(address spender,uint tokens)", type_label=function_definition];
545 [label="85_ bool claimed_TOD22 = false;\n545-new_variable-86-86", method="", type_label=new_variable];
551 [label="86_ address payable owner_TOD22;\n551-new_variable-87-87", method="", type_label=new_variable];
555 [label="87_ uint256 reward_TOD22;\n555-new_variable-88-88", method="", type_label=new_variable];
559 [label="88_ function setReward_TOD22() public payable {\n        require (!claimed_TOD22);\n        require(msg.sender == owner_TOD22);\n        owner_TOD22.transfer(reward_TOD22);\n        reward_TOD22 = msg.value;\n    }\n559-function_definition-89-94", method="setReward_TOD22()", type_label=function_definition];
564 [label="89_ require (!claimed_TOD22);\n564-expression_statement-90-90", method="setReward_TOD22()", type_label=expression_statement];
570 [label="90_ require(msg.sender == owner_TOD22);\n570-expression_statement-91-91", method="setReward_TOD22()", type_label=expression_statement];
579 [label="91_ owner_TOD22.transfer(reward_TOD22);\n579-expression_statement-92-92", method="setReward_TOD22()", type_label=expression_statement];
586 [label="92_ reward_TOD22 = msg.value;\n586-expression_statement-93-93", method="setReward_TOD22()", type_label=expression_statement];
592 [label="94_ function claimReward_TOD22(uint256 submission) public {\n        require (!claimed_TOD22);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD22);\n        claimed_TOD22 = true;\n    }\n592-function_definition-95-100", method="claimReward_TOD22(uint256 submission)", type_label=function_definition];
600 [label="95_ require (!claimed_TOD22);\n600-expression_statement-96-96", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
606 [label="96_ require(submission < 10);\n606-expression_statement-97-97", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
613 [label="97_ msg.sender.transfer(reward_TOD22);\n613-expression_statement-98-98", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
622 [label="98_ claimed_TOD22 = true;\n622-expression_statement-99-99", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
627 [label="100_ function transferFrom(address from, address to, uint tokens) public returns(bool success);\n627-function_definition-101-101", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
647 [label="101_ bool claimed_TOD12 = false;\n647-new_variable-102-102", method="", type_label=new_variable];
653 [label="102_ address payable owner_TOD12;\n653-new_variable-103-103", method="", type_label=new_variable];
657 [label="103_ uint256 reward_TOD12;\n657-new_variable-104-104", method="", type_label=new_variable];
661 [label="104_ function setReward_TOD12() public payable {\n        require (!claimed_TOD12);\n        require(msg.sender == owner_TOD12);\n        owner_TOD12.transfer(reward_TOD12);\n        reward_TOD12 = msg.value;\n    }\n661-function_definition-105-110", method="setReward_TOD12()", type_label=function_definition];
666 [label="105_ require (!claimed_TOD12);\n666-expression_statement-106-106", method="setReward_TOD12()", type_label=expression_statement];
672 [label="106_ require(msg.sender == owner_TOD12);\n672-expression_statement-107-107", method="setReward_TOD12()", type_label=expression_statement];
681 [label="107_ owner_TOD12.transfer(reward_TOD12);\n681-expression_statement-108-108", method="setReward_TOD12()", type_label=expression_statement];
688 [label="108_ reward_TOD12 = msg.value;\n688-expression_statement-109-109", method="setReward_TOD12()", type_label=expression_statement];
694 [label="110_ function claimReward_TOD12(uint256 submission) public {\n        require (!claimed_TOD12);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD12);\n        claimed_TOD12 = true;\n    }\n694-function_definition-111-116", method="claimReward_TOD12(uint256 submission)", type_label=function_definition];
702 [label="111_ require (!claimed_TOD12);\n702-expression_statement-112-112", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
708 [label="112_ require(submission < 10);\n708-expression_statement-113-113", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
715 [label="113_ msg.sender.transfer(reward_TOD12);\n715-expression_statement-114-114", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
724 [label="114_ claimed_TOD12 = true;\n724-expression_statement-115-115", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
729 [label="116_ address payable winner_TOD33;\n729-new_variable-117-117", method="", type_label=new_variable];
733 [label="117_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n733-function_definition-118-122", method="play_TOD33(bytes32 guess)", type_label=function_definition];
741 [label="118_ if\n741-if-119-121", method="play_TOD33(bytes32 guess)", type_label=if];
5079 [label="118_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
763 [label="119_ winner_TOD33 = msg.sender;\n763-expression_statement-120-120", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
769 [label="122_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n769-function_definition-123-125", method="getReward_TOD33()", type_label=function_definition];
774 [label="123_ winner_TOD33.transfer(msg.value);\n774-expression_statement-124-124", method="getReward_TOD33()", type_label=expression_statement];
797 [label="126_ address payable winner_TOD27;\n797-new_variable-127-127", method="", type_label=new_variable];
801 [label="127_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n801-function_definition-128-132", method="play_TOD27(bytes32 guess)", type_label=function_definition];
809 [label="128_ if\n809-if-129-131", method="play_TOD27(bytes32 guess)", type_label=if];
5147 [label="128_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
831 [label="129_ winner_TOD27 = msg.sender;\n831-expression_statement-130-130", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
837 [label="132_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n837-function_definition-133-135", method="getReward_TOD27()", type_label=function_definition];
842 [label="133_ winner_TOD27.transfer(msg.value);\n842-expression_statement-134-134", method="getReward_TOD27()", type_label=expression_statement];
868 [label="138_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n868-function_definition-139-139", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
887 [label="139_ address payable winner_TOD11;\n887-new_variable-140-140", method="", type_label=new_variable];
891 [label="140_ function play_TOD11(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD11 = msg.sender;\n        }\n    }\n891-function_definition-141-145", method="play_TOD11(bytes32 guess)", type_label=function_definition];
899 [label="141_ if\n899-if-142-144", method="play_TOD11(bytes32 guess)", type_label=if];
5237 [label="141_ end_if", method="play_TOD11(bytes32 guess)", type_label=end_if];
921 [label="142_ winner_TOD11 = msg.sender;\n921-expression_statement-143-143", method="play_TOD11(bytes32 guess)", type_label=expression_statement];
927 [label="145_ function getReward_TOD11() payable public{\n       winner_TOD11.transfer(msg.value);\n    }\n927-function_definition-146-148", method="getReward_TOD11()", type_label=function_definition];
932 [label="146_ winner_TOD11.transfer(msg.value);\n932-expression_statement-147-147", method="getReward_TOD11()", type_label=expression_statement];
944 [label="150_ address public owner;\n944-new_variable-151-151", method="", type_label=new_variable];
949 [label="151_ address public newOwner;\n949-new_variable-152-152", method="", type_label=new_variable];
954 [label="152_ address payable winner_TOD31;\n954-new_variable-153-153", method="", type_label=new_variable];
958 [label="153_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n958-function_definition-154-158", method="play_TOD31(bytes32 guess)", type_label=function_definition];
966 [label="154_ if\n966-if-155-157", method="play_TOD31(bytes32 guess)", type_label=if];
5304 [label="154_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
988 [label="155_ winner_TOD31 = msg.sender;\n988-expression_statement-156-156", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
994 [label="158_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n994-function_definition-159-161", method="getReward_TOD31()", type_label=function_definition];
999 [label="159_ winner_TOD31.transfer(msg.value);\n999-expression_statement-160-160", method="getReward_TOD31()", type_label=expression_statement];
1020 [label="163_ owner = msg.sender;\n1020-expression_statement-164-164", method="", type_label=expression_statement];
1026 [label="165_ address payable winner_TOD1;\n1026-new_variable-166-166", method="", type_label=new_variable];
1030 [label="166_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n1030-function_definition-167-171", method="play_TOD1(bytes32 guess)", type_label=function_definition];
1038 [label="167_ if\n1038-if-168-170", method="play_TOD1(bytes32 guess)", type_label=if];
5376 [label="167_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
1060 [label="168_ winner_TOD1 = msg.sender;\n1060-expression_statement-169-169", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
1066 [label="171_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n1066-function_definition-172-174", method="getReward_TOD1()", type_label=function_definition];
1071 [label="172_ winner_TOD1.transfer(msg.value);\n1071-expression_statement-173-173", method="getReward_TOD1()", type_label=expression_statement];
1080 [label="174_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n1080-expression_statement-175-178", method="", type_label=expression_statement];
1083 [label="175_ require(msg.sender == owner);\n1083-expression_statement-176-176", method="", type_label=expression_statement];
1092 [label="176_ _;\n1092-expression_statement-177-177", method="", type_label=expression_statement];
1094 [label="178_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n1094-function_definition-179-181", method="transferOwnership(address _newOwner)", type_label=function_definition];
1101 [label="178_ onlyOwner\n1101-expression_statement-179-179", method="transferOwnership(address _newOwner)", type_label=expression_statement];
1104 [label="179_ newOwner = _newOwner;\n1104-expression_statement-180-180", method="transferOwnership(address _newOwner)", type_label=expression_statement];
1108 [label="181_ bool claimed_TOD2 = false;\n1108-new_variable-182-182", method="", type_label=new_variable];
1114 [label="182_ address payable owner_TOD2;\n1114-new_variable-183-183", method="", type_label=new_variable];
1118 [label="183_ uint256 reward_TOD2;\n1118-new_variable-184-184", method="", type_label=new_variable];
1122 [label="184_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n1122-function_definition-185-190", method="setReward_TOD2()", type_label=function_definition];
1127 [label="185_ require (!claimed_TOD2);\n1127-expression_statement-186-186", method="setReward_TOD2()", type_label=expression_statement];
1133 [label="186_ require(msg.sender == owner_TOD2);\n1133-expression_statement-187-187", method="setReward_TOD2()", type_label=expression_statement];
1142 [label="187_ owner_TOD2.transfer(reward_TOD2);\n1142-expression_statement-188-188", method="setReward_TOD2()", type_label=expression_statement];
1149 [label="188_ reward_TOD2 = msg.value;\n1149-expression_statement-189-189", method="setReward_TOD2()", type_label=expression_statement];
1155 [label="190_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n1155-function_definition-191-196", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
1163 [label="191_ require (!claimed_TOD2);\n1163-expression_statement-192-192", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1169 [label="192_ require(submission < 10);\n1169-expression_statement-193-193", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1176 [label="193_ msg.sender.transfer(reward_TOD2);\n1176-expression_statement-194-194", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1185 [label="194_ claimed_TOD2 = true;\n1185-expression_statement-195-195", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1190 [label="196_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n1190-function_definition-197-202", method="acceptOwnership()", type_label=function_definition];
1194 [label="197_ require(msg.sender == newOwner);\n1194-expression_statement-198-198", method="acceptOwnership()", type_label=expression_statement];
1209 [label="199_ owner = newOwner;\n1209-expression_statement-200-200", method="acceptOwnership()", type_label=expression_statement];
1213 [label="200_ newOwner = address(0);\n1213-expression_statement-201-201", method="acceptOwnership()", type_label=expression_statement];
1219 [label="202_ address payable winner_TOD17;\n1219-new_variable-203-203", method="", type_label=new_variable];
1223 [label="203_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n1223-function_definition-204-208", method="play_TOD17(bytes32 guess)", type_label=function_definition];
1231 [label="204_ if\n1231-if-205-207", method="play_TOD17(bytes32 guess)", type_label=if];
5569 [label="204_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
1253 [label="205_ winner_TOD17 = msg.sender;\n1253-expression_statement-206-206", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
1259 [label="208_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n1259-function_definition-209-211", method="getReward_TOD17()", type_label=function_definition];
1264 [label="209_ winner_TOD17.transfer(msg.value);\n1264-expression_statement-210-210", method="getReward_TOD17()", type_label=expression_statement];
1292 [label="215_ string public symbol;\n1292-new_variable-216-216", method="", type_label=new_variable];
1297 [label="216_ string public name;\n1297-new_variable-217-217", method="", type_label=new_variable];
1302 [label="217_ uint8 public decimals;\n1302-new_variable-218-218", method="", type_label=new_variable];
1307 [label="218_ uint public _totalSupply;\n1307-new_variable-219-219", method="", type_label=new_variable];
1312 [label="219_ uint public latestDifficultyPeriodStarted;\n1312-new_variable-220-220", method="", type_label=new_variable];
1317 [label="220_ uint public epochCount;\n1317-new_variable-221-221", method="", type_label=new_variable];
1322 [label="221_ uint public _BLOCKS_PER_READJUSTMENT = 1024;\n1322-new_variable-222-222", method="", type_label=new_variable];
1328 [label="222_ uint public _MINIMUM_TARGET = 2 ** 16;\n1328-new_variable-223-223", method="", type_label=new_variable];
1336 [label="223_ uint public _MAXIMUM_TARGET = 2 ** 234;\n1336-new_variable-224-224", method="", type_label=new_variable];
1344 [label="224_ uint public miningTarget;\n1344-new_variable-225-225", method="", type_label=new_variable];
1349 [label="225_ bytes32 public challengeNumber;\n1349-new_variable-226-226", method="", type_label=new_variable];
1354 [label="226_ uint public rewardEra;\n1354-new_variable-227-227", method="", type_label=new_variable];
1359 [label="227_ uint public maxSupplyForEra;\n1359-new_variable-228-228", method="", type_label=new_variable];
1364 [label="228_ address public lastRewardTo;\n1364-new_variable-229-229", method="", type_label=new_variable];
1369 [label="229_ uint public lastRewardAmount;\n1369-new_variable-230-230", method="", type_label=new_variable];
1374 [label="230_ bool claimed_TOD18 = false;\n1374-new_variable-231-231", method="", type_label=new_variable];
1380 [label="231_ address payable owner_TOD18;\n1380-new_variable-232-232", method="", type_label=new_variable];
1384 [label="232_ uint256 reward_TOD18;\n1384-new_variable-233-233", method="", type_label=new_variable];
1388 [label="233_ function setReward_TOD18() public payable {\n        require (!claimed_TOD18);\n        require(msg.sender == owner_TOD18);\n        owner_TOD18.transfer(reward_TOD18);\n        reward_TOD18 = msg.value;\n    }\n1388-function_definition-234-239", method="setReward_TOD18()", type_label=function_definition];
1393 [label="234_ require (!claimed_TOD18);\n1393-expression_statement-235-235", method="setReward_TOD18()", type_label=expression_statement];
1399 [label="235_ require(msg.sender == owner_TOD18);\n1399-expression_statement-236-236", method="setReward_TOD18()", type_label=expression_statement];
1408 [label="236_ owner_TOD18.transfer(reward_TOD18);\n1408-expression_statement-237-237", method="setReward_TOD18()", type_label=expression_statement];
1415 [label="237_ reward_TOD18 = msg.value;\n1415-expression_statement-238-238", method="setReward_TOD18()", type_label=expression_statement];
1421 [label="239_ function claimReward_TOD18(uint256 submission) public {\n        require (!claimed_TOD18);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD18);\n        claimed_TOD18 = true;\n    }\n1421-function_definition-240-245", method="claimReward_TOD18(uint256 submission)", type_label=function_definition];
1429 [label="240_ require (!claimed_TOD18);\n1429-expression_statement-241-241", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
1435 [label="241_ require(submission < 10);\n1435-expression_statement-242-242", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
1442 [label="242_ msg.sender.transfer(reward_TOD18);\n1442-expression_statement-243-243", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
1451 [label="243_ claimed_TOD18 = true;\n1451-expression_statement-244-244", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
1456 [label="245_ uint public lastRewardEthBlockNumber;\n1456-new_variable-246-246", method="", type_label=new_variable];
1461 [label="246_ address payable winner_TOD29;\n1461-new_variable-247-247", method="", type_label=new_variable];
1465 [label="247_ function play_TOD29(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD29 = msg.sender;\n        }\n    }\n1465-function_definition-248-252", method="play_TOD29(bytes32 guess)", type_label=function_definition];
1473 [label="248_ if\n1473-if-249-251", method="play_TOD29(bytes32 guess)", type_label=if];
5811 [label="248_ end_if", method="play_TOD29(bytes32 guess)", type_label=end_if];
1495 [label="249_ winner_TOD29 = msg.sender;\n1495-expression_statement-250-250", method="play_TOD29(bytes32 guess)", type_label=expression_statement];
1501 [label="252_ function getReward_TOD29() payable public{\n       winner_TOD29.transfer(msg.value);\n    }\n1501-function_definition-253-255", method="getReward_TOD29()", type_label=function_definition];
1506 [label="253_ winner_TOD29.transfer(msg.value);\n1506-expression_statement-254-254", method="getReward_TOD29()", type_label=expression_statement];
1515 [label="255_ bool locked = false;\n1515-new_variable-256-256", method="", type_label=new_variable];
1521 [label="256_ bool claimed_TOD6 = false;\n1521-new_variable-257-257", method="", type_label=new_variable];
1527 [label="257_ address payable owner_TOD6;\n1527-new_variable-258-258", method="", type_label=new_variable];
1531 [label="258_ uint256 reward_TOD6;\n1531-new_variable-259-259", method="", type_label=new_variable];
1535 [label="259_ function setReward_TOD6() public payable {\n        require (!claimed_TOD6);\n        require(msg.sender == owner_TOD6);\n        owner_TOD6.transfer(reward_TOD6);\n        reward_TOD6 = msg.value;\n    }\n1535-function_definition-260-265", method="setReward_TOD6()", type_label=function_definition];
1540 [label="260_ require (!claimed_TOD6);\n1540-expression_statement-261-261", method="setReward_TOD6()", type_label=expression_statement];
1546 [label="261_ require(msg.sender == owner_TOD6);\n1546-expression_statement-262-262", method="setReward_TOD6()", type_label=expression_statement];
1555 [label="262_ owner_TOD6.transfer(reward_TOD6);\n1555-expression_statement-263-263", method="setReward_TOD6()", type_label=expression_statement];
1562 [label="263_ reward_TOD6 = msg.value;\n1562-expression_statement-264-264", method="setReward_TOD6()", type_label=expression_statement];
1568 [label="265_ function claimReward_TOD6(uint256 submission) public {\n        require (!claimed_TOD6);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD6);\n        claimed_TOD6 = true;\n    }\n1568-function_definition-266-271", method="claimReward_TOD6(uint256 submission)", type_label=function_definition];
1576 [label="266_ require (!claimed_TOD6);\n1576-expression_statement-267-267", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
1582 [label="267_ require(submission < 10);\n1582-expression_statement-268-268", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
1589 [label="268_ msg.sender.transfer(reward_TOD6);\n1589-expression_statement-269-269", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
1598 [label="269_ claimed_TOD6 = true;\n1598-expression_statement-270-270", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
1603 [label="271_ mapping(bytes32 => bytes32) solutionForChallenge;\n1603-new_variable-272-272", method="", type_label=new_variable];
1609 [label="272_ bool claimed_TOD16 = false;\n1609-new_variable-273-273", method="", type_label=new_variable];
1615 [label="273_ address payable owner_TOD16;\n1615-new_variable-274-274", method="", type_label=new_variable];
1619 [label="274_ uint256 reward_TOD16;\n1619-new_variable-275-275", method="", type_label=new_variable];
1623 [label="275_ function setReward_TOD16() public payable {\n        require (!claimed_TOD16);\n        require(msg.sender == owner_TOD16);\n        owner_TOD16.transfer(reward_TOD16);\n        reward_TOD16 = msg.value;\n    }\n1623-function_definition-276-281", method="setReward_TOD16()", type_label=function_definition];
1628 [label="276_ require (!claimed_TOD16);\n1628-expression_statement-277-277", method="setReward_TOD16()", type_label=expression_statement];
1634 [label="277_ require(msg.sender == owner_TOD16);\n1634-expression_statement-278-278", method="setReward_TOD16()", type_label=expression_statement];
1643 [label="278_ owner_TOD16.transfer(reward_TOD16);\n1643-expression_statement-279-279", method="setReward_TOD16()", type_label=expression_statement];
1650 [label="279_ reward_TOD16 = msg.value;\n1650-expression_statement-280-280", method="setReward_TOD16()", type_label=expression_statement];
1656 [label="281_ function claimReward_TOD16(uint256 submission) public {\n        require (!claimed_TOD16);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD16);\n        claimed_TOD16 = true;\n    }\n1656-function_definition-282-287", method="claimReward_TOD16(uint256 submission)", type_label=function_definition];
1664 [label="282_ require (!claimed_TOD16);\n1664-expression_statement-283-283", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
1670 [label="283_ require(submission < 10);\n1670-expression_statement-284-284", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
1677 [label="284_ msg.sender.transfer(reward_TOD16);\n1677-expression_statement-285-285", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
1686 [label="285_ claimed_TOD16 = true;\n1686-expression_statement-286-286", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
1691 [label="287_ uint public tokensMinted;\n1691-new_variable-288-288", method="", type_label=new_variable];
1696 [label="288_ bool claimed_TOD24 = false;\n1696-new_variable-289-289", method="", type_label=new_variable];
1702 [label="289_ address payable owner_TOD24;\n1702-new_variable-290-290", method="", type_label=new_variable];
1706 [label="290_ uint256 reward_TOD24;\n1706-new_variable-291-291", method="", type_label=new_variable];
1710 [label="291_ function setReward_TOD24() public payable {\n        require (!claimed_TOD24);\n        require(msg.sender == owner_TOD24);\n        owner_TOD24.transfer(reward_TOD24);\n        reward_TOD24 = msg.value;\n    }\n1710-function_definition-292-297", method="setReward_TOD24()", type_label=function_definition];
1715 [label="292_ require (!claimed_TOD24);\n1715-expression_statement-293-293", method="setReward_TOD24()", type_label=expression_statement];
1721 [label="293_ require(msg.sender == owner_TOD24);\n1721-expression_statement-294-294", method="setReward_TOD24()", type_label=expression_statement];
1730 [label="294_ owner_TOD24.transfer(reward_TOD24);\n1730-expression_statement-295-295", method="setReward_TOD24()", type_label=expression_statement];
1737 [label="295_ reward_TOD24 = msg.value;\n1737-expression_statement-296-296", method="setReward_TOD24()", type_label=expression_statement];
1743 [label="297_ function claimReward_TOD24(uint256 submission) public {\n        require (!claimed_TOD24);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD24);\n        claimed_TOD24 = true;\n    }\n1743-function_definition-298-303", method="claimReward_TOD24(uint256 submission)", type_label=function_definition];
1751 [label="298_ require (!claimed_TOD24);\n1751-expression_statement-299-299", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
1757 [label="299_ require(submission < 10);\n1757-expression_statement-300-300", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
1764 [label="300_ msg.sender.transfer(reward_TOD24);\n1764-expression_statement-301-301", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
1773 [label="301_ claimed_TOD24 = true;\n1773-expression_statement-302-302", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
1778 [label="303_ mapping(address => uint) balances;\n1778-new_variable-304-304", method="", type_label=new_variable];
1784 [label="304_ address payable winner_TOD5;\n1784-new_variable-305-305", method="", type_label=new_variable];
1788 [label="305_ function play_TOD5(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD5 = msg.sender;\n        }\n    }\n1788-function_definition-306-310", method="play_TOD5(bytes32 guess)", type_label=function_definition];
1796 [label="306_ if\n1796-if-307-309", method="play_TOD5(bytes32 guess)", type_label=if];
6134 [label="306_ end_if", method="play_TOD5(bytes32 guess)", type_label=end_if];
1818 [label="307_ winner_TOD5 = msg.sender;\n1818-expression_statement-308-308", method="play_TOD5(bytes32 guess)", type_label=expression_statement];
1824 [label="310_ function getReward_TOD5() payable public{\n       winner_TOD5.transfer(msg.value);\n    }\n1824-function_definition-311-313", method="getReward_TOD5()", type_label=function_definition];
1829 [label="311_ winner_TOD5.transfer(msg.value);\n1829-expression_statement-312-312", method="getReward_TOD5()", type_label=expression_statement];
1838 [label="313_ mapping(address => mapping(address => uint)) allowed;\n1838-new_variable-314-314", method="", type_label=new_variable];
1846 [label="314_ address payable winner_TOD15;\n1846-new_variable-315-315", method="", type_label=new_variable];
1850 [label="315_ function play_TOD15(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD15 = msg.sender;\n        }\n    }\n1850-function_definition-316-320", method="play_TOD15(bytes32 guess)", type_label=function_definition];
1858 [label="316_ if\n1858-if-317-319", method="play_TOD15(bytes32 guess)", type_label=if];
6196 [label="316_ end_if", method="play_TOD15(bytes32 guess)", type_label=end_if];
1880 [label="317_ winner_TOD15 = msg.sender;\n1880-expression_statement-318-318", method="play_TOD15(bytes32 guess)", type_label=expression_statement];
1886 [label="320_ function getReward_TOD15() payable public{\n       winner_TOD15.transfer(msg.value);\n    }\n1886-function_definition-321-323", method="getReward_TOD15()", type_label=function_definition];
1891 [label="321_ winner_TOD15.transfer(msg.value);\n1891-expression_statement-322-322", method="getReward_TOD15()", type_label=expression_statement];
1900 [label="323_ uint public burnPercent;\n1900-new_variable-324-324", method="", type_label=new_variable];
1905 [label="324_ address payable winner_TOD13;\n1905-new_variable-325-325", method="", type_label=new_variable];
1909 [label="325_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n1909-function_definition-326-330", method="play_TOD13(bytes32 guess)", type_label=function_definition];
1917 [label="326_ if\n1917-if-327-329", method="play_TOD13(bytes32 guess)", type_label=if];
6255 [label="326_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
1939 [label="327_ winner_TOD13 = msg.sender;\n1939-expression_statement-328-328", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
1945 [label="330_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n1945-function_definition-331-333", method="getReward_TOD13()", type_label=function_definition];
1950 [label="331_ winner_TOD13.transfer(msg.value);\n1950-expression_statement-332-332", method="getReward_TOD13()", type_label=expression_statement];
1978 [label="334_ onlyOwner\n1978-expression_statement-335-335", method="", type_label=expression_statement];
1981 [label="335_ symbol = \"YESBUZ\";\n1981-expression_statement-336-336", method="", type_label=expression_statement];
1986 [label="336_ name = \"Yesbuzz\";\n1986-expression_statement-337-337", method="", type_label=expression_statement];
1991 [label="337_ decimals = 8;\n1991-expression_statement-338-338", method="", type_label=expression_statement];
1995 [label="338_ _totalSupply = 21000000 * 10 ** uint(decimals);\n1995-expression_statement-339-339", method="", type_label=expression_statement];
2005 [label="339_ if\n2005-if-340-340", method="", type_label=if];
6343 [label="339_ end_if", method="", type_label=end_if];
2009 [label="340_ locked = true;\n2009-expression_statement-341-341", method="", type_label=expression_statement];
2014 [label="341_ tokensMinted = 0;\n2014-expression_statement-342-342", method="", type_label=expression_statement];
2018 [label="342_ rewardEra = 0;\n2018-expression_statement-343-343", method="", type_label=expression_statement];
2022 [label="343_ maxSupplyForEra = _totalSupply.div(2);\n2022-expression_statement-344-344", method="", type_label=expression_statement];
2031 [label="344_ miningTarget = _MAXIMUM_TARGET;\n2031-expression_statement-345-345", method="", type_label=expression_statement];
2035 [label="345_ latestDifficultyPeriodStarted = block.number;\n2035-expression_statement-346-346", method="", type_label=expression_statement];
2041 [label="346_ burnPercent = 10;\n2041-expression_statement-347-347", method="", type_label=expression_statement];
2045 [label="347_ _startNewMiningEpoch();\n2045-expression_statement-348-348", method="", type_label=expression_statement];
2048 [label="349_ address payable winner_TOD37;\n2048-new_variable-350-350", method="", type_label=new_variable];
2052 [label="350_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n2052-function_definition-351-355", method="play_TOD37(bytes32 guess)", type_label=function_definition];
2060 [label="351_ if\n2060-if-352-354", method="play_TOD37(bytes32 guess)", type_label=if];
6398 [label="351_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
2082 [label="352_ winner_TOD37 = msg.sender;\n2082-expression_statement-353-353", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
2088 [label="355_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n2088-function_definition-356-358", method="getReward_TOD37()", type_label=function_definition];
2093 [label="356_ winner_TOD37.transfer(msg.value);\n2093-expression_statement-357-357", method="getReward_TOD37()", type_label=expression_statement];
2102 [label="358_ function mint(uint256 nonce, bytes32 challenge_digest) public returns(bool success) {\n        bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\n        if (digest != challenge_digest) revert();\n        if (uint256(digest) > miningTarget) revert();\n        bytes32 solution = solutionForChallenge[challengeNumber];\n        solutionForChallenge[challengeNumber] = digest;\n        if (solution != 0x0) revert();  \n        uint reward_amount = getMiningReward();\n        balances[msg.sender] = balances[msg.sender].add(reward_amount);\n        tokensMinted = tokensMinted.add(reward_amount);\n        assert(tokensMinted <= maxSupplyForEra);\n        lastRewardTo = msg.sender;\n        lastRewardAmount = reward_amount;\n        lastRewardEthBlockNumber = block.number;\n        _startNewMiningEpoch();\n        emit Mint(msg.sender, reward_amount, epochCount, challengeNumber);\n        return true;\n    }\n2102-function_definition-359-376", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=function_definition];
2119 [label="359_ bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\n2119-new_variable-360-360", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
2139 [label="360_ if_digest != challenge_digest\n2139-if-361-361", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
6477 [label="360_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
2145 [label="361_ if_uint256(digest) > miningTarget\n2145-if-362-362", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
6483 [label="361_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
2153 [label="362_ bytes32 solution = solutionForChallenge[challengeNumber];\n2153-new_variable-363-363", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
2161 [label="363_ solutionForChallenge[challengeNumber] = digest;\n2161-expression_statement-364-364", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
2167 [label="364_ if_solution != 0x0\n2167-if-365-365", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
6505 [label="364_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
2173 [label="365_ uint reward_amount = getMiningReward();\n2173-new_variable-366-366", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
2180 [label="366_ balances[msg.sender] = balances[msg.sender].add(reward_amount);\n2180-expression_statement-367-367", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
2197 [label="367_ tokensMinted = tokensMinted.add(reward_amount);\n2197-expression_statement-368-368", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
2206 [label="368_ assert(tokensMinted <= maxSupplyForEra);\n2206-expression_statement-369-369", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
2213 [label="369_ lastRewardTo = msg.sender;\n2213-expression_statement-370-370", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
2219 [label="370_ lastRewardAmount = reward_amount;\n2219-expression_statement-371-371", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
2223 [label="371_ lastRewardEthBlockNumber = block.number;\n2223-expression_statement-372-372", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
2229 [label="372_ _startNewMiningEpoch();\n2229-expression_statement-373-373", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
2244 [label="374_ return true;\n2244-return-375-375", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=return];
2247 [label="376_ address payable winner_TOD3;\n2247-new_variable-377-377", method="", type_label=new_variable];
2251 [label="377_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n2251-function_definition-378-382", method="play_TOD3(bytes32 guess)", type_label=function_definition];
2259 [label="378_ if\n2259-if-379-381", method="play_TOD3(bytes32 guess)", type_label=if];
6597 [label="378_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
2281 [label="379_ winner_TOD3 = msg.sender;\n2281-expression_statement-380-380", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
2287 [label="382_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n2287-function_definition-383-385", method="getReward_TOD3()", type_label=function_definition];
2292 [label="383_ winner_TOD3.transfer(msg.value);\n2292-expression_statement-384-384", method="getReward_TOD3()", type_label=expression_statement];
2301 [label="385_ function _startNewMiningEpoch() internal {\n        if (tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39) {\n            rewardEra = rewardEra + 1;\n        }\n        maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));\n        epochCount = epochCount.add(1);\n        if (epochCount % _BLOCKS_PER_READJUSTMENT == 0) {\n            _reAdjustDifficulty();\n        }\n        challengeNumber = blockhash(block.number - 1);\n    }\n2301-function_definition-386-396", method="_startNewMiningEpoch()", type_label=function_definition];
2305 [label="386_ if_tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39\n2305-if-387-389", method="_startNewMiningEpoch()", type_label=if];
6643 [label="386_ end_if", method="_startNewMiningEpoch()", type_label=end_if];
2320 [label="387_ rewardEra = rewardEra + 1;\n2320-expression_statement-388-388", method="_startNewMiningEpoch()", type_label=expression_statement];
2326 [label="389_ maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));\n2326-expression_statement-390-390", method="_startNewMiningEpoch()", type_label=expression_statement];
2342 [label="390_ epochCount = epochCount.add(1);\n2342-expression_statement-391-391", method="_startNewMiningEpoch()", type_label=expression_statement];
2351 [label="391_ if_epochCount % _BLOCKS_PER_READJUSTMENT == 0\n2351-if-392-394", method="_startNewMiningEpoch()", type_label=if];
6689 [label="391_ end_if", method="_startNewMiningEpoch()", type_label=end_if];
2358 [label="392_ _reAdjustDifficulty();\n2358-expression_statement-393-393", method="_startNewMiningEpoch()", type_label=expression_statement];
2361 [label="394_ challengeNumber = blockhash(block.number - 1);\n2361-expression_statement-395-395", method="_startNewMiningEpoch()", type_label=expression_statement];
2372 [label="396_ address payable winner_TOD9;\n2372-new_variable-397-397", method="", type_label=new_variable];
2376 [label="397_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n2376-function_definition-398-402", method="play_TOD9(bytes32 guess)", type_label=function_definition];
2384 [label="398_ if\n2384-if-399-401", method="play_TOD9(bytes32 guess)", type_label=if];
6722 [label="398_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
2406 [label="399_ winner_TOD9 = msg.sender;\n2406-expression_statement-400-400", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
2412 [label="402_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n2412-function_definition-403-405", method="getReward_TOD9()", type_label=function_definition];
2417 [label="403_ winner_TOD9.transfer(msg.value);\n2417-expression_statement-404-404", method="getReward_TOD9()", type_label=expression_statement];
2426 [label="405_ function _reAdjustDifficulty() internal {\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT;  \n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60;  \n        if (ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod) {\n            uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n            uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n            miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));  \n        } else {\n            uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n            uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);  \n            miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));  \n        }\n        latestDifficultyPeriodStarted = block.number;\n        if (miningTarget < _MINIMUM_TARGET)  \n        {\n            miningTarget = _MINIMUM_TARGET;\n        }\n        if (miningTarget > _MAXIMUM_TARGET)  \n        {\n            miningTarget = _MAXIMUM_TARGET;\n        }\n    }\n2426-function_definition-406-428", method="_reAdjustDifficulty()", type_label=function_definition];
2430 [label="406_ uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n2430-new_variable-407-407", method="_reAdjustDifficulty()", type_label=new_variable];
2440 [label="407_ uint epochsMined = _BLOCKS_PER_READJUSTMENT;\n2440-new_variable-408-408", method="_reAdjustDifficulty()", type_label=new_variable];
2446 [label="408_ uint targetEthBlocksPerDiffPeriod = epochsMined * 60;\n2446-new_variable-409-409", method="_reAdjustDifficulty()", type_label=new_variable];
2454 [label="409_ if_ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod\n2454-if-410-418", method="_reAdjustDifficulty()", type_label=if];
6792 [label="409_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
2459 [label="410_ uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n2459-new_variable-411-411", method="_reAdjustDifficulty()", type_label=new_variable];
2476 [label="411_ uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n2476-new_variable-412-412", method="_reAdjustDifficulty()", type_label=new_variable];
2492 [label="412_ miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));\n2492-expression_statement-413-413", method="_reAdjustDifficulty()", type_label=expression_statement];
2512 [label="414_ uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n2512-new_variable-415-415", method="_reAdjustDifficulty()", type_label=new_variable];
2529 [label="415_ uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\n2529-new_variable-416-416", method="_reAdjustDifficulty()", type_label=new_variable];
2545 [label="416_ miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));\n2545-expression_statement-417-417", method="_reAdjustDifficulty()", type_label=expression_statement];
2564 [label="418_ latestDifficultyPeriodStarted = block.number;\n2564-expression_statement-419-419", method="_reAdjustDifficulty()", type_label=expression_statement];
2570 [label="419_ if_miningTarget < _MINIMUM_TARGET\n2570-if-420-423", method="_reAdjustDifficulty()", type_label=if];
6908 [label="419_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
2575 [label="421_ miningTarget = _MINIMUM_TARGET;\n2575-expression_statement-422-422", method="_reAdjustDifficulty()", type_label=expression_statement];
2579 [label="423_ if_miningTarget > _MAXIMUM_TARGET\n2579-if-424-427", method="_reAdjustDifficulty()", type_label=if];
6917 [label="423_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
2584 [label="425_ miningTarget = _MAXIMUM_TARGET;\n2584-expression_statement-426-426", method="_reAdjustDifficulty()", type_label=expression_statement];
2588 [label="428_ address payable winner_TOD25;\n2588-new_variable-429-429", method="", type_label=new_variable];
2592 [label="429_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n2592-function_definition-430-434", method="play_TOD25(bytes32 guess)", type_label=function_definition];
2600 [label="430_ if\n2600-if-431-433", method="play_TOD25(bytes32 guess)", type_label=if];
6938 [label="430_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
2622 [label="431_ winner_TOD25 = msg.sender;\n2622-expression_statement-432-432", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
2628 [label="434_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n2628-function_definition-435-437", method="getReward_TOD25()", type_label=function_definition];
2633 [label="435_ winner_TOD25.transfer(msg.value);\n2633-expression_statement-436-436", method="getReward_TOD25()", type_label=expression_statement];
2642 [label="437_ function getChallengeNumber() public view returns(bytes32) {\n        return challengeNumber;\n    }\n2642-function_definition-438-440", method="getChallengeNumber()", type_label=function_definition];
2651 [label="438_ return challengeNumber;\n2651-return-439-439", method="getChallengeNumber()", type_label=return];
2653 [label="440_ address payable winner_TOD19;\n2653-new_variable-441-441", method="", type_label=new_variable];
2657 [label="441_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n2657-function_definition-442-446", method="play_TOD19(bytes32 guess)", type_label=function_definition];
2665 [label="442_ if\n2665-if-443-445", method="play_TOD19(bytes32 guess)", type_label=if];
7003 [label="442_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
2687 [label="443_ winner_TOD19 = msg.sender;\n2687-expression_statement-444-444", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
2693 [label="446_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n2693-function_definition-447-449", method="getReward_TOD19()", type_label=function_definition];
2698 [label="447_ winner_TOD19.transfer(msg.value);\n2698-expression_statement-448-448", method="getReward_TOD19()", type_label=expression_statement];
2707 [label="449_ function getMiningDifficulty() public view returns(uint) {\n        return _MAXIMUM_TARGET.div(miningTarget);\n    }\n2707-function_definition-450-452", method="getMiningDifficulty()", type_label=function_definition];
2716 [label="450_ return _MAXIMUM_TARGET.div(miningTarget);\n2716-return-451-451", method="getMiningDifficulty()", type_label=return];
2723 [label="452_ bool claimed_TOD26 = false;\n2723-new_variable-453-453", method="", type_label=new_variable];
2729 [label="453_ address payable owner_TOD26;\n2729-new_variable-454-454", method="", type_label=new_variable];
2733 [label="454_ uint256 reward_TOD26;\n2733-new_variable-455-455", method="", type_label=new_variable];
2737 [label="455_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n2737-function_definition-456-461", method="setReward_TOD26()", type_label=function_definition];
2742 [label="456_ require (!claimed_TOD26);\n2742-expression_statement-457-457", method="setReward_TOD26()", type_label=expression_statement];
2748 [label="457_ require(msg.sender == owner_TOD26);\n2748-expression_statement-458-458", method="setReward_TOD26()", type_label=expression_statement];
2757 [label="458_ owner_TOD26.transfer(reward_TOD26);\n2757-expression_statement-459-459", method="setReward_TOD26()", type_label=expression_statement];
2764 [label="459_ reward_TOD26 = msg.value;\n2764-expression_statement-460-460", method="setReward_TOD26()", type_label=expression_statement];
2770 [label="461_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n2770-function_definition-462-467", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
2778 [label="462_ require (!claimed_TOD26);\n2778-expression_statement-463-463", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2784 [label="463_ require(submission < 10);\n2784-expression_statement-464-464", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2791 [label="464_ msg.sender.transfer(reward_TOD26);\n2791-expression_statement-465-465", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2800 [label="465_ claimed_TOD26 = true;\n2800-expression_statement-466-466", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2805 [label="467_ function getMiningTarget() public view returns(uint) {\n        return miningTarget;\n    }\n2805-function_definition-468-470", method="getMiningTarget()", type_label=function_definition];
2814 [label="468_ return miningTarget;\n2814-return-469-469", method="getMiningTarget()", type_label=return];
2816 [label="470_ bool claimed_TOD20 = false;\n2816-new_variable-471-471", method="", type_label=new_variable];
2822 [label="471_ address payable owner_TOD20;\n2822-new_variable-472-472", method="", type_label=new_variable];
2826 [label="472_ uint256 reward_TOD20;\n2826-new_variable-473-473", method="", type_label=new_variable];
2830 [label="473_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n2830-function_definition-474-479", method="setReward_TOD20()", type_label=function_definition];
2835 [label="474_ require (!claimed_TOD20);\n2835-expression_statement-475-475", method="setReward_TOD20()", type_label=expression_statement];
2841 [label="475_ require(msg.sender == owner_TOD20);\n2841-expression_statement-476-476", method="setReward_TOD20()", type_label=expression_statement];
2850 [label="476_ owner_TOD20.transfer(reward_TOD20);\n2850-expression_statement-477-477", method="setReward_TOD20()", type_label=expression_statement];
2857 [label="477_ reward_TOD20 = msg.value;\n2857-expression_statement-478-478", method="setReward_TOD20()", type_label=expression_statement];
2863 [label="479_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n2863-function_definition-480-485", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
2871 [label="480_ require (!claimed_TOD20);\n2871-expression_statement-481-481", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2877 [label="481_ require(submission < 10);\n2877-expression_statement-482-482", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2884 [label="482_ msg.sender.transfer(reward_TOD20);\n2884-expression_statement-483-483", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2893 [label="483_ claimed_TOD20 = true;\n2893-expression_statement-484-484", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2898 [label="485_ function getMiningReward() public view returns(uint) {\n        return (50 * 10 ** uint(decimals)).div(2 ** rewardEra);\n    }\n2898-function_definition-486-488", method="getMiningReward()", type_label=function_definition];
2907 [label="486_ return (50 * 10 ** uint(decimals)).div(2 ** rewardEra);\n2907-return-487-487", method="getMiningReward()", type_label=return];
2923 [label="488_ bool claimed_TOD32 = false;\n2923-new_variable-489-489", method="", type_label=new_variable];
2929 [label="489_ address payable owner_TOD32;\n2929-new_variable-490-490", method="", type_label=new_variable];
2933 [label="490_ uint256 reward_TOD32;\n2933-new_variable-491-491", method="", type_label=new_variable];
2937 [label="491_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n2937-function_definition-492-497", method="setReward_TOD32()", type_label=function_definition];
2942 [label="492_ require (!claimed_TOD32);\n2942-expression_statement-493-493", method="setReward_TOD32()", type_label=expression_statement];
2948 [label="493_ require(msg.sender == owner_TOD32);\n2948-expression_statement-494-494", method="setReward_TOD32()", type_label=expression_statement];
2957 [label="494_ owner_TOD32.transfer(reward_TOD32);\n2957-expression_statement-495-495", method="setReward_TOD32()", type_label=expression_statement];
2964 [label="495_ reward_TOD32 = msg.value;\n2964-expression_statement-496-496", method="setReward_TOD32()", type_label=expression_statement];
2970 [label="497_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n2970-function_definition-498-503", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
2978 [label="498_ require (!claimed_TOD32);\n2978-expression_statement-499-499", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2984 [label="499_ require(submission < 10);\n2984-expression_statement-500-500", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2991 [label="500_ msg.sender.transfer(reward_TOD32);\n2991-expression_statement-501-501", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
3000 [label="501_ claimed_TOD32 = true;\n3000-expression_statement-502-502", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
3005 [label="503_ function getMintDigest(uint256 nonce, bytes32 challenge_number) public view returns(bytes32 digesttest) {\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n        return digest;\n    }\n3005-function_definition-504-507", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=function_definition];
3023 [label="504_ bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n3023-new_variable-505-505", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=new_variable];
3043 [label="505_ return digest;\n3043-return-506-506", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=return];
3045 [label="507_ bool claimed_TOD38 = false;\n3045-new_variable-508-508", method="", type_label=new_variable];
3051 [label="508_ address payable owner_TOD38;\n3051-new_variable-509-509", method="", type_label=new_variable];
3055 [label="509_ uint256 reward_TOD38;\n3055-new_variable-510-510", method="", type_label=new_variable];
3059 [label="510_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n3059-function_definition-511-516", method="setReward_TOD38()", type_label=function_definition];
3064 [label="511_ require (!claimed_TOD38);\n3064-expression_statement-512-512", method="setReward_TOD38()", type_label=expression_statement];
3070 [label="512_ require(msg.sender == owner_TOD38);\n3070-expression_statement-513-513", method="setReward_TOD38()", type_label=expression_statement];
3079 [label="513_ owner_TOD38.transfer(reward_TOD38);\n3079-expression_statement-514-514", method="setReward_TOD38()", type_label=expression_statement];
3086 [label="514_ reward_TOD38 = msg.value;\n3086-expression_statement-515-515", method="setReward_TOD38()", type_label=expression_statement];
3092 [label="516_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n3092-function_definition-517-522", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
3100 [label="517_ require (!claimed_TOD38);\n3100-expression_statement-518-518", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
3106 [label="518_ require(submission < 10);\n3106-expression_statement-519-519", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
3113 [label="519_ msg.sender.transfer(reward_TOD38);\n3113-expression_statement-520-520", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
3122 [label="520_ claimed_TOD38 = true;\n3122-expression_statement-521-521", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
3127 [label="522_ function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns(bool success) {\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n        if (uint256(digest) > testTarget) revert();\n        return (digest == challenge_digest);\n    }\n3127-function_definition-523-527", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=function_definition];
3153 [label="523_ bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n3153-new_variable-524-524", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=new_variable];
3173 [label="524_ if_uint256(digest) > testTarget\n3173-if-525-525", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=if];
7511 [label="524_ end_if", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=end_if];
3181 [label="525_ return (digest == challenge_digest);\n3181-return-526-526", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=return];
3186 [label="527_ bool claimed_TOD4 = false;\n3186-new_variable-528-528", method="", type_label=new_variable];
3192 [label="528_ address payable owner_TOD4;\n3192-new_variable-529-529", method="", type_label=new_variable];
3196 [label="529_ uint256 reward_TOD4;\n3196-new_variable-530-530", method="", type_label=new_variable];
3200 [label="530_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n3200-function_definition-531-536", method="setReward_TOD4()", type_label=function_definition];
3205 [label="531_ require (!claimed_TOD4);\n3205-expression_statement-532-532", method="setReward_TOD4()", type_label=expression_statement];
3211 [label="532_ require(msg.sender == owner_TOD4);\n3211-expression_statement-533-533", method="setReward_TOD4()", type_label=expression_statement];
3220 [label="533_ owner_TOD4.transfer(reward_TOD4);\n3220-expression_statement-534-534", method="setReward_TOD4()", type_label=expression_statement];
3227 [label="534_ reward_TOD4 = msg.value;\n3227-expression_statement-535-535", method="setReward_TOD4()", type_label=expression_statement];
3233 [label="536_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n3233-function_definition-537-542", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
3241 [label="537_ require (!claimed_TOD4);\n3241-expression_statement-538-538", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
3247 [label="538_ require(submission < 10);\n3247-expression_statement-539-539", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
3254 [label="539_ msg.sender.transfer(reward_TOD4);\n3254-expression_statement-540-540", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
3263 [label="540_ claimed_TOD4 = true;\n3263-expression_statement-541-541", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
3268 [label="542_ function totalSupply() public view returns(uint) {\n        return _totalSupply - balances[address(0)];\n    }\n3268-function_definition-543-545", method="totalSupply()", type_label=function_definition];
3277 [label="543_ return _totalSupply - balances[address(0)];\n3277-return-544-544", method="totalSupply()", type_label=return];
3285 [label="545_ address payable winner_TOD7;\n3285-new_variable-546-546", method="", type_label=new_variable];
3289 [label="546_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n3289-function_definition-547-551", method="play_TOD7(bytes32 guess)", type_label=function_definition];
3297 [label="547_ if\n3297-if-548-550", method="play_TOD7(bytes32 guess)", type_label=if];
7635 [label="547_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
3319 [label="548_ winner_TOD7 = msg.sender;\n3319-expression_statement-549-549", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
3325 [label="551_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n3325-function_definition-552-554", method="getReward_TOD7()", type_label=function_definition];
3330 [label="552_ winner_TOD7.transfer(msg.value);\n3330-expression_statement-553-553", method="getReward_TOD7()", type_label=expression_statement];
3339 [label="554_ function balanceOf(address tokenOwner) public view returns(uint balance) {\n        return balances[tokenOwner];\n    }\n3339-function_definition-555-557", method="balanceOf(address tokenOwner)", type_label=function_definition];
3353 [label="555_ return balances[tokenOwner];\n3353-return-556-556", method="balanceOf(address tokenOwner)", type_label=return];
3357 [label="557_ address payable winner_TOD23;\n3357-new_variable-558-558", method="", type_label=new_variable];
3361 [label="558_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n3361-function_definition-559-563", method="play_TOD23(bytes32 guess)", type_label=function_definition];
3369 [label="559_ if\n3369-if-560-562", method="play_TOD23(bytes32 guess)", type_label=if];
7707 [label="559_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
3391 [label="560_ winner_TOD23 = msg.sender;\n3391-expression_statement-561-561", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
3397 [label="563_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n3397-function_definition-564-566", method="getReward_TOD23()", type_label=function_definition];
3402 [label="564_ winner_TOD23.transfer(msg.value);\n3402-expression_statement-565-565", method="getReward_TOD23()", type_label=expression_statement];
3411 [label="566_ function transfer(address to, uint tokens) public returns(bool success) {\n        uint toBurn = tokens.mul(burnPercent).div(1000);\n        uint toSend = tokens.sub(toBurn);\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(toSend);\n        emit Transfer(msg.sender, to, toSend);\n        balances[address(0)] = balances[address(0)].add(toBurn);\n        emit Transfer(msg.sender, address(0), toBurn);\n        return true;\n    }\n3411-function_definition-567-576", method="transfer(address to,uint tokens)", type_label=function_definition];
3428 [label="567_ uint toBurn = tokens.mul(burnPercent).div(1000);\n3428-new_variable-568-568", method="transfer(address to,uint tokens)", type_label=new_variable];
3444 [label="568_ uint toSend = tokens.sub(toBurn);\n3444-new_variable-569-569", method="transfer(address to,uint tokens)", type_label=new_variable];
3455 [label="569_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n3455-expression_statement-570-570", method="transfer(address to,uint tokens)", type_label=expression_statement];
3472 [label="570_ balances[to] = balances[to].add(toSend);\n3472-expression_statement-571-571", method="transfer(address to,uint tokens)", type_label=expression_statement];
3495 [label="572_ balances[address(0)] = balances[address(0)].add(toBurn);\n3495-expression_statement-573-573", method="transfer(address to,uint tokens)", type_label=expression_statement];
3524 [label="574_ return true;\n3524-return-575-575", method="transfer(address to,uint tokens)", type_label=return];
3527 [label="576_ bool claimed_TOD14 = false;\n3527-new_variable-577-577", method="", type_label=new_variable];
3533 [label="577_ address payable owner_TOD14;\n3533-new_variable-578-578", method="", type_label=new_variable];
3537 [label="578_ uint256 reward_TOD14;\n3537-new_variable-579-579", method="", type_label=new_variable];
3541 [label="579_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n3541-function_definition-580-585", method="setReward_TOD14()", type_label=function_definition];
3546 [label="580_ require (!claimed_TOD14);\n3546-expression_statement-581-581", method="setReward_TOD14()", type_label=expression_statement];
3552 [label="581_ require(msg.sender == owner_TOD14);\n3552-expression_statement-582-582", method="setReward_TOD14()", type_label=expression_statement];
3561 [label="582_ owner_TOD14.transfer(reward_TOD14);\n3561-expression_statement-583-583", method="setReward_TOD14()", type_label=expression_statement];
3568 [label="583_ reward_TOD14 = msg.value;\n3568-expression_statement-584-584", method="setReward_TOD14()", type_label=expression_statement];
3574 [label="585_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n3574-function_definition-586-591", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
3582 [label="586_ require (!claimed_TOD14);\n3582-expression_statement-587-587", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3588 [label="587_ require(submission < 10);\n3588-expression_statement-588-588", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3595 [label="588_ msg.sender.transfer(reward_TOD14);\n3595-expression_statement-589-589", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3604 [label="589_ claimed_TOD14 = true;\n3604-expression_statement-590-590", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3609 [label="591_ function approve(address spender, uint tokens) public returns(bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n3609-function_definition-592-596", method="approve(address spender,uint tokens)", type_label=function_definition];
3626 [label="592_ allowed[msg.sender][spender] = tokens;\n3626-expression_statement-593-593", method="approve(address spender,uint tokens)", type_label=expression_statement];
3646 [label="594_ return true;\n3646-return-595-595", method="approve(address spender,uint tokens)", type_label=return];
3649 [label="596_ bool claimed_TOD30 = false;\n3649-new_variable-597-597", method="", type_label=new_variable];
3655 [label="597_ address payable owner_TOD30;\n3655-new_variable-598-598", method="", type_label=new_variable];
3659 [label="598_ uint256 reward_TOD30;\n3659-new_variable-599-599", method="", type_label=new_variable];
3663 [label="599_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n3663-function_definition-600-605", method="setReward_TOD30()", type_label=function_definition];
3668 [label="600_ require (!claimed_TOD30);\n3668-expression_statement-601-601", method="setReward_TOD30()", type_label=expression_statement];
3674 [label="601_ require(msg.sender == owner_TOD30);\n3674-expression_statement-602-602", method="setReward_TOD30()", type_label=expression_statement];
3683 [label="602_ owner_TOD30.transfer(reward_TOD30);\n3683-expression_statement-603-603", method="setReward_TOD30()", type_label=expression_statement];
3690 [label="603_ reward_TOD30 = msg.value;\n3690-expression_statement-604-604", method="setReward_TOD30()", type_label=expression_statement];
3696 [label="605_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n3696-function_definition-606-611", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
3704 [label="606_ require (!claimed_TOD30);\n3704-expression_statement-607-607", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3710 [label="607_ require(submission < 10);\n3710-expression_statement-608-608", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3717 [label="608_ msg.sender.transfer(reward_TOD30);\n3717-expression_statement-609-609", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3726 [label="609_ claimed_TOD30 = true;\n3726-expression_statement-610-610", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3731 [label="611_ function transferFrom(address from, address to, uint tokens) public returns(bool success) {\n        uint toBurn = tokens.mul(burnPercent).div(1000);\n        uint toSend = tokens.sub(toBurn);\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(toSend);\n        emit Transfer(from, to, toSend);\n        balances[address(0)] = balances[address(0)].add(toBurn);\n        emit Transfer(from, address(0), toBurn);\n        return true;\n    }\n3731-function_definition-612-622", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
3752 [label="612_ uint toBurn = tokens.mul(burnPercent).div(1000);\n3752-new_variable-613-613", method="transferFrom(address from,address to,uint tokens)", type_label=new_variable];
3768 [label="613_ uint toSend = tokens.sub(toBurn);\n3768-new_variable-614-614", method="transferFrom(address from,address to,uint tokens)", type_label=new_variable];
3779 [label="614_ balances[from] = balances[from].sub(tokens);\n3779-expression_statement-615-615", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
3792 [label="615_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n3792-expression_statement-616-616", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
3813 [label="616_ balances[to] = balances[to].add(toSend);\n3813-expression_statement-617-617", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
3834 [label="618_ balances[address(0)] = balances[address(0)].add(toBurn);\n3834-expression_statement-619-619", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
3861 [label="620_ return true;\n3861-return-621-621", method="transferFrom(address from,address to,uint tokens)", type_label=return];
3864 [label="622_ bool claimed_TOD8 = false;\n3864-new_variable-623-623", method="", type_label=new_variable];
3870 [label="623_ address payable owner_TOD8;\n3870-new_variable-624-624", method="", type_label=new_variable];
3874 [label="624_ uint256 reward_TOD8;\n3874-new_variable-625-625", method="", type_label=new_variable];
3878 [label="625_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n3878-function_definition-626-631", method="setReward_TOD8()", type_label=function_definition];
3883 [label="626_ require (!claimed_TOD8);\n3883-expression_statement-627-627", method="setReward_TOD8()", type_label=expression_statement];
3889 [label="627_ require(msg.sender == owner_TOD8);\n3889-expression_statement-628-628", method="setReward_TOD8()", type_label=expression_statement];
3898 [label="628_ owner_TOD8.transfer(reward_TOD8);\n3898-expression_statement-629-629", method="setReward_TOD8()", type_label=expression_statement];
3905 [label="629_ reward_TOD8 = msg.value;\n3905-expression_statement-630-630", method="setReward_TOD8()", type_label=expression_statement];
3911 [label="631_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n3911-function_definition-632-637", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
3919 [label="632_ require (!claimed_TOD8);\n3919-expression_statement-633-633", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3925 [label="633_ require(submission < 10);\n3925-expression_statement-634-634", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3932 [label="634_ msg.sender.transfer(reward_TOD8);\n3932-expression_statement-635-635", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3941 [label="635_ claimed_TOD8 = true;\n3941-expression_statement-636-636", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3946 [label="637_ function allowance(address tokenOwner, address spender) public view returns(uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n3946-function_definition-638-640", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
3964 [label="638_ return allowed[tokenOwner][spender];\n3964-return-639-639", method="allowance(address tokenOwner,address spender)", type_label=return];
3970 [label="640_ address payable winner_TOD39;\n3970-new_variable-641-641", method="", type_label=new_variable];
3974 [label="641_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n3974-function_definition-642-646", method="play_TOD39(bytes32 guess)", type_label=function_definition];
3982 [label="642_ if\n3982-if-643-645", method="play_TOD39(bytes32 guess)", type_label=if];
8320 [label="642_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
4004 [label="643_ winner_TOD39 = msg.sender;\n4004-expression_statement-644-644", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
4010 [label="646_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n4010-function_definition-647-649", method="getReward_TOD39()", type_label=function_definition];
4015 [label="647_ winner_TOD39.transfer(msg.value);\n4015-expression_statement-648-648", method="getReward_TOD39()", type_label=expression_statement];
4024 [label="649_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns(bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n4024-function_definition-650-655", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
4045 [label="650_ allowed[msg.sender][spender] = tokens;\n4045-expression_statement-651-651", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
4065 [label="652_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n4065-expression_statement-653-653", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
4085 [label="653_ return true;\n4085-return-654-654", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
4088 [label="655_ bool claimed_TOD36 = false;\n4088-new_variable-656-656", method="", type_label=new_variable];
4094 [label="656_ address payable owner_TOD36;\n4094-new_variable-657-657", method="", type_label=new_variable];
4098 [label="657_ uint256 reward_TOD36;\n4098-new_variable-658-658", method="", type_label=new_variable];
4102 [label="658_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n4102-function_definition-659-664", method="setReward_TOD36()", type_label=function_definition];
4107 [label="659_ require (!claimed_TOD36);\n4107-expression_statement-660-660", method="setReward_TOD36()", type_label=expression_statement];
4113 [label="660_ require(msg.sender == owner_TOD36);\n4113-expression_statement-661-661", method="setReward_TOD36()", type_label=expression_statement];
4122 [label="661_ owner_TOD36.transfer(reward_TOD36);\n4122-expression_statement-662-662", method="setReward_TOD36()", type_label=expression_statement];
4129 [label="662_ reward_TOD36 = msg.value;\n4129-expression_statement-663-663", method="setReward_TOD36()", type_label=expression_statement];
4135 [label="664_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n4135-function_definition-665-670", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
4143 [label="665_ require (!claimed_TOD36);\n4143-expression_statement-666-666", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
4149 [label="666_ require(submission < 10);\n4149-expression_statement-667-667", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
4156 [label="667_ msg.sender.transfer(reward_TOD36);\n4156-expression_statement-668-668", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
4165 [label="668_ claimed_TOD36 = true;\n4165-expression_statement-669-669", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
4176 [label="673_ address payable winner_TOD35;\n4176-new_variable-674-674", method="", type_label=new_variable];
4180 [label="674_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n4180-function_definition-675-679", method="play_TOD35(bytes32 guess)", type_label=function_definition];
4188 [label="675_ if\n4188-if-676-678", method="play_TOD35(bytes32 guess)", type_label=if];
8526 [label="675_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
4210 [label="676_ winner_TOD35 = msg.sender;\n4210-expression_statement-677-677", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
4216 [label="679_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n4216-function_definition-680-682", method="getReward_TOD35()", type_label=function_definition];
4221 [label="680_ winner_TOD35.transfer(msg.value);\n4221-expression_statement-681-681", method="getReward_TOD35()", type_label=expression_statement];
4230 [label="682_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns(bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n4230-function_definition-683-685", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
4241 [label="682_ onlyOwner\n4241-expression_statement-683-683", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
4249 [label="683_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n4249-return-684-684", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
4261 [label="685_ bool claimed_TOD40 = false;\n4261-new_variable-686-686", method="", type_label=new_variable];
4267 [label="686_ address payable owner_TOD40;\n4267-new_variable-687-687", method="", type_label=new_variable];
4271 [label="687_ uint256 reward_TOD40;\n4271-new_variable-688-688", method="", type_label=new_variable];
4275 [label="688_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n4275-function_definition-689-694", method="setReward_TOD40()", type_label=function_definition];
4280 [label="689_ require (!claimed_TOD40);\n4280-expression_statement-690-690", method="setReward_TOD40()", type_label=expression_statement];
4286 [label="690_ require(msg.sender == owner_TOD40);\n4286-expression_statement-691-691", method="setReward_TOD40()", type_label=expression_statement];
4295 [label="691_ owner_TOD40.transfer(reward_TOD40);\n4295-expression_statement-692-692", method="setReward_TOD40()", type_label=expression_statement];
4302 [label="692_ reward_TOD40 = msg.value;\n4302-expression_statement-693-693", method="setReward_TOD40()", type_label=expression_statement];
4308 [label="694_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n4308-function_definition-695-700", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
4316 [label="695_ require (!claimed_TOD40);\n4316-expression_statement-696-696", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
4322 [label="696_ require(submission < 10);\n4322-expression_statement-697-697", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
4329 [label="697_ msg.sender.transfer(reward_TOD40);\n4329-expression_statement-698-698", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
4338 [label="698_ claimed_TOD40 = true;\n4338-expression_statement-699-699", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 168  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
164 -> 4502  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4502 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 4502  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
183 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
217 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
284 -> 288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
297 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
312 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
325 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
381 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
389 -> 411  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
389 -> 4727  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4727 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 4727  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
417 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
672 -> 681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
694 -> 702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
708 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
733 -> 741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
741 -> 763  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
741 -> 5079  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5079 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 5079  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
769 -> 774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
801 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 831  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
809 -> 5147  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5147 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
831 -> 5147  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
837 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
899 -> 921  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
899 -> 5237  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5237 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 5237  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
927 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
958 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
966 -> 988  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
966 -> 5304  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5304 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 5304  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
994 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1030 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1060  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1038 -> 5376  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5376 -> 1066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1060 -> 5376  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1066 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1083 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1094 -> 1104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1108 -> 1114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1114 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1122 -> 1127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1155 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 1169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1169 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 1185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1190 -> 1194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1209 -> 1213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1223 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1253  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1231 -> 5569  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5569 -> 1259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 5569  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1259 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1292 -> 1297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 1302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1302 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 1312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1312 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1317 -> 1322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 1336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1336 -> 1344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1344 -> 1349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1349 -> 1354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1354 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1359 -> 1364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1364 -> 1369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1369 -> 1374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1374 -> 1380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 1384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1388 -> 1393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1393 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1408 -> 1415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 1429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1435 -> 1442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1442 -> 1451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1456 -> 1461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1473 -> 1495  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1473 -> 5811  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5811 -> 1501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1495 -> 5811  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1501 -> 1506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1515 -> 1521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1521 -> 1527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1527 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1535 -> 1540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1540 -> 1546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1546 -> 1555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1555 -> 1562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 1576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1576 -> 1582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1582 -> 1589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1589 -> 1598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1603 -> 1609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1609 -> 1615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1615 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1623 -> 1628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1628 -> 1634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1634 -> 1643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1643 -> 1650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1656 -> 1664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1664 -> 1670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1670 -> 1677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1677 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1691 -> 1696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1696 -> 1702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1702 -> 1706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1710 -> 1715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1715 -> 1721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1721 -> 1730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1730 -> 1737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1743 -> 1751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1751 -> 1757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1757 -> 1764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1764 -> 1773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1778 -> 1784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1788 -> 1796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1796 -> 1818  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1796 -> 6134  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6134 -> 1824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1818 -> 6134  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1824 -> 1829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1838 -> 1846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1850 -> 1858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1858 -> 1880  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1858 -> 6196  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6196 -> 1886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1880 -> 6196  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1886 -> 1891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1900 -> 1905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1909 -> 1917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1917 -> 1939  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1917 -> 6255  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6255 -> 1945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1939 -> 6255  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1945 -> 1950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1981 -> 1986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1986 -> 1991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1991 -> 1995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1995 -> 2005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2005 -> 6343  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2009 -> 2014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2014 -> 2018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2018 -> 2022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2022 -> 2031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2031 -> 2035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2035 -> 2041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2041 -> 2045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2052 -> 2060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2060 -> 2082  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2060 -> 6398  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6398 -> 2088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2082 -> 6398  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2088 -> 2093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2102 -> 2119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2119 -> 2139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2139 -> 6477  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2145 -> 6483  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2153 -> 2161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2161 -> 2167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2167 -> 6505  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2173 -> 2180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2180 -> 2197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2197 -> 2206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2206 -> 2213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2213 -> 2219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2219 -> 2223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2223 -> 2229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2244 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2251 -> 2259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2259 -> 2281  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2259 -> 6597  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6597 -> 2287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2281 -> 6597  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2287 -> 2292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2301 -> 2305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2305 -> 2320  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2305 -> 6643  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6643 -> 2326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2320 -> 6643  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2326 -> 2342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2342 -> 2351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2351 -> 2358  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2351 -> 6689  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6689 -> 2361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2358 -> 6689  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2376 -> 2384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2384 -> 2406  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2384 -> 6722  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6722 -> 2412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2406 -> 6722  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2412 -> 2417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2426 -> 2430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2430 -> 2440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2440 -> 2446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2446 -> 2454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2454 -> 2459  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2454 -> 2512  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6792 -> 2564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2459 -> 2476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2476 -> 2492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2492 -> 6792  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2512 -> 2529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2529 -> 2545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2545 -> 6792  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2564 -> 2570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2570 -> 2575  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2570 -> 6908  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6908 -> 2579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2575 -> 6908  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2579 -> 2584  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2579 -> 6917  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6917 -> 2588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2584 -> 6917  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2592 -> 2600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2600 -> 2622  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2600 -> 6938  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6938 -> 2628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2622 -> 6938  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2628 -> 2633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2642 -> 2651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2651 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2657 -> 2665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2665 -> 2687  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2665 -> 7003  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7003 -> 2693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2687 -> 7003  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2693 -> 2698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2707 -> 2716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2716 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2723 -> 2729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2729 -> 2733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2737 -> 2742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2742 -> 2748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2748 -> 2757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2757 -> 2764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2770 -> 2778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2778 -> 2784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2784 -> 2791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2791 -> 2800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2805 -> 2814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2814 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2816 -> 2822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2822 -> 2826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2830 -> 2835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2835 -> 2841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2841 -> 2850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2850 -> 2857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2863 -> 2871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2871 -> 2877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2877 -> 2884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2884 -> 2893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2898 -> 2907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2907 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2923 -> 2929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2929 -> 2933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2937 -> 2942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2942 -> 2948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2948 -> 2957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2957 -> 2964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2970 -> 2978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2978 -> 2984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2984 -> 2991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2991 -> 3000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3005 -> 3023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3023 -> 3043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3043 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3045 -> 3051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3051 -> 3055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3059 -> 3064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3064 -> 3070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3070 -> 3079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3079 -> 3086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3092 -> 3100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3100 -> 3106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3106 -> 3113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3113 -> 3122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3127 -> 3153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3153 -> 3173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3173 -> 7511  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3181 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3186 -> 3192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3192 -> 3196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3200 -> 3205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3205 -> 3211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3211 -> 3220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3220 -> 3227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3233 -> 3241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3241 -> 3247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3247 -> 3254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3254 -> 3263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3268 -> 3277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3277 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3289 -> 3297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3297 -> 3319  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3297 -> 7635  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7635 -> 3325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3319 -> 7635  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3325 -> 3330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3339 -> 3353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3353 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3361 -> 3369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3369 -> 3391  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3369 -> 7707  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7707 -> 3397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3391 -> 7707  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3397 -> 3402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3411 -> 3428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3428 -> 3444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3444 -> 3455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3455 -> 3472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3524 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3527 -> 3533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3533 -> 3537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3541 -> 3546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3546 -> 3552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3552 -> 3561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3561 -> 3568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3574 -> 3582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3582 -> 3588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3588 -> 3595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3595 -> 3604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3609 -> 3626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3646 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3649 -> 3655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3655 -> 3659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3663 -> 3668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3668 -> 3674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3674 -> 3683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3683 -> 3690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3696 -> 3704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3704 -> 3710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3710 -> 3717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3717 -> 3726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3731 -> 3752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3752 -> 3768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3768 -> 3779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3779 -> 3792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3792 -> 3813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3861 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3864 -> 3870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3870 -> 3874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3878 -> 3883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3883 -> 3889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3889 -> 3898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3898 -> 3905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3911 -> 3919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3919 -> 3925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3925 -> 3932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3932 -> 3941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3946 -> 3964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3964 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3974 -> 3982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3982 -> 4004  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3982 -> 8320  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8320 -> 4010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4004 -> 8320  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4010 -> 4015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4024 -> 4045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4065 -> 4085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4085 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4088 -> 4094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4094 -> 4098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4102 -> 4107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4107 -> 4113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4113 -> 4122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4122 -> 4129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4135 -> 4143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4143 -> 4149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4149 -> 4156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4156 -> 4165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4180 -> 4188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4188 -> 4210  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4188 -> 8526  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8526 -> 4216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4210 -> 8526  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4216 -> 4221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4230 -> 4249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4249 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4261 -> 4267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4267 -> 4271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4275 -> 4280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4280 -> 4286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4286 -> 4295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4295 -> 4302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4308 -> 4316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4316 -> 4322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4322 -> 4329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4329 -> 4338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
