digraph  {
13 [label="3_ address payable winner_TOD21;\n13-new_variable-4-4", method="", type_label=new_variable];
17 [label="4_ function play_TOD21(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD21 = msg.sender;\n        }\n    }\n17-function_definition-5-9", method="play_TOD21(bytes32 guess)", type_label=function_definition];
25 [label="5_ if\n25-if-6-8", method="play_TOD21(bytes32 guess)", type_label=if];
2651 [label="5_ end_if", method="play_TOD21(bytes32 guess)", type_label=end_if];
47 [label="6_ winner_TOD21 = msg.sender;\n47-expression_statement-7-7", method="play_TOD21(bytes32 guess)", type_label=expression_statement];
53 [label="9_ function getReward_TOD21() payable public{\n       winner_TOD21.transfer(msg.value);\n    }\n53-function_definition-10-12", method="getReward_TOD21()", type_label=function_definition];
58 [label="10_ winner_TOD21.transfer(msg.value);\n58-expression_statement-11-11", method="getReward_TOD21()", type_label=expression_statement];
67 [label="12_ bool private stopped;\n67-new_variable-13-13", method="", type_label=new_variable];
72 [label="13_ bool claimed_TOD10 = false;\n72-new_variable-14-14", method="", type_label=new_variable];
78 [label="14_ address payable owner_TOD10;\n78-new_variable-15-15", method="", type_label=new_variable];
82 [label="15_ uint256 reward_TOD10;\n82-new_variable-16-16", method="", type_label=new_variable];
86 [label="16_ function setReward_TOD10() public payable {\n        require (!claimed_TOD10);\n        require(msg.sender == owner_TOD10);\n        owner_TOD10.transfer(reward_TOD10);\n        reward_TOD10 = msg.value;\n    }\n86-function_definition-17-22", method="setReward_TOD10()", type_label=function_definition];
91 [label="17_ require (!claimed_TOD10);\n91-expression_statement-18-18", method="setReward_TOD10()", type_label=expression_statement];
97 [label="18_ require(msg.sender == owner_TOD10);\n97-expression_statement-19-19", method="setReward_TOD10()", type_label=expression_statement];
106 [label="19_ owner_TOD10.transfer(reward_TOD10);\n106-expression_statement-20-20", method="setReward_TOD10()", type_label=expression_statement];
113 [label="20_ reward_TOD10 = msg.value;\n113-expression_statement-21-21", method="setReward_TOD10()", type_label=expression_statement];
119 [label="22_ function claimReward_TOD10(uint256 submission) public {\n        require (!claimed_TOD10);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD10);\n        claimed_TOD10 = true;\n    }\n119-function_definition-23-28", method="claimReward_TOD10(uint256 submission)", type_label=function_definition];
127 [label="23_ require (!claimed_TOD10);\n127-expression_statement-24-24", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
133 [label="24_ require(submission < 10);\n133-expression_statement-25-25", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
140 [label="25_ msg.sender.transfer(reward_TOD10);\n140-expression_statement-26-26", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
149 [label="26_ claimed_TOD10 = true;\n149-expression_statement-27-27", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
154 [label="28_ address private _owner;\n154-new_variable-29-29", method="", type_label=new_variable];
159 [label="29_ bool claimed_TOD22 = false;\n159-new_variable-30-30", method="", type_label=new_variable];
165 [label="30_ address payable owner_TOD22;\n165-new_variable-31-31", method="", type_label=new_variable];
169 [label="31_ uint256 reward_TOD22;\n169-new_variable-32-32", method="", type_label=new_variable];
173 [label="32_ function setReward_TOD22() public payable {\n        require (!claimed_TOD22);\n        require(msg.sender == owner_TOD22);\n        owner_TOD22.transfer(reward_TOD22);\n        reward_TOD22 = msg.value;\n    }\n173-function_definition-33-38", method="setReward_TOD22()", type_label=function_definition];
178 [label="33_ require (!claimed_TOD22);\n178-expression_statement-34-34", method="setReward_TOD22()", type_label=expression_statement];
184 [label="34_ require(msg.sender == owner_TOD22);\n184-expression_statement-35-35", method="setReward_TOD22()", type_label=expression_statement];
193 [label="35_ owner_TOD22.transfer(reward_TOD22);\n193-expression_statement-36-36", method="setReward_TOD22()", type_label=expression_statement];
200 [label="36_ reward_TOD22 = msg.value;\n200-expression_statement-37-37", method="setReward_TOD22()", type_label=expression_statement];
206 [label="38_ function claimReward_TOD22(uint256 submission) public {\n        require (!claimed_TOD22);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD22);\n        claimed_TOD22 = true;\n    }\n206-function_definition-39-44", method="claimReward_TOD22(uint256 submission)", type_label=function_definition];
214 [label="39_ require (!claimed_TOD22);\n214-expression_statement-40-40", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
220 [label="40_ require(submission < 10);\n220-expression_statement-41-41", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
227 [label="41_ msg.sender.transfer(reward_TOD22);\n227-expression_statement-42-42", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
236 [label="42_ claimed_TOD22 = true;\n236-expression_statement-43-43", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
241 [label="44_ address private _master;\n241-new_variable-45-45", method="", type_label=new_variable];
246 [label="45_ bool claimed_TOD36 = false;\n246-new_variable-46-46", method="", type_label=new_variable];
252 [label="46_ address payable owner_TOD36;\n252-new_variable-47-47", method="", type_label=new_variable];
256 [label="47_ uint256 reward_TOD36;\n256-new_variable-48-48", method="", type_label=new_variable];
260 [label="48_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n260-function_definition-49-54", method="setReward_TOD36()", type_label=function_definition];
265 [label="49_ require (!claimed_TOD36);\n265-expression_statement-50-50", method="setReward_TOD36()", type_label=expression_statement];
271 [label="50_ require(msg.sender == owner_TOD36);\n271-expression_statement-51-51", method="setReward_TOD36()", type_label=expression_statement];
280 [label="51_ owner_TOD36.transfer(reward_TOD36);\n280-expression_statement-52-52", method="setReward_TOD36()", type_label=expression_statement];
287 [label="52_ reward_TOD36 = msg.value;\n287-expression_statement-53-53", method="setReward_TOD36()", type_label=expression_statement];
293 [label="54_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n293-function_definition-55-60", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
301 [label="55_ require (!claimed_TOD36);\n301-expression_statement-56-56", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
307 [label="56_ require(submission < 10);\n307-expression_statement-57-57", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
314 [label="57_ msg.sender.transfer(reward_TOD36);\n314-expression_statement-58-58", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
323 [label="58_ claimed_TOD36 = true;\n323-expression_statement-59-59", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
330 [label="61_ address payable winner_TOD35;\n330-new_variable-62-62", method="", type_label=new_variable];
334 [label="62_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n334-function_definition-63-67", method="play_TOD35(bytes32 guess)", type_label=function_definition];
342 [label="63_ if\n342-if-64-66", method="play_TOD35(bytes32 guess)", type_label=if];
2968 [label="63_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
364 [label="64_ winner_TOD35 = msg.sender;\n364-expression_statement-65-65", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
370 [label="67_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n370-function_definition-68-70", method="getReward_TOD35()", type_label=function_definition];
375 [label="68_ winner_TOD35.transfer(msg.value);\n375-expression_statement-69-69", method="getReward_TOD35()", type_label=expression_statement];
386 [label="71_ bool claimed_TOD40 = false;\n386-new_variable-72-72", method="", type_label=new_variable];
392 [label="72_ address payable owner_TOD40;\n392-new_variable-73-73", method="", type_label=new_variable];
396 [label="73_ uint256 reward_TOD40;\n396-new_variable-74-74", method="", type_label=new_variable];
400 [label="74_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n400-function_definition-75-80", method="setReward_TOD40()", type_label=function_definition];
405 [label="75_ require (!claimed_TOD40);\n405-expression_statement-76-76", method="setReward_TOD40()", type_label=expression_statement];
411 [label="76_ require(msg.sender == owner_TOD40);\n411-expression_statement-77-77", method="setReward_TOD40()", type_label=expression_statement];
420 [label="77_ owner_TOD40.transfer(reward_TOD40);\n420-expression_statement-78-78", method="setReward_TOD40()", type_label=expression_statement];
427 [label="78_ reward_TOD40 = msg.value;\n427-expression_statement-79-79", method="setReward_TOD40()", type_label=expression_statement];
433 [label="80_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n433-function_definition-81-86", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
441 [label="81_ require (!claimed_TOD40);\n441-expression_statement-82-82", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
447 [label="82_ require(submission < 10);\n447-expression_statement-83-83", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
454 [label="83_ msg.sender.transfer(reward_TOD40);\n454-expression_statement-84-84", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
463 [label="84_ claimed_TOD40 = true;\n463-expression_statement-85-85", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
478 [label="87_ address payable winner_TOD33;\n478-new_variable-88-88", method="", type_label=new_variable];
482 [label="88_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n482-function_definition-89-93", method="play_TOD33(bytes32 guess)", type_label=function_definition];
490 [label="89_ if\n490-if-90-92", method="play_TOD33(bytes32 guess)", type_label=if];
3116 [label="89_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
512 [label="90_ winner_TOD33 = msg.sender;\n512-expression_statement-91-91", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
518 [label="93_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n518-function_definition-94-96", method="getReward_TOD33()", type_label=function_definition];
523 [label="94_ winner_TOD33.transfer(msg.value);\n523-expression_statement-95-95", method="getReward_TOD33()", type_label=expression_statement];
544 [label="99_ stopped = false;\n544-expression_statement-100-100", method="", type_label=expression_statement];
549 [label="100_ _owner = msg.sender;\n549-expression_statement-101-101", method="", type_label=expression_statement];
555 [label="101_ _master = msg.sender;\n555-expression_statement-102-102", method="", type_label=expression_statement];
577 [label="105_ address payable winner_TOD1;\n577-new_variable-106-106", method="", type_label=new_variable];
581 [label="106_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n581-function_definition-107-111", method="play_TOD1(bytes32 guess)", type_label=function_definition];
589 [label="107_ if\n589-if-108-110", method="play_TOD1(bytes32 guess)", type_label=if];
3215 [label="107_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
611 [label="108_ winner_TOD1 = msg.sender;\n611-expression_statement-109-109", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
617 [label="111_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n617-function_definition-112-114", method="getReward_TOD1()", type_label=function_definition];
622 [label="112_ winner_TOD1.transfer(msg.value);\n622-expression_statement-113-113", method="getReward_TOD1()", type_label=expression_statement];
631 [label="114_ function owner() public view returns (address)\n    {\n        return _owner;\n    }\n631-function_definition-115-118", method="owner()", type_label=function_definition];
640 [label="116_ return _owner;\n640-return-117-117", method="owner()", type_label=return];
642 [label="118_ bool claimed_TOD2 = false;\n642-new_variable-119-119", method="", type_label=new_variable];
648 [label="119_ address payable owner_TOD2;\n648-new_variable-120-120", method="", type_label=new_variable];
652 [label="120_ uint256 reward_TOD2;\n652-new_variable-121-121", method="", type_label=new_variable];
656 [label="121_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n656-function_definition-122-127", method="setReward_TOD2()", type_label=function_definition];
661 [label="122_ require (!claimed_TOD2);\n661-expression_statement-123-123", method="setReward_TOD2()", type_label=expression_statement];
667 [label="123_ require(msg.sender == owner_TOD2);\n667-expression_statement-124-124", method="setReward_TOD2()", type_label=expression_statement];
676 [label="124_ owner_TOD2.transfer(reward_TOD2);\n676-expression_statement-125-125", method="setReward_TOD2()", type_label=expression_statement];
683 [label="125_ reward_TOD2 = msg.value;\n683-expression_statement-126-126", method="setReward_TOD2()", type_label=expression_statement];
689 [label="127_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n689-function_definition-128-133", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
697 [label="128_ require (!claimed_TOD2);\n697-expression_statement-129-129", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
703 [label="129_ require(submission < 10);\n703-expression_statement-130-130", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
710 [label="130_ msg.sender.transfer(reward_TOD2);\n710-expression_statement-131-131", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
719 [label="131_ claimed_TOD2 = true;\n719-expression_statement-132-132", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
724 [label="133_ function master() public view returns (address)\n    {\n        return _master;\n    }\n724-function_definition-134-137", method="master()", type_label=function_definition];
733 [label="135_ return _master;\n733-return-136-136", method="master()", type_label=return];
735 [label="137_ address payable winner_TOD17;\n735-new_variable-138-138", method="", type_label=new_variable];
739 [label="138_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n739-function_definition-139-143", method="play_TOD17(bytes32 guess)", type_label=function_definition];
747 [label="139_ if\n747-if-140-142", method="play_TOD17(bytes32 guess)", type_label=if];
3373 [label="139_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
769 [label="140_ winner_TOD17 = msg.sender;\n769-expression_statement-141-141", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
775 [label="143_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n775-function_definition-144-146", method="getReward_TOD17()", type_label=function_definition];
780 [label="144_ winner_TOD17.transfer(msg.value);\n780-expression_statement-145-145", method="getReward_TOD17()", type_label=expression_statement];
789 [label="146_ modifier onlyOwner()\n    {\n        require(isOwner());\n        _;\n    }\n789-expression_statement-147-151", method="", type_label=expression_statement];
792 [label="148_ require(isOwner());\n792-expression_statement-149-149", method="", type_label=expression_statement];
798 [label="149_ _;\n798-expression_statement-150-150", method="", type_label=expression_statement];
800 [label="151_ modifier onlyMaster()\n    {\n        require(isMaster() || isOwner());\n        _;\n    }\n800-expression_statement-152-156", method="", type_label=expression_statement];
803 [label="153_ require(isMaster() || isOwner());\n803-expression_statement-154-154", method="", type_label=expression_statement];
812 [label="154_ _;\n812-expression_statement-155-155", method="", type_label=expression_statement];
814 [label="156_ modifier onlyWhenNotStopped()\n    {\n        require(!isStopped());\n        _;\n    }\n814-expression_statement-157-161", method="", type_label=expression_statement];
817 [label="158_ require(!isStopped());\n817-expression_statement-159-159", method="", type_label=expression_statement];
824 [label="159_ _;\n824-expression_statement-160-160", method="", type_label=expression_statement];
826 [label="161_ function isOwner() public view returns (bool)\n    {\n        return msg.sender == _owner;\n    }\n826-function_definition-162-165", method="isOwner()", type_label=function_definition];
835 [label="163_ return msg.sender == _owner;\n835-return-164-164", method="isOwner()", type_label=return];
841 [label="165_ address payable winner_TOD37;\n841-new_variable-166-166", method="", type_label=new_variable];
845 [label="166_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n845-function_definition-167-171", method="play_TOD37(bytes32 guess)", type_label=function_definition];
853 [label="167_ if\n853-if-168-170", method="play_TOD37(bytes32 guess)", type_label=if];
3479 [label="167_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
875 [label="168_ winner_TOD37 = msg.sender;\n875-expression_statement-169-169", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
881 [label="171_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n881-function_definition-172-174", method="getReward_TOD37()", type_label=function_definition];
886 [label="172_ winner_TOD37.transfer(msg.value);\n886-expression_statement-173-173", method="getReward_TOD37()", type_label=expression_statement];
895 [label="174_ function isMaster() public view returns (bool)\n    {\n        return msg.sender == _master;\n    }\n895-function_definition-175-178", method="isMaster()", type_label=function_definition];
904 [label="176_ return msg.sender == _master;\n904-return-177-177", method="isMaster()", type_label=return];
910 [label="178_ address payable winner_TOD3;\n910-new_variable-179-179", method="", type_label=new_variable];
914 [label="179_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n914-function_definition-180-184", method="play_TOD3(bytes32 guess)", type_label=function_definition];
922 [label="180_ if\n922-if-181-183", method="play_TOD3(bytes32 guess)", type_label=if];
3548 [label="180_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
944 [label="181_ winner_TOD3 = msg.sender;\n944-expression_statement-182-182", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
950 [label="184_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n950-function_definition-185-187", method="getReward_TOD3()", type_label=function_definition];
955 [label="185_ winner_TOD3.transfer(msg.value);\n955-expression_statement-186-186", method="getReward_TOD3()", type_label=expression_statement];
964 [label="187_ function transferOwnership(address newOwner) external onlyOwner\n    {\n        _transferOwnership(newOwner);\n    }\n964-function_definition-188-191", method="transferOwnership(address newOwner)", type_label=function_definition];
971 [label="187_ onlyOwner\n971-expression_statement-188-188", method="transferOwnership(address newOwner)", type_label=expression_statement];
974 [label="189_ _transferOwnership(newOwner);\n974-expression_statement-190-190", method="transferOwnership(address newOwner)", type_label=expression_statement];
979 [label="191_ address payable winner_TOD9;\n979-new_variable-192-192", method="", type_label=new_variable];
983 [label="192_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n983-function_definition-193-197", method="play_TOD9(bytes32 guess)", type_label=function_definition];
991 [label="193_ if\n991-if-194-196", method="play_TOD9(bytes32 guess)", type_label=if];
3617 [label="193_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
1013 [label="194_ winner_TOD9 = msg.sender;\n1013-expression_statement-195-195", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
1019 [label="197_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n1019-function_definition-198-200", method="getReward_TOD9()", type_label=function_definition];
1024 [label="198_ winner_TOD9.transfer(msg.value);\n1024-expression_statement-199-199", method="getReward_TOD9()", type_label=expression_statement];
1033 [label="200_ function transferMasterRole(address newMaster) external onlyOwner\n    {\n        _transferMasterRole(newMaster);\n    }\n1033-function_definition-201-204", method="transferMasterRole(address newMaster)", type_label=function_definition];
1040 [label="200_ onlyOwner\n1040-expression_statement-201-201", method="transferMasterRole(address newMaster)", type_label=expression_statement];
1043 [label="202_ _transferMasterRole(newMaster);\n1043-expression_statement-203-203", method="transferMasterRole(address newMaster)", type_label=expression_statement];
1048 [label="204_ address payable winner_TOD25;\n1048-new_variable-205-205", method="", type_label=new_variable];
1052 [label="205_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n1052-function_definition-206-210", method="play_TOD25(bytes32 guess)", type_label=function_definition];
1060 [label="206_ if\n1060-if-207-209", method="play_TOD25(bytes32 guess)", type_label=if];
3686 [label="206_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
1082 [label="207_ winner_TOD25 = msg.sender;\n1082-expression_statement-208-208", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
1088 [label="210_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n1088-function_definition-211-213", method="getReward_TOD25()", type_label=function_definition];
1093 [label="211_ winner_TOD25.transfer(msg.value);\n1093-expression_statement-212-212", method="getReward_TOD25()", type_label=expression_statement];
1102 [label="213_ function isStopped() public view returns (bool)\n    {\n        return stopped;\n    }\n1102-function_definition-214-217", method="isStopped()", type_label=function_definition];
1111 [label="215_ return stopped;\n1111-return-216-216", method="isStopped()", type_label=return];
1113 [label="217_ address payable winner_TOD19;\n1113-new_variable-218-218", method="", type_label=new_variable];
1117 [label="218_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n1117-function_definition-219-223", method="play_TOD19(bytes32 guess)", type_label=function_definition];
1125 [label="219_ if\n1125-if-220-222", method="play_TOD19(bytes32 guess)", type_label=if];
3751 [label="219_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
1147 [label="220_ winner_TOD19 = msg.sender;\n1147-expression_statement-221-221", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
1153 [label="223_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n1153-function_definition-224-226", method="getReward_TOD19()", type_label=function_definition];
1158 [label="224_ winner_TOD19.transfer(msg.value);\n1158-expression_statement-225-225", method="getReward_TOD19()", type_label=expression_statement];
1167 [label="226_ function stop() public onlyOwner\n    {\n        _stop();\n    }\n1167-function_definition-227-230", method="stop()", type_label=function_definition];
1170 [label="226_ onlyOwner\n1170-expression_statement-227-227", method="stop()", type_label=expression_statement];
1173 [label="228_ _stop();\n1173-expression_statement-229-229", method="stop()", type_label=expression_statement];
1176 [label="230_ bool claimed_TOD26 = false;\n1176-new_variable-231-231", method="", type_label=new_variable];
1182 [label="231_ address payable owner_TOD26;\n1182-new_variable-232-232", method="", type_label=new_variable];
1186 [label="232_ uint256 reward_TOD26;\n1186-new_variable-233-233", method="", type_label=new_variable];
1190 [label="233_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n1190-function_definition-234-239", method="setReward_TOD26()", type_label=function_definition];
1195 [label="234_ require (!claimed_TOD26);\n1195-expression_statement-235-235", method="setReward_TOD26()", type_label=expression_statement];
1201 [label="235_ require(msg.sender == owner_TOD26);\n1201-expression_statement-236-236", method="setReward_TOD26()", type_label=expression_statement];
1210 [label="236_ owner_TOD26.transfer(reward_TOD26);\n1210-expression_statement-237-237", method="setReward_TOD26()", type_label=expression_statement];
1217 [label="237_ reward_TOD26 = msg.value;\n1217-expression_statement-238-238", method="setReward_TOD26()", type_label=expression_statement];
1223 [label="239_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n1223-function_definition-240-245", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
1231 [label="240_ require (!claimed_TOD26);\n1231-expression_statement-241-241", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1237 [label="241_ require(submission < 10);\n1237-expression_statement-242-242", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1244 [label="242_ msg.sender.transfer(reward_TOD26);\n1244-expression_statement-243-243", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1253 [label="243_ claimed_TOD26 = true;\n1253-expression_statement-244-244", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1258 [label="245_ function start() public onlyOwner\n    {\n        _start();\n    }\n1258-function_definition-246-249", method="start()", type_label=function_definition];
1261 [label="245_ onlyOwner\n1261-expression_statement-246-246", method="start()", type_label=expression_statement];
1264 [label="247_ _start();\n1264-expression_statement-248-248", method="start()", type_label=expression_statement];
1267 [label="249_ bool claimed_TOD20 = false;\n1267-new_variable-250-250", method="", type_label=new_variable];
1273 [label="250_ address payable owner_TOD20;\n1273-new_variable-251-251", method="", type_label=new_variable];
1277 [label="251_ uint256 reward_TOD20;\n1277-new_variable-252-252", method="", type_label=new_variable];
1281 [label="252_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n1281-function_definition-253-258", method="setReward_TOD20()", type_label=function_definition];
1286 [label="253_ require (!claimed_TOD20);\n1286-expression_statement-254-254", method="setReward_TOD20()", type_label=expression_statement];
1292 [label="254_ require(msg.sender == owner_TOD20);\n1292-expression_statement-255-255", method="setReward_TOD20()", type_label=expression_statement];
1301 [label="255_ owner_TOD20.transfer(reward_TOD20);\n1301-expression_statement-256-256", method="setReward_TOD20()", type_label=expression_statement];
1308 [label="256_ reward_TOD20 = msg.value;\n1308-expression_statement-257-257", method="setReward_TOD20()", type_label=expression_statement];
1314 [label="258_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n1314-function_definition-259-264", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
1322 [label="259_ require (!claimed_TOD20);\n1322-expression_statement-260-260", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1328 [label="260_ require(submission < 10);\n1328-expression_statement-261-261", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1335 [label="261_ msg.sender.transfer(reward_TOD20);\n1335-expression_statement-262-262", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1344 [label="262_ claimed_TOD20 = true;\n1344-expression_statement-263-263", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1349 [label="264_ function _transferOwnership(address newOwner) internal\n    {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n1349-function_definition-265-270", method="_transferOwnership(address newOwner)", type_label=function_definition];
1357 [label="266_ require(newOwner != address(0));\n1357-expression_statement-267-267", method="_transferOwnership(address newOwner)", type_label=expression_statement];
1372 [label="268_ _owner = newOwner;\n1372-expression_statement-269-269", method="_transferOwnership(address newOwner)", type_label=expression_statement];
1376 [label="270_ bool claimed_TOD32 = false;\n1376-new_variable-271-271", method="", type_label=new_variable];
1382 [label="271_ address payable owner_TOD32;\n1382-new_variable-272-272", method="", type_label=new_variable];
1386 [label="272_ uint256 reward_TOD32;\n1386-new_variable-273-273", method="", type_label=new_variable];
1390 [label="273_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n1390-function_definition-274-279", method="setReward_TOD32()", type_label=function_definition];
1395 [label="274_ require (!claimed_TOD32);\n1395-expression_statement-275-275", method="setReward_TOD32()", type_label=expression_statement];
1401 [label="275_ require(msg.sender == owner_TOD32);\n1401-expression_statement-276-276", method="setReward_TOD32()", type_label=expression_statement];
1410 [label="276_ owner_TOD32.transfer(reward_TOD32);\n1410-expression_statement-277-277", method="setReward_TOD32()", type_label=expression_statement];
1417 [label="277_ reward_TOD32 = msg.value;\n1417-expression_statement-278-278", method="setReward_TOD32()", type_label=expression_statement];
1423 [label="279_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n1423-function_definition-280-285", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
1431 [label="280_ require (!claimed_TOD32);\n1431-expression_statement-281-281", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1437 [label="281_ require(submission < 10);\n1437-expression_statement-282-282", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1444 [label="282_ msg.sender.transfer(reward_TOD32);\n1444-expression_statement-283-283", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1453 [label="283_ claimed_TOD32 = true;\n1453-expression_statement-284-284", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1458 [label="285_ function _transferMasterRole(address newMaster) internal\n    {\n        require(newMaster != address(0));\n        emit MasterRoleTransferred(_master, newMaster);\n        _master = newMaster;\n    }\n1458-function_definition-286-291", method="_transferMasterRole(address newMaster)", type_label=function_definition];
1466 [label="287_ require(newMaster != address(0));\n1466-expression_statement-288-288", method="_transferMasterRole(address newMaster)", type_label=expression_statement];
1481 [label="289_ _master = newMaster;\n1481-expression_statement-290-290", method="_transferMasterRole(address newMaster)", type_label=expression_statement];
1485 [label="291_ bool claimed_TOD38 = false;\n1485-new_variable-292-292", method="", type_label=new_variable];
1491 [label="292_ address payable owner_TOD38;\n1491-new_variable-293-293", method="", type_label=new_variable];
1495 [label="293_ uint256 reward_TOD38;\n1495-new_variable-294-294", method="", type_label=new_variable];
1499 [label="294_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n1499-function_definition-295-300", method="setReward_TOD38()", type_label=function_definition];
1504 [label="295_ require (!claimed_TOD38);\n1504-expression_statement-296-296", method="setReward_TOD38()", type_label=expression_statement];
1510 [label="296_ require(msg.sender == owner_TOD38);\n1510-expression_statement-297-297", method="setReward_TOD38()", type_label=expression_statement];
1519 [label="297_ owner_TOD38.transfer(reward_TOD38);\n1519-expression_statement-298-298", method="setReward_TOD38()", type_label=expression_statement];
1526 [label="298_ reward_TOD38 = msg.value;\n1526-expression_statement-299-299", method="setReward_TOD38()", type_label=expression_statement];
1532 [label="300_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n1532-function_definition-301-306", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
1540 [label="301_ require (!claimed_TOD38);\n1540-expression_statement-302-302", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1546 [label="302_ require(submission < 10);\n1546-expression_statement-303-303", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1553 [label="303_ msg.sender.transfer(reward_TOD38);\n1553-expression_statement-304-304", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1562 [label="304_ claimed_TOD38 = true;\n1562-expression_statement-305-305", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1567 [label="306_ function _stop() internal\n    {\n        emit Stopped();\n        stopped = true;\n    }\n1567-function_definition-307-311", method="_stop()", type_label=function_definition];
1573 [label="309_ stopped = true;\n1573-expression_statement-310-310", method="_stop()", type_label=expression_statement];
1578 [label="311_ bool claimed_TOD4 = false;\n1578-new_variable-312-312", method="", type_label=new_variable];
1584 [label="312_ address payable owner_TOD4;\n1584-new_variable-313-313", method="", type_label=new_variable];
1588 [label="313_ uint256 reward_TOD4;\n1588-new_variable-314-314", method="", type_label=new_variable];
1592 [label="314_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n1592-function_definition-315-320", method="setReward_TOD4()", type_label=function_definition];
1597 [label="315_ require (!claimed_TOD4);\n1597-expression_statement-316-316", method="setReward_TOD4()", type_label=expression_statement];
1603 [label="316_ require(msg.sender == owner_TOD4);\n1603-expression_statement-317-317", method="setReward_TOD4()", type_label=expression_statement];
1612 [label="317_ owner_TOD4.transfer(reward_TOD4);\n1612-expression_statement-318-318", method="setReward_TOD4()", type_label=expression_statement];
1619 [label="318_ reward_TOD4 = msg.value;\n1619-expression_statement-319-319", method="setReward_TOD4()", type_label=expression_statement];
1625 [label="320_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n1625-function_definition-321-326", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
1633 [label="321_ require (!claimed_TOD4);\n1633-expression_statement-322-322", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1639 [label="322_ require(submission < 10);\n1639-expression_statement-323-323", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1646 [label="323_ msg.sender.transfer(reward_TOD4);\n1646-expression_statement-324-324", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1655 [label="324_ claimed_TOD4 = true;\n1655-expression_statement-325-325", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1660 [label="326_ function _start() internal\n    {\n        emit Started();\n        stopped = false;\n    }\n1660-function_definition-327-331", method="_start()", type_label=function_definition];
1666 [label="329_ stopped = false;\n1666-expression_statement-330-330", method="_start()", type_label=expression_statement];
1671 [label="331_ address payable winner_TOD7;\n1671-new_variable-332-332", method="", type_label=new_variable];
1675 [label="332_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n1675-function_definition-333-337", method="play_TOD7(bytes32 guess)", type_label=function_definition];
1683 [label="333_ if\n1683-if-334-336", method="play_TOD7(bytes32 guess)", type_label=if];
4309 [label="333_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
1705 [label="334_ winner_TOD7 = msg.sender;\n1705-expression_statement-335-335", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
1711 [label="337_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n1711-function_definition-338-340", method="getReward_TOD7()", type_label=function_definition];
1716 [label="338_ winner_TOD7.transfer(msg.value);\n1716-expression_statement-339-339", method="getReward_TOD7()", type_label=expression_statement];
1731 [label="343_ bool claimed_TOD12 = false;\n1731-new_variable-344-344", method="", type_label=new_variable];
1737 [label="344_ address payable owner_TOD12;\n1737-new_variable-345-345", method="", type_label=new_variable];
1741 [label="345_ uint256 reward_TOD12;\n1741-new_variable-346-346", method="", type_label=new_variable];
1745 [label="346_ function setReward_TOD12() public payable {\n        require (!claimed_TOD12);\n        require(msg.sender == owner_TOD12);\n        owner_TOD12.transfer(reward_TOD12);\n        reward_TOD12 = msg.value;\n    }\n1745-function_definition-347-352", method="setReward_TOD12()", type_label=function_definition];
1750 [label="347_ require (!claimed_TOD12);\n1750-expression_statement-348-348", method="setReward_TOD12()", type_label=expression_statement];
1756 [label="348_ require(msg.sender == owner_TOD12);\n1756-expression_statement-349-349", method="setReward_TOD12()", type_label=expression_statement];
1765 [label="349_ owner_TOD12.transfer(reward_TOD12);\n1765-expression_statement-350-350", method="setReward_TOD12()", type_label=expression_statement];
1772 [label="350_ reward_TOD12 = msg.value;\n1772-expression_statement-351-351", method="setReward_TOD12()", type_label=expression_statement];
1778 [label="352_ function claimReward_TOD12(uint256 submission) public {\n        require (!claimed_TOD12);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD12);\n        claimed_TOD12 = true;\n    }\n1778-function_definition-353-358", method="claimReward_TOD12(uint256 submission)", type_label=function_definition];
1786 [label="353_ require (!claimed_TOD12);\n1786-expression_statement-354-354", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1792 [label="354_ require(submission < 10);\n1792-expression_statement-355-355", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1799 [label="355_ msg.sender.transfer(reward_TOD12);\n1799-expression_statement-356-356", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1808 [label="356_ claimed_TOD12 = true;\n1808-expression_statement-357-357", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1813 [label="358_ mapping(string => string) private btc;\n1813-new_variable-359-359", method="", type_label=new_variable];
1820 [label="359_ address payable winner_TOD11;\n1820-new_variable-360-360", method="", type_label=new_variable];
1824 [label="360_ function play_TOD11(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD11 = msg.sender;\n        }\n    }\n1824-function_definition-361-365", method="play_TOD11(bytes32 guess)", type_label=function_definition];
1832 [label="361_ if\n1832-if-362-364", method="play_TOD11(bytes32 guess)", type_label=if];
4458 [label="361_ end_if", method="play_TOD11(bytes32 guess)", type_label=end_if];
1854 [label="362_ winner_TOD11 = msg.sender;\n1854-expression_statement-363-363", method="play_TOD11(bytes32 guess)", type_label=expression_statement];
1860 [label="365_ function getReward_TOD11() payable public{\n       winner_TOD11.transfer(msg.value);\n    }\n1860-function_definition-366-368", method="getReward_TOD11()", type_label=function_definition];
1865 [label="366_ winner_TOD11.transfer(msg.value);\n1865-expression_statement-367-367", method="getReward_TOD11()", type_label=expression_statement];
1874 [label="368_ mapping(string => address) private eth;\n1874-new_variable-369-369", method="", type_label=new_variable];
1881 [label="369_ address payable winner_TOD27;\n1881-new_variable-370-370", method="", type_label=new_variable];
1885 [label="370_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n1885-function_definition-371-375", method="play_TOD27(bytes32 guess)", type_label=function_definition];
1893 [label="371_ if\n1893-if-372-374", method="play_TOD27(bytes32 guess)", type_label=if];
4519 [label="371_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
1915 [label="372_ winner_TOD27 = msg.sender;\n1915-expression_statement-373-373", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
1921 [label="375_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n1921-function_definition-376-378", method="getReward_TOD27()", type_label=function_definition];
1926 [label="376_ winner_TOD27.transfer(msg.value);\n1926-expression_statement-377-377", method="getReward_TOD27()", type_label=expression_statement];
1949 [label="379_ address payable winner_TOD31;\n1949-new_variable-380-380", method="", type_label=new_variable];
1953 [label="380_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n1953-function_definition-381-385", method="play_TOD31(bytes32 guess)", type_label=function_definition];
1961 [label="381_ if\n1961-if-382-384", method="play_TOD31(bytes32 guess)", type_label=if];
4587 [label="381_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
1983 [label="382_ winner_TOD31 = msg.sender;\n1983-expression_statement-383-383", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
1989 [label="385_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n1989-function_definition-386-388", method="getReward_TOD31()", type_label=function_definition];
1994 [label="386_ winner_TOD31.transfer(msg.value);\n1994-expression_statement-387-387", method="getReward_TOD31()", type_label=expression_statement];
2013 [label="389_ address payable winner_TOD13;\n2013-new_variable-390-390", method="", type_label=new_variable];
2017 [label="390_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n2017-function_definition-391-395", method="play_TOD13(bytes32 guess)", type_label=function_definition];
2025 [label="391_ if\n2025-if-392-394", method="play_TOD13(bytes32 guess)", type_label=if];
4651 [label="391_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
2047 [label="392_ winner_TOD13 = msg.sender;\n2047-expression_statement-393-393", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
2053 [label="395_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n2053-function_definition-396-398", method="getReward_TOD13()", type_label=function_definition];
2058 [label="396_ winner_TOD13.transfer(msg.value);\n2058-expression_statement-397-397", method="getReward_TOD13()", type_label=expression_statement];
2073 [label="399_ function version() external pure returns(string memory)\n    {\n        return '1.0.0';\n    }\n2073-function_definition-400-403", method="version()", type_label=function_definition];
2082 [label="401_ return '1.0.0';\n2082-return-402-402", method="version()", type_label=return];
2085 [label="403_ address payable winner_TOD23;\n2085-new_variable-404-404", method="", type_label=new_variable];
2089 [label="404_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n2089-function_definition-405-409", method="play_TOD23(bytes32 guess)", type_label=function_definition];
2097 [label="405_ if\n2097-if-406-408", method="play_TOD23(bytes32 guess)", type_label=if];
4723 [label="405_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
2119 [label="406_ winner_TOD23 = msg.sender;\n2119-expression_statement-407-407", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
2125 [label="409_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n2125-function_definition-410-412", method="getReward_TOD23()", type_label=function_definition];
2130 [label="410_ winner_TOD23.transfer(msg.value);\n2130-expression_statement-411-411", method="getReward_TOD23()", type_label=expression_statement];
2139 [label="412_ function getAddress(string calldata account) external view returns (string memory, address)\n    {\n        return (btc[account], eth[account]);\n    }\n2139-function_definition-413-416", method="getAddress(string calldata account)", type_label=function_definition];
2155 [label="414_ return (btc[account], eth[account]);\n2155-return-415-415", method="getAddress(string calldata account)", type_label=return];
2163 [label="416_ bool claimed_TOD14 = false;\n2163-new_variable-417-417", method="", type_label=new_variable];
2169 [label="417_ address payable owner_TOD14;\n2169-new_variable-418-418", method="", type_label=new_variable];
2173 [label="418_ uint256 reward_TOD14;\n2173-new_variable-419-419", method="", type_label=new_variable];
2177 [label="419_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n2177-function_definition-420-425", method="setReward_TOD14()", type_label=function_definition];
2182 [label="420_ require (!claimed_TOD14);\n2182-expression_statement-421-421", method="setReward_TOD14()", type_label=expression_statement];
2188 [label="421_ require(msg.sender == owner_TOD14);\n2188-expression_statement-422-422", method="setReward_TOD14()", type_label=expression_statement];
2197 [label="422_ owner_TOD14.transfer(reward_TOD14);\n2197-expression_statement-423-423", method="setReward_TOD14()", type_label=expression_statement];
2204 [label="423_ reward_TOD14 = msg.value;\n2204-expression_statement-424-424", method="setReward_TOD14()", type_label=expression_statement];
2210 [label="425_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n2210-function_definition-426-431", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
2218 [label="426_ require (!claimed_TOD14);\n2218-expression_statement-427-427", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2224 [label="427_ require(submission < 10);\n2224-expression_statement-428-428", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2231 [label="428_ msg.sender.transfer(reward_TOD14);\n2231-expression_statement-429-429", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2240 [label="429_ claimed_TOD14 = true;\n2240-expression_statement-430-430", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2245 [label="431_ function setAddress(string calldata account, string calldata btcAddress, address ethAddress) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(account).length > 0);\n        btc[account] = btcAddress;\n        eth[account] = ethAddress;\n        emit SetAddress(account, btcAddress, ethAddress);\n    }\n2245-function_definition-432-438", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=function_definition];
2260 [label="431_ onlyMaster\n2260-expression_statement-432-432", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
2262 [label="431_ onlyWhenNotStopped\n2262-expression_statement-432-432", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
2265 [label="433_ require(bytes(account).length > 0);\n2265-expression_statement-434-434", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
2276 [label="434_ btc[account] = btcAddress;\n2276-expression_statement-435-435", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
2282 [label="435_ eth[account] = ethAddress;\n2282-expression_statement-436-436", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
2296 [label="438_ bool claimed_TOD30 = false;\n2296-new_variable-439-439", method="", type_label=new_variable];
2302 [label="439_ address payable owner_TOD30;\n2302-new_variable-440-440", method="", type_label=new_variable];
2306 [label="440_ uint256 reward_TOD30;\n2306-new_variable-441-441", method="", type_label=new_variable];
2310 [label="441_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n2310-function_definition-442-447", method="setReward_TOD30()", type_label=function_definition];
2315 [label="442_ require (!claimed_TOD30);\n2315-expression_statement-443-443", method="setReward_TOD30()", type_label=expression_statement];
2321 [label="443_ require(msg.sender == owner_TOD30);\n2321-expression_statement-444-444", method="setReward_TOD30()", type_label=expression_statement];
2330 [label="444_ owner_TOD30.transfer(reward_TOD30);\n2330-expression_statement-445-445", method="setReward_TOD30()", type_label=expression_statement];
2337 [label="445_ reward_TOD30 = msg.value;\n2337-expression_statement-446-446", method="setReward_TOD30()", type_label=expression_statement];
2343 [label="447_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n2343-function_definition-448-453", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
2351 [label="448_ require (!claimed_TOD30);\n2351-expression_statement-449-449", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2357 [label="449_ require(submission < 10);\n2357-expression_statement-450-450", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2364 [label="450_ msg.sender.transfer(reward_TOD30);\n2364-expression_statement-451-451", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2373 [label="451_ claimed_TOD30 = true;\n2373-expression_statement-452-452", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2378 [label="453_ function updateAccount(string calldata from, string calldata to) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(from).length > 0);\n        require(bytes(to).length > 0);\n        btc[to] = btc[from];\n        eth[to] = eth[from];\n        btc[from] = '';\n        eth[from] = address(0);\n        emit UpdateAddress(from, to);\n    }\n2378-function_definition-454-463", method="updateAccount(string calldata from,string calldata to)", type_label=function_definition];
2389 [label="453_ onlyMaster\n2389-expression_statement-454-454", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
2391 [label="453_ onlyWhenNotStopped\n2391-expression_statement-454-454", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
2394 [label="455_ require(bytes(from).length > 0);\n2394-expression_statement-456-456", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
2405 [label="456_ require(bytes(to).length > 0);\n2405-expression_statement-457-457", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
2416 [label="457_ btc[to] = btc[from];\n2416-expression_statement-458-458", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
2424 [label="458_ eth[to] = eth[from];\n2424-expression_statement-459-459", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
2432 [label="459_ btc[from] = '';\n2432-expression_statement-460-460", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
2439 [label="460_ eth[from] = address(0);\n2439-expression_statement-461-461", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
2453 [label="463_ bool claimed_TOD8 = false;\n2453-new_variable-464-464", method="", type_label=new_variable];
2459 [label="464_ address payable owner_TOD8;\n2459-new_variable-465-465", method="", type_label=new_variable];
2463 [label="465_ uint256 reward_TOD8;\n2463-new_variable-466-466", method="", type_label=new_variable];
2467 [label="466_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n2467-function_definition-467-472", method="setReward_TOD8()", type_label=function_definition];
2472 [label="467_ require (!claimed_TOD8);\n2472-expression_statement-468-468", method="setReward_TOD8()", type_label=expression_statement];
2478 [label="468_ require(msg.sender == owner_TOD8);\n2478-expression_statement-469-469", method="setReward_TOD8()", type_label=expression_statement];
2487 [label="469_ owner_TOD8.transfer(reward_TOD8);\n2487-expression_statement-470-470", method="setReward_TOD8()", type_label=expression_statement];
2494 [label="470_ reward_TOD8 = msg.value;\n2494-expression_statement-471-471", method="setReward_TOD8()", type_label=expression_statement];
2500 [label="472_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n2500-function_definition-473-478", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
2508 [label="473_ require (!claimed_TOD8);\n2508-expression_statement-474-474", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2514 [label="474_ require(submission < 10);\n2514-expression_statement-475-475", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2521 [label="475_ msg.sender.transfer(reward_TOD8);\n2521-expression_statement-476-476", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2530 [label="476_ claimed_TOD8 = true;\n2530-expression_statement-477-477", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2535 [label="478_ function deleteAccount(string calldata account) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(account).length > 0);\n        btc[account] = '';\n        eth[account] = address(0);\n        emit DeleteAddress(account);\n    }\n2535-function_definition-479-485", method="deleteAccount(string calldata account)", type_label=function_definition];
2542 [label="478_ onlyMaster\n2542-expression_statement-479-479", method="deleteAccount(string calldata account)", type_label=expression_statement];
2544 [label="478_ onlyWhenNotStopped\n2544-expression_statement-479-479", method="deleteAccount(string calldata account)", type_label=expression_statement];
2547 [label="480_ require(bytes(account).length > 0);\n2547-expression_statement-481-481", method="deleteAccount(string calldata account)", type_label=expression_statement];
2558 [label="481_ btc[account] = '';\n2558-expression_statement-482-482", method="deleteAccount(string calldata account)", type_label=expression_statement];
2565 [label="482_ eth[account] = address(0);\n2565-expression_statement-483-483", method="deleteAccount(string calldata account)", type_label=expression_statement];
2577 [label="485_ address payable winner_TOD39;\n2577-new_variable-486-486", method="", type_label=new_variable];
2581 [label="486_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n2581-function_definition-487-491", method="play_TOD39(bytes32 guess)", type_label=function_definition];
2589 [label="487_ if\n2589-if-488-490", method="play_TOD39(bytes32 guess)", type_label=if];
5215 [label="487_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
2611 [label="488_ winner_TOD39 = msg.sender;\n2611-expression_statement-489-489", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
2617 [label="491_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n2617-function_definition-492-494", method="getReward_TOD39()", type_label=function_definition];
2622 [label="492_ winner_TOD39.transfer(msg.value);\n2622-expression_statement-493-493", method="getReward_TOD39()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
17 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 47  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
25 -> 2651  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2651 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 2651  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
53 -> 58  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 78  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
78 -> 82  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
86 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
91 -> 97  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
97 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
133 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
260 -> 265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
265 -> 271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
271 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
301 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 364  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
342 -> 2968  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2968 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 2968  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
370 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 512  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
490 -> 3116  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3116 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 3116  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
518 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 611  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
589 -> 3215  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3215 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 3215  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
617 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
631 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
642 -> 648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
648 -> 652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
656 -> 661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
667 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
733 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
739 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 769  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
747 -> 3373  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3373 -> 775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 3373  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
775 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
800 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
817 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
826 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
845 -> 853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
853 -> 875  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
853 -> 3479  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3479 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 3479  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
881 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
914 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 944  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
922 -> 3548  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3548 -> 950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 3548  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
950 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
964 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
991 -> 1013  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
991 -> 3617  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3617 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1013 -> 3617  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1019 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1033 -> 1043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1060 -> 1082  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1060 -> 3686  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3686 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1082 -> 3686  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1088 -> 1093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 1111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1117 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1125 -> 1147  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1125 -> 3751  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3751 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1147 -> 3751  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1153 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 1173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 1182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1182 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1190 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1210 -> 1217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1223 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 1253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1258 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1281 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1286 -> 1292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1292 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1314 -> 1322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 1335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1335 -> 1344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1349 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 1382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1382 -> 1386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1390 -> 1395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1395 -> 1401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1401 -> 1410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 1417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 1431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1431 -> 1437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1437 -> 1444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1444 -> 1453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1458 -> 1466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1485 -> 1491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1491 -> 1495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1499 -> 1504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 1510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1510 -> 1519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1519 -> 1526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1532 -> 1540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1540 -> 1546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1546 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1553 -> 1562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1567 -> 1573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1578 -> 1584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1592 -> 1597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1597 -> 1603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1603 -> 1612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1612 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 1633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1633 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1639 -> 1646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1646 -> 1655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1660 -> 1666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1675 -> 1683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1683 -> 1705  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1683 -> 4309  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4309 -> 1711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1705 -> 4309  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1711 -> 1716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1731 -> 1737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1737 -> 1741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1745 -> 1750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1750 -> 1756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1756 -> 1765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1765 -> 1772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1778 -> 1786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1786 -> 1792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1792 -> 1799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1799 -> 1808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1813 -> 1820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1824 -> 1832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1832 -> 1854  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1832 -> 4458  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4458 -> 1860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1854 -> 4458  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1860 -> 1865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1874 -> 1881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1885 -> 1893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1893 -> 1915  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1893 -> 4519  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4519 -> 1921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1915 -> 4519  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1921 -> 1926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1953 -> 1961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1961 -> 1983  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1961 -> 4587  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4587 -> 1989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1983 -> 4587  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1989 -> 1994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2017 -> 2025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2025 -> 2047  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2025 -> 4651  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4651 -> 2053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2047 -> 4651  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2053 -> 2058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2073 -> 2082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2082 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2089 -> 2097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2097 -> 2119  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2097 -> 4723  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4723 -> 2125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2119 -> 4723  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2125 -> 2130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2139 -> 2155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2163 -> 2169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2169 -> 2173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2177 -> 2182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2182 -> 2188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2188 -> 2197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2197 -> 2204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2210 -> 2218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2218 -> 2224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2224 -> 2231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2231 -> 2240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2245 -> 2265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2260 -> 2262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2265 -> 2276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2276 -> 2282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2296 -> 2302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2302 -> 2306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2310 -> 2315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2315 -> 2321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2321 -> 2330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2330 -> 2337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2343 -> 2351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2351 -> 2357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2357 -> 2364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2364 -> 2373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2378 -> 2394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2389 -> 2391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2394 -> 2405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2405 -> 2416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2416 -> 2424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2424 -> 2432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2432 -> 2439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2453 -> 2459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2459 -> 2463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2467 -> 2472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2472 -> 2478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2478 -> 2487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2487 -> 2494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2500 -> 2508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2508 -> 2514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2514 -> 2521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2521 -> 2530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2535 -> 2547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2542 -> 2544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2547 -> 2558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2558 -> 2565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2581 -> 2589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2589 -> 2611  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2589 -> 5215  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5215 -> 2617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2611 -> 5215  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2617 -> 2622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
