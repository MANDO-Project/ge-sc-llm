digraph  {
13 [label="2_ struct Player {\n    address addr;\n    uint number;\n  }\n13-expression_statement-3-6", method="Player()", type_label=expression_statement];
23 [label="6_ Player[2] public players;\n23-new_variable-7-7", method="", type_label=new_variable];
31 [label="7_ uint8 tot;\n31-new_variable-8-8", method="", type_label=new_variable];
35 [label="8_ address owner;\n35-new_variable-9-9", method="", type_label=new_variable];
39 [label="9_ function OddsAndEvens() {\n    owner = msg.sender;\n  }\n39-function_definition-10-12", method="OddsAndEvens()", type_label=function_definition];
42 [label="10_ owner = msg.sender;\n42-expression_statement-11-11", method="OddsAndEvens()", type_label=expression_statement];
48 [label="12_ function play(uint number) payable{\n    if (msg.value != 1 ether) throw;\n    players[tot] = Player(msg.sender, number);\n    tot++;\n    if (tot==2) andTheWinnerIs();\n  }\n48-function_definition-13-18", method="play(uint number)", type_label=function_definition];
56 [label="13_ if_msg.value != 1 ether\n56-if-14-14", method="play(uint number)", type_label=if];
233 [label="13_ end_if", method="play(uint number)", type_label=end_if];
63 [label="13_ throw;\n63-expression_statement-14-14", method="play(uint number)", type_label=expression_statement];
65 [label="14_ players[tot] = Player(msg.sender, number);\n65-expression_statement-15-15", method="play(uint number)", type_label=expression_statement];
78 [label="15_ tot++;\n78-expression_statement-16-16", method="play(uint number)", type_label=expression_statement];
79 [label="15_ tot++\n79-expression_statement-16-16", method="play(uint number)", type_label=expression_statement];
81 [label="16_ if_tot==2\n81-if-17-17", method="play(uint number)", type_label=if];
258 [label="16_ end_if", method="play(uint number)", type_label=end_if];
85 [label="16_ andTheWinnerIs();\n85-expression_statement-17-17", method="play(uint number)", type_label=expression_statement];
88 [label="18_ function andTheWinnerIs() private {\n    bool res ;\n    uint n = players[0].number+players[1].number;\n    if (n%2==0) {\n      res = players[0].addr.send(1800 finney);\n    }\n    else {\n      res = players[1].addr.send(1800 finney);\n    }\n    delete players;\n    tot=0;\n  }\n88-function_definition-19-30", method="andTheWinnerIs()", type_label=function_definition];
92 [label="19_ bool res ;\n92-new_variable-20-20", method="andTheWinnerIs()", type_label=new_variable];
97 [label="20_ uint n = players[0].number+players[1].number;\n97-new_variable-21-21", method="andTheWinnerIs()", type_label=new_variable];
113 [label="21_ if_n%2==0\n113-if-22-27", method="andTheWinnerIs()", type_label=if];
290 [label="21_ end_if", method="andTheWinnerIs()", type_label=end_if];
120 [label="22_ res = players[0].addr.send(1800 finney);\n120-expression_statement-23-23", method="andTheWinnerIs()", type_label=expression_statement];
135 [label="25_ res = players[1].addr.send(1800 finney);\n135-expression_statement-26-26", method="andTheWinnerIs()", type_label=expression_statement];
149 [label="27_ delete players;\n149-expression_statement-28-28", method="andTheWinnerIs()", type_label=expression_statement];
152 [label="28_ tot=0;\n152-expression_statement-29-29", method="andTheWinnerIs()", type_label=expression_statement];
156 [label="30_ function getProfit() {\n    if(msg.sender!=owner) throw;\n    bool res = msg.sender.send(this.balance);\n  }\n156-function_definition-31-34", method="getProfit()", type_label=function_definition];
159 [label="31_ if_msg.sender!=owner\n159-if-32-32", method="getProfit()", type_label=if];
336 [label="31_ end_if", method="getProfit()", type_label=end_if];
165 [label="31_ throw;\n165-expression_statement-32-32", method="getProfit()", type_label=expression_statement];
167 [label="32_ bool res = msg.sender.send(this.balance);\n167-new_variable-33-33", method="getProfit()", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 35  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
39 -> 42  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 56  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
56 -> 63  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
56 -> 233  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
233 -> 65  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
63 -> 233  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
65 -> 78  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
78 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 85  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
81 -> 258  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
258 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 258  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
88 -> 92  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
92 -> 97  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
97 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 120  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
113 -> 135  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
290 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 290  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
135 -> 290  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
149 -> 152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
156 -> 159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 165  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
159 -> 336  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
336 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 336  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
