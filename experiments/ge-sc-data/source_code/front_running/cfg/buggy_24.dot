digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n50-function_definition-8-10", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ return sub(a, b, \"SafeMath: subtraction overflow\");\n67-return-9-9", method="sub(uint256 a,uint256 b)", type_label=return];
77 [label="10_ function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n77-function_definition-11-15", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
98 [label="11_ require(b <= a, errorMessage);\n98-expression_statement-12-12", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
107 [label="12_ uint256 c = a - b;\n107-new_variable-13-13", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=new_variable];
115 [label="13_ return c;\n115-return-14-14", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
117 [label="15_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n117-function_definition-16-23", method="mul(uint256 a,uint256 b)", type_label=function_definition];
134 [label="16_ if_a == 0\n134-if-17-19", method="mul(uint256 a,uint256 b)", type_label=if];
6572 [label="16_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
139 [label="17_ return 0;\n139-return-18-18", method="mul(uint256 a,uint256 b)", type_label=return];
141 [label="19_ uint256 c = a * b;\n141-new_variable-20-20", method="mul(uint256 a,uint256 b)", type_label=new_variable];
149 [label="20_ require(c / a == b, \"SafeMath: multiplication overflow\");\n149-expression_statement-21-21", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
161 [label="21_ return c;\n161-return-22-22", method="mul(uint256 a,uint256 b)", type_label=return];
163 [label="23_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n163-function_definition-24-26", method="div(uint256 a,uint256 b)", type_label=function_definition];
180 [label="24_ return div(a, b, \"SafeMath: division by zero\");\n180-return-25-25", method="div(uint256 a,uint256 b)", type_label=return];
190 [label="26_ function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n190-function_definition-27-31", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
211 [label="27_ require(b > 0, errorMessage);\n211-expression_statement-28-28", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
220 [label="28_ uint256 c = a / b;\n220-new_variable-29-29", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=new_variable];
228 [label="29_ return c;\n228-return-30-30", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
230 [label="31_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n230-function_definition-32-34", method="mod(uint256 a,uint256 b)", type_label=function_definition];
247 [label="32_ return mod(a, b, \"SafeMath: modulo by zero\");\n247-return-33-33", method="mod(uint256 a,uint256 b)", type_label=return];
257 [label="34_ function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n257-function_definition-35-38", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
278 [label="35_ require(b != 0, errorMessage);\n278-expression_statement-36-36", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
287 [label="36_ return a % b;\n287-return-37-37", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
303 [label="42_ struct User {\n        uint256 totalInvestCount;\n        uint256 totalInvestAmount;\n        uint256 totalStaticCommissionWithdrawAmount;\n        uint256 totalDynamicCommissionWithdrawAmount;\n        uint256 totalWithdrawAmount;\n        uint256 downlineCount;\n        uint256 nodeCount;\n        uint256 totalDownlineInvestAmount;\n        uint256 currentInvestTime;\n        uint256 currentInvestAmount;\n        uint256 currentInvestCycle;\n        uint256 currentlevel;\n        uint256 currentStaticCommissionRatio;\n        uint256 currentStaticCommissionWithdrawAmount;\n        uint256 staticCommissionBalance;\n        uint256 dynamicCommissionBalance;\n        uint256 calcDynamicCommissionAmount;\n        address sponsorAddress;\n    }\n303-expression_statement-43-62", method="User()", type_label=expression_statement];
377 [label="62_ struct InvestRecord {\n        uint256 time;\n        uint256 amount;\n        uint256 cycle;\n    }\n377-expression_statement-63-67", method="InvestRecord()", type_label=expression_statement];
391 [label="67_ struct CommissionRecord {\n        uint256 time;\n        uint256 amount;\n    }\n391-expression_statement-68-71", method="CommissionRecord()", type_label=expression_statement];
401 [label="71_ uint256 private constant ONE_ETH = 1 ether;\n401-new_variable-72-72", method="", type_label=new_variable];
408 [label="72_ uint256 private constant ONE_DAY = 1 days;\n408-new_variable-73-73", method="", type_label=new_variable];
415 [label="73_ address private constant GENESIS_USER_ADDRESS = 0xe00d13D53Ba180EAD5F4838BD56b15629026A8C9;\n415-new_variable-74-74", method="", type_label=new_variable];
421 [label="74_ address private constant ENGINEER_ADDRESS = 0xddf0bB01f81059CCdB3D5bF5b1C7Bd540aDDFEac;\n421-new_variable-75-75", method="", type_label=new_variable];
427 [label="75_ bool private initialized = false;\n427-new_variable-76-76", method="", type_label=new_variable];
434 [label="76_ address public owner;\n434-new_variable-77-77", method="", type_label=new_variable];
439 [label="77_ uint256 public totalInvestCount;\n439-new_variable-78-78", method="", type_label=new_variable];
444 [label="78_ uint256 public totalInvestAmount;\n444-new_variable-79-79", method="", type_label=new_variable];
449 [label="79_ bool claimed_TOD18 = false;\n449-new_variable-80-80", method="", type_label=new_variable];
455 [label="80_ address payable owner_TOD18;\n455-new_variable-81-81", method="", type_label=new_variable];
459 [label="81_ uint256 reward_TOD18;\n459-new_variable-82-82", method="", type_label=new_variable];
463 [label="82_ function setReward_TOD18() public payable {\n        require (!claimed_TOD18);\n        require(msg.sender == owner_TOD18);\n        owner_TOD18.transfer(reward_TOD18);\n        reward_TOD18 = msg.value;\n    }\n463-function_definition-83-88", method="setReward_TOD18()", type_label=function_definition];
468 [label="83_ require (!claimed_TOD18);\n468-expression_statement-84-84", method="setReward_TOD18()", type_label=expression_statement];
474 [label="84_ require(msg.sender == owner_TOD18);\n474-expression_statement-85-85", method="setReward_TOD18()", type_label=expression_statement];
483 [label="85_ owner_TOD18.transfer(reward_TOD18);\n483-expression_statement-86-86", method="setReward_TOD18()", type_label=expression_statement];
490 [label="86_ reward_TOD18 = msg.value;\n490-expression_statement-87-87", method="setReward_TOD18()", type_label=expression_statement];
496 [label="88_ function claimReward_TOD18(uint256 submission) public {\n        require (!claimed_TOD18);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD18);\n        claimed_TOD18 = true;\n    }\n496-function_definition-89-94", method="claimReward_TOD18(uint256 submission)", type_label=function_definition];
504 [label="89_ require (!claimed_TOD18);\n504-expression_statement-90-90", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
510 [label="90_ require(submission < 10);\n510-expression_statement-91-91", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
517 [label="91_ msg.sender.transfer(reward_TOD18);\n517-expression_statement-92-92", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
526 [label="92_ claimed_TOD18 = true;\n526-expression_statement-93-93", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
531 [label="94_ uint256 public totalStaticCommissionWithdrawAmount;\n531-new_variable-95-95", method="", type_label=new_variable];
536 [label="95_ address payable winner_TOD29;\n536-new_variable-96-96", method="", type_label=new_variable];
540 [label="96_ function play_TOD29(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD29 = msg.sender;\n        }\n    }\n540-function_definition-97-101", method="play_TOD29(bytes32 guess)", type_label=function_definition];
548 [label="97_ if\n548-if-98-100", method="play_TOD29(bytes32 guess)", type_label=if];
6986 [label="97_ end_if", method="play_TOD29(bytes32 guess)", type_label=end_if];
570 [label="98_ winner_TOD29 = msg.sender;\n570-expression_statement-99-99", method="play_TOD29(bytes32 guess)", type_label=expression_statement];
576 [label="101_ function getReward_TOD29() payable public{\n       winner_TOD29.transfer(msg.value);\n    }\n576-function_definition-102-104", method="getReward_TOD29()", type_label=function_definition];
581 [label="102_ winner_TOD29.transfer(msg.value);\n581-expression_statement-103-103", method="getReward_TOD29()", type_label=expression_statement];
590 [label="104_ uint256 public totalDynamicCommissionWithdrawAmount;\n590-new_variable-105-105", method="", type_label=new_variable];
595 [label="105_ bool claimed_TOD6 = false;\n595-new_variable-106-106", method="", type_label=new_variable];
601 [label="106_ address payable owner_TOD6;\n601-new_variable-107-107", method="", type_label=new_variable];
605 [label="107_ uint256 reward_TOD6;\n605-new_variable-108-108", method="", type_label=new_variable];
609 [label="108_ function setReward_TOD6() public payable {\n        require (!claimed_TOD6);\n        require(msg.sender == owner_TOD6);\n        owner_TOD6.transfer(reward_TOD6);\n        reward_TOD6 = msg.value;\n    }\n609-function_definition-109-114", method="setReward_TOD6()", type_label=function_definition];
614 [label="109_ require (!claimed_TOD6);\n614-expression_statement-110-110", method="setReward_TOD6()", type_label=expression_statement];
620 [label="110_ require(msg.sender == owner_TOD6);\n620-expression_statement-111-111", method="setReward_TOD6()", type_label=expression_statement];
629 [label="111_ owner_TOD6.transfer(reward_TOD6);\n629-expression_statement-112-112", method="setReward_TOD6()", type_label=expression_statement];
636 [label="112_ reward_TOD6 = msg.value;\n636-expression_statement-113-113", method="setReward_TOD6()", type_label=expression_statement];
642 [label="114_ function claimReward_TOD6(uint256 submission) public {\n        require (!claimed_TOD6);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD6);\n        claimed_TOD6 = true;\n    }\n642-function_definition-115-120", method="claimReward_TOD6(uint256 submission)", type_label=function_definition];
650 [label="115_ require (!claimed_TOD6);\n650-expression_statement-116-116", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
656 [label="116_ require(submission < 10);\n656-expression_statement-117-117", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
663 [label="117_ msg.sender.transfer(reward_TOD6);\n663-expression_statement-118-118", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
672 [label="118_ claimed_TOD6 = true;\n672-expression_statement-119-119", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
677 [label="120_ uint256 public totalWithdrawAmount;\n677-new_variable-121-121", method="", type_label=new_variable];
682 [label="121_ bool claimed_TOD16 = false;\n682-new_variable-122-122", method="", type_label=new_variable];
688 [label="122_ address payable owner_TOD16;\n688-new_variable-123-123", method="", type_label=new_variable];
692 [label="123_ uint256 reward_TOD16;\n692-new_variable-124-124", method="", type_label=new_variable];
696 [label="124_ function setReward_TOD16() public payable {\n        require (!claimed_TOD16);\n        require(msg.sender == owner_TOD16);\n        owner_TOD16.transfer(reward_TOD16);\n        reward_TOD16 = msg.value;\n    }\n696-function_definition-125-130", method="setReward_TOD16()", type_label=function_definition];
701 [label="125_ require (!claimed_TOD16);\n701-expression_statement-126-126", method="setReward_TOD16()", type_label=expression_statement];
707 [label="126_ require(msg.sender == owner_TOD16);\n707-expression_statement-127-127", method="setReward_TOD16()", type_label=expression_statement];
716 [label="127_ owner_TOD16.transfer(reward_TOD16);\n716-expression_statement-128-128", method="setReward_TOD16()", type_label=expression_statement];
723 [label="128_ reward_TOD16 = msg.value;\n723-expression_statement-129-129", method="setReward_TOD16()", type_label=expression_statement];
729 [label="130_ function claimReward_TOD16(uint256 submission) public {\n        require (!claimed_TOD16);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD16);\n        claimed_TOD16 = true;\n    }\n729-function_definition-131-136", method="claimReward_TOD16(uint256 submission)", type_label=function_definition];
737 [label="131_ require (!claimed_TOD16);\n737-expression_statement-132-132", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
743 [label="132_ require(submission < 10);\n743-expression_statement-133-133", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
750 [label="133_ msg.sender.transfer(reward_TOD16);\n750-expression_statement-134-134", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
759 [label="134_ claimed_TOD16 = true;\n759-expression_statement-135-135", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
764 [label="136_ uint256 public totalUserCount;\n764-new_variable-137-137", method="", type_label=new_variable];
769 [label="137_ bool claimed_TOD24 = false;\n769-new_variable-138-138", method="", type_label=new_variable];
775 [label="138_ address payable owner_TOD24;\n775-new_variable-139-139", method="", type_label=new_variable];
779 [label="139_ uint256 reward_TOD24;\n779-new_variable-140-140", method="", type_label=new_variable];
783 [label="140_ function setReward_TOD24() public payable {\n        require (!claimed_TOD24);\n        require(msg.sender == owner_TOD24);\n        owner_TOD24.transfer(reward_TOD24);\n        reward_TOD24 = msg.value;\n    }\n783-function_definition-141-146", method="setReward_TOD24()", type_label=function_definition];
788 [label="141_ require (!claimed_TOD24);\n788-expression_statement-142-142", method="setReward_TOD24()", type_label=expression_statement];
794 [label="142_ require(msg.sender == owner_TOD24);\n794-expression_statement-143-143", method="setReward_TOD24()", type_label=expression_statement];
803 [label="143_ owner_TOD24.transfer(reward_TOD24);\n803-expression_statement-144-144", method="setReward_TOD24()", type_label=expression_statement];
810 [label="144_ reward_TOD24 = msg.value;\n810-expression_statement-145-145", method="setReward_TOD24()", type_label=expression_statement];
816 [label="146_ function claimReward_TOD24(uint256 submission) public {\n        require (!claimed_TOD24);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD24);\n        claimed_TOD24 = true;\n    }\n816-function_definition-147-152", method="claimReward_TOD24(uint256 submission)", type_label=function_definition];
824 [label="147_ require (!claimed_TOD24);\n824-expression_statement-148-148", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
830 [label="148_ require(submission < 10);\n830-expression_statement-149-149", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
837 [label="149_ msg.sender.transfer(reward_TOD24);\n837-expression_statement-150-150", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
846 [label="150_ claimed_TOD24 = true;\n846-expression_statement-151-151", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
851 [label="152_ uint256 public engineerFunds;\n851-new_variable-153-153", method="", type_label=new_variable];
856 [label="153_ address payable winner_TOD5;\n856-new_variable-154-154", method="", type_label=new_variable];
860 [label="154_ function play_TOD5(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD5 = msg.sender;\n        }\n    }\n860-function_definition-155-159", method="play_TOD5(bytes32 guess)", type_label=function_definition];
868 [label="155_ if\n868-if-156-158", method="play_TOD5(bytes32 guess)", type_label=if];
7306 [label="155_ end_if", method="play_TOD5(bytes32 guess)", type_label=end_if];
890 [label="156_ winner_TOD5 = msg.sender;\n890-expression_statement-157-157", method="play_TOD5(bytes32 guess)", type_label=expression_statement];
896 [label="159_ function getReward_TOD5() payable public{\n       winner_TOD5.transfer(msg.value);\n    }\n896-function_definition-160-162", method="getReward_TOD5()", type_label=function_definition];
901 [label="160_ winner_TOD5.transfer(msg.value);\n901-expression_statement-161-161", method="getReward_TOD5()", type_label=expression_statement];
910 [label="162_ uint256 public engineerWithdrawAmount;\n910-new_variable-163-163", method="", type_label=new_variable];
915 [label="163_ address payable winner_TOD15;\n915-new_variable-164-164", method="", type_label=new_variable];
919 [label="164_ function play_TOD15(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD15 = msg.sender;\n        }\n    }\n919-function_definition-165-169", method="play_TOD15(bytes32 guess)", type_label=function_definition];
927 [label="165_ if\n927-if-166-168", method="play_TOD15(bytes32 guess)", type_label=if];
7365 [label="165_ end_if", method="play_TOD15(bytes32 guess)", type_label=end_if];
949 [label="166_ winner_TOD15 = msg.sender;\n949-expression_statement-167-167", method="play_TOD15(bytes32 guess)", type_label=expression_statement];
955 [label="169_ function getReward_TOD15() payable public{\n       winner_TOD15.transfer(msg.value);\n    }\n955-function_definition-170-172", method="getReward_TOD15()", type_label=function_definition];
960 [label="170_ winner_TOD15.transfer(msg.value);\n960-expression_statement-171-171", method="getReward_TOD15()", type_label=expression_statement];
969 [label="172_ uint256 public operatorFunds;\n969-new_variable-173-173", method="", type_label=new_variable];
974 [label="173_ bool claimed_TOD28 = false;\n974-new_variable-174-174", method="", type_label=new_variable];
980 [label="174_ address payable owner_TOD28;\n980-new_variable-175-175", method="", type_label=new_variable];
984 [label="175_ uint256 reward_TOD28;\n984-new_variable-176-176", method="", type_label=new_variable];
988 [label="176_ function setReward_TOD28() public payable {\n        require (!claimed_TOD28);\n        require(msg.sender == owner_TOD28);\n        owner_TOD28.transfer(reward_TOD28);\n        reward_TOD28 = msg.value;\n    }\n988-function_definition-177-182", method="setReward_TOD28()", type_label=function_definition];
993 [label="177_ require (!claimed_TOD28);\n993-expression_statement-178-178", method="setReward_TOD28()", type_label=expression_statement];
999 [label="178_ require(msg.sender == owner_TOD28);\n999-expression_statement-179-179", method="setReward_TOD28()", type_label=expression_statement];
1008 [label="179_ owner_TOD28.transfer(reward_TOD28);\n1008-expression_statement-180-180", method="setReward_TOD28()", type_label=expression_statement];
1015 [label="180_ reward_TOD28 = msg.value;\n1015-expression_statement-181-181", method="setReward_TOD28()", type_label=expression_statement];
1021 [label="182_ function claimReward_TOD28(uint256 submission) public {\n        require (!claimed_TOD28);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD28);\n        claimed_TOD28 = true;\n    }\n1021-function_definition-183-188", method="claimReward_TOD28(uint256 submission)", type_label=function_definition];
1029 [label="183_ require (!claimed_TOD28);\n1029-expression_statement-184-184", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
1035 [label="184_ require(submission < 10);\n1035-expression_statement-185-185", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
1042 [label="185_ msg.sender.transfer(reward_TOD28);\n1042-expression_statement-186-186", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
1051 [label="186_ claimed_TOD28 = true;\n1051-expression_statement-187-187", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
1056 [label="188_ uint256 public operatorWithdrawAmount;\n1056-new_variable-189-189", method="", type_label=new_variable];
1061 [label="189_ bool claimed_TOD34 = false;\n1061-new_variable-190-190", method="", type_label=new_variable];
1067 [label="190_ address payable owner_TOD34;\n1067-new_variable-191-191", method="", type_label=new_variable];
1071 [label="191_ uint256 reward_TOD34;\n1071-new_variable-192-192", method="", type_label=new_variable];
1075 [label="192_ function setReward_TOD34() public payable {\n        require (!claimed_TOD34);\n        require(msg.sender == owner_TOD34);\n        owner_TOD34.transfer(reward_TOD34);\n        reward_TOD34 = msg.value;\n    }\n1075-function_definition-193-198", method="setReward_TOD34()", type_label=function_definition];
1080 [label="193_ require (!claimed_TOD34);\n1080-expression_statement-194-194", method="setReward_TOD34()", type_label=expression_statement];
1086 [label="194_ require(msg.sender == owner_TOD34);\n1086-expression_statement-195-195", method="setReward_TOD34()", type_label=expression_statement];
1095 [label="195_ owner_TOD34.transfer(reward_TOD34);\n1095-expression_statement-196-196", method="setReward_TOD34()", type_label=expression_statement];
1102 [label="196_ reward_TOD34 = msg.value;\n1102-expression_statement-197-197", method="setReward_TOD34()", type_label=expression_statement];
1108 [label="198_ function claimReward_TOD34(uint256 submission) public {\n        require (!claimed_TOD34);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD34);\n        claimed_TOD34 = true;\n    }\n1108-function_definition-199-204", method="claimReward_TOD34(uint256 submission)", type_label=function_definition];
1116 [label="199_ require (!claimed_TOD34);\n1116-expression_statement-200-200", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
1122 [label="200_ require(submission < 10);\n1122-expression_statement-201-201", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
1129 [label="201_ msg.sender.transfer(reward_TOD34);\n1129-expression_statement-202-202", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
1138 [label="202_ claimed_TOD34 = true;\n1138-expression_statement-203-203", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
1143 [label="204_ mapping (address => User) private userMapping;\n1143-new_variable-205-205", method="", type_label=new_variable];
1151 [label="205_ address payable winner_TOD21;\n1151-new_variable-206-206", method="", type_label=new_variable];
1155 [label="206_ function play_TOD21(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD21 = msg.sender;\n        }\n    }\n1155-function_definition-207-211", method="play_TOD21(bytes32 guess)", type_label=function_definition];
1163 [label="207_ if\n1163-if-208-210", method="play_TOD21(bytes32 guess)", type_label=if];
7601 [label="207_ end_if", method="play_TOD21(bytes32 guess)", type_label=end_if];
1185 [label="208_ winner_TOD21 = msg.sender;\n1185-expression_statement-209-209", method="play_TOD21(bytes32 guess)", type_label=expression_statement];
1191 [label="211_ function getReward_TOD21() payable public{\n       winner_TOD21.transfer(msg.value);\n    }\n1191-function_definition-212-214", method="getReward_TOD21()", type_label=function_definition];
1196 [label="212_ winner_TOD21.transfer(msg.value);\n1196-expression_statement-213-213", method="getReward_TOD21()", type_label=expression_statement];
1205 [label="214_ mapping (uint256 => address) private addressMapping;\n1205-new_variable-215-215", method="", type_label=new_variable];
1212 [label="215_ bool claimed_TOD10 = false;\n1212-new_variable-216-216", method="", type_label=new_variable];
1218 [label="216_ address payable owner_TOD10;\n1218-new_variable-217-217", method="", type_label=new_variable];
1222 [label="217_ uint256 reward_TOD10;\n1222-new_variable-218-218", method="", type_label=new_variable];
1226 [label="218_ function setReward_TOD10() public payable {\n        require (!claimed_TOD10);\n        require(msg.sender == owner_TOD10);\n        owner_TOD10.transfer(reward_TOD10);\n        reward_TOD10 = msg.value;\n    }\n1226-function_definition-219-224", method="setReward_TOD10()", type_label=function_definition];
1231 [label="219_ require (!claimed_TOD10);\n1231-expression_statement-220-220", method="setReward_TOD10()", type_label=expression_statement];
1237 [label="220_ require(msg.sender == owner_TOD10);\n1237-expression_statement-221-221", method="setReward_TOD10()", type_label=expression_statement];
1246 [label="221_ owner_TOD10.transfer(reward_TOD10);\n1246-expression_statement-222-222", method="setReward_TOD10()", type_label=expression_statement];
1253 [label="222_ reward_TOD10 = msg.value;\n1253-expression_statement-223-223", method="setReward_TOD10()", type_label=expression_statement];
1259 [label="224_ function claimReward_TOD10(uint256 submission) public {\n        require (!claimed_TOD10);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD10);\n        claimed_TOD10 = true;\n    }\n1259-function_definition-225-230", method="claimReward_TOD10(uint256 submission)", type_label=function_definition];
1267 [label="225_ require (!claimed_TOD10);\n1267-expression_statement-226-226", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
1273 [label="226_ require(submission < 10);\n1273-expression_statement-227-227", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
1280 [label="227_ msg.sender.transfer(reward_TOD10);\n1280-expression_statement-228-228", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
1289 [label="228_ claimed_TOD10 = true;\n1289-expression_statement-229-229", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
1294 [label="230_ mapping (address => InvestRecord[9]) private investRecordMapping;\n1294-new_variable-231-231", method="", type_label=new_variable];
1304 [label="231_ bool claimed_TOD22 = false;\n1304-new_variable-232-232", method="", type_label=new_variable];
1310 [label="232_ address payable owner_TOD22;\n1310-new_variable-233-233", method="", type_label=new_variable];
1314 [label="233_ uint256 reward_TOD22;\n1314-new_variable-234-234", method="", type_label=new_variable];
1318 [label="234_ function setReward_TOD22() public payable {\n        require (!claimed_TOD22);\n        require(msg.sender == owner_TOD22);\n        owner_TOD22.transfer(reward_TOD22);\n        reward_TOD22 = msg.value;\n    }\n1318-function_definition-235-240", method="setReward_TOD22()", type_label=function_definition];
1323 [label="235_ require (!claimed_TOD22);\n1323-expression_statement-236-236", method="setReward_TOD22()", type_label=expression_statement];
1329 [label="236_ require(msg.sender == owner_TOD22);\n1329-expression_statement-237-237", method="setReward_TOD22()", type_label=expression_statement];
1338 [label="237_ owner_TOD22.transfer(reward_TOD22);\n1338-expression_statement-238-238", method="setReward_TOD22()", type_label=expression_statement];
1345 [label="238_ reward_TOD22 = msg.value;\n1345-expression_statement-239-239", method="setReward_TOD22()", type_label=expression_statement];
1351 [label="240_ function claimReward_TOD22(uint256 submission) public {\n        require (!claimed_TOD22);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD22);\n        claimed_TOD22 = true;\n    }\n1351-function_definition-241-246", method="claimReward_TOD22(uint256 submission)", type_label=function_definition];
1359 [label="241_ require (!claimed_TOD22);\n1359-expression_statement-242-242", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1365 [label="242_ require(submission < 10);\n1365-expression_statement-243-243", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1372 [label="243_ msg.sender.transfer(reward_TOD22);\n1372-expression_statement-244-244", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1381 [label="244_ claimed_TOD22 = true;\n1381-expression_statement-245-245", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1386 [label="246_ mapping (address => CommissionRecord[9]) private staticCommissionRecordMapping;\n1386-new_variable-247-247", method="", type_label=new_variable];
1396 [label="247_ bool claimed_TOD12 = false;\n1396-new_variable-248-248", method="", type_label=new_variable];
1402 [label="248_ address payable owner_TOD12;\n1402-new_variable-249-249", method="", type_label=new_variable];
1406 [label="249_ uint256 reward_TOD12;\n1406-new_variable-250-250", method="", type_label=new_variable];
1410 [label="250_ function setReward_TOD12() public payable {\n        require (!claimed_TOD12);\n        require(msg.sender == owner_TOD12);\n        owner_TOD12.transfer(reward_TOD12);\n        reward_TOD12 = msg.value;\n    }\n1410-function_definition-251-256", method="setReward_TOD12()", type_label=function_definition];
1415 [label="251_ require (!claimed_TOD12);\n1415-expression_statement-252-252", method="setReward_TOD12()", type_label=expression_statement];
1421 [label="252_ require(msg.sender == owner_TOD12);\n1421-expression_statement-253-253", method="setReward_TOD12()", type_label=expression_statement];
1430 [label="253_ owner_TOD12.transfer(reward_TOD12);\n1430-expression_statement-254-254", method="setReward_TOD12()", type_label=expression_statement];
1437 [label="254_ reward_TOD12 = msg.value;\n1437-expression_statement-255-255", method="setReward_TOD12()", type_label=expression_statement];
1443 [label="256_ function claimReward_TOD12(uint256 submission) public {\n        require (!claimed_TOD12);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD12);\n        claimed_TOD12 = true;\n    }\n1443-function_definition-257-262", method="claimReward_TOD12(uint256 submission)", type_label=function_definition];
1451 [label="257_ require (!claimed_TOD12);\n1451-expression_statement-258-258", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1457 [label="258_ require(submission < 10);\n1457-expression_statement-259-259", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1464 [label="259_ msg.sender.transfer(reward_TOD12);\n1464-expression_statement-260-260", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1473 [label="260_ claimed_TOD12 = true;\n1473-expression_statement-261-261", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1478 [label="262_ mapping (address => CommissionRecord[9]) private dynamicCommissionRecordMapping;\n1478-new_variable-263-263", method="", type_label=new_variable];
1488 [label="263_ function initialize() public {\n        require(!initialized, \"already initialized\");\n        owner = msg.sender;\n        userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n        initialized = true;\n    }\n1488-function_definition-264-269", method="initialize()", type_label=function_definition];
1492 [label="264_ require(!initialized, \"already initialized\");\n1492-expression_statement-265-265", method="initialize()", type_label=expression_statement];
1501 [label="265_ owner = msg.sender;\n1501-expression_statement-266-266", method="initialize()", type_label=expression_statement];
1507 [label="266_ userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n1507-expression_statement-267-267", method="initialize()", type_label=expression_statement];
1552 [label="267_ initialized = true;\n1552-expression_statement-268-268", method="initialize()", type_label=expression_statement];
1557 [label="269_ address payable winner_TOD11;\n1557-new_variable-270-270", method="", type_label=new_variable];
1561 [label="270_ function play_TOD11(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD11 = msg.sender;\n        }\n    }\n1561-function_definition-271-275", method="play_TOD11(bytes32 guess)", type_label=function_definition];
1569 [label="271_ if\n1569-if-272-274", method="play_TOD11(bytes32 guess)", type_label=if];
8007 [label="271_ end_if", method="play_TOD11(bytes32 guess)", type_label=end_if];
1591 [label="272_ winner_TOD11 = msg.sender;\n1591-expression_statement-273-273", method="play_TOD11(bytes32 guess)", type_label=expression_statement];
1597 [label="275_ function getReward_TOD11() payable public{\n       winner_TOD11.transfer(msg.value);\n    }\n1597-function_definition-276-278", method="getReward_TOD11()", type_label=function_definition];
1602 [label="276_ winner_TOD11.transfer(msg.value);\n1602-expression_statement-277-277", method="getReward_TOD11()", type_label=expression_statement];
1613 [label="279_ initialize();\n1613-expression_statement-280-280", method="", type_label=expression_statement];
1616 [label="281_ address payable winner_TOD1;\n1616-new_variable-282-282", method="", type_label=new_variable];
1620 [label="282_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n1620-function_definition-283-287", method="play_TOD1(bytes32 guess)", type_label=function_definition];
1628 [label="283_ if\n1628-if-284-286", method="play_TOD1(bytes32 guess)", type_label=if];
8066 [label="283_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
1650 [label="284_ winner_TOD1 = msg.sender;\n1650-expression_statement-285-285", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
1656 [label="287_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n1656-function_definition-288-290", method="getReward_TOD1()", type_label=function_definition];
1661 [label="288_ winner_TOD1.transfer(msg.value);\n1661-expression_statement-289-289", method="getReward_TOD1()", type_label=expression_statement];
1670 [label="290_ modifier onlyOwner() {\n        require(msg.sender == owner, \"onlyOwner\");\n        _;\n    }\n1670-expression_statement-291-294", method="", type_label=expression_statement];
1673 [label="291_ require(msg.sender == owner, \"onlyOwner\");\n1673-expression_statement-292-292", method="", type_label=expression_statement];
1685 [label="292_ _;\n1685-expression_statement-293-293", method="", type_label=expression_statement];
1687 [label="294_ modifier onlyEngineer() {\n        require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n        _;\n    }\n1687-expression_statement-295-298", method="", type_label=expression_statement];
1690 [label="295_ require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n1690-expression_statement-296-296", method="", type_label=expression_statement];
1702 [label="296_ _;\n1702-expression_statement-297-297", method="", type_label=expression_statement];
1704 [label="298_ function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n        owner = newOwner;\n    }\n1704-function_definition-299-302", method="transferOwnership(address newOwner)", type_label=function_definition];
1711 [label="298_ onlyOwner\n1711-expression_statement-299-299", method="transferOwnership(address newOwner)", type_label=expression_statement];
1714 [label="299_ require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n1714-expression_statement-300-300", method="transferOwnership(address newOwner)", type_label=expression_statement];
1726 [label="300_ owner = newOwner;\n1726-expression_statement-301-301", method="transferOwnership(address newOwner)", type_label=expression_statement];
1730 [label="302_ bool claimed_TOD2 = false;\n1730-new_variable-303-303", method="", type_label=new_variable];
1736 [label="303_ address payable owner_TOD2;\n1736-new_variable-304-304", method="", type_label=new_variable];
1740 [label="304_ uint256 reward_TOD2;\n1740-new_variable-305-305", method="", type_label=new_variable];
1744 [label="305_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n1744-function_definition-306-311", method="setReward_TOD2()", type_label=function_definition];
1749 [label="306_ require (!claimed_TOD2);\n1749-expression_statement-307-307", method="setReward_TOD2()", type_label=expression_statement];
1755 [label="307_ require(msg.sender == owner_TOD2);\n1755-expression_statement-308-308", method="setReward_TOD2()", type_label=expression_statement];
1764 [label="308_ owner_TOD2.transfer(reward_TOD2);\n1764-expression_statement-309-309", method="setReward_TOD2()", type_label=expression_statement];
1771 [label="309_ reward_TOD2 = msg.value;\n1771-expression_statement-310-310", method="setReward_TOD2()", type_label=expression_statement];
1777 [label="311_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n1777-function_definition-312-317", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
1785 [label="312_ require (!claimed_TOD2);\n1785-expression_statement-313-313", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1791 [label="313_ require(submission < 10);\n1791-expression_statement-314-314", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1798 [label="314_ msg.sender.transfer(reward_TOD2);\n1798-expression_statement-315-315", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1807 [label="315_ claimed_TOD2 = true;\n1807-expression_statement-316-316", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1812 [label="317_ function getLevelByInvestAmount(uint256 investAmount) private pure returns (uint256 level) {\n        if (investAmount >= ONE_ETH.mul(11)) {\n            level = 3;\n        } else if (investAmount >= ONE_ETH.mul(6)) {\n            level = 2;\n        } else {\n            level = 1;\n        }\n    }\n1812-function_definition-318-326", method="getLevelByInvestAmount(uint256 investAmount)", type_label=function_definition];
1826 [label="318_ if\n1826-if-319-325", method="getLevelByInvestAmount(uint256 investAmount)", type_label=if];
8264 [label="318_ end_if", method="getLevelByInvestAmount(uint256 investAmount)", type_label=end_if];
1836 [label="319_ level = 3;\n1836-expression_statement-320-320", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1840 [label="320_ if\n1840-if-321-325", method="getLevelByInvestAmount(uint256 investAmount)", type_label=if];
1850 [label="321_ level = 2;\n1850-expression_statement-322-322", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1855 [label="323_ level = 1;\n1855-expression_statement-324-324", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1859 [label="326_ address payable winner_TOD17;\n1859-new_variable-327-327", method="", type_label=new_variable];
1863 [label="327_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n1863-function_definition-328-332", method="play_TOD17(bytes32 guess)", type_label=function_definition];
1871 [label="328_ if\n1871-if-329-331", method="play_TOD17(bytes32 guess)", type_label=if];
8309 [label="328_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
1893 [label="329_ winner_TOD17 = msg.sender;\n1893-expression_statement-330-330", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
1899 [label="332_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n1899-function_definition-333-335", method="getReward_TOD17()", type_label=function_definition];
1904 [label="333_ winner_TOD17.transfer(msg.value);\n1904-expression_statement-334-334", method="getReward_TOD17()", type_label=expression_statement];
1913 [label="335_ function isInvestExpired(User memory user) private view returns (bool expired) {\n        expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n    }\n1913-function_definition-336-338", method="isInvestExpired(User memory user)", type_label=function_definition];
1928 [label="336_ expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n1928-expression_statement-337-337", method="isInvestExpired(User memory user)", type_label=expression_statement];
1949 [label="338_ address payable winner_TOD37;\n1949-new_variable-339-339", method="", type_label=new_variable];
1953 [label="339_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n1953-function_definition-340-344", method="play_TOD37(bytes32 guess)", type_label=function_definition];
1961 [label="340_ if\n1961-if-341-343", method="play_TOD37(bytes32 guess)", type_label=if];
8399 [label="340_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
1983 [label="341_ winner_TOD37 = msg.sender;\n1983-expression_statement-342-342", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
1989 [label="344_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n1989-function_definition-345-347", method="getReward_TOD37()", type_label=function_definition];
1994 [label="345_ winner_TOD37.transfer(msg.value);\n1994-expression_statement-346-346", method="getReward_TOD37()", type_label=expression_statement];
2003 [label="347_ function getAbortInvestAmount(User memory user) private view returns (uint256 amount) {\n        uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n        require(commissionDays >= 3, \"Invest time must >= 3days\");\n        uint256 lossRatio = 15;\n        if (commissionDays >= 60) {\n            lossRatio = 5;\n        } else if (commissionDays >= 30) {\n            lossRatio = 10;\n        }\n        amount = user.currentInvestAmount;\n        amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n    }\n2003-function_definition-348-359", method="getAbortInvestAmount(User memory user)", type_label=function_definition];
2018 [label="348_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n2018-new_variable-349-349", method="getAbortInvestAmount(User memory user)", type_label=new_variable];
2036 [label="349_ require(commissionDays >= 3, \"Invest time must >= 3days\");\n2036-expression_statement-350-350", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
2046 [label="350_ uint256 lossRatio = 15;\n2046-new_variable-351-351", method="getAbortInvestAmount(User memory user)", type_label=new_variable];
2052 [label="351_ if_commissionDays >= 60\n2052-if-352-356", method="getAbortInvestAmount(User memory user)", type_label=if];
8490 [label="351_ end_if", method="getAbortInvestAmount(User memory user)", type_label=end_if];
2057 [label="352_ lossRatio = 5;\n2057-expression_statement-353-353", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
2061 [label="353_ if_commissionDays >= 30\n2061-if-354-356", method="getAbortInvestAmount(User memory user)", type_label=if];
2066 [label="354_ lossRatio = 10;\n2066-expression_statement-355-355", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
2070 [label="356_ amount = user.currentInvestAmount;\n2070-expression_statement-357-357", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
2076 [label="357_ amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n2076-expression_statement-358-358", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
2097 [label="359_ address payable winner_TOD3;\n2097-new_variable-360-360", method="", type_label=new_variable];
2101 [label="360_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n2101-function_definition-361-365", method="play_TOD3(bytes32 guess)", type_label=function_definition];
2109 [label="361_ if\n2109-if-362-364", method="play_TOD3(bytes32 guess)", type_label=if];
8547 [label="361_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
2131 [label="362_ winner_TOD3 = msg.sender;\n2131-expression_statement-363-363", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
2137 [label="365_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n2137-function_definition-366-368", method="getReward_TOD3()", type_label=function_definition];
2142 [label="366_ winner_TOD3.transfer(msg.value);\n2142-expression_statement-367-367", method="getReward_TOD3()", type_label=expression_statement];
2151 [label="368_ function getStaticCommissionRatio(uint256 level, uint256 investCycle) private pure returns (uint256 ratio) {\n        if (level == 1) {\n            if (investCycle == 30) {\n                ratio = 7;\n            } else if(investCycle == 60) {\n                ratio = 8;\n            } else {\n                ratio = 9;\n            }\n        } else if (level == 2) {\n            if (investCycle == 30) {\n                ratio = 8;\n            } else if(investCycle == 60) {\n                ratio = 9;\n            } else {\n                ratio = 10;\n            }\n        } else {\n            if (investCycle == 30) {\n                ratio = 11;\n            } else if(investCycle == 60) {\n                ratio = 12;\n            } else {\n                ratio = 13;\n            }\n        }\n    }\n2151-function_definition-369-395", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=function_definition];
2169 [label="369_ if_level == 1\n2169-if-370-394", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
8607 [label="369_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
2174 [label="370_ if_investCycle == 30\n2174-if-371-377", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
8612 [label="370_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
2179 [label="371_ ratio = 7;\n2179-expression_statement-372-372", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
2183 [label="372_ if_investCycle == 60\n2183-if-373-377", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
2188 [label="373_ ratio = 8;\n2188-expression_statement-374-374", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
2193 [label="375_ ratio = 9;\n2193-expression_statement-376-376", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
2197 [label="377_ if_level == 2\n2197-if-378-394", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
2202 [label="378_ if_investCycle == 30\n2202-if-379-385", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
8640 [label="378_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
2207 [label="379_ ratio = 8;\n2207-expression_statement-380-380", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
2211 [label="380_ if_investCycle == 60\n2211-if-381-385", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
2216 [label="381_ ratio = 9;\n2216-expression_statement-382-382", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
2221 [label="383_ ratio = 10;\n2221-expression_statement-384-384", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
2226 [label="386_ if_investCycle == 30\n2226-if-387-393", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
8664 [label="386_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
2231 [label="387_ ratio = 11;\n2231-expression_statement-388-388", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
2235 [label="388_ if_investCycle == 60\n2235-if-389-393", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
2240 [label="389_ ratio = 12;\n2240-expression_statement-390-390", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
2245 [label="391_ ratio = 13;\n2245-expression_statement-392-392", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
2249 [label="395_ address payable winner_TOD9;\n2249-new_variable-396-396", method="", type_label=new_variable];
2253 [label="396_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n2253-function_definition-397-401", method="play_TOD9(bytes32 guess)", type_label=function_definition];
2261 [label="397_ if\n2261-if-398-400", method="play_TOD9(bytes32 guess)", type_label=if];
8699 [label="397_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
2283 [label="398_ winner_TOD9 = msg.sender;\n2283-expression_statement-399-399", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
2289 [label="401_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n2289-function_definition-402-404", method="getReward_TOD9()", type_label=function_definition];
2294 [label="402_ winner_TOD9.transfer(msg.value);\n2294-expression_statement-403-403", method="getReward_TOD9()", type_label=expression_statement];
2303 [label="404_ function getDynamicCommissionRatio(User memory user, uint256 depth) private pure returns (uint256 ratio) {\n        if (user.currentlevel == 1) {\n            if (depth == 1) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else if (user.currentlevel == 2) {\n            if (depth == 1) {\n                ratio = 70;\n            } else if (depth == 2) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else {\n            if (depth == 1) {\n                ratio = 100;\n            } else if (depth == 2) {\n                ratio = 70;\n            } else if (depth == 3) {\n                ratio = 50;\n            } else if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }\n        }\n    }\n2303-function_definition-405-435", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=function_definition];
2322 [label="405_ if_user.currentlevel == 1\n2322-if-406-434", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
8760 [label="405_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
2329 [label="406_ if_depth == 1\n2329-if-407-411", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
8767 [label="406_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
2334 [label="407_ ratio = 50;\n2334-expression_statement-408-408", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
2339 [label="409_ ratio = 0;\n2339-expression_statement-410-410", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
2343 [label="411_ if_user.currentlevel == 2\n2343-if-412-434", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
2350 [label="412_ if_depth == 1\n2350-if-413-419", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
8788 [label="412_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
2355 [label="413_ ratio = 70;\n2355-expression_statement-414-414", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
2359 [label="414_ if_depth == 2\n2359-if-415-419", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
2364 [label="415_ ratio = 50;\n2364-expression_statement-416-416", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
2369 [label="417_ ratio = 0;\n2369-expression_statement-418-418", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
2374 [label="420_ if_depth == 1\n2374-if-421-433", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
8812 [label="420_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
2379 [label="421_ ratio = 100;\n2379-expression_statement-422-422", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
2383 [label="422_ if_depth == 2\n2383-if-423-433", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
2388 [label="423_ ratio = 70;\n2388-expression_statement-424-424", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
2392 [label="424_ if_depth == 3\n2392-if-425-433", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
2397 [label="425_ ratio = 50;\n2397-expression_statement-426-426", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
2401 [label="426_ if_depth >= 4 && depth <= 10\n2401-if-427-433", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
2410 [label="427_ ratio = 10;\n2410-expression_statement-428-428", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
2414 [label="428_ if_depth >= 11 && depth <= 20\n2414-if-429-433", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
2423 [label="429_ ratio = 5;\n2423-expression_statement-430-430", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
2428 [label="431_ ratio = 1;\n2428-expression_statement-432-432", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
2432 [label="435_ address payable winner_TOD25;\n2432-new_variable-436-436", method="", type_label=new_variable];
2436 [label="436_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n2436-function_definition-437-441", method="play_TOD25(bytes32 guess)", type_label=function_definition];
2444 [label="437_ if\n2444-if-438-440", method="play_TOD25(bytes32 guess)", type_label=if];
8882 [label="437_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
2466 [label="438_ winner_TOD25 = msg.sender;\n2466-expression_statement-439-439", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
2472 [label="441_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n2472-function_definition-442-444", method="getReward_TOD25()", type_label=function_definition];
2477 [label="442_ winner_TOD25.transfer(msg.value);\n2477-expression_statement-443-443", method="getReward_TOD25()", type_label=expression_statement];
2486 [label="444_ function getAvaliableStaticCommissionAmount(User memory user) private view returns (uint256 amount) {\n        if (user.currentInvestAmount == 0) {\n            amount = 0;\n        } else {\n            uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n            if (commissionDays > user.currentInvestCycle) {\n                commissionDays = user.currentInvestCycle;\n            }\n            amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n            amount = amount.div(1000);\n            amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n        }\n    }\n2486-function_definition-445-457", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=function_definition];
2501 [label="445_ if_user.currentInvestAmount == 0\n2501-if-446-456", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=if];
8939 [label="445_ end_if", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=end_if];
2508 [label="446_ amount = 0;\n2508-expression_statement-447-447", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
2513 [label="448_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n2513-new_variable-449-449", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=new_variable];
2531 [label="449_ if_commissionDays > user.currentInvestCycle\n2531-if-450-452", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=if];
8969 [label="449_ end_if", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=end_if];
2538 [label="450_ commissionDays = user.currentInvestCycle;\n2538-expression_statement-451-451", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
2544 [label="452_ amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n2544-expression_statement-453-453", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
2562 [label="453_ amount = amount.div(1000);\n2562-expression_statement-454-454", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
2571 [label="454_ amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n2571-expression_statement-455-455", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
2582 [label="457_ address payable winner_TOD19;\n2582-new_variable-458-458", method="", type_label=new_variable];
2586 [label="458_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n2586-function_definition-459-463", method="play_TOD19(bytes32 guess)", type_label=function_definition];
2594 [label="459_ if\n2594-if-460-462", method="play_TOD19(bytes32 guess)", type_label=if];
9032 [label="459_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
2616 [label="460_ winner_TOD19 = msg.sender;\n2616-expression_statement-461-461", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
2622 [label="463_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n2622-function_definition-464-466", method="getReward_TOD19()", type_label=function_definition];
2627 [label="464_ winner_TOD19.transfer(msg.value);\n2627-expression_statement-465-465", method="getReward_TOD19()", type_label=expression_statement];
2636 [label="466_ function addInvestRecord(address userAddress, uint256 time, uint256 amount, uint256 cycle) private {\n        InvestRecord[9] storage records = investRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            InvestRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = InvestRecord(time, amount, cycle);\n    }\n2636-function_definition-467-474", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=function_definition];
2656 [label="467_ InvestRecord[9] storage records = investRecordMapping[userAddress];\n2656-new_variable-468-468", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=new_variable];
2667 [label="468_ for(i > 0;;--i)\n2667-for-469-472", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=for];
9105 [label="468_ end_loop", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=end_loop];
2678 [label="468_ --i\n2678-expression_statement-469-469", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
2681 [label="469_ InvestRecord memory prevRecord = records[i - 1];\n2681-new_variable-470-470", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=new_variable];
2692 [label="470_ records[i] = prevRecord;\n2692-expression_statement-471-471", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
2698 [label="472_ records[0] = InvestRecord(time, amount, cycle);\n2698-expression_statement-473-473", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
2711 [label="474_ bool claimed_TOD26 = false;\n2711-new_variable-475-475", method="", type_label=new_variable];
2717 [label="475_ address payable owner_TOD26;\n2717-new_variable-476-476", method="", type_label=new_variable];
2721 [label="476_ uint256 reward_TOD26;\n2721-new_variable-477-477", method="", type_label=new_variable];
2725 [label="477_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n2725-function_definition-478-483", method="setReward_TOD26()", type_label=function_definition];
2730 [label="478_ require (!claimed_TOD26);\n2730-expression_statement-479-479", method="setReward_TOD26()", type_label=expression_statement];
2736 [label="479_ require(msg.sender == owner_TOD26);\n2736-expression_statement-480-480", method="setReward_TOD26()", type_label=expression_statement];
2745 [label="480_ owner_TOD26.transfer(reward_TOD26);\n2745-expression_statement-481-481", method="setReward_TOD26()", type_label=expression_statement];
2752 [label="481_ reward_TOD26 = msg.value;\n2752-expression_statement-482-482", method="setReward_TOD26()", type_label=expression_statement];
2758 [label="483_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n2758-function_definition-484-489", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
2766 [label="484_ require (!claimed_TOD26);\n2766-expression_statement-485-485", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2772 [label="485_ require(submission < 10);\n2772-expression_statement-486-486", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2779 [label="486_ msg.sender.transfer(reward_TOD26);\n2779-expression_statement-487-487", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2788 [label="487_ claimed_TOD26 = true;\n2788-expression_statement-488-488", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2793 [label="489_ function addStaticCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }\n2793-function_definition-490-497", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=function_definition];
2809 [label="490_ CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n2809-new_variable-491-491", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2820 [label="491_ for(i > 0;;--i)\n2820-for-492-495", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=for];
9258 [label="491_ end_loop", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=end_loop];
2831 [label="491_ --i\n2831-expression_statement-492-492", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2834 [label="492_ CommissionRecord memory prevRecord = records[i - 1];\n2834-new_variable-493-493", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2845 [label="493_ records[i] = prevRecord;\n2845-expression_statement-494-494", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2851 [label="495_ records[0] = CommissionRecord(time, amount);\n2851-expression_statement-496-496", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2862 [label="497_ bool claimed_TOD20 = false;\n2862-new_variable-498-498", method="", type_label=new_variable];
2868 [label="498_ address payable owner_TOD20;\n2868-new_variable-499-499", method="", type_label=new_variable];
2872 [label="499_ uint256 reward_TOD20;\n2872-new_variable-500-500", method="", type_label=new_variable];
2876 [label="500_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n2876-function_definition-501-506", method="setReward_TOD20()", type_label=function_definition];
2881 [label="501_ require (!claimed_TOD20);\n2881-expression_statement-502-502", method="setReward_TOD20()", type_label=expression_statement];
2887 [label="502_ require(msg.sender == owner_TOD20);\n2887-expression_statement-503-503", method="setReward_TOD20()", type_label=expression_statement];
2896 [label="503_ owner_TOD20.transfer(reward_TOD20);\n2896-expression_statement-504-504", method="setReward_TOD20()", type_label=expression_statement];
2903 [label="504_ reward_TOD20 = msg.value;\n2903-expression_statement-505-505", method="setReward_TOD20()", type_label=expression_statement];
2909 [label="506_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n2909-function_definition-507-512", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
2917 [label="507_ require (!claimed_TOD20);\n2917-expression_statement-508-508", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2923 [label="508_ require(submission < 10);\n2923-expression_statement-509-509", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2930 [label="509_ msg.sender.transfer(reward_TOD20);\n2930-expression_statement-510-510", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2939 [label="510_ claimed_TOD20 = true;\n2939-expression_statement-511-511", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2944 [label="512_ function addDynamicCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }\n2944-function_definition-513-520", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=function_definition];
2960 [label="513_ CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n2960-new_variable-514-514", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2971 [label="514_ for(i > 0;;--i)\n2971-for-515-518", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=for];
9409 [label="514_ end_loop", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=end_loop];
2982 [label="514_ --i\n2982-expression_statement-515-515", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2985 [label="515_ CommissionRecord memory prevRecord = records[i - 1];\n2985-new_variable-516-516", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2996 [label="516_ records[i] = prevRecord;\n2996-expression_statement-517-517", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
3002 [label="518_ records[0] = CommissionRecord(time, amount);\n3002-expression_statement-519-519", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
3013 [label="520_ bool claimed_TOD32 = false;\n3013-new_variable-521-521", method="", type_label=new_variable];
3019 [label="521_ address payable owner_TOD32;\n3019-new_variable-522-522", method="", type_label=new_variable];
3023 [label="522_ uint256 reward_TOD32;\n3023-new_variable-523-523", method="", type_label=new_variable];
3027 [label="523_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n3027-function_definition-524-529", method="setReward_TOD32()", type_label=function_definition];
3032 [label="524_ require (!claimed_TOD32);\n3032-expression_statement-525-525", method="setReward_TOD32()", type_label=expression_statement];
3038 [label="525_ require(msg.sender == owner_TOD32);\n3038-expression_statement-526-526", method="setReward_TOD32()", type_label=expression_statement];
3047 [label="526_ owner_TOD32.transfer(reward_TOD32);\n3047-expression_statement-527-527", method="setReward_TOD32()", type_label=expression_statement];
3054 [label="527_ reward_TOD32 = msg.value;\n3054-expression_statement-528-528", method="setReward_TOD32()", type_label=expression_statement];
3060 [label="529_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n3060-function_definition-530-535", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
3068 [label="530_ require (!claimed_TOD32);\n3068-expression_statement-531-531", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
3074 [label="531_ require(submission < 10);\n3074-expression_statement-532-532", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
3081 [label="532_ msg.sender.transfer(reward_TOD32);\n3081-expression_statement-533-533", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
3090 [label="533_ claimed_TOD32 = true;\n3090-expression_statement-534-534", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
3095 [label="535_ function invest(address sponsorAddress, uint256 investCycle) external payable {\n        User storage sponsor = userMapping[sponsorAddress];\n        require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n        require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n        uint256 investAmount = msg.value.div(ONE_ETH);\n        investAmount = investAmount.mul(ONE_ETH);\n        require(investAmount == msg.value, \"Invest amount is not integer\");\n        require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n        User memory user = userMapping[msg.sender];\n        uint256 level = getLevelByInvestAmount(investAmount);\n        if (user.totalInvestCount > 0) {\n            require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n            require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n            require(user.currentInvestTime == 0, \"Invalid state\");\n            require(user.currentInvestCycle == 0, \"Invalid state\");\n            require(user.currentlevel == 0, \"Invalid state\");\n            require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n            require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n            user.totalInvestCount = user.totalInvestCount.add(1);\n            user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n            user.currentInvestTime = now;\n            user.currentInvestAmount = investAmount;\n            user.currentInvestCycle = investCycle;\n            user.currentlevel = level;\n            user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n            userMapping[msg.sender] = user;\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        } else {\n            userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n            addressMapping[totalUserCount] = msg.sender;\n            totalUserCount = totalUserCount.add(1);\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.downlineCount = sponsor.downlineCount.add(1);\n                if (addressWalker == sponsorAddress) {\n                    sponsor.nodeCount = sponsor.nodeCount.add(1);\n                }\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        }\n        addInvestRecord(msg.sender, now, investAmount, investCycle);\n        totalInvestCount = totalInvestCount.add(1);\n        totalInvestAmount = totalInvestAmount.add(investAmount);\n        engineerFunds = engineerFunds.add(investAmount.div(50));\n        operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n    }\n3095-function_definition-536-591", method="invest(address sponsorAddress,uint256 investCycle)", type_label=function_definition];
3108 [label="536_ User storage sponsor = userMapping[sponsorAddress];\n3108-new_variable-537-537", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
3117 [label="537_ require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n3117-expression_statement-538-538", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3129 [label="538_ require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n3129-expression_statement-539-539", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3147 [label="539_ uint256 investAmount = msg.value.div(ONE_ETH);\n3147-new_variable-540-540", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
3160 [label="540_ investAmount = investAmount.mul(ONE_ETH);\n3160-expression_statement-541-541", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3169 [label="541_ require(investAmount == msg.value, \"Invest amount is not integer\");\n3169-expression_statement-542-542", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3181 [label="542_ require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n3181-expression_statement-543-543", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3205 [label="543_ User memory user = userMapping[msg.sender];\n3205-new_variable-544-544", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
3216 [label="544_ uint256 level = getLevelByInvestAmount(investAmount);\n3216-new_variable-545-545", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
3225 [label="545_ if_user.totalInvestCount > 0\n3225-if-546-585", method="invest(address sponsorAddress,uint256 investCycle)", type_label=if];
9663 [label="545_ end_if", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_if];
3232 [label="546_ require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n3232-expression_statement-547-547", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3244 [label="547_ require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n3244-expression_statement-548-548", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3256 [label="548_ require(user.currentInvestTime == 0, \"Invalid state\");\n3256-expression_statement-549-549", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3268 [label="549_ require(user.currentInvestCycle == 0, \"Invalid state\");\n3268-expression_statement-550-550", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3280 [label="550_ require(user.currentlevel == 0, \"Invalid state\");\n3280-expression_statement-551-551", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3292 [label="551_ require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n3292-expression_statement-552-552", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3304 [label="552_ require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n3304-expression_statement-553-553", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3316 [label="553_ user.totalInvestCount = user.totalInvestCount.add(1);\n3316-expression_statement-554-554", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3329 [label="554_ user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n3329-expression_statement-555-555", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3342 [label="555_ user.currentInvestTime = now;\n3342-expression_statement-556-556", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3348 [label="556_ user.currentInvestAmount = investAmount;\n3348-expression_statement-557-557", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3354 [label="557_ user.currentInvestCycle = investCycle;\n3354-expression_statement-558-558", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3360 [label="558_ user.currentlevel = level;\n3360-expression_statement-559-559", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3366 [label="559_ user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n3366-expression_statement-560-560", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3377 [label="560_ userMapping[msg.sender] = user;\n3377-expression_statement-561-561", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3385 [label="561_ address addressWalker = sponsorAddress;\n3385-new_variable-562-562", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
3391 [label="562_ while\n3391-while-563-567", method="invest(address sponsorAddress,uint256 investCycle)", type_label=while];
9829 [label="562_ end_loop", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_loop];
3396 [label="563_ sponsor = userMapping[addressWalker];\n3396-expression_statement-564-564", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3402 [label="564_ sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n3402-expression_statement-565-565", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3415 [label="565_ addressWalker = sponsor.sponsorAddress;\n3415-expression_statement-566-566", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3422 [label="568_ userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n3422-expression_statement-569-572", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3472 [label="572_ addressMapping[totalUserCount] = msg.sender;\n3472-expression_statement-573-573", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3480 [label="573_ totalUserCount = totalUserCount.add(1);\n3480-expression_statement-574-574", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3489 [label="574_ address addressWalker = sponsorAddress;\n3489-new_variable-575-575", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
3495 [label="575_ while\n3495-while-576-584", method="invest(address sponsorAddress,uint256 investCycle)", type_label=while];
9933 [label="575_ end_loop", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_loop];
3500 [label="576_ sponsor = userMapping[addressWalker];\n3500-expression_statement-577-577", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3506 [label="577_ sponsor.downlineCount = sponsor.downlineCount.add(1);\n3506-expression_statement-578-578", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3519 [label="578_ if_addressWalker == sponsorAddress\n3519-if-579-581", method="invest(address sponsorAddress,uint256 investCycle)", type_label=if];
9957 [label="578_ end_if", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_if];
3524 [label="579_ sponsor.nodeCount = sponsor.nodeCount.add(1);\n3524-expression_statement-580-580", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3537 [label="581_ sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n3537-expression_statement-582-582", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3550 [label="582_ addressWalker = sponsor.sponsorAddress;\n3550-expression_statement-583-583", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3556 [label="585_ addInvestRecord(msg.sender, now, investAmount, investCycle);\n3556-expression_statement-586-586", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3569 [label="586_ totalInvestCount = totalInvestCount.add(1);\n3569-expression_statement-587-587", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3578 [label="587_ totalInvestAmount = totalInvestAmount.add(investAmount);\n3578-expression_statement-588-588", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3587 [label="588_ engineerFunds = engineerFunds.add(investAmount.div(50));\n3587-expression_statement-589-589", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3601 [label="589_ operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n3601-expression_statement-590-590", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
3620 [label="591_ bool claimed_TOD38 = false;\n3620-new_variable-592-592", method="", type_label=new_variable];
3626 [label="592_ address payable owner_TOD38;\n3626-new_variable-593-593", method="", type_label=new_variable];
3630 [label="593_ uint256 reward_TOD38;\n3630-new_variable-594-594", method="", type_label=new_variable];
3634 [label="594_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n3634-function_definition-595-600", method="setReward_TOD38()", type_label=function_definition];
3639 [label="595_ require (!claimed_TOD38);\n3639-expression_statement-596-596", method="setReward_TOD38()", type_label=expression_statement];
3645 [label="596_ require(msg.sender == owner_TOD38);\n3645-expression_statement-597-597", method="setReward_TOD38()", type_label=expression_statement];
3654 [label="597_ owner_TOD38.transfer(reward_TOD38);\n3654-expression_statement-598-598", method="setReward_TOD38()", type_label=expression_statement];
3661 [label="598_ reward_TOD38 = msg.value;\n3661-expression_statement-599-599", method="setReward_TOD38()", type_label=expression_statement];
3667 [label="600_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n3667-function_definition-601-606", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
3675 [label="601_ require (!claimed_TOD38);\n3675-expression_statement-602-602", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
3681 [label="602_ require(submission < 10);\n3681-expression_statement-603-603", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
3688 [label="603_ msg.sender.transfer(reward_TOD38);\n3688-expression_statement-604-604", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
3697 [label="604_ claimed_TOD38 = true;\n3697-expression_statement-605-605", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
3702 [label="606_ function userWithdraw() external {\n        User storage user = userMapping[msg.sender];\n        if (user.currentInvestAmount > 0) {\n            uint256 avaliableIA = user.currentInvestAmount;\n            if (!isInvestExpired(user)) {\n                avaliableIA = getAbortInvestAmount(user);\n            }\n            uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n            user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n            user.currentInvestTime = 0;\n            user.currentInvestAmount = 0;\n            user.currentInvestCycle = 0;\n            user.currentlevel = 0;\n            user.currentStaticCommissionRatio = 0;\n            user.currentStaticCommissionWithdrawAmount = 0;\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n            msg.sender.transfer(avaliableIA);\n        }\n    }\n3702-function_definition-607-626", method="userWithdraw()", type_label=function_definition];
3706 [label="607_ User storage user = userMapping[msg.sender];\n3706-new_variable-608-608", method="userWithdraw()", type_label=new_variable];
3717 [label="608_ if_user.currentInvestAmount > 0\n3717-if-609-625", method="userWithdraw()", type_label=if];
10155 [label="608_ end_if", method="userWithdraw()", type_label=end_if];
3724 [label="609_ uint256 avaliableIA = user.currentInvestAmount;\n3724-new_variable-610-610", method="userWithdraw()", type_label=new_variable];
3732 [label="610_ if\n3732-if-611-613", method="userWithdraw()", type_label=if];
10170 [label="610_ end_if", method="userWithdraw()", type_label=end_if];
3739 [label="611_ avaliableIA = getAbortInvestAmount(user);\n3739-expression_statement-612-612", method="userWithdraw()", type_label=expression_statement];
3746 [label="613_ uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n3746-new_variable-614-614", method="userWithdraw()", type_label=new_variable];
3755 [label="614_ user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n3755-expression_statement-615-615", method="userWithdraw()", type_label=expression_statement];
3768 [label="615_ user.currentInvestTime = 0;\n3768-expression_statement-616-616", method="userWithdraw()", type_label=expression_statement];
3774 [label="616_ user.currentInvestAmount = 0;\n3774-expression_statement-617-617", method="userWithdraw()", type_label=expression_statement];
3780 [label="617_ user.currentInvestCycle = 0;\n3780-expression_statement-618-618", method="userWithdraw()", type_label=expression_statement];
3786 [label="618_ user.currentlevel = 0;\n3786-expression_statement-619-619", method="userWithdraw()", type_label=expression_statement];
3792 [label="619_ user.currentStaticCommissionRatio = 0;\n3792-expression_statement-620-620", method="userWithdraw()", type_label=expression_statement];
3798 [label="620_ user.currentStaticCommissionWithdrawAmount = 0;\n3798-expression_statement-621-621", method="userWithdraw()", type_label=expression_statement];
3804 [label="621_ user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n3804-expression_statement-622-622", method="userWithdraw()", type_label=expression_statement];
3817 [label="622_ totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n3817-expression_statement-623-623", method="userWithdraw()", type_label=expression_statement];
3826 [label="623_ msg.sender.transfer(avaliableIA);\n3826-expression_statement-624-624", method="userWithdraw()", type_label=expression_statement];
3835 [label="626_ bool claimed_TOD4 = false;\n3835-new_variable-627-627", method="", type_label=new_variable];
3841 [label="627_ address payable owner_TOD4;\n3841-new_variable-628-628", method="", type_label=new_variable];
3845 [label="628_ uint256 reward_TOD4;\n3845-new_variable-629-629", method="", type_label=new_variable];
3849 [label="629_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n3849-function_definition-630-635", method="setReward_TOD4()", type_label=function_definition];
3854 [label="630_ require (!claimed_TOD4);\n3854-expression_statement-631-631", method="setReward_TOD4()", type_label=expression_statement];
3860 [label="631_ require(msg.sender == owner_TOD4);\n3860-expression_statement-632-632", method="setReward_TOD4()", type_label=expression_statement];
3869 [label="632_ owner_TOD4.transfer(reward_TOD4);\n3869-expression_statement-633-633", method="setReward_TOD4()", type_label=expression_statement];
3876 [label="633_ reward_TOD4 = msg.value;\n3876-expression_statement-634-634", method="setReward_TOD4()", type_label=expression_statement];
3882 [label="635_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n3882-function_definition-636-641", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
3890 [label="636_ require (!claimed_TOD4);\n3890-expression_statement-637-637", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
3896 [label="637_ require(submission < 10);\n3896-expression_statement-638-638", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
3903 [label="638_ msg.sender.transfer(reward_TOD4);\n3903-expression_statement-639-639", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
3912 [label="639_ claimed_TOD4 = true;\n3912-expression_statement-640-640", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
3917 [label="641_ function userWithdrawCommission() external {\n        User storage user = userMapping[msg.sender];\n        uint256 avaliableDCB = user.dynamicCommissionBalance;\n        uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n        uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n        uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n        if (avaliableWithdrawAmount >= ONE_ETH.div(10)) {\n            user.staticCommissionBalance = 0;\n            user.dynamicCommissionBalance = 0;\n            user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n            user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n            totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n            if (avaliableSCB > 0) {\n                addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n            }\n            msg.sender.transfer(avaliableWithdrawAmount);\n        }\n    }\n3917-function_definition-642-663", method="userWithdrawCommission()", type_label=function_definition];
3921 [label="642_ User storage user = userMapping[msg.sender];\n3921-new_variable-643-643", method="userWithdrawCommission()", type_label=new_variable];
3932 [label="643_ uint256 avaliableDCB = user.dynamicCommissionBalance;\n3932-new_variable-644-644", method="userWithdrawCommission()", type_label=new_variable];
3940 [label="644_ uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n3940-new_variable-645-645", method="userWithdrawCommission()", type_label=new_variable];
3949 [label="645_ uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n3949-new_variable-646-646", method="userWithdrawCommission()", type_label=new_variable];
3962 [label="646_ uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n3962-new_variable-647-647", method="userWithdrawCommission()", type_label=new_variable];
3973 [label="647_ if\n3973-if-648-662", method="userWithdrawCommission()", type_label=if];
10411 [label="647_ end_if", method="userWithdrawCommission()", type_label=end_if];
3983 [label="648_ user.staticCommissionBalance = 0;\n3983-expression_statement-649-649", method="userWithdrawCommission()", type_label=expression_statement];
3989 [label="649_ user.dynamicCommissionBalance = 0;\n3989-expression_statement-650-650", method="userWithdrawCommission()", type_label=expression_statement];
3995 [label="650_ user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n3995-expression_statement-651-651", method="userWithdrawCommission()", type_label=expression_statement];
4008 [label="651_ user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n4008-expression_statement-652-652", method="userWithdrawCommission()", type_label=expression_statement];
4021 [label="652_ user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n4021-expression_statement-653-653", method="userWithdrawCommission()", type_label=expression_statement];
4034 [label="653_ user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n4034-expression_statement-654-654", method="userWithdrawCommission()", type_label=expression_statement];
4047 [label="654_ totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n4047-expression_statement-655-655", method="userWithdrawCommission()", type_label=expression_statement];
4056 [label="655_ totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n4056-expression_statement-656-656", method="userWithdrawCommission()", type_label=expression_statement];
4065 [label="656_ totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n4065-expression_statement-657-657", method="userWithdrawCommission()", type_label=expression_statement];
4074 [label="657_ if_avaliableSCB > 0\n4074-if-658-660", method="userWithdrawCommission()", type_label=if];
10512 [label="657_ end_if", method="userWithdrawCommission()", type_label=end_if];
4079 [label="658_ addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n4079-expression_statement-659-659", method="userWithdrawCommission()", type_label=expression_statement];
4090 [label="660_ msg.sender.transfer(avaliableWithdrawAmount);\n4090-expression_statement-661-661", method="userWithdrawCommission()", type_label=expression_statement];
4099 [label="663_ address payable winner_TOD7;\n4099-new_variable-664-664", method="", type_label=new_variable];
4103 [label="664_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n4103-function_definition-665-669", method="play_TOD7(bytes32 guess)", type_label=function_definition];
4111 [label="665_ if\n4111-if-666-668", method="play_TOD7(bytes32 guess)", type_label=if];
10549 [label="665_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
4133 [label="666_ winner_TOD7 = msg.sender;\n4133-expression_statement-667-667", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
4139 [label="669_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n4139-function_definition-670-672", method="getReward_TOD7()", type_label=function_definition];
4144 [label="670_ winner_TOD7.transfer(msg.value);\n4144-expression_statement-671-671", method="getReward_TOD7()", type_label=expression_statement];
4153 [label="672_ function engineerWithdraw() external onlyEngineer {\n        uint256 avaliableAmount = engineerFunds;\n        if (avaliableAmount > 0) {\n            engineerFunds = 0;\n            engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }\n4153-function_definition-673-680", method="engineerWithdraw()", type_label=function_definition];
4156 [label="672_ onlyEngineer\n4156-expression_statement-673-673", method="engineerWithdraw()", type_label=expression_statement];
4159 [label="673_ uint256 avaliableAmount = engineerFunds;\n4159-new_variable-674-674", method="engineerWithdraw()", type_label=new_variable];
4165 [label="674_ if_avaliableAmount > 0\n4165-if-675-679", method="engineerWithdraw()", type_label=if];
10603 [label="674_ end_if", method="engineerWithdraw()", type_label=end_if];
4170 [label="675_ engineerFunds = 0;\n4170-expression_statement-676-676", method="engineerWithdraw()", type_label=expression_statement];
4174 [label="676_ engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n4174-expression_statement-677-677", method="engineerWithdraw()", type_label=expression_statement];
4183 [label="677_ msg.sender.transfer(avaliableAmount);\n4183-expression_statement-678-678", method="engineerWithdraw()", type_label=expression_statement];
4192 [label="680_ address payable winner_TOD23;\n4192-new_variable-681-681", method="", type_label=new_variable];
4196 [label="681_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n4196-function_definition-682-686", method="play_TOD23(bytes32 guess)", type_label=function_definition];
4204 [label="682_ if\n4204-if-683-685", method="play_TOD23(bytes32 guess)", type_label=if];
10642 [label="682_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
4226 [label="683_ winner_TOD23 = msg.sender;\n4226-expression_statement-684-684", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
4232 [label="686_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n4232-function_definition-687-689", method="getReward_TOD23()", type_label=function_definition];
4237 [label="687_ winner_TOD23.transfer(msg.value);\n4237-expression_statement-688-688", method="getReward_TOD23()", type_label=expression_statement];
4246 [label="689_ function operatorWithdraw() external onlyOwner {\n        uint256 avaliableAmount = operatorFunds;\n        if (avaliableAmount > 0) {\n            operatorFunds = 0;\n            operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }\n4246-function_definition-690-697", method="operatorWithdraw()", type_label=function_definition];
4249 [label="689_ onlyOwner\n4249-expression_statement-690-690", method="operatorWithdraw()", type_label=expression_statement];
4252 [label="690_ uint256 avaliableAmount = operatorFunds;\n4252-new_variable-691-691", method="operatorWithdraw()", type_label=new_variable];
4258 [label="691_ if_avaliableAmount > 0\n4258-if-692-696", method="operatorWithdraw()", type_label=if];
10696 [label="691_ end_if", method="operatorWithdraw()", type_label=end_if];
4263 [label="692_ operatorFunds = 0;\n4263-expression_statement-693-693", method="operatorWithdraw()", type_label=expression_statement];
4267 [label="693_ operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n4267-expression_statement-694-694", method="operatorWithdraw()", type_label=expression_statement];
4276 [label="694_ msg.sender.transfer(avaliableAmount);\n4276-expression_statement-695-695", method="operatorWithdraw()", type_label=expression_statement];
4285 [label="697_ bool claimed_TOD14 = false;\n4285-new_variable-698-698", method="", type_label=new_variable];
4291 [label="698_ address payable owner_TOD14;\n4291-new_variable-699-699", method="", type_label=new_variable];
4295 [label="699_ uint256 reward_TOD14;\n4295-new_variable-700-700", method="", type_label=new_variable];
4299 [label="700_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n4299-function_definition-701-706", method="setReward_TOD14()", type_label=function_definition];
4304 [label="701_ require (!claimed_TOD14);\n4304-expression_statement-702-702", method="setReward_TOD14()", type_label=expression_statement];
4310 [label="702_ require(msg.sender == owner_TOD14);\n4310-expression_statement-703-703", method="setReward_TOD14()", type_label=expression_statement];
4319 [label="703_ owner_TOD14.transfer(reward_TOD14);\n4319-expression_statement-704-704", method="setReward_TOD14()", type_label=expression_statement];
4326 [label="704_ reward_TOD14 = msg.value;\n4326-expression_statement-705-705", method="setReward_TOD14()", type_label=expression_statement];
4332 [label="706_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n4332-function_definition-707-712", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
4340 [label="707_ require (!claimed_TOD14);\n4340-expression_statement-708-708", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
4346 [label="708_ require(submission < 10);\n4346-expression_statement-709-709", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
4353 [label="709_ msg.sender.transfer(reward_TOD14);\n4353-expression_statement-710-710", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
4362 [label="710_ claimed_TOD14 = true;\n4362-expression_statement-711-711", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
4367 [label="712_ function getSummary() public view returns (uint256[11] memory) {\n        return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n    }\n4367-function_definition-713-721", method="getSummary()", type_label=function_definition];
4378 [label="713_ return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n4378-return-714-720", method="getSummary()", type_label=return];
4396 [label="721_ bool claimed_TOD30 = false;\n4396-new_variable-722-722", method="", type_label=new_variable];
4402 [label="722_ address payable owner_TOD30;\n4402-new_variable-723-723", method="", type_label=new_variable];
4406 [label="723_ uint256 reward_TOD30;\n4406-new_variable-724-724", method="", type_label=new_variable];
4410 [label="724_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n4410-function_definition-725-730", method="setReward_TOD30()", type_label=function_definition];
4415 [label="725_ require (!claimed_TOD30);\n4415-expression_statement-726-726", method="setReward_TOD30()", type_label=expression_statement];
4421 [label="726_ require(msg.sender == owner_TOD30);\n4421-expression_statement-727-727", method="setReward_TOD30()", type_label=expression_statement];
4430 [label="727_ owner_TOD30.transfer(reward_TOD30);\n4430-expression_statement-728-728", method="setReward_TOD30()", type_label=expression_statement];
4437 [label="728_ reward_TOD30 = msg.value;\n4437-expression_statement-729-729", method="setReward_TOD30()", type_label=expression_statement];
4443 [label="730_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n4443-function_definition-731-736", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
4451 [label="731_ require (!claimed_TOD30);\n4451-expression_statement-732-732", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
4457 [label="732_ require(submission < 10);\n4457-expression_statement-733-733", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
4464 [label="733_ msg.sender.transfer(reward_TOD30);\n4464-expression_statement-734-734", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
4473 [label="734_ claimed_TOD30 = true;\n4473-expression_statement-735-735", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
4478 [label="736_ function getUserByAddress(address userAddress) public view returns(uint256[16] memory,\n                                                                       address) {\n        User memory user = userMapping[userAddress];\n        return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n    }\n4478-function_definition-737-753", method="getUserByAddress(address userAddress)", type_label=function_definition];
4496 [label="738_ User memory user = userMapping[userAddress];\n4496-new_variable-739-739", method="getUserByAddress(address userAddress)", type_label=new_variable];
4505 [label="739_ return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n4505-return-740-752", method="getUserByAddress(address userAddress)", type_label=return];
4567 [label="753_ bool claimed_TOD8 = false;\n4567-new_variable-754-754", method="", type_label=new_variable];
4573 [label="754_ address payable owner_TOD8;\n4573-new_variable-755-755", method="", type_label=new_variable];
4577 [label="755_ uint256 reward_TOD8;\n4577-new_variable-756-756", method="", type_label=new_variable];
4581 [label="756_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n4581-function_definition-757-762", method="setReward_TOD8()", type_label=function_definition];
4586 [label="757_ require (!claimed_TOD8);\n4586-expression_statement-758-758", method="setReward_TOD8()", type_label=expression_statement];
4592 [label="758_ require(msg.sender == owner_TOD8);\n4592-expression_statement-759-759", method="setReward_TOD8()", type_label=expression_statement];
4601 [label="759_ owner_TOD8.transfer(reward_TOD8);\n4601-expression_statement-760-760", method="setReward_TOD8()", type_label=expression_statement];
4608 [label="760_ reward_TOD8 = msg.value;\n4608-expression_statement-761-761", method="setReward_TOD8()", type_label=expression_statement];
4614 [label="762_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n4614-function_definition-763-768", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
4622 [label="763_ require (!claimed_TOD8);\n4622-expression_statement-764-764", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
4628 [label="764_ require(submission < 10);\n4628-expression_statement-765-765", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
4635 [label="765_ msg.sender.transfer(reward_TOD8);\n4635-expression_statement-766-766", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
4644 [label="766_ claimed_TOD8 = true;\n4644-expression_statement-767-767", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
4649 [label="768_ function getUserByIndex(uint256 index) external view onlyOwner returns(uint256[16] memory,\n                                                                           address) {\n        return getUserByAddress(addressMapping[index]);\n    }\n4649-function_definition-769-772", method="getUserByIndex(uint256 index)", type_label=function_definition];
4657 [label="768_ onlyOwner\n4657-expression_statement-769-769", method="getUserByIndex(uint256 index)", type_label=expression_statement];
4669 [label="770_ return getUserByAddress(addressMapping[index]);\n4669-return-771-771", method="getUserByIndex(uint256 index)", type_label=return];
4676 [label="772_ address payable winner_TOD39;\n4676-new_variable-773-773", method="", type_label=new_variable];
4680 [label="773_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n4680-function_definition-774-778", method="play_TOD39(bytes32 guess)", type_label=function_definition];
4688 [label="774_ if\n4688-if-775-777", method="play_TOD39(bytes32 guess)", type_label=if];
11126 [label="774_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
4710 [label="775_ winner_TOD39 = msg.sender;\n4710-expression_statement-776-776", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
4716 [label="778_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n4716-function_definition-779-781", method="getReward_TOD39()", type_label=function_definition];
4721 [label="779_ winner_TOD39.transfer(msg.value);\n4721-expression_statement-780-780", method="getReward_TOD39()", type_label=expression_statement];
4730 [label="781_ function getInvestRecords(address userAddress) external view returns(uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory) {\n        InvestRecord[9] memory records = investRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n    }\n4730-function_definition-782-801", method="getInvestRecords(address userAddress)", type_label=function_definition];
4785 [label="790_ InvestRecord[9] memory records = investRecordMapping[userAddress];\n4785-new_variable-791-791", method="getInvestRecords(address userAddress)", type_label=new_variable];
4796 [label="791_ return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n4796-return-792-800", method="getInvestRecords(address userAddress)", type_label=return];
4942 [label="801_ bool claimed_TOD36 = false;\n4942-new_variable-802-802", method="", type_label=new_variable];
4948 [label="802_ address payable owner_TOD36;\n4948-new_variable-803-803", method="", type_label=new_variable];
4952 [label="803_ uint256 reward_TOD36;\n4952-new_variable-804-804", method="", type_label=new_variable];
4956 [label="804_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n4956-function_definition-805-810", method="setReward_TOD36()", type_label=function_definition];
4961 [label="805_ require (!claimed_TOD36);\n4961-expression_statement-806-806", method="setReward_TOD36()", type_label=expression_statement];
4967 [label="806_ require(msg.sender == owner_TOD36);\n4967-expression_statement-807-807", method="setReward_TOD36()", type_label=expression_statement];
4976 [label="807_ owner_TOD36.transfer(reward_TOD36);\n4976-expression_statement-808-808", method="setReward_TOD36()", type_label=expression_statement];
4983 [label="808_ reward_TOD36 = msg.value;\n4983-expression_statement-809-809", method="setReward_TOD36()", type_label=expression_statement];
4989 [label="810_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n4989-function_definition-811-816", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
4997 [label="811_ require (!claimed_TOD36);\n4997-expression_statement-812-812", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
5003 [label="812_ require(submission < 10);\n5003-expression_statement-813-813", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
5010 [label="813_ msg.sender.transfer(reward_TOD36);\n5010-expression_statement-814-814", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
5019 [label="814_ claimed_TOD36 = true;\n5019-expression_statement-815-815", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
5024 [label="816_ function getStaticCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory) {\n        CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }\n5024-function_definition-817-836", method="getStaticCommissionRecords(address userAddress)", type_label=function_definition];
5079 [label="825_ CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n5079-new_variable-826-826", method="getStaticCommissionRecords(address userAddress)", type_label=new_variable];
5090 [label="826_ return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n5090-return-827-835", method="getStaticCommissionRecords(address userAddress)", type_label=return];
5191 [label="836_ address payable winner_TOD35;\n5191-new_variable-837-837", method="", type_label=new_variable];
5195 [label="837_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n5195-function_definition-838-842", method="play_TOD35(bytes32 guess)", type_label=function_definition];
5203 [label="838_ if\n5203-if-839-841", method="play_TOD35(bytes32 guess)", type_label=if];
11641 [label="838_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
5225 [label="839_ winner_TOD35 = msg.sender;\n5225-expression_statement-840-840", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
5231 [label="842_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n5231-function_definition-843-845", method="getReward_TOD35()", type_label=function_definition];
5236 [label="843_ winner_TOD35.transfer(msg.value);\n5236-expression_statement-844-844", method="getReward_TOD35()", type_label=expression_statement];
5245 [label="845_ function getDynamicCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory) {\n        CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }\n5245-function_definition-846-865", method="getDynamicCommissionRecords(address userAddress)", type_label=function_definition];
5300 [label="854_ CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n5300-new_variable-855-855", method="getDynamicCommissionRecords(address userAddress)", type_label=new_variable];
5311 [label="855_ return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n5311-return-856-864", method="getDynamicCommissionRecords(address userAddress)", type_label=return];
5412 [label="865_ bool claimed_TOD40 = false;\n5412-new_variable-866-866", method="", type_label=new_variable];
5418 [label="866_ address payable owner_TOD40;\n5418-new_variable-867-867", method="", type_label=new_variable];
5422 [label="867_ uint256 reward_TOD40;\n5422-new_variable-868-868", method="", type_label=new_variable];
5426 [label="868_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n5426-function_definition-869-874", method="setReward_TOD40()", type_label=function_definition];
5431 [label="869_ require (!claimed_TOD40);\n5431-expression_statement-870-870", method="setReward_TOD40()", type_label=expression_statement];
5437 [label="870_ require(msg.sender == owner_TOD40);\n5437-expression_statement-871-871", method="setReward_TOD40()", type_label=expression_statement];
5446 [label="871_ owner_TOD40.transfer(reward_TOD40);\n5446-expression_statement-872-872", method="setReward_TOD40()", type_label=expression_statement];
5453 [label="872_ reward_TOD40 = msg.value;\n5453-expression_statement-873-873", method="setReward_TOD40()", type_label=expression_statement];
5459 [label="874_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n5459-function_definition-875-880", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
5467 [label="875_ require (!claimed_TOD40);\n5467-expression_statement-876-876", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
5473 [label="876_ require(submission < 10);\n5473-expression_statement-877-877", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
5480 [label="877_ msg.sender.transfer(reward_TOD40);\n5480-expression_statement-878-878", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
5489 [label="878_ claimed_TOD40 = true;\n5489-expression_statement-879-879", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
5494 [label="880_ function calcDynamicCommission() external onlyOwner {\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }\n5494-function_definition-881-928", method="calcDynamicCommission()", type_label=function_definition];
5497 [label="880_ onlyOwner\n5497-expression_statement-881-881", method="calcDynamicCommission()", type_label=expression_statement];
5500 [label="881_ for(i < totalUserCount;;++i)\n5500-for-882-885", method="calcDynamicCommission()", type_label=for];
11938 [label="881_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
5511 [label="881_ ++i\n5511-expression_statement-882-882", method="calcDynamicCommission()", type_label=expression_statement];
5514 [label="882_ User storage user = userMapping[addressMapping[i]];\n5514-new_variable-883-883", method="calcDynamicCommission()", type_label=new_variable];
5525 [label="883_ user.calcDynamicCommissionAmount = 0;\n5525-expression_statement-884-884", method="calcDynamicCommission()", type_label=expression_statement];
5531 [label="885_ for(i < totalUserCount;;++i)\n5531-for-886-919", method="calcDynamicCommission()", type_label=for];
11969 [label="885_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
5542 [label="885_ ++i\n5542-expression_statement-886-886", method="calcDynamicCommission()", type_label=expression_statement];
5545 [label="886_ User memory user = userMapping[addressMapping[i]];\n5545-new_variable-887-887", method="calcDynamicCommission()", type_label=new_variable];
5556 [label="887_ if_user.currentInvestAmount > 0\n5556-if-888-918", method="calcDynamicCommission()", type_label=if];
11994 [label="887_ end_if", method="calcDynamicCommission()", type_label=end_if];
5563 [label="888_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n5563-new_variable-889-889", method="calcDynamicCommission()", type_label=new_variable];
5581 [label="889_ if_commissionDays >= 1 && commissionDays <= user.currentInvestCycle\n5581-if-890-917", method="calcDynamicCommission()", type_label=if];
12019 [label="889_ end_if", method="calcDynamicCommission()", type_label=end_if];
5592 [label="890_ uint256 depth = 1;\n5592-new_variable-891-891", method="calcDynamicCommission()", type_label=new_variable];
5598 [label="891_ address addressWalker = user.sponsorAddress;\n5598-new_variable-892-892", method="calcDynamicCommission()", type_label=new_variable];
5606 [label="892_ while\n5606-while-893-916", method="calcDynamicCommission()", type_label=while];
12044 [label="892_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
5611 [label="893_ User storage sponsor = userMapping[addressWalker];\n5611-new_variable-894-894", method="calcDynamicCommission()", type_label=new_variable];
5620 [label="894_ if_sponsor.currentInvestAmount > 0\n5620-if-895-913", method="calcDynamicCommission()", type_label=if];
12058 [label="894_ end_if", method="calcDynamicCommission()", type_label=end_if];
5627 [label="895_ uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n5627-new_variable-896-896", method="calcDynamicCommission()", type_label=new_variable];
5638 [label="896_ if_dynamicCommissionRatio > 0\n5638-if-897-912", method="calcDynamicCommission()", type_label=if];
12076 [label="896_ end_if", method="calcDynamicCommission()", type_label=end_if];
5643 [label="897_ uint256 dynamicCA = sponsor.currentInvestAmount;\n5643-new_variable-898-898", method="calcDynamicCommission()", type_label=new_variable];
5651 [label="898_ if_dynamicCA > user.currentInvestAmount\n5651-if-899-901", method="calcDynamicCommission()", type_label=if];
12089 [label="898_ end_if", method="calcDynamicCommission()", type_label=end_if];
5658 [label="899_ dynamicCA = user.currentInvestAmount;\n5658-expression_statement-900-900", method="calcDynamicCommission()", type_label=expression_statement];
5664 [label="901_ dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n5664-expression_statement-902-902", method="calcDynamicCommission()", type_label=expression_statement];
5675 [label="902_ dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n5675-expression_statement-903-903", method="calcDynamicCommission()", type_label=expression_statement];
5684 [label="903_ if_sponsor.currentlevel == 1\n5684-if-904-910", method="calcDynamicCommission()", type_label=if];
12122 [label="903_ end_if", method="calcDynamicCommission()", type_label=end_if];
5691 [label="904_ dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n5691-expression_statement-905-905", method="calcDynamicCommission()", type_label=expression_statement];
5709 [label="905_ if_sponsor.currentlevel == 2\n5709-if-906-910", method="calcDynamicCommission()", type_label=if];
5716 [label="906_ dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n5716-expression_statement-907-907", method="calcDynamicCommission()", type_label=expression_statement];
5735 [label="908_ dynamicCA = dynamicCA.div(1000 * 100);\n5735-expression_statement-909-909", method="calcDynamicCommission()", type_label=expression_statement];
5746 [label="910_ sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n5746-expression_statement-911-911", method="calcDynamicCommission()", type_label=expression_statement];
5759 [label="913_ addressWalker = sponsor.sponsorAddress;\n5759-expression_statement-914-914", method="calcDynamicCommission()", type_label=expression_statement];
5765 [label="914_ depth = depth.add(1);\n5765-expression_statement-915-915", method="calcDynamicCommission()", type_label=expression_statement];
5774 [label="919_ for(i < totalUserCount;;++i)\n5774-for-920-927", method="calcDynamicCommission()", type_label=for];
12212 [label="919_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
5785 [label="919_ ++i\n5785-expression_statement-920-920", method="calcDynamicCommission()", type_label=expression_statement];
5788 [label="920_ address userAddress = addressMapping[i];\n5788-new_variable-921-921", method="calcDynamicCommission()", type_label=new_variable];
5796 [label="921_ User storage user = userMapping[userAddress];\n5796-new_variable-922-922", method="calcDynamicCommission()", type_label=new_variable];
5805 [label="922_ if_user.calcDynamicCommissionAmount > 0\n5805-if-923-926", method="calcDynamicCommission()", type_label=if];
12243 [label="922_ end_if", method="calcDynamicCommission()", type_label=end_if];
5812 [label="923_ user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n5812-expression_statement-924-924", method="calcDynamicCommission()", type_label=expression_statement];
5827 [label="924_ addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n5827-expression_statement-925-925", method="calcDynamicCommission()", type_label=expression_statement];
5838 [label="928_ address payable winner_TOD33;\n5838-new_variable-929-929", method="", type_label=new_variable];
5842 [label="929_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n5842-function_definition-930-934", method="play_TOD33(bytes32 guess)", type_label=function_definition];
5850 [label="930_ if\n5850-if-931-933", method="play_TOD33(bytes32 guess)", type_label=if];
12288 [label="930_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
5872 [label="931_ winner_TOD33 = msg.sender;\n5872-expression_statement-932-932", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
5878 [label="934_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n5878-function_definition-935-937", method="getReward_TOD33()", type_label=function_definition];
5883 [label="935_ winner_TOD33.transfer(msg.value);\n5883-expression_statement-936-936", method="getReward_TOD33()", type_label=expression_statement];
5892 [label="937_ function calcDynamicCommissionBegin(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n    }\n5892-function_definition-938-943", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=function_definition];
5903 [label="937_ onlyOwner\n5903-expression_statement-938-938", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
5906 [label="938_ for(i < (index + length);;++i)\n5906-for-939-942", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=for];
12344 [label="938_ end_loop", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=end_loop];
5920 [label="938_ ++i\n5920-expression_statement-939-939", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
5923 [label="939_ User storage user = userMapping[addressMapping[i]];\n5923-new_variable-940-940", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=new_variable];
5934 [label="940_ user.calcDynamicCommissionAmount = 0;\n5934-expression_statement-941-941", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
5940 [label="943_ address payable winner_TOD27;\n5940-new_variable-944-944", method="", type_label=new_variable];
5944 [label="944_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n5944-function_definition-945-949", method="play_TOD27(bytes32 guess)", type_label=function_definition];
5952 [label="945_ if\n5952-if-946-948", method="play_TOD27(bytes32 guess)", type_label=if];
12390 [label="945_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
5974 [label="946_ winner_TOD27 = msg.sender;\n5974-expression_statement-947-947", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
5980 [label="949_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n5980-function_definition-950-952", method="getReward_TOD27()", type_label=function_definition];
5985 [label="950_ winner_TOD27.transfer(msg.value);\n5985-expression_statement-951-951", method="getReward_TOD27()", type_label=expression_statement];
5994 [label="952_ function calcDynamicCommissionRange(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n    }\n5994-function_definition-953-988", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=function_definition];
6005 [label="952_ onlyOwner\n6005-expression_statement-953-953", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
6008 [label="953_ for(i < (index + length);;++i)\n6008-for-954-987", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=for];
12446 [label="953_ end_loop", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_loop];
6022 [label="953_ ++i\n6022-expression_statement-954-954", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
6025 [label="954_ User memory user = userMapping[addressMapping[i]];\n6025-new_variable-955-955", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
6036 [label="955_ if_user.currentInvestAmount > 0\n6036-if-956-986", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
12474 [label="955_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
6043 [label="956_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n6043-new_variable-957-957", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
6061 [label="957_ if_commissionDays >= 1 && commissionDays <= user.currentInvestCycle\n6061-if-958-985", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
12499 [label="957_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
6072 [label="958_ uint256 depth = 1;\n6072-new_variable-959-959", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
6078 [label="959_ address addressWalker = user.sponsorAddress;\n6078-new_variable-960-960", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
6086 [label="960_ while\n6086-while-961-984", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=while];
12524 [label="960_ end_loop", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_loop];
6091 [label="961_ User storage sponsor = userMapping[addressWalker];\n6091-new_variable-962-962", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
6100 [label="962_ if_sponsor.currentInvestAmount > 0\n6100-if-963-981", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
12538 [label="962_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
6107 [label="963_ uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n6107-new_variable-964-964", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
6118 [label="964_ if_dynamicCommissionRatio > 0\n6118-if-965-980", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
12556 [label="964_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
6123 [label="965_ uint256 dynamicCA = sponsor.currentInvestAmount;\n6123-new_variable-966-966", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
6131 [label="966_ if_dynamicCA > user.currentInvestAmount\n6131-if-967-969", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
12569 [label="966_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
6138 [label="967_ dynamicCA = user.currentInvestAmount;\n6138-expression_statement-968-968", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
6144 [label="969_ dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n6144-expression_statement-970-970", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
6155 [label="970_ dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n6155-expression_statement-971-971", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
6164 [label="971_ if_sponsor.currentlevel == 1\n6164-if-972-978", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
12602 [label="971_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
6171 [label="972_ dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n6171-expression_statement-973-973", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
6189 [label="973_ if_sponsor.currentlevel == 2\n6189-if-974-978", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
6196 [label="974_ dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n6196-expression_statement-975-975", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
6215 [label="976_ dynamicCA = dynamicCA.div(1000 * 100);\n6215-expression_statement-977-977", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
6226 [label="978_ sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n6226-expression_statement-979-979", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
6239 [label="981_ addressWalker = sponsor.sponsorAddress;\n6239-expression_statement-982-982", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
6245 [label="982_ depth = depth.add(1);\n6245-expression_statement-983-983", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
6254 [label="988_ address payable winner_TOD31;\n6254-new_variable-989-989", method="", type_label=new_variable];
6258 [label="989_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n6258-function_definition-990-994", method="play_TOD31(bytes32 guess)", type_label=function_definition];
6266 [label="990_ if\n6266-if-991-993", method="play_TOD31(bytes32 guess)", type_label=if];
12704 [label="990_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
6288 [label="991_ winner_TOD31 = msg.sender;\n6288-expression_statement-992-992", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
6294 [label="994_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n6294-function_definition-995-997", method="getReward_TOD31()", type_label=function_definition];
6299 [label="995_ winner_TOD31.transfer(msg.value);\n6299-expression_statement-996-996", method="getReward_TOD31()", type_label=expression_statement];
6308 [label="997_ function calcDynamicCommissionEnd(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }\n6308-function_definition-998-1007", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=function_definition];
6319 [label="997_ onlyOwner\n6319-expression_statement-998-998", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
6322 [label="998_ for(i < (index + length);;++i)\n6322-for-999-1006", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=for];
12760 [label="998_ end_loop", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=end_loop];
6336 [label="998_ ++i\n6336-expression_statement-999-999", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
6339 [label="999_ address userAddress = addressMapping[i];\n6339-new_variable-1000-1000", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=new_variable];
6347 [label="1000_ User storage user = userMapping[userAddress];\n6347-new_variable-1001-1001", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=new_variable];
6356 [label="1001_ if_user.calcDynamicCommissionAmount > 0\n6356-if-1002-1005", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=if];
12794 [label="1001_ end_if", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=end_if];
6363 [label="1002_ user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n6363-expression_statement-1003-1003", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
6378 [label="1003_ addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n6378-expression_statement-1004-1004", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
6389 [label="1007_ address payable winner_TOD13;\n6389-new_variable-1008-1008", method="", type_label=new_variable];
6393 [label="1008_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n6393-function_definition-1009-1013", method="play_TOD13(bytes32 guess)", type_label=function_definition];
6401 [label="1009_ if\n6401-if-1010-1012", method="play_TOD13(bytes32 guess)", type_label=if];
12839 [label="1009_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
6423 [label="1010_ winner_TOD13 = msg.sender;\n6423-expression_statement-1011-1011", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
6429 [label="1013_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n6429-function_definition-1014-1016", method="getReward_TOD13()", type_label=function_definition];
6434 [label="1014_ winner_TOD13.transfer(msg.value);\n6434-expression_statement-1015-1015", method="getReward_TOD13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
77 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
117 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 139  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
134 -> 6572  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6572 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 6572  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
139 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
163 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
190 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
230 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
257 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
303 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
517 -> 526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
548 -> 570  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
548 -> 6986  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6986 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 6986  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
576 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
590 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
620 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
656 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
682 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
716 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
775 -> 779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
794 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
860 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 890  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
868 -> 7306  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7306 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
890 -> 7306  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
896 -> 901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 949  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
927 -> 7365  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7365 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 7365  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
955 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
974 -> 980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
980 -> 984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 1015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 1051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 1080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 1086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1086 -> 1095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1095 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1108 -> 1116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1116 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1122 -> 1129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1143 -> 1151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1155 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 1185  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1163 -> 7601  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7601 -> 1191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1185 -> 7601  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1191 -> 1196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1205 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 1218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1218 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1226 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1259 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 1280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1280 -> 1289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1294 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1318 -> 1323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1323 -> 1329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1329 -> 1338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1338 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1351 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1359 -> 1365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1365 -> 1372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1372 -> 1381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1386 -> 1396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1396 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 1415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1415 -> 1421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 1430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1430 -> 1437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1443 -> 1451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1451 -> 1457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1457 -> 1464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1464 -> 1473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1488 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1501 -> 1507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1561 -> 1569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1569 -> 1591  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1569 -> 8007  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8007 -> 1597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1591 -> 8007  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1597 -> 1602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1620 -> 1628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1628 -> 1650  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1628 -> 8066  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8066 -> 1656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1650 -> 8066  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1656 -> 1661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1670 -> 1687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1673 -> 1685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1690 -> 1702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1704 -> 1714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1714 -> 1726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1730 -> 1736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1736 -> 1740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1744 -> 1749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1749 -> 1755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1755 -> 1764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1764 -> 1771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1777 -> 1785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1785 -> 1791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1791 -> 1798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1798 -> 1807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1812 -> 1826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1826 -> 1836  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1826 -> 1840  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8264 -> 1859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1836 -> 8264  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1840 -> 1850  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1840 -> 1855  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1850 -> 8264  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1855 -> 8264  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1863 -> 1871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1871 -> 1893  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1871 -> 8309  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8309 -> 1899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1893 -> 8309  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1899 -> 1904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1913 -> 1928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1953 -> 1961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1961 -> 1983  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1961 -> 8399  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8399 -> 1989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1983 -> 8399  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1989 -> 1994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2003 -> 2018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2018 -> 2036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2036 -> 2046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2046 -> 2052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2052 -> 2057  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2052 -> 2061  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8490 -> 2070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2057 -> 8490  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2061 -> 2066  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2061 -> 8490  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2066 -> 8490  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2070 -> 2076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2101 -> 2109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2109 -> 2131  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2109 -> 8547  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8547 -> 2137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2131 -> 8547  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2137 -> 2142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2151 -> 2169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2169 -> 2174  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2169 -> 2197  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2174 -> 2179  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2174 -> 2183  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8612 -> 2197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2179 -> 8612  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2183 -> 2188  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2183 -> 2193  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2188 -> 8612  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2193 -> 8612  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2197 -> 2202  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2197 -> 2226  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2202 -> 8607  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2202 -> 2207  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2202 -> 2211  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8640 -> 2226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2207 -> 8640  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2211 -> 2216  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2211 -> 2221  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2216 -> 8640  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2221 -> 8640  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2226 -> 8607  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2226 -> 2231  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2226 -> 2235  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8664 -> 2249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2231 -> 8664  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2235 -> 2240  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2235 -> 2245  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2240 -> 8664  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2245 -> 8664  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2253 -> 2261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2261 -> 2283  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2261 -> 8699  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8699 -> 2289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2283 -> 8699  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2289 -> 2294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2303 -> 2322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2322 -> 2329  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2322 -> 2343  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2329 -> 2334  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2329 -> 2339  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8767 -> 2343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2334 -> 8767  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2339 -> 8767  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2343 -> 2350  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2343 -> 2374  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2350 -> 8760  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2350 -> 2355  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2350 -> 2359  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8788 -> 2374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2355 -> 8788  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2359 -> 2364  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2359 -> 2369  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2364 -> 8788  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2369 -> 8788  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2374 -> 8760  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2374 -> 2379  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2374 -> 2383  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8812 -> 2432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2379 -> 8812  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2383 -> 2388  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2383 -> 2392  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2388 -> 8812  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2392 -> 2397  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2392 -> 2401  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2397 -> 8812  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2401 -> 2410  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2401 -> 2414  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2410 -> 8812  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2414 -> 2423  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2414 -> 2428  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2423 -> 8812  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2428 -> 8812  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2436 -> 2444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2444 -> 2466  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2444 -> 8882  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8882 -> 2472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2466 -> 8882  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2472 -> 2477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2486 -> 2501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2501 -> 2508  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2501 -> 2513  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8939 -> 2582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2508 -> 8939  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2513 -> 2531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2531 -> 2538  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2531 -> 8969  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8969 -> 2544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2538 -> 8969  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2544 -> 2562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2562 -> 2571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2571 -> 8939  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2586 -> 2594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2594 -> 2616  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2594 -> 9032  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9032 -> 2622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2616 -> 9032  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2622 -> 2627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2636 -> 2656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2656 -> 2667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2667 -> 2681  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2667 -> 9105  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9105 -> 2698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2678 -> 2667  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2681 -> 2692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2692 -> 2678  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2711 -> 2717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2717 -> 2721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2725 -> 2730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2730 -> 2736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2736 -> 2745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2745 -> 2752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2758 -> 2766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2766 -> 2772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2772 -> 2779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2779 -> 2788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2793 -> 2809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2809 -> 2820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2820 -> 2834  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2820 -> 9258  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9258 -> 2851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2831 -> 2820  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2834 -> 2845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2845 -> 2831  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2862 -> 2868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2868 -> 2872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2876 -> 2881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2881 -> 2887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2887 -> 2896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2896 -> 2903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2909 -> 2917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2917 -> 2923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2923 -> 2930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2930 -> 2939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2944 -> 2960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2960 -> 2971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2971 -> 2985  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2971 -> 9409  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9409 -> 3002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2982 -> 2971  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2985 -> 2996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2996 -> 2982  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3013 -> 3019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3019 -> 3023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3027 -> 3032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3032 -> 3038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3038 -> 3047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3047 -> 3054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3060 -> 3068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3068 -> 3074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3074 -> 3081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3081 -> 3090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3095 -> 3108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3108 -> 3117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3117 -> 3129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3129 -> 3147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3147 -> 3160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3160 -> 3169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3169 -> 3181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3181 -> 3205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3205 -> 3216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3216 -> 3225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3225 -> 3232  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3225 -> 3422  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3232 -> 3244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3244 -> 3256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3256 -> 3268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3268 -> 3280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3280 -> 3292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3292 -> 3304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3304 -> 3316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3316 -> 3329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3329 -> 3342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3342 -> 3348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3348 -> 3354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3354 -> 3360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3360 -> 3366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3366 -> 3377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3377 -> 3385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3385 -> 3391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3391 -> 3396  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3391 -> 9829  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9829 -> 3422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3396 -> 3402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3402 -> 3415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3415 -> 3391  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3422 -> 3472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3472 -> 3480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3480 -> 3489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3489 -> 3495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3495 -> 9663  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3495 -> 3500  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3495 -> 9933  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9933 -> 3556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3500 -> 3506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3506 -> 3519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3519 -> 3524  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3519 -> 9957  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9957 -> 3537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3524 -> 9957  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3537 -> 3550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3550 -> 3495  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3556 -> 3569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3569 -> 3578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3578 -> 3587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3587 -> 3601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3620 -> 3626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3626 -> 3630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3634 -> 3639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3639 -> 3645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3645 -> 3654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3654 -> 3661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3667 -> 3675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3675 -> 3681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3681 -> 3688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3688 -> 3697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3702 -> 3706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3706 -> 3717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3717 -> 3724  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3717 -> 10155  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10155 -> 3835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3724 -> 3732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3732 -> 3739  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3732 -> 10170  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10170 -> 3746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3739 -> 10170  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3746 -> 3755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3755 -> 3768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3768 -> 3774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3774 -> 3780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3780 -> 3786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3786 -> 3792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3792 -> 3798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3798 -> 3804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3804 -> 3817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3817 -> 3826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3826 -> 10155  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3835 -> 3841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3841 -> 3845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3849 -> 3854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3854 -> 3860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3860 -> 3869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3869 -> 3876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3882 -> 3890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3890 -> 3896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3896 -> 3903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3903 -> 3912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3917 -> 3921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3921 -> 3932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3932 -> 3940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3940 -> 3949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3949 -> 3962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3962 -> 3973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3973 -> 3983  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3973 -> 10411  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10411 -> 4099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3983 -> 3989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3989 -> 3995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3995 -> 4008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4008 -> 4021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4021 -> 4034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4034 -> 4047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4047 -> 4056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4056 -> 4065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4065 -> 4074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4074 -> 4079  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4074 -> 10512  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10512 -> 4090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4079 -> 10512  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4090 -> 10411  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4103 -> 4111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4111 -> 4133  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4111 -> 10549  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10549 -> 4139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4133 -> 10549  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4139 -> 4144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4153 -> 4159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4159 -> 4165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4165 -> 4170  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4165 -> 10603  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10603 -> 4192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4170 -> 4174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4174 -> 4183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4183 -> 10603  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4196 -> 4204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4204 -> 4226  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4204 -> 10642  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10642 -> 4232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4226 -> 10642  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4232 -> 4237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4246 -> 4252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4252 -> 4258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4258 -> 4263  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4258 -> 10696  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10696 -> 4285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4263 -> 4267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4267 -> 4276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4276 -> 10696  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4285 -> 4291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4291 -> 4295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4299 -> 4304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4304 -> 4310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4310 -> 4319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4319 -> 4326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4332 -> 4340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4340 -> 4346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4346 -> 4353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4353 -> 4362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4367 -> 4378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4378 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4396 -> 4402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4402 -> 4406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4410 -> 4415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4415 -> 4421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4421 -> 4430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4430 -> 4437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4443 -> 4451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4451 -> 4457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4457 -> 4464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4464 -> 4473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4478 -> 4496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4496 -> 4505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4505 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4567 -> 4573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4573 -> 4577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4581 -> 4586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4586 -> 4592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4592 -> 4601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4601 -> 4608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4614 -> 4622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4622 -> 4628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4628 -> 4635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4635 -> 4644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4649 -> 4669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4669 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4680 -> 4688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4688 -> 4710  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4688 -> 11126  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
11126 -> 4716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4710 -> 11126  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4716 -> 4721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4730 -> 4785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4785 -> 4796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4796 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4942 -> 4948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4948 -> 4952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4956 -> 4961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4961 -> 4967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4967 -> 4976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4976 -> 4983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4989 -> 4997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4997 -> 5003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5003 -> 5010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5010 -> 5019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5024 -> 5079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5079 -> 5090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5090 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
5195 -> 5203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5203 -> 5225  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5203 -> 11641  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
11641 -> 5231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5225 -> 11641  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5231 -> 5236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5245 -> 5300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5300 -> 5311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5311 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
5412 -> 5418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5418 -> 5422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5426 -> 5431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5431 -> 5437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5437 -> 5446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5446 -> 5453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5459 -> 5467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5467 -> 5473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5473 -> 5480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5480 -> 5489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5494 -> 5500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5500 -> 5514  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5500 -> 11938  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
11938 -> 5531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5511 -> 5500  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5514 -> 5525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5525 -> 5511  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5531 -> 5545  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5531 -> 11969  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
11969 -> 5774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5542 -> 5531  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5545 -> 5556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5556 -> 5563  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5556 -> 11994  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
11994 -> 5542  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5563 -> 5581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5581 -> 5592  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5581 -> 12019  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5592 -> 5598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5598 -> 5606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5606 -> 5611  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5606 -> 12044  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12044 -> 5542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5611 -> 5620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5620 -> 5627  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5620 -> 12058  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5627 -> 5638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5638 -> 5643  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5638 -> 12076  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12076 -> 5759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5643 -> 5651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5651 -> 5658  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5651 -> 12089  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12089 -> 5664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5658 -> 12089  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5664 -> 5675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5675 -> 5684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5684 -> 5691  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5684 -> 5709  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12122 -> 5746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5691 -> 12122  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5709 -> 5716  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5709 -> 5735  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5716 -> 12122  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5735 -> 12122  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5746 -> 12076  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5759 -> 5765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5765 -> 5606  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5774 -> 5788  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5774 -> 12212  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12212 -> 5838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5785 -> 5774  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5788 -> 5796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5796 -> 5805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5805 -> 5812  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5805 -> 12243  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12243 -> 5785  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
12243 -> 5785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
5812 -> 5827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5827 -> 12243  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5842 -> 5850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5850 -> 5872  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5850 -> 12288  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12288 -> 5878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5872 -> 12288  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5878 -> 5883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5892 -> 5906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5906 -> 5923  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5906 -> 12344  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12344 -> 5940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5920 -> 5906  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5923 -> 5934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5934 -> 5920  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5944 -> 5952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5952 -> 5974  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5952 -> 12390  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12390 -> 5980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5974 -> 12390  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5980 -> 5985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5994 -> 6008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6008 -> 6025  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6008 -> 12446  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12446 -> 6254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6022 -> 6008  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
6025 -> 6036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6036 -> 6043  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6036 -> 12474  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12474 -> 6022  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
6043 -> 6061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6061 -> 6072  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6061 -> 12499  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6072 -> 6078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6078 -> 6086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6086 -> 6091  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6086 -> 12524  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12524 -> 6022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6091 -> 6100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6100 -> 6107  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6100 -> 12538  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6107 -> 6118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6118 -> 6123  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6118 -> 12556  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12556 -> 6239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6123 -> 6131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6131 -> 6138  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6131 -> 12569  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12569 -> 6144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6138 -> 12569  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
6144 -> 6155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6155 -> 6164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6164 -> 6171  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6164 -> 6189  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12602 -> 6226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6171 -> 12602  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
6189 -> 6196  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6189 -> 6215  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6196 -> 12602  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
6215 -> 12602  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
6226 -> 12556  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
6239 -> 6245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6245 -> 6086  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
6258 -> 6266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6266 -> 6288  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6266 -> 12704  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12704 -> 6294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6288 -> 12704  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
6294 -> 6299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6308 -> 6322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6322 -> 6339  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6322 -> 12760  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12760 -> 6389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6336 -> 6322  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
6339 -> 6347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6347 -> 6356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6356 -> 6363  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6356 -> 12794  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12794 -> 6336  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
12794 -> 6336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
6363 -> 6378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6378 -> 12794  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
6393 -> 6401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6401 -> 6423  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6401 -> 12839  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12839 -> 6429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6423 -> 12839  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
6429 -> 6434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
