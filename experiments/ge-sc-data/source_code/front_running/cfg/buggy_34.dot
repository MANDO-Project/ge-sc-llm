digraph  {
13 [label="2_ bool claimed_TOD24 = false;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ address payable owner_TOD24;\n19-new_variable-4-4", method="", type_label=new_variable];
23 [label="4_ uint256 reward_TOD24;\n23-new_variable-5-5", method="", type_label=new_variable];
27 [label="5_ function setReward_TOD24() public payable {\n        require (!claimed_TOD24);\n        require(msg.sender == owner_TOD24);\n        owner_TOD24.transfer(reward_TOD24);\n        reward_TOD24 = msg.value;\n    }\n27-function_definition-6-11", method="setReward_TOD24()", type_label=function_definition];
32 [label="6_ require (!claimed_TOD24);\n32-expression_statement-7-7", method="setReward_TOD24()", type_label=expression_statement];
38 [label="7_ require(msg.sender == owner_TOD24);\n38-expression_statement-8-8", method="setReward_TOD24()", type_label=expression_statement];
47 [label="8_ owner_TOD24.transfer(reward_TOD24);\n47-expression_statement-9-9", method="setReward_TOD24()", type_label=expression_statement];
54 [label="9_ reward_TOD24 = msg.value;\n54-expression_statement-10-10", method="setReward_TOD24()", type_label=expression_statement];
60 [label="11_ function claimReward_TOD24(uint256 submission) public {\n        require (!claimed_TOD24);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD24);\n        claimed_TOD24 = true;\n    }\n60-function_definition-12-17", method="claimReward_TOD24(uint256 submission)", type_label=function_definition];
68 [label="12_ require (!claimed_TOD24);\n68-expression_statement-13-13", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
74 [label="13_ require(submission < 10);\n74-expression_statement-14-14", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
81 [label="14_ msg.sender.transfer(reward_TOD24);\n81-expression_statement-15-15", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
90 [label="15_ claimed_TOD24 = true;\n90-expression_statement-16-16", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
95 [label="17_ address payable public owner;\n95-new_variable-18-18", method="", type_label=new_variable];
100 [label="18_ address payable winner_TOD27;\n100-new_variable-19-19", method="", type_label=new_variable];
104 [label="19_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n104-function_definition-20-24", method="play_TOD27(bytes32 guess)", type_label=function_definition];
112 [label="20_ if\n112-if-21-23", method="play_TOD27(bytes32 guess)", type_label=if];
3771 [label="20_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
134 [label="21_ winner_TOD27 = msg.sender;\n134-expression_statement-22-22", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
140 [label="24_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n140-function_definition-25-27", method="getReward_TOD27()", type_label=function_definition];
145 [label="25_ winner_TOD27.transfer(msg.value);\n145-expression_statement-26-26", method="getReward_TOD27()", type_label=expression_statement];
166 [label="29_ owner = msg.sender;\n166-expression_statement-30-30", method="", type_label=expression_statement];
172 [label="31_ bool claimed_TOD2 = false;\n172-new_variable-32-32", method="", type_label=new_variable];
178 [label="32_ address payable owner_TOD2;\n178-new_variable-33-33", method="", type_label=new_variable];
182 [label="33_ uint256 reward_TOD2;\n182-new_variable-34-34", method="", type_label=new_variable];
186 [label="34_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n186-function_definition-35-40", method="setReward_TOD2()", type_label=function_definition];
191 [label="35_ require (!claimed_TOD2);\n191-expression_statement-36-36", method="setReward_TOD2()", type_label=expression_statement];
197 [label="36_ require(msg.sender == owner_TOD2);\n197-expression_statement-37-37", method="setReward_TOD2()", type_label=expression_statement];
206 [label="37_ owner_TOD2.transfer(reward_TOD2);\n206-expression_statement-38-38", method="setReward_TOD2()", type_label=expression_statement];
213 [label="38_ reward_TOD2 = msg.value;\n213-expression_statement-39-39", method="setReward_TOD2()", type_label=expression_statement];
219 [label="40_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n219-function_definition-41-46", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
227 [label="41_ require (!claimed_TOD2);\n227-expression_statement-42-42", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
233 [label="42_ require(submission < 10);\n233-expression_statement-43-43", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
240 [label="43_ msg.sender.transfer(reward_TOD2);\n240-expression_statement-44-44", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
249 [label="44_ claimed_TOD2 = true;\n249-expression_statement-45-45", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
254 [label="46_ modifier onlyOwner {\n       require(msg.sender == owner);\n       _;\n   }\n254-expression_statement-47-50", method="", type_label=expression_statement];
257 [label="47_ require(msg.sender == owner);\n257-expression_statement-48-48", method="", type_label=expression_statement];
266 [label="48_ _;\n266-expression_statement-49-49", method="", type_label=expression_statement];
268 [label="50_ function transferOwnership(address payable _newOwner) public onlyOwner {\n       owner = _newOwner;\n   }\n268-function_definition-51-53", method="transferOwnership(address payable _newOwner)", type_label=function_definition];
275 [label="50_ onlyOwner\n275-expression_statement-51-51", method="transferOwnership(address payable _newOwner)", type_label=expression_statement];
278 [label="51_ owner = _newOwner;\n278-expression_statement-52-52", method="transferOwnership(address payable _newOwner)", type_label=expression_statement];
282 [label="53_ address payable winner_TOD17;\n282-new_variable-54-54", method="", type_label=new_variable];
286 [label="54_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n286-function_definition-55-59", method="play_TOD17(bytes32 guess)", type_label=function_definition];
294 [label="55_ if\n294-if-56-58", method="play_TOD17(bytes32 guess)", type_label=if];
3953 [label="55_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
316 [label="56_ winner_TOD17 = msg.sender;\n316-expression_statement-57-57", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
322 [label="59_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n322-function_definition-60-62", method="getReward_TOD17()", type_label=function_definition];
327 [label="60_ winner_TOD17.transfer(msg.value);\n327-expression_statement-61-61", method="getReward_TOD17()", type_label=expression_statement];
339 [label="64_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n339-function_definition-65-69", method="add(uint256 a,uint256 b)", type_label=function_definition];
356 [label="65_ uint256 c = a + b;\n356-new_variable-66-66", method="add(uint256 a,uint256 b)", type_label=new_variable];
364 [label="66_ require(c >= a, \"SafeMath: addition overflow\");\n364-expression_statement-67-67", method="add(uint256 a,uint256 b)", type_label=expression_statement];
374 [label="67_ return c;\n374-return-68-68", method="add(uint256 a,uint256 b)", type_label=return];
376 [label="69_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n376-function_definition-70-74", method="sub(uint256 a,uint256 b)", type_label=function_definition];
393 [label="70_ require(b <= a, \"SafeMath: subtraction overflow\");\n393-expression_statement-71-71", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
403 [label="71_ uint256 c = a - b;\n403-new_variable-72-72", method="sub(uint256 a,uint256 b)", type_label=new_variable];
411 [label="72_ return c;\n411-return-73-73", method="sub(uint256 a,uint256 b)", type_label=return];
413 [label="74_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n413-function_definition-75-82", method="mul(uint256 a,uint256 b)", type_label=function_definition];
430 [label="75_ if_a == 0\n430-if-76-78", method="mul(uint256 a,uint256 b)", type_label=if];
4089 [label="75_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
435 [label="76_ return 0;\n435-return-77-77", method="mul(uint256 a,uint256 b)", type_label=return];
437 [label="78_ uint256 c = a * b;\n437-new_variable-79-79", method="mul(uint256 a,uint256 b)", type_label=new_variable];
445 [label="79_ require(c / a == b, \"SafeMath: multiplication overflow\");\n445-expression_statement-80-80", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
457 [label="80_ return c;\n457-return-81-81", method="mul(uint256 a,uint256 b)", type_label=return];
459 [label="82_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n459-function_definition-83-87", method="div(uint256 a,uint256 b)", type_label=function_definition];
476 [label="83_ require(b > 0, \"SafeMath: division by zero\");\n476-expression_statement-84-84", method="div(uint256 a,uint256 b)", type_label=expression_statement];
486 [label="84_ uint256 c = a / b;\n486-new_variable-85-85", method="div(uint256 a,uint256 b)", type_label=new_variable];
494 [label="85_ return c;\n494-return-86-86", method="div(uint256 a,uint256 b)", type_label=return];
496 [label="87_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n496-function_definition-88-91", method="mod(uint256 a,uint256 b)", type_label=function_definition];
513 [label="88_ require(b != 0, \"SafeMath: modulo by zero\");\n513-expression_statement-89-89", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
523 [label="89_ return a % b;\n523-return-90-90", method="mod(uint256 a,uint256 b)", type_label=return];
538 [label="94_ address payable winner_TOD5;\n538-new_variable-95-95", method="", type_label=new_variable];
542 [label="95_ function play_TOD5(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD5 = msg.sender;\n        }\n    }\n542-function_definition-96-100", method="play_TOD5(bytes32 guess)", type_label=function_definition];
550 [label="96_ if\n550-if-97-99", method="play_TOD5(bytes32 guess)", type_label=if];
4209 [label="96_ end_if", method="play_TOD5(bytes32 guess)", type_label=end_if];
572 [label="97_ winner_TOD5 = msg.sender;\n572-expression_statement-98-98", method="play_TOD5(bytes32 guess)", type_label=expression_statement];
578 [label="100_ function getReward_TOD5() payable public{\n       winner_TOD5.transfer(msg.value);\n    }\n578-function_definition-101-103", method="getReward_TOD5()", type_label=function_definition];
583 [label="101_ winner_TOD5.transfer(msg.value);\n583-expression_statement-102-102", method="getReward_TOD5()", type_label=expression_statement];
592 [label="103_ mapping (address => transferMapping) private _balances;\n592-new_variable-104-104", method="", type_label=new_variable];
600 [label="104_ address payable winner_TOD15;\n600-new_variable-105-105", method="", type_label=new_variable];
604 [label="105_ function play_TOD15(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD15 = msg.sender;\n        }\n    }\n604-function_definition-106-110", method="play_TOD15(bytes32 guess)", type_label=function_definition];
612 [label="106_ if\n612-if-107-109", method="play_TOD15(bytes32 guess)", type_label=if];
4271 [label="106_ end_if", method="play_TOD15(bytes32 guess)", type_label=end_if];
634 [label="107_ winner_TOD15 = msg.sender;\n634-expression_statement-108-108", method="play_TOD15(bytes32 guess)", type_label=expression_statement];
640 [label="110_ function getReward_TOD15() payable public{\n       winner_TOD15.transfer(msg.value);\n    }\n640-function_definition-111-113", method="getReward_TOD15()", type_label=function_definition];
645 [label="111_ winner_TOD15.transfer(msg.value);\n645-expression_statement-112-112", method="getReward_TOD15()", type_label=expression_statement];
654 [label="113_ mapping (address => mapping (address => uint256)) private _allowances;\n654-new_variable-114-114", method="", type_label=new_variable];
663 [label="114_ bool claimed_TOD28 = false;\n663-new_variable-115-115", method="", type_label=new_variable];
669 [label="115_ address payable owner_TOD28;\n669-new_variable-116-116", method="", type_label=new_variable];
673 [label="116_ uint256 reward_TOD28;\n673-new_variable-117-117", method="", type_label=new_variable];
677 [label="117_ function setReward_TOD28() public payable {\n        require (!claimed_TOD28);\n        require(msg.sender == owner_TOD28);\n        owner_TOD28.transfer(reward_TOD28);\n        reward_TOD28 = msg.value;\n    }\n677-function_definition-118-123", method="setReward_TOD28()", type_label=function_definition];
682 [label="118_ require (!claimed_TOD28);\n682-expression_statement-119-119", method="setReward_TOD28()", type_label=expression_statement];
688 [label="119_ require(msg.sender == owner_TOD28);\n688-expression_statement-120-120", method="setReward_TOD28()", type_label=expression_statement];
697 [label="120_ owner_TOD28.transfer(reward_TOD28);\n697-expression_statement-121-121", method="setReward_TOD28()", type_label=expression_statement];
704 [label="121_ reward_TOD28 = msg.value;\n704-expression_statement-122-122", method="setReward_TOD28()", type_label=expression_statement];
710 [label="123_ function claimReward_TOD28(uint256 submission) public {\n        require (!claimed_TOD28);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD28);\n        claimed_TOD28 = true;\n    }\n710-function_definition-124-129", method="claimReward_TOD28(uint256 submission)", type_label=function_definition];
718 [label="124_ require (!claimed_TOD28);\n718-expression_statement-125-125", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
724 [label="125_ require(submission < 10);\n724-expression_statement-126-126", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
731 [label="126_ msg.sender.transfer(reward_TOD28);\n731-expression_statement-127-127", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
740 [label="127_ claimed_TOD28 = true;\n740-expression_statement-128-128", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
745 [label="129_ uint256 private _totalSupply;\n745-new_variable-130-130", method="", type_label=new_variable];
750 [label="130_ bool claimed_TOD34 = false;\n750-new_variable-131-131", method="", type_label=new_variable];
756 [label="131_ address payable owner_TOD34;\n756-new_variable-132-132", method="", type_label=new_variable];
760 [label="132_ uint256 reward_TOD34;\n760-new_variable-133-133", method="", type_label=new_variable];
764 [label="133_ function setReward_TOD34() public payable {\n        require (!claimed_TOD34);\n        require(msg.sender == owner_TOD34);\n        owner_TOD34.transfer(reward_TOD34);\n        reward_TOD34 = msg.value;\n    }\n764-function_definition-134-139", method="setReward_TOD34()", type_label=function_definition];
769 [label="134_ require (!claimed_TOD34);\n769-expression_statement-135-135", method="setReward_TOD34()", type_label=expression_statement];
775 [label="135_ require(msg.sender == owner_TOD34);\n775-expression_statement-136-136", method="setReward_TOD34()", type_label=expression_statement];
784 [label="136_ owner_TOD34.transfer(reward_TOD34);\n784-expression_statement-137-137", method="setReward_TOD34()", type_label=expression_statement];
791 [label="137_ reward_TOD34 = msg.value;\n791-expression_statement-138-138", method="setReward_TOD34()", type_label=expression_statement];
797 [label="139_ function claimReward_TOD34(uint256 submission) public {\n        require (!claimed_TOD34);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD34);\n        claimed_TOD34 = true;\n    }\n797-function_definition-140-145", method="claimReward_TOD34(uint256 submission)", type_label=function_definition];
805 [label="140_ require (!claimed_TOD34);\n805-expression_statement-141-141", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
811 [label="141_ require(submission < 10);\n811-expression_statement-142-142", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
818 [label="142_ msg.sender.transfer(reward_TOD34);\n818-expression_statement-143-143", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
827 [label="143_ claimed_TOD34 = true;\n827-expression_statement-144-144", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
832 [label="145_ uint256 public _maxTotalSupply;\n832-new_variable-146-146", method="", type_label=new_variable];
837 [label="146_ address payable winner_TOD21;\n837-new_variable-147-147", method="", type_label=new_variable];
841 [label="147_ function play_TOD21(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD21 = msg.sender;\n        }\n    }\n841-function_definition-148-152", method="play_TOD21(bytes32 guess)", type_label=function_definition];
849 [label="148_ if\n849-if-149-151", method="play_TOD21(bytes32 guess)", type_label=if];
4508 [label="148_ end_if", method="play_TOD21(bytes32 guess)", type_label=end_if];
871 [label="149_ winner_TOD21 = msg.sender;\n871-expression_statement-150-150", method="play_TOD21(bytes32 guess)", type_label=expression_statement];
877 [label="152_ function getReward_TOD21() payable public{\n       winner_TOD21.transfer(msg.value);\n    }\n877-function_definition-153-155", method="getReward_TOD21()", type_label=function_definition];
882 [label="153_ winner_TOD21.transfer(msg.value);\n882-expression_statement-154-154", method="getReward_TOD21()", type_label=expression_statement];
891 [label="155_ string private _name = \"Lollypop\";\n891-new_variable-156-156", method="", type_label=new_variable];
898 [label="156_ bool claimed_TOD10 = false;\n898-new_variable-157-157", method="", type_label=new_variable];
904 [label="157_ address payable owner_TOD10;\n904-new_variable-158-158", method="", type_label=new_variable];
908 [label="158_ uint256 reward_TOD10;\n908-new_variable-159-159", method="", type_label=new_variable];
912 [label="159_ function setReward_TOD10() public payable {\n        require (!claimed_TOD10);\n        require(msg.sender == owner_TOD10);\n        owner_TOD10.transfer(reward_TOD10);\n        reward_TOD10 = msg.value;\n    }\n912-function_definition-160-165", method="setReward_TOD10()", type_label=function_definition];
917 [label="160_ require (!claimed_TOD10);\n917-expression_statement-161-161", method="setReward_TOD10()", type_label=expression_statement];
923 [label="161_ require(msg.sender == owner_TOD10);\n923-expression_statement-162-162", method="setReward_TOD10()", type_label=expression_statement];
932 [label="162_ owner_TOD10.transfer(reward_TOD10);\n932-expression_statement-163-163", method="setReward_TOD10()", type_label=expression_statement];
939 [label="163_ reward_TOD10 = msg.value;\n939-expression_statement-164-164", method="setReward_TOD10()", type_label=expression_statement];
945 [label="165_ function claimReward_TOD10(uint256 submission) public {\n        require (!claimed_TOD10);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD10);\n        claimed_TOD10 = true;\n    }\n945-function_definition-166-171", method="claimReward_TOD10(uint256 submission)", type_label=function_definition];
953 [label="166_ require (!claimed_TOD10);\n953-expression_statement-167-167", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
959 [label="167_ require(submission < 10);\n959-expression_statement-168-168", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
966 [label="168_ msg.sender.transfer(reward_TOD10);\n966-expression_statement-169-169", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
975 [label="169_ claimed_TOD10 = true;\n975-expression_statement-170-170", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
980 [label="171_ string private _symbol = \"Lolly\";\n980-new_variable-172-172", method="", type_label=new_variable];
987 [label="172_ bool claimed_TOD22 = false;\n987-new_variable-173-173", method="", type_label=new_variable];
993 [label="173_ address payable owner_TOD22;\n993-new_variable-174-174", method="", type_label=new_variable];
997 [label="174_ uint256 reward_TOD22;\n997-new_variable-175-175", method="", type_label=new_variable];
1001 [label="175_ function setReward_TOD22() public payable {\n        require (!claimed_TOD22);\n        require(msg.sender == owner_TOD22);\n        owner_TOD22.transfer(reward_TOD22);\n        reward_TOD22 = msg.value;\n    }\n1001-function_definition-176-181", method="setReward_TOD22()", type_label=function_definition];
1006 [label="176_ require (!claimed_TOD22);\n1006-expression_statement-177-177", method="setReward_TOD22()", type_label=expression_statement];
1012 [label="177_ require(msg.sender == owner_TOD22);\n1012-expression_statement-178-178", method="setReward_TOD22()", type_label=expression_statement];
1021 [label="178_ owner_TOD22.transfer(reward_TOD22);\n1021-expression_statement-179-179", method="setReward_TOD22()", type_label=expression_statement];
1028 [label="179_ reward_TOD22 = msg.value;\n1028-expression_statement-180-180", method="setReward_TOD22()", type_label=expression_statement];
1034 [label="181_ function claimReward_TOD22(uint256 submission) public {\n        require (!claimed_TOD22);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD22);\n        claimed_TOD22 = true;\n    }\n1034-function_definition-182-187", method="claimReward_TOD22(uint256 submission)", type_label=function_definition];
1042 [label="182_ require (!claimed_TOD22);\n1042-expression_statement-183-183", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1048 [label="183_ require(submission < 10);\n1048-expression_statement-184-184", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1055 [label="184_ msg.sender.transfer(reward_TOD22);\n1055-expression_statement-185-185", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1064 [label="185_ claimed_TOD22 = true;\n1064-expression_statement-186-186", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1069 [label="187_ uint8 private _decimals= 18;\n1069-new_variable-188-188", method="", type_label=new_variable];
1075 [label="188_ bool claimed_TOD12 = false;\n1075-new_variable-189-189", method="", type_label=new_variable];
1081 [label="189_ address payable owner_TOD12;\n1081-new_variable-190-190", method="", type_label=new_variable];
1085 [label="190_ uint256 reward_TOD12;\n1085-new_variable-191-191", method="", type_label=new_variable];
1089 [label="191_ function setReward_TOD12() public payable {\n        require (!claimed_TOD12);\n        require(msg.sender == owner_TOD12);\n        owner_TOD12.transfer(reward_TOD12);\n        reward_TOD12 = msg.value;\n    }\n1089-function_definition-192-197", method="setReward_TOD12()", type_label=function_definition];
1094 [label="192_ require (!claimed_TOD12);\n1094-expression_statement-193-193", method="setReward_TOD12()", type_label=expression_statement];
1100 [label="193_ require(msg.sender == owner_TOD12);\n1100-expression_statement-194-194", method="setReward_TOD12()", type_label=expression_statement];
1109 [label="194_ owner_TOD12.transfer(reward_TOD12);\n1109-expression_statement-195-195", method="setReward_TOD12()", type_label=expression_statement];
1116 [label="195_ reward_TOD12 = msg.value;\n1116-expression_statement-196-196", method="setReward_TOD12()", type_label=expression_statement];
1122 [label="197_ function claimReward_TOD12(uint256 submission) public {\n        require (!claimed_TOD12);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD12);\n        claimed_TOD12 = true;\n    }\n1122-function_definition-198-203", method="claimReward_TOD12(uint256 submission)", type_label=function_definition];
1130 [label="198_ require (!claimed_TOD12);\n1130-expression_statement-199-199", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1136 [label="199_ require(submission < 10);\n1136-expression_statement-200-200", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1143 [label="200_ msg.sender.transfer(reward_TOD12);\n1143-expression_statement-201-201", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1152 [label="201_ claimed_TOD12 = true;\n1152-expression_statement-202-202", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1157 [label="203_ uint256 public maxAgeOfToken = 365 days;\n1157-new_variable-204-204", method="", type_label=new_variable];
1164 [label="204_ address payable winner_TOD11;\n1164-new_variable-205-205", method="", type_label=new_variable];
1168 [label="205_ function play_TOD11(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD11 = msg.sender;\n        }\n    }\n1168-function_definition-206-210", method="play_TOD11(bytes32 guess)", type_label=function_definition];
1176 [label="206_ if\n1176-if-207-209", method="play_TOD11(bytes32 guess)", type_label=if];
4835 [label="206_ end_if", method="play_TOD11(bytes32 guess)", type_label=end_if];
1198 [label="207_ winner_TOD11 = msg.sender;\n1198-expression_statement-208-208", method="play_TOD11(bytes32 guess)", type_label=expression_statement];
1204 [label="210_ function getReward_TOD11() payable public{\n       winner_TOD11.transfer(msg.value);\n    }\n1204-function_definition-211-213", method="getReward_TOD11()", type_label=function_definition];
1209 [label="211_ winner_TOD11.transfer(msg.value);\n1209-expression_statement-212-212", method="getReward_TOD11()", type_label=expression_statement];
1218 [label="213_ uint256  public minAgeOfToken = 1 days;\n1218-new_variable-214-214", method="", type_label=new_variable];
1225 [label="214_ address payable winner_TOD1;\n1225-new_variable-215-215", method="", type_label=new_variable];
1229 [label="215_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n1229-function_definition-216-220", method="play_TOD1(bytes32 guess)", type_label=function_definition];
1237 [label="216_ if\n1237-if-217-219", method="play_TOD1(bytes32 guess)", type_label=if];
4896 [label="216_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
1259 [label="217_ winner_TOD1 = msg.sender;\n1259-expression_statement-218-218", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
1265 [label="220_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n1265-function_definition-221-223", method="getReward_TOD1()", type_label=function_definition];
1270 [label="221_ winner_TOD1.transfer(msg.value);\n1270-expression_statement-222-222", method="getReward_TOD1()", type_label=expression_statement];
1279 [label="223_ uint256 public perDayBonus = 100;\n1279-new_variable-224-224", method="", type_label=new_variable];
1285 [label="224_ struct  transferMapping{\n        uint256 amount;\n        uint256 time;\n    }\n1285-expression_statement-225-228", method="transferMapping()", type_label=expression_statement];
1297 [label="229_ _maxTotalSupply = 1000000000 * 10 ** 18;\n1297-expression_statement-230-230", method="", type_label=expression_statement];
1305 [label="230_ _totalSupply =  2000000 * 10 ** 18;\n1305-expression_statement-231-231", method="", type_label=expression_statement];
1313 [label="231_ _balances[msg.sender].amount = _totalSupply;\n1313-expression_statement-232-232", method="", type_label=expression_statement];
1323 [label="232_ _balances[msg.sender].time = now;\n1323-expression_statement-233-233", method="", type_label=expression_statement];
1333 [label="234_ address payable winner_TOD37;\n1333-new_variable-235-235", method="", type_label=new_variable];
1337 [label="235_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n1337-function_definition-236-240", method="play_TOD37(bytes32 guess)", type_label=function_definition];
1345 [label="236_ if\n1345-if-237-239", method="play_TOD37(bytes32 guess)", type_label=if];
5004 [label="236_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
1367 [label="237_ winner_TOD37 = msg.sender;\n1367-expression_statement-238-238", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
1373 [label="240_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n1373-function_definition-241-243", method="getReward_TOD37()", type_label=function_definition];
1378 [label="241_ winner_TOD37.transfer(msg.value);\n1378-expression_statement-242-242", method="getReward_TOD37()", type_label=expression_statement];
1387 [label="243_ function calculateBonus(uint256 timeElasped , uint256 amount) public view  returns(uint256){\n        uint256 totalDays = timeElasped.div(minAgeOfToken);\n        if(totalDays > maxAgeOfToken){\n            totalDays = maxAgeOfToken;\n        }\n        uint256 totalBonus = (totalDays *  amount).div(perDayBonus);\n        return totalBonus;\n    }\n1387-function_definition-244-251", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=function_definition];
1404 [label="244_ uint256 totalDays = timeElasped.div(minAgeOfToken);\n1404-new_variable-245-245", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=new_variable];
1415 [label="245_ if_totalDays > maxAgeOfToken\n1415-if-246-248", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=if];
5074 [label="245_ end_if", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=end_if];
1420 [label="246_ totalDays = maxAgeOfToken;\n1420-expression_statement-247-247", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=expression_statement];
1424 [label="248_ uint256 totalBonus = (totalDays *  amount).div(perDayBonus);\n1424-new_variable-249-249", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=new_variable];
1438 [label="249_ return totalBonus;\n1438-return-250-250", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=return];
1440 [label="251_ address payable winner_TOD3;\n1440-new_variable-252-252", method="", type_label=new_variable];
1444 [label="252_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n1444-function_definition-253-257", method="play_TOD3(bytes32 guess)", type_label=function_definition];
1452 [label="253_ if\n1452-if-254-256", method="play_TOD3(bytes32 guess)", type_label=if];
5111 [label="253_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
1474 [label="254_ winner_TOD3 = msg.sender;\n1474-expression_statement-255-255", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
1480 [label="257_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n1480-function_definition-258-260", method="getReward_TOD3()", type_label=function_definition];
1485 [label="258_ winner_TOD3.transfer(msg.value);\n1485-expression_statement-259-259", method="getReward_TOD3()", type_label=expression_statement];
1494 [label="260_ function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        uint256 senderTimeElasped = now - (_balances[sender].time);\n        uint256 recipientTimeElasped = now - (_balances[recipient].time);\n        if(senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)){\n            uint256 bonus = calculateBonus(senderTimeElasped , balanceOf(sender));\n            mint(sender , bonus);\n        }\n        if(recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient){\n             uint256 bonus = calculateBonus(recipientTimeElasped , balanceOf(recipient));\n             mint(recipient , bonus);\n        }\n        _balances[sender].amount = _balances[sender].amount.sub(amount);\n        _balances[recipient].amount = _balances[recipient].amount.add(amount);\n        _balances[sender].time = now;\n        _balances[recipient].time = now;\n        emit Transfer(sender, recipient, amount);\n    }\n1494-function_definition-261-279", method="_transfer(address sender,address recipient,uint256 amount)", type_label=function_definition];
1510 [label="261_ require(sender != address(0), \"ERC20: transfer from the zero address\");\n1510-expression_statement-262-262", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1522 [label="262_ require(recipient != address(0), \"ERC20: transfer to the zero address\");\n1522-expression_statement-263-263", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1534 [label="263_ uint256 senderTimeElasped = now - (_balances[sender].time);\n1534-new_variable-264-264", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
1547 [label="264_ uint256 recipientTimeElasped = now - (_balances[recipient].time);\n1547-new_variable-265-265", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
1560 [label="265_ if_senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)\n1560-if-266-269", method="_transfer(address sender,address recipient,uint256 amount)", type_label=if];
5219 [label="265_ end_if", method="_transfer(address sender,address recipient,uint256 amount)", type_label=end_if];
1570 [label="266_ uint256 bonus = calculateBonus(senderTimeElasped , balanceOf(sender));\n1570-new_variable-267-267", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
1584 [label="267_ mint(sender , bonus);\n1584-expression_statement-268-268", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1591 [label="269_ if_recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient\n1591-if-270-273", method="_transfer(address sender,address recipient,uint256 amount)", type_label=if];
5250 [label="269_ end_if", method="_transfer(address sender,address recipient,uint256 amount)", type_label=end_if];
1605 [label="270_ uint256 bonus = calculateBonus(recipientTimeElasped , balanceOf(recipient));\n1605-new_variable-271-271", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
1619 [label="271_ mint(recipient , bonus);\n1619-expression_statement-272-272", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1626 [label="273_ _balances[sender].amount = _balances[sender].amount.sub(amount);\n1626-expression_statement-274-274", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1643 [label="274_ _balances[recipient].amount = _balances[recipient].amount.add(amount);\n1643-expression_statement-275-275", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1660 [label="275_ _balances[sender].time = now;\n1660-expression_statement-276-276", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1668 [label="276_ _balances[recipient].time = now;\n1668-expression_statement-277-277", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1684 [label="279_ address payable winner_TOD9;\n1684-new_variable-280-280", method="", type_label=new_variable];
1688 [label="280_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n1688-function_definition-281-285", method="play_TOD9(bytes32 guess)", type_label=function_definition];
1696 [label="281_ if\n1696-if-282-284", method="play_TOD9(bytes32 guess)", type_label=if];
5355 [label="281_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
1718 [label="282_ winner_TOD9 = msg.sender;\n1718-expression_statement-283-283", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
1724 [label="285_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n1724-function_definition-286-288", method="getReward_TOD9()", type_label=function_definition];
1729 [label="286_ winner_TOD9.transfer(msg.value);\n1729-expression_statement-287-287", method="getReward_TOD9()", type_label=expression_statement];
1738 [label="288_ function name() public view returns (string memory) {\n        return _name;\n    }\n1738-function_definition-289-291", method="name()", type_label=function_definition];
1747 [label="289_ return _name;\n1747-return-290-290", method="name()", type_label=return];
1749 [label="291_ address payable winner_TOD25;\n1749-new_variable-292-292", method="", type_label=new_variable];
1753 [label="292_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n1753-function_definition-293-297", method="play_TOD25(bytes32 guess)", type_label=function_definition];
1761 [label="293_ if\n1761-if-294-296", method="play_TOD25(bytes32 guess)", type_label=if];
5420 [label="293_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
1783 [label="294_ winner_TOD25 = msg.sender;\n1783-expression_statement-295-295", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
1789 [label="297_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n1789-function_definition-298-300", method="getReward_TOD25()", type_label=function_definition];
1794 [label="298_ winner_TOD25.transfer(msg.value);\n1794-expression_statement-299-299", method="getReward_TOD25()", type_label=expression_statement];
1803 [label="300_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n1803-function_definition-301-303", method="symbol()", type_label=function_definition];
1812 [label="301_ return _symbol;\n1812-return-302-302", method="symbol()", type_label=return];
1814 [label="303_ address payable winner_TOD19;\n1814-new_variable-304-304", method="", type_label=new_variable];
1818 [label="304_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n1818-function_definition-305-309", method="play_TOD19(bytes32 guess)", type_label=function_definition];
1826 [label="305_ if\n1826-if-306-308", method="play_TOD19(bytes32 guess)", type_label=if];
5485 [label="305_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
1848 [label="306_ winner_TOD19 = msg.sender;\n1848-expression_statement-307-307", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
1854 [label="309_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n1854-function_definition-310-312", method="getReward_TOD19()", type_label=function_definition];
1859 [label="310_ winner_TOD19.transfer(msg.value);\n1859-expression_statement-311-311", method="getReward_TOD19()", type_label=expression_statement];
1868 [label="312_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n1868-function_definition-313-315", method="decimals()", type_label=function_definition];
1877 [label="313_ return _decimals;\n1877-return-314-314", method="decimals()", type_label=return];
1879 [label="315_ bool claimed_TOD26 = false;\n1879-new_variable-316-316", method="", type_label=new_variable];
1885 [label="316_ address payable owner_TOD26;\n1885-new_variable-317-317", method="", type_label=new_variable];
1889 [label="317_ uint256 reward_TOD26;\n1889-new_variable-318-318", method="", type_label=new_variable];
1893 [label="318_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n1893-function_definition-319-324", method="setReward_TOD26()", type_label=function_definition];
1898 [label="319_ require (!claimed_TOD26);\n1898-expression_statement-320-320", method="setReward_TOD26()", type_label=expression_statement];
1904 [label="320_ require(msg.sender == owner_TOD26);\n1904-expression_statement-321-321", method="setReward_TOD26()", type_label=expression_statement];
1913 [label="321_ owner_TOD26.transfer(reward_TOD26);\n1913-expression_statement-322-322", method="setReward_TOD26()", type_label=expression_statement];
1920 [label="322_ reward_TOD26 = msg.value;\n1920-expression_statement-323-323", method="setReward_TOD26()", type_label=expression_statement];
1926 [label="324_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n1926-function_definition-325-330", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
1934 [label="325_ require (!claimed_TOD26);\n1934-expression_statement-326-326", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1940 [label="326_ require(submission < 10);\n1940-expression_statement-327-327", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1947 [label="327_ msg.sender.transfer(reward_TOD26);\n1947-expression_statement-328-328", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1956 [label="328_ claimed_TOD26 = true;\n1956-expression_statement-329-329", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1961 [label="330_ modifier onlyLollypopAndOwner {\n        require(msg.sender == address(this) || msg.sender == owner);\n        _;\n    }\n1961-expression_statement-331-334", method="", type_label=expression_statement];
1964 [label="331_ require(msg.sender == address(this) || msg.sender == owner);\n1964-expression_statement-332-332", method="", type_label=expression_statement];
1981 [label="332_ _;\n1981-expression_statement-333-333", method="", type_label=expression_statement];
1983 [label="334_ address payable winner_TOD31;\n1983-new_variable-335-335", method="", type_label=new_variable];
1987 [label="335_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n1987-function_definition-336-340", method="play_TOD31(bytes32 guess)", type_label=function_definition];
1995 [label="336_ if\n1995-if-337-339", method="play_TOD31(bytes32 guess)", type_label=if];
5654 [label="336_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
2017 [label="337_ winner_TOD31 = msg.sender;\n2017-expression_statement-338-338", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
2023 [label="340_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n2023-function_definition-341-343", method="getReward_TOD31()", type_label=function_definition];
2028 [label="341_ winner_TOD31.transfer(msg.value);\n2028-expression_statement-342-342", method="getReward_TOD31()", type_label=expression_statement];
2051 [label="344_ address payable winner_TOD13;\n2051-new_variable-345-345", method="", type_label=new_variable];
2055 [label="345_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n2055-function_definition-346-350", method="play_TOD13(bytes32 guess)", type_label=function_definition];
2063 [label="346_ if\n2063-if-347-349", method="play_TOD13(bytes32 guess)", type_label=if];
5722 [label="346_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
2085 [label="347_ winner_TOD13 = msg.sender;\n2085-expression_statement-348-348", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
2091 [label="350_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n2091-function_definition-351-353", method="getReward_TOD13()", type_label=function_definition];
2096 [label="351_ winner_TOD13.transfer(msg.value);\n2096-expression_statement-352-352", method="getReward_TOD13()", type_label=expression_statement];
2119 [label="354_ function mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account].amount = _balances[account].amount.add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n2119-function_definition-355-360", method="mint(address account,uint256 amount)", type_label=function_definition];
2131 [label="355_ require(account != address(0), \"ERC20: mint to the zero address\");\n2131-expression_statement-356-356", method="mint(address account,uint256 amount)", type_label=expression_statement];
2143 [label="356_ _totalSupply = _totalSupply.add(amount);\n2143-expression_statement-357-357", method="mint(address account,uint256 amount)", type_label=expression_statement];
2152 [label="357_ _balances[account].amount = _balances[account].amount.add(amount);\n2152-expression_statement-358-358", method="mint(address account,uint256 amount)", type_label=expression_statement];
2179 [label="360_ bool claimed_TOD20 = false;\n2179-new_variable-361-361", method="", type_label=new_variable];
2185 [label="361_ address payable owner_TOD20;\n2185-new_variable-362-362", method="", type_label=new_variable];
2189 [label="362_ uint256 reward_TOD20;\n2189-new_variable-363-363", method="", type_label=new_variable];
2193 [label="363_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n2193-function_definition-364-369", method="setReward_TOD20()", type_label=function_definition];
2198 [label="364_ require (!claimed_TOD20);\n2198-expression_statement-365-365", method="setReward_TOD20()", type_label=expression_statement];
2204 [label="365_ require(msg.sender == owner_TOD20);\n2204-expression_statement-366-366", method="setReward_TOD20()", type_label=expression_statement];
2213 [label="366_ owner_TOD20.transfer(reward_TOD20);\n2213-expression_statement-367-367", method="setReward_TOD20()", type_label=expression_statement];
2220 [label="367_ reward_TOD20 = msg.value;\n2220-expression_statement-368-368", method="setReward_TOD20()", type_label=expression_statement];
2226 [label="369_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n2226-function_definition-370-375", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
2234 [label="370_ require (!claimed_TOD20);\n2234-expression_statement-371-371", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2240 [label="371_ require(submission < 10);\n2240-expression_statement-372-372", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2247 [label="372_ msg.sender.transfer(reward_TOD20);\n2247-expression_statement-373-373", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2256 [label="373_ claimed_TOD20 = true;\n2256-expression_statement-374-374", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2261 [label="375_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n2261-function_definition-376-378", method="totalSupply()", type_label=function_definition];
2270 [label="376_ return _totalSupply;\n2270-return-377-377", method="totalSupply()", type_label=return];
2272 [label="378_ bool claimed_TOD32 = false;\n2272-new_variable-379-379", method="", type_label=new_variable];
2278 [label="379_ address payable owner_TOD32;\n2278-new_variable-380-380", method="", type_label=new_variable];
2282 [label="380_ uint256 reward_TOD32;\n2282-new_variable-381-381", method="", type_label=new_variable];
2286 [label="381_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n2286-function_definition-382-387", method="setReward_TOD32()", type_label=function_definition];
2291 [label="382_ require (!claimed_TOD32);\n2291-expression_statement-383-383", method="setReward_TOD32()", type_label=expression_statement];
2297 [label="383_ require(msg.sender == owner_TOD32);\n2297-expression_statement-384-384", method="setReward_TOD32()", type_label=expression_statement];
2306 [label="384_ owner_TOD32.transfer(reward_TOD32);\n2306-expression_statement-385-385", method="setReward_TOD32()", type_label=expression_statement];
2313 [label="385_ reward_TOD32 = msg.value;\n2313-expression_statement-386-386", method="setReward_TOD32()", type_label=expression_statement];
2319 [label="387_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n2319-function_definition-388-393", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
2327 [label="388_ require (!claimed_TOD32);\n2327-expression_statement-389-389", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2333 [label="389_ require(submission < 10);\n2333-expression_statement-390-390", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2340 [label="390_ msg.sender.transfer(reward_TOD32);\n2340-expression_statement-391-391", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2349 [label="391_ claimed_TOD32 = true;\n2349-expression_statement-392-392", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2354 [label="393_ function balanceOf(address account) public view returns (uint256) {\n        return _balances[account].amount;\n    }\n2354-function_definition-394-396", method="balanceOf(address account)", type_label=function_definition];
2367 [label="394_ return _balances[account].amount;\n2367-return-395-395", method="balanceOf(address account)", type_label=return];
2373 [label="396_ bool claimed_TOD38 = false;\n2373-new_variable-397-397", method="", type_label=new_variable];
2379 [label="397_ address payable owner_TOD38;\n2379-new_variable-398-398", method="", type_label=new_variable];
2383 [label="398_ uint256 reward_TOD38;\n2383-new_variable-399-399", method="", type_label=new_variable];
2387 [label="399_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n2387-function_definition-400-405", method="setReward_TOD38()", type_label=function_definition];
2392 [label="400_ require (!claimed_TOD38);\n2392-expression_statement-401-401", method="setReward_TOD38()", type_label=expression_statement];
2398 [label="401_ require(msg.sender == owner_TOD38);\n2398-expression_statement-402-402", method="setReward_TOD38()", type_label=expression_statement];
2407 [label="402_ owner_TOD38.transfer(reward_TOD38);\n2407-expression_statement-403-403", method="setReward_TOD38()", type_label=expression_statement];
2414 [label="403_ reward_TOD38 = msg.value;\n2414-expression_statement-404-404", method="setReward_TOD38()", type_label=expression_statement];
2420 [label="405_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n2420-function_definition-406-411", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
2428 [label="406_ require (!claimed_TOD38);\n2428-expression_statement-407-407", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2434 [label="407_ require(submission < 10);\n2434-expression_statement-408-408", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2441 [label="408_ msg.sender.transfer(reward_TOD38);\n2441-expression_statement-409-409", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2450 [label="409_ claimed_TOD38 = true;\n2450-expression_statement-410-410", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2455 [label="411_ function timeOf(address account) public view returns (uint256) {\n        return _balances[account].time;\n    }\n2455-function_definition-412-414", method="timeOf(address account)", type_label=function_definition];
2468 [label="412_ return _balances[account].time;\n2468-return-413-413", method="timeOf(address account)", type_label=return];
2474 [label="414_ bool claimed_TOD4 = false;\n2474-new_variable-415-415", method="", type_label=new_variable];
2480 [label="415_ address payable owner_TOD4;\n2480-new_variable-416-416", method="", type_label=new_variable];
2484 [label="416_ uint256 reward_TOD4;\n2484-new_variable-417-417", method="", type_label=new_variable];
2488 [label="417_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n2488-function_definition-418-423", method="setReward_TOD4()", type_label=function_definition];
2493 [label="418_ require (!claimed_TOD4);\n2493-expression_statement-419-419", method="setReward_TOD4()", type_label=expression_statement];
2499 [label="419_ require(msg.sender == owner_TOD4);\n2499-expression_statement-420-420", method="setReward_TOD4()", type_label=expression_statement];
2508 [label="420_ owner_TOD4.transfer(reward_TOD4);\n2508-expression_statement-421-421", method="setReward_TOD4()", type_label=expression_statement];
2515 [label="421_ reward_TOD4 = msg.value;\n2515-expression_statement-422-422", method="setReward_TOD4()", type_label=expression_statement];
2521 [label="423_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n2521-function_definition-424-429", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
2529 [label="424_ require (!claimed_TOD4);\n2529-expression_statement-425-425", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2535 [label="425_ require(submission < 10);\n2535-expression_statement-426-426", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2542 [label="426_ msg.sender.transfer(reward_TOD4);\n2542-expression_statement-427-427", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2551 [label="427_ claimed_TOD4 = true;\n2551-expression_statement-428-428", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2556 [label="429_ function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n2556-function_definition-430-433", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
2572 [label="430_ _transfer(msg.sender, recipient, amount);\n2572-expression_statement-431-431", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
2583 [label="431_ return true;\n2583-return-432-432", method="transfer(address recipient,uint256 amount)", type_label=return];
2586 [label="433_ address payable winner_TOD7;\n2586-new_variable-434-434", method="", type_label=new_variable];
2590 [label="434_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n2590-function_definition-435-439", method="play_TOD7(bytes32 guess)", type_label=function_definition];
2598 [label="435_ if\n2598-if-436-438", method="play_TOD7(bytes32 guess)", type_label=if];
6257 [label="435_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
2620 [label="436_ winner_TOD7 = msg.sender;\n2620-expression_statement-437-437", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
2626 [label="439_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n2626-function_definition-440-442", method="getReward_TOD7()", type_label=function_definition];
2631 [label="440_ winner_TOD7.transfer(msg.value);\n2631-expression_statement-441-441", method="getReward_TOD7()", type_label=expression_statement];
2640 [label="442_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    require(receivers.length == amounts.length);\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n2640-function_definition-443-448", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
2654 [label="443_ require(receivers.length == amounts.length);\n2654-expression_statement-444-444", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
2665 [label="444_ for(i < receivers.length;;i++)\n2665-for-445-447", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
6324 [label="444_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
2678 [label="444_ i++\n2678-expression_statement-445-445", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
2681 [label="445_ transfer(receivers[i], amounts[i]);\n2681-expression_statement-446-446", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
2692 [label="448_ address payable winner_TOD23;\n2692-new_variable-449-449", method="", type_label=new_variable];
2696 [label="449_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n2696-function_definition-450-454", method="play_TOD23(bytes32 guess)", type_label=function_definition];
2704 [label="450_ if\n2704-if-451-453", method="play_TOD23(bytes32 guess)", type_label=if];
6363 [label="450_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
2726 [label="451_ winner_TOD23 = msg.sender;\n2726-expression_statement-452-452", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
2732 [label="454_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n2732-function_definition-455-457", method="getReward_TOD23()", type_label=function_definition];
2737 [label="455_ winner_TOD23.transfer(msg.value);\n2737-expression_statement-456-456", method="getReward_TOD23()", type_label=expression_statement];
2746 [label="457_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n2746-function_definition-458-460", method="allowance(address owner,address spender)", type_label=function_definition];
2763 [label="458_ return _allowances[owner][spender];\n2763-return-459-459", method="allowance(address owner,address spender)", type_label=return];
2769 [label="460_ bool claimed_TOD14 = false;\n2769-new_variable-461-461", method="", type_label=new_variable];
2775 [label="461_ address payable owner_TOD14;\n2775-new_variable-462-462", method="", type_label=new_variable];
2779 [label="462_ uint256 reward_TOD14;\n2779-new_variable-463-463", method="", type_label=new_variable];
2783 [label="463_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n2783-function_definition-464-469", method="setReward_TOD14()", type_label=function_definition];
2788 [label="464_ require (!claimed_TOD14);\n2788-expression_statement-465-465", method="setReward_TOD14()", type_label=expression_statement];
2794 [label="465_ require(msg.sender == owner_TOD14);\n2794-expression_statement-466-466", method="setReward_TOD14()", type_label=expression_statement];
2803 [label="466_ owner_TOD14.transfer(reward_TOD14);\n2803-expression_statement-467-467", method="setReward_TOD14()", type_label=expression_statement];
2810 [label="467_ reward_TOD14 = msg.value;\n2810-expression_statement-468-468", method="setReward_TOD14()", type_label=expression_statement];
2816 [label="469_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n2816-function_definition-470-475", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
2824 [label="470_ require (!claimed_TOD14);\n2824-expression_statement-471-471", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2830 [label="471_ require(submission < 10);\n2830-expression_statement-472-472", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2837 [label="472_ msg.sender.transfer(reward_TOD14);\n2837-expression_statement-473-473", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2846 [label="473_ claimed_TOD14 = true;\n2846-expression_statement-474-474", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2851 [label="475_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n2851-function_definition-476-479", method="approve(address spender,uint256 value)", type_label=function_definition];
2867 [label="476_ _approve(msg.sender, spender, value);\n2867-expression_statement-477-477", method="approve(address spender,uint256 value)", type_label=expression_statement];
2878 [label="477_ return true;\n2878-return-478-478", method="approve(address spender,uint256 value)", type_label=return];
2881 [label="479_ bool claimed_TOD30 = false;\n2881-new_variable-480-480", method="", type_label=new_variable];
2887 [label="480_ address payable owner_TOD30;\n2887-new_variable-481-481", method="", type_label=new_variable];
2891 [label="481_ uint256 reward_TOD30;\n2891-new_variable-482-482", method="", type_label=new_variable];
2895 [label="482_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n2895-function_definition-483-488", method="setReward_TOD30()", type_label=function_definition];
2900 [label="483_ require (!claimed_TOD30);\n2900-expression_statement-484-484", method="setReward_TOD30()", type_label=expression_statement];
2906 [label="484_ require(msg.sender == owner_TOD30);\n2906-expression_statement-485-485", method="setReward_TOD30()", type_label=expression_statement];
2915 [label="485_ owner_TOD30.transfer(reward_TOD30);\n2915-expression_statement-486-486", method="setReward_TOD30()", type_label=expression_statement];
2922 [label="486_ reward_TOD30 = msg.value;\n2922-expression_statement-487-487", method="setReward_TOD30()", type_label=expression_statement];
2928 [label="488_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n2928-function_definition-489-494", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
2936 [label="489_ require (!claimed_TOD30);\n2936-expression_statement-490-490", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2942 [label="490_ require(submission < 10);\n2942-expression_statement-491-491", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2949 [label="491_ msg.sender.transfer(reward_TOD30);\n2949-expression_statement-492-492", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2958 [label="492_ claimed_TOD30 = true;\n2958-expression_statement-493-493", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2963 [label="494_ function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n2963-function_definition-495-499", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
2983 [label="495_ _transfer(sender, recipient, amount);\n2983-expression_statement-496-496", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
2992 [label="496_ _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n2992-expression_statement-497-497", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
3014 [label="497_ return true;\n3014-return-498-498", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=return];
3017 [label="499_ bool claimed_TOD8 = false;\n3017-new_variable-500-500", method="", type_label=new_variable];
3023 [label="500_ address payable owner_TOD8;\n3023-new_variable-501-501", method="", type_label=new_variable];
3027 [label="501_ uint256 reward_TOD8;\n3027-new_variable-502-502", method="", type_label=new_variable];
3031 [label="502_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n3031-function_definition-503-508", method="setReward_TOD8()", type_label=function_definition];
3036 [label="503_ require (!claimed_TOD8);\n3036-expression_statement-504-504", method="setReward_TOD8()", type_label=expression_statement];
3042 [label="504_ require(msg.sender == owner_TOD8);\n3042-expression_statement-505-505", method="setReward_TOD8()", type_label=expression_statement];
3051 [label="505_ owner_TOD8.transfer(reward_TOD8);\n3051-expression_statement-506-506", method="setReward_TOD8()", type_label=expression_statement];
3058 [label="506_ reward_TOD8 = msg.value;\n3058-expression_statement-507-507", method="setReward_TOD8()", type_label=expression_statement];
3064 [label="508_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n3064-function_definition-509-514", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
3072 [label="509_ require (!claimed_TOD8);\n3072-expression_statement-510-510", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3078 [label="510_ require(submission < 10);\n3078-expression_statement-511-511", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3085 [label="511_ msg.sender.transfer(reward_TOD8);\n3085-expression_statement-512-512", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3094 [label="512_ claimed_TOD8 = true;\n3094-expression_statement-513-513", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3099 [label="514_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n3099-function_definition-515-518", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
3115 [label="515_ _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n3115-expression_statement-516-516", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
3137 [label="516_ return true;\n3137-return-517-517", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
3140 [label="518_ address payable winner_TOD39;\n3140-new_variable-519-519", method="", type_label=new_variable];
3144 [label="519_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n3144-function_definition-520-524", method="play_TOD39(bytes32 guess)", type_label=function_definition];
3152 [label="520_ if\n3152-if-521-523", method="play_TOD39(bytes32 guess)", type_label=if];
6811 [label="520_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
3174 [label="521_ winner_TOD39 = msg.sender;\n3174-expression_statement-522-522", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
3180 [label="524_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n3180-function_definition-525-527", method="getReward_TOD39()", type_label=function_definition];
3185 [label="525_ winner_TOD39.transfer(msg.value);\n3185-expression_statement-526-526", method="getReward_TOD39()", type_label=expression_statement];
3194 [label="527_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n3194-function_definition-528-531", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
3210 [label="528_ _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n3210-expression_statement-529-529", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
3232 [label="529_ return true;\n3232-return-530-530", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
3235 [label="531_ bool claimed_TOD36 = false;\n3235-new_variable-532-532", method="", type_label=new_variable];
3241 [label="532_ address payable owner_TOD36;\n3241-new_variable-533-533", method="", type_label=new_variable];
3245 [label="533_ uint256 reward_TOD36;\n3245-new_variable-534-534", method="", type_label=new_variable];
3249 [label="534_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n3249-function_definition-535-540", method="setReward_TOD36()", type_label=function_definition];
3254 [label="535_ require (!claimed_TOD36);\n3254-expression_statement-536-536", method="setReward_TOD36()", type_label=expression_statement];
3260 [label="536_ require(msg.sender == owner_TOD36);\n3260-expression_statement-537-537", method="setReward_TOD36()", type_label=expression_statement];
3269 [label="537_ owner_TOD36.transfer(reward_TOD36);\n3269-expression_statement-538-538", method="setReward_TOD36()", type_label=expression_statement];
3276 [label="538_ reward_TOD36 = msg.value;\n3276-expression_statement-539-539", method="setReward_TOD36()", type_label=expression_statement];
3282 [label="540_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n3282-function_definition-541-546", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
3290 [label="541_ require (!claimed_TOD36);\n3290-expression_statement-542-542", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
3296 [label="542_ require(submission < 10);\n3296-expression_statement-543-543", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
3303 [label="543_ msg.sender.transfer(reward_TOD36);\n3303-expression_statement-544-544", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
3312 [label="544_ claimed_TOD36 = true;\n3312-expression_statement-545-545", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
3317 [label="546_ function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account].amount = _balances[account].amount.sub(value);\n        emit Transfer(account, address(0), value);\n    }\n3317-function_definition-547-552", method="_burn(address account,uint256 value)", type_label=function_definition];
3329 [label="547_ require(account != address(0), \"ERC20: burn from the zero address\");\n3329-expression_statement-548-548", method="_burn(address account,uint256 value)", type_label=expression_statement];
3341 [label="548_ _totalSupply = _totalSupply.sub(value);\n3341-expression_statement-549-549", method="_burn(address account,uint256 value)", type_label=expression_statement];
3350 [label="549_ _balances[account].amount = _balances[account].amount.sub(value);\n3350-expression_statement-550-550", method="_burn(address account,uint256 value)", type_label=expression_statement];
3377 [label="552_ address payable winner_TOD35;\n3377-new_variable-553-553", method="", type_label=new_variable];
3381 [label="553_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n3381-function_definition-554-558", method="play_TOD35(bytes32 guess)", type_label=function_definition];
3389 [label="554_ if\n3389-if-555-557", method="play_TOD35(bytes32 guess)", type_label=if];
7048 [label="554_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
3411 [label="555_ winner_TOD35 = msg.sender;\n3411-expression_statement-556-556", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
3417 [label="558_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n3417-function_definition-559-561", method="getReward_TOD35()", type_label=function_definition];
3422 [label="559_ winner_TOD35.transfer(msg.value);\n3422-expression_statement-560-560", method="getReward_TOD35()", type_label=expression_statement];
3431 [label="561_ function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n3431-function_definition-562-567", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
3447 [label="562_ require(owner != address(0), \"ERC20: approve from the zero address\");\n3447-expression_statement-563-563", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
3459 [label="563_ require(spender != address(0), \"ERC20: approve to the zero address\");\n3459-expression_statement-564-564", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
3471 [label="564_ _allowances[owner][spender] = value;\n3471-expression_statement-565-565", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
3487 [label="567_ bool claimed_TOD40 = false;\n3487-new_variable-568-568", method="", type_label=new_variable];
3493 [label="568_ address payable owner_TOD40;\n3493-new_variable-569-569", method="", type_label=new_variable];
3497 [label="569_ uint256 reward_TOD40;\n3497-new_variable-570-570", method="", type_label=new_variable];
3501 [label="570_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n3501-function_definition-571-576", method="setReward_TOD40()", type_label=function_definition];
3506 [label="571_ require (!claimed_TOD40);\n3506-expression_statement-572-572", method="setReward_TOD40()", type_label=expression_statement];
3512 [label="572_ require(msg.sender == owner_TOD40);\n3512-expression_statement-573-573", method="setReward_TOD40()", type_label=expression_statement];
3521 [label="573_ owner_TOD40.transfer(reward_TOD40);\n3521-expression_statement-574-574", method="setReward_TOD40()", type_label=expression_statement];
3528 [label="574_ reward_TOD40 = msg.value;\n3528-expression_statement-575-575", method="setReward_TOD40()", type_label=expression_statement];
3534 [label="576_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n3534-function_definition-577-582", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
3542 [label="577_ require (!claimed_TOD40);\n3542-expression_statement-578-578", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3548 [label="578_ require(submission < 10);\n3548-expression_statement-579-579", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3555 [label="579_ msg.sender.transfer(reward_TOD40);\n3555-expression_statement-580-580", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3564 [label="580_ claimed_TOD40 = true;\n3564-expression_statement-581-581", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3569 [label="582_ function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n3569-function_definition-583-586", method="_burnFrom(address account,uint256 amount)", type_label=function_definition];
3581 [label="583_ _burn(account, amount);\n3581-expression_statement-584-584", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
3588 [label="584_ _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n3588-expression_statement-585-585", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
3610 [label="586_ address payable winner_TOD33;\n3610-new_variable-587-587", method="", type_label=new_variable];
3614 [label="587_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n3614-function_definition-588-592", method="play_TOD33(bytes32 guess)", type_label=function_definition];
3622 [label="588_ if\n3622-if-589-591", method="play_TOD33(bytes32 guess)", type_label=if];
7281 [label="588_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
3644 [label="589_ winner_TOD33 = msg.sender;\n3644-expression_statement-590-590", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
3650 [label="592_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n3650-function_definition-593-595", method="getReward_TOD33()", type_label=function_definition];
3655 [label="593_ winner_TOD33.transfer(msg.value);\n3655-expression_statement-594-594", method="getReward_TOD33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 19  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
19 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
27 -> 32  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
32 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 74  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
74 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 134  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
112 -> 3771  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3771 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 3771  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
140 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
240 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
257 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
268 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 316  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
294 -> 3953  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3953 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 3953  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
322 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
376 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
413 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 435  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
430 -> 4089  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4089 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 4089  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
435 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
437 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
459 -> 476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
496 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
542 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 572  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
550 -> 4209  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4209 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 4209  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
578 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 634  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
612 -> 4271  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4271 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
634 -> 4271  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
640 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
682 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
756 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
775 -> 784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
784 -> 791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
811 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 871  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
849 -> 4508  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4508 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 4508  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
877 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
898 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
953 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
966 -> 975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
980 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1001 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1069 -> 1075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 1081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1081 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1089 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1094 -> 1100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1100 -> 1109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1109 -> 1116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1122 -> 1130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1130 -> 1136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1136 -> 1143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1143 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1157 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1168 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 1198  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1176 -> 4835  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4835 -> 1204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1198 -> 4835  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1204 -> 1209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1218 -> 1225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1229 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1259  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1237 -> 4896  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4896 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1259 -> 4896  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1265 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1279 -> 1285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1305 -> 1313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1313 -> 1323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1337 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1345 -> 1367  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1345 -> 5004  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5004 -> 1373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1367 -> 5004  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1373 -> 1378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1387 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1415 -> 1420  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1415 -> 5074  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5074 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1420 -> 5074  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1424 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1444 -> 1452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1452 -> 1474  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1452 -> 5111  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5111 -> 1480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1474 -> 5111  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1480 -> 1485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1494 -> 1510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1510 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1522 -> 1534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1534 -> 1547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 1560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1560 -> 1570  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1560 -> 5219  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5219 -> 1591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1570 -> 1584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 5219  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1591 -> 1605  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1591 -> 5250  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5250 -> 1626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1605 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1619 -> 5250  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1626 -> 1643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1643 -> 1660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1660 -> 1668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1688 -> 1696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1696 -> 1718  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1696 -> 5355  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5355 -> 1724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1718 -> 5355  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1724 -> 1729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1738 -> 1747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1747 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1753 -> 1761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1761 -> 1783  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1761 -> 5420  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5420 -> 1789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1783 -> 5420  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1789 -> 1794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1812 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1818 -> 1826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1826 -> 1848  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1826 -> 5485  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5485 -> 1854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1848 -> 5485  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1854 -> 1859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1868 -> 1877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1877 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1879 -> 1885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1885 -> 1889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1893 -> 1898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1898 -> 1904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1904 -> 1913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1913 -> 1920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1926 -> 1934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1934 -> 1940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1940 -> 1947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1947 -> 1956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1961 -> 1983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1964 -> 1981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1987 -> 1995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1995 -> 2017  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1995 -> 5654  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5654 -> 2023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2017 -> 5654  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2023 -> 2028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2055 -> 2063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2063 -> 2085  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2063 -> 5722  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5722 -> 2091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2085 -> 5722  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2091 -> 2096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2119 -> 2131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2131 -> 2143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2143 -> 2152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2179 -> 2185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2185 -> 2189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2193 -> 2198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2198 -> 2204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2204 -> 2213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2213 -> 2220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2226 -> 2234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2234 -> 2240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2240 -> 2247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2247 -> 2256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2261 -> 2270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2270 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2272 -> 2278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2278 -> 2282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2286 -> 2291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2291 -> 2297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2297 -> 2306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2306 -> 2313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2319 -> 2327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2327 -> 2333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2333 -> 2340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2340 -> 2349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2354 -> 2367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2367 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2373 -> 2379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2379 -> 2383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2387 -> 2392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2392 -> 2398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2398 -> 2407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2407 -> 2414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2420 -> 2428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2428 -> 2434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2434 -> 2441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2441 -> 2450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2455 -> 2468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2468 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2474 -> 2480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2480 -> 2484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2488 -> 2493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2493 -> 2499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2499 -> 2508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2508 -> 2515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2521 -> 2529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2529 -> 2535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2535 -> 2542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2542 -> 2551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2556 -> 2572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2572 -> 2583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2583 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2590 -> 2598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2598 -> 2620  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2598 -> 6257  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6257 -> 2626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2620 -> 6257  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2626 -> 2631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2640 -> 2654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2654 -> 2665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2665 -> 2681  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2665 -> 6324  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6324 -> 2692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2678 -> 2665  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2681 -> 2678  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2696 -> 2704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2704 -> 2726  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2704 -> 6363  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6363 -> 2732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2726 -> 6363  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2732 -> 2737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2746 -> 2763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2763 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2769 -> 2775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2775 -> 2779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2783 -> 2788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2788 -> 2794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2794 -> 2803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2803 -> 2810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2816 -> 2824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2824 -> 2830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2830 -> 2837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2837 -> 2846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2851 -> 2867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2867 -> 2878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2878 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2881 -> 2887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2887 -> 2891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2895 -> 2900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2900 -> 2906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2906 -> 2915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2915 -> 2922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2928 -> 2936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2936 -> 2942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2942 -> 2949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2949 -> 2958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2963 -> 2983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2983 -> 2992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2992 -> 3014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3014 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3017 -> 3023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3023 -> 3027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3031 -> 3036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3036 -> 3042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3042 -> 3051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3051 -> 3058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3064 -> 3072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3072 -> 3078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3078 -> 3085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3085 -> 3094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3099 -> 3115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3115 -> 3137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3137 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3144 -> 3152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3152 -> 3174  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3152 -> 6811  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6811 -> 3180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3174 -> 6811  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3180 -> 3185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3194 -> 3210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3210 -> 3232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3232 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3235 -> 3241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3241 -> 3245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3249 -> 3254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3254 -> 3260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3260 -> 3269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3269 -> 3276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3282 -> 3290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3290 -> 3296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3296 -> 3303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3303 -> 3312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3317 -> 3329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3329 -> 3341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3341 -> 3350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3381 -> 3389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3389 -> 3411  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3389 -> 7048  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7048 -> 3417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3411 -> 7048  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3417 -> 3422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3431 -> 3447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3447 -> 3459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3459 -> 3471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3487 -> 3493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3493 -> 3497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3501 -> 3506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3506 -> 3512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3512 -> 3521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3521 -> 3528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3534 -> 3542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3542 -> 3548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3548 -> 3555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3555 -> 3564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3569 -> 3581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3581 -> 3588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3614 -> 3622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3622 -> 3644  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3622 -> 7281  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7281 -> 3650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3644 -> 7281  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3650 -> 3655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
