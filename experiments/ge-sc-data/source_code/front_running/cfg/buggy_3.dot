digraph  {
13 [label="2_ address payable winner_TOD27;\n13-new_variable-3-3", method="", type_label=new_variable];
17 [label="3_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n17-function_definition-4-8", method="play_TOD27(bytes32 guess)", type_label=function_definition];
25 [label="4_ if\n25-if-5-7", method="play_TOD27(bytes32 guess)", type_label=if];
2007 [label="4_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
47 [label="5_ winner_TOD27 = msg.sender;\n47-expression_statement-6-6", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
53 [label="8_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n53-function_definition-9-11", method="getReward_TOD27()", type_label=function_definition];
58 [label="9_ winner_TOD27.transfer(msg.value);\n58-expression_statement-10-10", method="getReward_TOD27()", type_label=expression_statement];
81 [label="12_ address payable winner_TOD31;\n81-new_variable-13-13", method="", type_label=new_variable];
85 [label="13_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n85-function_definition-14-18", method="play_TOD31(bytes32 guess)", type_label=function_definition];
93 [label="14_ if\n93-if-15-17", method="play_TOD31(bytes32 guess)", type_label=if];
2075 [label="14_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
115 [label="15_ winner_TOD31 = msg.sender;\n115-expression_statement-16-16", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
121 [label="18_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n121-function_definition-19-21", method="getReward_TOD31()", type_label=function_definition];
126 [label="19_ winner_TOD31.transfer(msg.value);\n126-expression_statement-20-20", method="getReward_TOD31()", type_label=expression_statement];
149 [label="22_ address payable winner_TOD13;\n149-new_variable-23-23", method="", type_label=new_variable];
153 [label="23_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n153-function_definition-24-28", method="play_TOD13(bytes32 guess)", type_label=function_definition];
161 [label="24_ if\n161-if-25-27", method="play_TOD13(bytes32 guess)", type_label=if];
2143 [label="24_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
183 [label="25_ winner_TOD13 = msg.sender;\n183-expression_statement-26-26", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
189 [label="28_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n189-function_definition-29-31", method="getReward_TOD13()", type_label=function_definition];
194 [label="29_ winner_TOD13.transfer(msg.value);\n194-expression_statement-30-30", method="getReward_TOD13()", type_label=expression_statement];
217 [label="32_ address payable winner_TOD9;\n217-new_variable-33-33", method="", type_label=new_variable];
221 [label="33_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n221-function_definition-34-38", method="play_TOD9(bytes32 guess)", type_label=function_definition];
229 [label="34_ if\n229-if-35-37", method="play_TOD9(bytes32 guess)", type_label=if];
2211 [label="34_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
251 [label="35_ winner_TOD9 = msg.sender;\n251-expression_statement-36-36", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
257 [label="38_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n257-function_definition-39-41", method="getReward_TOD9()", type_label=function_definition];
262 [label="39_ winner_TOD9.transfer(msg.value);\n262-expression_statement-40-40", method="getReward_TOD9()", type_label=expression_statement];
271 [label="41_ uint256 public totalSupply;\n271-new_variable-42-42", method="", type_label=new_variable];
276 [label="42_ address payable winner_TOD25;\n276-new_variable-43-43", method="", type_label=new_variable];
280 [label="43_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n280-function_definition-44-48", method="play_TOD25(bytes32 guess)", type_label=function_definition];
288 [label="44_ if\n288-if-45-47", method="play_TOD25(bytes32 guess)", type_label=if];
2270 [label="44_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
310 [label="45_ winner_TOD25 = msg.sender;\n310-expression_statement-46-46", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
316 [label="48_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n316-function_definition-49-51", method="getReward_TOD25()", type_label=function_definition];
321 [label="49_ winner_TOD25.transfer(msg.value);\n321-expression_statement-50-50", method="getReward_TOD25()", type_label=expression_statement];
330 [label="51_ string public name;\n330-new_variable-52-52", method="", type_label=new_variable];
335 [label="52_ address payable winner_TOD19;\n335-new_variable-53-53", method="", type_label=new_variable];
339 [label="53_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n339-function_definition-54-58", method="play_TOD19(bytes32 guess)", type_label=function_definition];
347 [label="54_ if\n347-if-55-57", method="play_TOD19(bytes32 guess)", type_label=if];
2329 [label="54_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
369 [label="55_ winner_TOD19 = msg.sender;\n369-expression_statement-56-56", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
375 [label="58_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n375-function_definition-59-61", method="getReward_TOD19()", type_label=function_definition];
380 [label="59_ winner_TOD19.transfer(msg.value);\n380-expression_statement-60-60", method="getReward_TOD19()", type_label=expression_statement];
389 [label="61_ uint8 public decimals;\n389-new_variable-62-62", method="", type_label=new_variable];
394 [label="62_ bool claimed_TOD26 = false;\n394-new_variable-63-63", method="", type_label=new_variable];
400 [label="63_ address payable owner_TOD26;\n400-new_variable-64-64", method="", type_label=new_variable];
404 [label="64_ uint256 reward_TOD26;\n404-new_variable-65-65", method="", type_label=new_variable];
408 [label="65_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n408-function_definition-66-71", method="setReward_TOD26()", type_label=function_definition];
413 [label="66_ require (!claimed_TOD26);\n413-expression_statement-67-67", method="setReward_TOD26()", type_label=expression_statement];
419 [label="67_ require(msg.sender == owner_TOD26);\n419-expression_statement-68-68", method="setReward_TOD26()", type_label=expression_statement];
428 [label="68_ owner_TOD26.transfer(reward_TOD26);\n428-expression_statement-69-69", method="setReward_TOD26()", type_label=expression_statement];
435 [label="69_ reward_TOD26 = msg.value;\n435-expression_statement-70-70", method="setReward_TOD26()", type_label=expression_statement];
441 [label="71_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n441-function_definition-72-77", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
449 [label="72_ require (!claimed_TOD26);\n449-expression_statement-73-73", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
455 [label="73_ require(submission < 10);\n455-expression_statement-74-74", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
462 [label="74_ msg.sender.transfer(reward_TOD26);\n462-expression_statement-75-75", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
471 [label="75_ claimed_TOD26 = true;\n471-expression_statement-76-76", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
476 [label="77_ string public symbol;\n476-new_variable-78-78", method="", type_label=new_variable];
481 [label="78_ bool claimed_TOD20 = false;\n481-new_variable-79-79", method="", type_label=new_variable];
487 [label="79_ address payable owner_TOD20;\n487-new_variable-80-80", method="", type_label=new_variable];
491 [label="80_ uint256 reward_TOD20;\n491-new_variable-81-81", method="", type_label=new_variable];
495 [label="81_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n495-function_definition-82-87", method="setReward_TOD20()", type_label=function_definition];
500 [label="82_ require (!claimed_TOD20);\n500-expression_statement-83-83", method="setReward_TOD20()", type_label=expression_statement];
506 [label="83_ require(msg.sender == owner_TOD20);\n506-expression_statement-84-84", method="setReward_TOD20()", type_label=expression_statement];
515 [label="84_ owner_TOD20.transfer(reward_TOD20);\n515-expression_statement-85-85", method="setReward_TOD20()", type_label=expression_statement];
522 [label="85_ reward_TOD20 = msg.value;\n522-expression_statement-86-86", method="setReward_TOD20()", type_label=expression_statement];
528 [label="87_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n528-function_definition-88-93", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
536 [label="88_ require (!claimed_TOD20);\n536-expression_statement-89-89", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
542 [label="89_ require(submission < 10);\n542-expression_statement-90-90", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
549 [label="90_ msg.sender.transfer(reward_TOD20);\n549-expression_statement-91-91", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
558 [label="91_ claimed_TOD20 = true;\n558-expression_statement-92-92", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
563 [label="93_ address public owner;\n563-new_variable-94-94", method="", type_label=new_variable];
568 [label="94_ bool claimed_TOD32 = false;\n568-new_variable-95-95", method="", type_label=new_variable];
574 [label="95_ address payable owner_TOD32;\n574-new_variable-96-96", method="", type_label=new_variable];
578 [label="96_ uint256 reward_TOD32;\n578-new_variable-97-97", method="", type_label=new_variable];
582 [label="97_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n582-function_definition-98-103", method="setReward_TOD32()", type_label=function_definition];
587 [label="98_ require (!claimed_TOD32);\n587-expression_statement-99-99", method="setReward_TOD32()", type_label=expression_statement];
593 [label="99_ require(msg.sender == owner_TOD32);\n593-expression_statement-100-100", method="setReward_TOD32()", type_label=expression_statement];
602 [label="100_ owner_TOD32.transfer(reward_TOD32);\n602-expression_statement-101-101", method="setReward_TOD32()", type_label=expression_statement];
609 [label="101_ reward_TOD32 = msg.value;\n609-expression_statement-102-102", method="setReward_TOD32()", type_label=expression_statement];
615 [label="103_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n615-function_definition-104-109", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
623 [label="104_ require (!claimed_TOD32);\n623-expression_statement-105-105", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
629 [label="105_ require(submission < 10);\n629-expression_statement-106-106", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
636 [label="106_ msg.sender.transfer(reward_TOD32);\n636-expression_statement-107-107", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
645 [label="107_ claimed_TOD32 = true;\n645-expression_statement-108-108", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
650 [label="109_ mapping (address => uint256) internal balances;\n650-new_variable-110-110", method="", type_label=new_variable];
657 [label="110_ bool claimed_TOD38 = false;\n657-new_variable-111-111", method="", type_label=new_variable];
663 [label="111_ address payable owner_TOD38;\n663-new_variable-112-112", method="", type_label=new_variable];
667 [label="112_ uint256 reward_TOD38;\n667-new_variable-113-113", method="", type_label=new_variable];
671 [label="113_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n671-function_definition-114-119", method="setReward_TOD38()", type_label=function_definition];
676 [label="114_ require (!claimed_TOD38);\n676-expression_statement-115-115", method="setReward_TOD38()", type_label=expression_statement];
682 [label="115_ require(msg.sender == owner_TOD38);\n682-expression_statement-116-116", method="setReward_TOD38()", type_label=expression_statement];
691 [label="116_ owner_TOD38.transfer(reward_TOD38);\n691-expression_statement-117-117", method="setReward_TOD38()", type_label=expression_statement];
698 [label="117_ reward_TOD38 = msg.value;\n698-expression_statement-118-118", method="setReward_TOD38()", type_label=expression_statement];
704 [label="119_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n704-function_definition-120-125", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
712 [label="120_ require (!claimed_TOD38);\n712-expression_statement-121-121", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
718 [label="121_ require(submission < 10);\n718-expression_statement-122-122", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
725 [label="122_ msg.sender.transfer(reward_TOD38);\n725-expression_statement-123-123", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
734 [label="123_ claimed_TOD38 = true;\n734-expression_statement-124-124", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
739 [label="125_ mapping (address => mapping (address => uint256)) internal allowed;\n739-new_variable-126-126", method="", type_label=new_variable];
748 [label="126_ bool claimed_TOD4 = false;\n748-new_variable-127-127", method="", type_label=new_variable];
754 [label="127_ address payable owner_TOD4;\n754-new_variable-128-128", method="", type_label=new_variable];
758 [label="128_ uint256 reward_TOD4;\n758-new_variable-129-129", method="", type_label=new_variable];
762 [label="129_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n762-function_definition-130-135", method="setReward_TOD4()", type_label=function_definition];
767 [label="130_ require (!claimed_TOD4);\n767-expression_statement-131-131", method="setReward_TOD4()", type_label=expression_statement];
773 [label="131_ require(msg.sender == owner_TOD4);\n773-expression_statement-132-132", method="setReward_TOD4()", type_label=expression_statement];
782 [label="132_ owner_TOD4.transfer(reward_TOD4);\n782-expression_statement-133-133", method="setReward_TOD4()", type_label=expression_statement];
789 [label="133_ reward_TOD4 = msg.value;\n789-expression_statement-134-134", method="setReward_TOD4()", type_label=expression_statement];
795 [label="135_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n795-function_definition-136-141", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
803 [label="136_ require (!claimed_TOD4);\n803-expression_statement-137-137", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
809 [label="137_ require(submission < 10);\n809-expression_statement-138-138", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
816 [label="138_ msg.sender.transfer(reward_TOD4);\n816-expression_statement-139-139", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
825 [label="139_ claimed_TOD4 = true;\n825-expression_statement-140-140", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
830 [label="141_ bool isTransPaused=false;\n830-new_variable-142-142", method="", type_label=new_variable];
846 [label="146_ owner=msg.sender;\n846-expression_statement-147-147", method="", type_label=expression_statement];
852 [label="147_ if__initialAmount<=0\n852-if-148-154", method="", type_label=if];
2834 [label="147_ end_if", method="", type_label=end_if];
857 [label="148_ totalSupply = 100000000000000000;\n857-expression_statement-149-149", method="", type_label=expression_statement];
861 [label="149_ balances[owner]=totalSupply;\n861-expression_statement-150-150", method="", type_label=expression_statement];
868 [label="151_ totalSupply = _initialAmount;\n868-expression_statement-152-152", method="", type_label=expression_statement];
872 [label="152_ balances[owner]=_initialAmount;\n872-expression_statement-153-153", method="", type_label=expression_statement];
878 [label="154_ if__decimalUnits<=0\n878-if-155-159", method="", type_label=if];
2860 [label="154_ end_if", method="", type_label=end_if];
883 [label="155_ decimals=2;\n883-expression_statement-156-156", method="", type_label=expression_statement];
888 [label="157_ decimals = _decimalUnits;\n888-expression_statement-158-158", method="", type_label=expression_statement];
892 [label="159_ name = \"CareerOn Chain Token\";\n892-expression_statement-160-160", method="", type_label=expression_statement];
897 [label="160_ symbol = \"COT\";\n897-expression_statement-161-161", method="", type_label=expression_statement];
902 [label="162_ address payable winner_TOD7;\n902-new_variable-163-163", method="", type_label=new_variable];
906 [label="163_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n906-function_definition-164-168", method="play_TOD7(bytes32 guess)", type_label=function_definition];
914 [label="164_ if\n914-if-165-167", method="play_TOD7(bytes32 guess)", type_label=if];
2896 [label="164_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
936 [label="165_ winner_TOD7 = msg.sender;\n936-expression_statement-166-166", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
942 [label="168_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n942-function_definition-169-171", method="getReward_TOD7()", type_label=function_definition];
947 [label="169_ winner_TOD7.transfer(msg.value);\n947-expression_statement-170-170", method="getReward_TOD7()", type_label=expression_statement];
956 [label="171_ function transfer(\n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n        balances[msg.sender] -= _value; \n        balances[_to] += _value; \n		if(msg.sender==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(msg.sender, _to, _value); \n		}\n        return true;\n    }\n956-function_definition-172-189", method="transfer(address _to,uint256 _value)", type_label=function_definition];
973 [label="175_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n973-expression_statement-176-180", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
1003 [label="180_ balances[msg.sender] -= _value;\n1003-expression_statement-181-181", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
1011 [label="181_ balances[_to] += _value;\n1011-expression_statement-182-182", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
1017 [label="182_ if_msg.sender==owner\n1017-if-183-187", method="transfer(address _to,uint256 _value)", type_label=if];
2999 [label="182_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
1045 [label="187_ return true;\n1045-return-188-188", method="transfer(address _to,uint256 _value)", type_label=return];
1048 [label="189_ address payable winner_TOD23;\n1048-new_variable-190-190", method="", type_label=new_variable];
1052 [label="190_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n1052-function_definition-191-195", method="play_TOD23(bytes32 guess)", type_label=function_definition];
1060 [label="191_ if\n1060-if-192-194", method="play_TOD23(bytes32 guess)", type_label=if];
3042 [label="191_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
1082 [label="192_ winner_TOD23 = msg.sender;\n1082-expression_statement-193-193", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
1088 [label="195_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n1088-function_definition-196-198", method="getReward_TOD23()", type_label=function_definition];
1093 [label="196_ winner_TOD23.transfer(msg.value);\n1093-expression_statement-197-197", method="getReward_TOD23()", type_label=expression_statement];
1102 [label="198_ function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n        balances[_to] += _value; \n        balances[_from] -= _value;  \n        allowed[_from][msg.sender] -= _value; \n        if(_from==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(_from, _to, _value); \n		}\n        return true;\n    }\n1102-function_definition-199-219", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
1123 [label="203_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n1123-expression_statement-204-209", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1163 [label="209_ balances[_to] += _value;\n1163-expression_statement-210-210", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1169 [label="210_ balances[_from] -= _value;\n1169-expression_statement-211-211", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1175 [label="211_ allowed[_from][msg.sender] -= _value;\n1175-expression_statement-212-212", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1185 [label="212_ if__from==owner\n1185-if-213-217", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
3167 [label="212_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
1209 [label="217_ return true;\n1209-return-218-218", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
1212 [label="219_ bool claimed_TOD14 = false;\n1212-new_variable-220-220", method="", type_label=new_variable];
1218 [label="220_ address payable owner_TOD14;\n1218-new_variable-221-221", method="", type_label=new_variable];
1222 [label="221_ uint256 reward_TOD14;\n1222-new_variable-222-222", method="", type_label=new_variable];
1226 [label="222_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n1226-function_definition-223-228", method="setReward_TOD14()", type_label=function_definition];
1231 [label="223_ require (!claimed_TOD14);\n1231-expression_statement-224-224", method="setReward_TOD14()", type_label=expression_statement];
1237 [label="224_ require(msg.sender == owner_TOD14);\n1237-expression_statement-225-225", method="setReward_TOD14()", type_label=expression_statement];
1246 [label="225_ owner_TOD14.transfer(reward_TOD14);\n1246-expression_statement-226-226", method="setReward_TOD14()", type_label=expression_statement];
1253 [label="226_ reward_TOD14 = msg.value;\n1253-expression_statement-227-227", method="setReward_TOD14()", type_label=expression_statement];
1259 [label="228_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n1259-function_definition-229-234", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
1267 [label="229_ require (!claimed_TOD14);\n1267-expression_statement-230-230", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1273 [label="230_ require(submission < 10);\n1273-expression_statement-231-231", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1280 [label="231_ msg.sender.transfer(reward_TOD14);\n1280-expression_statement-232-232", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1289 [label="232_ claimed_TOD14 = true;\n1289-expression_statement-233-233", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1294 [label="234_ function approve(address _spender, uint256 _value) public returns (bool success) \n    { \n        assert(msg.sender!=_spender && _value>0);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n1294-function_definition-235-241", method="approve(address _spender,uint256 _value)", type_label=function_definition];
1311 [label="236_ assert(msg.sender!=_spender && _value>0);\n1311-expression_statement-237-237", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
1324 [label="237_ allowed[msg.sender][_spender] = _value;\n1324-expression_statement-238-238", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
1344 [label="239_ return true;\n1344-return-240-240", method="approve(address _spender,uint256 _value)", type_label=return];
1347 [label="241_ bool claimed_TOD30 = false;\n1347-new_variable-242-242", method="", type_label=new_variable];
1353 [label="242_ address payable owner_TOD30;\n1353-new_variable-243-243", method="", type_label=new_variable];
1357 [label="243_ uint256 reward_TOD30;\n1357-new_variable-244-244", method="", type_label=new_variable];
1361 [label="244_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n1361-function_definition-245-250", method="setReward_TOD30()", type_label=function_definition];
1366 [label="245_ require (!claimed_TOD30);\n1366-expression_statement-246-246", method="setReward_TOD30()", type_label=expression_statement];
1372 [label="246_ require(msg.sender == owner_TOD30);\n1372-expression_statement-247-247", method="setReward_TOD30()", type_label=expression_statement];
1381 [label="247_ owner_TOD30.transfer(reward_TOD30);\n1381-expression_statement-248-248", method="setReward_TOD30()", type_label=expression_statement];
1388 [label="248_ reward_TOD30 = msg.value;\n1388-expression_statement-249-249", method="setReward_TOD30()", type_label=expression_statement];
1394 [label="250_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n1394-function_definition-251-256", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
1402 [label="251_ require (!claimed_TOD30);\n1402-expression_statement-252-252", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1408 [label="252_ require(submission < 10);\n1408-expression_statement-253-253", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1415 [label="253_ msg.sender.transfer(reward_TOD30);\n1415-expression_statement-254-254", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1424 [label="254_ claimed_TOD30 = true;\n1424-expression_statement-255-255", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1429 [label="256_ function allowance(\n        address _owner, \n        address _spender) public view returns (uint256 remaining) \n    {\n        return allowed[_owner][_spender]; \n    }\n1429-function_definition-257-262", method="allowance(address _owner,address _spender)", type_label=function_definition];
1447 [label="260_ return allowed[_owner][_spender];\n1447-return-261-261", method="allowance(address _owner,address _spender)", type_label=return];
1453 [label="262_ bool claimed_TOD8 = false;\n1453-new_variable-263-263", method="", type_label=new_variable];
1459 [label="263_ address payable owner_TOD8;\n1459-new_variable-264-264", method="", type_label=new_variable];
1463 [label="264_ uint256 reward_TOD8;\n1463-new_variable-265-265", method="", type_label=new_variable];
1467 [label="265_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n1467-function_definition-266-271", method="setReward_TOD8()", type_label=function_definition];
1472 [label="266_ require (!claimed_TOD8);\n1472-expression_statement-267-267", method="setReward_TOD8()", type_label=expression_statement];
1478 [label="267_ require(msg.sender == owner_TOD8);\n1478-expression_statement-268-268", method="setReward_TOD8()", type_label=expression_statement];
1487 [label="268_ owner_TOD8.transfer(reward_TOD8);\n1487-expression_statement-269-269", method="setReward_TOD8()", type_label=expression_statement];
1494 [label="269_ reward_TOD8 = msg.value;\n1494-expression_statement-270-270", method="setReward_TOD8()", type_label=expression_statement];
1500 [label="271_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n1500-function_definition-272-277", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
1508 [label="272_ require (!claimed_TOD8);\n1508-expression_statement-273-273", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1514 [label="273_ require(submission < 10);\n1514-expression_statement-274-274", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1521 [label="274_ msg.sender.transfer(reward_TOD8);\n1521-expression_statement-275-275", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1530 [label="275_ claimed_TOD8 = true;\n1530-expression_statement-276-276", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1535 [label="277_ function balanceOf(address accountAddr) public view returns (uint256) {\n        return balances[accountAddr];\n    }\n1535-function_definition-278-280", method="balanceOf(address accountAddr)", type_label=function_definition];
1548 [label="278_ return balances[accountAddr];\n1548-return-279-279", method="balanceOf(address accountAddr)", type_label=return];
1552 [label="280_ address payable winner_TOD39;\n1552-new_variable-281-281", method="", type_label=new_variable];
1556 [label="281_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n1556-function_definition-282-286", method="play_TOD39(bytes32 guess)", type_label=function_definition];
1564 [label="282_ if\n1564-if-283-285", method="play_TOD39(bytes32 guess)", type_label=if];
3546 [label="282_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
1586 [label="283_ winner_TOD39 = msg.sender;\n1586-expression_statement-284-284", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
1592 [label="286_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n1592-function_definition-287-289", method="getReward_TOD39()", type_label=function_definition];
1597 [label="287_ winner_TOD39.transfer(msg.value);\n1597-expression_statement-288-288", method="getReward_TOD39()", type_label=expression_statement];
1606 [label="289_ function changeOwner(address newOwner) public{\n        assert(msg.sender==owner && msg.sender!=newOwner);\n        balances[newOwner]=balances[owner];\n        balances[owner]=0;\n        owner=newOwner;\n        emit OwnerChang(msg.sender,newOwner,balances[owner]); \n    }\n1606-function_definition-290-296", method="changeOwner(address newOwner)", type_label=function_definition];
1614 [label="290_ assert(msg.sender==owner && msg.sender!=newOwner);\n1614-expression_statement-291-291", method="changeOwner(address newOwner)", type_label=expression_statement];
1629 [label="291_ balances[newOwner]=balances[owner];\n1629-expression_statement-292-292", method="changeOwner(address newOwner)", type_label=expression_statement];
1637 [label="292_ balances[owner]=0;\n1637-expression_statement-293-293", method="changeOwner(address newOwner)", type_label=expression_statement];
1643 [label="293_ owner=newOwner;\n1643-expression_statement-294-294", method="changeOwner(address newOwner)", type_label=expression_statement];
1659 [label="296_ bool claimed_TOD36 = false;\n1659-new_variable-297-297", method="", type_label=new_variable];
1665 [label="297_ address payable owner_TOD36;\n1665-new_variable-298-298", method="", type_label=new_variable];
1669 [label="298_ uint256 reward_TOD36;\n1669-new_variable-299-299", method="", type_label=new_variable];
1673 [label="299_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n1673-function_definition-300-305", method="setReward_TOD36()", type_label=function_definition];
1678 [label="300_ require (!claimed_TOD36);\n1678-expression_statement-301-301", method="setReward_TOD36()", type_label=expression_statement];
1684 [label="301_ require(msg.sender == owner_TOD36);\n1684-expression_statement-302-302", method="setReward_TOD36()", type_label=expression_statement];
1693 [label="302_ owner_TOD36.transfer(reward_TOD36);\n1693-expression_statement-303-303", method="setReward_TOD36()", type_label=expression_statement];
1700 [label="303_ reward_TOD36 = msg.value;\n1700-expression_statement-304-304", method="setReward_TOD36()", type_label=expression_statement];
1706 [label="305_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n1706-function_definition-306-311", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
1714 [label="306_ require (!claimed_TOD36);\n1714-expression_statement-307-307", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1720 [label="307_ require(submission < 10);\n1720-expression_statement-308-308", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1727 [label="308_ msg.sender.transfer(reward_TOD36);\n1727-expression_statement-309-309", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1736 [label="309_ claimed_TOD36 = true;\n1736-expression_statement-310-310", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1741 [label="311_ function setPauseStatus(bool isPaused)public{\n        assert(msg.sender==owner);\n        isTransPaused=isPaused;\n    }\n1741-function_definition-312-315", method="setPauseStatus(bool isPaused)", type_label=function_definition];
1749 [label="312_ assert(msg.sender==owner);\n1749-expression_statement-313-313", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1758 [label="313_ isTransPaused=isPaused;\n1758-expression_statement-314-314", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1762 [label="315_ address payable winner_TOD35;\n1762-new_variable-316-316", method="", type_label=new_variable];
1766 [label="316_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n1766-function_definition-317-321", method="play_TOD35(bytes32 guess)", type_label=function_definition];
1774 [label="317_ if\n1774-if-318-320", method="play_TOD35(bytes32 guess)", type_label=if];
3756 [label="317_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
1796 [label="318_ winner_TOD35 = msg.sender;\n1796-expression_statement-319-319", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
1802 [label="321_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n1802-function_definition-322-324", method="getReward_TOD35()", type_label=function_definition];
1807 [label="322_ winner_TOD35.transfer(msg.value);\n1807-expression_statement-323-323", method="getReward_TOD35()", type_label=expression_statement];
1816 [label="324_ function changeContractName(string memory _newName,string memory _newSymbol) public {\n        assert(msg.sender==owner);\n        name=_newName;\n        symbol=_newSymbol;\n    }\n1816-function_definition-325-329", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=function_definition];
1828 [label="325_ assert(msg.sender==owner);\n1828-expression_statement-326-326", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1837 [label="326_ name=_newName;\n1837-expression_statement-327-327", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1841 [label="327_ symbol=_newSymbol;\n1841-expression_statement-328-328", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1845 [label="329_ bool claimed_TOD40 = false;\n1845-new_variable-330-330", method="", type_label=new_variable];
1851 [label="330_ address payable owner_TOD40;\n1851-new_variable-331-331", method="", type_label=new_variable];
1855 [label="331_ uint256 reward_TOD40;\n1855-new_variable-332-332", method="", type_label=new_variable];
1859 [label="332_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n1859-function_definition-333-338", method="setReward_TOD40()", type_label=function_definition];
1864 [label="333_ require (!claimed_TOD40);\n1864-expression_statement-334-334", method="setReward_TOD40()", type_label=expression_statement];
1870 [label="334_ require(msg.sender == owner_TOD40);\n1870-expression_statement-335-335", method="setReward_TOD40()", type_label=expression_statement];
1879 [label="335_ owner_TOD40.transfer(reward_TOD40);\n1879-expression_statement-336-336", method="setReward_TOD40()", type_label=expression_statement];
1886 [label="336_ reward_TOD40 = msg.value;\n1886-expression_statement-337-337", method="setReward_TOD40()", type_label=expression_statement];
1892 [label="338_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n1892-function_definition-339-344", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
1900 [label="339_ require (!claimed_TOD40);\n1900-expression_statement-340-340", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1906 [label="340_ require(submission < 10);\n1906-expression_statement-341-341", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1913 [label="341_ msg.sender.transfer(reward_TOD40);\n1913-expression_statement-342-342", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1922 [label="342_ claimed_TOD40 = true;\n1922-expression_statement-343-343", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1933 [label="347_ address payable winner_TOD33;\n1933-new_variable-348-348", method="", type_label=new_variable];
1937 [label="348_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n1937-function_definition-349-353", method="play_TOD33(bytes32 guess)", type_label=function_definition];
1945 [label="349_ if\n1945-if-350-352", method="play_TOD33(bytes32 guess)", type_label=if];
3927 [label="349_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
1967 [label="350_ winner_TOD33 = msg.sender;\n1967-expression_statement-351-351", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
1973 [label="353_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n1973-function_definition-354-356", method="getReward_TOD33()", type_label=function_definition];
1978 [label="354_ winner_TOD33.transfer(msg.value);\n1978-expression_statement-355-355", method="getReward_TOD33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1035;
1201;
17 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 47  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
25 -> 2007  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2007 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 2007  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
53 -> 58  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 115  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
93 -> 2075  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2075 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 2075  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
121 -> 126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 183  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
161 -> 2143  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2143 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
183 -> 2143  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
189 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
221 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 251  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
229 -> 2211  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2211 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 2211  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
257 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
271 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 310  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
288 -> 2270  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2270 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 2270  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
316 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
347 -> 369  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
347 -> 2329  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2329 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 2329  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
375 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
389 -> 394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
394 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
506 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
542 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
623 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
682 -> 691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
691 -> 698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
754 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
762 -> 767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
767 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 857  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
852 -> 868  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2834 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 2834  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
868 -> 872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
872 -> 2834  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
878 -> 883  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
878 -> 888  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2860 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 2860  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
888 -> 2860  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
892 -> 897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
906 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 936  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
914 -> 2896  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2896 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
936 -> 2896  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
942 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1011 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1045 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1052 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1060 -> 1082  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1060 -> 3042  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3042 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1082 -> 3042  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1088 -> 1093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 1123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1123 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 1169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1169 -> 1175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 1185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1209 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1212 -> 1218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1218 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1226 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1259 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 1280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1280 -> 1289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1294 -> 1311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 1324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1344 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1347 -> 1353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1353 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1361 -> 1366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1366 -> 1372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1372 -> 1381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1381 -> 1388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1394 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1408 -> 1415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1415 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1453 -> 1459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1472 -> 1478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1478 -> 1487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1487 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1500 -> 1508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1508 -> 1514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1514 -> 1521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1521 -> 1530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1535 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1548 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1556 -> 1564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1564 -> 1586  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1564 -> 3546  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3546 -> 1592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1586 -> 3546  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1592 -> 1597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1606 -> 1614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1614 -> 1629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1629 -> 1637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1637 -> 1643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1659 -> 1665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1665 -> 1669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1673 -> 1678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1678 -> 1684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1684 -> 1693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1693 -> 1700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1706 -> 1714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1714 -> 1720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1720 -> 1727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1727 -> 1736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1741 -> 1749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1749 -> 1758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1766 -> 1774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1774 -> 1796  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1774 -> 3756  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3756 -> 1802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1796 -> 3756  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1802 -> 1807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1816 -> 1828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1828 -> 1837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1837 -> 1841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1845 -> 1851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1851 -> 1855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1859 -> 1864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1864 -> 1870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1870 -> 1879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1879 -> 1886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1892 -> 1900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1900 -> 1906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1906 -> 1913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1913 -> 1922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1937 -> 1945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1945 -> 1967  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1945 -> 3927  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3927 -> 1973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1967 -> 3927  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1973 -> 1978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 2999  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1201 -> 3167  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
