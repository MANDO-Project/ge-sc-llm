digraph  {
13 [label="3_ bool claimed_TOD10 = false;\n13-new_variable-4-4", method="", type_label=new_variable];
19 [label="4_ address payable owner_TOD10;\n19-new_variable-5-5", method="", type_label=new_variable];
23 [label="5_ uint256 reward_TOD10;\n23-new_variable-6-6", method="", type_label=new_variable];
27 [label="6_ function setReward_TOD10() public payable {\n        require (!claimed_TOD10);\n        require(msg.sender == owner_TOD10);\n        owner_TOD10.transfer(reward_TOD10);\n        reward_TOD10 = msg.value;\n    }\n27-function_definition-7-12", method="setReward_TOD10()", type_label=function_definition];
32 [label="7_ require (!claimed_TOD10);\n32-expression_statement-8-8", method="setReward_TOD10()", type_label=expression_statement];
38 [label="8_ require(msg.sender == owner_TOD10);\n38-expression_statement-9-9", method="setReward_TOD10()", type_label=expression_statement];
47 [label="9_ owner_TOD10.transfer(reward_TOD10);\n47-expression_statement-10-10", method="setReward_TOD10()", type_label=expression_statement];
54 [label="10_ reward_TOD10 = msg.value;\n54-expression_statement-11-11", method="setReward_TOD10()", type_label=expression_statement];
60 [label="12_ function claimReward_TOD10(uint256 submission) public {\n        require (!claimed_TOD10);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD10);\n        claimed_TOD10 = true;\n    }\n60-function_definition-13-18", method="claimReward_TOD10(uint256 submission)", type_label=function_definition];
68 [label="13_ require (!claimed_TOD10);\n68-expression_statement-14-14", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
74 [label="14_ require(submission < 10);\n74-expression_statement-15-15", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
81 [label="15_ msg.sender.transfer(reward_TOD10);\n81-expression_statement-16-16", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
90 [label="16_ claimed_TOD10 = true;\n90-expression_statement-17-17", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
95 [label="18_ bool private stopped;\n95-new_variable-19-19", method="", type_label=new_variable];
100 [label="19_ bool claimed_TOD22 = false;\n100-new_variable-20-20", method="", type_label=new_variable];
106 [label="20_ address payable owner_TOD22;\n106-new_variable-21-21", method="", type_label=new_variable];
110 [label="21_ uint256 reward_TOD22;\n110-new_variable-22-22", method="", type_label=new_variable];
114 [label="22_ function setReward_TOD22() public payable {\n        require (!claimed_TOD22);\n        require(msg.sender == owner_TOD22);\n        owner_TOD22.transfer(reward_TOD22);\n        reward_TOD22 = msg.value;\n    }\n114-function_definition-23-28", method="setReward_TOD22()", type_label=function_definition];
119 [label="23_ require (!claimed_TOD22);\n119-expression_statement-24-24", method="setReward_TOD22()", type_label=expression_statement];
125 [label="24_ require(msg.sender == owner_TOD22);\n125-expression_statement-25-25", method="setReward_TOD22()", type_label=expression_statement];
134 [label="25_ owner_TOD22.transfer(reward_TOD22);\n134-expression_statement-26-26", method="setReward_TOD22()", type_label=expression_statement];
141 [label="26_ reward_TOD22 = msg.value;\n141-expression_statement-27-27", method="setReward_TOD22()", type_label=expression_statement];
147 [label="28_ function claimReward_TOD22(uint256 submission) public {\n        require (!claimed_TOD22);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD22);\n        claimed_TOD22 = true;\n    }\n147-function_definition-29-34", method="claimReward_TOD22(uint256 submission)", type_label=function_definition];
155 [label="29_ require (!claimed_TOD22);\n155-expression_statement-30-30", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
161 [label="30_ require(submission < 10);\n161-expression_statement-31-31", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
168 [label="31_ msg.sender.transfer(reward_TOD22);\n168-expression_statement-32-32", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
177 [label="32_ claimed_TOD22 = true;\n177-expression_statement-33-33", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
182 [label="34_ address private _owner;\n182-new_variable-35-35", method="", type_label=new_variable];
187 [label="35_ bool claimed_TOD12 = false;\n187-new_variable-36-36", method="", type_label=new_variable];
193 [label="36_ address payable owner_TOD12;\n193-new_variable-37-37", method="", type_label=new_variable];
197 [label="37_ uint256 reward_TOD12;\n197-new_variable-38-38", method="", type_label=new_variable];
201 [label="38_ function setReward_TOD12() public payable {\n        require (!claimed_TOD12);\n        require(msg.sender == owner_TOD12);\n        owner_TOD12.transfer(reward_TOD12);\n        reward_TOD12 = msg.value;\n    }\n201-function_definition-39-44", method="setReward_TOD12()", type_label=function_definition];
206 [label="39_ require (!claimed_TOD12);\n206-expression_statement-40-40", method="setReward_TOD12()", type_label=expression_statement];
212 [label="40_ require(msg.sender == owner_TOD12);\n212-expression_statement-41-41", method="setReward_TOD12()", type_label=expression_statement];
221 [label="41_ owner_TOD12.transfer(reward_TOD12);\n221-expression_statement-42-42", method="setReward_TOD12()", type_label=expression_statement];
228 [label="42_ reward_TOD12 = msg.value;\n228-expression_statement-43-43", method="setReward_TOD12()", type_label=expression_statement];
234 [label="44_ function claimReward_TOD12(uint256 submission) public {\n        require (!claimed_TOD12);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD12);\n        claimed_TOD12 = true;\n    }\n234-function_definition-45-50", method="claimReward_TOD12(uint256 submission)", type_label=function_definition];
242 [label="45_ require (!claimed_TOD12);\n242-expression_statement-46-46", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
248 [label="46_ require(submission < 10);\n248-expression_statement-47-47", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
255 [label="47_ msg.sender.transfer(reward_TOD12);\n255-expression_statement-48-48", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
264 [label="48_ claimed_TOD12 = true;\n264-expression_statement-49-49", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
269 [label="50_ address private _master;\n269-new_variable-51-51", method="", type_label=new_variable];
274 [label="51_ bool claimed_TOD36 = false;\n274-new_variable-52-52", method="", type_label=new_variable];
280 [label="52_ address payable owner_TOD36;\n280-new_variable-53-53", method="", type_label=new_variable];
284 [label="53_ uint256 reward_TOD36;\n284-new_variable-54-54", method="", type_label=new_variable];
288 [label="54_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n288-function_definition-55-60", method="setReward_TOD36()", type_label=function_definition];
293 [label="55_ require (!claimed_TOD36);\n293-expression_statement-56-56", method="setReward_TOD36()", type_label=expression_statement];
299 [label="56_ require(msg.sender == owner_TOD36);\n299-expression_statement-57-57", method="setReward_TOD36()", type_label=expression_statement];
308 [label="57_ owner_TOD36.transfer(reward_TOD36);\n308-expression_statement-58-58", method="setReward_TOD36()", type_label=expression_statement];
315 [label="58_ reward_TOD36 = msg.value;\n315-expression_statement-59-59", method="setReward_TOD36()", type_label=expression_statement];
321 [label="60_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n321-function_definition-61-66", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
329 [label="61_ require (!claimed_TOD36);\n329-expression_statement-62-62", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
335 [label="62_ require(submission < 10);\n335-expression_statement-63-63", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
342 [label="63_ msg.sender.transfer(reward_TOD36);\n342-expression_statement-64-64", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
351 [label="64_ claimed_TOD36 = true;\n351-expression_statement-65-65", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
358 [label="67_ address payable winner_TOD35;\n358-new_variable-68-68", method="", type_label=new_variable];
362 [label="68_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n362-function_definition-69-73", method="play_TOD35(bytes32 guess)", type_label=function_definition];
370 [label="69_ if\n370-if-70-72", method="play_TOD35(bytes32 guess)", type_label=if];
2903 [label="69_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
392 [label="70_ winner_TOD35 = msg.sender;\n392-expression_statement-71-71", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
398 [label="73_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n398-function_definition-74-76", method="getReward_TOD35()", type_label=function_definition];
403 [label="74_ winner_TOD35.transfer(msg.value);\n403-expression_statement-75-75", method="getReward_TOD35()", type_label=expression_statement];
414 [label="77_ bool claimed_TOD40 = false;\n414-new_variable-78-78", method="", type_label=new_variable];
420 [label="78_ address payable owner_TOD40;\n420-new_variable-79-79", method="", type_label=new_variable];
424 [label="79_ uint256 reward_TOD40;\n424-new_variable-80-80", method="", type_label=new_variable];
428 [label="80_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n428-function_definition-81-86", method="setReward_TOD40()", type_label=function_definition];
433 [label="81_ require (!claimed_TOD40);\n433-expression_statement-82-82", method="setReward_TOD40()", type_label=expression_statement];
439 [label="82_ require(msg.sender == owner_TOD40);\n439-expression_statement-83-83", method="setReward_TOD40()", type_label=expression_statement];
448 [label="83_ owner_TOD40.transfer(reward_TOD40);\n448-expression_statement-84-84", method="setReward_TOD40()", type_label=expression_statement];
455 [label="84_ reward_TOD40 = msg.value;\n455-expression_statement-85-85", method="setReward_TOD40()", type_label=expression_statement];
461 [label="86_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n461-function_definition-87-92", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
469 [label="87_ require (!claimed_TOD40);\n469-expression_statement-88-88", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
475 [label="88_ require(submission < 10);\n475-expression_statement-89-89", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
482 [label="89_ msg.sender.transfer(reward_TOD40);\n482-expression_statement-90-90", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
491 [label="90_ claimed_TOD40 = true;\n491-expression_statement-91-91", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
506 [label="93_ address payable winner_TOD33;\n506-new_variable-94-94", method="", type_label=new_variable];
510 [label="94_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n510-function_definition-95-99", method="play_TOD33(bytes32 guess)", type_label=function_definition];
518 [label="95_ if\n518-if-96-98", method="play_TOD33(bytes32 guess)", type_label=if];
3051 [label="95_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
540 [label="96_ winner_TOD33 = msg.sender;\n540-expression_statement-97-97", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
546 [label="99_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n546-function_definition-100-102", method="getReward_TOD33()", type_label=function_definition];
551 [label="100_ winner_TOD33.transfer(msg.value);\n551-expression_statement-101-101", method="getReward_TOD33()", type_label=expression_statement];
572 [label="105_ stopped = false;\n572-expression_statement-106-106", method="", type_label=expression_statement];
577 [label="106_ _owner = msg.sender;\n577-expression_statement-107-107", method="", type_label=expression_statement];
583 [label="107_ _master = msg.sender;\n583-expression_statement-108-108", method="", type_label=expression_statement];
605 [label="111_ address payable winner_TOD1;\n605-new_variable-112-112", method="", type_label=new_variable];
609 [label="112_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n609-function_definition-113-117", method="play_TOD1(bytes32 guess)", type_label=function_definition];
617 [label="113_ if\n617-if-114-116", method="play_TOD1(bytes32 guess)", type_label=if];
3150 [label="113_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
639 [label="114_ winner_TOD1 = msg.sender;\n639-expression_statement-115-115", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
645 [label="117_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n645-function_definition-118-120", method="getReward_TOD1()", type_label=function_definition];
650 [label="118_ winner_TOD1.transfer(msg.value);\n650-expression_statement-119-119", method="getReward_TOD1()", type_label=expression_statement];
659 [label="120_ function owner() public view returns (address)\n    {\n        return _owner;\n    }\n659-function_definition-121-124", method="owner()", type_label=function_definition];
668 [label="122_ return _owner;\n668-return-123-123", method="owner()", type_label=return];
670 [label="124_ bool claimed_TOD2 = false;\n670-new_variable-125-125", method="", type_label=new_variable];
676 [label="125_ address payable owner_TOD2;\n676-new_variable-126-126", method="", type_label=new_variable];
680 [label="126_ uint256 reward_TOD2;\n680-new_variable-127-127", method="", type_label=new_variable];
684 [label="127_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n684-function_definition-128-133", method="setReward_TOD2()", type_label=function_definition];
689 [label="128_ require (!claimed_TOD2);\n689-expression_statement-129-129", method="setReward_TOD2()", type_label=expression_statement];
695 [label="129_ require(msg.sender == owner_TOD2);\n695-expression_statement-130-130", method="setReward_TOD2()", type_label=expression_statement];
704 [label="130_ owner_TOD2.transfer(reward_TOD2);\n704-expression_statement-131-131", method="setReward_TOD2()", type_label=expression_statement];
711 [label="131_ reward_TOD2 = msg.value;\n711-expression_statement-132-132", method="setReward_TOD2()", type_label=expression_statement];
717 [label="133_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n717-function_definition-134-139", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
725 [label="134_ require (!claimed_TOD2);\n725-expression_statement-135-135", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
731 [label="135_ require(submission < 10);\n731-expression_statement-136-136", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
738 [label="136_ msg.sender.transfer(reward_TOD2);\n738-expression_statement-137-137", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
747 [label="137_ claimed_TOD2 = true;\n747-expression_statement-138-138", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
752 [label="139_ function master() public view returns (address)\n    {\n        return _master;\n    }\n752-function_definition-140-143", method="master()", type_label=function_definition];
761 [label="141_ return _master;\n761-return-142-142", method="master()", type_label=return];
763 [label="143_ address payable winner_TOD17;\n763-new_variable-144-144", method="", type_label=new_variable];
767 [label="144_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n767-function_definition-145-149", method="play_TOD17(bytes32 guess)", type_label=function_definition];
775 [label="145_ if\n775-if-146-148", method="play_TOD17(bytes32 guess)", type_label=if];
3308 [label="145_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
797 [label="146_ winner_TOD17 = msg.sender;\n797-expression_statement-147-147", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
803 [label="149_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n803-function_definition-150-152", method="getReward_TOD17()", type_label=function_definition];
808 [label="150_ winner_TOD17.transfer(msg.value);\n808-expression_statement-151-151", method="getReward_TOD17()", type_label=expression_statement];
817 [label="152_ modifier onlyOwner()\n    {\n        require(isOwner());\n        _;\n    }\n817-expression_statement-153-157", method="", type_label=expression_statement];
820 [label="154_ require(isOwner());\n820-expression_statement-155-155", method="", type_label=expression_statement];
826 [label="155_ _;\n826-expression_statement-156-156", method="", type_label=expression_statement];
828 [label="157_ modifier onlyMaster()\n    {\n        require(isMaster() || isOwner());\n        _;\n    }\n828-expression_statement-158-162", method="", type_label=expression_statement];
831 [label="159_ require(isMaster() || isOwner());\n831-expression_statement-160-160", method="", type_label=expression_statement];
840 [label="160_ _;\n840-expression_statement-161-161", method="", type_label=expression_statement];
842 [label="162_ modifier onlyWhenNotStopped()\n    {\n        require(!isStopped());\n        _;\n    }\n842-expression_statement-163-167", method="", type_label=expression_statement];
845 [label="164_ require(!isStopped());\n845-expression_statement-165-165", method="", type_label=expression_statement];
852 [label="165_ _;\n852-expression_statement-166-166", method="", type_label=expression_statement];
854 [label="167_ function isOwner() public view returns (bool)\n    {\n        return msg.sender == _owner;\n    }\n854-function_definition-168-171", method="isOwner()", type_label=function_definition];
863 [label="169_ return msg.sender == _owner;\n863-return-170-170", method="isOwner()", type_label=return];
869 [label="171_ address payable winner_TOD37;\n869-new_variable-172-172", method="", type_label=new_variable];
873 [label="172_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n873-function_definition-173-177", method="play_TOD37(bytes32 guess)", type_label=function_definition];
881 [label="173_ if\n881-if-174-176", method="play_TOD37(bytes32 guess)", type_label=if];
3414 [label="173_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
903 [label="174_ winner_TOD37 = msg.sender;\n903-expression_statement-175-175", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
909 [label="177_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n909-function_definition-178-180", method="getReward_TOD37()", type_label=function_definition];
914 [label="178_ winner_TOD37.transfer(msg.value);\n914-expression_statement-179-179", method="getReward_TOD37()", type_label=expression_statement];
923 [label="180_ function isMaster() public view returns (bool)\n    {\n        return msg.sender == _master;\n    }\n923-function_definition-181-184", method="isMaster()", type_label=function_definition];
932 [label="182_ return msg.sender == _master;\n932-return-183-183", method="isMaster()", type_label=return];
938 [label="184_ address payable winner_TOD3;\n938-new_variable-185-185", method="", type_label=new_variable];
942 [label="185_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n942-function_definition-186-190", method="play_TOD3(bytes32 guess)", type_label=function_definition];
950 [label="186_ if\n950-if-187-189", method="play_TOD3(bytes32 guess)", type_label=if];
3483 [label="186_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
972 [label="187_ winner_TOD3 = msg.sender;\n972-expression_statement-188-188", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
978 [label="190_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n978-function_definition-191-193", method="getReward_TOD3()", type_label=function_definition];
983 [label="191_ winner_TOD3.transfer(msg.value);\n983-expression_statement-192-192", method="getReward_TOD3()", type_label=expression_statement];
992 [label="193_ function transferOwnership(address newOwner) external onlyOwner\n    {\n        _transferOwnership(newOwner);\n    }\n992-function_definition-194-197", method="transferOwnership(address newOwner)", type_label=function_definition];
999 [label="193_ onlyOwner\n999-expression_statement-194-194", method="transferOwnership(address newOwner)", type_label=expression_statement];
1002 [label="195_ _transferOwnership(newOwner);\n1002-expression_statement-196-196", method="transferOwnership(address newOwner)", type_label=expression_statement];
1007 [label="197_ address payable winner_TOD9;\n1007-new_variable-198-198", method="", type_label=new_variable];
1011 [label="198_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n1011-function_definition-199-203", method="play_TOD9(bytes32 guess)", type_label=function_definition];
1019 [label="199_ if\n1019-if-200-202", method="play_TOD9(bytes32 guess)", type_label=if];
3552 [label="199_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
1041 [label="200_ winner_TOD9 = msg.sender;\n1041-expression_statement-201-201", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
1047 [label="203_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n1047-function_definition-204-206", method="getReward_TOD9()", type_label=function_definition];
1052 [label="204_ winner_TOD9.transfer(msg.value);\n1052-expression_statement-205-205", method="getReward_TOD9()", type_label=expression_statement];
1061 [label="206_ function transferMasterRole(address newMaster) external onlyOwner\n    {\n        _transferMasterRole(newMaster);\n    }\n1061-function_definition-207-210", method="transferMasterRole(address newMaster)", type_label=function_definition];
1068 [label="206_ onlyOwner\n1068-expression_statement-207-207", method="transferMasterRole(address newMaster)", type_label=expression_statement];
1071 [label="208_ _transferMasterRole(newMaster);\n1071-expression_statement-209-209", method="transferMasterRole(address newMaster)", type_label=expression_statement];
1076 [label="210_ address payable winner_TOD25;\n1076-new_variable-211-211", method="", type_label=new_variable];
1080 [label="211_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n1080-function_definition-212-216", method="play_TOD25(bytes32 guess)", type_label=function_definition];
1088 [label="212_ if\n1088-if-213-215", method="play_TOD25(bytes32 guess)", type_label=if];
3621 [label="212_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
1110 [label="213_ winner_TOD25 = msg.sender;\n1110-expression_statement-214-214", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
1116 [label="216_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n1116-function_definition-217-219", method="getReward_TOD25()", type_label=function_definition];
1121 [label="217_ winner_TOD25.transfer(msg.value);\n1121-expression_statement-218-218", method="getReward_TOD25()", type_label=expression_statement];
1130 [label="219_ function isStopped() public view returns (bool)\n    {\n        return stopped;\n    }\n1130-function_definition-220-223", method="isStopped()", type_label=function_definition];
1139 [label="221_ return stopped;\n1139-return-222-222", method="isStopped()", type_label=return];
1141 [label="223_ address payable winner_TOD19;\n1141-new_variable-224-224", method="", type_label=new_variable];
1145 [label="224_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n1145-function_definition-225-229", method="play_TOD19(bytes32 guess)", type_label=function_definition];
1153 [label="225_ if\n1153-if-226-228", method="play_TOD19(bytes32 guess)", type_label=if];
3686 [label="225_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
1175 [label="226_ winner_TOD19 = msg.sender;\n1175-expression_statement-227-227", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
1181 [label="229_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n1181-function_definition-230-232", method="getReward_TOD19()", type_label=function_definition];
1186 [label="230_ winner_TOD19.transfer(msg.value);\n1186-expression_statement-231-231", method="getReward_TOD19()", type_label=expression_statement];
1195 [label="232_ function stop() public onlyOwner\n    {\n        _stop();\n    }\n1195-function_definition-233-236", method="stop()", type_label=function_definition];
1198 [label="232_ onlyOwner\n1198-expression_statement-233-233", method="stop()", type_label=expression_statement];
1201 [label="234_ _stop();\n1201-expression_statement-235-235", method="stop()", type_label=expression_statement];
1204 [label="236_ bool claimed_TOD26 = false;\n1204-new_variable-237-237", method="", type_label=new_variable];
1210 [label="237_ address payable owner_TOD26;\n1210-new_variable-238-238", method="", type_label=new_variable];
1214 [label="238_ uint256 reward_TOD26;\n1214-new_variable-239-239", method="", type_label=new_variable];
1218 [label="239_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n1218-function_definition-240-245", method="setReward_TOD26()", type_label=function_definition];
1223 [label="240_ require (!claimed_TOD26);\n1223-expression_statement-241-241", method="setReward_TOD26()", type_label=expression_statement];
1229 [label="241_ require(msg.sender == owner_TOD26);\n1229-expression_statement-242-242", method="setReward_TOD26()", type_label=expression_statement];
1238 [label="242_ owner_TOD26.transfer(reward_TOD26);\n1238-expression_statement-243-243", method="setReward_TOD26()", type_label=expression_statement];
1245 [label="243_ reward_TOD26 = msg.value;\n1245-expression_statement-244-244", method="setReward_TOD26()", type_label=expression_statement];
1251 [label="245_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n1251-function_definition-246-251", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
1259 [label="246_ require (!claimed_TOD26);\n1259-expression_statement-247-247", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1265 [label="247_ require(submission < 10);\n1265-expression_statement-248-248", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1272 [label="248_ msg.sender.transfer(reward_TOD26);\n1272-expression_statement-249-249", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1281 [label="249_ claimed_TOD26 = true;\n1281-expression_statement-250-250", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1286 [label="251_ function start() public onlyOwner\n    {\n        _start();\n    }\n1286-function_definition-252-255", method="start()", type_label=function_definition];
1289 [label="251_ onlyOwner\n1289-expression_statement-252-252", method="start()", type_label=expression_statement];
1292 [label="253_ _start();\n1292-expression_statement-254-254", method="start()", type_label=expression_statement];
1295 [label="255_ bool claimed_TOD20 = false;\n1295-new_variable-256-256", method="", type_label=new_variable];
1301 [label="256_ address payable owner_TOD20;\n1301-new_variable-257-257", method="", type_label=new_variable];
1305 [label="257_ uint256 reward_TOD20;\n1305-new_variable-258-258", method="", type_label=new_variable];
1309 [label="258_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n1309-function_definition-259-264", method="setReward_TOD20()", type_label=function_definition];
1314 [label="259_ require (!claimed_TOD20);\n1314-expression_statement-260-260", method="setReward_TOD20()", type_label=expression_statement];
1320 [label="260_ require(msg.sender == owner_TOD20);\n1320-expression_statement-261-261", method="setReward_TOD20()", type_label=expression_statement];
1329 [label="261_ owner_TOD20.transfer(reward_TOD20);\n1329-expression_statement-262-262", method="setReward_TOD20()", type_label=expression_statement];
1336 [label="262_ reward_TOD20 = msg.value;\n1336-expression_statement-263-263", method="setReward_TOD20()", type_label=expression_statement];
1342 [label="264_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n1342-function_definition-265-270", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
1350 [label="265_ require (!claimed_TOD20);\n1350-expression_statement-266-266", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1356 [label="266_ require(submission < 10);\n1356-expression_statement-267-267", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1363 [label="267_ msg.sender.transfer(reward_TOD20);\n1363-expression_statement-268-268", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1372 [label="268_ claimed_TOD20 = true;\n1372-expression_statement-269-269", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1377 [label="270_ function _transferOwnership(address newOwner) internal\n    {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n1377-function_definition-271-276", method="_transferOwnership(address newOwner)", type_label=function_definition];
1385 [label="272_ require(newOwner != address(0));\n1385-expression_statement-273-273", method="_transferOwnership(address newOwner)", type_label=expression_statement];
1400 [label="274_ _owner = newOwner;\n1400-expression_statement-275-275", method="_transferOwnership(address newOwner)", type_label=expression_statement];
1404 [label="276_ bool claimed_TOD32 = false;\n1404-new_variable-277-277", method="", type_label=new_variable];
1410 [label="277_ address payable owner_TOD32;\n1410-new_variable-278-278", method="", type_label=new_variable];
1414 [label="278_ uint256 reward_TOD32;\n1414-new_variable-279-279", method="", type_label=new_variable];
1418 [label="279_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n1418-function_definition-280-285", method="setReward_TOD32()", type_label=function_definition];
1423 [label="280_ require (!claimed_TOD32);\n1423-expression_statement-281-281", method="setReward_TOD32()", type_label=expression_statement];
1429 [label="281_ require(msg.sender == owner_TOD32);\n1429-expression_statement-282-282", method="setReward_TOD32()", type_label=expression_statement];
1438 [label="282_ owner_TOD32.transfer(reward_TOD32);\n1438-expression_statement-283-283", method="setReward_TOD32()", type_label=expression_statement];
1445 [label="283_ reward_TOD32 = msg.value;\n1445-expression_statement-284-284", method="setReward_TOD32()", type_label=expression_statement];
1451 [label="285_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n1451-function_definition-286-291", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
1459 [label="286_ require (!claimed_TOD32);\n1459-expression_statement-287-287", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1465 [label="287_ require(submission < 10);\n1465-expression_statement-288-288", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1472 [label="288_ msg.sender.transfer(reward_TOD32);\n1472-expression_statement-289-289", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1481 [label="289_ claimed_TOD32 = true;\n1481-expression_statement-290-290", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1486 [label="291_ function _transferMasterRole(address newMaster) internal\n    {\n        require(newMaster != address(0));\n        emit MasterRoleTransferred(_master, newMaster);\n        _master = newMaster;\n    }\n1486-function_definition-292-297", method="_transferMasterRole(address newMaster)", type_label=function_definition];
1494 [label="293_ require(newMaster != address(0));\n1494-expression_statement-294-294", method="_transferMasterRole(address newMaster)", type_label=expression_statement];
1509 [label="295_ _master = newMaster;\n1509-expression_statement-296-296", method="_transferMasterRole(address newMaster)", type_label=expression_statement];
1513 [label="297_ bool claimed_TOD38 = false;\n1513-new_variable-298-298", method="", type_label=new_variable];
1519 [label="298_ address payable owner_TOD38;\n1519-new_variable-299-299", method="", type_label=new_variable];
1523 [label="299_ uint256 reward_TOD38;\n1523-new_variable-300-300", method="", type_label=new_variable];
1527 [label="300_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n1527-function_definition-301-306", method="setReward_TOD38()", type_label=function_definition];
1532 [label="301_ require (!claimed_TOD38);\n1532-expression_statement-302-302", method="setReward_TOD38()", type_label=expression_statement];
1538 [label="302_ require(msg.sender == owner_TOD38);\n1538-expression_statement-303-303", method="setReward_TOD38()", type_label=expression_statement];
1547 [label="303_ owner_TOD38.transfer(reward_TOD38);\n1547-expression_statement-304-304", method="setReward_TOD38()", type_label=expression_statement];
1554 [label="304_ reward_TOD38 = msg.value;\n1554-expression_statement-305-305", method="setReward_TOD38()", type_label=expression_statement];
1560 [label="306_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n1560-function_definition-307-312", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
1568 [label="307_ require (!claimed_TOD38);\n1568-expression_statement-308-308", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1574 [label="308_ require(submission < 10);\n1574-expression_statement-309-309", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1581 [label="309_ msg.sender.transfer(reward_TOD38);\n1581-expression_statement-310-310", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1590 [label="310_ claimed_TOD38 = true;\n1590-expression_statement-311-311", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1595 [label="312_ function _stop() internal\n    {\n        emit Stopped();\n        stopped = true;\n    }\n1595-function_definition-313-317", method="_stop()", type_label=function_definition];
1601 [label="315_ stopped = true;\n1601-expression_statement-316-316", method="_stop()", type_label=expression_statement];
1606 [label="317_ bool claimed_TOD4 = false;\n1606-new_variable-318-318", method="", type_label=new_variable];
1612 [label="318_ address payable owner_TOD4;\n1612-new_variable-319-319", method="", type_label=new_variable];
1616 [label="319_ uint256 reward_TOD4;\n1616-new_variable-320-320", method="", type_label=new_variable];
1620 [label="320_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n1620-function_definition-321-326", method="setReward_TOD4()", type_label=function_definition];
1625 [label="321_ require (!claimed_TOD4);\n1625-expression_statement-322-322", method="setReward_TOD4()", type_label=expression_statement];
1631 [label="322_ require(msg.sender == owner_TOD4);\n1631-expression_statement-323-323", method="setReward_TOD4()", type_label=expression_statement];
1640 [label="323_ owner_TOD4.transfer(reward_TOD4);\n1640-expression_statement-324-324", method="setReward_TOD4()", type_label=expression_statement];
1647 [label="324_ reward_TOD4 = msg.value;\n1647-expression_statement-325-325", method="setReward_TOD4()", type_label=expression_statement];
1653 [label="326_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n1653-function_definition-327-332", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
1661 [label="327_ require (!claimed_TOD4);\n1661-expression_statement-328-328", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1667 [label="328_ require(submission < 10);\n1667-expression_statement-329-329", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1674 [label="329_ msg.sender.transfer(reward_TOD4);\n1674-expression_statement-330-330", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1683 [label="330_ claimed_TOD4 = true;\n1683-expression_statement-331-331", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1688 [label="332_ function _start() internal\n    {\n        emit Started();\n        stopped = false;\n    }\n1688-function_definition-333-337", method="_start()", type_label=function_definition];
1694 [label="335_ stopped = false;\n1694-expression_statement-336-336", method="_start()", type_label=expression_statement];
1699 [label="337_ address payable winner_TOD7;\n1699-new_variable-338-338", method="", type_label=new_variable];
1703 [label="338_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n1703-function_definition-339-343", method="play_TOD7(bytes32 guess)", type_label=function_definition];
1711 [label="339_ if\n1711-if-340-342", method="play_TOD7(bytes32 guess)", type_label=if];
4244 [label="339_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
1733 [label="340_ winner_TOD7 = msg.sender;\n1733-expression_statement-341-341", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
1739 [label="343_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n1739-function_definition-344-346", method="getReward_TOD7()", type_label=function_definition];
1744 [label="344_ winner_TOD7.transfer(msg.value);\n1744-expression_statement-345-345", method="getReward_TOD7()", type_label=expression_statement];
1759 [label="349_ address payable winner_TOD11;\n1759-new_variable-350-350", method="", type_label=new_variable];
1763 [label="350_ function play_TOD11(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD11 = msg.sender;\n        }\n    }\n1763-function_definition-351-355", method="play_TOD11(bytes32 guess)", type_label=function_definition];
1771 [label="351_ if\n1771-if-352-354", method="play_TOD11(bytes32 guess)", type_label=if];
4304 [label="351_ end_if", method="play_TOD11(bytes32 guess)", type_label=end_if];
1793 [label="352_ winner_TOD11 = msg.sender;\n1793-expression_statement-353-353", method="play_TOD11(bytes32 guess)", type_label=expression_statement];
1799 [label="355_ function getReward_TOD11() payable public{\n       winner_TOD11.transfer(msg.value);\n    }\n1799-function_definition-356-358", method="getReward_TOD11()", type_label=function_definition];
1804 [label="356_ winner_TOD11.transfer(msg.value);\n1804-expression_statement-357-357", method="getReward_TOD11()", type_label=expression_statement];
1813 [label="358_ mapping(string => address) private addressMap;\n1813-new_variable-359-359", method="", type_label=new_variable];
1820 [label="359_ address payable winner_TOD27;\n1820-new_variable-360-360", method="", type_label=new_variable];
1824 [label="360_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n1824-function_definition-361-365", method="play_TOD27(bytes32 guess)", type_label=function_definition];
1832 [label="361_ if\n1832-if-362-364", method="play_TOD27(bytes32 guess)", type_label=if];
4365 [label="361_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
1854 [label="362_ winner_TOD27 = msg.sender;\n1854-expression_statement-363-363", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
1860 [label="365_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n1860-function_definition-366-368", method="getReward_TOD27()", type_label=function_definition];
1865 [label="366_ winner_TOD27.transfer(msg.value);\n1865-expression_statement-367-367", method="getReward_TOD27()", type_label=expression_statement];
1884 [label="369_ address payable winner_TOD31;\n1884-new_variable-370-370", method="", type_label=new_variable];
1888 [label="370_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n1888-function_definition-371-375", method="play_TOD31(bytes32 guess)", type_label=function_definition];
1896 [label="371_ if\n1896-if-372-374", method="play_TOD31(bytes32 guess)", type_label=if];
4429 [label="371_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
1918 [label="372_ winner_TOD31 = msg.sender;\n1918-expression_statement-373-373", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
1924 [label="375_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n1924-function_definition-376-378", method="getReward_TOD31()", type_label=function_definition];
1929 [label="376_ winner_TOD31.transfer(msg.value);\n1929-expression_statement-377-377", method="getReward_TOD31()", type_label=expression_statement];
1948 [label="379_ address payable winner_TOD13;\n1948-new_variable-380-380", method="", type_label=new_variable];
1952 [label="380_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n1952-function_definition-381-385", method="play_TOD13(bytes32 guess)", type_label=function_definition];
1960 [label="381_ if\n1960-if-382-384", method="play_TOD13(bytes32 guess)", type_label=if];
4493 [label="381_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
1982 [label="382_ winner_TOD13 = msg.sender;\n1982-expression_statement-383-383", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
1988 [label="385_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n1988-function_definition-386-388", method="getReward_TOD13()", type_label=function_definition];
1993 [label="386_ winner_TOD13.transfer(msg.value);\n1993-expression_statement-387-387", method="getReward_TOD13()", type_label=expression_statement];
2008 [label="389_ function version() external pure returns(string memory)\n    {\n        return '0.0.1';\n    }\n2008-function_definition-390-393", method="version()", type_label=function_definition];
2017 [label="391_ return '0.0.1';\n2017-return-392-392", method="version()", type_label=return];
2020 [label="393_ address payable winner_TOD23;\n2020-new_variable-394-394", method="", type_label=new_variable];
2024 [label="394_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n2024-function_definition-395-399", method="play_TOD23(bytes32 guess)", type_label=function_definition];
2032 [label="395_ if\n2032-if-396-398", method="play_TOD23(bytes32 guess)", type_label=if];
4565 [label="395_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
2054 [label="396_ winner_TOD23 = msg.sender;\n2054-expression_statement-397-397", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
2060 [label="399_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n2060-function_definition-400-402", method="getReward_TOD23()", type_label=function_definition];
2065 [label="400_ winner_TOD23.transfer(msg.value);\n2065-expression_statement-401-401", method="getReward_TOD23()", type_label=expression_statement];
2074 [label="402_ function getAddress(string calldata channelId) external view returns (address)\n    {\n        return addressMap[channelId];\n    }\n2074-function_definition-403-406", method="getAddress(string calldata channelId)", type_label=function_definition];
2087 [label="404_ return addressMap[channelId];\n2087-return-405-405", method="getAddress(string calldata channelId)", type_label=return];
2091 [label="406_ bool claimed_TOD14 = false;\n2091-new_variable-407-407", method="", type_label=new_variable];
2097 [label="407_ address payable owner_TOD14;\n2097-new_variable-408-408", method="", type_label=new_variable];
2101 [label="408_ uint256 reward_TOD14;\n2101-new_variable-409-409", method="", type_label=new_variable];
2105 [label="409_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n2105-function_definition-410-415", method="setReward_TOD14()", type_label=function_definition];
2110 [label="410_ require (!claimed_TOD14);\n2110-expression_statement-411-411", method="setReward_TOD14()", type_label=expression_statement];
2116 [label="411_ require(msg.sender == owner_TOD14);\n2116-expression_statement-412-412", method="setReward_TOD14()", type_label=expression_statement];
2125 [label="412_ owner_TOD14.transfer(reward_TOD14);\n2125-expression_statement-413-413", method="setReward_TOD14()", type_label=expression_statement];
2132 [label="413_ reward_TOD14 = msg.value;\n2132-expression_statement-414-414", method="setReward_TOD14()", type_label=expression_statement];
2138 [label="415_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n2138-function_definition-416-421", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
2146 [label="416_ require (!claimed_TOD14);\n2146-expression_statement-417-417", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2152 [label="417_ require(submission < 10);\n2152-expression_statement-418-418", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2159 [label="418_ msg.sender.transfer(reward_TOD14);\n2159-expression_statement-419-419", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2168 [label="419_ claimed_TOD14 = true;\n2168-expression_statement-420-420", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2173 [label="421_ function setAddress(string calldata channelId, address _address) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(channelId).length > 0);\n        addressMap[channelId] = _address;\n        emit SetAddress(channelId, _address);\n    }\n2173-function_definition-422-427", method="setAddress(string calldata channelId,address _address)", type_label=function_definition];
2184 [label="421_ onlyMaster\n2184-expression_statement-422-422", method="setAddress(string calldata channelId,address _address)", type_label=expression_statement];
2186 [label="421_ onlyWhenNotStopped\n2186-expression_statement-422-422", method="setAddress(string calldata channelId,address _address)", type_label=expression_statement];
2189 [label="423_ require(bytes(channelId).length > 0);\n2189-expression_statement-424-424", method="setAddress(string calldata channelId,address _address)", type_label=expression_statement];
2200 [label="424_ addressMap[channelId] = _address;\n2200-expression_statement-425-425", method="setAddress(string calldata channelId,address _address)", type_label=expression_statement];
2212 [label="427_ bool claimed_TOD30 = false;\n2212-new_variable-428-428", method="", type_label=new_variable];
2218 [label="428_ address payable owner_TOD30;\n2218-new_variable-429-429", method="", type_label=new_variable];
2222 [label="429_ uint256 reward_TOD30;\n2222-new_variable-430-430", method="", type_label=new_variable];
2226 [label="430_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n2226-function_definition-431-436", method="setReward_TOD30()", type_label=function_definition];
2231 [label="431_ require (!claimed_TOD30);\n2231-expression_statement-432-432", method="setReward_TOD30()", type_label=expression_statement];
2237 [label="432_ require(msg.sender == owner_TOD30);\n2237-expression_statement-433-433", method="setReward_TOD30()", type_label=expression_statement];
2246 [label="433_ owner_TOD30.transfer(reward_TOD30);\n2246-expression_statement-434-434", method="setReward_TOD30()", type_label=expression_statement];
2253 [label="434_ reward_TOD30 = msg.value;\n2253-expression_statement-435-435", method="setReward_TOD30()", type_label=expression_statement];
2259 [label="436_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n2259-function_definition-437-442", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
2267 [label="437_ require (!claimed_TOD30);\n2267-expression_statement-438-438", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2273 [label="438_ require(submission < 10);\n2273-expression_statement-439-439", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2280 [label="439_ msg.sender.transfer(reward_TOD30);\n2280-expression_statement-440-440", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2289 [label="440_ claimed_TOD30 = true;\n2289-expression_statement-441-441", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2294 [label="442_ function updateChannel(string calldata from, string calldata to, address _address) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(from).length > 0);\n        require(bytes(to).length > 0);\n        require(addressMap[to] == address(0));\n        addressMap[to] = _address;\n        addressMap[from] = address(0);\n        emit UpdateAddress(from, to);\n    }\n2294-function_definition-443-451", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=function_definition];
2309 [label="442_ onlyMaster\n2309-expression_statement-443-443", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
2311 [label="442_ onlyWhenNotStopped\n2311-expression_statement-443-443", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
2314 [label="444_ require(bytes(from).length > 0);\n2314-expression_statement-445-445", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
2325 [label="445_ require(bytes(to).length > 0);\n2325-expression_statement-446-446", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
2336 [label="446_ require(addressMap[to] == address(0));\n2336-expression_statement-447-447", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
2347 [label="447_ addressMap[to] = _address;\n2347-expression_statement-448-448", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
2353 [label="448_ addressMap[from] = address(0);\n2353-expression_statement-449-449", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
2367 [label="451_ bool claimed_TOD8 = false;\n2367-new_variable-452-452", method="", type_label=new_variable];
2373 [label="452_ address payable owner_TOD8;\n2373-new_variable-453-453", method="", type_label=new_variable];
2377 [label="453_ uint256 reward_TOD8;\n2377-new_variable-454-454", method="", type_label=new_variable];
2381 [label="454_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n2381-function_definition-455-460", method="setReward_TOD8()", type_label=function_definition];
2386 [label="455_ require (!claimed_TOD8);\n2386-expression_statement-456-456", method="setReward_TOD8()", type_label=expression_statement];
2392 [label="456_ require(msg.sender == owner_TOD8);\n2392-expression_statement-457-457", method="setReward_TOD8()", type_label=expression_statement];
2401 [label="457_ owner_TOD8.transfer(reward_TOD8);\n2401-expression_statement-458-458", method="setReward_TOD8()", type_label=expression_statement];
2408 [label="458_ reward_TOD8 = msg.value;\n2408-expression_statement-459-459", method="setReward_TOD8()", type_label=expression_statement];
2414 [label="460_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n2414-function_definition-461-466", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
2422 [label="461_ require (!claimed_TOD8);\n2422-expression_statement-462-462", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2428 [label="462_ require(submission < 10);\n2428-expression_statement-463-463", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2435 [label="463_ msg.sender.transfer(reward_TOD8);\n2435-expression_statement-464-464", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2444 [label="464_ claimed_TOD8 = true;\n2444-expression_statement-465-465", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2449 [label="466_ function deleteChannel(string calldata channelId) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(channelId).length > 0);\n        addressMap[channelId] = address(0);\n        emit DeleteAddress(channelId);\n    }\n2449-function_definition-467-472", method="deleteChannel(string calldata channelId)", type_label=function_definition];
2456 [label="466_ onlyMaster\n2456-expression_statement-467-467", method="deleteChannel(string calldata channelId)", type_label=expression_statement];
2458 [label="466_ onlyWhenNotStopped\n2458-expression_statement-467-467", method="deleteChannel(string calldata channelId)", type_label=expression_statement];
2461 [label="468_ require(bytes(channelId).length > 0);\n2461-expression_statement-469-469", method="deleteChannel(string calldata channelId)", type_label=expression_statement];
2472 [label="469_ addressMap[channelId] = address(0);\n2472-expression_statement-470-470", method="deleteChannel(string calldata channelId)", type_label=expression_statement];
2484 [label="472_ address payable winner_TOD39;\n2484-new_variable-473-473", method="", type_label=new_variable];
2488 [label="473_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n2488-function_definition-474-478", method="play_TOD39(bytes32 guess)", type_label=function_definition];
2496 [label="474_ if\n2496-if-475-477", method="play_TOD39(bytes32 guess)", type_label=if];
5029 [label="474_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
2518 [label="475_ winner_TOD39 = msg.sender;\n2518-expression_statement-476-476", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
2524 [label="478_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n2524-function_definition-479-481", method="getReward_TOD39()", type_label=function_definition];
2529 [label="479_ winner_TOD39.transfer(msg.value);\n2529-expression_statement-480-480", method="getReward_TOD39()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 19  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
19 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
27 -> 32  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
32 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 74  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
74 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
125 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
147 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
212 -> 221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
221 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
234 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
248 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
274 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 392  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
370 -> 2903  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2903 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 2903  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
398 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
475 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 540  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
518 -> 3051  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3051 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 3051  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
546 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 639  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
617 -> 3150  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3150 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 3150  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
645 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
670 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
738 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
767 -> 775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
775 -> 797  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
775 -> 3308  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3308 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 3308  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
803 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
817 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
820 -> 826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
831 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
873 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 903  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
881 -> 3414  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3414 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
903 -> 3414  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
909 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
942 -> 950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
950 -> 972  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
950 -> 3483  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3483 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 3483  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
978 -> 983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1011 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1041  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1019 -> 3552  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3552 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1041 -> 3552  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1047 -> 1052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1110  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1088 -> 3621  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3621 -> 1116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 3621  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1116 -> 1121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1130 -> 1139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1139 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1145 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 1175  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1153 -> 3686  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3686 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 3686  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1181 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1204 -> 1210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1210 -> 1214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1218 -> 1223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1223 -> 1229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1229 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1238 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1251 -> 1259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1259 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1272 -> 1281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1286 -> 1292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1309 -> 1314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1314 -> 1320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1320 -> 1329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1329 -> 1336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1342 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 1356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1356 -> 1363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1363 -> 1372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1377 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 1414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1418 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 1429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 1445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1451 -> 1459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 1465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1472 -> 1481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 1519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1519 -> 1523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1527 -> 1532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1532 -> 1538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1538 -> 1547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 1554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1560 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 1574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1574 -> 1581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1581 -> 1590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1595 -> 1601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1606 -> 1612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1612 -> 1616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1620 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 1631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1631 -> 1640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 1647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1661 -> 1667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1667 -> 1674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1674 -> 1683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1688 -> 1694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1703 -> 1711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1711 -> 1733  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1711 -> 4244  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4244 -> 1739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1733 -> 4244  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1739 -> 1744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1763 -> 1771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1771 -> 1793  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1771 -> 4304  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4304 -> 1799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1793 -> 4304  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1799 -> 1804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1813 -> 1820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1824 -> 1832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1832 -> 1854  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1832 -> 4365  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4365 -> 1860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1854 -> 4365  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1860 -> 1865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1888 -> 1896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1896 -> 1918  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1896 -> 4429  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4429 -> 1924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1918 -> 4429  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1924 -> 1929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1952 -> 1960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1960 -> 1982  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1960 -> 4493  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4493 -> 1988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1982 -> 4493  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1988 -> 1993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2008 -> 2017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2017 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2024 -> 2032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2032 -> 2054  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2032 -> 4565  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4565 -> 2060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2054 -> 4565  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2060 -> 2065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2074 -> 2087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2087 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2091 -> 2097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2097 -> 2101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2105 -> 2110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2110 -> 2116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2116 -> 2125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2125 -> 2132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2138 -> 2146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2146 -> 2152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2152 -> 2159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2159 -> 2168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2173 -> 2189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2184 -> 2186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2189 -> 2200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2212 -> 2218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2218 -> 2222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2226 -> 2231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2231 -> 2237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2237 -> 2246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2246 -> 2253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2259 -> 2267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2267 -> 2273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2273 -> 2280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2280 -> 2289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2294 -> 2314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2309 -> 2311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2314 -> 2325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2325 -> 2336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2336 -> 2347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2347 -> 2353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2367 -> 2373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2373 -> 2377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2381 -> 2386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2386 -> 2392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2392 -> 2401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2401 -> 2408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2414 -> 2422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2422 -> 2428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2428 -> 2435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2435 -> 2444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2449 -> 2461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2456 -> 2458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2461 -> 2472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2488 -> 2496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2496 -> 2518  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2496 -> 5029  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5029 -> 2524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2518 -> 5029  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2524 -> 2529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
