digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n50-function_definition-8-12", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ require(b <= a, \"SafeMath: subtraction overflow\");\n67-expression_statement-9-9", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
77 [label="9_ uint256 c = a - b;\n77-new_variable-10-10", method="sub(uint256 a,uint256 b)", type_label=new_variable];
85 [label="10_ return c;\n85-return-11-11", method="sub(uint256 a,uint256 b)", type_label=return];
87 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n87-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
104 [label="13_ if_a == 0\n104-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
4375 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
109 [label="14_ return 0;\n109-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
111 [label="16_ uint256 c = a * b;\n111-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
119 [label="17_ require(c / a == b, \"SafeMath: multiplication overflow\");\n119-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
131 [label="18_ return c;\n131-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
133 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n133-function_definition-21-25", method="div(uint256 a,uint256 b)", type_label=function_definition];
150 [label="21_ require(b > 0, \"SafeMath: division by zero\");\n150-expression_statement-22-22", method="div(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="22_ uint256 c = a / b;\n160-new_variable-23-23", method="div(uint256 a,uint256 b)", type_label=new_variable];
168 [label="23_ return c;\n168-return-24-24", method="div(uint256 a,uint256 b)", type_label=return];
170 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n170-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
187 [label="26_ require(b != 0, \"SafeMath: modulo by zero\");\n187-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
197 [label="27_ return a % b;\n197-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
204 [label="31_ address payable winner_TOD15;\n204-new_variable-32-32", method="", type_label=new_variable];
208 [label="32_ function play_TOD15(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD15 = msg.sender;\n        }\n    }\n208-function_definition-33-37", method="play_TOD15(bytes32 guess)", type_label=function_definition];
216 [label="33_ if\n216-if-34-36", method="play_TOD15(bytes32 guess)", type_label=if];
4487 [label="33_ end_if", method="play_TOD15(bytes32 guess)", type_label=end_if];
238 [label="34_ winner_TOD15 = msg.sender;\n238-expression_statement-35-35", method="play_TOD15(bytes32 guess)", type_label=expression_statement];
244 [label="37_ function getReward_TOD15() payable public{\n       winner_TOD15.transfer(msg.value);\n    }\n244-function_definition-38-40", method="getReward_TOD15()", type_label=function_definition];
249 [label="38_ winner_TOD15.transfer(msg.value);\n249-expression_statement-39-39", method="getReward_TOD15()", type_label=expression_statement];
258 [label="40_ address public owner;\n258-new_variable-41-41", method="", type_label=new_variable];
263 [label="41_ bool claimed_TOD28 = false;\n263-new_variable-42-42", method="", type_label=new_variable];
269 [label="42_ address payable owner_TOD28;\n269-new_variable-43-43", method="", type_label=new_variable];
273 [label="43_ uint256 reward_TOD28;\n273-new_variable-44-44", method="", type_label=new_variable];
277 [label="44_ function setReward_TOD28() public payable {\n        require (!claimed_TOD28);\n        require(msg.sender == owner_TOD28);\n        owner_TOD28.transfer(reward_TOD28);\n        reward_TOD28 = msg.value;\n    }\n277-function_definition-45-50", method="setReward_TOD28()", type_label=function_definition];
282 [label="45_ require (!claimed_TOD28);\n282-expression_statement-46-46", method="setReward_TOD28()", type_label=expression_statement];
288 [label="46_ require(msg.sender == owner_TOD28);\n288-expression_statement-47-47", method="setReward_TOD28()", type_label=expression_statement];
297 [label="47_ owner_TOD28.transfer(reward_TOD28);\n297-expression_statement-48-48", method="setReward_TOD28()", type_label=expression_statement];
304 [label="48_ reward_TOD28 = msg.value;\n304-expression_statement-49-49", method="setReward_TOD28()", type_label=expression_statement];
310 [label="50_ function claimReward_TOD28(uint256 submission) public {\n        require (!claimed_TOD28);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD28);\n        claimed_TOD28 = true;\n    }\n310-function_definition-51-56", method="claimReward_TOD28(uint256 submission)", type_label=function_definition];
318 [label="51_ require (!claimed_TOD28);\n318-expression_statement-52-52", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
324 [label="52_ require(submission < 10);\n324-expression_statement-53-53", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
331 [label="53_ msg.sender.transfer(reward_TOD28);\n331-expression_statement-54-54", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
340 [label="54_ claimed_TOD28 = true;\n340-expression_statement-55-55", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
345 [label="56_ address private newOwner;\n345-new_variable-57-57", method="", type_label=new_variable];
350 [label="57_ bool claimed_TOD36 = false;\n350-new_variable-58-58", method="", type_label=new_variable];
356 [label="58_ address payable owner_TOD36;\n356-new_variable-59-59", method="", type_label=new_variable];
360 [label="59_ uint256 reward_TOD36;\n360-new_variable-60-60", method="", type_label=new_variable];
364 [label="60_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n364-function_definition-61-66", method="setReward_TOD36()", type_label=function_definition];
369 [label="61_ require (!claimed_TOD36);\n369-expression_statement-62-62", method="setReward_TOD36()", type_label=expression_statement];
375 [label="62_ require(msg.sender == owner_TOD36);\n375-expression_statement-63-63", method="setReward_TOD36()", type_label=expression_statement];
384 [label="63_ owner_TOD36.transfer(reward_TOD36);\n384-expression_statement-64-64", method="setReward_TOD36()", type_label=expression_statement];
391 [label="64_ reward_TOD36 = msg.value;\n391-expression_statement-65-65", method="setReward_TOD36()", type_label=expression_statement];
397 [label="66_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n397-function_definition-67-72", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
405 [label="67_ require (!claimed_TOD36);\n405-expression_statement-68-68", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
411 [label="68_ require(submission < 10);\n411-expression_statement-69-69", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
418 [label="69_ msg.sender.transfer(reward_TOD36);\n418-expression_statement-70-70", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
427 [label="70_ claimed_TOD36 = true;\n427-expression_statement-71-71", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
448 [label="74_ owner = msg.sender;\n448-expression_statement-75-75", method="", type_label=expression_statement];
454 [label="76_ address payable winner_TOD1;\n454-new_variable-77-77", method="", type_label=new_variable];
458 [label="77_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n458-function_definition-78-82", method="play_TOD1(bytes32 guess)", type_label=function_definition];
466 [label="78_ if\n466-if-79-81", method="play_TOD1(bytes32 guess)", type_label=if];
4737 [label="78_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
488 [label="79_ winner_TOD1 = msg.sender;\n488-expression_statement-80-80", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
494 [label="82_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n494-function_definition-83-85", method="getReward_TOD1()", type_label=function_definition];
499 [label="83_ winner_TOD1.transfer(msg.value);\n499-expression_statement-84-84", method="getReward_TOD1()", type_label=expression_statement];
508 [label="85_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n508-expression_statement-86-89", method="", type_label=expression_statement];
511 [label="86_ require(msg.sender == owner);\n511-expression_statement-87-87", method="", type_label=expression_statement];
520 [label="87_ _;\n520-expression_statement-88-88", method="", type_label=expression_statement];
522 [label="89_ function onlyOwnerTransferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n522-function_definition-90-92", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=function_definition];
529 [label="89_ onlyOwner\n529-expression_statement-90-90", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=expression_statement];
532 [label="90_ newOwner = _newOwner;\n532-expression_statement-91-91", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=expression_statement];
536 [label="92_ bool claimed_TOD2 = false;\n536-new_variable-93-93", method="", type_label=new_variable];
542 [label="93_ address payable owner_TOD2;\n542-new_variable-94-94", method="", type_label=new_variable];
546 [label="94_ uint256 reward_TOD2;\n546-new_variable-95-95", method="", type_label=new_variable];
550 [label="95_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n550-function_definition-96-101", method="setReward_TOD2()", type_label=function_definition];
555 [label="96_ require (!claimed_TOD2);\n555-expression_statement-97-97", method="setReward_TOD2()", type_label=expression_statement];
561 [label="97_ require(msg.sender == owner_TOD2);\n561-expression_statement-98-98", method="setReward_TOD2()", type_label=expression_statement];
570 [label="98_ owner_TOD2.transfer(reward_TOD2);\n570-expression_statement-99-99", method="setReward_TOD2()", type_label=expression_statement];
577 [label="99_ reward_TOD2 = msg.value;\n577-expression_statement-100-100", method="setReward_TOD2()", type_label=expression_statement];
583 [label="101_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n583-function_definition-102-107", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
591 [label="102_ require (!claimed_TOD2);\n591-expression_statement-103-103", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
597 [label="103_ require(submission < 10);\n597-expression_statement-104-104", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
604 [label="104_ msg.sender.transfer(reward_TOD2);\n604-expression_statement-105-105", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
613 [label="105_ claimed_TOD2 = true;\n613-expression_statement-106-106", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
618 [label="107_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(now, owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n618-function_definition-108-113", method="acceptOwnership()", type_label=function_definition];
622 [label="108_ require(msg.sender == newOwner);\n622-expression_statement-109-109", method="acceptOwnership()", type_label=expression_statement];
639 [label="110_ owner = newOwner;\n639-expression_statement-111-111", method="acceptOwnership()", type_label=expression_statement];
643 [label="111_ newOwner = address(0);\n643-expression_statement-112-112", method="acceptOwnership()", type_label=expression_statement];
649 [label="113_ address payable winner_TOD17;\n649-new_variable-114-114", method="", type_label=new_variable];
653 [label="114_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n653-function_definition-115-119", method="play_TOD17(bytes32 guess)", type_label=function_definition];
661 [label="115_ if\n661-if-116-118", method="play_TOD17(bytes32 guess)", type_label=if];
4932 [label="115_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
683 [label="116_ winner_TOD17 = msg.sender;\n683-expression_statement-117-117", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
689 [label="119_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n689-function_definition-120-122", method="getReward_TOD17()", type_label=function_definition];
694 [label="120_ winner_TOD17.transfer(msg.value);\n694-expression_statement-121-121", method="getReward_TOD17()", type_label=expression_statement];
706 [label="125_ function transfer(address _to, uint256 _amount) external returns (bool);\n706-function_definition-126-126", method="transfer(address _to,uint256 _amount)", type_label=function_definition];
721 [label="126_ function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\n721-function_definition-127-127", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=function_definition];
751 [label="130_ bool claimed_TOD34 = false;\n751-new_variable-131-131", method="", type_label=new_variable];
757 [label="131_ address payable owner_TOD34;\n757-new_variable-132-132", method="", type_label=new_variable];
761 [label="132_ uint256 reward_TOD34;\n761-new_variable-133-133", method="", type_label=new_variable];
765 [label="133_ function setReward_TOD34() public payable {\n        require (!claimed_TOD34);\n        require(msg.sender == owner_TOD34);\n        owner_TOD34.transfer(reward_TOD34);\n        reward_TOD34 = msg.value;\n    }\n765-function_definition-134-139", method="setReward_TOD34()", type_label=function_definition];
770 [label="134_ require (!claimed_TOD34);\n770-expression_statement-135-135", method="setReward_TOD34()", type_label=expression_statement];
776 [label="135_ require(msg.sender == owner_TOD34);\n776-expression_statement-136-136", method="setReward_TOD34()", type_label=expression_statement];
785 [label="136_ owner_TOD34.transfer(reward_TOD34);\n785-expression_statement-137-137", method="setReward_TOD34()", type_label=expression_statement];
792 [label="137_ reward_TOD34 = msg.value;\n792-expression_statement-138-138", method="setReward_TOD34()", type_label=expression_statement];
798 [label="139_ function claimReward_TOD34(uint256 submission) public {\n        require (!claimed_TOD34);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD34);\n        claimed_TOD34 = true;\n    }\n798-function_definition-140-145", method="claimReward_TOD34(uint256 submission)", type_label=function_definition];
806 [label="140_ require (!claimed_TOD34);\n806-expression_statement-141-141", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
812 [label="141_ require(submission < 10);\n812-expression_statement-142-142", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
819 [label="142_ msg.sender.transfer(reward_TOD34);\n819-expression_statement-143-143", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
828 [label="143_ claimed_TOD34 = true;\n828-expression_statement-144-144", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
833 [label="145_ bool public safeGuard;\n833-new_variable-146-146", method="", type_label=new_variable];
838 [label="146_ address payable winner_TOD21;\n838-new_variable-147-147", method="", type_label=new_variable];
842 [label="147_ function play_TOD21(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD21 = msg.sender;\n        }\n    }\n842-function_definition-148-152", method="play_TOD21(bytes32 guess)", type_label=function_definition];
850 [label="148_ if\n850-if-149-151", method="play_TOD21(bytes32 guess)", type_label=if];
5121 [label="148_ end_if", method="play_TOD21(bytes32 guess)", type_label=end_if];
872 [label="149_ winner_TOD21 = msg.sender;\n872-expression_statement-150-150", method="play_TOD21(bytes32 guess)", type_label=expression_statement];
878 [label="152_ function getReward_TOD21() payable public{\n       winner_TOD21.transfer(msg.value);\n    }\n878-function_definition-153-155", method="getReward_TOD21()", type_label=function_definition];
883 [label="153_ winner_TOD21.transfer(msg.value);\n883-expression_statement-154-154", method="getReward_TOD21()", type_label=expression_statement];
892 [label="155_ address public feeAccount;\n892-new_variable-156-156", method="", type_label=new_variable];
897 [label="156_ bool claimed_TOD10 = false;\n897-new_variable-157-157", method="", type_label=new_variable];
903 [label="157_ address payable owner_TOD10;\n903-new_variable-158-158", method="", type_label=new_variable];
907 [label="158_ uint256 reward_TOD10;\n907-new_variable-159-159", method="", type_label=new_variable];
911 [label="159_ function setReward_TOD10() public payable {\n        require (!claimed_TOD10);\n        require(msg.sender == owner_TOD10);\n        owner_TOD10.transfer(reward_TOD10);\n        reward_TOD10 = msg.value;\n    }\n911-function_definition-160-165", method="setReward_TOD10()", type_label=function_definition];
916 [label="160_ require (!claimed_TOD10);\n916-expression_statement-161-161", method="setReward_TOD10()", type_label=expression_statement];
922 [label="161_ require(msg.sender == owner_TOD10);\n922-expression_statement-162-162", method="setReward_TOD10()", type_label=expression_statement];
931 [label="162_ owner_TOD10.transfer(reward_TOD10);\n931-expression_statement-163-163", method="setReward_TOD10()", type_label=expression_statement];
938 [label="163_ reward_TOD10 = msg.value;\n938-expression_statement-164-164", method="setReward_TOD10()", type_label=expression_statement];
944 [label="165_ function claimReward_TOD10(uint256 submission) public {\n        require (!claimed_TOD10);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD10);\n        claimed_TOD10 = true;\n    }\n944-function_definition-166-171", method="claimReward_TOD10(uint256 submission)", type_label=function_definition];
952 [label="166_ require (!claimed_TOD10);\n952-expression_statement-167-167", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
958 [label="167_ require(submission < 10);\n958-expression_statement-168-168", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
965 [label="168_ msg.sender.transfer(reward_TOD10);\n965-expression_statement-169-169", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
974 [label="169_ claimed_TOD10 = true;\n974-expression_statement-170-170", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
979 [label="171_ uint public tradingFee = 50;\n979-new_variable-172-172", method="", type_label=new_variable];
985 [label="172_ bool claimed_TOD22 = false;\n985-new_variable-173-173", method="", type_label=new_variable];
991 [label="173_ address payable owner_TOD22;\n991-new_variable-174-174", method="", type_label=new_variable];
995 [label="174_ uint256 reward_TOD22;\n995-new_variable-175-175", method="", type_label=new_variable];
999 [label="175_ function setReward_TOD22() public payable {\n        require (!claimed_TOD22);\n        require(msg.sender == owner_TOD22);\n        owner_TOD22.transfer(reward_TOD22);\n        reward_TOD22 = msg.value;\n    }\n999-function_definition-176-181", method="setReward_TOD22()", type_label=function_definition];
1004 [label="176_ require (!claimed_TOD22);\n1004-expression_statement-177-177", method="setReward_TOD22()", type_label=expression_statement];
1010 [label="177_ require(msg.sender == owner_TOD22);\n1010-expression_statement-178-178", method="setReward_TOD22()", type_label=expression_statement];
1019 [label="178_ owner_TOD22.transfer(reward_TOD22);\n1019-expression_statement-179-179", method="setReward_TOD22()", type_label=expression_statement];
1026 [label="179_ reward_TOD22 = msg.value;\n1026-expression_statement-180-180", method="setReward_TOD22()", type_label=expression_statement];
1032 [label="181_ function claimReward_TOD22(uint256 submission) public {\n        require (!claimed_TOD22);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD22);\n        claimed_TOD22 = true;\n    }\n1032-function_definition-182-187", method="claimReward_TOD22(uint256 submission)", type_label=function_definition];
1040 [label="182_ require (!claimed_TOD22);\n1040-expression_statement-183-183", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1046 [label="183_ require(submission < 10);\n1046-expression_statement-184-184", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1053 [label="184_ msg.sender.transfer(reward_TOD22);\n1053-expression_statement-185-185", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1062 [label="185_ claimed_TOD22 = true;\n1062-expression_statement-186-186", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1067 [label="187_ mapping (address => mapping (address => uint)) public tokens;\n1067-new_variable-188-188", method="", type_label=new_variable];
1076 [label="188_ bool claimed_TOD12 = false;\n1076-new_variable-189-189", method="", type_label=new_variable];
1082 [label="189_ address payable owner_TOD12;\n1082-new_variable-190-190", method="", type_label=new_variable];
1086 [label="190_ uint256 reward_TOD12;\n1086-new_variable-191-191", method="", type_label=new_variable];
1090 [label="191_ function setReward_TOD12() public payable {\n        require (!claimed_TOD12);\n        require(msg.sender == owner_TOD12);\n        owner_TOD12.transfer(reward_TOD12);\n        reward_TOD12 = msg.value;\n    }\n1090-function_definition-192-197", method="setReward_TOD12()", type_label=function_definition];
1095 [label="192_ require (!claimed_TOD12);\n1095-expression_statement-193-193", method="setReward_TOD12()", type_label=expression_statement];
1101 [label="193_ require(msg.sender == owner_TOD12);\n1101-expression_statement-194-194", method="setReward_TOD12()", type_label=expression_statement];
1110 [label="194_ owner_TOD12.transfer(reward_TOD12);\n1110-expression_statement-195-195", method="setReward_TOD12()", type_label=expression_statement];
1117 [label="195_ reward_TOD12 = msg.value;\n1117-expression_statement-196-196", method="setReward_TOD12()", type_label=expression_statement];
1123 [label="197_ function claimReward_TOD12(uint256 submission) public {\n        require (!claimed_TOD12);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD12);\n        claimed_TOD12 = true;\n    }\n1123-function_definition-198-203", method="claimReward_TOD12(uint256 submission)", type_label=function_definition];
1131 [label="198_ require (!claimed_TOD12);\n1131-expression_statement-199-199", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1137 [label="199_ require(submission < 10);\n1137-expression_statement-200-200", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1144 [label="200_ msg.sender.transfer(reward_TOD12);\n1144-expression_statement-201-201", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1153 [label="201_ claimed_TOD12 = true;\n1153-expression_statement-202-202", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1158 [label="203_ mapping (address => mapping (bytes32 => bool)) public orders;\n1158-new_variable-204-204", method="", type_label=new_variable];
1167 [label="204_ address payable winner_TOD11;\n1167-new_variable-205-205", method="", type_label=new_variable];
1171 [label="205_ function play_TOD11(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD11 = msg.sender;\n        }\n    }\n1171-function_definition-206-210", method="play_TOD11(bytes32 guess)", type_label=function_definition];
1179 [label="206_ if\n1179-if-207-209", method="play_TOD11(bytes32 guess)", type_label=if];
5450 [label="206_ end_if", method="play_TOD11(bytes32 guess)", type_label=end_if];
1201 [label="207_ winner_TOD11 = msg.sender;\n1201-expression_statement-208-208", method="play_TOD11(bytes32 guess)", type_label=expression_statement];
1207 [label="210_ function getReward_TOD11() payable public{\n       winner_TOD11.transfer(msg.value);\n    }\n1207-function_definition-211-213", method="getReward_TOD11()", type_label=function_definition];
1212 [label="211_ winner_TOD11.transfer(msg.value);\n1212-expression_statement-212-212", method="getReward_TOD11()", type_label=expression_statement];
1221 [label="213_ mapping (address => mapping (bytes32 => uint)) public orderFills;\n1221-new_variable-214-214", method="", type_label=new_variable];
1230 [label="214_ address payable winner_TOD35;\n1230-new_variable-215-215", method="", type_label=new_variable];
1234 [label="215_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n1234-function_definition-216-220", method="play_TOD35(bytes32 guess)", type_label=function_definition];
1242 [label="216_ if\n1242-if-217-219", method="play_TOD35(bytes32 guess)", type_label=if];
5513 [label="216_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
1264 [label="217_ winner_TOD35 = msg.sender;\n1264-expression_statement-218-218", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
1270 [label="220_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n1270-function_definition-221-223", method="getReward_TOD35()", type_label=function_definition];
1275 [label="221_ winner_TOD35.transfer(msg.value);\n1275-expression_statement-222-222", method="getReward_TOD35()", type_label=expression_statement];
1318 [label="224_ bool claimed_TOD40 = false;\n1318-new_variable-225-225", method="", type_label=new_variable];
1324 [label="225_ address payable owner_TOD40;\n1324-new_variable-226-226", method="", type_label=new_variable];
1328 [label="226_ uint256 reward_TOD40;\n1328-new_variable-227-227", method="", type_label=new_variable];
1332 [label="227_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n1332-function_definition-228-233", method="setReward_TOD40()", type_label=function_definition];
1337 [label="228_ require (!claimed_TOD40);\n1337-expression_statement-229-229", method="setReward_TOD40()", type_label=expression_statement];
1343 [label="229_ require(msg.sender == owner_TOD40);\n1343-expression_statement-230-230", method="setReward_TOD40()", type_label=expression_statement];
1352 [label="230_ owner_TOD40.transfer(reward_TOD40);\n1352-expression_statement-231-231", method="setReward_TOD40()", type_label=expression_statement];
1359 [label="231_ reward_TOD40 = msg.value;\n1359-expression_statement-232-232", method="setReward_TOD40()", type_label=expression_statement];
1365 [label="233_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n1365-function_definition-234-239", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
1373 [label="234_ require (!claimed_TOD40);\n1373-expression_statement-235-235", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1379 [label="235_ require(submission < 10);\n1379-expression_statement-236-236", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1386 [label="236_ msg.sender.transfer(reward_TOD40);\n1386-expression_statement-237-237", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1395 [label="237_ claimed_TOD40 = true;\n1395-expression_statement-238-238", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1446 [label="240_ address payable winner_TOD33;\n1446-new_variable-241-241", method="", type_label=new_variable];
1450 [label="241_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n1450-function_definition-242-246", method="play_TOD33(bytes32 guess)", type_label=function_definition];
1458 [label="242_ if\n1458-if-243-245", method="play_TOD33(bytes32 guess)", type_label=if];
5729 [label="242_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
1480 [label="243_ winner_TOD33 = msg.sender;\n1480-expression_statement-244-244", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
1486 [label="246_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n1486-function_definition-247-249", method="getReward_TOD33()", type_label=function_definition];
1491 [label="247_ winner_TOD33.transfer(msg.value);\n1491-expression_statement-248-248", method="getReward_TOD33()", type_label=expression_statement];
1530 [label="250_ address payable winner_TOD27;\n1530-new_variable-251-251", method="", type_label=new_variable];
1534 [label="251_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n1534-function_definition-252-256", method="play_TOD27(bytes32 guess)", type_label=function_definition];
1542 [label="252_ if\n1542-if-253-255", method="play_TOD27(bytes32 guess)", type_label=if];
5813 [label="252_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
1564 [label="253_ winner_TOD27 = msg.sender;\n1564-expression_statement-254-254", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
1570 [label="256_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n1570-function_definition-257-259", method="getReward_TOD27()", type_label=function_definition];
1575 [label="257_ winner_TOD27.transfer(msg.value);\n1575-expression_statement-258-258", method="getReward_TOD27()", type_label=expression_statement];
1606 [label="260_ address payable winner_TOD31;\n1606-new_variable-261-261", method="", type_label=new_variable];
1610 [label="261_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n1610-function_definition-262-266", method="play_TOD31(bytes32 guess)", type_label=function_definition];
1618 [label="262_ if\n1618-if-263-265", method="play_TOD31(bytes32 guess)", type_label=if];
5889 [label="262_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
1640 [label="263_ winner_TOD31 = msg.sender;\n1640-expression_statement-264-264", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
1646 [label="266_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n1646-function_definition-267-269", method="getReward_TOD31()", type_label=function_definition];
1651 [label="267_ winner_TOD31.transfer(msg.value);\n1651-expression_statement-268-268", method="getReward_TOD31()", type_label=expression_statement];
1682 [label="270_ address payable winner_TOD13;\n1682-new_variable-271-271", method="", type_label=new_variable];
1686 [label="271_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n1686-function_definition-272-276", method="play_TOD13(bytes32 guess)", type_label=function_definition];
1694 [label="272_ if\n1694-if-273-275", method="play_TOD13(bytes32 guess)", type_label=if];
5965 [label="272_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
1716 [label="273_ winner_TOD13 = msg.sender;\n1716-expression_statement-274-274", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
1722 [label="276_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n1722-function_definition-277-279", method="getReward_TOD13()", type_label=function_definition];
1727 [label="277_ winner_TOD13.transfer(msg.value);\n1727-expression_statement-278-278", method="getReward_TOD13()", type_label=expression_statement];
1748 [label="281_ feeAccount = msg.sender;\n1748-expression_statement-282-282", method="", type_label=expression_statement];
1754 [label="283_ address payable winner_TOD37;\n1754-new_variable-284-284", method="", type_label=new_variable];
1758 [label="284_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n1758-function_definition-285-289", method="play_TOD37(bytes32 guess)", type_label=function_definition];
1766 [label="285_ if\n1766-if-286-288", method="play_TOD37(bytes32 guess)", type_label=if];
6037 [label="285_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
1788 [label="286_ winner_TOD37 = msg.sender;\n1788-expression_statement-287-287", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
1794 [label="289_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n1794-function_definition-290-292", method="getReward_TOD37()", type_label=function_definition];
1799 [label="290_ winner_TOD37.transfer(msg.value);\n1799-expression_statement-291-291", method="getReward_TOD37()", type_label=expression_statement];
1808 [label="292_ function changeSafeguardStatus() onlyOwner public\n    {\n        if (safeGuard == false)\n        {\n            safeGuard = true;\n        }\n        else\n        {\n            safeGuard = false;    \n        }\n    }\n1808-function_definition-293-303", method="changeSafeguardStatus()", type_label=function_definition];
1810 [label="292_ onlyOwner\n1810-expression_statement-293-293", method="changeSafeguardStatus()", type_label=expression_statement];
1814 [label="294_ if_safeGuard == false\n1814-if-295-302", method="changeSafeguardStatus()", type_label=if];
6085 [label="294_ end_if", method="changeSafeguardStatus()", type_label=end_if];
1820 [label="296_ safeGuard = true;\n1820-expression_statement-297-297", method="changeSafeguardStatus()", type_label=expression_statement];
1826 [label="300_ safeGuard = false;\n1826-expression_statement-301-301", method="changeSafeguardStatus()", type_label=expression_statement];
1831 [label="303_ address payable winner_TOD3;\n1831-new_variable-304-304", method="", type_label=new_variable];
1835 [label="304_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n1835-function_definition-305-309", method="play_TOD3(bytes32 guess)", type_label=function_definition];
1843 [label="305_ if\n1843-if-306-308", method="play_TOD3(bytes32 guess)", type_label=if];
6114 [label="305_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
1865 [label="306_ winner_TOD3 = msg.sender;\n1865-expression_statement-307-307", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
1871 [label="309_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n1871-function_definition-310-312", method="getReward_TOD3()", type_label=function_definition];
1876 [label="310_ winner_TOD3.transfer(msg.value);\n1876-expression_statement-311-311", method="getReward_TOD3()", type_label=expression_statement];
1885 [label="312_ function calculatePercentage(uint256 PercentOf, uint256 percentTo ) internal pure returns (uint256) \n    {\n        uint256 factor = 10000;\n        require(percentTo <= factor);\n        uint256 c = PercentOf.mul(percentTo).div(factor);\n        return c;\n    }\n1885-function_definition-313-319", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=function_definition];
1902 [label="314_ uint256 factor = 10000;\n1902-new_variable-315-315", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=new_variable];
1908 [label="315_ require(percentTo <= factor);\n1908-expression_statement-316-316", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=expression_statement];
1915 [label="316_ uint256 c = PercentOf.mul(percentTo).div(factor);\n1915-new_variable-317-317", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=new_variable];
1931 [label="317_ return c;\n1931-return-318-318", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=return];
1933 [label="319_ address payable winner_TOD9;\n1933-new_variable-320-320", method="", type_label=new_variable];
1937 [label="320_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n1937-function_definition-321-325", method="play_TOD9(bytes32 guess)", type_label=function_definition];
1945 [label="321_ if\n1945-if-322-324", method="play_TOD9(bytes32 guess)", type_label=if];
6216 [label="321_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
1967 [label="322_ winner_TOD9 = msg.sender;\n1967-expression_statement-323-323", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
1973 [label="325_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n1973-function_definition-326-328", method="getReward_TOD9()", type_label=function_definition];
1978 [label="326_ winner_TOD9.transfer(msg.value);\n1978-expression_statement-327-327", method="getReward_TOD9()", type_label=expression_statement];
1987 [label="328_ function changeFeeAccount(address feeAccount_) public onlyOwner {\n    feeAccount = feeAccount_;\n  }\n1987-function_definition-329-331", method="changeFeeAccount(address feeAccount_)", type_label=function_definition];
1994 [label="328_ onlyOwner\n1994-expression_statement-329-329", method="changeFeeAccount(address feeAccount_)", type_label=expression_statement];
1997 [label="329_ feeAccount = feeAccount_;\n1997-expression_statement-330-330", method="changeFeeAccount(address feeAccount_)", type_label=expression_statement];
2001 [label="331_ address payable winner_TOD25;\n2001-new_variable-332-332", method="", type_label=new_variable];
2005 [label="332_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n2005-function_definition-333-337", method="play_TOD25(bytes32 guess)", type_label=function_definition];
2013 [label="333_ if\n2013-if-334-336", method="play_TOD25(bytes32 guess)", type_label=if];
6284 [label="333_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
2035 [label="334_ winner_TOD25 = msg.sender;\n2035-expression_statement-335-335", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
2041 [label="337_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n2041-function_definition-338-340", method="getReward_TOD25()", type_label=function_definition];
2046 [label="338_ winner_TOD25.transfer(msg.value);\n2046-expression_statement-339-339", method="getReward_TOD25()", type_label=expression_statement];
2055 [label="340_ function changetradingFee(uint tradingFee_) public onlyOwner{\n    tradingFee = tradingFee_;\n  }\n2055-function_definition-341-343", method="changetradingFee(uint tradingFee_)", type_label=function_definition];
2062 [label="340_ onlyOwner\n2062-expression_statement-341-341", method="changetradingFee(uint tradingFee_)", type_label=expression_statement];
2065 [label="341_ tradingFee = tradingFee_;\n2065-expression_statement-342-342", method="changetradingFee(uint tradingFee_)", type_label=expression_statement];
2069 [label="343_ address payable winner_TOD19;\n2069-new_variable-344-344", method="", type_label=new_variable];
2073 [label="344_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n2073-function_definition-345-349", method="play_TOD19(bytes32 guess)", type_label=function_definition];
2081 [label="345_ if\n2081-if-346-348", method="play_TOD19(bytes32 guess)", type_label=if];
6352 [label="345_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
2103 [label="346_ winner_TOD19 = msg.sender;\n2103-expression_statement-347-347", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
2109 [label="349_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n2109-function_definition-350-352", method="getReward_TOD19()", type_label=function_definition];
2114 [label="350_ winner_TOD19.transfer(msg.value);\n2114-expression_statement-351-351", method="getReward_TOD19()", type_label=expression_statement];
2123 [label="352_ function availableTradingFeeOwner() public view returns(uint256){\n      return tokens[address(0)][feeAccount];\n  }\n2123-function_definition-353-355", method="availableTradingFeeOwner()", type_label=function_definition];
2132 [label="353_ return tokens[address(0)][feeAccount];\n2132-return-354-354", method="availableTradingFeeOwner()", type_label=return];
2140 [label="355_ bool claimed_TOD26 = false;\n2140-new_variable-356-356", method="", type_label=new_variable];
2146 [label="356_ address payable owner_TOD26;\n2146-new_variable-357-357", method="", type_label=new_variable];
2150 [label="357_ uint256 reward_TOD26;\n2150-new_variable-358-358", method="", type_label=new_variable];
2154 [label="358_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n2154-function_definition-359-364", method="setReward_TOD26()", type_label=function_definition];
2159 [label="359_ require (!claimed_TOD26);\n2159-expression_statement-360-360", method="setReward_TOD26()", type_label=expression_statement];
2165 [label="360_ require(msg.sender == owner_TOD26);\n2165-expression_statement-361-361", method="setReward_TOD26()", type_label=expression_statement];
2174 [label="361_ owner_TOD26.transfer(reward_TOD26);\n2174-expression_statement-362-362", method="setReward_TOD26()", type_label=expression_statement];
2181 [label="362_ reward_TOD26 = msg.value;\n2181-expression_statement-363-363", method="setReward_TOD26()", type_label=expression_statement];
2187 [label="364_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n2187-function_definition-365-370", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
2195 [label="365_ require (!claimed_TOD26);\n2195-expression_statement-366-366", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2201 [label="366_ require(submission < 10);\n2201-expression_statement-367-367", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2208 [label="367_ msg.sender.transfer(reward_TOD26);\n2208-expression_statement-368-368", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2217 [label="368_ claimed_TOD26 = true;\n2217-expression_statement-369-369", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
2222 [label="370_ function withdrawTradingFeeOwner() public onlyOwner returns (string memory){\n      uint256 amount = availableTradingFeeOwner();\n      require (amount > 0, 'Nothing to withdraw');\n      tokens[address(0)][feeAccount] = 0;\n      msg.sender.transfer(amount);\n      emit OwnerWithdrawTradingFee(owner, amount);\n  }\n2222-function_definition-371-377", method="withdrawTradingFeeOwner()", type_label=function_definition];
2225 [label="370_ onlyOwner\n2225-expression_statement-371-371", method="withdrawTradingFeeOwner()", type_label=expression_statement];
2232 [label="371_ uint256 amount = availableTradingFeeOwner();\n2232-new_variable-372-372", method="withdrawTradingFeeOwner()", type_label=new_variable];
2239 [label="372_ require (amount > 0, 'Nothing to withdraw');\n2239-expression_statement-373-373", method="withdrawTradingFeeOwner()", type_label=expression_statement];
2249 [label="373_ tokens[address(0)][feeAccount] = 0;\n2249-expression_statement-374-374", method="withdrawTradingFeeOwner()", type_label=expression_statement];
2259 [label="374_ msg.sender.transfer(amount);\n2259-expression_statement-375-375", method="withdrawTradingFeeOwner()", type_label=expression_statement];
2274 [label="377_ bool claimed_TOD20 = false;\n2274-new_variable-378-378", method="", type_label=new_variable];
2280 [label="378_ address payable owner_TOD20;\n2280-new_variable-379-379", method="", type_label=new_variable];
2284 [label="379_ uint256 reward_TOD20;\n2284-new_variable-380-380", method="", type_label=new_variable];
2288 [label="380_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n2288-function_definition-381-386", method="setReward_TOD20()", type_label=function_definition];
2293 [label="381_ require (!claimed_TOD20);\n2293-expression_statement-382-382", method="setReward_TOD20()", type_label=expression_statement];
2299 [label="382_ require(msg.sender == owner_TOD20);\n2299-expression_statement-383-383", method="setReward_TOD20()", type_label=expression_statement];
2308 [label="383_ owner_TOD20.transfer(reward_TOD20);\n2308-expression_statement-384-384", method="setReward_TOD20()", type_label=expression_statement];
2315 [label="384_ reward_TOD20 = msg.value;\n2315-expression_statement-385-385", method="setReward_TOD20()", type_label=expression_statement];
2321 [label="386_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n2321-function_definition-387-392", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
2329 [label="387_ require (!claimed_TOD20);\n2329-expression_statement-388-388", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2335 [label="388_ require(submission < 10);\n2335-expression_statement-389-389", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2342 [label="389_ msg.sender.transfer(reward_TOD20);\n2342-expression_statement-390-390", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2351 [label="390_ claimed_TOD20 = true;\n2351-expression_statement-391-391", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
2356 [label="392_ function deposit() public payable {\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n    emit Deposit(now, address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\n  }\n2356-function_definition-393-396", method="deposit()", type_label=function_definition];
2361 [label="393_ tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n2361-expression_statement-394-394", method="deposit()", type_label=expression_statement];
2414 [label="396_ bool claimed_TOD32 = false;\n2414-new_variable-397-397", method="", type_label=new_variable];
2420 [label="397_ address payable owner_TOD32;\n2420-new_variable-398-398", method="", type_label=new_variable];
2424 [label="398_ uint256 reward_TOD32;\n2424-new_variable-399-399", method="", type_label=new_variable];
2428 [label="399_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n2428-function_definition-400-405", method="setReward_TOD32()", type_label=function_definition];
2433 [label="400_ require (!claimed_TOD32);\n2433-expression_statement-401-401", method="setReward_TOD32()", type_label=expression_statement];
2439 [label="401_ require(msg.sender == owner_TOD32);\n2439-expression_statement-402-402", method="setReward_TOD32()", type_label=expression_statement];
2448 [label="402_ owner_TOD32.transfer(reward_TOD32);\n2448-expression_statement-403-403", method="setReward_TOD32()", type_label=expression_statement];
2455 [label="403_ reward_TOD32 = msg.value;\n2455-expression_statement-404-404", method="setReward_TOD32()", type_label=expression_statement];
2461 [label="405_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n2461-function_definition-406-411", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
2469 [label="406_ require (!claimed_TOD32);\n2469-expression_statement-407-407", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2475 [label="407_ require(submission < 10);\n2475-expression_statement-408-408", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2482 [label="408_ msg.sender.transfer(reward_TOD32);\n2482-expression_statement-409-409", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2491 [label="409_ claimed_TOD32 = true;\n2491-expression_statement-410-410", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2496 [label="411_ function withdraw(uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    require(tokens[address(0)][msg.sender] >= amount);\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n    msg.sender.transfer(amount);\n    emit Withdraw(now, address(0), msg.sender, amount, tokens[address(0)][msg.sender]);\n  }\n2496-function_definition-412-418", method="withdraw(uint amount)", type_label=function_definition];
2504 [label="412_ require(!safeGuard,\"System Paused by Admin\");\n2504-expression_statement-413-413", method="withdraw(uint amount)", type_label=expression_statement];
2513 [label="413_ require(tokens[address(0)][msg.sender] >= amount);\n2513-expression_statement-414-414", method="withdraw(uint amount)", type_label=expression_statement];
2528 [label="414_ tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n2528-expression_statement-415-415", method="withdraw(uint amount)", type_label=expression_statement];
2553 [label="415_ msg.sender.transfer(amount);\n2553-expression_statement-416-416", method="withdraw(uint amount)", type_label=expression_statement];
2586 [label="418_ bool claimed_TOD38 = false;\n2586-new_variable-419-419", method="", type_label=new_variable];
2592 [label="419_ address payable owner_TOD38;\n2592-new_variable-420-420", method="", type_label=new_variable];
2596 [label="420_ uint256 reward_TOD38;\n2596-new_variable-421-421", method="", type_label=new_variable];
2600 [label="421_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n2600-function_definition-422-427", method="setReward_TOD38()", type_label=function_definition];
2605 [label="422_ require (!claimed_TOD38);\n2605-expression_statement-423-423", method="setReward_TOD38()", type_label=expression_statement];
2611 [label="423_ require(msg.sender == owner_TOD38);\n2611-expression_statement-424-424", method="setReward_TOD38()", type_label=expression_statement];
2620 [label="424_ owner_TOD38.transfer(reward_TOD38);\n2620-expression_statement-425-425", method="setReward_TOD38()", type_label=expression_statement];
2627 [label="425_ reward_TOD38 = msg.value;\n2627-expression_statement-426-426", method="setReward_TOD38()", type_label=expression_statement];
2633 [label="427_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n2633-function_definition-428-433", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
2641 [label="428_ require (!claimed_TOD38);\n2641-expression_statement-429-429", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2647 [label="429_ require(submission < 10);\n2647-expression_statement-430-430", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2654 [label="430_ msg.sender.transfer(reward_TOD38);\n2654-expression_statement-431-431", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2663 [label="431_ claimed_TOD38 = true;\n2663-expression_statement-432-432", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2668 [label="433_ function depositToken(address token, uint amount) public {\n    require(token!=address(0));\n    require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n    tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n    emit Deposit(now, token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n2668-function_definition-434-439", method="depositToken(address token,uint amount)", type_label=function_definition];
2680 [label="434_ require(token!=address(0));\n2680-expression_statement-435-435", method="depositToken(address token,uint amount)", type_label=expression_statement];
2689 [label="435_ require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n2689-expression_statement-436-436", method="depositToken(address token,uint amount)", type_label=expression_statement];
2710 [label="436_ tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n2710-expression_statement-437-437", method="depositToken(address token,uint amount)", type_label=expression_statement];
2751 [label="439_ bool claimed_TOD4 = false;\n2751-new_variable-440-440", method="", type_label=new_variable];
2757 [label="440_ address payable owner_TOD4;\n2757-new_variable-441-441", method="", type_label=new_variable];
2761 [label="441_ uint256 reward_TOD4;\n2761-new_variable-442-442", method="", type_label=new_variable];
2765 [label="442_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n2765-function_definition-443-448", method="setReward_TOD4()", type_label=function_definition];
2770 [label="443_ require (!claimed_TOD4);\n2770-expression_statement-444-444", method="setReward_TOD4()", type_label=expression_statement];
2776 [label="444_ require(msg.sender == owner_TOD4);\n2776-expression_statement-445-445", method="setReward_TOD4()", type_label=expression_statement];
2785 [label="445_ owner_TOD4.transfer(reward_TOD4);\n2785-expression_statement-446-446", method="setReward_TOD4()", type_label=expression_statement];
2792 [label="446_ reward_TOD4 = msg.value;\n2792-expression_statement-447-447", method="setReward_TOD4()", type_label=expression_statement];
2798 [label="448_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n2798-function_definition-449-454", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
2806 [label="449_ require (!claimed_TOD4);\n2806-expression_statement-450-450", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2812 [label="450_ require(submission < 10);\n2812-expression_statement-451-451", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2819 [label="451_ msg.sender.transfer(reward_TOD4);\n2819-expression_statement-452-452", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2828 [label="452_ claimed_TOD4 = true;\n2828-expression_statement-453-453", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2833 [label="454_ function withdrawToken(address token, uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    require(token!=address(0));\n    require(tokens[token][msg.sender] >= amount);\n    tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n	  ERC20Essential(token).transfer(msg.sender, amount);\n    emit Withdraw(now, token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n2833-function_definition-455-462", method="withdrawToken(address token,uint amount)", type_label=function_definition];
2845 [label="455_ require(!safeGuard,\"System Paused by Admin\");\n2845-expression_statement-456-456", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
2854 [label="456_ require(token!=address(0));\n2854-expression_statement-457-457", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
2863 [label="457_ require(tokens[token][msg.sender] >= amount);\n2863-expression_statement-458-458", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
2876 [label="458_ tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n2876-expression_statement-459-459", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
2897 [label="459_ ERC20Essential(token).transfer(msg.sender, amount);\n2897-expression_statement-460-460", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
2931 [label="462_ address payable winner_TOD7;\n2931-new_variable-463-463", method="", type_label=new_variable];
2935 [label="463_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n2935-function_definition-464-468", method="play_TOD7(bytes32 guess)", type_label=function_definition];
2943 [label="464_ if\n2943-if-465-467", method="play_TOD7(bytes32 guess)", type_label=if];
7214 [label="464_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
2965 [label="465_ winner_TOD7 = msg.sender;\n2965-expression_statement-466-466", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
2971 [label="468_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n2971-function_definition-469-471", method="getReward_TOD7()", type_label=function_definition];
2976 [label="469_ winner_TOD7.transfer(msg.value);\n2976-expression_statement-470-470", method="getReward_TOD7()", type_label=expression_statement];
2985 [label="471_ function balanceOf(address token, address user) public view returns (uint) {\n    return tokens[token][user];\n  }\n2985-function_definition-472-474", method="balanceOf(address token,address user)", type_label=function_definition];
3002 [label="472_ return tokens[token][user];\n3002-return-473-473", method="balanceOf(address token,address user)", type_label=return];
3008 [label="474_ address payable winner_TOD23;\n3008-new_variable-475-475", method="", type_label=new_variable];
3012 [label="475_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n3012-function_definition-476-480", method="play_TOD23(bytes32 guess)", type_label=function_definition];
3020 [label="476_ if\n3020-if-477-479", method="play_TOD23(bytes32 guess)", type_label=if];
7291 [label="476_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
3042 [label="477_ winner_TOD23 = msg.sender;\n3042-expression_statement-478-478", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
3048 [label="480_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n3048-function_definition-481-483", method="getReward_TOD23()", type_label=function_definition];
3053 [label="481_ winner_TOD23.transfer(msg.value);\n3053-expression_statement-482-482", method="getReward_TOD23()", type_label=expression_statement];
3062 [label="483_ function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    orders[msg.sender][hash] = true;\n    emit Order(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\n  }\n3062-function_definition-484-488", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=function_definition];
3090 [label="484_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n3090-new_variable-485-485", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=new_variable];
3116 [label="485_ orders[msg.sender][hash] = true;\n3116-expression_statement-486-486", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=expression_statement];
3147 [label="488_ bool claimed_TOD14 = false;\n3147-new_variable-489-489", method="", type_label=new_variable];
3153 [label="489_ address payable owner_TOD14;\n3153-new_variable-490-490", method="", type_label=new_variable];
3157 [label="490_ uint256 reward_TOD14;\n3157-new_variable-491-491", method="", type_label=new_variable];
3161 [label="491_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n3161-function_definition-492-497", method="setReward_TOD14()", type_label=function_definition];
3166 [label="492_ require (!claimed_TOD14);\n3166-expression_statement-493-493", method="setReward_TOD14()", type_label=expression_statement];
3172 [label="493_ require(msg.sender == owner_TOD14);\n3172-expression_statement-494-494", method="setReward_TOD14()", type_label=expression_statement];
3181 [label="494_ owner_TOD14.transfer(reward_TOD14);\n3181-expression_statement-495-495", method="setReward_TOD14()", type_label=expression_statement];
3188 [label="495_ reward_TOD14 = msg.value;\n3188-expression_statement-496-496", method="setReward_TOD14()", type_label=expression_statement];
3194 [label="497_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n3194-function_definition-498-503", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
3202 [label="498_ require (!claimed_TOD14);\n3202-expression_statement-499-499", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3208 [label="499_ require(submission < 10);\n3208-expression_statement-500-500", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3215 [label="500_ msg.sender.transfer(reward_TOD14);\n3215-expression_statement-501-501", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3224 [label="501_ claimed_TOD14 = true;\n3224-expression_statement-502-502", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3229 [label="503_ function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    require((\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n    orderFills[user][hash] = orderFills[user][hash].add(amount);\n    emit Trade(now, tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);\n  }\n3229-function_definition-504-515", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=function_definition];
3277 [label="504_ require(!safeGuard,\"System Paused by Admin\");\n3277-expression_statement-505-505", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
3286 [label="505_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n3286-new_variable-506-506", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=new_variable];
3312 [label="506_ require((\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n3312-expression_statement-507-511", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
3366 [label="511_ tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n3366-expression_statement-512-512", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
3381 [label="512_ orderFills[user][hash] = orderFills[user][hash].add(amount);\n3381-expression_statement-513-513", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
3420 [label="515_ function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) internal {\n    uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n    tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n    tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n    tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n    tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n    tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n  }\n3420-function_definition-516-523", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=function_definition];
3448 [label="516_ uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n3448-new_variable-517-517", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=new_variable];
3459 [label="517_ tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n3459-expression_statement-518-518", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
3485 [label="518_ tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n3485-expression_statement-519-519", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
3507 [label="519_ tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n3507-expression_statement-520-520", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
3528 [label="520_ tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n3528-expression_statement-521-521", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
3552 [label="521_ tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n3552-expression_statement-522-522", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
3580 [label="523_ bool claimed_TOD30 = false;\n3580-new_variable-524-524", method="", type_label=new_variable];
3586 [label="524_ address payable owner_TOD30;\n3586-new_variable-525-525", method="", type_label=new_variable];
3590 [label="525_ uint256 reward_TOD30;\n3590-new_variable-526-526", method="", type_label=new_variable];
3594 [label="526_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n3594-function_definition-527-532", method="setReward_TOD30()", type_label=function_definition];
3599 [label="527_ require (!claimed_TOD30);\n3599-expression_statement-528-528", method="setReward_TOD30()", type_label=expression_statement];
3605 [label="528_ require(msg.sender == owner_TOD30);\n3605-expression_statement-529-529", method="setReward_TOD30()", type_label=expression_statement];
3614 [label="529_ owner_TOD30.transfer(reward_TOD30);\n3614-expression_statement-530-530", method="setReward_TOD30()", type_label=expression_statement];
3621 [label="530_ reward_TOD30 = msg.value;\n3621-expression_statement-531-531", method="setReward_TOD30()", type_label=expression_statement];
3627 [label="532_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n3627-function_definition-533-538", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
3635 [label="533_ require (!claimed_TOD30);\n3635-expression_statement-534-534", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3641 [label="534_ require(submission < 10);\n3641-expression_statement-535-535", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3648 [label="535_ msg.sender.transfer(reward_TOD30);\n3648-expression_statement-536-536", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3657 [label="536_ claimed_TOD30 = true;\n3657-expression_statement-537-537", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3662 [label="538_ function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public view returns(bool) {\n    if (!(\n      tokens[tokenGet][sender] >= amount &&\n      availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount\n    )) return false;\n    return true;\n  }\n3662-function_definition-539-545", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=function_definition];
3719 [label="539_ if\n3719-if-540-543", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=if];
7990 [label="539_ end_if", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=end_if];
3754 [label="542_ return false;\n3754-return-543-543", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=return];
3757 [label="543_ return true;\n3757-return-544-544", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=return];
3760 [label="545_ bool claimed_TOD8 = false;\n3760-new_variable-546-546", method="", type_label=new_variable];
3766 [label="546_ address payable owner_TOD8;\n3766-new_variable-547-547", method="", type_label=new_variable];
3770 [label="547_ uint256 reward_TOD8;\n3770-new_variable-548-548", method="", type_label=new_variable];
3774 [label="548_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n3774-function_definition-549-554", method="setReward_TOD8()", type_label=function_definition];
3779 [label="549_ require (!claimed_TOD8);\n3779-expression_statement-550-550", method="setReward_TOD8()", type_label=expression_statement];
3785 [label="550_ require(msg.sender == owner_TOD8);\n3785-expression_statement-551-551", method="setReward_TOD8()", type_label=expression_statement];
3794 [label="551_ owner_TOD8.transfer(reward_TOD8);\n3794-expression_statement-552-552", method="setReward_TOD8()", type_label=expression_statement];
3801 [label="552_ reward_TOD8 = msg.value;\n3801-expression_statement-553-553", method="setReward_TOD8()", type_label=expression_statement];
3807 [label="554_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n3807-function_definition-555-560", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
3815 [label="555_ require (!claimed_TOD8);\n3815-expression_statement-556-556", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3821 [label="556_ require(submission < 10);\n3821-expression_statement-557-557", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3828 [label="557_ msg.sender.transfer(reward_TOD8);\n3828-expression_statement-558-558", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3837 [label="558_ claimed_TOD8 = true;\n3837-expression_statement-559-559", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3842 [label="560_ function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    uint available1;\n    if (!(\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires\n    )) return 0;\n    available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\n    if (amountGet.sub(orderFills[user][hash])<available1) return amountGet.sub(orderFills[user][hash]);\n    return available1;\n  }\n3842-function_definition-561-571", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
3891 [label="561_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n3891-new_variable-562-562", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
3917 [label="562_ uint available1;\n3917-new_variable-563-563", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
3922 [label="563_ if\n3922-if-564-567", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=if];
8193 [label="563_ end_if", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
3961 [label="566_ return 0;\n3961-return-567-567", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
3963 [label="567_ available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\n3963-expression_statement-568-568", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
3978 [label="568_ if_amountGet.sub(orderFills[user][hash])<available1\n3978-if-569-569", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=if];
8249 [label="568_ end_if", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
3991 [label="568_ return amountGet.sub(orderFills[user][hash]);\n3991-return-569-569", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
4002 [label="569_ return available1;\n4002-return-570-570", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
4004 [label="571_ function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user) public view returns(uint) {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    return orderFills[user][hash];\n  }\n4004-function_definition-572-575", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=function_definition];
4041 [label="572_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n4041-new_variable-573-573", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=new_variable];
4067 [label="573_ return orderFills[user][hash];\n4067-return-574-574", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=return];
4073 [label="575_ address payable winner_TOD39;\n4073-new_variable-576-576", method="", type_label=new_variable];
4077 [label="576_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n4077-function_definition-577-581", method="play_TOD39(bytes32 guess)", type_label=function_definition];
4085 [label="577_ if\n4085-if-578-580", method="play_TOD39(bytes32 guess)", type_label=if];
8356 [label="577_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
4107 [label="578_ winner_TOD39 = msg.sender;\n4107-expression_statement-579-579", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
4113 [label="581_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n4113-function_definition-582-584", method="getReward_TOD39()", type_label=function_definition];
4118 [label="582_ winner_TOD39.transfer(msg.value);\n4118-expression_statement-583-583", method="getReward_TOD39()", type_label=expression_statement];
4127 [label="584_ function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == msg.sender));\n    orderFills[msg.sender][hash] = amountGet;\n    emit Cancel(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n  }\n4127-function_definition-585-591", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
4167 [label="585_ require(!safeGuard,\"System Paused by Admin\");\n4167-expression_statement-586-586", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
4176 [label="586_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n4176-new_variable-587-587", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
4202 [label="587_ require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == msg.sender));\n4202-expression_statement-588-588", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
4240 [label="588_ orderFills[msg.sender][hash] = amountGet;\n4240-expression_statement-589-589", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
87 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 4375  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4375 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 4375  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
208 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 238  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
216 -> 4487  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4487 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 4487  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
244 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
258 -> 263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
297 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 488  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
466 -> 4737  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4737 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 4737  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
494 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
542 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
591 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 683  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
661 -> 4932  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4932 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
683 -> 4932  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
689 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
751 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
785 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
798 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
842 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 872  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
850 -> 5121  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5121 -> 878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
872 -> 5121  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
878 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
892 -> 897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
903 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
916 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
931 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
958 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
991 -> 995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1010 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1032 -> 1040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1040 -> 1046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1046 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1082 -> 1086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1095 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1123 -> 1131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1131 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1171 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1201  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1179 -> 5450  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5450 -> 1207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 5450  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1207 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1221 -> 1230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1234 -> 1242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1242 -> 1264  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1242 -> 5513  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5513 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1264 -> 5513  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1270 -> 1275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1318 -> 1324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1324 -> 1328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 1337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1337 -> 1343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1343 -> 1352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1352 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1365 -> 1373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1373 -> 1379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1379 -> 1386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1386 -> 1395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 1458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1458 -> 1480  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1458 -> 5729  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5729 -> 1486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1480 -> 5729  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1486 -> 1491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1534 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 1564  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1542 -> 5813  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5813 -> 1570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1564 -> 5813  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1570 -> 1575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1610 -> 1618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1618 -> 1640  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1618 -> 5889  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5889 -> 1646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 5889  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1646 -> 1651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 1694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1694 -> 1716  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1694 -> 5965  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5965 -> 1722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1716 -> 5965  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1722 -> 1727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1758 -> 1766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1766 -> 1788  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1766 -> 6037  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6037 -> 1794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1788 -> 6037  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1794 -> 1799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1808 -> 1814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1814 -> 1820  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1814 -> 1826  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6085 -> 1831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1820 -> 6085  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1826 -> 6085  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1835 -> 1843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1843 -> 1865  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1843 -> 6114  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6114 -> 1871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1865 -> 6114  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1871 -> 1876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1885 -> 1902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1902 -> 1908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1908 -> 1915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1915 -> 1931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1931 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1937 -> 1945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1945 -> 1967  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1945 -> 6216  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6216 -> 1973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1967 -> 6216  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1973 -> 1978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1987 -> 1997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2005 -> 2013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2013 -> 2035  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2013 -> 6284  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6284 -> 2041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2035 -> 6284  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2041 -> 2046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2055 -> 2065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2073 -> 2081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2081 -> 2103  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2081 -> 6352  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6352 -> 2109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2103 -> 6352  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2109 -> 2114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2123 -> 2132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2132 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2140 -> 2146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2146 -> 2150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2154 -> 2159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2159 -> 2165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2165 -> 2174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2174 -> 2181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2187 -> 2195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2195 -> 2201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2201 -> 2208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2208 -> 2217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2222 -> 2232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2232 -> 2239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2239 -> 2249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2249 -> 2259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2274 -> 2280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2280 -> 2284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2288 -> 2293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2293 -> 2299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2299 -> 2308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2308 -> 2315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2321 -> 2329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2329 -> 2335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2335 -> 2342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2342 -> 2351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2356 -> 2361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2414 -> 2420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2420 -> 2424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2428 -> 2433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2433 -> 2439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2439 -> 2448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2448 -> 2455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2461 -> 2469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2469 -> 2475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2475 -> 2482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2482 -> 2491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2496 -> 2504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2504 -> 2513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2513 -> 2528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2528 -> 2553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2586 -> 2592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2592 -> 2596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2600 -> 2605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2605 -> 2611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2611 -> 2620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2620 -> 2627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2633 -> 2641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2641 -> 2647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2647 -> 2654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2654 -> 2663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2668 -> 2680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2680 -> 2689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2689 -> 2710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2751 -> 2757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2757 -> 2761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2765 -> 2770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2770 -> 2776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2776 -> 2785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2785 -> 2792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2798 -> 2806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2806 -> 2812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2812 -> 2819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2819 -> 2828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2833 -> 2845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2845 -> 2854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2854 -> 2863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2863 -> 2876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2876 -> 2897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2935 -> 2943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2943 -> 2965  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2943 -> 7214  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7214 -> 2971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2965 -> 7214  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2971 -> 2976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2985 -> 3002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3002 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3012 -> 3020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3020 -> 3042  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3020 -> 7291  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7291 -> 3048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3042 -> 7291  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3048 -> 3053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3062 -> 3090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3090 -> 3116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3147 -> 3153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3153 -> 3157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3161 -> 3166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3166 -> 3172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3172 -> 3181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3181 -> 3188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3194 -> 3202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3202 -> 3208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3208 -> 3215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3215 -> 3224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3229 -> 3277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3277 -> 3286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3286 -> 3312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3312 -> 3366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3366 -> 3381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3420 -> 3448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3448 -> 3459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3459 -> 3485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3485 -> 3507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3507 -> 3528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3528 -> 3552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3580 -> 3586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3586 -> 3590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3594 -> 3599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3599 -> 3605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3605 -> 3614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3614 -> 3621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3627 -> 3635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3635 -> 3641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3641 -> 3648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3648 -> 3657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3662 -> 3719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3719 -> 3754  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3719 -> 7990  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7990 -> 3757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3754 -> 7990  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3754 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3757 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3760 -> 3766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3766 -> 3770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3774 -> 3779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3779 -> 3785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3785 -> 3794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3794 -> 3801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3807 -> 3815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3815 -> 3821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3821 -> 3828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3828 -> 3837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3842 -> 3891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3891 -> 3917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3917 -> 3922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3922 -> 3961  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3922 -> 8193  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8193 -> 3963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3961 -> 8193  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3961 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3963 -> 3978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3978 -> 3991  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3978 -> 8249  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8249 -> 4002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3991 -> 8249  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3991 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4002 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4004 -> 4041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4041 -> 4067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4067 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4077 -> 4085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4085 -> 4107  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4085 -> 8356  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8356 -> 4113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4107 -> 8356  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4113 -> 4118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4127 -> 4167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4167 -> 4176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4176 -> 4202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4202 -> 4240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
