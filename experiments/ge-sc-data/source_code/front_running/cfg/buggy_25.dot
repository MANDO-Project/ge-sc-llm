digraph  {
13 [label="2_ address payable winner_TOD9;\n13-new_variable-3-3", method="", type_label=new_variable];
17 [label="3_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n17-function_definition-4-8", method="play_TOD9(bytes32 guess)", type_label=function_definition];
25 [label="4_ if\n25-if-5-7", method="play_TOD9(bytes32 guess)", type_label=if];
2580 [label="4_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
47 [label="5_ winner_TOD9 = msg.sender;\n47-expression_statement-6-6", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
53 [label="8_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n53-function_definition-9-11", method="getReward_TOD9()", type_label=function_definition];
58 [label="9_ winner_TOD9.transfer(msg.value);\n58-expression_statement-10-10", method="getReward_TOD9()", type_label=expression_statement];
67 [label="11_ address payable public owner;\n67-new_variable-12-12", method="", type_label=new_variable];
72 [label="12_ struct GameInfo {\n    uint256 timestamp;\n    uint32 odd_homeTeam;\n    uint32 odd_drawTeam; \n    uint32 odd_awayTeam;\n    uint32 odd_over;\n    uint32 odd_under;\n    uint32 odd_homeTeamAndDraw;\n    uint32 odd_homeAndAwayTeam;\n    uint32 odd_awayTeamAndDraw;\n    uint8  open_status;\n    bool   isDone;\n  }\n72-expression_statement-13-25", method="GameInfo()", type_label=expression_statement];
118 [label="25_ address payable winner_TOD25;\n118-new_variable-26-26", method="", type_label=new_variable];
122 [label="26_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n122-function_definition-27-31", method="play_TOD25(bytes32 guess)", type_label=function_definition];
130 [label="27_ if\n130-if-28-30", method="play_TOD25(bytes32 guess)", type_label=if];
2685 [label="27_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
152 [label="28_ winner_TOD25 = msg.sender;\n152-expression_statement-29-29", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
158 [label="31_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n158-function_definition-32-34", method="getReward_TOD25()", type_label=function_definition];
163 [label="32_ winner_TOD25.transfer(msg.value);\n163-expression_statement-33-33", method="getReward_TOD25()", type_label=expression_statement];
172 [label="34_ mapping(uint64 => GameInfo) public gameList;\n172-new_variable-35-35", method="", type_label=new_variable];
180 [label="35_ struct BetFixture {\n    address payable player;\n    uint256 stake;\n    uint32  odd;\n    uint16  selectedTeam;\n  }\n180-expression_statement-36-41", method="BetFixture()", type_label=expression_statement];
198 [label="41_ address payable winner_TOD19;\n198-new_variable-42-42", method="", type_label=new_variable];
202 [label="42_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n202-function_definition-43-47", method="play_TOD19(bytes32 guess)", type_label=function_definition];
210 [label="43_ if\n210-if-44-46", method="play_TOD19(bytes32 guess)", type_label=if];
2765 [label="43_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
232 [label="44_ winner_TOD19 = msg.sender;\n232-expression_statement-45-45", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
238 [label="47_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n238-function_definition-48-50", method="getReward_TOD19()", type_label=function_definition];
243 [label="48_ winner_TOD19.transfer(msg.value);\n243-expression_statement-49-49", method="getReward_TOD19()", type_label=expression_statement];
252 [label="50_ mapping(uint64 => BetFixture[]) public betList;\n252-new_variable-51-51", method="", type_label=new_variable];
261 [label="51_ bool claimed_TOD36 = false;\n261-new_variable-52-52", method="", type_label=new_variable];
267 [label="52_ address payable owner_TOD36;\n267-new_variable-53-53", method="", type_label=new_variable];
271 [label="53_ uint256 reward_TOD36;\n271-new_variable-54-54", method="", type_label=new_variable];
275 [label="54_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n275-function_definition-55-60", method="setReward_TOD36()", type_label=function_definition];
280 [label="55_ require (!claimed_TOD36);\n280-expression_statement-56-56", method="setReward_TOD36()", type_label=expression_statement];
286 [label="56_ require(msg.sender == owner_TOD36);\n286-expression_statement-57-57", method="setReward_TOD36()", type_label=expression_statement];
295 [label="57_ owner_TOD36.transfer(reward_TOD36);\n295-expression_statement-58-58", method="setReward_TOD36()", type_label=expression_statement];
302 [label="58_ reward_TOD36 = msg.value;\n302-expression_statement-59-59", method="setReward_TOD36()", type_label=expression_statement];
308 [label="60_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n308-function_definition-61-66", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
316 [label="61_ require (!claimed_TOD36);\n316-expression_statement-62-62", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
322 [label="62_ require(submission < 10);\n322-expression_statement-63-63", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
329 [label="63_ msg.sender.transfer(reward_TOD36);\n329-expression_statement-64-64", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
338 [label="64_ claimed_TOD36 = true;\n338-expression_statement-65-65", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
349 [label="67_ address payable winner_TOD35;\n349-new_variable-68-68", method="", type_label=new_variable];
353 [label="68_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n353-function_definition-69-73", method="play_TOD35(bytes32 guess)", type_label=function_definition];
361 [label="69_ if\n361-if-70-72", method="play_TOD35(bytes32 guess)", type_label=if];
2916 [label="69_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
383 [label="70_ winner_TOD35 = msg.sender;\n383-expression_statement-71-71", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
389 [label="73_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n389-function_definition-74-76", method="getReward_TOD35()", type_label=function_definition];
394 [label="74_ winner_TOD35.transfer(msg.value);\n394-expression_statement-75-75", method="getReward_TOD35()", type_label=expression_statement];
413 [label="77_ bool claimed_TOD40 = false;\n413-new_variable-78-78", method="", type_label=new_variable];
419 [label="78_ address payable owner_TOD40;\n419-new_variable-79-79", method="", type_label=new_variable];
423 [label="79_ uint256 reward_TOD40;\n423-new_variable-80-80", method="", type_label=new_variable];
427 [label="80_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n427-function_definition-81-86", method="setReward_TOD40()", type_label=function_definition];
432 [label="81_ require (!claimed_TOD40);\n432-expression_statement-82-82", method="setReward_TOD40()", type_label=expression_statement];
438 [label="82_ require(msg.sender == owner_TOD40);\n438-expression_statement-83-83", method="setReward_TOD40()", type_label=expression_statement];
447 [label="83_ owner_TOD40.transfer(reward_TOD40);\n447-expression_statement-84-84", method="setReward_TOD40()", type_label=expression_statement];
454 [label="84_ reward_TOD40 = msg.value;\n454-expression_statement-85-85", method="setReward_TOD40()", type_label=expression_statement];
460 [label="86_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n460-function_definition-87-92", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
468 [label="87_ require (!claimed_TOD40);\n468-expression_statement-88-88", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
474 [label="88_ require(submission < 10);\n474-expression_statement-89-89", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
481 [label="89_ msg.sender.transfer(reward_TOD40);\n481-expression_statement-90-90", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
490 [label="90_ claimed_TOD40 = true;\n490-expression_statement-91-91", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
505 [label="93_ address payable winner_TOD33;\n505-new_variable-94-94", method="", type_label=new_variable];
509 [label="94_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n509-function_definition-95-99", method="play_TOD33(bytes32 guess)", type_label=function_definition];
517 [label="95_ if\n517-if-96-98", method="play_TOD33(bytes32 guess)", type_label=if];
3072 [label="95_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
539 [label="96_ winner_TOD33 = msg.sender;\n539-expression_statement-97-97", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
545 [label="99_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n545-function_definition-100-102", method="getReward_TOD33()", type_label=function_definition];
550 [label="100_ winner_TOD33.transfer(msg.value);\n550-expression_statement-101-101", method="getReward_TOD33()", type_label=expression_statement];
581 [label="103_ address payable winner_TOD27;\n581-new_variable-104-104", method="", type_label=new_variable];
585 [label="104_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n585-function_definition-105-109", method="play_TOD27(bytes32 guess)", type_label=function_definition];
593 [label="105_ if\n593-if-106-108", method="play_TOD27(bytes32 guess)", type_label=if];
3148 [label="105_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
615 [label="106_ winner_TOD27 = msg.sender;\n615-expression_statement-107-107", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
621 [label="109_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n621-function_definition-110-112", method="getReward_TOD27()", type_label=function_definition];
626 [label="110_ winner_TOD27.transfer(msg.value);\n626-expression_statement-111-111", method="getReward_TOD27()", type_label=expression_statement];
681 [label="113_ address payable winner_TOD31;\n681-new_variable-114-114", method="", type_label=new_variable];
685 [label="114_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n685-function_definition-115-119", method="play_TOD31(bytes32 guess)", type_label=function_definition];
693 [label="115_ if\n693-if-116-118", method="play_TOD31(bytes32 guess)", type_label=if];
3248 [label="115_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
715 [label="116_ winner_TOD31 = msg.sender;\n715-expression_statement-117-117", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
721 [label="119_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n721-function_definition-120-122", method="getReward_TOD31()", type_label=function_definition];
726 [label="120_ winner_TOD31.transfer(msg.value);\n726-expression_statement-121-121", method="getReward_TOD31()", type_label=expression_statement];
773 [label="123_ address payable winner_TOD13;\n773-new_variable-124-124", method="", type_label=new_variable];
777 [label="124_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n777-function_definition-125-129", method="play_TOD13(bytes32 guess)", type_label=function_definition];
785 [label="125_ if\n785-if-126-128", method="play_TOD13(bytes32 guess)", type_label=if];
3340 [label="125_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
807 [label="126_ winner_TOD13 = msg.sender;\n807-expression_statement-127-127", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
813 [label="129_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n813-function_definition-130-132", method="getReward_TOD13()", type_label=function_definition];
818 [label="130_ winner_TOD13.transfer(msg.value);\n818-expression_statement-131-131", method="getReward_TOD13()", type_label=expression_statement];
843 [label="134_ owner   = msg.sender;\n843-expression_statement-135-135", method="", type_label=expression_statement];
849 [label="136_ bool claimed_TOD26 = false;\n849-new_variable-137-137", method="", type_label=new_variable];
855 [label="137_ address payable owner_TOD26;\n855-new_variable-138-138", method="", type_label=new_variable];
859 [label="138_ uint256 reward_TOD26;\n859-new_variable-139-139", method="", type_label=new_variable];
863 [label="139_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n863-function_definition-140-145", method="setReward_TOD26()", type_label=function_definition];
868 [label="140_ require (!claimed_TOD26);\n868-expression_statement-141-141", method="setReward_TOD26()", type_label=expression_statement];
874 [label="141_ require(msg.sender == owner_TOD26);\n874-expression_statement-142-142", method="setReward_TOD26()", type_label=expression_statement];
883 [label="142_ owner_TOD26.transfer(reward_TOD26);\n883-expression_statement-143-143", method="setReward_TOD26()", type_label=expression_statement];
890 [label="143_ reward_TOD26 = msg.value;\n890-expression_statement-144-144", method="setReward_TOD26()", type_label=expression_statement];
896 [label="145_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n896-function_definition-146-151", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
904 [label="146_ require (!claimed_TOD26);\n904-expression_statement-147-147", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
910 [label="147_ require(submission < 10);\n910-expression_statement-148-148", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
917 [label="148_ msg.sender.transfer(reward_TOD26);\n917-expression_statement-149-149", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
926 [label="149_ claimed_TOD26 = true;\n926-expression_statement-150-150", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
931 [label="151_ function setOpenStatus(uint64 _fixtureId, uint8 _open_status) external onlyOwner {\n    gameList[_fixtureId].open_status = _open_status;\n  }\n931-function_definition-152-154", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=function_definition];
942 [label="151_ onlyOwner\n942-expression_statement-152-152", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=expression_statement];
945 [label="152_ gameList[_fixtureId].open_status = _open_status;\n945-expression_statement-153-153", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=expression_statement];
953 [label="154_ bool claimed_TOD20 = false;\n953-new_variable-155-155", method="", type_label=new_variable];
959 [label="155_ address payable owner_TOD20;\n959-new_variable-156-156", method="", type_label=new_variable];
963 [label="156_ uint256 reward_TOD20;\n963-new_variable-157-157", method="", type_label=new_variable];
967 [label="157_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n967-function_definition-158-163", method="setReward_TOD20()", type_label=function_definition];
972 [label="158_ require (!claimed_TOD20);\n972-expression_statement-159-159", method="setReward_TOD20()", type_label=expression_statement];
978 [label="159_ require(msg.sender == owner_TOD20);\n978-expression_statement-160-160", method="setReward_TOD20()", type_label=expression_statement];
987 [label="160_ owner_TOD20.transfer(reward_TOD20);\n987-expression_statement-161-161", method="setReward_TOD20()", type_label=expression_statement];
994 [label="161_ reward_TOD20 = msg.value;\n994-expression_statement-162-162", method="setReward_TOD20()", type_label=expression_statement];
1000 [label="163_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n1000-function_definition-164-169", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
1008 [label="164_ require (!claimed_TOD20);\n1008-expression_statement-165-165", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1014 [label="165_ require(submission < 10);\n1014-expression_statement-166-166", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1021 [label="166_ msg.sender.transfer(reward_TOD20);\n1021-expression_statement-167-167", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1030 [label="167_ claimed_TOD20 = true;\n1030-expression_statement-168-168", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1035 [label="169_ function changeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw ) external onlyOwner {\n    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n    gameList[_fixtureId].odd_over            = _odd_over;\n    gameList[_fixtureId].odd_under           = _odd_under;\n    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n    emit ChangeOdd (_fixtureId, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw);\n  }\n1035-function_definition-170-180", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=function_definition];
1074 [label="169_ onlyOwner\n1074-expression_statement-170-170", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
1077 [label="170_ gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n1077-expression_statement-171-171", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
1085 [label="171_ gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n1085-expression_statement-172-172", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
1093 [label="172_ gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n1093-expression_statement-173-173", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
1101 [label="173_ gameList[_fixtureId].odd_over            = _odd_over;\n1101-expression_statement-174-174", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
1109 [label="174_ gameList[_fixtureId].odd_under           = _odd_under;\n1109-expression_statement-175-175", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
1117 [label="175_ gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n1117-expression_statement-176-176", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
1125 [label="176_ gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n1125-expression_statement-177-177", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
1133 [label="177_ gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n1133-expression_statement-178-178", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
1161 [label="180_ bool claimed_TOD32 = false;\n1161-new_variable-181-181", method="", type_label=new_variable];
1167 [label="181_ address payable owner_TOD32;\n1167-new_variable-182-182", method="", type_label=new_variable];
1171 [label="182_ uint256 reward_TOD32;\n1171-new_variable-183-183", method="", type_label=new_variable];
1175 [label="183_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n1175-function_definition-184-189", method="setReward_TOD32()", type_label=function_definition];
1180 [label="184_ require (!claimed_TOD32);\n1180-expression_statement-185-185", method="setReward_TOD32()", type_label=expression_statement];
1186 [label="185_ require(msg.sender == owner_TOD32);\n1186-expression_statement-186-186", method="setReward_TOD32()", type_label=expression_statement];
1195 [label="186_ owner_TOD32.transfer(reward_TOD32);\n1195-expression_statement-187-187", method="setReward_TOD32()", type_label=expression_statement];
1202 [label="187_ reward_TOD32 = msg.value;\n1202-expression_statement-188-188", method="setReward_TOD32()", type_label=expression_statement];
1208 [label="189_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n1208-function_definition-190-195", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
1216 [label="190_ require (!claimed_TOD32);\n1216-expression_statement-191-191", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1222 [label="191_ require(submission < 10);\n1222-expression_statement-192-192", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1229 [label="192_ msg.sender.transfer(reward_TOD32);\n1229-expression_statement-193-193", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1238 [label="193_ claimed_TOD32 = true;\n1238-expression_statement-194-194", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1243 [label="195_ function setGameInfo (uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status ) external onlyOwner {\n    gameList[_fixtureId].timestamp           = _timestamp;\n    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n    gameList[_fixtureId].odd_over            = _odd_over;\n    gameList[_fixtureId].odd_under           = _odd_under;\n    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n    gameList[_fixtureId].open_status         = _open_status;\n    gameList[_fixtureId].isDone              = false;\n    emit SetGame(_fixtureId, _timestamp, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw, _open_status);\n  }\n1243-function_definition-196-209", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=function_definition];
1290 [label="195_ onlyOwner\n1290-expression_statement-196-196", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1293 [label="196_ gameList[_fixtureId].timestamp           = _timestamp;\n1293-expression_statement-197-197", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1301 [label="197_ gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n1301-expression_statement-198-198", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1309 [label="198_ gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n1309-expression_statement-199-199", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1317 [label="199_ gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n1317-expression_statement-200-200", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1325 [label="200_ gameList[_fixtureId].odd_over            = _odd_over;\n1325-expression_statement-201-201", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1333 [label="201_ gameList[_fixtureId].odd_under           = _odd_under;\n1333-expression_statement-202-202", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1341 [label="202_ gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n1341-expression_statement-203-203", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1349 [label="203_ gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n1349-expression_statement-204-204", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1357 [label="204_ gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n1357-expression_statement-205-205", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1365 [label="205_ gameList[_fixtureId].open_status         = _open_status;\n1365-expression_statement-206-206", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1373 [label="206_ gameList[_fixtureId].isDone              = false;\n1373-expression_statement-207-207", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
1406 [label="209_ bool claimed_TOD38 = false;\n1406-new_variable-210-210", method="", type_label=new_variable];
1412 [label="210_ address payable owner_TOD38;\n1412-new_variable-211-211", method="", type_label=new_variable];
1416 [label="211_ uint256 reward_TOD38;\n1416-new_variable-212-212", method="", type_label=new_variable];
1420 [label="212_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n1420-function_definition-213-218", method="setReward_TOD38()", type_label=function_definition];
1425 [label="213_ require (!claimed_TOD38);\n1425-expression_statement-214-214", method="setReward_TOD38()", type_label=expression_statement];
1431 [label="214_ require(msg.sender == owner_TOD38);\n1431-expression_statement-215-215", method="setReward_TOD38()", type_label=expression_statement];
1440 [label="215_ owner_TOD38.transfer(reward_TOD38);\n1440-expression_statement-216-216", method="setReward_TOD38()", type_label=expression_statement];
1447 [label="216_ reward_TOD38 = msg.value;\n1447-expression_statement-217-217", method="setReward_TOD38()", type_label=expression_statement];
1453 [label="218_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n1453-function_definition-219-224", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
1461 [label="219_ require (!claimed_TOD38);\n1461-expression_statement-220-220", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1467 [label="220_ require(submission < 10);\n1467-expression_statement-221-221", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1474 [label="221_ msg.sender.transfer(reward_TOD38);\n1474-expression_statement-222-222", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1483 [label="222_ claimed_TOD38 = true;\n1483-expression_statement-223-223", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1488 [label="224_ function placeBet(uint64 _fixtureId, uint16 _selectedTeam, uint32 _odd) external payable  {\n    uint stake = msg.value;\n    require(stake >= .001 ether);\n    require(_odd != 0 );\n    if (_selectedTeam == 1 ) {\n      require(gameList[_fixtureId].odd_homeTeam == _odd);\n    } else if ( _selectedTeam == 2) {\n      require(gameList[_fixtureId].odd_drawTeam == _odd);\n    } else if ( _selectedTeam == 3) {\n      require(gameList[_fixtureId].odd_awayTeam == _odd);\n    } else if ( _selectedTeam == 4) {\n      require(gameList[_fixtureId].odd_over == _odd);\n    } else if ( _selectedTeam == 5) {\n      require(gameList[_fixtureId].odd_under == _odd);\n    } else if ( _selectedTeam == 6) {\n      require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);\n    } else if ( _selectedTeam == 7) {\n      require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);\n    } else if ( _selectedTeam == 8) {\n      require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);\n    } else {\n      revert();\n    }\n    require(gameList[_fixtureId].open_status == 3);\n    require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );\n    betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));\n    emit NewStake(msg.sender, _fixtureId, _selectedTeam, stake, _odd );\n  }\n1488-function_definition-225-252", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=function_definition];
1505 [label="225_ uint stake = msg.value;\n1505-new_variable-226-226", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=new_variable];
1513 [label="226_ require(stake >= .001 ether);\n1513-expression_statement-227-227", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1521 [label="227_ require(_odd != 0 );\n1521-expression_statement-228-228", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1528 [label="228_ if__selectedTeam == 1\n1528-if-229-247", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
4083 [label="228_ end_if", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=end_if];
1533 [label="229_ require(gameList[_fixtureId].odd_homeTeam == _odd);\n1533-expression_statement-230-230", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1544 [label="230_ if__selectedTeam == 2\n1544-if-231-247", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1549 [label="231_ require(gameList[_fixtureId].odd_drawTeam == _odd);\n1549-expression_statement-232-232", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1560 [label="232_ if__selectedTeam == 3\n1560-if-233-247", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1565 [label="233_ require(gameList[_fixtureId].odd_awayTeam == _odd);\n1565-expression_statement-234-234", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1576 [label="234_ if__selectedTeam == 4\n1576-if-235-247", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1581 [label="235_ require(gameList[_fixtureId].odd_over == _odd);\n1581-expression_statement-236-236", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1592 [label="236_ if__selectedTeam == 5\n1592-if-237-247", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1597 [label="237_ require(gameList[_fixtureId].odd_under == _odd);\n1597-expression_statement-238-238", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1608 [label="238_ if__selectedTeam == 6\n1608-if-239-247", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1613 [label="239_ require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);\n1613-expression_statement-240-240", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1624 [label="240_ if__selectedTeam == 7\n1624-if-241-247", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1629 [label="241_ require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);\n1629-expression_statement-242-242", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1640 [label="242_ if__selectedTeam == 8\n1640-if-243-247", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1645 [label="243_ require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);\n1645-expression_statement-244-244", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1659 [label="247_ require(gameList[_fixtureId].open_status == 3);\n1659-expression_statement-248-248", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1670 [label="248_ require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );\n1670-expression_statement-249-249", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1685 [label="249_ betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));\n1685-expression_statement-250-250", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1719 [label="252_ bool claimed_TOD4 = false;\n1719-new_variable-253-253", method="", type_label=new_variable];
1725 [label="253_ address payable owner_TOD4;\n1725-new_variable-254-254", method="", type_label=new_variable];
1729 [label="254_ uint256 reward_TOD4;\n1729-new_variable-255-255", method="", type_label=new_variable];
1733 [label="255_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n1733-function_definition-256-261", method="setReward_TOD4()", type_label=function_definition];
1738 [label="256_ require (!claimed_TOD4);\n1738-expression_statement-257-257", method="setReward_TOD4()", type_label=expression_statement];
1744 [label="257_ require(msg.sender == owner_TOD4);\n1744-expression_statement-258-258", method="setReward_TOD4()", type_label=expression_statement];
1753 [label="258_ owner_TOD4.transfer(reward_TOD4);\n1753-expression_statement-259-259", method="setReward_TOD4()", type_label=expression_statement];
1760 [label="259_ reward_TOD4 = msg.value;\n1760-expression_statement-260-260", method="setReward_TOD4()", type_label=expression_statement];
1766 [label="261_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n1766-function_definition-262-267", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
1774 [label="262_ require (!claimed_TOD4);\n1774-expression_statement-263-263", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1780 [label="263_ require(submission < 10);\n1780-expression_statement-264-264", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1787 [label="264_ msg.sender.transfer(reward_TOD4);\n1787-expression_statement-265-265", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1796 [label="265_ claimed_TOD4 = true;\n1796-expression_statement-266-266", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1801 [label="267_ function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable {\n    require(gameList[_fixtureId].open_status == 3);\n    require(gameList[_fixtureId].isDone == false);\n    require(betList[_fixtureId][0].player != address(0) );\n    for (uint i= 0 ; i < betList[_fixtureId].length; i++){\n      uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;\n      uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;\n      if ( (selectedTeam == 1 && _homeDrawAway == 1) \n        || (selectedTeam == 2 && _homeDrawAway == 2) \n        || (selectedTeam == 3 && _homeDrawAway == 3) \n        || (selectedTeam == 4 && _overUnder == 1) \n        || (selectedTeam == 5 && _overUnder == 2) \n        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )\n        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )\n        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) ) \n        ){ \n        betList[_fixtureId][i].player.transfer(returnEth);\n      }\n    }\n    gameList[_fixtureId].open_status = 5;\n    gameList[_fixtureId].isDone = true;  \n    emit GivePrizeMoney( _fixtureId,  _homeDrawAway,  _overUnder);\n  }\n1801-function_definition-268-290", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=function_definition];
1816 [label="267_ onlyOwner\n1816-expression_statement-268-268", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1820 [label="268_ require(gameList[_fixtureId].open_status == 3);\n1820-expression_statement-269-269", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1831 [label="269_ require(gameList[_fixtureId].isDone == false);\n1831-expression_statement-270-270", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1843 [label="270_ require(betList[_fixtureId][0].player != address(0) );\n1843-expression_statement-271-271", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1858 [label="271_ for(i < betList[_fixtureId].length;;i++)\n1858-for-272-286", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=for];
4413 [label="271_ end_loop", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=end_loop];
1873 [label="271_ i++\n1873-expression_statement-272-272", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1876 [label="272_ uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;\n1876-new_variable-273-273", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=new_variable];
1888 [label="273_ uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;\n1888-new_variable-274-274", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=new_variable];
1911 [label="274_ if_(selectedTeam == 1 && _homeDrawAway == 1) \n        || (selectedTeam == 2 && _homeDrawAway == 2) \n        || (selectedTeam == 3 && _homeDrawAway == 3) \n        || (selectedTeam == 4 && _overUnder == 1) \n        || (selectedTeam == 5 && _overUnder == 2) \n        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )\n        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )\n        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) )\n1911-if-275-285", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=if];
4466 [label="274_ end_if", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=end_if];
1999 [label="283_ betList[_fixtureId][i].player.transfer(returnEth);\n1999-expression_statement-284-284", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
2012 [label="286_ gameList[_fixtureId].open_status = 5;\n2012-expression_statement-287-287", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
2020 [label="287_ gameList[_fixtureId].isDone = true;\n2020-expression_statement-288-288", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
2037 [label="290_ address payable winner_TOD7;\n2037-new_variable-291-291", method="", type_label=new_variable];
2041 [label="291_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n2041-function_definition-292-296", method="play_TOD7(bytes32 guess)", type_label=function_definition];
2049 [label="292_ if\n2049-if-293-295", method="play_TOD7(bytes32 guess)", type_label=if];
4604 [label="292_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
2071 [label="293_ winner_TOD7 = msg.sender;\n2071-expression_statement-294-294", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
2077 [label="296_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n2077-function_definition-297-299", method="getReward_TOD7()", type_label=function_definition];
2082 [label="297_ winner_TOD7.transfer(msg.value);\n2082-expression_statement-298-298", method="getReward_TOD7()", type_label=expression_statement];
2091 [label="299_ modifier onlyOwner {\n    require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n    _;\n  }\n2091-expression_statement-300-303", method="", type_label=expression_statement];
2094 [label="300_ require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n2094-expression_statement-301-301", method="", type_label=expression_statement];
2106 [label="301_ _;\n2106-expression_statement-302-302", method="", type_label=expression_statement];
2108 [label="303_ function getBalance() external view returns(uint){\n    return address(this).balance;\n  }\n2108-function_definition-304-306", method="getBalance()", type_label=function_definition];
2117 [label="304_ return address(this).balance;\n2117-return-305-305", method="getBalance()", type_label=return];
2123 [label="306_ address payable winner_TOD23;\n2123-new_variable-307-307", method="", type_label=new_variable];
2127 [label="307_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n2127-function_definition-308-312", method="play_TOD23(bytes32 guess)", type_label=function_definition];
2135 [label="308_ if\n2135-if-309-311", method="play_TOD23(bytes32 guess)", type_label=if];
4690 [label="308_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
2157 [label="309_ winner_TOD23 = msg.sender;\n2157-expression_statement-310-310", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
2163 [label="312_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n2163-function_definition-313-315", method="getReward_TOD23()", type_label=function_definition];
2168 [label="313_ winner_TOD23.transfer(msg.value);\n2168-expression_statement-314-314", method="getReward_TOD23()", type_label=expression_statement];
2177 [label="315_ function deposit(uint256 _eth) external payable{\n    emit Deposit(msg.sender, _eth);\n  }\n2177-function_definition-316-318", method="deposit(uint256 _eth)", type_label=function_definition];
2194 [label="318_ bool claimed_TOD14 = false;\n2194-new_variable-319-319", method="", type_label=new_variable];
2200 [label="319_ address payable owner_TOD14;\n2200-new_variable-320-320", method="", type_label=new_variable];
2204 [label="320_ uint256 reward_TOD14;\n2204-new_variable-321-321", method="", type_label=new_variable];
2208 [label="321_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n2208-function_definition-322-327", method="setReward_TOD14()", type_label=function_definition];
2213 [label="322_ require (!claimed_TOD14);\n2213-expression_statement-323-323", method="setReward_TOD14()", type_label=expression_statement];
2219 [label="323_ require(msg.sender == owner_TOD14);\n2219-expression_statement-324-324", method="setReward_TOD14()", type_label=expression_statement];
2228 [label="324_ owner_TOD14.transfer(reward_TOD14);\n2228-expression_statement-325-325", method="setReward_TOD14()", type_label=expression_statement];
2235 [label="325_ reward_TOD14 = msg.value;\n2235-expression_statement-326-326", method="setReward_TOD14()", type_label=expression_statement];
2241 [label="327_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n2241-function_definition-328-333", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
2249 [label="328_ require (!claimed_TOD14);\n2249-expression_statement-329-329", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2255 [label="329_ require(submission < 10);\n2255-expression_statement-330-330", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2262 [label="330_ msg.sender.transfer(reward_TOD14);\n2262-expression_statement-331-331", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2271 [label="331_ claimed_TOD14 = true;\n2271-expression_statement-332-332", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2276 [label="333_ function changeOwner(address payable _newOwner ) external onlyOwner {\n    owner = _newOwner;\n  }\n2276-function_definition-334-336", method="changeOwner(address payable _newOwner)", type_label=function_definition];
2283 [label="333_ onlyOwner\n2283-expression_statement-334-334", method="changeOwner(address payable _newOwner)", type_label=expression_statement];
2286 [label="334_ owner = _newOwner;\n2286-expression_statement-335-335", method="changeOwner(address payable _newOwner)", type_label=expression_statement];
2290 [label="336_ bool claimed_TOD30 = false;\n2290-new_variable-337-337", method="", type_label=new_variable];
2296 [label="337_ address payable owner_TOD30;\n2296-new_variable-338-338", method="", type_label=new_variable];
2300 [label="338_ uint256 reward_TOD30;\n2300-new_variable-339-339", method="", type_label=new_variable];
2304 [label="339_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n2304-function_definition-340-345", method="setReward_TOD30()", type_label=function_definition];
2309 [label="340_ require (!claimed_TOD30);\n2309-expression_statement-341-341", method="setReward_TOD30()", type_label=expression_statement];
2315 [label="341_ require(msg.sender == owner_TOD30);\n2315-expression_statement-342-342", method="setReward_TOD30()", type_label=expression_statement];
2324 [label="342_ owner_TOD30.transfer(reward_TOD30);\n2324-expression_statement-343-343", method="setReward_TOD30()", type_label=expression_statement];
2331 [label="343_ reward_TOD30 = msg.value;\n2331-expression_statement-344-344", method="setReward_TOD30()", type_label=expression_statement];
2337 [label="345_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n2337-function_definition-346-351", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
2345 [label="346_ require (!claimed_TOD30);\n2345-expression_statement-347-347", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2351 [label="347_ require(submission < 10);\n2351-expression_statement-348-348", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2358 [label="348_ msg.sender.transfer(reward_TOD30);\n2358-expression_statement-349-349", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2367 [label="349_ claimed_TOD30 = true;\n2367-expression_statement-350-350", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2376 [label="352_ owner.transfer(msg.value);\n2376-expression_statement-353-353", method="", type_label=expression_statement];
2385 [label="354_ bool claimed_TOD8 = false;\n2385-new_variable-355-355", method="", type_label=new_variable];
2391 [label="355_ address payable owner_TOD8;\n2391-new_variable-356-356", method="", type_label=new_variable];
2395 [label="356_ uint256 reward_TOD8;\n2395-new_variable-357-357", method="", type_label=new_variable];
2399 [label="357_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n2399-function_definition-358-363", method="setReward_TOD8()", type_label=function_definition];
2404 [label="358_ require (!claimed_TOD8);\n2404-expression_statement-359-359", method="setReward_TOD8()", type_label=expression_statement];
2410 [label="359_ require(msg.sender == owner_TOD8);\n2410-expression_statement-360-360", method="setReward_TOD8()", type_label=expression_statement];
2419 [label="360_ owner_TOD8.transfer(reward_TOD8);\n2419-expression_statement-361-361", method="setReward_TOD8()", type_label=expression_statement];
2426 [label="361_ reward_TOD8 = msg.value;\n2426-expression_statement-362-362", method="setReward_TOD8()", type_label=expression_statement];
2432 [label="363_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n2432-function_definition-364-369", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
2440 [label="364_ require (!claimed_TOD8);\n2440-expression_statement-365-365", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2446 [label="365_ require(submission < 10);\n2446-expression_statement-366-366", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2453 [label="366_ msg.sender.transfer(reward_TOD8);\n2453-expression_statement-367-367", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2462 [label="367_ claimed_TOD8 = true;\n2462-expression_statement-368-368", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2467 [label="369_ function withdraw(uint256 _amount) external payable onlyOwner {\n    require(_amount > 0 && _amount <= address(this).balance );\n    owner.transfer(_amount);\n    emit Withdraw(owner, _amount);\n  }\n2467-function_definition-370-374", method="withdraw(uint256 _amount)", type_label=function_definition];
2475 [label="369_ onlyOwner\n2475-expression_statement-370-370", method="withdraw(uint256 _amount)", type_label=expression_statement];
2478 [label="370_ require(_amount > 0 && _amount <= address(this).balance );\n2478-expression_statement-371-371", method="withdraw(uint256 _amount)", type_label=expression_statement];
2493 [label="371_ owner.transfer(_amount);\n2493-expression_statement-372-372", method="withdraw(uint256 _amount)", type_label=expression_statement];
2506 [label="374_ address payable winner_TOD39;\n2506-new_variable-375-375", method="", type_label=new_variable];
2510 [label="375_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n2510-function_definition-376-380", method="play_TOD39(bytes32 guess)", type_label=function_definition];
2518 [label="376_ if\n2518-if-377-379", method="play_TOD39(bytes32 guess)", type_label=if];
5073 [label="376_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
2540 [label="377_ winner_TOD39 = msg.sender;\n2540-expression_statement-378-378", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
2546 [label="380_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n2546-function_definition-381-383", method="getReward_TOD39()", type_label=function_definition];
2551 [label="381_ winner_TOD39.transfer(msg.value);\n2551-expression_statement-382-382", method="getReward_TOD39()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1657;
17 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 47  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
25 -> 2580  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2580 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 2580  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
53 -> 58  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 152  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
130 -> 2685  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2685 -> 158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
152 -> 2685  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
158 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 232  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
210 -> 2765  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2765 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
232 -> 2765  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
238 -> 243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
275 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 383  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
361 -> 2916  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2916 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 2916  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
389 -> 394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
438 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
517 -> 539  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
517 -> 3072  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3072 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 3072  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
545 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 615  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
593 -> 3148  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3148 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 3148  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
621 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 715  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
693 -> 3248  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3248 -> 721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 3248  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
721 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
777 -> 785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
785 -> 807  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
785 -> 3340  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3340 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 3340  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
813 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
896 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
931 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
953 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 1021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 1077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1085 -> 1093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1093 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 1109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1109 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1125 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1161 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 1171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 1180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1180 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 1216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1216 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1222 -> 1229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1229 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1243 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1293 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1309 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1317 -> 1325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1325 -> 1333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1333 -> 1341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1341 -> 1349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1349 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1357 -> 1365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1365 -> 1373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1406 -> 1412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1412 -> 1416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1420 -> 1425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1425 -> 1431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1431 -> 1440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1440 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1453 -> 1461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1461 -> 1467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 1474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1474 -> 1483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1488 -> 1505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1505 -> 1513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 1521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1521 -> 1528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1528 -> 1533  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1528 -> 1544  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4083 -> 1659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1533 -> 4083  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1544 -> 1549  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1544 -> 1560  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1549 -> 4083  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1560 -> 1565  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1560 -> 1576  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1565 -> 4083  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1576 -> 1581  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1576 -> 1592  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1581 -> 4083  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1592 -> 1597  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1592 -> 1608  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1597 -> 4083  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1608 -> 1613  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1608 -> 1624  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1613 -> 4083  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1624 -> 1629  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1624 -> 1640  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1629 -> 4083  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1640 -> 1645  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1645 -> 4083  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1659 -> 1670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1670 -> 1685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1719 -> 1725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1725 -> 1729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1733 -> 1738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1738 -> 1744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1744 -> 1753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1753 -> 1760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1766 -> 1774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1774 -> 1780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1780 -> 1787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1787 -> 1796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1801 -> 1820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1820 -> 1831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1831 -> 1843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1843 -> 1858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1858 -> 1876  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1858 -> 4413  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4413 -> 2012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1873 -> 1858  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1876 -> 1888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1888 -> 1911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1911 -> 1999  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1911 -> 4466  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4466 -> 1873  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4466 -> 1873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
1999 -> 4466  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2012 -> 2020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2041 -> 2049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2049 -> 2071  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2049 -> 4604  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4604 -> 2077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2071 -> 4604  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2077 -> 2082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2094 -> 2106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2108 -> 2117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2117 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2127 -> 2135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2135 -> 2157  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2135 -> 4690  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4690 -> 2163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2157 -> 4690  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2163 -> 2168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2194 -> 2200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2200 -> 2204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2208 -> 2213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2213 -> 2219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2219 -> 2228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2228 -> 2235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2241 -> 2249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2249 -> 2255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2255 -> 2262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2262 -> 2271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2276 -> 2286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2290 -> 2296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2296 -> 2300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2304 -> 2309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2309 -> 2315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2315 -> 2324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2324 -> 2331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2337 -> 2345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2345 -> 2351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2351 -> 2358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2358 -> 2367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2385 -> 2391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2391 -> 2395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2399 -> 2404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2404 -> 2410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2410 -> 2419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2419 -> 2426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2432 -> 2440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2440 -> 2446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2446 -> 2453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2453 -> 2462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2467 -> 2478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2478 -> 2493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2510 -> 2518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2518 -> 2540  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2518 -> 5073  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5073 -> 2546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2540 -> 5073  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2546 -> 2551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1657 -> 4083  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
