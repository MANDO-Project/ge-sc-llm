digraph  {
13 [label="2_ function totalSupply() public view returns (uint);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ address payable winner_TOD17;\n21-new_variable-4-4", method="", type_label=new_variable];
25 [label="4_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n25-function_definition-5-9", method="play_TOD17(bytes32 guess)", type_label=function_definition];
33 [label="5_ if\n33-if-6-8", method="play_TOD17(bytes32 guess)", type_label=if];
3643 [label="5_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
55 [label="6_ winner_TOD17 = msg.sender;\n55-expression_statement-7-7", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
61 [label="9_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n61-function_definition-10-12", method="getReward_TOD17()", type_label=function_definition];
66 [label="10_ winner_TOD17.transfer(msg.value);\n66-expression_statement-11-11", method="getReward_TOD17()", type_label=expression_statement];
75 [label="12_ function balanceOf(address tokenOwner) public view returns (uint balance);\n75-function_definition-13-13", method="balanceOf(address tokenOwner)", type_label=function_definition];
88 [label="13_ address payable winner_TOD37;\n88-new_variable-14-14", method="", type_label=new_variable];
92 [label="14_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n92-function_definition-15-19", method="play_TOD37(bytes32 guess)", type_label=function_definition];
100 [label="15_ if\n100-if-16-18", method="play_TOD37(bytes32 guess)", type_label=if];
3710 [label="15_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
122 [label="16_ winner_TOD37 = msg.sender;\n122-expression_statement-17-17", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
128 [label="19_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n128-function_definition-20-22", method="getReward_TOD37()", type_label=function_definition];
133 [label="20_ winner_TOD37.transfer(msg.value);\n133-expression_statement-21-21", method="getReward_TOD37()", type_label=expression_statement];
142 [label="22_ function transfer(address to, uint tokens) public returns (bool success);\n142-function_definition-23-23", method="transfer(address to,uint tokens)", type_label=function_definition];
158 [label="23_ address payable winner_TOD3;\n158-new_variable-24-24", method="", type_label=new_variable];
162 [label="24_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n162-function_definition-25-29", method="play_TOD3(bytes32 guess)", type_label=function_definition];
170 [label="25_ if\n170-if-26-28", method="play_TOD3(bytes32 guess)", type_label=if];
3780 [label="25_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
192 [label="26_ winner_TOD3 = msg.sender;\n192-expression_statement-27-27", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
198 [label="29_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n198-function_definition-30-32", method="getReward_TOD3()", type_label=function_definition];
203 [label="30_ winner_TOD3.transfer(msg.value);\n203-expression_statement-31-31", method="getReward_TOD3()", type_label=expression_statement];
212 [label="32_ function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n212-function_definition-33-33", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
229 [label="33_ address payable winner_TOD9;\n229-new_variable-34-34", method="", type_label=new_variable];
233 [label="34_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n233-function_definition-35-39", method="play_TOD9(bytes32 guess)", type_label=function_definition];
241 [label="35_ if\n241-if-36-38", method="play_TOD9(bytes32 guess)", type_label=if];
3851 [label="35_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
263 [label="36_ winner_TOD9 = msg.sender;\n263-expression_statement-37-37", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
269 [label="39_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n269-function_definition-40-42", method="getReward_TOD9()", type_label=function_definition];
274 [label="40_ winner_TOD9.transfer(msg.value);\n274-expression_statement-41-41", method="getReward_TOD9()", type_label=expression_statement];
283 [label="42_ function approve(address spender, uint tokens) public returns (bool success);\n283-function_definition-43-43", method="approve(address spender,uint tokens)", type_label=function_definition];
299 [label="43_ address payable winner_TOD25;\n299-new_variable-44-44", method="", type_label=new_variable];
303 [label="44_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n303-function_definition-45-49", method="play_TOD25(bytes32 guess)", type_label=function_definition];
311 [label="45_ if\n311-if-46-48", method="play_TOD25(bytes32 guess)", type_label=if];
3921 [label="45_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
333 [label="46_ winner_TOD25 = msg.sender;\n333-expression_statement-47-47", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
339 [label="49_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n339-function_definition-50-52", method="getReward_TOD25()", type_label=function_definition];
344 [label="50_ winner_TOD25.transfer(msg.value);\n344-expression_statement-51-51", method="getReward_TOD25()", type_label=expression_statement];
353 [label="52_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n353-function_definition-53-53", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
373 [label="53_ address payable winner_TOD19;\n373-new_variable-54-54", method="", type_label=new_variable];
377 [label="54_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n377-function_definition-55-59", method="play_TOD19(bytes32 guess)", type_label=function_definition];
385 [label="55_ if\n385-if-56-58", method="play_TOD19(bytes32 guess)", type_label=if];
3995 [label="55_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
407 [label="56_ winner_TOD19 = msg.sender;\n407-expression_statement-57-57", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
413 [label="59_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n413-function_definition-60-62", method="getReward_TOD19()", type_label=function_definition];
418 [label="60_ winner_TOD19.transfer(msg.value);\n418-expression_statement-61-61", method="getReward_TOD19()", type_label=expression_statement];
461 [label="66_ bool claimed_TOD18 = false;\n461-new_variable-67-67", method="", type_label=new_variable];
467 [label="67_ address payable owner_TOD18;\n467-new_variable-68-68", method="", type_label=new_variable];
471 [label="68_ uint256 reward_TOD18;\n471-new_variable-69-69", method="", type_label=new_variable];
475 [label="69_ function setReward_TOD18() public payable {\n        require (!claimed_TOD18);\n        require(msg.sender == owner_TOD18);\n        owner_TOD18.transfer(reward_TOD18);\n        reward_TOD18 = msg.value;\n    }\n475-function_definition-70-75", method="setReward_TOD18()", type_label=function_definition];
480 [label="70_ require (!claimed_TOD18);\n480-expression_statement-71-71", method="setReward_TOD18()", type_label=expression_statement];
486 [label="71_ require(msg.sender == owner_TOD18);\n486-expression_statement-72-72", method="setReward_TOD18()", type_label=expression_statement];
495 [label="72_ owner_TOD18.transfer(reward_TOD18);\n495-expression_statement-73-73", method="setReward_TOD18()", type_label=expression_statement];
502 [label="73_ reward_TOD18 = msg.value;\n502-expression_statement-74-74", method="setReward_TOD18()", type_label=expression_statement];
508 [label="75_ function claimReward_TOD18(uint256 submission) public {\n        require (!claimed_TOD18);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD18);\n        claimed_TOD18 = true;\n    }\n508-function_definition-76-81", method="claimReward_TOD18(uint256 submission)", type_label=function_definition];
516 [label="76_ require (!claimed_TOD18);\n516-expression_statement-77-77", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
522 [label="77_ require(submission < 10);\n522-expression_statement-78-78", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
529 [label="78_ msg.sender.transfer(reward_TOD18);\n529-expression_statement-79-79", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
538 [label="79_ claimed_TOD18 = true;\n538-expression_statement-80-80", method="claimReward_TOD18(uint256 submission)", type_label=expression_statement];
543 [label="81_ string public name = \"Acunar\";\n543-new_variable-82-82", method="", type_label=new_variable];
550 [label="82_ address payable winner_TOD29;\n550-new_variable-83-83", method="", type_label=new_variable];
554 [label="83_ function play_TOD29(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD29 = msg.sender;\n        }\n    }\n554-function_definition-84-88", method="play_TOD29(bytes32 guess)", type_label=function_definition];
562 [label="84_ if\n562-if-85-87", method="play_TOD29(bytes32 guess)", type_label=if];
4172 [label="84_ end_if", method="play_TOD29(bytes32 guess)", type_label=end_if];
584 [label="85_ winner_TOD29 = msg.sender;\n584-expression_statement-86-86", method="play_TOD29(bytes32 guess)", type_label=expression_statement];
590 [label="88_ function getReward_TOD29() payable public{\n       winner_TOD29.transfer(msg.value);\n    }\n590-function_definition-89-91", method="getReward_TOD29()", type_label=function_definition];
595 [label="89_ winner_TOD29.transfer(msg.value);\n595-expression_statement-90-90", method="getReward_TOD29()", type_label=expression_statement];
604 [label="91_ string public symbol = \"ACN\";\n604-new_variable-92-92", method="", type_label=new_variable];
611 [label="92_ bool claimed_TOD6 = false;\n611-new_variable-93-93", method="", type_label=new_variable];
617 [label="93_ address payable owner_TOD6;\n617-new_variable-94-94", method="", type_label=new_variable];
621 [label="94_ uint256 reward_TOD6;\n621-new_variable-95-95", method="", type_label=new_variable];
625 [label="95_ function setReward_TOD6() public payable {\n        require (!claimed_TOD6);\n        require(msg.sender == owner_TOD6);\n        owner_TOD6.transfer(reward_TOD6);\n        reward_TOD6 = msg.value;\n    }\n625-function_definition-96-101", method="setReward_TOD6()", type_label=function_definition];
630 [label="96_ require (!claimed_TOD6);\n630-expression_statement-97-97", method="setReward_TOD6()", type_label=expression_statement];
636 [label="97_ require(msg.sender == owner_TOD6);\n636-expression_statement-98-98", method="setReward_TOD6()", type_label=expression_statement];
645 [label="98_ owner_TOD6.transfer(reward_TOD6);\n645-expression_statement-99-99", method="setReward_TOD6()", type_label=expression_statement];
652 [label="99_ reward_TOD6 = msg.value;\n652-expression_statement-100-100", method="setReward_TOD6()", type_label=expression_statement];
658 [label="101_ function claimReward_TOD6(uint256 submission) public {\n        require (!claimed_TOD6);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD6);\n        claimed_TOD6 = true;\n    }\n658-function_definition-102-107", method="claimReward_TOD6(uint256 submission)", type_label=function_definition];
666 [label="102_ require (!claimed_TOD6);\n666-expression_statement-103-103", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
672 [label="103_ require(submission < 10);\n672-expression_statement-104-104", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
679 [label="104_ msg.sender.transfer(reward_TOD6);\n679-expression_statement-105-105", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
688 [label="105_ claimed_TOD6 = true;\n688-expression_statement-106-106", method="claimReward_TOD6(uint256 submission)", type_label=expression_statement];
693 [label="107_ uint public decimals = 0;\n693-new_variable-108-108", method="", type_label=new_variable];
699 [label="108_ bool claimed_TOD16 = false;\n699-new_variable-109-109", method="", type_label=new_variable];
705 [label="109_ address payable owner_TOD16;\n705-new_variable-110-110", method="", type_label=new_variable];
709 [label="110_ uint256 reward_TOD16;\n709-new_variable-111-111", method="", type_label=new_variable];
713 [label="111_ function setReward_TOD16() public payable {\n        require (!claimed_TOD16);\n        require(msg.sender == owner_TOD16);\n        owner_TOD16.transfer(reward_TOD16);\n        reward_TOD16 = msg.value;\n    }\n713-function_definition-112-117", method="setReward_TOD16()", type_label=function_definition];
718 [label="112_ require (!claimed_TOD16);\n718-expression_statement-113-113", method="setReward_TOD16()", type_label=expression_statement];
724 [label="113_ require(msg.sender == owner_TOD16);\n724-expression_statement-114-114", method="setReward_TOD16()", type_label=expression_statement];
733 [label="114_ owner_TOD16.transfer(reward_TOD16);\n733-expression_statement-115-115", method="setReward_TOD16()", type_label=expression_statement];
740 [label="115_ reward_TOD16 = msg.value;\n740-expression_statement-116-116", method="setReward_TOD16()", type_label=expression_statement];
746 [label="117_ function claimReward_TOD16(uint256 submission) public {\n        require (!claimed_TOD16);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD16);\n        claimed_TOD16 = true;\n    }\n746-function_definition-118-123", method="claimReward_TOD16(uint256 submission)", type_label=function_definition];
754 [label="118_ require (!claimed_TOD16);\n754-expression_statement-119-119", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
760 [label="119_ require(submission < 10);\n760-expression_statement-120-120", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
767 [label="120_ msg.sender.transfer(reward_TOD16);\n767-expression_statement-121-121", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
776 [label="121_ claimed_TOD16 = true;\n776-expression_statement-122-122", method="claimReward_TOD16(uint256 submission)", type_label=expression_statement];
781 [label="123_ uint public supply;\n781-new_variable-124-124", method="", type_label=new_variable];
786 [label="124_ bool claimed_TOD24 = false;\n786-new_variable-125-125", method="", type_label=new_variable];
792 [label="125_ address payable owner_TOD24;\n792-new_variable-126-126", method="", type_label=new_variable];
796 [label="126_ uint256 reward_TOD24;\n796-new_variable-127-127", method="", type_label=new_variable];
800 [label="127_ function setReward_TOD24() public payable {\n        require (!claimed_TOD24);\n        require(msg.sender == owner_TOD24);\n        owner_TOD24.transfer(reward_TOD24);\n        reward_TOD24 = msg.value;\n    }\n800-function_definition-128-133", method="setReward_TOD24()", type_label=function_definition];
805 [label="128_ require (!claimed_TOD24);\n805-expression_statement-129-129", method="setReward_TOD24()", type_label=expression_statement];
811 [label="129_ require(msg.sender == owner_TOD24);\n811-expression_statement-130-130", method="setReward_TOD24()", type_label=expression_statement];
820 [label="130_ owner_TOD24.transfer(reward_TOD24);\n820-expression_statement-131-131", method="setReward_TOD24()", type_label=expression_statement];
827 [label="131_ reward_TOD24 = msg.value;\n827-expression_statement-132-132", method="setReward_TOD24()", type_label=expression_statement];
833 [label="133_ function claimReward_TOD24(uint256 submission) public {\n        require (!claimed_TOD24);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD24);\n        claimed_TOD24 = true;\n    }\n833-function_definition-134-139", method="claimReward_TOD24(uint256 submission)", type_label=function_definition];
841 [label="134_ require (!claimed_TOD24);\n841-expression_statement-135-135", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
847 [label="135_ require(submission < 10);\n847-expression_statement-136-136", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
854 [label="136_ msg.sender.transfer(reward_TOD24);\n854-expression_statement-137-137", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
863 [label="137_ claimed_TOD24 = true;\n863-expression_statement-138-138", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
868 [label="139_ address public founder;\n868-new_variable-140-140", method="", type_label=new_variable];
873 [label="140_ address payable winner_TOD5;\n873-new_variable-141-141", method="", type_label=new_variable];
877 [label="141_ function play_TOD5(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD5 = msg.sender;\n        }\n    }\n877-function_definition-142-146", method="play_TOD5(bytes32 guess)", type_label=function_definition];
885 [label="142_ if\n885-if-143-145", method="play_TOD5(bytes32 guess)", type_label=if];
4495 [label="142_ end_if", method="play_TOD5(bytes32 guess)", type_label=end_if];
907 [label="143_ winner_TOD5 = msg.sender;\n907-expression_statement-144-144", method="play_TOD5(bytes32 guess)", type_label=expression_statement];
913 [label="146_ function getReward_TOD5() payable public{\n       winner_TOD5.transfer(msg.value);\n    }\n913-function_definition-147-149", method="getReward_TOD5()", type_label=function_definition];
918 [label="147_ winner_TOD5.transfer(msg.value);\n918-expression_statement-148-148", method="getReward_TOD5()", type_label=expression_statement];
927 [label="149_ mapping(address => uint) public balances;\n927-new_variable-150-150", method="", type_label=new_variable];
934 [label="150_ address payable winner_TOD15;\n934-new_variable-151-151", method="", type_label=new_variable];
938 [label="151_ function play_TOD15(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD15 = msg.sender;\n        }\n    }\n938-function_definition-152-156", method="play_TOD15(bytes32 guess)", type_label=function_definition];
946 [label="152_ if\n946-if-153-155", method="play_TOD15(bytes32 guess)", type_label=if];
4556 [label="152_ end_if", method="play_TOD15(bytes32 guess)", type_label=end_if];
968 [label="153_ winner_TOD15 = msg.sender;\n968-expression_statement-154-154", method="play_TOD15(bytes32 guess)", type_label=expression_statement];
974 [label="156_ function getReward_TOD15() payable public{\n       winner_TOD15.transfer(msg.value);\n    }\n974-function_definition-157-159", method="getReward_TOD15()", type_label=function_definition];
979 [label="157_ winner_TOD15.transfer(msg.value);\n979-expression_statement-158-158", method="getReward_TOD15()", type_label=expression_statement];
988 [label="159_ mapping(address => mapping(address => uint)) allowed;\n988-new_variable-160-160", method="", type_label=new_variable];
1026 [label="163_ supply = 200000000;\n1026-expression_statement-164-164", method="", type_label=expression_statement];
1030 [label="164_ founder = msg.sender;\n1030-expression_statement-165-165", method="", type_label=expression_statement];
1036 [label="165_ balances[founder] = supply;\n1036-expression_statement-166-166", method="", type_label=expression_statement];
1042 [label="167_ bool claimed_TOD26 = false;\n1042-new_variable-168-168", method="", type_label=new_variable];
1048 [label="168_ address payable owner_TOD26;\n1048-new_variable-169-169", method="", type_label=new_variable];
1052 [label="169_ uint256 reward_TOD26;\n1052-new_variable-170-170", method="", type_label=new_variable];
1056 [label="170_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n1056-function_definition-171-176", method="setReward_TOD26()", type_label=function_definition];
1061 [label="171_ require (!claimed_TOD26);\n1061-expression_statement-172-172", method="setReward_TOD26()", type_label=expression_statement];
1067 [label="172_ require(msg.sender == owner_TOD26);\n1067-expression_statement-173-173", method="setReward_TOD26()", type_label=expression_statement];
1076 [label="173_ owner_TOD26.transfer(reward_TOD26);\n1076-expression_statement-174-174", method="setReward_TOD26()", type_label=expression_statement];
1083 [label="174_ reward_TOD26 = msg.value;\n1083-expression_statement-175-175", method="setReward_TOD26()", type_label=expression_statement];
1089 [label="176_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n1089-function_definition-177-182", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
1097 [label="177_ require (!claimed_TOD26);\n1097-expression_statement-178-178", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1103 [label="178_ require(submission < 10);\n1103-expression_statement-179-179", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1110 [label="179_ msg.sender.transfer(reward_TOD26);\n1110-expression_statement-180-180", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1119 [label="180_ claimed_TOD26 = true;\n1119-expression_statement-181-181", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1124 [label="182_ function allowance(address tokenOwner, address spender) view public returns(uint){\n        return allowed[tokenOwner][spender];\n    }\n1124-function_definition-183-185", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
1141 [label="183_ return allowed[tokenOwner][spender];\n1141-return-184-184", method="allowance(address tokenOwner,address spender)", type_label=return];
1147 [label="185_ bool claimed_TOD20 = false;\n1147-new_variable-186-186", method="", type_label=new_variable];
1153 [label="186_ address payable owner_TOD20;\n1153-new_variable-187-187", method="", type_label=new_variable];
1157 [label="187_ uint256 reward_TOD20;\n1157-new_variable-188-188", method="", type_label=new_variable];
1161 [label="188_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n1161-function_definition-189-194", method="setReward_TOD20()", type_label=function_definition];
1166 [label="189_ require (!claimed_TOD20);\n1166-expression_statement-190-190", method="setReward_TOD20()", type_label=expression_statement];
1172 [label="190_ require(msg.sender == owner_TOD20);\n1172-expression_statement-191-191", method="setReward_TOD20()", type_label=expression_statement];
1181 [label="191_ owner_TOD20.transfer(reward_TOD20);\n1181-expression_statement-192-192", method="setReward_TOD20()", type_label=expression_statement];
1188 [label="192_ reward_TOD20 = msg.value;\n1188-expression_statement-193-193", method="setReward_TOD20()", type_label=expression_statement];
1194 [label="194_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n1194-function_definition-195-200", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
1202 [label="195_ require (!claimed_TOD20);\n1202-expression_statement-196-196", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1208 [label="196_ require(submission < 10);\n1208-expression_statement-197-197", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1215 [label="197_ msg.sender.transfer(reward_TOD20);\n1215-expression_statement-198-198", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1224 [label="198_ claimed_TOD20 = true;\n1224-expression_statement-199-199", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1229 [label="200_ function approve(address spender, uint tokens) public returns(bool){\n        require(balances[msg.sender] >= tokens);\n        require(tokens > 0);\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n1229-function_definition-201-207", method="approve(address spender,uint tokens)", type_label=function_definition];
1245 [label="201_ require(balances[msg.sender] >= tokens);\n1245-expression_statement-202-202", method="approve(address spender,uint tokens)", type_label=expression_statement];
1256 [label="202_ require(tokens > 0);\n1256-expression_statement-203-203", method="approve(address spender,uint tokens)", type_label=expression_statement];
1263 [label="203_ allowed[msg.sender][spender] = tokens;\n1263-expression_statement-204-204", method="approve(address spender,uint tokens)", type_label=expression_statement];
1283 [label="205_ return true;\n1283-return-206-206", method="approve(address spender,uint tokens)", type_label=return];
1286 [label="207_ bool claimed_TOD32 = false;\n1286-new_variable-208-208", method="", type_label=new_variable];
1292 [label="208_ address payable owner_TOD32;\n1292-new_variable-209-209", method="", type_label=new_variable];
1296 [label="209_ uint256 reward_TOD32;\n1296-new_variable-210-210", method="", type_label=new_variable];
1300 [label="210_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n1300-function_definition-211-216", method="setReward_TOD32()", type_label=function_definition];
1305 [label="211_ require (!claimed_TOD32);\n1305-expression_statement-212-212", method="setReward_TOD32()", type_label=expression_statement];
1311 [label="212_ require(msg.sender == owner_TOD32);\n1311-expression_statement-213-213", method="setReward_TOD32()", type_label=expression_statement];
1320 [label="213_ owner_TOD32.transfer(reward_TOD32);\n1320-expression_statement-214-214", method="setReward_TOD32()", type_label=expression_statement];
1327 [label="214_ reward_TOD32 = msg.value;\n1327-expression_statement-215-215", method="setReward_TOD32()", type_label=expression_statement];
1333 [label="216_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n1333-function_definition-217-222", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
1341 [label="217_ require (!claimed_TOD32);\n1341-expression_statement-218-218", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1347 [label="218_ require(submission < 10);\n1347-expression_statement-219-219", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1354 [label="219_ msg.sender.transfer(reward_TOD32);\n1354-expression_statement-220-220", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1363 [label="220_ claimed_TOD32 = true;\n1363-expression_statement-221-221", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1368 [label="222_ function transferFrom(address from, address to, uint tokens) public returns(bool){\n        require(allowed[from][to] >= tokens);\n        require(balances[from] >= tokens);\n        balances[from] -= tokens;\n        balances[to] += tokens;\n        allowed[from][to] -= tokens;\n        return true;\n    }\n1368-function_definition-223-230", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
1388 [label="223_ require(allowed[from][to] >= tokens);\n1388-expression_statement-224-224", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1399 [label="224_ require(balances[from] >= tokens);\n1399-expression_statement-225-225", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1408 [label="225_ balances[from] -= tokens;\n1408-expression_statement-226-226", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1414 [label="226_ balances[to] += tokens;\n1414-expression_statement-227-227", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1420 [label="227_ allowed[from][to] -= tokens;\n1420-expression_statement-228-228", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1428 [label="228_ return true;\n1428-return-229-229", method="transferFrom(address from,address to,uint tokens)", type_label=return];
1431 [label="230_ bool claimed_TOD38 = false;\n1431-new_variable-231-231", method="", type_label=new_variable];
1437 [label="231_ address payable owner_TOD38;\n1437-new_variable-232-232", method="", type_label=new_variable];
1441 [label="232_ uint256 reward_TOD38;\n1441-new_variable-233-233", method="", type_label=new_variable];
1445 [label="233_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n1445-function_definition-234-239", method="setReward_TOD38()", type_label=function_definition];
1450 [label="234_ require (!claimed_TOD38);\n1450-expression_statement-235-235", method="setReward_TOD38()", type_label=expression_statement];
1456 [label="235_ require(msg.sender == owner_TOD38);\n1456-expression_statement-236-236", method="setReward_TOD38()", type_label=expression_statement];
1465 [label="236_ owner_TOD38.transfer(reward_TOD38);\n1465-expression_statement-237-237", method="setReward_TOD38()", type_label=expression_statement];
1472 [label="237_ reward_TOD38 = msg.value;\n1472-expression_statement-238-238", method="setReward_TOD38()", type_label=expression_statement];
1478 [label="239_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n1478-function_definition-240-245", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
1486 [label="240_ require (!claimed_TOD38);\n1486-expression_statement-241-241", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1492 [label="241_ require(submission < 10);\n1492-expression_statement-242-242", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1499 [label="242_ msg.sender.transfer(reward_TOD38);\n1499-expression_statement-243-243", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1508 [label="243_ claimed_TOD38 = true;\n1508-expression_statement-244-244", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1513 [label="245_ function totalSupply() public view returns (uint){\n        return supply;\n    }\n1513-function_definition-246-248", method="totalSupply()", type_label=function_definition];
1522 [label="246_ return supply;\n1522-return-247-247", method="totalSupply()", type_label=return];
1524 [label="248_ bool claimed_TOD4 = false;\n1524-new_variable-249-249", method="", type_label=new_variable];
1530 [label="249_ address payable owner_TOD4;\n1530-new_variable-250-250", method="", type_label=new_variable];
1534 [label="250_ uint256 reward_TOD4;\n1534-new_variable-251-251", method="", type_label=new_variable];
1538 [label="251_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n1538-function_definition-252-257", method="setReward_TOD4()", type_label=function_definition];
1543 [label="252_ require (!claimed_TOD4);\n1543-expression_statement-253-253", method="setReward_TOD4()", type_label=expression_statement];
1549 [label="253_ require(msg.sender == owner_TOD4);\n1549-expression_statement-254-254", method="setReward_TOD4()", type_label=expression_statement];
1558 [label="254_ owner_TOD4.transfer(reward_TOD4);\n1558-expression_statement-255-255", method="setReward_TOD4()", type_label=expression_statement];
1565 [label="255_ reward_TOD4 = msg.value;\n1565-expression_statement-256-256", method="setReward_TOD4()", type_label=expression_statement];
1571 [label="257_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n1571-function_definition-258-263", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
1579 [label="258_ require (!claimed_TOD4);\n1579-expression_statement-259-259", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1585 [label="259_ require(submission < 10);\n1585-expression_statement-260-260", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1592 [label="260_ msg.sender.transfer(reward_TOD4);\n1592-expression_statement-261-261", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1601 [label="261_ claimed_TOD4 = true;\n1601-expression_statement-262-262", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1606 [label="263_ function balanceOf(address tokenOwner) public view returns (uint balance){\n         return balances[tokenOwner];\n     }\n1606-function_definition-264-266", method="balanceOf(address tokenOwner)", type_label=function_definition];
1620 [label="264_ return balances[tokenOwner];\n1620-return-265-265", method="balanceOf(address tokenOwner)", type_label=return];
1624 [label="266_ address payable winner_TOD7;\n1624-new_variable-267-267", method="", type_label=new_variable];
1628 [label="267_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n1628-function_definition-268-272", method="play_TOD7(bytes32 guess)", type_label=function_definition];
1636 [label="268_ if\n1636-if-269-271", method="play_TOD7(bytes32 guess)", type_label=if];
5246 [label="268_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
1658 [label="269_ winner_TOD7 = msg.sender;\n1658-expression_statement-270-270", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
1664 [label="272_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n1664-function_definition-273-275", method="getReward_TOD7()", type_label=function_definition];
1669 [label="273_ winner_TOD7.transfer(msg.value);\n1669-expression_statement-274-274", method="getReward_TOD7()", type_label=expression_statement];
1678 [label="275_ function transfer(address to, uint tokens) public returns (bool success){\n         require(balances[msg.sender] >= tokens && tokens > 0);\n         balances[to] += tokens;\n         balances[msg.sender] -= tokens;\n         emit Transfer(msg.sender, to, tokens);\n         return true;\n     }\n1678-function_definition-276-282", method="transfer(address to,uint tokens)", type_label=function_definition];
1695 [label="276_ require(balances[msg.sender] >= tokens && tokens > 0);\n1695-expression_statement-277-277", method="transfer(address to,uint tokens)", type_label=expression_statement];
1710 [label="277_ balances[to] += tokens;\n1710-expression_statement-278-278", method="transfer(address to,uint tokens)", type_label=expression_statement];
1716 [label="278_ balances[msg.sender] -= tokens;\n1716-expression_statement-279-279", method="transfer(address to,uint tokens)", type_label=expression_statement];
1734 [label="280_ return true;\n1734-return-281-281", method="transfer(address to,uint tokens)", type_label=return];
1737 [label="282_ address payable winner_TOD23;\n1737-new_variable-283-283", method="", type_label=new_variable];
1741 [label="283_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n1741-function_definition-284-288", method="play_TOD23(bytes32 guess)", type_label=function_definition];
1749 [label="284_ if\n1749-if-285-287", method="play_TOD23(bytes32 guess)", type_label=if];
5359 [label="284_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
1771 [label="285_ winner_TOD23 = msg.sender;\n1771-expression_statement-286-286", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
1777 [label="288_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n1777-function_definition-289-291", method="getReward_TOD23()", type_label=function_definition];
1782 [label="289_ winner_TOD23.transfer(msg.value);\n1782-expression_statement-290-290", method="getReward_TOD23()", type_label=expression_statement];
1797 [label="293_ bool claimed_TOD28 = false;\n1797-new_variable-294-294", method="", type_label=new_variable];
1803 [label="294_ address payable owner_TOD28;\n1803-new_variable-295-295", method="", type_label=new_variable];
1807 [label="295_ uint256 reward_TOD28;\n1807-new_variable-296-296", method="", type_label=new_variable];
1811 [label="296_ function setReward_TOD28() public payable {\n        require (!claimed_TOD28);\n        require(msg.sender == owner_TOD28);\n        owner_TOD28.transfer(reward_TOD28);\n        reward_TOD28 = msg.value;\n    }\n1811-function_definition-297-302", method="setReward_TOD28()", type_label=function_definition];
1816 [label="297_ require (!claimed_TOD28);\n1816-expression_statement-298-298", method="setReward_TOD28()", type_label=expression_statement];
1822 [label="298_ require(msg.sender == owner_TOD28);\n1822-expression_statement-299-299", method="setReward_TOD28()", type_label=expression_statement];
1831 [label="299_ owner_TOD28.transfer(reward_TOD28);\n1831-expression_statement-300-300", method="setReward_TOD28()", type_label=expression_statement];
1838 [label="300_ reward_TOD28 = msg.value;\n1838-expression_statement-301-301", method="setReward_TOD28()", type_label=expression_statement];
1844 [label="302_ function claimReward_TOD28(uint256 submission) public {\n        require (!claimed_TOD28);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD28);\n        claimed_TOD28 = true;\n    }\n1844-function_definition-303-308", method="claimReward_TOD28(uint256 submission)", type_label=function_definition];
1852 [label="303_ require (!claimed_TOD28);\n1852-expression_statement-304-304", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
1858 [label="304_ require(submission < 10);\n1858-expression_statement-305-305", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
1865 [label="305_ msg.sender.transfer(reward_TOD28);\n1865-expression_statement-306-306", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
1874 [label="306_ claimed_TOD28 = true;\n1874-expression_statement-307-307", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
1879 [label="308_ address public admin;\n1879-new_variable-309-309", method="", type_label=new_variable];
1884 [label="309_ bool claimed_TOD34 = false;\n1884-new_variable-310-310", method="", type_label=new_variable];
1890 [label="310_ address payable owner_TOD34;\n1890-new_variable-311-311", method="", type_label=new_variable];
1894 [label="311_ uint256 reward_TOD34;\n1894-new_variable-312-312", method="", type_label=new_variable];
1898 [label="312_ function setReward_TOD34() public payable {\n        require (!claimed_TOD34);\n        require(msg.sender == owner_TOD34);\n        owner_TOD34.transfer(reward_TOD34);\n        reward_TOD34 = msg.value;\n    }\n1898-function_definition-313-318", method="setReward_TOD34()", type_label=function_definition];
1903 [label="313_ require (!claimed_TOD34);\n1903-expression_statement-314-314", method="setReward_TOD34()", type_label=expression_statement];
1909 [label="314_ require(msg.sender == owner_TOD34);\n1909-expression_statement-315-315", method="setReward_TOD34()", type_label=expression_statement];
1918 [label="315_ owner_TOD34.transfer(reward_TOD34);\n1918-expression_statement-316-316", method="setReward_TOD34()", type_label=expression_statement];
1925 [label="316_ reward_TOD34 = msg.value;\n1925-expression_statement-317-317", method="setReward_TOD34()", type_label=expression_statement];
1931 [label="318_ function claimReward_TOD34(uint256 submission) public {\n        require (!claimed_TOD34);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD34);\n        claimed_TOD34 = true;\n    }\n1931-function_definition-319-324", method="claimReward_TOD34(uint256 submission)", type_label=function_definition];
1939 [label="319_ require (!claimed_TOD34);\n1939-expression_statement-320-320", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
1945 [label="320_ require(submission < 10);\n1945-expression_statement-321-321", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
1952 [label="321_ msg.sender.transfer(reward_TOD34);\n1952-expression_statement-322-322", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
1961 [label="322_ claimed_TOD34 = true;\n1961-expression_statement-323-323", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
1966 [label="324_ address payable public deposit;\n1966-new_variable-325-325", method="", type_label=new_variable];
1971 [label="325_ address payable winner_TOD21;\n1971-new_variable-326-326", method="", type_label=new_variable];
1975 [label="326_ function play_TOD21(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD21 = msg.sender;\n        }\n    }\n1975-function_definition-327-331", method="play_TOD21(bytes32 guess)", type_label=function_definition];
1983 [label="327_ if\n1983-if-328-330", method="play_TOD21(bytes32 guess)", type_label=if];
5593 [label="327_ end_if", method="play_TOD21(bytes32 guess)", type_label=end_if];
2005 [label="328_ winner_TOD21 = msg.sender;\n2005-expression_statement-329-329", method="play_TOD21(bytes32 guess)", type_label=expression_statement];
2011 [label="331_ function getReward_TOD21() payable public{\n       winner_TOD21.transfer(msg.value);\n    }\n2011-function_definition-332-334", method="getReward_TOD21()", type_label=function_definition];
2016 [label="332_ winner_TOD21.transfer(msg.value);\n2016-expression_statement-333-333", method="getReward_TOD21()", type_label=expression_statement];
2025 [label="334_ uint tokenPrice = 0.0001 ether;\n2025-new_variable-335-335", method="", type_label=new_variable];
2031 [label="335_ bool claimed_TOD10 = false;\n2031-new_variable-336-336", method="", type_label=new_variable];
2037 [label="336_ address payable owner_TOD10;\n2037-new_variable-337-337", method="", type_label=new_variable];
2041 [label="337_ uint256 reward_TOD10;\n2041-new_variable-338-338", method="", type_label=new_variable];
2045 [label="338_ function setReward_TOD10() public payable {\n        require (!claimed_TOD10);\n        require(msg.sender == owner_TOD10);\n        owner_TOD10.transfer(reward_TOD10);\n        reward_TOD10 = msg.value;\n    }\n2045-function_definition-339-344", method="setReward_TOD10()", type_label=function_definition];
2050 [label="339_ require (!claimed_TOD10);\n2050-expression_statement-340-340", method="setReward_TOD10()", type_label=expression_statement];
2056 [label="340_ require(msg.sender == owner_TOD10);\n2056-expression_statement-341-341", method="setReward_TOD10()", type_label=expression_statement];
2065 [label="341_ owner_TOD10.transfer(reward_TOD10);\n2065-expression_statement-342-342", method="setReward_TOD10()", type_label=expression_statement];
2072 [label="342_ reward_TOD10 = msg.value;\n2072-expression_statement-343-343", method="setReward_TOD10()", type_label=expression_statement];
2078 [label="344_ function claimReward_TOD10(uint256 submission) public {\n        require (!claimed_TOD10);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD10);\n        claimed_TOD10 = true;\n    }\n2078-function_definition-345-350", method="claimReward_TOD10(uint256 submission)", type_label=function_definition];
2086 [label="345_ require (!claimed_TOD10);\n2086-expression_statement-346-346", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
2092 [label="346_ require(submission < 10);\n2092-expression_statement-347-347", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
2099 [label="347_ msg.sender.transfer(reward_TOD10);\n2099-expression_statement-348-348", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
2108 [label="348_ claimed_TOD10 = true;\n2108-expression_statement-349-349", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
2113 [label="350_ uint public hardCap =21000 ether;\n2113-new_variable-351-351", method="", type_label=new_variable];
2120 [label="351_ bool claimed_TOD22 = false;\n2120-new_variable-352-352", method="", type_label=new_variable];
2126 [label="352_ address payable owner_TOD22;\n2126-new_variable-353-353", method="", type_label=new_variable];
2130 [label="353_ uint256 reward_TOD22;\n2130-new_variable-354-354", method="", type_label=new_variable];
2134 [label="354_ function setReward_TOD22() public payable {\n        require (!claimed_TOD22);\n        require(msg.sender == owner_TOD22);\n        owner_TOD22.transfer(reward_TOD22);\n        reward_TOD22 = msg.value;\n    }\n2134-function_definition-355-360", method="setReward_TOD22()", type_label=function_definition];
2139 [label="355_ require (!claimed_TOD22);\n2139-expression_statement-356-356", method="setReward_TOD22()", type_label=expression_statement];
2145 [label="356_ require(msg.sender == owner_TOD22);\n2145-expression_statement-357-357", method="setReward_TOD22()", type_label=expression_statement];
2154 [label="357_ owner_TOD22.transfer(reward_TOD22);\n2154-expression_statement-358-358", method="setReward_TOD22()", type_label=expression_statement];
2161 [label="358_ reward_TOD22 = msg.value;\n2161-expression_statement-359-359", method="setReward_TOD22()", type_label=expression_statement];
2167 [label="360_ function claimReward_TOD22(uint256 submission) public {\n        require (!claimed_TOD22);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD22);\n        claimed_TOD22 = true;\n    }\n2167-function_definition-361-366", method="claimReward_TOD22(uint256 submission)", type_label=function_definition];
2175 [label="361_ require (!claimed_TOD22);\n2175-expression_statement-362-362", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
2181 [label="362_ require(submission < 10);\n2181-expression_statement-363-363", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
2188 [label="363_ msg.sender.transfer(reward_TOD22);\n2188-expression_statement-364-364", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
2197 [label="364_ claimed_TOD22 = true;\n2197-expression_statement-365-365", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
2202 [label="366_ uint public raisedAmount;\n2202-new_variable-367-367", method="", type_label=new_variable];
2207 [label="367_ bool claimed_TOD12 = false;\n2207-new_variable-368-368", method="", type_label=new_variable];
2213 [label="368_ address payable owner_TOD12;\n2213-new_variable-369-369", method="", type_label=new_variable];
2217 [label="369_ uint256 reward_TOD12;\n2217-new_variable-370-370", method="", type_label=new_variable];
2221 [label="370_ function setReward_TOD12() public payable {\n        require (!claimed_TOD12);\n        require(msg.sender == owner_TOD12);\n        owner_TOD12.transfer(reward_TOD12);\n        reward_TOD12 = msg.value;\n    }\n2221-function_definition-371-376", method="setReward_TOD12()", type_label=function_definition];
2226 [label="371_ require (!claimed_TOD12);\n2226-expression_statement-372-372", method="setReward_TOD12()", type_label=expression_statement];
2232 [label="372_ require(msg.sender == owner_TOD12);\n2232-expression_statement-373-373", method="setReward_TOD12()", type_label=expression_statement];
2241 [label="373_ owner_TOD12.transfer(reward_TOD12);\n2241-expression_statement-374-374", method="setReward_TOD12()", type_label=expression_statement];
2248 [label="374_ reward_TOD12 = msg.value;\n2248-expression_statement-375-375", method="setReward_TOD12()", type_label=expression_statement];
2254 [label="376_ function claimReward_TOD12(uint256 submission) public {\n        require (!claimed_TOD12);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD12);\n        claimed_TOD12 = true;\n    }\n2254-function_definition-377-382", method="claimReward_TOD12(uint256 submission)", type_label=function_definition];
2262 [label="377_ require (!claimed_TOD12);\n2262-expression_statement-378-378", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
2268 [label="378_ require(submission < 10);\n2268-expression_statement-379-379", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
2275 [label="379_ msg.sender.transfer(reward_TOD12);\n2275-expression_statement-380-380", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
2284 [label="380_ claimed_TOD12 = true;\n2284-expression_statement-381-381", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
2289 [label="382_ uint public saleStart = now;\n2289-new_variable-383-383", method="", type_label=new_variable];
2295 [label="383_ uint public saleEnd = now + 14515200;\n2295-new_variable-384-384", method="", type_label=new_variable];
2303 [label="384_ uint public coinTradeStart = saleEnd + 15120000;\n2303-new_variable-385-385", method="", type_label=new_variable];
2311 [label="385_ address payable winner_TOD11;\n2311-new_variable-386-386", method="", type_label=new_variable];
2315 [label="386_ function play_TOD11(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD11 = msg.sender;\n        }\n    }\n2315-function_definition-387-391", method="play_TOD11(bytes32 guess)", type_label=function_definition];
2323 [label="387_ if\n2323-if-388-390", method="play_TOD11(bytes32 guess)", type_label=if];
5933 [label="387_ end_if", method="play_TOD11(bytes32 guess)", type_label=end_if];
2345 [label="388_ winner_TOD11 = msg.sender;\n2345-expression_statement-389-389", method="play_TOD11(bytes32 guess)", type_label=expression_statement];
2351 [label="391_ function getReward_TOD11() payable public{\n       winner_TOD11.transfer(msg.value);\n    }\n2351-function_definition-392-394", method="getReward_TOD11()", type_label=function_definition];
2356 [label="392_ winner_TOD11.transfer(msg.value);\n2356-expression_statement-393-393", method="getReward_TOD11()", type_label=expression_statement];
2365 [label="394_ uint public maxInvestment = 30 ether;\n2365-new_variable-395-395", method="", type_label=new_variable];
2372 [label="395_ address payable winner_TOD1;\n2372-new_variable-396-396", method="", type_label=new_variable];
2376 [label="396_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n2376-function_definition-397-401", method="play_TOD1(bytes32 guess)", type_label=function_definition];
2384 [label="397_ if\n2384-if-398-400", method="play_TOD1(bytes32 guess)", type_label=if];
5994 [label="397_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
2406 [label="398_ winner_TOD1 = msg.sender;\n2406-expression_statement-399-399", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
2412 [label="401_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n2412-function_definition-402-404", method="getReward_TOD1()", type_label=function_definition];
2417 [label="402_ winner_TOD1.transfer(msg.value);\n2417-expression_statement-403-403", method="getReward_TOD1()", type_label=expression_statement];
2426 [label="404_ uint public minInvestment = 0.1 ether;\n2426-new_variable-405-405", method="", type_label=new_variable];
2439 [label="406_ bool claimed_TOD2 = false;\n2439-new_variable-407-407", method="", type_label=new_variable];
2445 [label="407_ address payable owner_TOD2;\n2445-new_variable-408-408", method="", type_label=new_variable];
2449 [label="408_ uint256 reward_TOD2;\n2449-new_variable-409-409", method="", type_label=new_variable];
2453 [label="409_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n2453-function_definition-410-415", method="setReward_TOD2()", type_label=function_definition];
2458 [label="410_ require (!claimed_TOD2);\n2458-expression_statement-411-411", method="setReward_TOD2()", type_label=expression_statement];
2464 [label="411_ require(msg.sender == owner_TOD2);\n2464-expression_statement-412-412", method="setReward_TOD2()", type_label=expression_statement];
2473 [label="412_ owner_TOD2.transfer(reward_TOD2);\n2473-expression_statement-413-413", method="setReward_TOD2()", type_label=expression_statement];
2480 [label="413_ reward_TOD2 = msg.value;\n2480-expression_statement-414-414", method="setReward_TOD2()", type_label=expression_statement];
2486 [label="415_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n2486-function_definition-416-421", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
2494 [label="416_ require (!claimed_TOD2);\n2494-expression_statement-417-417", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
2500 [label="417_ require(submission < 10);\n2500-expression_statement-418-418", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
2507 [label="418_ msg.sender.transfer(reward_TOD2);\n2507-expression_statement-419-419", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
2516 [label="419_ claimed_TOD2 = true;\n2516-expression_statement-420-420", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
2521 [label="421_ State public ieoState;\n2521-new_variable-422-422", method="", type_label=new_variable];
2527 [label="422_ modifier onlyAdmin(){\n        require(msg.sender == admin);\n        _;\n    }\n2527-expression_statement-423-426", method="", type_label=expression_statement];
2530 [label="423_ require(msg.sender == admin);\n2530-expression_statement-424-424", method="", type_label=expression_statement];
2539 [label="424_ _;\n2539-expression_statement-425-425", method="", type_label=expression_statement];
2541 [label="426_ address payable winner_TOD13;\n2541-new_variable-427-427", method="", type_label=new_variable];
2545 [label="427_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n2545-function_definition-428-432", method="play_TOD13(bytes32 guess)", type_label=function_definition];
2553 [label="428_ if\n2553-if-429-431", method="play_TOD13(bytes32 guess)", type_label=if];
6163 [label="428_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
2575 [label="429_ winner_TOD13 = msg.sender;\n2575-expression_statement-430-430", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
2581 [label="432_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n2581-function_definition-433-435", method="getReward_TOD13()", type_label=function_definition];
2586 [label="433_ winner_TOD13.transfer(msg.value);\n2586-expression_statement-434-434", method="getReward_TOD13()", type_label=expression_statement];
2615 [label="437_ deposit = _deposit;\n2615-expression_statement-438-438", method="", type_label=expression_statement];
2619 [label="438_ admin = msg.sender;\n2619-expression_statement-439-439", method="", type_label=expression_statement];
2625 [label="439_ ieoState = State.beforeStart;\n2625-expression_statement-440-440", method="", type_label=expression_statement];
2631 [label="441_ bool claimed_TOD14 = false;\n2631-new_variable-442-442", method="", type_label=new_variable];
2637 [label="442_ address payable owner_TOD14;\n2637-new_variable-443-443", method="", type_label=new_variable];
2641 [label="443_ uint256 reward_TOD14;\n2641-new_variable-444-444", method="", type_label=new_variable];
2645 [label="444_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n2645-function_definition-445-450", method="setReward_TOD14()", type_label=function_definition];
2650 [label="445_ require (!claimed_TOD14);\n2650-expression_statement-446-446", method="setReward_TOD14()", type_label=expression_statement];
2656 [label="446_ require(msg.sender == owner_TOD14);\n2656-expression_statement-447-447", method="setReward_TOD14()", type_label=expression_statement];
2665 [label="447_ owner_TOD14.transfer(reward_TOD14);\n2665-expression_statement-448-448", method="setReward_TOD14()", type_label=expression_statement];
2672 [label="448_ reward_TOD14 = msg.value;\n2672-expression_statement-449-449", method="setReward_TOD14()", type_label=expression_statement];
2678 [label="450_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n2678-function_definition-451-456", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
2686 [label="451_ require (!claimed_TOD14);\n2686-expression_statement-452-452", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2692 [label="452_ require(submission < 10);\n2692-expression_statement-453-453", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2699 [label="453_ msg.sender.transfer(reward_TOD14);\n2699-expression_statement-454-454", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2708 [label="454_ claimed_TOD14 = true;\n2708-expression_statement-455-455", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2713 [label="456_ function halt() public onlyAdmin{\n        ieoState = State.halted;\n    }\n2713-function_definition-457-459", method="halt()", type_label=function_definition];
2716 [label="456_ onlyAdmin\n2716-expression_statement-457-457", method="halt()", type_label=expression_statement];
2719 [label="457_ ieoState = State.halted;\n2719-expression_statement-458-458", method="halt()", type_label=expression_statement];
2725 [label="459_ bool claimed_TOD30 = false;\n2725-new_variable-460-460", method="", type_label=new_variable];
2731 [label="460_ address payable owner_TOD30;\n2731-new_variable-461-461", method="", type_label=new_variable];
2735 [label="461_ uint256 reward_TOD30;\n2735-new_variable-462-462", method="", type_label=new_variable];
2739 [label="462_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n2739-function_definition-463-468", method="setReward_TOD30()", type_label=function_definition];
2744 [label="463_ require (!claimed_TOD30);\n2744-expression_statement-464-464", method="setReward_TOD30()", type_label=expression_statement];
2750 [label="464_ require(msg.sender == owner_TOD30);\n2750-expression_statement-465-465", method="setReward_TOD30()", type_label=expression_statement];
2759 [label="465_ owner_TOD30.transfer(reward_TOD30);\n2759-expression_statement-466-466", method="setReward_TOD30()", type_label=expression_statement];
2766 [label="466_ reward_TOD30 = msg.value;\n2766-expression_statement-467-467", method="setReward_TOD30()", type_label=expression_statement];
2772 [label="468_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n2772-function_definition-469-474", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
2780 [label="469_ require (!claimed_TOD30);\n2780-expression_statement-470-470", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2786 [label="470_ require(submission < 10);\n2786-expression_statement-471-471", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2793 [label="471_ msg.sender.transfer(reward_TOD30);\n2793-expression_statement-472-472", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2802 [label="472_ claimed_TOD30 = true;\n2802-expression_statement-473-473", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2807 [label="474_ function unhalt() public onlyAdmin{\n        ieoState = State.running;\n    }\n2807-function_definition-475-477", method="unhalt()", type_label=function_definition];
2810 [label="474_ onlyAdmin\n2810-expression_statement-475-475", method="unhalt()", type_label=expression_statement];
2813 [label="475_ ieoState = State.running;\n2813-expression_statement-476-476", method="unhalt()", type_label=expression_statement];
2819 [label="477_ bool claimed_TOD8 = false;\n2819-new_variable-478-478", method="", type_label=new_variable];
2825 [label="478_ address payable owner_TOD8;\n2825-new_variable-479-479", method="", type_label=new_variable];
2829 [label="479_ uint256 reward_TOD8;\n2829-new_variable-480-480", method="", type_label=new_variable];
2833 [label="480_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n2833-function_definition-481-486", method="setReward_TOD8()", type_label=function_definition];
2838 [label="481_ require (!claimed_TOD8);\n2838-expression_statement-482-482", method="setReward_TOD8()", type_label=expression_statement];
2844 [label="482_ require(msg.sender == owner_TOD8);\n2844-expression_statement-483-483", method="setReward_TOD8()", type_label=expression_statement];
2853 [label="483_ owner_TOD8.transfer(reward_TOD8);\n2853-expression_statement-484-484", method="setReward_TOD8()", type_label=expression_statement];
2860 [label="484_ reward_TOD8 = msg.value;\n2860-expression_statement-485-485", method="setReward_TOD8()", type_label=expression_statement];
2866 [label="486_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n2866-function_definition-487-492", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
2874 [label="487_ require (!claimed_TOD8);\n2874-expression_statement-488-488", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2880 [label="488_ require(submission < 10);\n2880-expression_statement-489-489", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2887 [label="489_ msg.sender.transfer(reward_TOD8);\n2887-expression_statement-490-490", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2896 [label="490_ claimed_TOD8 = true;\n2896-expression_statement-491-491", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2901 [label="492_ function changeDepositAddress(address payable newDeposit) public onlyAdmin{\n        deposit = newDeposit;\n    }\n2901-function_definition-493-495", method="changeDepositAddress(address payable newDeposit)", type_label=function_definition];
2908 [label="492_ onlyAdmin\n2908-expression_statement-493-493", method="changeDepositAddress(address payable newDeposit)", type_label=expression_statement];
2911 [label="493_ deposit = newDeposit;\n2911-expression_statement-494-494", method="changeDepositAddress(address payable newDeposit)", type_label=expression_statement];
2915 [label="495_ address payable winner_TOD39;\n2915-new_variable-496-496", method="", type_label=new_variable];
2919 [label="496_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n2919-function_definition-497-501", method="play_TOD39(bytes32 guess)", type_label=function_definition];
2927 [label="497_ if\n2927-if-498-500", method="play_TOD39(bytes32 guess)", type_label=if];
6537 [label="497_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
2949 [label="498_ winner_TOD39 = msg.sender;\n2949-expression_statement-499-499", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
2955 [label="501_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n2955-function_definition-502-504", method="getReward_TOD39()", type_label=function_definition];
2960 [label="502_ winner_TOD39.transfer(msg.value);\n2960-expression_statement-503-503", method="getReward_TOD39()", type_label=expression_statement];
2969 [label="504_ function getCurrentState() public view returns(State){\n        if(ieoState == State.halted){\n            return State.halted;\n        }else if(block.timestamp < saleStart){\n            return State.beforeStart;\n        }else if(block.timestamp >= saleStart && block.timestamp <= saleEnd){\n            return State.running;\n        }else{\n            return State.afterEnd;\n        }\n    }\n2969-function_definition-505-515", method="getCurrentState()", type_label=function_definition];
2979 [label="505_ if_ieoState == State.halted\n2979-if-506-514", method="getCurrentState()", type_label=if];
6589 [label="505_ end_if", method="getCurrentState()", type_label=end_if];
2986 [label="506_ return State.halted;\n2986-return-507-507", method="getCurrentState()", type_label=return];
2990 [label="507_ if_block.timestamp < saleStart\n2990-if-508-514", method="getCurrentState()", type_label=if];
2997 [label="508_ return State.beforeStart;\n2997-return-509-509", method="getCurrentState()", type_label=return];
3001 [label="509_ if_block.timestamp >= saleStart && block.timestamp <= saleEnd\n3001-if-510-514", method="getCurrentState()", type_label=if];
3014 [label="510_ return State.running;\n3014-return-511-511", method="getCurrentState()", type_label=return];
3019 [label="512_ return State.afterEnd;\n3019-return-513-513", method="getCurrentState()", type_label=return];
3023 [label="515_ bool claimed_TOD36 = false;\n3023-new_variable-516-516", method="", type_label=new_variable];
3029 [label="516_ address payable owner_TOD36;\n3029-new_variable-517-517", method="", type_label=new_variable];
3033 [label="517_ uint256 reward_TOD36;\n3033-new_variable-518-518", method="", type_label=new_variable];
3037 [label="518_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n3037-function_definition-519-524", method="setReward_TOD36()", type_label=function_definition];
3042 [label="519_ require (!claimed_TOD36);\n3042-expression_statement-520-520", method="setReward_TOD36()", type_label=expression_statement];
3048 [label="520_ require(msg.sender == owner_TOD36);\n3048-expression_statement-521-521", method="setReward_TOD36()", type_label=expression_statement];
3057 [label="521_ owner_TOD36.transfer(reward_TOD36);\n3057-expression_statement-522-522", method="setReward_TOD36()", type_label=expression_statement];
3064 [label="522_ reward_TOD36 = msg.value;\n3064-expression_statement-523-523", method="setReward_TOD36()", type_label=expression_statement];
3070 [label="524_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n3070-function_definition-525-530", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
3078 [label="525_ require (!claimed_TOD36);\n3078-expression_statement-526-526", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
3084 [label="526_ require(submission < 10);\n3084-expression_statement-527-527", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
3091 [label="527_ msg.sender.transfer(reward_TOD36);\n3091-expression_statement-528-528", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
3100 [label="528_ claimed_TOD36 = true;\n3100-expression_statement-529-529", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
3105 [label="530_ function invest() payable public returns(bool){\n        ieoState = getCurrentState();\n        require(ieoState == State.running);\n        require(msg.value >= minInvestment && msg.value <= maxInvestment);\n        uint tokens = msg.value / tokenPrice;\n        require(raisedAmount + msg.value <= hardCap);\n        raisedAmount += msg.value;\n        balances[msg.sender] += tokens;\n        balances[founder] -= tokens;\n        deposit.transfer(msg.value); \n        emit Invest(msg.sender, msg.value, tokens);\n        return true;\n    }\n3105-function_definition-531-543", method="invest()", type_label=function_definition];
3114 [label="531_ ieoState = getCurrentState();\n3114-expression_statement-532-532", method="invest()", type_label=expression_statement];
3119 [label="532_ require(ieoState == State.running);\n3119-expression_statement-533-533", method="invest()", type_label=expression_statement];
3128 [label="533_ require(msg.value >= minInvestment && msg.value <= maxInvestment);\n3128-expression_statement-534-534", method="invest()", type_label=expression_statement];
3143 [label="534_ uint tokens = msg.value / tokenPrice;\n3143-new_variable-535-535", method="invest()", type_label=new_variable];
3153 [label="535_ require(raisedAmount + msg.value <= hardCap);\n3153-expression_statement-536-536", method="invest()", type_label=expression_statement];
3164 [label="536_ raisedAmount += msg.value;\n3164-expression_statement-537-537", method="invest()", type_label=expression_statement];
3170 [label="537_ balances[msg.sender] += tokens;\n3170-expression_statement-538-538", method="invest()", type_label=expression_statement];
3178 [label="538_ balances[founder] -= tokens;\n3178-expression_statement-539-539", method="invest()", type_label=expression_statement];
3184 [label="539_ deposit.transfer(msg.value);\n3184-expression_statement-540-540", method="invest()", type_label=expression_statement];
3205 [label="541_ return true;\n3205-return-542-542", method="invest()", type_label=return];
3208 [label="543_ address payable winner_TOD35;\n3208-new_variable-544-544", method="", type_label=new_variable];
3212 [label="544_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n3212-function_definition-545-549", method="play_TOD35(bytes32 guess)", type_label=function_definition];
3220 [label="545_ if\n3220-if-546-548", method="play_TOD35(bytes32 guess)", type_label=if];
6830 [label="545_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
3242 [label="546_ winner_TOD35 = msg.sender;\n3242-expression_statement-547-547", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
3248 [label="549_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n3248-function_definition-550-552", method="getReward_TOD35()", type_label=function_definition];
3253 [label="550_ winner_TOD35.transfer(msg.value);\n3253-expression_statement-551-551", method="getReward_TOD35()", type_label=expression_statement];
3266 [label="553_ invest();\n3266-expression_statement-554-554", method="", type_label=expression_statement];
3269 [label="555_ bool claimed_TOD40 = false;\n3269-new_variable-556-556", method="", type_label=new_variable];
3275 [label="556_ address payable owner_TOD40;\n3275-new_variable-557-557", method="", type_label=new_variable];
3279 [label="557_ uint256 reward_TOD40;\n3279-new_variable-558-558", method="", type_label=new_variable];
3283 [label="558_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n3283-function_definition-559-564", method="setReward_TOD40()", type_label=function_definition];
3288 [label="559_ require (!claimed_TOD40);\n3288-expression_statement-560-560", method="setReward_TOD40()", type_label=expression_statement];
3294 [label="560_ require(msg.sender == owner_TOD40);\n3294-expression_statement-561-561", method="setReward_TOD40()", type_label=expression_statement];
3303 [label="561_ owner_TOD40.transfer(reward_TOD40);\n3303-expression_statement-562-562", method="setReward_TOD40()", type_label=expression_statement];
3310 [label="562_ reward_TOD40 = msg.value;\n3310-expression_statement-563-563", method="setReward_TOD40()", type_label=expression_statement];
3316 [label="564_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n3316-function_definition-565-570", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
3324 [label="565_ require (!claimed_TOD40);\n3324-expression_statement-566-566", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3330 [label="566_ require(submission < 10);\n3330-expression_statement-567-567", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3337 [label="567_ msg.sender.transfer(reward_TOD40);\n3337-expression_statement-568-568", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3346 [label="568_ claimed_TOD40 = true;\n3346-expression_statement-569-569", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
3351 [label="570_ function burn() public returns(bool){\n        ieoState = getCurrentState();\n        require(ieoState == State.afterEnd);\n        balances[founder] = 0;\n    }\n3351-function_definition-571-575", method="burn()", type_label=function_definition];
3359 [label="571_ ieoState = getCurrentState();\n3359-expression_statement-572-572", method="burn()", type_label=expression_statement];
3364 [label="572_ require(ieoState == State.afterEnd);\n3364-expression_statement-573-573", method="burn()", type_label=expression_statement];
3373 [label="573_ balances[founder] = 0;\n3373-expression_statement-574-574", method="burn()", type_label=expression_statement];
3379 [label="575_ address payable winner_TOD33;\n3379-new_variable-576-576", method="", type_label=new_variable];
3383 [label="576_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n3383-function_definition-577-581", method="play_TOD33(bytes32 guess)", type_label=function_definition];
3391 [label="577_ if\n3391-if-578-580", method="play_TOD33(bytes32 guess)", type_label=if];
7001 [label="577_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
3413 [label="578_ winner_TOD33 = msg.sender;\n3413-expression_statement-579-579", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
3419 [label="581_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n3419-function_definition-582-584", method="getReward_TOD33()", type_label=function_definition];
3424 [label="582_ winner_TOD33.transfer(msg.value);\n3424-expression_statement-583-583", method="getReward_TOD33()", type_label=expression_statement];
3433 [label="584_ function transfer(address to, uint value) public returns(bool){\n        require(block.timestamp > coinTradeStart);\n        super.transfer(to, value);\n    }\n3433-function_definition-585-588", method="transfer(address to,uint value)", type_label=function_definition];
3449 [label="585_ require(block.timestamp > coinTradeStart);\n3449-expression_statement-586-586", method="transfer(address to,uint value)", type_label=expression_statement];
3458 [label="586_ super.transfer(to, value);\n3458-expression_statement-587-587", method="transfer(address to,uint value)", type_label=expression_statement];
3467 [label="588_ address payable winner_TOD27;\n3467-new_variable-589-589", method="", type_label=new_variable];
3471 [label="589_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n3471-function_definition-590-594", method="play_TOD27(bytes32 guess)", type_label=function_definition];
3479 [label="590_ if\n3479-if-591-593", method="play_TOD27(bytes32 guess)", type_label=if];
7089 [label="590_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
3501 [label="591_ winner_TOD27 = msg.sender;\n3501-expression_statement-592-592", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
3507 [label="594_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n3507-function_definition-595-597", method="getReward_TOD27()", type_label=function_definition];
3512 [label="595_ winner_TOD27.transfer(msg.value);\n3512-expression_statement-596-596", method="getReward_TOD27()", type_label=expression_statement];
3521 [label="597_ function transferFrom(address _from, address _to, uint _value) public returns(bool){\n        require(block.timestamp > coinTradeStart);\n        super.transferFrom(_from, _to, _value);\n    }\n3521-function_definition-598-601", method="transferFrom(address _from,address _to,uint _value)", type_label=function_definition];
3541 [label="598_ require(block.timestamp > coinTradeStart);\n3541-expression_statement-599-599", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
3550 [label="599_ super.transferFrom(_from, _to, _value);\n3550-expression_statement-600-600", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
3561 [label="601_ address payable winner_TOD31;\n3561-new_variable-602-602", method="", type_label=new_variable];
3565 [label="602_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n3565-function_definition-603-607", method="play_TOD31(bytes32 guess)", type_label=function_definition];
3573 [label="603_ if\n3573-if-604-606", method="play_TOD31(bytes32 guess)", type_label=if];
7183 [label="603_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
3595 [label="604_ winner_TOD31 = msg.sender;\n3595-expression_statement-605-605", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
3601 [label="607_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n3601-function_definition-608-610", method="getReward_TOD31()", type_label=function_definition];
3606 [label="608_ winner_TOD31.transfer(msg.value);\n3606-expression_statement-609-609", method="getReward_TOD31()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
25 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 55  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
33 -> 3643  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3643 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 3643  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
61 -> 66  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
92 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 122  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
100 -> 3710  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3710 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 3710  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
128 -> 133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 192  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
170 -> 3780  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3780 -> 198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 3780  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
198 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 263  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
241 -> 3851  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3851 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 3851  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
269 -> 274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
311 -> 333  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
311 -> 3921  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3921 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 3921  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
339 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 407  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
385 -> 3995  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3995 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 3995  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
413 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
475 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 584  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
562 -> 4172  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4172 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 4172  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
590 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
672 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
733 -> 740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
754 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
760 -> 767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
767 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
800 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
811 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
820 -> 827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 907  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
885 -> 4495  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4495 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 4495  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
913 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
938 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
946 -> 968  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
946 -> 4556  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4556 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 4556  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
974 -> 979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1026 -> 1030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1030 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 1052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1083  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1089 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 1103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1103 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1147 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 1157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1161 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1172 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 1188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1194 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1202 -> 1208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 1215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1229 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1245 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1286 -> 1292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1292 -> 1296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1300 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1305 -> 1311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 1320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1320 -> 1327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1333 -> 1341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1341 -> 1347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1347 -> 1354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1354 -> 1363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1368 -> 1388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1388 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1408 -> 1414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1414 -> 1420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1420 -> 1428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1428 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1431 -> 1437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1437 -> 1441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1445 -> 1450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1456 -> 1465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1465 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1478 -> 1486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1499 -> 1508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1522 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1524 -> 1530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1530 -> 1534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1538 -> 1543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1543 -> 1549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1549 -> 1558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1558 -> 1565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1571 -> 1579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1579 -> 1585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1585 -> 1592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1592 -> 1601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1606 -> 1620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1620 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1628 -> 1636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1636 -> 1658  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1636 -> 5246  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5246 -> 1664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1658 -> 5246  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1664 -> 1669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1678 -> 1695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1695 -> 1710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1710 -> 1716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1734 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1741 -> 1749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1749 -> 1771  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1749 -> 5359  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5359 -> 1777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1771 -> 5359  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1777 -> 1782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1797 -> 1803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1811 -> 1816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1816 -> 1822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1822 -> 1831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1831 -> 1838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1844 -> 1852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1852 -> 1858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1858 -> 1865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1865 -> 1874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1879 -> 1884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1884 -> 1890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1890 -> 1894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1898 -> 1903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1903 -> 1909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1909 -> 1918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1918 -> 1925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1931 -> 1939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1939 -> 1945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1945 -> 1952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1952 -> 1961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1966 -> 1971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1975 -> 1983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1983 -> 2005  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1983 -> 5593  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5593 -> 2011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2005 -> 5593  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2011 -> 2016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2025 -> 2031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2031 -> 2037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2037 -> 2041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2045 -> 2050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2050 -> 2056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2056 -> 2065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2065 -> 2072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2078 -> 2086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2086 -> 2092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2092 -> 2099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2099 -> 2108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2113 -> 2120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2120 -> 2126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2126 -> 2130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2134 -> 2139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2139 -> 2145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2145 -> 2154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2154 -> 2161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2167 -> 2175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2175 -> 2181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2181 -> 2188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2188 -> 2197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2202 -> 2207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2207 -> 2213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2213 -> 2217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2221 -> 2226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2226 -> 2232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2232 -> 2241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2241 -> 2248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2254 -> 2262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2262 -> 2268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2268 -> 2275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2275 -> 2284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2289 -> 2295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2295 -> 2303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2303 -> 2311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2315 -> 2323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2323 -> 2345  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2323 -> 5933  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5933 -> 2351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2345 -> 5933  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2351 -> 2356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2365 -> 2372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2376 -> 2384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2384 -> 2406  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2384 -> 5994  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5994 -> 2412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2406 -> 5994  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2412 -> 2417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2439 -> 2445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2445 -> 2449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2453 -> 2458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2458 -> 2464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2464 -> 2473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2473 -> 2480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2486 -> 2494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2494 -> 2500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2500 -> 2507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2507 -> 2516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2521 -> 2527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2527 -> 2541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2530 -> 2539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2545 -> 2553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2553 -> 2575  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2553 -> 6163  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6163 -> 2581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2575 -> 6163  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2581 -> 2586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2615 -> 2619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2619 -> 2625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2631 -> 2637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2637 -> 2641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2645 -> 2650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2650 -> 2656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2656 -> 2665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2665 -> 2672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2678 -> 2686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2686 -> 2692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2692 -> 2699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2699 -> 2708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2713 -> 2719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2725 -> 2731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2731 -> 2735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2739 -> 2744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2744 -> 2750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2750 -> 2759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2759 -> 2766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2772 -> 2780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2780 -> 2786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2786 -> 2793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2793 -> 2802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2807 -> 2813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2819 -> 2825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2825 -> 2829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2833 -> 2838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2838 -> 2844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2844 -> 2853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2853 -> 2860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2866 -> 2874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2874 -> 2880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2880 -> 2887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2887 -> 2896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2901 -> 2911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2919 -> 2927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2927 -> 2949  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2927 -> 6537  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6537 -> 2955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2949 -> 6537  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2955 -> 2960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2969 -> 2979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2979 -> 2986  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2979 -> 2990  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6589 -> 3023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2986 -> 6589  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2986 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2990 -> 2997  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2990 -> 3001  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2997 -> 6589  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2997 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3001 -> 3014  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3001 -> 3019  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3014 -> 6589  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3014 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3019 -> 6589  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3019 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3023 -> 3029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3029 -> 3033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3037 -> 3042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3042 -> 3048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3048 -> 3057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3057 -> 3064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3070 -> 3078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3078 -> 3084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3084 -> 3091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3091 -> 3100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3105 -> 3114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3114 -> 3119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3119 -> 3128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3128 -> 3143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3143 -> 3153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3153 -> 3164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3164 -> 3170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3170 -> 3178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3178 -> 3184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3205 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3212 -> 3220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3220 -> 3242  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3220 -> 6830  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6830 -> 3248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3242 -> 6830  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3248 -> 3253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3269 -> 3275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3275 -> 3279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3283 -> 3288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3288 -> 3294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3294 -> 3303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3303 -> 3310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3316 -> 3324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3324 -> 3330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3330 -> 3337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3337 -> 3346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3351 -> 3359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3359 -> 3364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3364 -> 3373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3383 -> 3391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3391 -> 3413  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3391 -> 7001  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7001 -> 3419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3413 -> 7001  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3419 -> 3424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3433 -> 3449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3449 -> 3458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3471 -> 3479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3479 -> 3501  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3479 -> 7089  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7089 -> 3507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3501 -> 7089  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3507 -> 3512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3521 -> 3541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3541 -> 3550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3565 -> 3573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3573 -> 3595  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3573 -> 7183  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7183 -> 3601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3595 -> 7183  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3601 -> 3606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
