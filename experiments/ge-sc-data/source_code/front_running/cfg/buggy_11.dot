digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ address payable winner_TOD37;\n154-new_variable-22-22", method="", type_label=new_variable];
158 [label="22_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n158-function_definition-23-27", method="play_TOD37(bytes32 guess)", type_label=function_definition];
166 [label="23_ if\n166-if-24-26", method="play_TOD37(bytes32 guess)", type_label=if];
3031 [label="23_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
188 [label="24_ winner_TOD37 = msg.sender;\n188-expression_statement-25-25", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
194 [label="27_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n194-function_definition-28-30", method="getReward_TOD37()", type_label=function_definition];
199 [label="28_ winner_TOD37.transfer(msg.value);\n199-expression_statement-29-29", method="getReward_TOD37()", type_label=expression_statement];
208 [label="30_ function balanceOf(address tokenOwner) public view returns (uint balance);\n208-function_definition-31-31", method="balanceOf(address tokenOwner)", type_label=function_definition];
221 [label="31_ address payable winner_TOD3;\n221-new_variable-32-32", method="", type_label=new_variable];
225 [label="32_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n225-function_definition-33-37", method="play_TOD3(bytes32 guess)", type_label=function_definition];
233 [label="33_ if\n233-if-34-36", method="play_TOD3(bytes32 guess)", type_label=if];
3098 [label="33_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
255 [label="34_ winner_TOD3 = msg.sender;\n255-expression_statement-35-35", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
261 [label="37_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n261-function_definition-38-40", method="getReward_TOD3()", type_label=function_definition];
266 [label="38_ winner_TOD3.transfer(msg.value);\n266-expression_statement-39-39", method="getReward_TOD3()", type_label=expression_statement];
275 [label="40_ function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n275-function_definition-41-41", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
292 [label="41_ address payable winner_TOD9;\n292-new_variable-42-42", method="", type_label=new_variable];
296 [label="42_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n296-function_definition-43-47", method="play_TOD9(bytes32 guess)", type_label=function_definition];
304 [label="43_ if\n304-if-44-46", method="play_TOD9(bytes32 guess)", type_label=if];
3169 [label="43_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
326 [label="44_ winner_TOD9 = msg.sender;\n326-expression_statement-45-45", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
332 [label="47_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n332-function_definition-48-50", method="getReward_TOD9()", type_label=function_definition];
337 [label="48_ winner_TOD9.transfer(msg.value);\n337-expression_statement-49-49", method="getReward_TOD9()", type_label=expression_statement];
346 [label="50_ function transfer(address to, uint tokens) public returns (bool success);\n346-function_definition-51-51", method="transfer(address to,uint tokens)", type_label=function_definition];
362 [label="51_ address payable winner_TOD25;\n362-new_variable-52-52", method="", type_label=new_variable];
366 [label="52_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n366-function_definition-53-57", method="play_TOD25(bytes32 guess)", type_label=function_definition];
374 [label="53_ if\n374-if-54-56", method="play_TOD25(bytes32 guess)", type_label=if];
3239 [label="53_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
396 [label="54_ winner_TOD25 = msg.sender;\n396-expression_statement-55-55", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
402 [label="57_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n402-function_definition-58-60", method="getReward_TOD25()", type_label=function_definition];
407 [label="58_ winner_TOD25.transfer(msg.value);\n407-expression_statement-59-59", method="getReward_TOD25()", type_label=expression_statement];
416 [label="60_ function approve(address spender, uint tokens) public returns (bool success);\n416-function_definition-61-61", method="approve(address spender,uint tokens)", type_label=function_definition];
432 [label="61_ address payable winner_TOD19;\n432-new_variable-62-62", method="", type_label=new_variable];
436 [label="62_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n436-function_definition-63-67", method="play_TOD19(bytes32 guess)", type_label=function_definition];
444 [label="63_ if\n444-if-64-66", method="play_TOD19(bytes32 guess)", type_label=if];
3309 [label="63_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
466 [label="64_ winner_TOD19 = msg.sender;\n466-expression_statement-65-65", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
472 [label="67_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n472-function_definition-68-70", method="getReward_TOD19()", type_label=function_definition];
477 [label="68_ winner_TOD19.transfer(msg.value);\n477-expression_statement-69-69", method="getReward_TOD19()", type_label=expression_statement];
486 [label="70_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n486-function_definition-71-71", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
506 [label="71_ bool claimed_TOD26 = false;\n506-new_variable-72-72", method="", type_label=new_variable];
512 [label="72_ address payable owner_TOD26;\n512-new_variable-73-73", method="", type_label=new_variable];
516 [label="73_ uint256 reward_TOD26;\n516-new_variable-74-74", method="", type_label=new_variable];
520 [label="74_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n520-function_definition-75-80", method="setReward_TOD26()", type_label=function_definition];
525 [label="75_ require (!claimed_TOD26);\n525-expression_statement-76-76", method="setReward_TOD26()", type_label=expression_statement];
531 [label="76_ require(msg.sender == owner_TOD26);\n531-expression_statement-77-77", method="setReward_TOD26()", type_label=expression_statement];
540 [label="77_ owner_TOD26.transfer(reward_TOD26);\n540-expression_statement-78-78", method="setReward_TOD26()", type_label=expression_statement];
547 [label="78_ reward_TOD26 = msg.value;\n547-expression_statement-79-79", method="setReward_TOD26()", type_label=expression_statement];
553 [label="80_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n553-function_definition-81-86", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
561 [label="81_ require (!claimed_TOD26);\n561-expression_statement-82-82", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
567 [label="82_ require(submission < 10);\n567-expression_statement-83-83", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
574 [label="83_ msg.sender.transfer(reward_TOD26);\n574-expression_statement-84-84", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
583 [label="84_ claimed_TOD26 = true;\n583-expression_statement-85-85", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
588 [label="86_ address payable winner_TOD27;\n588-new_variable-87-87", method="", type_label=new_variable];
592 [label="87_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n592-function_definition-88-92", method="play_TOD27(bytes32 guess)", type_label=function_definition];
600 [label="88_ if\n600-if-89-91", method="play_TOD27(bytes32 guess)", type_label=if];
3465 [label="88_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
622 [label="89_ winner_TOD27 = msg.sender;\n622-expression_statement-90-90", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
628 [label="92_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n628-function_definition-93-95", method="getReward_TOD27()", type_label=function_definition];
633 [label="93_ winner_TOD27.transfer(msg.value);\n633-expression_statement-94-94", method="getReward_TOD27()", type_label=expression_statement];
656 [label="96_ address payable winner_TOD31;\n656-new_variable-97-97", method="", type_label=new_variable];
660 [label="97_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n660-function_definition-98-102", method="play_TOD31(bytes32 guess)", type_label=function_definition];
668 [label="98_ if\n668-if-99-101", method="play_TOD31(bytes32 guess)", type_label=if];
3533 [label="98_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
690 [label="99_ winner_TOD31 = msg.sender;\n690-expression_statement-100-100", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
696 [label="102_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n696-function_definition-103-105", method="getReward_TOD31()", type_label=function_definition];
701 [label="103_ winner_TOD31.transfer(msg.value);\n701-expression_statement-104-104", method="getReward_TOD31()", type_label=expression_statement];
727 [label="108_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n727-function_definition-109-109", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
746 [label="109_ bool claimed_TOD20 = false;\n746-new_variable-110-110", method="", type_label=new_variable];
752 [label="110_ address payable owner_TOD20;\n752-new_variable-111-111", method="", type_label=new_variable];
756 [label="111_ uint256 reward_TOD20;\n756-new_variable-112-112", method="", type_label=new_variable];
760 [label="112_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n760-function_definition-113-118", method="setReward_TOD20()", type_label=function_definition];
765 [label="113_ require (!claimed_TOD20);\n765-expression_statement-114-114", method="setReward_TOD20()", type_label=expression_statement];
771 [label="114_ require(msg.sender == owner_TOD20);\n771-expression_statement-115-115", method="setReward_TOD20()", type_label=expression_statement];
780 [label="115_ owner_TOD20.transfer(reward_TOD20);\n780-expression_statement-116-116", method="setReward_TOD20()", type_label=expression_statement];
787 [label="116_ reward_TOD20 = msg.value;\n787-expression_statement-117-117", method="setReward_TOD20()", type_label=expression_statement];
793 [label="118_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n793-function_definition-119-124", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
801 [label="119_ require (!claimed_TOD20);\n801-expression_statement-120-120", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
807 [label="120_ require(submission < 10);\n807-expression_statement-121-121", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
814 [label="121_ msg.sender.transfer(reward_TOD20);\n814-expression_statement-122-122", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
823 [label="122_ claimed_TOD20 = true;\n823-expression_statement-123-123", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
831 [label="126_ address payable winner_TOD21;\n831-new_variable-127-127", method="", type_label=new_variable];
835 [label="127_ function play_TOD21(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD21 = msg.sender;\n        }\n    }\n835-function_definition-128-132", method="play_TOD21(bytes32 guess)", type_label=function_definition];
843 [label="128_ if\n843-if-129-131", method="play_TOD21(bytes32 guess)", type_label=if];
3708 [label="128_ end_if", method="play_TOD21(bytes32 guess)", type_label=end_if];
865 [label="129_ winner_TOD21 = msg.sender;\n865-expression_statement-130-130", method="play_TOD21(bytes32 guess)", type_label=expression_statement];
871 [label="132_ function getReward_TOD21() payable public{\n       winner_TOD21.transfer(msg.value);\n    }\n871-function_definition-133-135", method="getReward_TOD21()", type_label=function_definition];
876 [label="133_ winner_TOD21.transfer(msg.value);\n876-expression_statement-134-134", method="getReward_TOD21()", type_label=expression_statement];
885 [label="135_ address public owner;\n885-new_variable-136-136", method="", type_label=new_variable];
890 [label="136_ bool claimed_TOD10 = false;\n890-new_variable-137-137", method="", type_label=new_variable];
896 [label="137_ address payable owner_TOD10;\n896-new_variable-138-138", method="", type_label=new_variable];
900 [label="138_ uint256 reward_TOD10;\n900-new_variable-139-139", method="", type_label=new_variable];
904 [label="139_ function setReward_TOD10() public payable {\n        require (!claimed_TOD10);\n        require(msg.sender == owner_TOD10);\n        owner_TOD10.transfer(reward_TOD10);\n        reward_TOD10 = msg.value;\n    }\n904-function_definition-140-145", method="setReward_TOD10()", type_label=function_definition];
909 [label="140_ require (!claimed_TOD10);\n909-expression_statement-141-141", method="setReward_TOD10()", type_label=expression_statement];
915 [label="141_ require(msg.sender == owner_TOD10);\n915-expression_statement-142-142", method="setReward_TOD10()", type_label=expression_statement];
924 [label="142_ owner_TOD10.transfer(reward_TOD10);\n924-expression_statement-143-143", method="setReward_TOD10()", type_label=expression_statement];
931 [label="143_ reward_TOD10 = msg.value;\n931-expression_statement-144-144", method="setReward_TOD10()", type_label=expression_statement];
937 [label="145_ function claimReward_TOD10(uint256 submission) public {\n        require (!claimed_TOD10);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD10);\n        claimed_TOD10 = true;\n    }\n937-function_definition-146-151", method="claimReward_TOD10(uint256 submission)", type_label=function_definition];
945 [label="146_ require (!claimed_TOD10);\n945-expression_statement-147-147", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
951 [label="147_ require(submission < 10);\n951-expression_statement-148-148", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
958 [label="148_ msg.sender.transfer(reward_TOD10);\n958-expression_statement-149-149", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
967 [label="149_ claimed_TOD10 = true;\n967-expression_statement-150-150", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
972 [label="151_ address public newOwner;\n972-new_variable-152-152", method="", type_label=new_variable];
977 [label="152_ address payable winner_TOD13;\n977-new_variable-153-153", method="", type_label=new_variable];
981 [label="153_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n981-function_definition-154-158", method="play_TOD13(bytes32 guess)", type_label=function_definition];
989 [label="154_ if\n989-if-155-157", method="play_TOD13(bytes32 guess)", type_label=if];
3854 [label="154_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
1011 [label="155_ winner_TOD13 = msg.sender;\n1011-expression_statement-156-156", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
1017 [label="158_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n1017-function_definition-159-161", method="getReward_TOD13()", type_label=function_definition];
1022 [label="159_ winner_TOD13.transfer(msg.value);\n1022-expression_statement-160-160", method="getReward_TOD13()", type_label=expression_statement];
1043 [label="163_ owner = msg.sender;\n1043-expression_statement-164-164", method="", type_label=expression_statement];
1049 [label="165_ bool claimed_TOD32 = false;\n1049-new_variable-166-166", method="", type_label=new_variable];
1055 [label="166_ address payable owner_TOD32;\n1055-new_variable-167-167", method="", type_label=new_variable];
1059 [label="167_ uint256 reward_TOD32;\n1059-new_variable-168-168", method="", type_label=new_variable];
1063 [label="168_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n1063-function_definition-169-174", method="setReward_TOD32()", type_label=function_definition];
1068 [label="169_ require (!claimed_TOD32);\n1068-expression_statement-170-170", method="setReward_TOD32()", type_label=expression_statement];
1074 [label="170_ require(msg.sender == owner_TOD32);\n1074-expression_statement-171-171", method="setReward_TOD32()", type_label=expression_statement];
1083 [label="171_ owner_TOD32.transfer(reward_TOD32);\n1083-expression_statement-172-172", method="setReward_TOD32()", type_label=expression_statement];
1090 [label="172_ reward_TOD32 = msg.value;\n1090-expression_statement-173-173", method="setReward_TOD32()", type_label=expression_statement];
1096 [label="174_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n1096-function_definition-175-180", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
1104 [label="175_ require (!claimed_TOD32);\n1104-expression_statement-176-176", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1110 [label="176_ require(submission < 10);\n1110-expression_statement-177-177", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1117 [label="177_ msg.sender.transfer(reward_TOD32);\n1117-expression_statement-178-178", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1126 [label="178_ claimed_TOD32 = true;\n1126-expression_statement-179-179", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
1131 [label="180_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n1131-expression_statement-181-184", method="", type_label=expression_statement];
1134 [label="181_ require(msg.sender == owner);\n1134-expression_statement-182-182", method="", type_label=expression_statement];
1143 [label="182_ _;\n1143-expression_statement-183-183", method="", type_label=expression_statement];
1145 [label="184_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n1145-function_definition-185-187", method="transferOwnership(address _newOwner)", type_label=function_definition];
1152 [label="184_ onlyOwner\n1152-expression_statement-185-185", method="transferOwnership(address _newOwner)", type_label=expression_statement];
1155 [label="185_ newOwner = _newOwner;\n1155-expression_statement-186-186", method="transferOwnership(address _newOwner)", type_label=expression_statement];
1159 [label="187_ bool claimed_TOD38 = false;\n1159-new_variable-188-188", method="", type_label=new_variable];
1165 [label="188_ address payable owner_TOD38;\n1165-new_variable-189-189", method="", type_label=new_variable];
1169 [label="189_ uint256 reward_TOD38;\n1169-new_variable-190-190", method="", type_label=new_variable];
1173 [label="190_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n1173-function_definition-191-196", method="setReward_TOD38()", type_label=function_definition];
1178 [label="191_ require (!claimed_TOD38);\n1178-expression_statement-192-192", method="setReward_TOD38()", type_label=expression_statement];
1184 [label="192_ require(msg.sender == owner_TOD38);\n1184-expression_statement-193-193", method="setReward_TOD38()", type_label=expression_statement];
1193 [label="193_ owner_TOD38.transfer(reward_TOD38);\n1193-expression_statement-194-194", method="setReward_TOD38()", type_label=expression_statement];
1200 [label="194_ reward_TOD38 = msg.value;\n1200-expression_statement-195-195", method="setReward_TOD38()", type_label=expression_statement];
1206 [label="196_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n1206-function_definition-197-202", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
1214 [label="197_ require (!claimed_TOD38);\n1214-expression_statement-198-198", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1220 [label="198_ require(submission < 10);\n1220-expression_statement-199-199", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1227 [label="199_ msg.sender.transfer(reward_TOD38);\n1227-expression_statement-200-200", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1236 [label="200_ claimed_TOD38 = true;\n1236-expression_statement-201-201", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1241 [label="202_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n1241-function_definition-203-208", method="acceptOwnership()", type_label=function_definition];
1245 [label="203_ require(msg.sender == newOwner);\n1245-expression_statement-204-204", method="acceptOwnership()", type_label=expression_statement];
1260 [label="205_ owner = newOwner;\n1260-expression_statement-206-206", method="acceptOwnership()", type_label=expression_statement];
1264 [label="206_ newOwner = address(0);\n1264-expression_statement-207-207", method="acceptOwnership()", type_label=expression_statement];
1270 [label="208_ bool claimed_TOD4 = false;\n1270-new_variable-209-209", method="", type_label=new_variable];
1276 [label="209_ address payable owner_TOD4;\n1276-new_variable-210-210", method="", type_label=new_variable];
1280 [label="210_ uint256 reward_TOD4;\n1280-new_variable-211-211", method="", type_label=new_variable];
1284 [label="211_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n1284-function_definition-212-217", method="setReward_TOD4()", type_label=function_definition];
1289 [label="212_ require (!claimed_TOD4);\n1289-expression_statement-213-213", method="setReward_TOD4()", type_label=expression_statement];
1295 [label="213_ require(msg.sender == owner_TOD4);\n1295-expression_statement-214-214", method="setReward_TOD4()", type_label=expression_statement];
1304 [label="214_ owner_TOD4.transfer(reward_TOD4);\n1304-expression_statement-215-215", method="setReward_TOD4()", type_label=expression_statement];
1311 [label="215_ reward_TOD4 = msg.value;\n1311-expression_statement-216-216", method="setReward_TOD4()", type_label=expression_statement];
1317 [label="217_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n1317-function_definition-218-223", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
1325 [label="218_ require (!claimed_TOD4);\n1325-expression_statement-219-219", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1331 [label="219_ require(submission < 10);\n1331-expression_statement-220-220", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1338 [label="220_ msg.sender.transfer(reward_TOD4);\n1338-expression_statement-221-221", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1347 [label="221_ claimed_TOD4 = true;\n1347-expression_statement-222-222", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1366 [label="226_ bool claimed_TOD22 = false;\n1366-new_variable-227-227", method="", type_label=new_variable];
1372 [label="227_ address payable owner_TOD22;\n1372-new_variable-228-228", method="", type_label=new_variable];
1376 [label="228_ uint256 reward_TOD22;\n1376-new_variable-229-229", method="", type_label=new_variable];
1380 [label="229_ function setReward_TOD22() public payable {\n        require (!claimed_TOD22);\n        require(msg.sender == owner_TOD22);\n        owner_TOD22.transfer(reward_TOD22);\n        reward_TOD22 = msg.value;\n    }\n1380-function_definition-230-235", method="setReward_TOD22()", type_label=function_definition];
1385 [label="230_ require (!claimed_TOD22);\n1385-expression_statement-231-231", method="setReward_TOD22()", type_label=expression_statement];
1391 [label="231_ require(msg.sender == owner_TOD22);\n1391-expression_statement-232-232", method="setReward_TOD22()", type_label=expression_statement];
1400 [label="232_ owner_TOD22.transfer(reward_TOD22);\n1400-expression_statement-233-233", method="setReward_TOD22()", type_label=expression_statement];
1407 [label="233_ reward_TOD22 = msg.value;\n1407-expression_statement-234-234", method="setReward_TOD22()", type_label=expression_statement];
1413 [label="235_ function claimReward_TOD22(uint256 submission) public {\n        require (!claimed_TOD22);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD22);\n        claimed_TOD22 = true;\n    }\n1413-function_definition-236-241", method="claimReward_TOD22(uint256 submission)", type_label=function_definition];
1421 [label="236_ require (!claimed_TOD22);\n1421-expression_statement-237-237", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1427 [label="237_ require(submission < 10);\n1427-expression_statement-238-238", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1434 [label="238_ msg.sender.transfer(reward_TOD22);\n1434-expression_statement-239-239", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1443 [label="239_ claimed_TOD22 = true;\n1443-expression_statement-240-240", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1448 [label="241_ string public symbol;\n1448-new_variable-242-242", method="", type_label=new_variable];
1453 [label="242_ bool claimed_TOD12 = false;\n1453-new_variable-243-243", method="", type_label=new_variable];
1459 [label="243_ address payable owner_TOD12;\n1459-new_variable-244-244", method="", type_label=new_variable];
1463 [label="244_ uint256 reward_TOD12;\n1463-new_variable-245-245", method="", type_label=new_variable];
1467 [label="245_ function setReward_TOD12() public payable {\n        require (!claimed_TOD12);\n        require(msg.sender == owner_TOD12);\n        owner_TOD12.transfer(reward_TOD12);\n        reward_TOD12 = msg.value;\n    }\n1467-function_definition-246-251", method="setReward_TOD12()", type_label=function_definition];
1472 [label="246_ require (!claimed_TOD12);\n1472-expression_statement-247-247", method="setReward_TOD12()", type_label=expression_statement];
1478 [label="247_ require(msg.sender == owner_TOD12);\n1478-expression_statement-248-248", method="setReward_TOD12()", type_label=expression_statement];
1487 [label="248_ owner_TOD12.transfer(reward_TOD12);\n1487-expression_statement-249-249", method="setReward_TOD12()", type_label=expression_statement];
1494 [label="249_ reward_TOD12 = msg.value;\n1494-expression_statement-250-250", method="setReward_TOD12()", type_label=expression_statement];
1500 [label="251_ function claimReward_TOD12(uint256 submission) public {\n        require (!claimed_TOD12);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD12);\n        claimed_TOD12 = true;\n    }\n1500-function_definition-252-257", method="claimReward_TOD12(uint256 submission)", type_label=function_definition];
1508 [label="252_ require (!claimed_TOD12);\n1508-expression_statement-253-253", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1514 [label="253_ require(submission < 10);\n1514-expression_statement-254-254", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1521 [label="254_ msg.sender.transfer(reward_TOD12);\n1521-expression_statement-255-255", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1530 [label="255_ claimed_TOD12 = true;\n1530-expression_statement-256-256", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1535 [label="257_ uint public decimals;\n1535-new_variable-258-258", method="", type_label=new_variable];
1540 [label="258_ address payable winner_TOD11;\n1540-new_variable-259-259", method="", type_label=new_variable];
1544 [label="259_ function play_TOD11(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD11 = msg.sender;\n        }\n    }\n1544-function_definition-260-264", method="play_TOD11(bytes32 guess)", type_label=function_definition];
1552 [label="260_ if\n1552-if-261-263", method="play_TOD11(bytes32 guess)", type_label=if];
4417 [label="260_ end_if", method="play_TOD11(bytes32 guess)", type_label=end_if];
1574 [label="261_ winner_TOD11 = msg.sender;\n1574-expression_statement-262-262", method="play_TOD11(bytes32 guess)", type_label=expression_statement];
1580 [label="264_ function getReward_TOD11() payable public{\n       winner_TOD11.transfer(msg.value);\n    }\n1580-function_definition-265-267", method="getReward_TOD11()", type_label=function_definition];
1585 [label="265_ winner_TOD11.transfer(msg.value);\n1585-expression_statement-266-266", method="getReward_TOD11()", type_label=expression_statement];
1594 [label="267_ string public  name;\n1594-new_variable-268-268", method="", type_label=new_variable];
1599 [label="268_ address payable winner_TOD1;\n1599-new_variable-269-269", method="", type_label=new_variable];
1603 [label="269_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n1603-function_definition-270-274", method="play_TOD1(bytes32 guess)", type_label=function_definition];
1611 [label="270_ if\n1611-if-271-273", method="play_TOD1(bytes32 guess)", type_label=if];
4476 [label="270_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
1633 [label="271_ winner_TOD1 = msg.sender;\n1633-expression_statement-272-272", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
1639 [label="274_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n1639-function_definition-275-277", method="getReward_TOD1()", type_label=function_definition];
1644 [label="275_ winner_TOD1.transfer(msg.value);\n1644-expression_statement-276-276", method="getReward_TOD1()", type_label=expression_statement];
1653 [label="277_ uint _totalSupply;\n1653-new_variable-278-278", method="", type_label=new_variable];
1657 [label="278_ bool claimed_TOD2 = false;\n1657-new_variable-279-279", method="", type_label=new_variable];
1663 [label="279_ address payable owner_TOD2;\n1663-new_variable-280-280", method="", type_label=new_variable];
1667 [label="280_ uint256 reward_TOD2;\n1667-new_variable-281-281", method="", type_label=new_variable];
1671 [label="281_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n1671-function_definition-282-287", method="setReward_TOD2()", type_label=function_definition];
1676 [label="282_ require (!claimed_TOD2);\n1676-expression_statement-283-283", method="setReward_TOD2()", type_label=expression_statement];
1682 [label="283_ require(msg.sender == owner_TOD2);\n1682-expression_statement-284-284", method="setReward_TOD2()", type_label=expression_statement];
1691 [label="284_ owner_TOD2.transfer(reward_TOD2);\n1691-expression_statement-285-285", method="setReward_TOD2()", type_label=expression_statement];
1698 [label="285_ reward_TOD2 = msg.value;\n1698-expression_statement-286-286", method="setReward_TOD2()", type_label=expression_statement];
1704 [label="287_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n1704-function_definition-288-293", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
1712 [label="288_ require (!claimed_TOD2);\n1712-expression_statement-289-289", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1718 [label="289_ require(submission < 10);\n1718-expression_statement-290-290", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1725 [label="290_ msg.sender.transfer(reward_TOD2);\n1725-expression_statement-291-291", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1734 [label="291_ claimed_TOD2 = true;\n1734-expression_statement-292-292", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
1739 [label="293_ mapping(address => uint) balances;\n1739-new_variable-294-294", method="", type_label=new_variable];
1745 [label="294_ address payable winner_TOD17;\n1745-new_variable-295-295", method="", type_label=new_variable];
1749 [label="295_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n1749-function_definition-296-300", method="play_TOD17(bytes32 guess)", type_label=function_definition];
1757 [label="296_ if\n1757-if-297-299", method="play_TOD17(bytes32 guess)", type_label=if];
4622 [label="296_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
1779 [label="297_ winner_TOD17 = msg.sender;\n1779-expression_statement-298-298", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
1785 [label="300_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n1785-function_definition-301-303", method="getReward_TOD17()", type_label=function_definition];
1790 [label="301_ winner_TOD17.transfer(msg.value);\n1790-expression_statement-302-302", method="getReward_TOD17()", type_label=expression_statement];
1799 [label="303_ mapping(address => mapping(address => uint)) allowed;\n1799-new_variable-304-304", method="", type_label=new_variable];
1809 [label="305_ symbol = \"FTB\";\n1809-expression_statement-306-306", method="", type_label=expression_statement];
1814 [label="306_ name = \"ForTheBlockchain\";\n1814-expression_statement-307-307", method="", type_label=expression_statement];
1819 [label="307_ decimals = 8;\n1819-expression_statement-308-308", method="", type_label=expression_statement];
1823 [label="308_ _totalSupply =100000000 * 10**(decimals);\n1823-expression_statement-309-309", method="", type_label=expression_statement];
1832 [label="309_ balances[owner] = _totalSupply;\n1832-expression_statement-310-310", method="", type_label=expression_statement];
1848 [label="312_ address payable winner_TOD7;\n1848-new_variable-313-313", method="", type_label=new_variable];
1852 [label="313_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n1852-function_definition-314-318", method="play_TOD7(bytes32 guess)", type_label=function_definition];
1860 [label="314_ if\n1860-if-315-317", method="play_TOD7(bytes32 guess)", type_label=if];
4725 [label="314_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
1882 [label="315_ winner_TOD7 = msg.sender;\n1882-expression_statement-316-316", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
1888 [label="318_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n1888-function_definition-319-321", method="getReward_TOD7()", type_label=function_definition];
1893 [label="319_ winner_TOD7.transfer(msg.value);\n1893-expression_statement-320-320", method="getReward_TOD7()", type_label=expression_statement];
1902 [label="321_ function totalSupply() public view returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n1902-function_definition-322-324", method="totalSupply()", type_label=function_definition];
1911 [label="322_ return _totalSupply.sub(balances[address(0)]);\n1911-return-323-323", method="totalSupply()", type_label=return];
1922 [label="324_ address payable winner_TOD23;\n1922-new_variable-325-325", method="", type_label=new_variable];
1926 [label="325_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n1926-function_definition-326-330", method="play_TOD23(bytes32 guess)", type_label=function_definition];
1934 [label="326_ if\n1934-if-327-329", method="play_TOD23(bytes32 guess)", type_label=if];
4799 [label="326_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
1956 [label="327_ winner_TOD23 = msg.sender;\n1956-expression_statement-328-328", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
1962 [label="330_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n1962-function_definition-331-333", method="getReward_TOD23()", type_label=function_definition];
1967 [label="331_ winner_TOD23.transfer(msg.value);\n1967-expression_statement-332-332", method="getReward_TOD23()", type_label=expression_statement];
1976 [label="333_ function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n1976-function_definition-334-336", method="balanceOf(address tokenOwner)", type_label=function_definition];
1990 [label="334_ return balances[tokenOwner];\n1990-return-335-335", method="balanceOf(address tokenOwner)", type_label=return];
1994 [label="336_ bool claimed_TOD14 = false;\n1994-new_variable-337-337", method="", type_label=new_variable];
2000 [label="337_ address payable owner_TOD14;\n2000-new_variable-338-338", method="", type_label=new_variable];
2004 [label="338_ uint256 reward_TOD14;\n2004-new_variable-339-339", method="", type_label=new_variable];
2008 [label="339_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n2008-function_definition-340-345", method="setReward_TOD14()", type_label=function_definition];
2013 [label="340_ require (!claimed_TOD14);\n2013-expression_statement-341-341", method="setReward_TOD14()", type_label=expression_statement];
2019 [label="341_ require(msg.sender == owner_TOD14);\n2019-expression_statement-342-342", method="setReward_TOD14()", type_label=expression_statement];
2028 [label="342_ owner_TOD14.transfer(reward_TOD14);\n2028-expression_statement-343-343", method="setReward_TOD14()", type_label=expression_statement];
2035 [label="343_ reward_TOD14 = msg.value;\n2035-expression_statement-344-344", method="setReward_TOD14()", type_label=expression_statement];
2041 [label="345_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n2041-function_definition-346-351", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
2049 [label="346_ require (!claimed_TOD14);\n2049-expression_statement-347-347", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2055 [label="347_ require(submission < 10);\n2055-expression_statement-348-348", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2062 [label="348_ msg.sender.transfer(reward_TOD14);\n2062-expression_statement-349-349", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2071 [label="349_ claimed_TOD14 = true;\n2071-expression_statement-350-350", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
2076 [label="351_ function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n2076-function_definition-352-357", method="transfer(address to,uint tokens)", type_label=function_definition];
2093 [label="352_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n2093-expression_statement-353-353", method="transfer(address to,uint tokens)", type_label=expression_statement];
2110 [label="353_ balances[to] = balances[to].add(tokens);\n2110-expression_statement-354-354", method="transfer(address to,uint tokens)", type_label=expression_statement];
2133 [label="355_ return true;\n2133-return-356-356", method="transfer(address to,uint tokens)", type_label=return];
2136 [label="357_ bool claimed_TOD30 = false;\n2136-new_variable-358-358", method="", type_label=new_variable];
2142 [label="358_ address payable owner_TOD30;\n2142-new_variable-359-359", method="", type_label=new_variable];
2146 [label="359_ uint256 reward_TOD30;\n2146-new_variable-360-360", method="", type_label=new_variable];
2150 [label="360_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n2150-function_definition-361-366", method="setReward_TOD30()", type_label=function_definition];
2155 [label="361_ require (!claimed_TOD30);\n2155-expression_statement-362-362", method="setReward_TOD30()", type_label=expression_statement];
2161 [label="362_ require(msg.sender == owner_TOD30);\n2161-expression_statement-363-363", method="setReward_TOD30()", type_label=expression_statement];
2170 [label="363_ owner_TOD30.transfer(reward_TOD30);\n2170-expression_statement-364-364", method="setReward_TOD30()", type_label=expression_statement];
2177 [label="364_ reward_TOD30 = msg.value;\n2177-expression_statement-365-365", method="setReward_TOD30()", type_label=expression_statement];
2183 [label="366_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n2183-function_definition-367-372", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
2191 [label="367_ require (!claimed_TOD30);\n2191-expression_statement-368-368", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2197 [label="368_ require(submission < 10);\n2197-expression_statement-369-369", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2204 [label="369_ msg.sender.transfer(reward_TOD30);\n2204-expression_statement-370-370", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2213 [label="370_ claimed_TOD30 = true;\n2213-expression_statement-371-371", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
2218 [label="372_ function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n2218-function_definition-373-377", method="approve(address spender,uint tokens)", type_label=function_definition];
2235 [label="373_ allowed[msg.sender][spender] = tokens;\n2235-expression_statement-374-374", method="approve(address spender,uint tokens)", type_label=expression_statement];
2255 [label="375_ return true;\n2255-return-376-376", method="approve(address spender,uint tokens)", type_label=return];
2258 [label="377_ bool claimed_TOD8 = false;\n2258-new_variable-378-378", method="", type_label=new_variable];
2264 [label="378_ address payable owner_TOD8;\n2264-new_variable-379-379", method="", type_label=new_variable];
2268 [label="379_ uint256 reward_TOD8;\n2268-new_variable-380-380", method="", type_label=new_variable];
2272 [label="380_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n2272-function_definition-381-386", method="setReward_TOD8()", type_label=function_definition];
2277 [label="381_ require (!claimed_TOD8);\n2277-expression_statement-382-382", method="setReward_TOD8()", type_label=expression_statement];
2283 [label="382_ require(msg.sender == owner_TOD8);\n2283-expression_statement-383-383", method="setReward_TOD8()", type_label=expression_statement];
2292 [label="383_ owner_TOD8.transfer(reward_TOD8);\n2292-expression_statement-384-384", method="setReward_TOD8()", type_label=expression_statement];
2299 [label="384_ reward_TOD8 = msg.value;\n2299-expression_statement-385-385", method="setReward_TOD8()", type_label=expression_statement];
2305 [label="386_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n2305-function_definition-387-392", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
2313 [label="387_ require (!claimed_TOD8);\n2313-expression_statement-388-388", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2319 [label="388_ require(submission < 10);\n2319-expression_statement-389-389", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2326 [label="389_ msg.sender.transfer(reward_TOD8);\n2326-expression_statement-390-390", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2335 [label="390_ claimed_TOD8 = true;\n2335-expression_statement-391-391", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2340 [label="392_ function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n2340-function_definition-393-399", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
2361 [label="393_ balances[from] = balances[from].sub(tokens);\n2361-expression_statement-394-394", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2374 [label="394_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n2374-expression_statement-395-395", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2395 [label="395_ balances[to] = balances[to].add(tokens);\n2395-expression_statement-396-396", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2416 [label="397_ return true;\n2416-return-398-398", method="transferFrom(address from,address to,uint tokens)", type_label=return];
2419 [label="399_ address payable winner_TOD39;\n2419-new_variable-400-400", method="", type_label=new_variable];
2423 [label="400_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n2423-function_definition-401-405", method="play_TOD39(bytes32 guess)", type_label=function_definition];
2431 [label="401_ if\n2431-if-402-404", method="play_TOD39(bytes32 guess)", type_label=if];
5296 [label="401_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
2453 [label="402_ winner_TOD39 = msg.sender;\n2453-expression_statement-403-403", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
2459 [label="405_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n2459-function_definition-406-408", method="getReward_TOD39()", type_label=function_definition];
2464 [label="406_ winner_TOD39.transfer(msg.value);\n2464-expression_statement-407-407", method="getReward_TOD39()", type_label=expression_statement];
2473 [label="408_ function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n2473-function_definition-409-411", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
2491 [label="409_ return allowed[tokenOwner][spender];\n2491-return-410-410", method="allowance(address tokenOwner,address spender)", type_label=return];
2497 [label="411_ bool claimed_TOD36 = false;\n2497-new_variable-412-412", method="", type_label=new_variable];
2503 [label="412_ address payable owner_TOD36;\n2503-new_variable-413-413", method="", type_label=new_variable];
2507 [label="413_ uint256 reward_TOD36;\n2507-new_variable-414-414", method="", type_label=new_variable];
2511 [label="414_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n2511-function_definition-415-420", method="setReward_TOD36()", type_label=function_definition];
2516 [label="415_ require (!claimed_TOD36);\n2516-expression_statement-416-416", method="setReward_TOD36()", type_label=expression_statement];
2522 [label="416_ require(msg.sender == owner_TOD36);\n2522-expression_statement-417-417", method="setReward_TOD36()", type_label=expression_statement];
2531 [label="417_ owner_TOD36.transfer(reward_TOD36);\n2531-expression_statement-418-418", method="setReward_TOD36()", type_label=expression_statement];
2538 [label="418_ reward_TOD36 = msg.value;\n2538-expression_statement-419-419", method="setReward_TOD36()", type_label=expression_statement];
2544 [label="420_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n2544-function_definition-421-426", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
2552 [label="421_ require (!claimed_TOD36);\n2552-expression_statement-422-422", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2558 [label="422_ require(submission < 10);\n2558-expression_statement-423-423", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2565 [label="423_ msg.sender.transfer(reward_TOD36);\n2565-expression_statement-424-424", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2574 [label="424_ claimed_TOD36 = true;\n2574-expression_statement-425-425", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2579 [label="426_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n2579-function_definition-427-432", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
2600 [label="427_ allowed[msg.sender][spender] = tokens;\n2600-expression_statement-428-428", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
2620 [label="429_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n2620-expression_statement-430-430", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
2640 [label="430_ return true;\n2640-return-431-431", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
2643 [label="432_ address payable winner_TOD35;\n2643-new_variable-433-433", method="", type_label=new_variable];
2647 [label="433_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n2647-function_definition-434-438", method="play_TOD35(bytes32 guess)", type_label=function_definition];
2655 [label="434_ if\n2655-if-435-437", method="play_TOD35(bytes32 guess)", type_label=if];
5520 [label="434_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
2677 [label="435_ winner_TOD35 = msg.sender;\n2677-expression_statement-436-436", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
2683 [label="438_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n2683-function_definition-439-441", method="getReward_TOD35()", type_label=function_definition];
2688 [label="439_ winner_TOD35.transfer(msg.value);\n2688-expression_statement-440-440", method="getReward_TOD35()", type_label=expression_statement];
2703 [label="444_ bool claimed_TOD40 = false;\n2703-new_variable-445-445", method="", type_label=new_variable];
2709 [label="445_ address payable owner_TOD40;\n2709-new_variable-446-446", method="", type_label=new_variable];
2713 [label="446_ uint256 reward_TOD40;\n2713-new_variable-447-447", method="", type_label=new_variable];
2717 [label="447_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n2717-function_definition-448-453", method="setReward_TOD40()", type_label=function_definition];
2722 [label="448_ require (!claimed_TOD40);\n2722-expression_statement-449-449", method="setReward_TOD40()", type_label=expression_statement];
2728 [label="449_ require(msg.sender == owner_TOD40);\n2728-expression_statement-450-450", method="setReward_TOD40()", type_label=expression_statement];
2737 [label="450_ owner_TOD40.transfer(reward_TOD40);\n2737-expression_statement-451-451", method="setReward_TOD40()", type_label=expression_statement];
2744 [label="451_ reward_TOD40 = msg.value;\n2744-expression_statement-452-452", method="setReward_TOD40()", type_label=expression_statement];
2750 [label="453_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n2750-function_definition-454-459", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
2758 [label="454_ require (!claimed_TOD40);\n2758-expression_statement-455-455", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2764 [label="455_ require(submission < 10);\n2764-expression_statement-456-456", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2771 [label="456_ msg.sender.transfer(reward_TOD40);\n2771-expression_statement-457-457", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2780 [label="457_ claimed_TOD40 = true;\n2780-expression_statement-458-458", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2785 [label="459_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n2785-function_definition-460-462", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
2796 [label="459_ onlyOwner\n2796-expression_statement-460-460", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
2804 [label="460_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n2804-return-461-461", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
2816 [label="462_ address payable winner_TOD33;\n2816-new_variable-463-463", method="", type_label=new_variable];
2820 [label="463_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n2820-function_definition-464-468", method="play_TOD33(bytes32 guess)", type_label=function_definition];
2828 [label="464_ if\n2828-if-465-467", method="play_TOD33(bytes32 guess)", type_label=if];
5693 [label="464_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
2850 [label="465_ winner_TOD33 = msg.sender;\n2850-expression_statement-466-466", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
2856 [label="468_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n2856-function_definition-469-471", method="getReward_TOD33()", type_label=function_definition];
2861 [label="469_ winner_TOD33.transfer(msg.value);\n2861-expression_statement-470-470", method="getReward_TOD33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 188  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
166 -> 3031  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3031 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 3031  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
194 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 255  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
233 -> 3098  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3098 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 3098  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
261 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 326  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
304 -> 3169  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3169 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 3169  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
332 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 396  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
374 -> 3239  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3239 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 3239  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
402 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 466  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
444 -> 3309  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3309 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 3309  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
472 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
506 -> 512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 622  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
600 -> 3465  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3465 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 3465  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
628 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 690  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
668 -> 3533  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3533 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
690 -> 3533  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
696 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
760 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
771 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
793 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
801 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
814 -> 823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 865  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
843 -> 3708  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3708 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 3708  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
871 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
890 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
896 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
915 -> 924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
924 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
951 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
958 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
989 -> 1011  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
989 -> 3854  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3854 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1011 -> 3854  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1017 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1074 -> 1083  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1083 -> 1090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1104 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1134 -> 1143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1145 -> 1155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1159 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1173 -> 1178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1178 -> 1184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1184 -> 1193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1193 -> 1200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1206 -> 1214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1214 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1227 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1241 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1270 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 1280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1284 -> 1289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1289 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 1311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1317 -> 1325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1325 -> 1331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1338 -> 1347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1366 -> 1372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1372 -> 1376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1385 -> 1391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1391 -> 1400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1400 -> 1407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1413 -> 1421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 1427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1427 -> 1434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1434 -> 1443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 1453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1453 -> 1459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1472 -> 1478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1478 -> 1487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1487 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1500 -> 1508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1508 -> 1514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1514 -> 1521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1521 -> 1530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1535 -> 1540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1544 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 1574  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1552 -> 4417  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4417 -> 1580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1574 -> 4417  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1580 -> 1585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 1599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1603 -> 1611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1611 -> 1633  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1611 -> 4476  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4476 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1633 -> 4476  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1639 -> 1644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1657 -> 1663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1663 -> 1667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1671 -> 1676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1676 -> 1682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1682 -> 1691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1691 -> 1698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1704 -> 1712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1712 -> 1718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1718 -> 1725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1725 -> 1734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1739 -> 1745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1749 -> 1757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1757 -> 1779  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1757 -> 4622  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4622 -> 1785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1779 -> 4622  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1785 -> 1790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1809 -> 1814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1814 -> 1819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1819 -> 1823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1823 -> 1832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1852 -> 1860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1860 -> 1882  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1860 -> 4725  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4725 -> 1888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1882 -> 4725  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1888 -> 1893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1902 -> 1911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1911 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1926 -> 1934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1934 -> 1956  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1934 -> 4799  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4799 -> 1962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1956 -> 4799  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1962 -> 1967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1976 -> 1990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1990 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1994 -> 2000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2000 -> 2004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2008 -> 2013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2013 -> 2019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2019 -> 2028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2028 -> 2035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2041 -> 2049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2049 -> 2055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2055 -> 2062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2062 -> 2071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2076 -> 2093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2093 -> 2110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2133 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2136 -> 2142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2142 -> 2146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2150 -> 2155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2155 -> 2161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2161 -> 2170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2170 -> 2177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2183 -> 2191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2191 -> 2197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2197 -> 2204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2204 -> 2213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2218 -> 2235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2255 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2258 -> 2264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2264 -> 2268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2272 -> 2277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2277 -> 2283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2283 -> 2292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2292 -> 2299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2305 -> 2313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2313 -> 2319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2319 -> 2326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2326 -> 2335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2340 -> 2361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2361 -> 2374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2374 -> 2395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2416 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2423 -> 2431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2431 -> 2453  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2431 -> 5296  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5296 -> 2459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2453 -> 5296  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2459 -> 2464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2473 -> 2491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2491 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2497 -> 2503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2503 -> 2507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2511 -> 2516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2516 -> 2522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2522 -> 2531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2531 -> 2538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2544 -> 2552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2552 -> 2558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2558 -> 2565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2565 -> 2574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2579 -> 2600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2620 -> 2640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2640 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2647 -> 2655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2655 -> 2677  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2655 -> 5520  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5520 -> 2683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2677 -> 5520  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2683 -> 2688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2703 -> 2709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2709 -> 2713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2717 -> 2722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2722 -> 2728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2728 -> 2737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2737 -> 2744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2750 -> 2758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2758 -> 2764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2764 -> 2771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2771 -> 2780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2785 -> 2804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2804 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2820 -> 2828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2828 -> 2850  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2828 -> 5693  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5693 -> 2856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2850 -> 5693  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2856 -> 2861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
