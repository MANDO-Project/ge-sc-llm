digraph  {
13 [label="2_ bool claimed_TOD2 = false;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ address payable owner_TOD2;\n19-new_variable-4-4", method="", type_label=new_variable];
23 [label="4_ uint256 reward_TOD2;\n23-new_variable-5-5", method="", type_label=new_variable];
27 [label="5_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n27-function_definition-6-11", method="setReward_TOD2()", type_label=function_definition];
32 [label="6_ require (!claimed_TOD2);\n32-expression_statement-7-7", method="setReward_TOD2()", type_label=expression_statement];
38 [label="7_ require(msg.sender == owner_TOD2);\n38-expression_statement-8-8", method="setReward_TOD2()", type_label=expression_statement];
47 [label="8_ owner_TOD2.transfer(reward_TOD2);\n47-expression_statement-9-9", method="setReward_TOD2()", type_label=expression_statement];
54 [label="9_ reward_TOD2 = msg.value;\n54-expression_statement-10-10", method="setReward_TOD2()", type_label=expression_statement];
60 [label="11_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n60-function_definition-12-17", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
68 [label="12_ require (!claimed_TOD2);\n68-expression_statement-13-13", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
74 [label="13_ require(submission < 10);\n74-expression_statement-14-14", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
81 [label="14_ msg.sender.transfer(reward_TOD2);\n81-expression_statement-15-15", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
90 [label="15_ claimed_TOD2 = true;\n90-expression_statement-16-16", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
95 [label="17_ address public owner;\n95-new_variable-18-18", method="", type_label=new_variable];
100 [label="18_ address payable winner_TOD17;\n100-new_variable-19-19", method="", type_label=new_variable];
104 [label="19_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n104-function_definition-20-24", method="play_TOD17(bytes32 guess)", type_label=function_definition];
112 [label="20_ if\n112-if-21-23", method="play_TOD17(bytes32 guess)", type_label=if];
2541 [label="20_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
134 [label="21_ winner_TOD17 = msg.sender;\n134-expression_statement-22-22", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
140 [label="24_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n140-function_definition-25-27", method="getReward_TOD17()", type_label=function_definition];
145 [label="25_ winner_TOD17.transfer(msg.value);\n145-expression_statement-26-26", method="getReward_TOD17()", type_label=expression_statement];
154 [label="27_ address public newOwner;\n154-new_variable-28-28", method="", type_label=new_variable];
159 [label="28_ address payable winner_TOD27;\n159-new_variable-29-29", method="", type_label=new_variable];
163 [label="29_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n163-function_definition-30-34", method="play_TOD27(bytes32 guess)", type_label=function_definition];
171 [label="30_ if\n171-if-31-33", method="play_TOD27(bytes32 guess)", type_label=if];
2600 [label="30_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
193 [label="31_ winner_TOD27 = msg.sender;\n193-expression_statement-32-32", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
199 [label="34_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n199-function_definition-35-37", method="getReward_TOD27()", type_label=function_definition];
204 [label="35_ winner_TOD27.transfer(msg.value);\n204-expression_statement-36-36", method="getReward_TOD27()", type_label=expression_statement];
225 [label="39_ owner = msg.sender;\n225-expression_statement-40-40", method="", type_label=expression_statement];
231 [label="41_ bool claimed_TOD32 = false;\n231-new_variable-42-42", method="", type_label=new_variable];
237 [label="42_ address payable owner_TOD32;\n237-new_variable-43-43", method="", type_label=new_variable];
241 [label="43_ uint256 reward_TOD32;\n241-new_variable-44-44", method="", type_label=new_variable];
245 [label="44_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n245-function_definition-45-50", method="setReward_TOD32()", type_label=function_definition];
250 [label="45_ require (!claimed_TOD32);\n250-expression_statement-46-46", method="setReward_TOD32()", type_label=expression_statement];
256 [label="46_ require(msg.sender == owner_TOD32);\n256-expression_statement-47-47", method="setReward_TOD32()", type_label=expression_statement];
265 [label="47_ owner_TOD32.transfer(reward_TOD32);\n265-expression_statement-48-48", method="setReward_TOD32()", type_label=expression_statement];
272 [label="48_ reward_TOD32 = msg.value;\n272-expression_statement-49-49", method="setReward_TOD32()", type_label=expression_statement];
278 [label="50_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n278-function_definition-51-56", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
286 [label="51_ require (!claimed_TOD32);\n286-expression_statement-52-52", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
292 [label="52_ require(submission < 10);\n292-expression_statement-53-53", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
299 [label="53_ msg.sender.transfer(reward_TOD32);\n299-expression_statement-54-54", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
308 [label="54_ claimed_TOD32 = true;\n308-expression_statement-55-55", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
313 [label="56_ modifier onlyOwner {\n        require(msg.sender == owner || msg.sender == address(this));\n        _;\n    }\n313-expression_statement-57-60", method="", type_label=expression_statement];
316 [label="57_ require(msg.sender == owner || msg.sender == address(this));\n316-expression_statement-58-58", method="", type_label=expression_statement];
333 [label="58_ _;\n333-expression_statement-59-59", method="", type_label=expression_statement];
335 [label="60_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n335-function_definition-61-63", method="transferOwnership(address _newOwner)", type_label=function_definition];
342 [label="60_ onlyOwner\n342-expression_statement-61-61", method="transferOwnership(address _newOwner)", type_label=expression_statement];
345 [label="61_ newOwner = _newOwner;\n345-expression_statement-62-62", method="transferOwnership(address _newOwner)", type_label=expression_statement];
349 [label="63_ bool claimed_TOD38 = false;\n349-new_variable-64-64", method="", type_label=new_variable];
355 [label="64_ address payable owner_TOD38;\n355-new_variable-65-65", method="", type_label=new_variable];
359 [label="65_ uint256 reward_TOD38;\n359-new_variable-66-66", method="", type_label=new_variable];
363 [label="66_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n363-function_definition-67-72", method="setReward_TOD38()", type_label=function_definition];
368 [label="67_ require (!claimed_TOD38);\n368-expression_statement-68-68", method="setReward_TOD38()", type_label=expression_statement];
374 [label="68_ require(msg.sender == owner_TOD38);\n374-expression_statement-69-69", method="setReward_TOD38()", type_label=expression_statement];
383 [label="69_ owner_TOD38.transfer(reward_TOD38);\n383-expression_statement-70-70", method="setReward_TOD38()", type_label=expression_statement];
390 [label="70_ reward_TOD38 = msg.value;\n390-expression_statement-71-71", method="setReward_TOD38()", type_label=expression_statement];
396 [label="72_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n396-function_definition-73-78", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
404 [label="73_ require (!claimed_TOD38);\n404-expression_statement-74-74", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
410 [label="74_ require(submission < 10);\n410-expression_statement-75-75", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
417 [label="75_ msg.sender.transfer(reward_TOD38);\n417-expression_statement-76-76", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
426 [label="76_ claimed_TOD38 = true;\n426-expression_statement-77-77", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
434 [label="80_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n434-function_definition-81-88", method="mul(uint256 a,uint256 b)", type_label=function_definition];
451 [label="81_ if_a == 0\n451-if-82-84", method="mul(uint256 a,uint256 b)", type_label=if];
2880 [label="81_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
456 [label="82_ return 0;\n456-return-83-83", method="mul(uint256 a,uint256 b)", type_label=return];
458 [label="84_ uint256 c = a * b;\n458-new_variable-85-85", method="mul(uint256 a,uint256 b)", type_label=new_variable];
466 [label="85_ assert(c / a == b);\n466-expression_statement-86-86", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
475 [label="86_ return c;\n475-return-87-87", method="mul(uint256 a,uint256 b)", type_label=return];
477 [label="88_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n477-function_definition-89-92", method="div(uint256 a,uint256 b)", type_label=function_definition];
494 [label="89_ uint256 c = a / b;\n494-new_variable-90-90", method="div(uint256 a,uint256 b)", type_label=new_variable];
502 [label="90_ return c;\n502-return-91-91", method="div(uint256 a,uint256 b)", type_label=return];
504 [label="92_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n504-function_definition-93-96", method="sub(uint256 a,uint256 b)", type_label=function_definition];
521 [label="93_ assert(b <= a);\n521-expression_statement-94-94", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
528 [label="94_ return a - b;\n528-return-95-95", method="sub(uint256 a,uint256 b)", type_label=return];
532 [label="96_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n532-function_definition-97-101", method="add(uint256 a,uint256 b)", type_label=function_definition];
549 [label="97_ uint256 c = a + b;\n549-new_variable-98-98", method="add(uint256 a,uint256 b)", type_label=new_variable];
557 [label="98_ assert(c >= a);\n557-expression_statement-99-99", method="add(uint256 a,uint256 b)", type_label=expression_statement];
564 [label="99_ return c;\n564-return-100-100", method="add(uint256 a,uint256 b)", type_label=return];
566 [label="101_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n566-function_definition-102-106", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
583 [label="102_ uint256 c = add(a,m);\n583-new_variable-103-103", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
594 [label="103_ uint256 d = sub(c,1);\n594-new_variable-104-104", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
605 [label="104_ return mul(div(d,m),m);\n605-return-105-105", method="ceil(uint256 a,uint256 m)", type_label=return];
620 [label="108_ function balanceOf(address who) external view returns (uint256);\n620-function_definition-109-109", method="balanceOf(address who)", type_label=function_definition];
632 [label="109_ bool claimed_TOD4 = false;\n632-new_variable-110-110", method="", type_label=new_variable];
638 [label="110_ address payable owner_TOD4;\n638-new_variable-111-111", method="", type_label=new_variable];
642 [label="111_ uint256 reward_TOD4;\n642-new_variable-112-112", method="", type_label=new_variable];
646 [label="112_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n646-function_definition-113-118", method="setReward_TOD4()", type_label=function_definition];
651 [label="113_ require (!claimed_TOD4);\n651-expression_statement-114-114", method="setReward_TOD4()", type_label=expression_statement];
657 [label="114_ require(msg.sender == owner_TOD4);\n657-expression_statement-115-115", method="setReward_TOD4()", type_label=expression_statement];
666 [label="115_ owner_TOD4.transfer(reward_TOD4);\n666-expression_statement-116-116", method="setReward_TOD4()", type_label=expression_statement];
673 [label="116_ reward_TOD4 = msg.value;\n673-expression_statement-117-117", method="setReward_TOD4()", type_label=expression_statement];
679 [label="118_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n679-function_definition-119-124", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
687 [label="119_ require (!claimed_TOD4);\n687-expression_statement-120-120", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
693 [label="120_ require(submission < 10);\n693-expression_statement-121-121", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
700 [label="121_ msg.sender.transfer(reward_TOD4);\n700-expression_statement-122-122", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
709 [label="122_ claimed_TOD4 = true;\n709-expression_statement-123-123", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
714 [label="124_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n714-function_definition-125-125", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
733 [label="125_ address payable winner_TOD7;\n733-new_variable-126-126", method="", type_label=new_variable];
737 [label="126_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n737-function_definition-127-131", method="play_TOD7(bytes32 guess)", type_label=function_definition];
745 [label="127_ if\n745-if-128-130", method="play_TOD7(bytes32 guess)", type_label=if];
3174 [label="127_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
767 [label="128_ winner_TOD7 = msg.sender;\n767-expression_statement-129-129", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
773 [label="131_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n773-function_definition-132-134", method="getReward_TOD7()", type_label=function_definition];
778 [label="132_ winner_TOD7.transfer(msg.value);\n778-expression_statement-133-133", method="getReward_TOD7()", type_label=expression_statement];
787 [label="134_ function transfer(address to, uint256 value) external returns (bool);\n787-function_definition-135-135", method="transfer(address to,uint256 value)", type_label=function_definition];
802 [label="135_ address payable winner_TOD23;\n802-new_variable-136-136", method="", type_label=new_variable];
806 [label="136_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n806-function_definition-137-141", method="play_TOD23(bytes32 guess)", type_label=function_definition];
814 [label="137_ if\n814-if-138-140", method="play_TOD23(bytes32 guess)", type_label=if];
3243 [label="137_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
836 [label="138_ winner_TOD23 = msg.sender;\n836-expression_statement-139-139", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
842 [label="141_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n842-function_definition-142-144", method="getReward_TOD23()", type_label=function_definition];
847 [label="142_ winner_TOD23.transfer(msg.value);\n847-expression_statement-143-143", method="getReward_TOD23()", type_label=expression_statement];
862 [label="146_ address payable winner_TOD37;\n862-new_variable-147-147", method="", type_label=new_variable];
866 [label="147_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n866-function_definition-148-152", method="play_TOD37(bytes32 guess)", type_label=function_definition];
874 [label="148_ if\n874-if-149-151", method="play_TOD37(bytes32 guess)", type_label=if];
3303 [label="148_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
896 [label="149_ winner_TOD37 = msg.sender;\n896-expression_statement-150-150", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
902 [label="152_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n902-function_definition-153-155", method="getReward_TOD37()", type_label=function_definition];
907 [label="153_ winner_TOD37.transfer(msg.value);\n907-expression_statement-154-154", method="getReward_TOD37()", type_label=expression_statement];
916 [label="155_ Token public token;\n916-new_variable-156-156", method="", type_label=new_variable];
922 [label="156_ address payable winner_TOD3;\n922-new_variable-157-157", method="", type_label=new_variable];
926 [label="157_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n926-function_definition-158-162", method="play_TOD3(bytes32 guess)", type_label=function_definition];
934 [label="158_ if\n934-if-159-161", method="play_TOD3(bytes32 guess)", type_label=if];
3363 [label="158_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
956 [label="159_ winner_TOD3 = msg.sender;\n956-expression_statement-160-160", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
962 [label="162_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n962-function_definition-163-165", method="getReward_TOD3()", type_label=function_definition];
967 [label="163_ winner_TOD3.transfer(msg.value);\n967-expression_statement-164-164", method="getReward_TOD3()", type_label=expression_statement];
976 [label="165_ bool lock;\n976-new_variable-166-166", method="", type_label=new_variable];
980 [label="166_ address payable winner_TOD9;\n980-new_variable-167-167", method="", type_label=new_variable];
984 [label="167_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n984-function_definition-168-172", method="play_TOD9(bytes32 guess)", type_label=function_definition];
992 [label="168_ if\n992-if-169-171", method="play_TOD9(bytes32 guess)", type_label=if];
3421 [label="168_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
1014 [label="169_ winner_TOD9 = msg.sender;\n1014-expression_statement-170-170", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
1020 [label="172_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n1020-function_definition-173-175", method="getReward_TOD9()", type_label=function_definition];
1025 [label="173_ winner_TOD9.transfer(msg.value);\n1025-expression_statement-174-174", method="getReward_TOD9()", type_label=expression_statement];
1034 [label="175_ uint256 public minstakeTokens;\n1034-new_variable-176-176", method="", type_label=new_variable];
1039 [label="176_ address payable winner_TOD25;\n1039-new_variable-177-177", method="", type_label=new_variable];
1043 [label="177_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n1043-function_definition-178-182", method="play_TOD25(bytes32 guess)", type_label=function_definition];
1051 [label="178_ if\n1051-if-179-181", method="play_TOD25(bytes32 guess)", type_label=if];
3480 [label="178_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
1073 [label="179_ winner_TOD25 = msg.sender;\n1073-expression_statement-180-180", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
1079 [label="182_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n1079-function_definition-183-185", method="getReward_TOD25()", type_label=function_definition];
1084 [label="183_ winner_TOD25.transfer(msg.value);\n1084-expression_statement-184-184", method="getReward_TOD25()", type_label=expression_statement];
1093 [label="185_ uint256 private basePercent = 200;\n1093-new_variable-186-186", method="", type_label=new_variable];
1104 [label="187_ address payable winner_TOD19;\n1104-new_variable-188-188", method="", type_label=new_variable];
1108 [label="188_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n1108-function_definition-189-193", method="play_TOD19(bytes32 guess)", type_label=function_definition];
1116 [label="189_ if\n1116-if-190-192", method="play_TOD19(bytes32 guess)", type_label=if];
3545 [label="189_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
1138 [label="190_ winner_TOD19 = msg.sender;\n1138-expression_statement-191-191", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
1144 [label="193_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n1144-function_definition-194-196", method="getReward_TOD19()", type_label=function_definition];
1149 [label="194_ winner_TOD19.transfer(msg.value);\n1149-expression_statement-195-195", method="getReward_TOD19()", type_label=expression_statement];
1158 [label="196_ uint256 public stakeTime = 1814400;\n1158-new_variable-197-197", method="", type_label=new_variable];
1164 [label="197_ bool claimed_TOD26 = false;\n1164-new_variable-198-198", method="", type_label=new_variable];
1170 [label="198_ address payable owner_TOD26;\n1170-new_variable-199-199", method="", type_label=new_variable];
1174 [label="199_ uint256 reward_TOD26;\n1174-new_variable-200-200", method="", type_label=new_variable];
1178 [label="200_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n1178-function_definition-201-206", method="setReward_TOD26()", type_label=function_definition];
1183 [label="201_ require (!claimed_TOD26);\n1183-expression_statement-202-202", method="setReward_TOD26()", type_label=expression_statement];
1189 [label="202_ require(msg.sender == owner_TOD26);\n1189-expression_statement-203-203", method="setReward_TOD26()", type_label=expression_statement];
1198 [label="203_ owner_TOD26.transfer(reward_TOD26);\n1198-expression_statement-204-204", method="setReward_TOD26()", type_label=expression_statement];
1205 [label="204_ reward_TOD26 = msg.value;\n1205-expression_statement-205-205", method="setReward_TOD26()", type_label=expression_statement];
1211 [label="206_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n1211-function_definition-207-212", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
1219 [label="207_ require (!claimed_TOD26);\n1219-expression_statement-208-208", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1225 [label="208_ require(submission < 10);\n1225-expression_statement-209-209", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1232 [label="209_ msg.sender.transfer(reward_TOD26);\n1232-expression_statement-210-210", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1241 [label="210_ claimed_TOD26 = true;\n1241-expression_statement-211-211", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1246 [label="212_ uint public stakePercentage = 30;\n1246-new_variable-213-213", method="", type_label=new_variable];
1252 [label="213_ address payable winner_TOD31;\n1252-new_variable-214-214", method="", type_label=new_variable];
1256 [label="214_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n1256-function_definition-215-219", method="play_TOD31(bytes32 guess)", type_label=function_definition];
1264 [label="215_ if\n1264-if-216-218", method="play_TOD31(bytes32 guess)", type_label=if];
3693 [label="215_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
1286 [label="216_ winner_TOD31 = msg.sender;\n1286-expression_statement-217-217", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
1292 [label="219_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n1292-function_definition-220-222", method="getReward_TOD31()", type_label=function_definition];
1297 [label="220_ winner_TOD31.transfer(msg.value);\n1297-expression_statement-221-221", method="getReward_TOD31()", type_label=expression_statement];
1320 [label="223_ address payable winner_TOD13;\n1320-new_variable-224-224", method="", type_label=new_variable];
1324 [label="224_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n1324-function_definition-225-229", method="play_TOD13(bytes32 guess)", type_label=function_definition];
1332 [label="225_ if\n1332-if-226-228", method="play_TOD13(bytes32 guess)", type_label=if];
3761 [label="225_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
1354 [label="226_ winner_TOD13 = msg.sender;\n1354-expression_statement-227-227", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
1360 [label="229_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n1360-function_definition-230-232", method="getReward_TOD13()", type_label=function_definition];
1365 [label="230_ winner_TOD13.transfer(msg.value);\n1365-expression_statement-231-231", method="getReward_TOD13()", type_label=expression_statement];
1388 [label="233_ struct stake{\n        uint256 time;\n        bool redeem;\n        uint256 tokens;\n    }\n1388-expression_statement-234-238", method="stake()", type_label=expression_statement];
1402 [label="238_ bool claimed_TOD20 = false;\n1402-new_variable-239-239", method="", type_label=new_variable];
1408 [label="239_ address payable owner_TOD20;\n1408-new_variable-240-240", method="", type_label=new_variable];
1412 [label="240_ uint256 reward_TOD20;\n1412-new_variable-241-241", method="", type_label=new_variable];
1416 [label="241_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n1416-function_definition-242-247", method="setReward_TOD20()", type_label=function_definition];
1421 [label="242_ require (!claimed_TOD20);\n1421-expression_statement-243-243", method="setReward_TOD20()", type_label=expression_statement];
1427 [label="243_ require(msg.sender == owner_TOD20);\n1427-expression_statement-244-244", method="setReward_TOD20()", type_label=expression_statement];
1436 [label="244_ owner_TOD20.transfer(reward_TOD20);\n1436-expression_statement-245-245", method="setReward_TOD20()", type_label=expression_statement];
1443 [label="245_ reward_TOD20 = msg.value;\n1443-expression_statement-246-246", method="setReward_TOD20()", type_label=expression_statement];
1449 [label="247_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n1449-function_definition-248-253", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
1457 [label="248_ require (!claimed_TOD20);\n1457-expression_statement-249-249", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1463 [label="249_ require(submission < 10);\n1463-expression_statement-250-250", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1470 [label="250_ msg.sender.transfer(reward_TOD20);\n1470-expression_statement-251-251", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1479 [label="251_ claimed_TOD20 = true;\n1479-expression_statement-252-252", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1484 [label="253_ mapping(address => stake) staker;\n1484-new_variable-254-254", method="", type_label=new_variable];
1497 [label="255_ token = Token(tokenContractAddress);\n1497-expression_statement-256-256", method="", type_label=expression_statement];
1504 [label="256_ owner = msg.sender;\n1504-expression_statement-257-257", method="", type_label=expression_statement];
1510 [label="257_ minstakeTokens = 500 * 10 ** uint(10);\n1510-expression_statement-258-258", method="", type_label=expression_statement];
1520 [label="259_ bool claimed_TOD14 = false;\n1520-new_variable-260-260", method="", type_label=new_variable];
1526 [label="260_ address payable owner_TOD14;\n1526-new_variable-261-261", method="", type_label=new_variable];
1530 [label="261_ uint256 reward_TOD14;\n1530-new_variable-262-262", method="", type_label=new_variable];
1534 [label="262_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n1534-function_definition-263-268", method="setReward_TOD14()", type_label=function_definition];
1539 [label="263_ require (!claimed_TOD14);\n1539-expression_statement-264-264", method="setReward_TOD14()", type_label=expression_statement];
1545 [label="264_ require(msg.sender == owner_TOD14);\n1545-expression_statement-265-265", method="setReward_TOD14()", type_label=expression_statement];
1554 [label="265_ owner_TOD14.transfer(reward_TOD14);\n1554-expression_statement-266-266", method="setReward_TOD14()", type_label=expression_statement];
1561 [label="266_ reward_TOD14 = msg.value;\n1561-expression_statement-267-267", method="setReward_TOD14()", type_label=expression_statement];
1567 [label="268_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n1567-function_definition-269-274", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
1575 [label="269_ require (!claimed_TOD14);\n1575-expression_statement-270-270", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1581 [label="270_ require(submission < 10);\n1581-expression_statement-271-271", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1588 [label="271_ msg.sender.transfer(reward_TOD14);\n1588-expression_statement-272-272", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1597 [label="272_ claimed_TOD14 = true;\n1597-expression_statement-273-273", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1602 [label="274_ function startStaking(uint256 stakeTokens) public{\n        require(stakeTokens >= minstakeTokens);\n        require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));\n        require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));\n        staker[msg.sender].time = now;\n        staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;\n        emit stakingstarted(msg.sender, staker[msg.sender].tokens, staker[msg.sender].time);\n    }\n1602-function_definition-275-282", method="startStaking(uint256 stakeTokens)", type_label=function_definition];
1610 [label="275_ require(stakeTokens >= minstakeTokens);\n1610-expression_statement-276-276", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1617 [label="276_ require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));\n1617-expression_statement-277-277", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1636 [label="277_ require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));\n1636-expression_statement-278-278", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1659 [label="278_ staker[msg.sender].time = now;\n1659-expression_statement-279-279", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1669 [label="279_ staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;\n1669-expression_statement-280-280", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1709 [label="282_ bool claimed_TOD30 = false;\n1709-new_variable-283-283", method="", type_label=new_variable];
1715 [label="283_ address payable owner_TOD30;\n1715-new_variable-284-284", method="", type_label=new_variable];
1719 [label="284_ uint256 reward_TOD30;\n1719-new_variable-285-285", method="", type_label=new_variable];
1723 [label="285_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n1723-function_definition-286-291", method="setReward_TOD30()", type_label=function_definition];
1728 [label="286_ require (!claimed_TOD30);\n1728-expression_statement-287-287", method="setReward_TOD30()", type_label=expression_statement];
1734 [label="287_ require(msg.sender == owner_TOD30);\n1734-expression_statement-288-288", method="setReward_TOD30()", type_label=expression_statement];
1743 [label="288_ owner_TOD30.transfer(reward_TOD30);\n1743-expression_statement-289-289", method="setReward_TOD30()", type_label=expression_statement];
1750 [label="289_ reward_TOD30 = msg.value;\n1750-expression_statement-290-290", method="setReward_TOD30()", type_label=expression_statement];
1756 [label="291_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n1756-function_definition-292-297", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
1764 [label="292_ require (!claimed_TOD30);\n1764-expression_statement-293-293", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1770 [label="293_ require(submission < 10);\n1770-expression_statement-294-294", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1777 [label="294_ msg.sender.transfer(reward_TOD30);\n1777-expression_statement-295-295", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1786 [label="295_ claimed_TOD30 = true;\n1786-expression_statement-296-296", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1791 [label="297_ function redeem() public{\n        require(!lock);\n        require(!staker[msg.sender].redeem);\n        require(staker[msg.sender].time + stakeTime <= now);\n        require(token.transfer(msg.sender,staker[msg.sender].tokens));\n        require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));\n        emit tokensRedeemed(msg.sender, staker[msg.sender].tokens, staker[msg.sender].tokens * stakePercentage * 100 / 10000);\n        staker[msg.sender].redeem = true;\n        staker[msg.sender].tokens = 0;\n    }\n1791-function_definition-298-307", method="redeem()", type_label=function_definition];
1795 [label="298_ require(!lock);\n1795-expression_statement-299-299", method="redeem()", type_label=expression_statement];
1801 [label="299_ require(!staker[msg.sender].redeem);\n1801-expression_statement-300-300", method="redeem()", type_label=expression_statement];
1813 [label="300_ require(staker[msg.sender].time + stakeTime <= now);\n1813-expression_statement-301-301", method="redeem()", type_label=expression_statement];
1828 [label="301_ require(token.transfer(msg.sender,staker[msg.sender].tokens));\n1828-expression_statement-302-302", method="redeem()", type_label=expression_statement];
1848 [label="302_ require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));\n1848-expression_statement-303-303", method="redeem()", type_label=expression_statement];
1904 [label="304_ staker[msg.sender].redeem = true;\n1904-expression_statement-305-305", method="redeem()", type_label=expression_statement];
1915 [label="305_ staker[msg.sender].tokens = 0;\n1915-expression_statement-306-306", method="redeem()", type_label=expression_statement];
1925 [label="307_ bool claimed_TOD8 = false;\n1925-new_variable-308-308", method="", type_label=new_variable];
1931 [label="308_ address payable owner_TOD8;\n1931-new_variable-309-309", method="", type_label=new_variable];
1935 [label="309_ uint256 reward_TOD8;\n1935-new_variable-310-310", method="", type_label=new_variable];
1939 [label="310_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n1939-function_definition-311-316", method="setReward_TOD8()", type_label=function_definition];
1944 [label="311_ require (!claimed_TOD8);\n1944-expression_statement-312-312", method="setReward_TOD8()", type_label=expression_statement];
1950 [label="312_ require(msg.sender == owner_TOD8);\n1950-expression_statement-313-313", method="setReward_TOD8()", type_label=expression_statement];
1959 [label="313_ owner_TOD8.transfer(reward_TOD8);\n1959-expression_statement-314-314", method="setReward_TOD8()", type_label=expression_statement];
1966 [label="314_ reward_TOD8 = msg.value;\n1966-expression_statement-315-315", method="setReward_TOD8()", type_label=expression_statement];
1972 [label="316_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n1972-function_definition-317-322", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
1980 [label="317_ require (!claimed_TOD8);\n1980-expression_statement-318-318", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1986 [label="318_ require(submission < 10);\n1986-expression_statement-319-319", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1993 [label="319_ msg.sender.transfer(reward_TOD8);\n1993-expression_statement-320-320", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2002 [label="320_ claimed_TOD8 = true;\n2002-expression_statement-321-321", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
2007 [label="322_ function changeStakeTokens(uint256 _NewTokensThreshold) public onlyOwner{\n        minstakeTokens = _NewTokensThreshold * 10 ** uint(10);\n    }\n2007-function_definition-323-325", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=function_definition];
2014 [label="322_ onlyOwner\n2014-expression_statement-323-323", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=expression_statement];
2017 [label="323_ minstakeTokens = _NewTokensThreshold * 10 ** uint(10);\n2017-expression_statement-324-324", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=expression_statement];
2027 [label="325_ address payable winner_TOD39;\n2027-new_variable-326-326", method="", type_label=new_variable];
2031 [label="326_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n2031-function_definition-327-331", method="play_TOD39(bytes32 guess)", type_label=function_definition];
2039 [label="327_ if\n2039-if-328-330", method="play_TOD39(bytes32 guess)", type_label=if];
4468 [label="327_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
2061 [label="328_ winner_TOD39 = msg.sender;\n2061-expression_statement-329-329", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
2067 [label="331_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n2067-function_definition-332-334", method="getReward_TOD39()", type_label=function_definition];
2072 [label="332_ winner_TOD39.transfer(msg.value);\n2072-expression_statement-333-333", method="getReward_TOD39()", type_label=expression_statement];
2081 [label="334_ function changeStakeTime(uint256 _newStakeTime) public onlyOwner{\n        stakeTime = _newStakeTime;\n    }\n2081-function_definition-335-337", method="changeStakeTime(uint256 _newStakeTime)", type_label=function_definition];
2088 [label="334_ onlyOwner\n2088-expression_statement-335-335", method="changeStakeTime(uint256 _newStakeTime)", type_label=expression_statement];
2091 [label="335_ stakeTime = _newStakeTime;\n2091-expression_statement-336-336", method="changeStakeTime(uint256 _newStakeTime)", type_label=expression_statement];
2095 [label="337_ bool claimed_TOD36 = false;\n2095-new_variable-338-338", method="", type_label=new_variable];
2101 [label="338_ address payable owner_TOD36;\n2101-new_variable-339-339", method="", type_label=new_variable];
2105 [label="339_ uint256 reward_TOD36;\n2105-new_variable-340-340", method="", type_label=new_variable];
2109 [label="340_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n2109-function_definition-341-346", method="setReward_TOD36()", type_label=function_definition];
2114 [label="341_ require (!claimed_TOD36);\n2114-expression_statement-342-342", method="setReward_TOD36()", type_label=expression_statement];
2120 [label="342_ require(msg.sender == owner_TOD36);\n2120-expression_statement-343-343", method="setReward_TOD36()", type_label=expression_statement];
2129 [label="343_ owner_TOD36.transfer(reward_TOD36);\n2129-expression_statement-344-344", method="setReward_TOD36()", type_label=expression_statement];
2136 [label="344_ reward_TOD36 = msg.value;\n2136-expression_statement-345-345", method="setReward_TOD36()", type_label=expression_statement];
2142 [label="346_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n2142-function_definition-347-352", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
2150 [label="347_ require (!claimed_TOD36);\n2150-expression_statement-348-348", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2156 [label="348_ require(submission < 10);\n2156-expression_statement-349-349", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2163 [label="349_ msg.sender.transfer(reward_TOD36);\n2163-expression_statement-350-350", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2172 [label="350_ claimed_TOD36 = true;\n2172-expression_statement-351-351", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2177 [label="352_ function changeStakingPercentage(uint _newStakePercentage) public onlyOwner{\n        stakePercentage = _newStakePercentage;\n    }\n2177-function_definition-353-355", method="changeStakingPercentage(uint _newStakePercentage)", type_label=function_definition];
2184 [label="352_ onlyOwner\n2184-expression_statement-353-353", method="changeStakingPercentage(uint _newStakePercentage)", type_label=expression_statement];
2187 [label="353_ stakePercentage = _newStakePercentage;\n2187-expression_statement-354-354", method="changeStakingPercentage(uint _newStakePercentage)", type_label=expression_statement];
2191 [label="355_ address payable winner_TOD35;\n2191-new_variable-356-356", method="", type_label=new_variable];
2195 [label="356_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n2195-function_definition-357-361", method="play_TOD35(bytes32 guess)", type_label=function_definition];
2203 [label="357_ if\n2203-if-358-360", method="play_TOD35(bytes32 guess)", type_label=if];
4632 [label="357_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
2225 [label="358_ winner_TOD35 = msg.sender;\n2225-expression_statement-359-359", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
2231 [label="361_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n2231-function_definition-362-364", method="getReward_TOD35()", type_label=function_definition];
2236 [label="362_ winner_TOD35.transfer(msg.value);\n2236-expression_statement-363-363", method="getReward_TOD35()", type_label=expression_statement];
2245 [label="364_ function lockWithdrawals() public onlyOwner{\n        lock = true;\n    }\n2245-function_definition-365-367", method="lockWithdrawals()", type_label=function_definition];
2248 [label="364_ onlyOwner\n2248-expression_statement-365-365", method="lockWithdrawals()", type_label=expression_statement];
2251 [label="365_ lock = true;\n2251-expression_statement-366-366", method="lockWithdrawals()", type_label=expression_statement];
2256 [label="367_ bool claimed_TOD40 = false;\n2256-new_variable-368-368", method="", type_label=new_variable];
2262 [label="368_ address payable owner_TOD40;\n2262-new_variable-369-369", method="", type_label=new_variable];
2266 [label="369_ uint256 reward_TOD40;\n2266-new_variable-370-370", method="", type_label=new_variable];
2270 [label="370_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n2270-function_definition-371-376", method="setReward_TOD40()", type_label=function_definition];
2275 [label="371_ require (!claimed_TOD40);\n2275-expression_statement-372-372", method="setReward_TOD40()", type_label=expression_statement];
2281 [label="372_ require(msg.sender == owner_TOD40);\n2281-expression_statement-373-373", method="setReward_TOD40()", type_label=expression_statement];
2290 [label="373_ owner_TOD40.transfer(reward_TOD40);\n2290-expression_statement-374-374", method="setReward_TOD40()", type_label=expression_statement];
2297 [label="374_ reward_TOD40 = msg.value;\n2297-expression_statement-375-375", method="setReward_TOD40()", type_label=expression_statement];
2303 [label="376_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n2303-function_definition-377-382", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
2311 [label="377_ require (!claimed_TOD40);\n2311-expression_statement-378-378", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2317 [label="378_ require(submission < 10);\n2317-expression_statement-379-379", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2324 [label="379_ msg.sender.transfer(reward_TOD40);\n2324-expression_statement-380-380", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2333 [label="380_ claimed_TOD40 = true;\n2333-expression_statement-381-381", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2338 [label="382_ function findOnePercent(uint256 value) private view returns (uint256)  {\n        uint256 roundValue = value.ceil(basePercent);\n        uint256 onePercent = roundValue.mul(basePercent).div(10000);\n        return onePercent;\n    }\n2338-function_definition-383-387", method="findOnePercent(uint256 value)", type_label=function_definition];
2351 [label="383_ uint256 roundValue = value.ceil(basePercent);\n2351-new_variable-384-384", method="findOnePercent(uint256 value)", type_label=new_variable];
2362 [label="384_ uint256 onePercent = roundValue.mul(basePercent).div(10000);\n2362-new_variable-385-385", method="findOnePercent(uint256 value)", type_label=new_variable];
2378 [label="385_ return onePercent;\n2378-return-386-386", method="findOnePercent(uint256 value)", type_label=return];
2380 [label="387_ address payable winner_TOD33;\n2380-new_variable-388-388", method="", type_label=new_variable];
2384 [label="388_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n2384-function_definition-389-393", method="play_TOD33(bytes32 guess)", type_label=function_definition];
2392 [label="389_ if\n2392-if-390-392", method="play_TOD33(bytes32 guess)", type_label=if];
4821 [label="389_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
2414 [label="390_ winner_TOD33 = msg.sender;\n2414-expression_statement-391-391", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
2420 [label="393_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n2420-function_definition-394-396", method="getReward_TOD33()", type_label=function_definition];
2425 [label="394_ winner_TOD33.transfer(msg.value);\n2425-expression_statement-395-395", method="getReward_TOD33()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 19  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
19 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
27 -> 32  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
32 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 74  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
74 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 134  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
112 -> 2541  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2541 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 2541  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
140 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 193  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
171 -> 2600  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2600 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 2600  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
199 -> 204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
256 -> 265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
265 -> 272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 456  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
451 -> 2880  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2880 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 2880  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
456 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
458 -> 466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
475 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
477 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
504 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
532 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
566 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
605 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
632 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
687 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 767  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
745 -> 3174  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3174 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
767 -> 3174  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
773 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
814 -> 836  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
814 -> 3243  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3243 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 3243  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
842 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 896  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
874 -> 3303  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3303 -> 902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
896 -> 3303  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
902 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
916 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
926 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
934 -> 956  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
934 -> 3363  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3363 -> 962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 3363  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
962 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 1014  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
992 -> 3421  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3421 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 3421  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1020 -> 1025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 1039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 1051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1051 -> 1073  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1051 -> 3480  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3480 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1073 -> 3480  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1079 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1108 -> 1116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1116 -> 1138  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1116 -> 3545  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3545 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 3545  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1144 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1164 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1170 -> 1174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1178 -> 1183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1183 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1198 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1211 -> 1219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 1225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1225 -> 1232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1264 -> 1286  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1264 -> 3693  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3693 -> 1292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1286 -> 3693  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1292 -> 1297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1324 -> 1332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 1354  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1332 -> 3761  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3761 -> 1360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1354 -> 3761  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1360 -> 1365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1388 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1408 -> 1412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1416 -> 1421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 1427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1427 -> 1436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1436 -> 1443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1449 -> 1457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1457 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1463 -> 1470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1470 -> 1479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1497 -> 1504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 1510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1520 -> 1526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1526 -> 1530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1534 -> 1539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1539 -> 1545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1545 -> 1554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1554 -> 1561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1567 -> 1575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1575 -> 1581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1581 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1610 -> 1617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1617 -> 1636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1636 -> 1659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1659 -> 1669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1709 -> 1715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1715 -> 1719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1723 -> 1728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1728 -> 1734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1734 -> 1743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1743 -> 1750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1756 -> 1764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1764 -> 1770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1770 -> 1777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1777 -> 1786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1791 -> 1795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1795 -> 1801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1801 -> 1813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1813 -> 1828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1828 -> 1848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1904 -> 1915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1925 -> 1931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1931 -> 1935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1939 -> 1944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1944 -> 1950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1950 -> 1959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1959 -> 1966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1972 -> 1980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1980 -> 1986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1986 -> 1993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1993 -> 2002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2007 -> 2017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2031 -> 2039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2039 -> 2061  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2039 -> 4468  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4468 -> 2067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2061 -> 4468  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2067 -> 2072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2081 -> 2091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2095 -> 2101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2101 -> 2105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2109 -> 2114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2114 -> 2120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2120 -> 2129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2129 -> 2136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2142 -> 2150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2150 -> 2156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2156 -> 2163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2163 -> 2172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2177 -> 2187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2195 -> 2203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2203 -> 2225  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2203 -> 4632  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4632 -> 2231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2225 -> 4632  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2231 -> 2236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2245 -> 2251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2256 -> 2262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2262 -> 2266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2270 -> 2275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2275 -> 2281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2281 -> 2290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2290 -> 2297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2303 -> 2311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2311 -> 2317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2317 -> 2324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2324 -> 2333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2338 -> 2351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2351 -> 2362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2362 -> 2378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2378 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2384 -> 2392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2392 -> 2414  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2392 -> 4821  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4821 -> 2420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2414 -> 4821  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2420 -> 2425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
