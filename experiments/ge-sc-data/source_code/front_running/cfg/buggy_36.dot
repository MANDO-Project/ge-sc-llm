digraph  {
13 [label="2_ bool claimed_TOD24 = false;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ address payable owner_TOD24;\n19-new_variable-4-4", method="", type_label=new_variable];
23 [label="4_ uint256 reward_TOD24;\n23-new_variable-5-5", method="", type_label=new_variable];
27 [label="5_ function setReward_TOD24() public payable {\n        require (!claimed_TOD24);\n        require(msg.sender == owner_TOD24);\n        owner_TOD24.transfer(reward_TOD24);\n        reward_TOD24 = msg.value;\n    }\n27-function_definition-6-11", method="setReward_TOD24()", type_label=function_definition];
32 [label="6_ require (!claimed_TOD24);\n32-expression_statement-7-7", method="setReward_TOD24()", type_label=expression_statement];
38 [label="7_ require(msg.sender == owner_TOD24);\n38-expression_statement-8-8", method="setReward_TOD24()", type_label=expression_statement];
47 [label="8_ owner_TOD24.transfer(reward_TOD24);\n47-expression_statement-9-9", method="setReward_TOD24()", type_label=expression_statement];
54 [label="9_ reward_TOD24 = msg.value;\n54-expression_statement-10-10", method="setReward_TOD24()", type_label=expression_statement];
60 [label="11_ function claimReward_TOD24(uint256 submission) public {\n        require (!claimed_TOD24);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD24);\n        claimed_TOD24 = true;\n    }\n60-function_definition-12-17", method="claimReward_TOD24(uint256 submission)", type_label=function_definition];
68 [label="12_ require (!claimed_TOD24);\n68-expression_statement-13-13", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
74 [label="13_ require(submission < 10);\n74-expression_statement-14-14", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
81 [label="14_ msg.sender.transfer(reward_TOD24);\n81-expression_statement-15-15", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
90 [label="15_ claimed_TOD24 = true;\n90-expression_statement-16-16", method="claimReward_TOD24(uint256 submission)", type_label=expression_statement];
95 [label="17_ address public owner;\n95-new_variable-18-18", method="", type_label=new_variable];
102 [label="19_ owner = msg.sender;\n102-expression_statement-20-20", method="", type_label=expression_statement];
108 [label="21_ address payable winner_TOD11;\n108-new_variable-22-22", method="", type_label=new_variable];
112 [label="22_ function play_TOD11(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD11 = msg.sender;\n        }\n    }\n112-function_definition-23-27", method="play_TOD11(bytes32 guess)", type_label=function_definition];
120 [label="23_ if\n120-if-24-26", method="play_TOD11(bytes32 guess)", type_label=if];
3924 [label="23_ end_if", method="play_TOD11(bytes32 guess)", type_label=end_if];
142 [label="24_ winner_TOD11 = msg.sender;\n142-expression_statement-25-25", method="play_TOD11(bytes32 guess)", type_label=expression_statement];
148 [label="27_ function getReward_TOD11() payable public{\n       winner_TOD11.transfer(msg.value);\n    }\n148-function_definition-28-30", method="getReward_TOD11()", type_label=function_definition];
153 [label="28_ winner_TOD11.transfer(msg.value);\n153-expression_statement-29-29", method="getReward_TOD11()", type_label=expression_statement];
162 [label="30_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n162-expression_statement-31-34", method="", type_label=expression_statement];
165 [label="31_ require(msg.sender == owner);\n165-expression_statement-32-32", method="", type_label=expression_statement];
174 [label="32_ _;\n174-expression_statement-33-33", method="", type_label=expression_statement];
176 [label="34_ function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n176-function_definition-35-37", method="transferOwnership(address newOwner)", type_label=function_definition];
182 [label="34_ onlyOwner\n182-expression_statement-35-35", method="transferOwnership(address newOwner)", type_label=expression_statement];
186 [label="35_ owner = newOwner;\n186-expression_statement-36-36", method="transferOwnership(address newOwner)", type_label=expression_statement];
190 [label="37_ address payable winner_TOD1;\n190-new_variable-38-38", method="", type_label=new_variable];
194 [label="38_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n194-function_definition-39-43", method="play_TOD1(bytes32 guess)", type_label=function_definition];
202 [label="39_ if\n202-if-40-42", method="play_TOD1(bytes32 guess)", type_label=if];
4006 [label="39_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
224 [label="40_ winner_TOD1 = msg.sender;\n224-expression_statement-41-41", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
230 [label="43_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n230-function_definition-44-46", method="getReward_TOD1()", type_label=function_definition];
235 [label="44_ winner_TOD1.transfer(msg.value);\n235-expression_statement-45-45", method="getReward_TOD1()", type_label=expression_statement];
247 [label="48_ address payable winner_TOD39;\n247-new_variable-49-49", method="", type_label=new_variable];
251 [label="49_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n251-function_definition-50-54", method="play_TOD39(bytes32 guess)", type_label=function_definition];
259 [label="50_ if\n259-if-51-53", method="play_TOD39(bytes32 guess)", type_label=if];
4063 [label="50_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
281 [label="51_ winner_TOD39 = msg.sender;\n281-expression_statement-52-52", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
287 [label="54_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n287-function_definition-55-57", method="getReward_TOD39()", type_label=function_definition];
292 [label="55_ winner_TOD39.transfer(msg.value);\n292-expression_statement-56-56", method="getReward_TOD39()", type_label=expression_statement];
311 [label="58_ bool claimed_TOD36 = false;\n311-new_variable-59-59", method="", type_label=new_variable];
317 [label="59_ address payable owner_TOD36;\n317-new_variable-60-60", method="", type_label=new_variable];
321 [label="60_ uint256 reward_TOD36;\n321-new_variable-61-61", method="", type_label=new_variable];
325 [label="61_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n325-function_definition-62-67", method="setReward_TOD36()", type_label=function_definition];
330 [label="62_ require (!claimed_TOD36);\n330-expression_statement-63-63", method="setReward_TOD36()", type_label=expression_statement];
336 [label="63_ require(msg.sender == owner_TOD36);\n336-expression_statement-64-64", method="setReward_TOD36()", type_label=expression_statement];
345 [label="64_ owner_TOD36.transfer(reward_TOD36);\n345-expression_statement-65-65", method="setReward_TOD36()", type_label=expression_statement];
352 [label="65_ reward_TOD36 = msg.value;\n352-expression_statement-66-66", method="setReward_TOD36()", type_label=expression_statement];
358 [label="67_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n358-function_definition-68-73", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
366 [label="68_ require (!claimed_TOD36);\n366-expression_statement-69-69", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
372 [label="69_ require(submission < 10);\n372-expression_statement-70-70", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
379 [label="70_ msg.sender.transfer(reward_TOD36);\n379-expression_statement-71-71", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
388 [label="71_ claimed_TOD36 = true;\n388-expression_statement-72-72", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
411 [label="74_ function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public {\n        Token t = Token(_token);\n        require(t.transferFrom(_from, address(this), _value));\n        emit receivedTokens(_from, _value, _token, _extraData);\n    }\n411-function_definition-75-79", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=function_definition];
431 [label="75_ Token t = Token(_token);\n431-new_variable-76-76", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=new_variable];
441 [label="76_ require(t.transferFrom(_from, address(this), _value));\n441-expression_statement-77-77", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=expression_statement];
467 [label="79_ bool claimed_TOD2 = false;\n467-new_variable-80-80", method="", type_label=new_variable];
473 [label="80_ address payable owner_TOD2;\n473-new_variable-81-81", method="", type_label=new_variable];
477 [label="81_ uint256 reward_TOD2;\n477-new_variable-82-82", method="", type_label=new_variable];
481 [label="82_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n481-function_definition-83-88", method="setReward_TOD2()", type_label=function_definition];
486 [label="83_ require (!claimed_TOD2);\n486-expression_statement-84-84", method="setReward_TOD2()", type_label=expression_statement];
492 [label="84_ require(msg.sender == owner_TOD2);\n492-expression_statement-85-85", method="setReward_TOD2()", type_label=expression_statement];
501 [label="85_ owner_TOD2.transfer(reward_TOD2);\n501-expression_statement-86-86", method="setReward_TOD2()", type_label=expression_statement];
508 [label="86_ reward_TOD2 = msg.value;\n508-expression_statement-87-87", method="setReward_TOD2()", type_label=expression_statement];
514 [label="88_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n514-function_definition-89-94", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
522 [label="89_ require (!claimed_TOD2);\n522-expression_statement-90-90", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
528 [label="90_ require(submission < 10);\n528-expression_statement-91-91", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
535 [label="91_ msg.sender.transfer(reward_TOD2);\n535-expression_statement-92-92", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
544 [label="92_ claimed_TOD2 = true;\n544-expression_statement-93-93", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
563 [label="97_ address payable winner_TOD17;\n563-new_variable-98-98", method="", type_label=new_variable];
567 [label="98_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n567-function_definition-99-103", method="play_TOD17(bytes32 guess)", type_label=function_definition];
575 [label="99_ if\n575-if-100-102", method="play_TOD17(bytes32 guess)", type_label=if];
4379 [label="99_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
597 [label="100_ winner_TOD17 = msg.sender;\n597-expression_statement-101-101", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
603 [label="103_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n603-function_definition-104-106", method="getReward_TOD17()", type_label=function_definition];
608 [label="104_ winner_TOD17.transfer(msg.value);\n608-expression_statement-105-105", method="getReward_TOD17()", type_label=expression_statement];
620 [label="108_ function totalSupply() public view returns (uint256);\n620-function_definition-109-109", method="totalSupply()", type_label=function_definition];
628 [label="109_ address payable winner_TOD37;\n628-new_variable-110-110", method="", type_label=new_variable];
632 [label="110_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n632-function_definition-111-115", method="play_TOD37(bytes32 guess)", type_label=function_definition];
640 [label="111_ if\n640-if-112-114", method="play_TOD37(bytes32 guess)", type_label=if];
4444 [label="111_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
662 [label="112_ winner_TOD37 = msg.sender;\n662-expression_statement-113-113", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
668 [label="115_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n668-function_definition-116-118", method="getReward_TOD37()", type_label=function_definition];
673 [label="116_ winner_TOD37.transfer(msg.value);\n673-expression_statement-117-117", method="getReward_TOD37()", type_label=expression_statement];
682 [label="118_ function actualBalanceOf(address _owner) public view returns (uint256 balance);\n682-function_definition-119-119", method="actualBalanceOf(address _owner)", type_label=function_definition];
695 [label="119_ address payable winner_TOD3;\n695-new_variable-120-120", method="", type_label=new_variable];
699 [label="120_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n699-function_definition-121-125", method="play_TOD3(bytes32 guess)", type_label=function_definition];
707 [label="121_ if\n707-if-122-124", method="play_TOD3(bytes32 guess)", type_label=if];
4511 [label="121_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
729 [label="122_ winner_TOD3 = msg.sender;\n729-expression_statement-123-123", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
735 [label="125_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n735-function_definition-126-128", method="getReward_TOD3()", type_label=function_definition];
740 [label="126_ winner_TOD3.transfer(msg.value);\n740-expression_statement-127-127", method="getReward_TOD3()", type_label=expression_statement];
749 [label="128_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n749-function_definition-129-129", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
769 [label="129_ address payable winner_TOD9;\n769-new_variable-130-130", method="", type_label=new_variable];
773 [label="130_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n773-function_definition-131-135", method="play_TOD9(bytes32 guess)", type_label=function_definition];
781 [label="131_ if\n781-if-132-134", method="play_TOD9(bytes32 guess)", type_label=if];
4585 [label="131_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
803 [label="132_ winner_TOD9 = msg.sender;\n803-expression_statement-133-133", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
809 [label="135_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n809-function_definition-136-138", method="getReward_TOD9()", type_label=function_definition];
814 [label="136_ winner_TOD9.transfer(msg.value);\n814-expression_statement-137-137", method="getReward_TOD9()", type_label=expression_statement];
823 [label="138_ function renounceOwnership() public;\n823-function_definition-139-139", method="renounceOwnership()", type_label=function_definition];
826 [label="139_ address payable winner_TOD25;\n826-new_variable-140-140", method="", type_label=new_variable];
830 [label="140_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n830-function_definition-141-145", method="play_TOD25(bytes32 guess)", type_label=function_definition];
838 [label="141_ if\n838-if-142-144", method="play_TOD25(bytes32 guess)", type_label=if];
4642 [label="141_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
860 [label="142_ winner_TOD25 = msg.sender;\n860-expression_statement-143-143", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
866 [label="145_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n866-function_definition-146-148", method="getReward_TOD25()", type_label=function_definition];
871 [label="146_ winner_TOD25.transfer(msg.value);\n871-expression_statement-147-147", method="getReward_TOD25()", type_label=expression_statement];
880 [label="148_ function transferOwnership(address _newOwner) public;\n880-function_definition-149-149", method="transferOwnership(address _newOwner)", type_label=function_definition];
887 [label="149_ address payable winner_TOD19;\n887-new_variable-150-150", method="", type_label=new_variable];
891 [label="150_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n891-function_definition-151-155", method="play_TOD19(bytes32 guess)", type_label=function_definition];
899 [label="151_ if\n899-if-152-154", method="play_TOD19(bytes32 guess)", type_label=if];
4703 [label="151_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
921 [label="152_ winner_TOD19 = msg.sender;\n921-expression_statement-153-153", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
927 [label="155_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n927-function_definition-156-158", method="getReward_TOD19()", type_label=function_definition];
932 [label="156_ winner_TOD19.transfer(msg.value);\n932-expression_statement-157-157", method="getReward_TOD19()", type_label=expression_statement];
941 [label="158_ function pause() public;\n941-function_definition-159-159", method="pause()", type_label=function_definition];
944 [label="159_ bool claimed_TOD26 = false;\n944-new_variable-160-160", method="", type_label=new_variable];
950 [label="160_ address payable owner_TOD26;\n950-new_variable-161-161", method="", type_label=new_variable];
954 [label="161_ uint256 reward_TOD26;\n954-new_variable-162-162", method="", type_label=new_variable];
958 [label="162_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n958-function_definition-163-168", method="setReward_TOD26()", type_label=function_definition];
963 [label="163_ require (!claimed_TOD26);\n963-expression_statement-164-164", method="setReward_TOD26()", type_label=expression_statement];
969 [label="164_ require(msg.sender == owner_TOD26);\n969-expression_statement-165-165", method="setReward_TOD26()", type_label=expression_statement];
978 [label="165_ owner_TOD26.transfer(reward_TOD26);\n978-expression_statement-166-166", method="setReward_TOD26()", type_label=expression_statement];
985 [label="166_ reward_TOD26 = msg.value;\n985-expression_statement-167-167", method="setReward_TOD26()", type_label=expression_statement];
991 [label="168_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n991-function_definition-169-174", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
999 [label="169_ require (!claimed_TOD26);\n999-expression_statement-170-170", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1005 [label="170_ require(submission < 10);\n1005-expression_statement-171-171", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1012 [label="171_ msg.sender.transfer(reward_TOD26);\n1012-expression_statement-172-172", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1021 [label="172_ claimed_TOD26 = true;\n1021-expression_statement-173-173", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
1026 [label="174_ function unpause() public;\n1026-function_definition-175-175", method="unpause()", type_label=function_definition];
1029 [label="175_ bool claimed_TOD20 = false;\n1029-new_variable-176-176", method="", type_label=new_variable];
1035 [label="176_ address payable owner_TOD20;\n1035-new_variable-177-177", method="", type_label=new_variable];
1039 [label="177_ uint256 reward_TOD20;\n1039-new_variable-178-178", method="", type_label=new_variable];
1043 [label="178_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n1043-function_definition-179-184", method="setReward_TOD20()", type_label=function_definition];
1048 [label="179_ require (!claimed_TOD20);\n1048-expression_statement-180-180", method="setReward_TOD20()", type_label=expression_statement];
1054 [label="180_ require(msg.sender == owner_TOD20);\n1054-expression_statement-181-181", method="setReward_TOD20()", type_label=expression_statement];
1063 [label="181_ owner_TOD20.transfer(reward_TOD20);\n1063-expression_statement-182-182", method="setReward_TOD20()", type_label=expression_statement];
1070 [label="182_ reward_TOD20 = msg.value;\n1070-expression_statement-183-183", method="setReward_TOD20()", type_label=expression_statement];
1076 [label="184_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n1076-function_definition-185-190", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
1084 [label="185_ require (!claimed_TOD20);\n1084-expression_statement-186-186", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1090 [label="186_ require(submission < 10);\n1090-expression_statement-187-187", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1097 [label="187_ msg.sender.transfer(reward_TOD20);\n1097-expression_statement-188-188", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1106 [label="188_ claimed_TOD20 = true;\n1106-expression_statement-189-189", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
1114 [label="192_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"Safe mul error\");\n        return c;\n    }\n1114-function_definition-193-200", method="mul(uint256 a,uint256 b)", type_label=function_definition];
1131 [label="193_ if_a == 0\n1131-if-194-196", method="mul(uint256 a,uint256 b)", type_label=if];
4935 [label="193_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
1136 [label="194_ return 0;\n1136-return-195-195", method="mul(uint256 a,uint256 b)", type_label=return];
1138 [label="196_ uint256 c = a * b;\n1138-new_variable-197-197", method="mul(uint256 a,uint256 b)", type_label=new_variable];
1146 [label="197_ require(c / a == b, \"Safe mul error\");\n1146-expression_statement-198-198", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
1158 [label="198_ return c;\n1158-return-199-199", method="mul(uint256 a,uint256 b)", type_label=return];
1160 [label="200_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"Safe div error\");\n        uint256 c = a / b;\n        return c;\n    }\n1160-function_definition-201-205", method="div(uint256 a,uint256 b)", type_label=function_definition];
1177 [label="201_ require(b > 0, \"Safe div error\");\n1177-expression_statement-202-202", method="div(uint256 a,uint256 b)", type_label=expression_statement];
1187 [label="202_ uint256 c = a / b;\n1187-new_variable-203-203", method="div(uint256 a,uint256 b)", type_label=new_variable];
1195 [label="203_ return c;\n1195-return-204-204", method="div(uint256 a,uint256 b)", type_label=return];
1197 [label="205_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"Safe sub error\");\n        uint256 c = a - b;\n        return c;\n    }\n1197-function_definition-206-210", method="sub(uint256 a,uint256 b)", type_label=function_definition];
1214 [label="206_ require(b <= a, \"Safe sub error\");\n1214-expression_statement-207-207", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
1224 [label="207_ uint256 c = a - b;\n1224-new_variable-208-208", method="sub(uint256 a,uint256 b)", type_label=new_variable];
1232 [label="208_ return c;\n1232-return-209-209", method="sub(uint256 a,uint256 b)", type_label=return];
1234 [label="210_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"Safe add error\");\n        return c;\n    }\n1234-function_definition-211-215", method="add(uint256 a,uint256 b)", type_label=function_definition];
1251 [label="211_ uint256 c = a + b;\n1251-new_variable-212-212", method="add(uint256 a,uint256 b)", type_label=new_variable];
1259 [label="212_ require(c >= a, \"Safe add error\");\n1259-expression_statement-213-213", method="add(uint256 a,uint256 b)", type_label=expression_statement];
1269 [label="213_ return c;\n1269-return-214-214", method="add(uint256 a,uint256 b)", type_label=return];
1271 [label="215_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"Safe mod error\");\n        return a % b;\n    }\n1271-function_definition-216-219", method="mod(uint256 a,uint256 b)", type_label=function_definition];
1288 [label="216_ require(b != 0, \"Safe mod error\");\n1288-expression_statement-217-217", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
1298 [label="217_ return a % b;\n1298-return-218-218", method="mod(uint256 a,uint256 b)", type_label=return];
1316 [label="222_ address payable winner_TOD5;\n1316-new_variable-223-223", method="", type_label=new_variable];
1320 [label="223_ function play_TOD5(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD5 = msg.sender;\n        }\n    }\n1320-function_definition-224-228", method="play_TOD5(bytes32 guess)", type_label=function_definition];
1328 [label="224_ if\n1328-if-225-227", method="play_TOD5(bytes32 guess)", type_label=if];
5132 [label="224_ end_if", method="play_TOD5(bytes32 guess)", type_label=end_if];
1350 [label="225_ winner_TOD5 = msg.sender;\n1350-expression_statement-226-226", method="play_TOD5(bytes32 guess)", type_label=expression_statement];
1356 [label="228_ function getReward_TOD5() payable public{\n       winner_TOD5.transfer(msg.value);\n    }\n1356-function_definition-229-231", method="getReward_TOD5()", type_label=function_definition];
1361 [label="229_ winner_TOD5.transfer(msg.value);\n1361-expression_statement-230-230", method="getReward_TOD5()", type_label=expression_statement];
1370 [label="231_ uint public minimumQuorum;\n1370-new_variable-232-232", method="", type_label=new_variable];
1375 [label="232_ address payable winner_TOD15;\n1375-new_variable-233-233", method="", type_label=new_variable];
1379 [label="233_ function play_TOD15(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD15 = msg.sender;\n        }\n    }\n1379-function_definition-234-238", method="play_TOD15(bytes32 guess)", type_label=function_definition];
1387 [label="234_ if\n1387-if-235-237", method="play_TOD15(bytes32 guess)", type_label=if];
5191 [label="234_ end_if", method="play_TOD15(bytes32 guess)", type_label=end_if];
1409 [label="235_ winner_TOD15 = msg.sender;\n1409-expression_statement-236-236", method="play_TOD15(bytes32 guess)", type_label=expression_statement];
1415 [label="238_ function getReward_TOD15() payable public{\n       winner_TOD15.transfer(msg.value);\n    }\n1415-function_definition-239-241", method="getReward_TOD15()", type_label=function_definition];
1420 [label="239_ winner_TOD15.transfer(msg.value);\n1420-expression_statement-240-240", method="getReward_TOD15()", type_label=expression_statement];
1429 [label="241_ uint public minimumTokensToVote;\n1429-new_variable-242-242", method="", type_label=new_variable];
1434 [label="242_ bool claimed_TOD28 = false;\n1434-new_variable-243-243", method="", type_label=new_variable];
1440 [label="243_ address payable owner_TOD28;\n1440-new_variable-244-244", method="", type_label=new_variable];
1444 [label="244_ uint256 reward_TOD28;\n1444-new_variable-245-245", method="", type_label=new_variable];
1448 [label="245_ function setReward_TOD28() public payable {\n        require (!claimed_TOD28);\n        require(msg.sender == owner_TOD28);\n        owner_TOD28.transfer(reward_TOD28);\n        reward_TOD28 = msg.value;\n    }\n1448-function_definition-246-251", method="setReward_TOD28()", type_label=function_definition];
1453 [label="246_ require (!claimed_TOD28);\n1453-expression_statement-247-247", method="setReward_TOD28()", type_label=expression_statement];
1459 [label="247_ require(msg.sender == owner_TOD28);\n1459-expression_statement-248-248", method="setReward_TOD28()", type_label=expression_statement];
1468 [label="248_ owner_TOD28.transfer(reward_TOD28);\n1468-expression_statement-249-249", method="setReward_TOD28()", type_label=expression_statement];
1475 [label="249_ reward_TOD28 = msg.value;\n1475-expression_statement-250-250", method="setReward_TOD28()", type_label=expression_statement];
1481 [label="251_ function claimReward_TOD28(uint256 submission) public {\n        require (!claimed_TOD28);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD28);\n        claimed_TOD28 = true;\n    }\n1481-function_definition-252-257", method="claimReward_TOD28(uint256 submission)", type_label=function_definition];
1489 [label="252_ require (!claimed_TOD28);\n1489-expression_statement-253-253", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
1495 [label="253_ require(submission < 10);\n1495-expression_statement-254-254", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
1502 [label="254_ msg.sender.transfer(reward_TOD28);\n1502-expression_statement-255-255", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
1511 [label="255_ claimed_TOD28 = true;\n1511-expression_statement-256-256", method="claimReward_TOD28(uint256 submission)", type_label=expression_statement];
1516 [label="257_ uint public debatingPeriodInMinutes;\n1516-new_variable-258-258", method="", type_label=new_variable];
1521 [label="258_ bool claimed_TOD34 = false;\n1521-new_variable-259-259", method="", type_label=new_variable];
1527 [label="259_ address payable owner_TOD34;\n1527-new_variable-260-260", method="", type_label=new_variable];
1531 [label="260_ uint256 reward_TOD34;\n1531-new_variable-261-261", method="", type_label=new_variable];
1535 [label="261_ function setReward_TOD34() public payable {\n        require (!claimed_TOD34);\n        require(msg.sender == owner_TOD34);\n        owner_TOD34.transfer(reward_TOD34);\n        reward_TOD34 = msg.value;\n    }\n1535-function_definition-262-267", method="setReward_TOD34()", type_label=function_definition];
1540 [label="262_ require (!claimed_TOD34);\n1540-expression_statement-263-263", method="setReward_TOD34()", type_label=expression_statement];
1546 [label="263_ require(msg.sender == owner_TOD34);\n1546-expression_statement-264-264", method="setReward_TOD34()", type_label=expression_statement];
1555 [label="264_ owner_TOD34.transfer(reward_TOD34);\n1555-expression_statement-265-265", method="setReward_TOD34()", type_label=expression_statement];
1562 [label="265_ reward_TOD34 = msg.value;\n1562-expression_statement-266-266", method="setReward_TOD34()", type_label=expression_statement];
1568 [label="267_ function claimReward_TOD34(uint256 submission) public {\n        require (!claimed_TOD34);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD34);\n        claimed_TOD34 = true;\n    }\n1568-function_definition-268-273", method="claimReward_TOD34(uint256 submission)", type_label=function_definition];
1576 [label="268_ require (!claimed_TOD34);\n1576-expression_statement-269-269", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
1582 [label="269_ require(submission < 10);\n1582-expression_statement-270-270", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
1589 [label="270_ msg.sender.transfer(reward_TOD34);\n1589-expression_statement-271-271", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
1598 [label="271_ claimed_TOD34 = true;\n1598-expression_statement-272-272", method="claimReward_TOD34(uint256 submission)", type_label=expression_statement];
1603 [label="273_ Proposal[] public proposals;\n1603-new_variable-274-274", method="", type_label=new_variable];
1610 [label="274_ address payable winner_TOD21;\n1610-new_variable-275-275", method="", type_label=new_variable];
1614 [label="275_ function play_TOD21(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD21 = msg.sender;\n        }\n    }\n1614-function_definition-276-280", method="play_TOD21(bytes32 guess)", type_label=function_definition];
1622 [label="276_ if\n1622-if-277-279", method="play_TOD21(bytes32 guess)", type_label=if];
5426 [label="276_ end_if", method="play_TOD21(bytes32 guess)", type_label=end_if];
1644 [label="277_ winner_TOD21 = msg.sender;\n1644-expression_statement-278-278", method="play_TOD21(bytes32 guess)", type_label=expression_statement];
1650 [label="280_ function getReward_TOD21() payable public{\n       winner_TOD21.transfer(msg.value);\n    }\n1650-function_definition-281-283", method="getReward_TOD21()", type_label=function_definition];
1655 [label="281_ winner_TOD21.transfer(msg.value);\n1655-expression_statement-282-282", method="getReward_TOD21()", type_label=expression_statement];
1664 [label="283_ uint public numProposals;\n1664-new_variable-284-284", method="", type_label=new_variable];
1669 [label="284_ bool claimed_TOD10 = false;\n1669-new_variable-285-285", method="", type_label=new_variable];
1675 [label="285_ address payable owner_TOD10;\n1675-new_variable-286-286", method="", type_label=new_variable];
1679 [label="286_ uint256 reward_TOD10;\n1679-new_variable-287-287", method="", type_label=new_variable];
1683 [label="287_ function setReward_TOD10() public payable {\n        require (!claimed_TOD10);\n        require(msg.sender == owner_TOD10);\n        owner_TOD10.transfer(reward_TOD10);\n        reward_TOD10 = msg.value;\n    }\n1683-function_definition-288-293", method="setReward_TOD10()", type_label=function_definition];
1688 [label="288_ require (!claimed_TOD10);\n1688-expression_statement-289-289", method="setReward_TOD10()", type_label=expression_statement];
1694 [label="289_ require(msg.sender == owner_TOD10);\n1694-expression_statement-290-290", method="setReward_TOD10()", type_label=expression_statement];
1703 [label="290_ owner_TOD10.transfer(reward_TOD10);\n1703-expression_statement-291-291", method="setReward_TOD10()", type_label=expression_statement];
1710 [label="291_ reward_TOD10 = msg.value;\n1710-expression_statement-292-292", method="setReward_TOD10()", type_label=expression_statement];
1716 [label="293_ function claimReward_TOD10(uint256 submission) public {\n        require (!claimed_TOD10);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD10);\n        claimed_TOD10 = true;\n    }\n1716-function_definition-294-299", method="claimReward_TOD10(uint256 submission)", type_label=function_definition];
1724 [label="294_ require (!claimed_TOD10);\n1724-expression_statement-295-295", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
1730 [label="295_ require(submission < 10);\n1730-expression_statement-296-296", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
1737 [label="296_ msg.sender.transfer(reward_TOD10);\n1737-expression_statement-297-297", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
1746 [label="297_ claimed_TOD10 = true;\n1746-expression_statement-298-298", method="claimReward_TOD10(uint256 submission)", type_label=expression_statement];
1751 [label="299_ Token public tokenAddress;\n1751-new_variable-300-300", method="", type_label=new_variable];
1757 [label="300_ bool claimed_TOD22 = false;\n1757-new_variable-301-301", method="", type_label=new_variable];
1763 [label="301_ address payable owner_TOD22;\n1763-new_variable-302-302", method="", type_label=new_variable];
1767 [label="302_ uint256 reward_TOD22;\n1767-new_variable-303-303", method="", type_label=new_variable];
1771 [label="303_ function setReward_TOD22() public payable {\n        require (!claimed_TOD22);\n        require(msg.sender == owner_TOD22);\n        owner_TOD22.transfer(reward_TOD22);\n        reward_TOD22 = msg.value;\n    }\n1771-function_definition-304-309", method="setReward_TOD22()", type_label=function_definition];
1776 [label="304_ require (!claimed_TOD22);\n1776-expression_statement-305-305", method="setReward_TOD22()", type_label=expression_statement];
1782 [label="305_ require(msg.sender == owner_TOD22);\n1782-expression_statement-306-306", method="setReward_TOD22()", type_label=expression_statement];
1791 [label="306_ owner_TOD22.transfer(reward_TOD22);\n1791-expression_statement-307-307", method="setReward_TOD22()", type_label=expression_statement];
1798 [label="307_ reward_TOD22 = msg.value;\n1798-expression_statement-308-308", method="setReward_TOD22()", type_label=expression_statement];
1804 [label="309_ function claimReward_TOD22(uint256 submission) public {\n        require (!claimed_TOD22);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD22);\n        claimed_TOD22 = true;\n    }\n1804-function_definition-310-315", method="claimReward_TOD22(uint256 submission)", type_label=function_definition];
1812 [label="310_ require (!claimed_TOD22);\n1812-expression_statement-311-311", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1818 [label="311_ require(submission < 10);\n1818-expression_statement-312-312", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1825 [label="312_ msg.sender.transfer(reward_TOD22);\n1825-expression_statement-313-313", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1834 [label="313_ claimed_TOD22 = true;\n1834-expression_statement-314-314", method="claimReward_TOD22(uint256 submission)", type_label=expression_statement];
1839 [label="315_ address chairmanAddress;\n1839-new_variable-316-316", method="", type_label=new_variable];
1843 [label="316_ bool claimed_TOD12 = false;\n1843-new_variable-317-317", method="", type_label=new_variable];
1849 [label="317_ address payable owner_TOD12;\n1849-new_variable-318-318", method="", type_label=new_variable];
1853 [label="318_ uint256 reward_TOD12;\n1853-new_variable-319-319", method="", type_label=new_variable];
1857 [label="319_ function setReward_TOD12() public payable {\n        require (!claimed_TOD12);\n        require(msg.sender == owner_TOD12);\n        owner_TOD12.transfer(reward_TOD12);\n        reward_TOD12 = msg.value;\n    }\n1857-function_definition-320-325", method="setReward_TOD12()", type_label=function_definition];
1862 [label="320_ require (!claimed_TOD12);\n1862-expression_statement-321-321", method="setReward_TOD12()", type_label=expression_statement];
1868 [label="321_ require(msg.sender == owner_TOD12);\n1868-expression_statement-322-322", method="setReward_TOD12()", type_label=expression_statement];
1877 [label="322_ owner_TOD12.transfer(reward_TOD12);\n1877-expression_statement-323-323", method="setReward_TOD12()", type_label=expression_statement];
1884 [label="323_ reward_TOD12 = msg.value;\n1884-expression_statement-324-324", method="setReward_TOD12()", type_label=expression_statement];
1890 [label="325_ function claimReward_TOD12(uint256 submission) public {\n        require (!claimed_TOD12);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD12);\n        claimed_TOD12 = true;\n    }\n1890-function_definition-326-331", method="claimReward_TOD12(uint256 submission)", type_label=function_definition];
1898 [label="326_ require (!claimed_TOD12);\n1898-expression_statement-327-327", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1904 [label="327_ require(submission < 10);\n1904-expression_statement-328-328", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1911 [label="328_ msg.sender.transfer(reward_TOD12);\n1911-expression_statement-329-329", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1920 [label="329_ claimed_TOD12 = true;\n1920-expression_statement-330-330", method="claimReward_TOD12(uint256 submission)", type_label=expression_statement];
1925 [label="331_ bool public initialized = false;\n1925-new_variable-332-332", method="", type_label=new_variable];
1932 [label="332_ address payable winner_TOD35;\n1932-new_variable-333-333", method="", type_label=new_variable];
1936 [label="333_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n1936-function_definition-334-338", method="play_TOD35(bytes32 guess)", type_label=function_definition];
1944 [label="334_ if\n1944-if-335-337", method="play_TOD35(bytes32 guess)", type_label=if];
5748 [label="334_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
1966 [label="335_ winner_TOD35 = msg.sender;\n1966-expression_statement-336-336", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
1972 [label="338_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n1972-function_definition-339-341", method="getReward_TOD35()", type_label=function_definition];
1977 [label="339_ winner_TOD35.transfer(msg.value);\n1977-expression_statement-340-340", method="getReward_TOD35()", type_label=expression_statement];
1988 [label="342_ bool claimed_TOD40 = false;\n1988-new_variable-343-343", method="", type_label=new_variable];
1994 [label="343_ address payable owner_TOD40;\n1994-new_variable-344-344", method="", type_label=new_variable];
1998 [label="344_ uint256 reward_TOD40;\n1998-new_variable-345-345", method="", type_label=new_variable];
2002 [label="345_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n2002-function_definition-346-351", method="setReward_TOD40()", type_label=function_definition];
2007 [label="346_ require (!claimed_TOD40);\n2007-expression_statement-347-347", method="setReward_TOD40()", type_label=expression_statement];
2013 [label="347_ require(msg.sender == owner_TOD40);\n2013-expression_statement-348-348", method="setReward_TOD40()", type_label=expression_statement];
2022 [label="348_ owner_TOD40.transfer(reward_TOD40);\n2022-expression_statement-349-349", method="setReward_TOD40()", type_label=expression_statement];
2029 [label="349_ reward_TOD40 = msg.value;\n2029-expression_statement-350-350", method="setReward_TOD40()", type_label=expression_statement];
2035 [label="351_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n2035-function_definition-352-357", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
2043 [label="352_ require (!claimed_TOD40);\n2043-expression_statement-353-353", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2049 [label="353_ require(submission < 10);\n2049-expression_statement-354-354", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2056 [label="354_ msg.sender.transfer(reward_TOD40);\n2056-expression_statement-355-355", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2065 [label="355_ claimed_TOD40 = true;\n2065-expression_statement-356-356", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2088 [label="358_ address payable winner_TOD33;\n2088-new_variable-359-359", method="", type_label=new_variable];
2092 [label="359_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n2092-function_definition-360-364", method="play_TOD33(bytes32 guess)", type_label=function_definition];
2100 [label="360_ if\n2100-if-361-363", method="play_TOD33(bytes32 guess)", type_label=if];
5904 [label="360_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
2122 [label="361_ winner_TOD33 = msg.sender;\n2122-expression_statement-362-362", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
2128 [label="364_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n2128-function_definition-365-367", method="getReward_TOD33()", type_label=function_definition];
2133 [label="365_ winner_TOD33.transfer(msg.value);\n2133-expression_statement-366-366", method="getReward_TOD33()", type_label=expression_statement];
2156 [label="368_ address payable winner_TOD27;\n2156-new_variable-369-369", method="", type_label=new_variable];
2160 [label="369_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n2160-function_definition-370-374", method="play_TOD27(bytes32 guess)", type_label=function_definition];
2168 [label="370_ if\n2168-if-371-373", method="play_TOD27(bytes32 guess)", type_label=if];
5972 [label="370_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
2190 [label="371_ winner_TOD27 = msg.sender;\n2190-expression_statement-372-372", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
2196 [label="374_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n2196-function_definition-375-377", method="getReward_TOD27()", type_label=function_definition];
2201 [label="375_ winner_TOD27.transfer(msg.value);\n2201-expression_statement-376-376", method="getReward_TOD27()", type_label=expression_statement];
2228 [label="378_ address payable winner_TOD31;\n2228-new_variable-379-379", method="", type_label=new_variable];
2232 [label="379_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n2232-function_definition-380-384", method="play_TOD31(bytes32 guess)", type_label=function_definition];
2240 [label="380_ if\n2240-if-381-383", method="play_TOD31(bytes32 guess)", type_label=if];
6044 [label="380_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
2262 [label="381_ winner_TOD31 = msg.sender;\n2262-expression_statement-382-382", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
2268 [label="384_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n2268-function_definition-385-387", method="getReward_TOD31()", type_label=function_definition];
2273 [label="385_ winner_TOD31.transfer(msg.value);\n2273-expression_statement-386-386", method="getReward_TOD31()", type_label=expression_statement];
2304 [label="388_ address payable winner_TOD13;\n2304-new_variable-389-389", method="", type_label=new_variable];
2308 [label="389_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n2308-function_definition-390-394", method="play_TOD13(bytes32 guess)", type_label=function_definition];
2316 [label="390_ if\n2316-if-391-393", method="play_TOD13(bytes32 guess)", type_label=if];
6120 [label="390_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
2338 [label="391_ winner_TOD13 = msg.sender;\n2338-expression_statement-392-392", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
2344 [label="394_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n2344-function_definition-395-397", method="getReward_TOD13()", type_label=function_definition];
2349 [label="395_ winner_TOD13.transfer(msg.value);\n2349-expression_statement-396-396", method="getReward_TOD13()", type_label=expression_statement];
2372 [label="398_ struct Proposal {\n        address recipient;\n        uint amount;\n        string description;\n        bool signedByChairman;\n        uint minExecutionDate;\n        bool executed;\n        bool proposalPassed;\n        uint numberOfVotes;\n        bytes32 proposalHash;\n        Vote[] votes;\n        mapping (address => bool) voted;\n    }\n2372-expression_statement-399-411", method="Proposal()", type_label=expression_statement];
2422 [label="411_ struct Vote {\n        bool inSupport;\n        address voter;\n    }\n2422-expression_statement-412-415", method="Vote()", type_label=expression_statement];
2432 [label="415_ modifier onlyTokenholders {\n        require(tokenAddress.actualBalanceOf(msg.sender) > minimumTokensToVote);\n        _;\n    }\n2432-expression_statement-416-419", method="", type_label=expression_statement];
2435 [label="416_ require(tokenAddress.actualBalanceOf(msg.sender) > minimumTokensToVote);\n2435-expression_statement-417-417", method="", type_label=expression_statement];
2449 [label="417_ _;\n2449-expression_statement-418-418", method="", type_label=expression_statement];
2451 [label="419_ modifier onlyChairman {\n        require(msg.sender == chairmanAddress);\n        _;\n    }\n2451-expression_statement-420-423", method="", type_label=expression_statement];
2454 [label="420_ require(msg.sender == chairmanAddress);\n2454-expression_statement-421-421", method="", type_label=expression_statement];
2463 [label="421_ _;\n2463-expression_statement-422-422", method="", type_label=expression_statement];
2467 [label="425_ bool claimed_TOD32 = false;\n2467-new_variable-426-426", method="", type_label=new_variable];
2473 [label="426_ address payable owner_TOD32;\n2473-new_variable-427-427", method="", type_label=new_variable];
2477 [label="427_ uint256 reward_TOD32;\n2477-new_variable-428-428", method="", type_label=new_variable];
2481 [label="428_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n2481-function_definition-429-434", method="setReward_TOD32()", type_label=function_definition];
2486 [label="429_ require (!claimed_TOD32);\n2486-expression_statement-430-430", method="setReward_TOD32()", type_label=expression_statement];
2492 [label="430_ require(msg.sender == owner_TOD32);\n2492-expression_statement-431-431", method="setReward_TOD32()", type_label=expression_statement];
2501 [label="431_ owner_TOD32.transfer(reward_TOD32);\n2501-expression_statement-432-432", method="setReward_TOD32()", type_label=expression_statement];
2508 [label="432_ reward_TOD32 = msg.value;\n2508-expression_statement-433-433", method="setReward_TOD32()", type_label=expression_statement];
2514 [label="434_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n2514-function_definition-435-440", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
2522 [label="435_ require (!claimed_TOD32);\n2522-expression_statement-436-436", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2528 [label="436_ require(submission < 10);\n2528-expression_statement-437-437", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2535 [label="437_ msg.sender.transfer(reward_TOD32);\n2535-expression_statement-438-438", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2544 [label="438_ claimed_TOD32 = true;\n2544-expression_statement-439-439", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
2549 [label="440_ function init(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {\n        require(!initialized);\n        initialized = true;\n        changeVotingRules(_tokenAddress, _chairmanAddress, _minimumTokensToVote, _minimumPercentToPassAVote, _minutesForDebate);\n        emit Initialized();\n    }\n2549-function_definition-441-446", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=function_definition];
2572 [label="440_ onlyOwner\n2572-expression_statement-441-441", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2576 [label="441_ require(!initialized);\n2576-expression_statement-442-442", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2582 [label="442_ initialized = true;\n2582-expression_statement-443-443", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2587 [label="443_ changeVotingRules(_tokenAddress, _chairmanAddress, _minimumTokensToVote, _minimumPercentToPassAVote, _minutesForDebate);\n2587-expression_statement-444-444", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2602 [label="446_ bool claimed_TOD38 = false;\n2602-new_variable-447-447", method="", type_label=new_variable];
2608 [label="447_ address payable owner_TOD38;\n2608-new_variable-448-448", method="", type_label=new_variable];
2612 [label="448_ uint256 reward_TOD38;\n2612-new_variable-449-449", method="", type_label=new_variable];
2616 [label="449_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n2616-function_definition-450-455", method="setReward_TOD38()", type_label=function_definition];
2621 [label="450_ require (!claimed_TOD38);\n2621-expression_statement-451-451", method="setReward_TOD38()", type_label=expression_statement];
2627 [label="451_ require(msg.sender == owner_TOD38);\n2627-expression_statement-452-452", method="setReward_TOD38()", type_label=expression_statement];
2636 [label="452_ owner_TOD38.transfer(reward_TOD38);\n2636-expression_statement-453-453", method="setReward_TOD38()", type_label=expression_statement];
2643 [label="453_ reward_TOD38 = msg.value;\n2643-expression_statement-454-454", method="setReward_TOD38()", type_label=expression_statement];
2649 [label="455_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n2649-function_definition-456-461", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
2657 [label="456_ require (!claimed_TOD38);\n2657-expression_statement-457-457", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2663 [label="457_ require(submission < 10);\n2663-expression_statement-458-458", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2670 [label="458_ msg.sender.transfer(reward_TOD38);\n2670-expression_statement-459-459", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2679 [label="459_ claimed_TOD38 = true;\n2679-expression_statement-460-460", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
2684 [label="461_ function changeVotingRules(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {\n        require(_chairmanAddress != address(0));\n        require(_minimumPercentToPassAVote <= 51);\n        tokenAddress = Token(_tokenAddress);\n        chairmanAddress = _chairmanAddress;\n        if (_minimumTokensToVote == 0 ) _minimumTokensToVote = 1;\n        minimumTokensToVote = _minimumTokensToVote;\n        if (_minimumPercentToPassAVote == 0 ) _minimumPercentToPassAVote = 51;\n        minimumQuorum = _minimumPercentToPassAVote;\n        debatingPeriodInMinutes = _minutesForDebate;\n        emit ChangeOfRules(_minimumTokensToVote, minimumQuorum, debatingPeriodInMinutes, address(tokenAddress), chairmanAddress);\n    }\n2684-function_definition-462-473", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=function_definition];
2707 [label="461_ onlyOwner\n2707-expression_statement-462-462", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2711 [label="462_ require(_chairmanAddress != address(0));\n2711-expression_statement-463-463", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2720 [label="463_ require(_minimumPercentToPassAVote <= 51);\n2720-expression_statement-464-464", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2727 [label="464_ tokenAddress = Token(_tokenAddress);\n2727-expression_statement-465-465", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2734 [label="465_ chairmanAddress = _chairmanAddress;\n2734-expression_statement-466-466", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2738 [label="466_ if__minimumTokensToVote == 0\n2738-if-467-467", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=if];
6542 [label="466_ end_if", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=end_if];
2742 [label="466_ _minimumTokensToVote = 1;\n2742-expression_statement-467-467", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2746 [label="467_ minimumTokensToVote = _minimumTokensToVote;\n2746-expression_statement-468-468", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2750 [label="468_ if__minimumPercentToPassAVote == 0\n2750-if-469-469", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=if];
6554 [label="468_ end_if", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=end_if];
2754 [label="468_ _minimumPercentToPassAVote = 51;\n2754-expression_statement-469-469", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2758 [label="469_ minimumQuorum = _minimumPercentToPassAVote;\n2758-expression_statement-470-470", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2762 [label="470_ debatingPeriodInMinutes = _minutesForDebate;\n2762-expression_statement-471-471", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
2780 [label="473_ bool claimed_TOD4 = false;\n2780-new_variable-474-474", method="", type_label=new_variable];
2786 [label="474_ address payable owner_TOD4;\n2786-new_variable-475-475", method="", type_label=new_variable];
2790 [label="475_ uint256 reward_TOD4;\n2790-new_variable-476-476", method="", type_label=new_variable];
2794 [label="476_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n2794-function_definition-477-482", method="setReward_TOD4()", type_label=function_definition];
2799 [label="477_ require (!claimed_TOD4);\n2799-expression_statement-478-478", method="setReward_TOD4()", type_label=expression_statement];
2805 [label="478_ require(msg.sender == owner_TOD4);\n2805-expression_statement-479-479", method="setReward_TOD4()", type_label=expression_statement];
2814 [label="479_ owner_TOD4.transfer(reward_TOD4);\n2814-expression_statement-480-480", method="setReward_TOD4()", type_label=expression_statement];
2821 [label="480_ reward_TOD4 = msg.value;\n2821-expression_statement-481-481", method="setReward_TOD4()", type_label=expression_statement];
2827 [label="482_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n2827-function_definition-483-488", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
2835 [label="483_ require (!claimed_TOD4);\n2835-expression_statement-484-484", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2841 [label="484_ require(submission < 10);\n2841-expression_statement-485-485", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2848 [label="485_ msg.sender.transfer(reward_TOD4);\n2848-expression_statement-486-486", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2857 [label="486_ claimed_TOD4 = true;\n2857-expression_statement-487-487", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
2862 [label="488_ function newProposal(\n        address destination,\n        uint weiAmount,\n        string memory transactionDescription,\n        bytes memory transactionBytecode\n    )\n        onlyTokenholders public\n        returns (uint proposalID)\n    {\n        proposalID = proposals.length++;\n        Proposal storage p = proposals[proposalID];\n        p.recipient = destination;\n        p.signedByChairman = false;\n        p.amount = weiAmount;\n        p.description = transactionDescription;\n        p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n        p.minExecutionDate = now + debatingPeriodInMinutes * 1 minutes;\n        p.executed = false;\n        p.proposalPassed = false;\n        p.numberOfVotes = 0;\n        emit ProposalAdded(proposalID, destination, weiAmount, transactionDescription);\n        numProposals = proposalID+1;\n        return proposalID;\n    }\n2862-function_definition-489-512", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=function_definition];
2880 [label="494_ onlyTokenholders\n2880-expression_statement-495-495", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2889 [label="497_ proposalID = proposals.length++;\n2889-expression_statement-498-498", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2892 [label="497_ proposals.length++\n2892-expression_statement-498-498", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2896 [label="498_ Proposal storage p = proposals[proposalID];\n2896-new_variable-499-499", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=new_variable];
2905 [label="499_ p.recipient = destination;\n2905-expression_statement-500-500", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2911 [label="500_ p.signedByChairman = false;\n2911-expression_statement-501-501", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2918 [label="501_ p.amount = weiAmount;\n2918-expression_statement-502-502", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2924 [label="502_ p.description = transactionDescription;\n2924-expression_statement-503-503", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2930 [label="503_ p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n2930-expression_statement-504-504", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2948 [label="504_ p.minExecutionDate = now + debatingPeriodInMinutes * 1 minutes;\n2948-expression_statement-505-505", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2959 [label="505_ p.executed = false;\n2959-expression_statement-506-506", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2966 [label="506_ p.proposalPassed = false;\n2966-expression_statement-507-507", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2973 [label="507_ p.numberOfVotes = 0;\n2973-expression_statement-508-508", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2989 [label="509_ numProposals = proposalID+1;\n2989-expression_statement-510-510", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
2995 [label="510_ return proposalID;\n2995-return-511-511", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=return];
2997 [label="512_ address payable winner_TOD7;\n2997-new_variable-513-513", method="", type_label=new_variable];
3001 [label="513_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n3001-function_definition-514-518", method="play_TOD7(bytes32 guess)", type_label=function_definition];
3009 [label="514_ if\n3009-if-515-517", method="play_TOD7(bytes32 guess)", type_label=if];
6813 [label="514_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
3031 [label="515_ winner_TOD7 = msg.sender;\n3031-expression_statement-516-516", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
3037 [label="518_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n3037-function_definition-519-521", method="getReward_TOD7()", type_label=function_definition];
3042 [label="519_ winner_TOD7.transfer(msg.value);\n3042-expression_statement-520-520", method="getReward_TOD7()", type_label=expression_statement];
3051 [label="521_ function checkProposalCode(\n        uint proposalNumber,\n        address destination,\n        uint weiAmount,\n        bytes memory transactionBytecode\n    )\n        view public\n        returns (bool codeChecksOut)\n    {\n        Proposal storage p = proposals[proposalNumber];\n        return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n    }\n3051-function_definition-522-533", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=function_definition];
3077 [label="530_ Proposal storage p = proposals[proposalNumber];\n3077-new_variable-531-531", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=new_variable];
3086 [label="531_ return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n3086-return-532-532", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=return];
3104 [label="533_ address payable winner_TOD23;\n3104-new_variable-534-534", method="", type_label=new_variable];
3108 [label="534_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n3108-function_definition-535-539", method="play_TOD23(bytes32 guess)", type_label=function_definition];
3116 [label="535_ if\n3116-if-536-538", method="play_TOD23(bytes32 guess)", type_label=if];
6920 [label="535_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
3138 [label="536_ winner_TOD23 = msg.sender;\n3138-expression_statement-537-537", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
3144 [label="539_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n3144-function_definition-540-542", method="getReward_TOD23()", type_label=function_definition];
3149 [label="540_ winner_TOD23.transfer(msg.value);\n3149-expression_statement-541-541", method="getReward_TOD23()", type_label=expression_statement];
3158 [label="542_ function sign(\n        uint proposalNumber,\n        bool signProposal\n    )\n        onlyTokenholders public\n        returns (uint voteID)\n    {\n        require(initialized);\n        Proposal storage p = proposals[proposalNumber];\n        require(msg.sender == chairmanAddress);\n        require(signProposal == true);\n        p.signedByChairman = signProposal;\n        emit ProposalSignedByChairman(proposalNumber,  signProposal, msg.sender);\n        return proposalNumber;\n    }\n3158-function_definition-543-557", method="sign(uint proposalNumber,bool signProposal)", type_label=function_definition];
3168 [label="546_ onlyTokenholders\n3168-expression_statement-547-547", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
3177 [label="549_ require(initialized);\n3177-expression_statement-550-550", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
3182 [label="550_ Proposal storage p = proposals[proposalNumber];\n3182-new_variable-551-551", method="sign(uint proposalNumber,bool signProposal)", type_label=new_variable];
3191 [label="551_ require(msg.sender == chairmanAddress);\n3191-expression_statement-552-552", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
3200 [label="552_ require(signProposal == true);\n3200-expression_statement-553-553", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
3208 [label="553_ p.signedByChairman = signProposal;\n3208-expression_statement-554-554", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
3224 [label="555_ return proposalNumber;\n3224-return-556-556", method="sign(uint proposalNumber,bool signProposal)", type_label=return];
3226 [label="557_ bool claimed_TOD14 = false;\n3226-new_variable-558-558", method="", type_label=new_variable];
3232 [label="558_ address payable owner_TOD14;\n3232-new_variable-559-559", method="", type_label=new_variable];
3236 [label="559_ uint256 reward_TOD14;\n3236-new_variable-560-560", method="", type_label=new_variable];
3240 [label="560_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n3240-function_definition-561-566", method="setReward_TOD14()", type_label=function_definition];
3245 [label="561_ require (!claimed_TOD14);\n3245-expression_statement-562-562", method="setReward_TOD14()", type_label=expression_statement];
3251 [label="562_ require(msg.sender == owner_TOD14);\n3251-expression_statement-563-563", method="setReward_TOD14()", type_label=expression_statement];
3260 [label="563_ owner_TOD14.transfer(reward_TOD14);\n3260-expression_statement-564-564", method="setReward_TOD14()", type_label=expression_statement];
3267 [label="564_ reward_TOD14 = msg.value;\n3267-expression_statement-565-565", method="setReward_TOD14()", type_label=expression_statement];
3273 [label="566_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n3273-function_definition-567-572", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
3281 [label="567_ require (!claimed_TOD14);\n3281-expression_statement-568-568", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3287 [label="568_ require(submission < 10);\n3287-expression_statement-569-569", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3294 [label="569_ msg.sender.transfer(reward_TOD14);\n3294-expression_statement-570-570", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3303 [label="570_ claimed_TOD14 = true;\n3303-expression_statement-571-571", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
3308 [label="572_ function vote(\n        uint proposalNumber,\n        bool supportsProposal\n    )\n        onlyTokenholders public\n        returns (uint voteID)\n    {\n        Proposal storage p = proposals[proposalNumber];\n        require(p.voted[msg.sender] != true);\n        voteID = p.votes.length++;\n        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\n        p.voted[msg.sender] = true;\n        p.numberOfVotes = voteID +1;\n        emit Voted(proposalNumber,  supportsProposal, msg.sender);\n        return voteID;\n    }\n3308-function_definition-573-588", method="vote(uint proposalNumber,bool supportsProposal)", type_label=function_definition];
3318 [label="576_ onlyTokenholders\n3318-expression_statement-577-577", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
3327 [label="579_ Proposal storage p = proposals[proposalNumber];\n3327-new_variable-580-580", method="vote(uint proposalNumber,bool supportsProposal)", type_label=new_variable];
3336 [label="580_ require(p.voted[msg.sender] != true);\n3336-expression_statement-581-581", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
3350 [label="581_ voteID = p.votes.length++;\n3350-expression_statement-582-582", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
3353 [label="581_ p.votes.length++\n3353-expression_statement-582-582", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
3359 [label="582_ p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\n3359-expression_statement-583-583", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
3377 [label="583_ p.voted[msg.sender] = true;\n3377-expression_statement-584-584", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
3388 [label="584_ p.numberOfVotes = voteID +1;\n3388-expression_statement-585-585", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
3406 [label="586_ return voteID;\n3406-return-587-587", method="vote(uint proposalNumber,bool supportsProposal)", type_label=return];
3408 [label="588_ bool claimed_TOD30 = false;\n3408-new_variable-589-589", method="", type_label=new_variable];
3414 [label="589_ address payable owner_TOD30;\n3414-new_variable-590-590", method="", type_label=new_variable];
3418 [label="590_ uint256 reward_TOD30;\n3418-new_variable-591-591", method="", type_label=new_variable];
3422 [label="591_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n3422-function_definition-592-597", method="setReward_TOD30()", type_label=function_definition];
3427 [label="592_ require (!claimed_TOD30);\n3427-expression_statement-593-593", method="setReward_TOD30()", type_label=expression_statement];
3433 [label="593_ require(msg.sender == owner_TOD30);\n3433-expression_statement-594-594", method="setReward_TOD30()", type_label=expression_statement];
3442 [label="594_ owner_TOD30.transfer(reward_TOD30);\n3442-expression_statement-595-595", method="setReward_TOD30()", type_label=expression_statement];
3449 [label="595_ reward_TOD30 = msg.value;\n3449-expression_statement-596-596", method="setReward_TOD30()", type_label=expression_statement];
3455 [label="597_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n3455-function_definition-598-603", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
3463 [label="598_ require (!claimed_TOD30);\n3463-expression_statement-599-599", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3469 [label="599_ require(submission < 10);\n3469-expression_statement-600-600", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3476 [label="600_ msg.sender.transfer(reward_TOD30);\n3476-expression_statement-601-601", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3485 [label="601_ claimed_TOD30 = true;\n3485-expression_statement-602-602", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
3490 [label="603_ function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public {\n        Proposal storage p = proposals[proposalNumber];\n        require(initialized);\n        require(now > p.minExecutionDate                                              \n            && !p.executed                                                           \n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)));  \n        uint quorum = 0;\n        uint yea = 0;\n        uint nay = 0;\n        for (uint i = 0; i <  p.votes.length; ++i) {\n            Vote storage v = p.votes[i];\n            uint voteWeight = tokenAddress.actualBalanceOf(v.voter);\n            quorum += voteWeight;\n            if (v.inSupport) {\n                yea += voteWeight;\n            } else {\n                nay += voteWeight;\n            }\n        }\n        Token t = Token(tokenAddress);\n        require(quorum >= t.totalSupply().mul(minimumQuorum).div(100));  \n        if (yea > nay ) {\n            p.executed = true;\n            (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);\n            require(success);\n            p.proposalPassed = true;\n        } else {\n            p.proposalPassed = false;\n        }\n        emit ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed);\n    }\n3490-function_definition-604-634", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=function_definition];
3502 [label="604_ Proposal storage p = proposals[proposalNumber];\n3502-new_variable-605-605", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
3511 [label="605_ require(initialized);\n3511-expression_statement-606-606", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
3516 [label="606_ require(now > p.minExecutionDate                                              \n            && !p.executed                                                           \n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)));\n3516-expression_statement-607-609", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
3552 [label="609_ uint quorum = 0;\n3552-new_variable-610-610", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
3558 [label="610_ uint yea = 0;\n3558-new_variable-611-611", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
3564 [label="611_ uint nay = 0;\n3564-new_variable-612-612", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
3570 [label="612_ for(i <  p.votes.length;;++i)\n3570-for-613-622", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=for];
7374 [label="612_ end_loop", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_loop];
3585 [label="612_ ++i\n3585-expression_statement-613-613", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
3588 [label="613_ Vote storage v = p.votes[i];\n3588-new_variable-614-614", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
3599 [label="614_ uint voteWeight = tokenAddress.actualBalanceOf(v.voter);\n3599-new_variable-615-615", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
3612 [label="615_ quorum += voteWeight;\n3612-expression_statement-616-616", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
3616 [label="616_ if\n3616-if-617-621", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=if];
7420 [label="616_ end_if", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_if];
3621 [label="617_ yea += voteWeight;\n3621-expression_statement-618-618", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
3626 [label="619_ nay += voteWeight;\n3626-expression_statement-620-620", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
3630 [label="622_ Token t = Token(tokenAddress);\n3630-new_variable-623-623", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
3640 [label="623_ require(quorum >= t.totalSupply().mul(minimumQuorum).div(100));\n3640-expression_statement-624-624", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
3660 [label="624_ if_yea > nay\n3660-if-625-632", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=if];
7464 [label="624_ end_if", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_if];
3665 [label="625_ p.executed = true;\n3665-expression_statement-626-626", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
3672 [label="626_ (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);\n3672-new_variable-627-627", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
3693 [label="627_ require(success);\n3693-expression_statement-628-628", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
3698 [label="628_ p.proposalPassed = true;\n3698-expression_statement-629-629", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
3706 [label="630_ p.proposalPassed = false;\n3706-expression_statement-631-631", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
3727 [label="634_ bool claimed_TOD8 = false;\n3727-new_variable-635-635", method="", type_label=new_variable];
3733 [label="635_ address payable owner_TOD8;\n3733-new_variable-636-636", method="", type_label=new_variable];
3737 [label="636_ uint256 reward_TOD8;\n3737-new_variable-637-637", method="", type_label=new_variable];
3741 [label="637_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n3741-function_definition-638-643", method="setReward_TOD8()", type_label=function_definition];
3746 [label="638_ require (!claimed_TOD8);\n3746-expression_statement-639-639", method="setReward_TOD8()", type_label=expression_statement];
3752 [label="639_ require(msg.sender == owner_TOD8);\n3752-expression_statement-640-640", method="setReward_TOD8()", type_label=expression_statement];
3761 [label="640_ owner_TOD8.transfer(reward_TOD8);\n3761-expression_statement-641-641", method="setReward_TOD8()", type_label=expression_statement];
3768 [label="641_ reward_TOD8 = msg.value;\n3768-expression_statement-642-642", method="setReward_TOD8()", type_label=expression_statement];
3774 [label="643_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n3774-function_definition-644-649", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
3782 [label="644_ require (!claimed_TOD8);\n3782-expression_statement-645-645", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3788 [label="645_ require(submission < 10);\n3788-expression_statement-646-646", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3795 [label="646_ msg.sender.transfer(reward_TOD8);\n3795-expression_statement-647-647", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
3804 [label="647_ claimed_TOD8 = true;\n3804-expression_statement-648-648", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
3713;
13 -> 19  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
19 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
27 -> 32  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
32 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 74  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
74 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 142  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
120 -> 3924  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3924 -> 148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
142 -> 3924  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
148 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
176 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 224  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
202 -> 4006  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4006 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
224 -> 4006  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
230 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 281  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
259 -> 4063  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4063 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
281 -> 4063  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
287 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
311 -> 317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
325 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
358 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
372 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
431 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
514 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 597  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
575 -> 4379  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4379 -> 603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 4379  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
603 -> 608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 662  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
640 -> 4444  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4444 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 4444  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
668 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 729  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
707 -> 4511  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4511 -> 735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 4511  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
735 -> 740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 803  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
781 -> 4585  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4585 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 4585  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
809 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 860  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
838 -> 4642  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4642 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
860 -> 4642  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
866 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
899 -> 921  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
899 -> 4703  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4703 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 4703  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
927 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
950 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
958 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
991 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 1039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1114 -> 1131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1131 -> 1136  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1131 -> 4935  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4935 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1136 -> 4935  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1136 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1138 -> 1146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1160 -> 1177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1177 -> 1187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1187 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1197 -> 1214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1214 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 1232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1234 -> 1251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1251 -> 1259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1259 -> 1269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1269 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1271 -> 1288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1288 -> 1298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1298 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1320 -> 1328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 1350  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1328 -> 5132  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5132 -> 1356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 5132  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1356 -> 1361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1370 -> 1375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1379 -> 1387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1387 -> 1409  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1387 -> 5191  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5191 -> 1415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1409 -> 5191  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1415 -> 1420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1434 -> 1440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1440 -> 1444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 1453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1453 -> 1459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 1468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1468 -> 1475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1481 -> 1489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1489 -> 1495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1495 -> 1502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1502 -> 1511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1516 -> 1521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1521 -> 1527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1527 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1535 -> 1540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1540 -> 1546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1546 -> 1555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1555 -> 1562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 1576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1576 -> 1582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1582 -> 1589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1589 -> 1598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1603 -> 1610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1614 -> 1622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1622 -> 1644  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1622 -> 5426  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5426 -> 1650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1644 -> 5426  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1650 -> 1655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1664 -> 1669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1669 -> 1675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1675 -> 1679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1683 -> 1688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1688 -> 1694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1694 -> 1703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1703 -> 1710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1716 -> 1724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1724 -> 1730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1730 -> 1737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1737 -> 1746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1751 -> 1757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1757 -> 1763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1763 -> 1767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1771 -> 1776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1776 -> 1782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1782 -> 1791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1791 -> 1798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1804 -> 1812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1812 -> 1818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1818 -> 1825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1825 -> 1834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1839 -> 1843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1843 -> 1849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1849 -> 1853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1857 -> 1862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1862 -> 1868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1868 -> 1877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1877 -> 1884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1890 -> 1898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1898 -> 1904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1904 -> 1911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1911 -> 1920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1925 -> 1932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1936 -> 1944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1944 -> 1966  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1944 -> 5748  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5748 -> 1972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1966 -> 5748  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1972 -> 1977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1988 -> 1994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1994 -> 1998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2002 -> 2007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2007 -> 2013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2013 -> 2022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2022 -> 2029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2035 -> 2043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2043 -> 2049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2049 -> 2056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2056 -> 2065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2092 -> 2100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2100 -> 2122  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2100 -> 5904  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5904 -> 2128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2122 -> 5904  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2128 -> 2133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2160 -> 2168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2168 -> 2190  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2168 -> 5972  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5972 -> 2196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2190 -> 5972  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2196 -> 2201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2232 -> 2240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2240 -> 2262  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2240 -> 6044  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6044 -> 2268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2262 -> 6044  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2268 -> 2273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2308 -> 2316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2316 -> 2338  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2316 -> 6120  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6120 -> 2344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2338 -> 6120  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2344 -> 2349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2372 -> 2422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2422 -> 2432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2432 -> 2451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2435 -> 2449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2454 -> 2463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2467 -> 2473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2473 -> 2477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2481 -> 2486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2486 -> 2492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2492 -> 2501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2501 -> 2508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2514 -> 2522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2522 -> 2528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2528 -> 2535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2535 -> 2544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2549 -> 2576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2576 -> 2582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2582 -> 2587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2602 -> 2608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2608 -> 2612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2616 -> 2621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2621 -> 2627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2627 -> 2636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2636 -> 2643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2649 -> 2657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2657 -> 2663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2663 -> 2670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2670 -> 2679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2684 -> 2711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2711 -> 2720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2720 -> 2727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2727 -> 2734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2734 -> 2738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2738 -> 2742  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2738 -> 6542  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6542 -> 2746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2742 -> 6542  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2746 -> 2750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2750 -> 2754  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2750 -> 6554  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6554 -> 2758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2754 -> 6554  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2758 -> 2762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2780 -> 2786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2786 -> 2790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2794 -> 2799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2799 -> 2805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2805 -> 2814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2814 -> 2821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2827 -> 2835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2835 -> 2841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2841 -> 2848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2848 -> 2857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2862 -> 2889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2889 -> 2896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2896 -> 2905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2905 -> 2911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2911 -> 2918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2918 -> 2924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2924 -> 2930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2930 -> 2948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2948 -> 2959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2959 -> 2966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2966 -> 2973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2989 -> 2995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2995 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3001 -> 3009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3009 -> 3031  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3009 -> 6813  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6813 -> 3037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3031 -> 6813  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3037 -> 3042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3051 -> 3077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3077 -> 3086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3086 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3108 -> 3116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3116 -> 3138  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3116 -> 6920  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6920 -> 3144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3138 -> 6920  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3144 -> 3149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3158 -> 3177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3177 -> 3182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3182 -> 3191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3191 -> 3200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3200 -> 3208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3224 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3226 -> 3232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3232 -> 3236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3240 -> 3245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3245 -> 3251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3251 -> 3260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3260 -> 3267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3273 -> 3281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3281 -> 3287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3287 -> 3294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3294 -> 3303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3308 -> 3327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3327 -> 3336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3336 -> 3350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3350 -> 3359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3359 -> 3377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3377 -> 3388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3406 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3408 -> 3414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3414 -> 3418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3422 -> 3427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3427 -> 3433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3433 -> 3442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3442 -> 3449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3455 -> 3463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3463 -> 3469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3469 -> 3476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3476 -> 3485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3490 -> 3502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3502 -> 3511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3511 -> 3516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3516 -> 3552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3552 -> 3558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3558 -> 3564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3564 -> 3570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3570 -> 3588  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3570 -> 7374  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7374 -> 3630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3585 -> 3570  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3588 -> 3599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3599 -> 3612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3612 -> 3616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3616 -> 3621  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3616 -> 3626  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7420 -> 3585  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
7420 -> 3585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
3621 -> 7420  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3626 -> 7420  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3630 -> 3640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3640 -> 3660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3660 -> 3665  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3660 -> 3706  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7464 -> 3713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3665 -> 3672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3672 -> 3693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3693 -> 3698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3698 -> 7464  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3706 -> 7464  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3727 -> 3733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3733 -> 3737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3741 -> 3746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3746 -> 3752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3752 -> 3761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3761 -> 3768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3774 -> 3782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3782 -> 3788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3788 -> 3795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3795 -> 3804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
