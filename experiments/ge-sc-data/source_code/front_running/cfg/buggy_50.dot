digraph  {
13 [label="3_ bool claimed_TOD2 = false;\n13-new_variable-4-4", method="", type_label=new_variable];
19 [label="4_ address payable owner_TOD2;\n19-new_variable-5-5", method="", type_label=new_variable];
23 [label="5_ uint256 reward_TOD2;\n23-new_variable-6-6", method="", type_label=new_variable];
27 [label="6_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n27-function_definition-7-12", method="setReward_TOD2()", type_label=function_definition];
32 [label="7_ require (!claimed_TOD2);\n32-expression_statement-8-8", method="setReward_TOD2()", type_label=expression_statement];
38 [label="8_ require(msg.sender == owner_TOD2);\n38-expression_statement-9-9", method="setReward_TOD2()", type_label=expression_statement];
47 [label="9_ owner_TOD2.transfer(reward_TOD2);\n47-expression_statement-10-10", method="setReward_TOD2()", type_label=expression_statement];
54 [label="10_ reward_TOD2 = msg.value;\n54-expression_statement-11-11", method="setReward_TOD2()", type_label=expression_statement];
60 [label="12_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n60-function_definition-13-18", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
68 [label="13_ require (!claimed_TOD2);\n68-expression_statement-14-14", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
74 [label="14_ require(submission < 10);\n74-expression_statement-15-15", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
81 [label="15_ msg.sender.transfer(reward_TOD2);\n81-expression_statement-16-16", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
90 [label="16_ claimed_TOD2 = true;\n90-expression_statement-17-17", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
95 [label="18_ address payable private manager;\n95-new_variable-19-19", method="", type_label=new_variable];
100 [label="19_ address payable winner_TOD17;\n100-new_variable-20-20", method="", type_label=new_variable];
104 [label="20_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n104-function_definition-21-25", method="play_TOD17(bytes32 guess)", type_label=function_definition];
112 [label="21_ if\n112-if-22-24", method="play_TOD17(bytes32 guess)", type_label=if];
2338 [label="21_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
134 [label="22_ winner_TOD17 = msg.sender;\n134-expression_statement-23-23", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
140 [label="25_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n140-function_definition-26-28", method="getReward_TOD17()", type_label=function_definition];
145 [label="26_ winner_TOD17.transfer(msg.value);\n145-expression_statement-27-27", method="getReward_TOD17()", type_label=expression_statement];
154 [label="28_ bool private contractactive;\n154-new_variable-29-29", method="", type_label=new_variable];
159 [label="29_ address payable winner_TOD37;\n159-new_variable-30-30", method="", type_label=new_variable];
163 [label="30_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n163-function_definition-31-35", method="play_TOD37(bytes32 guess)", type_label=function_definition];
171 [label="31_ if\n171-if-32-34", method="play_TOD37(bytes32 guess)", type_label=if];
2397 [label="31_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
193 [label="32_ winner_TOD37 = msg.sender;\n193-expression_statement-33-33", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
199 [label="35_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n199-function_definition-36-38", method="getReward_TOD37()", type_label=function_definition];
204 [label="36_ winner_TOD37.transfer(msg.value);\n204-expression_statement-37-37", method="getReward_TOD37()", type_label=expression_statement];
213 [label="38_ uint private hashfee;\n213-new_variable-39-39", method="", type_label=new_variable];
218 [label="39_ address payable winner_TOD3;\n218-new_variable-40-40", method="", type_label=new_variable];
222 [label="40_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n222-function_definition-41-45", method="play_TOD3(bytes32 guess)", type_label=function_definition];
230 [label="41_ if\n230-if-42-44", method="play_TOD3(bytes32 guess)", type_label=if];
2456 [label="41_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
252 [label="42_ winner_TOD3 = msg.sender;\n252-expression_statement-43-43", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
258 [label="45_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n258-function_definition-46-48", method="getReward_TOD3()", type_label=function_definition];
263 [label="46_ winner_TOD3.transfer(msg.value);\n263-expression_statement-47-47", method="getReward_TOD3()", type_label=expression_statement];
272 [label="48_ uint private changehashownerfee;\n272-new_variable-49-49", method="", type_label=new_variable];
277 [label="49_ struct HashRegistration \n    {\n        address owner;\n        uint registrationtime;\n    }\n277-expression_statement-50-54", method="HashRegistration()", type_label=expression_statement];
287 [label="54_ address payable winner_TOD9;\n287-new_variable-55-55", method="", type_label=new_variable];
291 [label="55_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n291-function_definition-56-60", method="play_TOD9(bytes32 guess)", type_label=function_definition];
299 [label="56_ if\n299-if-57-59", method="play_TOD9(bytes32 guess)", type_label=if];
2525 [label="56_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
321 [label="57_ winner_TOD9 = msg.sender;\n321-expression_statement-58-58", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
327 [label="60_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n327-function_definition-61-63", method="getReward_TOD9()", type_label=function_definition];
332 [label="61_ winner_TOD9.transfer(msg.value);\n332-expression_statement-62-62", method="getReward_TOD9()", type_label=expression_statement];
341 [label="63_ mapping(bytes32 => HashRegistration[]) HashList;\n341-new_variable-64-64", method="", type_label=new_variable];
349 [label="64_ address payable winner_TOD25;\n349-new_variable-65-65", method="", type_label=new_variable];
353 [label="65_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n353-function_definition-66-70", method="play_TOD25(bytes32 guess)", type_label=function_definition];
361 [label="66_ if\n361-if-67-69", method="play_TOD25(bytes32 guess)", type_label=if];
2587 [label="66_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
383 [label="67_ winner_TOD25 = msg.sender;\n383-expression_statement-68-68", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
389 [label="70_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n389-function_definition-71-73", method="getReward_TOD25()", type_label=function_definition];
394 [label="71_ winner_TOD25.transfer(msg.value);\n394-expression_statement-72-72", method="getReward_TOD25()", type_label=expression_statement];
403 [label="73_ uint private HashListLength;\n403-new_variable-74-74", method="", type_label=new_variable];
408 [label="74_ address payable winner_TOD31;\n408-new_variable-75-75", method="", type_label=new_variable];
412 [label="75_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n412-function_definition-76-80", method="play_TOD31(bytes32 guess)", type_label=function_definition];
420 [label="76_ if\n420-if-77-79", method="play_TOD31(bytes32 guess)", type_label=if];
2646 [label="76_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
442 [label="77_ winner_TOD31 = msg.sender;\n442-expression_statement-78-78", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
448 [label="80_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n448-function_definition-81-83", method="getReward_TOD31()", type_label=function_definition];
453 [label="81_ winner_TOD31.transfer(msg.value);\n453-expression_statement-82-82", method="getReward_TOD31()", type_label=expression_statement];
476 [label="84_ address payable winner_TOD13;\n476-new_variable-85-85", method="", type_label=new_variable];
480 [label="85_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n480-function_definition-86-90", method="play_TOD13(bytes32 guess)", type_label=function_definition];
488 [label="86_ if\n488-if-87-89", method="play_TOD13(bytes32 guess)", type_label=if];
2714 [label="86_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
510 [label="87_ winner_TOD13 = msg.sender;\n510-expression_statement-88-88", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
516 [label="90_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n516-function_definition-91-93", method="getReward_TOD13()", type_label=function_definition];
521 [label="91_ winner_TOD13.transfer(msg.value);\n521-expression_statement-92-92", method="getReward_TOD13()", type_label=expression_statement];
550 [label="96_ manager = msg.sender;\n550-expression_statement-97-97", method="", type_label=expression_statement];
556 [label="97_ contractactive = true;\n556-expression_statement-98-98", method="", type_label=expression_statement];
561 [label="98_ hashfee = 5000000000000000;\n561-expression_statement-99-99", method="", type_label=expression_statement];
565 [label="99_ changehashownerfee = 25000000000000000;\n565-expression_statement-100-100", method="", type_label=expression_statement];
569 [label="100_ HashListLength = 0;\n569-expression_statement-101-101", method="", type_label=expression_statement];
573 [label="102_ address payable winner_TOD19;\n573-new_variable-103-103", method="", type_label=new_variable];
577 [label="103_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n577-function_definition-104-108", method="play_TOD19(bytes32 guess)", type_label=function_definition];
585 [label="104_ if\n585-if-105-107", method="play_TOD19(bytes32 guess)", type_label=if];
2811 [label="104_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
607 [label="105_ winner_TOD19 = msg.sender;\n607-expression_statement-106-106", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
613 [label="108_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n613-function_definition-109-111", method="getReward_TOD19()", type_label=function_definition];
618 [label="109_ winner_TOD19.transfer(msg.value);\n618-expression_statement-110-110", method="getReward_TOD19()", type_label=expression_statement];
627 [label="111_ modifier onlyManager()\n    {\n        require(msg.sender == manager);\n        _;\n    }\n627-expression_statement-112-116", method="", type_label=expression_statement];
630 [label="113_ require(msg.sender == manager);\n630-expression_statement-114-114", method="", type_label=expression_statement];
639 [label="114_ _;\n639-expression_statement-115-115", method="", type_label=expression_statement];
641 [label="116_ function gethashfee() external view returns(uint)\n    {\n        return hashfee;\n    }\n641-function_definition-117-120", method="gethashfee()", type_label=function_definition];
650 [label="118_ return hashfee;\n650-return-119-119", method="gethashfee()", type_label=return];
652 [label="120_ bool claimed_TOD26 = false;\n652-new_variable-121-121", method="", type_label=new_variable];
658 [label="121_ address payable owner_TOD26;\n658-new_variable-122-122", method="", type_label=new_variable];
662 [label="122_ uint256 reward_TOD26;\n662-new_variable-123-123", method="", type_label=new_variable];
666 [label="123_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n666-function_definition-124-129", method="setReward_TOD26()", type_label=function_definition];
671 [label="124_ require (!claimed_TOD26);\n671-expression_statement-125-125", method="setReward_TOD26()", type_label=expression_statement];
677 [label="125_ require(msg.sender == owner_TOD26);\n677-expression_statement-126-126", method="setReward_TOD26()", type_label=expression_statement];
686 [label="126_ owner_TOD26.transfer(reward_TOD26);\n686-expression_statement-127-127", method="setReward_TOD26()", type_label=expression_statement];
693 [label="127_ reward_TOD26 = msg.value;\n693-expression_statement-128-128", method="setReward_TOD26()", type_label=expression_statement];
699 [label="129_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n699-function_definition-130-135", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
707 [label="130_ require (!claimed_TOD26);\n707-expression_statement-131-131", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
713 [label="131_ require(submission < 10);\n713-expression_statement-132-132", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
720 [label="132_ msg.sender.transfer(reward_TOD26);\n720-expression_statement-133-133", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
729 [label="133_ claimed_TOD26 = true;\n729-expression_statement-134-134", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
734 [label="135_ function sethashfee(uint newfee) external onlyManager\n    {\n        require(newfee >= 0);\n        hashfee = newfee;\n    }\n734-function_definition-136-140", method="sethashfee(uint newfee)", type_label=function_definition];
741 [label="135_ onlyManager\n741-expression_statement-136-136", method="sethashfee(uint newfee)", type_label=expression_statement];
744 [label="137_ require(newfee >= 0);\n744-expression_statement-138-138", method="sethashfee(uint newfee)", type_label=expression_statement];
751 [label="138_ hashfee = newfee;\n751-expression_statement-139-139", method="sethashfee(uint newfee)", type_label=expression_statement];
755 [label="140_ bool claimed_TOD20 = false;\n755-new_variable-141-141", method="", type_label=new_variable];
761 [label="141_ address payable owner_TOD20;\n761-new_variable-142-142", method="", type_label=new_variable];
765 [label="142_ uint256 reward_TOD20;\n765-new_variable-143-143", method="", type_label=new_variable];
769 [label="143_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n769-function_definition-144-149", method="setReward_TOD20()", type_label=function_definition];
774 [label="144_ require (!claimed_TOD20);\n774-expression_statement-145-145", method="setReward_TOD20()", type_label=expression_statement];
780 [label="145_ require(msg.sender == owner_TOD20);\n780-expression_statement-146-146", method="setReward_TOD20()", type_label=expression_statement];
789 [label="146_ owner_TOD20.transfer(reward_TOD20);\n789-expression_statement-147-147", method="setReward_TOD20()", type_label=expression_statement];
796 [label="147_ reward_TOD20 = msg.value;\n796-expression_statement-148-148", method="setReward_TOD20()", type_label=expression_statement];
802 [label="149_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n802-function_definition-150-155", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
810 [label="150_ require (!claimed_TOD20);\n810-expression_statement-151-151", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
816 [label="151_ require(submission < 10);\n816-expression_statement-152-152", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
823 [label="152_ msg.sender.transfer(reward_TOD20);\n823-expression_statement-153-153", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
832 [label="153_ claimed_TOD20 = true;\n832-expression_statement-154-154", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
837 [label="155_ function getchangehashownerfee() external view returns(uint)\n    {\n        return changehashownerfee;\n    }\n837-function_definition-156-159", method="getchangehashownerfee()", type_label=function_definition];
846 [label="157_ return changehashownerfee;\n846-return-158-158", method="getchangehashownerfee()", type_label=return];
848 [label="159_ bool claimed_TOD32 = false;\n848-new_variable-160-160", method="", type_label=new_variable];
854 [label="160_ address payable owner_TOD32;\n854-new_variable-161-161", method="", type_label=new_variable];
858 [label="161_ uint256 reward_TOD32;\n858-new_variable-162-162", method="", type_label=new_variable];
862 [label="162_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n862-function_definition-163-168", method="setReward_TOD32()", type_label=function_definition];
867 [label="163_ require (!claimed_TOD32);\n867-expression_statement-164-164", method="setReward_TOD32()", type_label=expression_statement];
873 [label="164_ require(msg.sender == owner_TOD32);\n873-expression_statement-165-165", method="setReward_TOD32()", type_label=expression_statement];
882 [label="165_ owner_TOD32.transfer(reward_TOD32);\n882-expression_statement-166-166", method="setReward_TOD32()", type_label=expression_statement];
889 [label="166_ reward_TOD32 = msg.value;\n889-expression_statement-167-167", method="setReward_TOD32()", type_label=expression_statement];
895 [label="168_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n895-function_definition-169-174", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
903 [label="169_ require (!claimed_TOD32);\n903-expression_statement-170-170", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
909 [label="170_ require(submission < 10);\n909-expression_statement-171-171", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
916 [label="171_ msg.sender.transfer(reward_TOD32);\n916-expression_statement-172-172", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
925 [label="172_ claimed_TOD32 = true;\n925-expression_statement-173-173", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
930 [label="174_ function setchangehashownerfee(uint newfee) external onlyManager\n    {\n        require(newfee >= 0);\n        changehashownerfee = newfee;\n    }\n930-function_definition-175-179", method="setchangehashownerfee(uint newfee)", type_label=function_definition];
937 [label="174_ onlyManager\n937-expression_statement-175-175", method="setchangehashownerfee(uint newfee)", type_label=expression_statement];
940 [label="176_ require(newfee >= 0);\n940-expression_statement-177-177", method="setchangehashownerfee(uint newfee)", type_label=expression_statement];
947 [label="177_ changehashownerfee = newfee;\n947-expression_statement-178-178", method="setchangehashownerfee(uint newfee)", type_label=expression_statement];
951 [label="179_ bool claimed_TOD38 = false;\n951-new_variable-180-180", method="", type_label=new_variable];
957 [label="180_ address payable owner_TOD38;\n957-new_variable-181-181", method="", type_label=new_variable];
961 [label="181_ uint256 reward_TOD38;\n961-new_variable-182-182", method="", type_label=new_variable];
965 [label="182_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n965-function_definition-183-188", method="setReward_TOD38()", type_label=function_definition];
970 [label="183_ require (!claimed_TOD38);\n970-expression_statement-184-184", method="setReward_TOD38()", type_label=expression_statement];
976 [label="184_ require(msg.sender == owner_TOD38);\n976-expression_statement-185-185", method="setReward_TOD38()", type_label=expression_statement];
985 [label="185_ owner_TOD38.transfer(reward_TOD38);\n985-expression_statement-186-186", method="setReward_TOD38()", type_label=expression_statement];
992 [label="186_ reward_TOD38 = msg.value;\n992-expression_statement-187-187", method="setReward_TOD38()", type_label=expression_statement];
998 [label="188_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n998-function_definition-189-194", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
1006 [label="189_ require (!claimed_TOD38);\n1006-expression_statement-190-190", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1012 [label="190_ require(submission < 10);\n1012-expression_statement-191-191", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1019 [label="191_ msg.sender.transfer(reward_TOD38);\n1019-expression_statement-192-192", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1028 [label="192_ claimed_TOD38 = true;\n1028-expression_statement-193-193", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1033 [label="194_ function getcontractactive() external view returns (bool)\n    {\n        return contractactive;\n    }\n1033-function_definition-195-198", method="getcontractactive()", type_label=function_definition];
1042 [label="196_ return contractactive;\n1042-return-197-197", method="getcontractactive()", type_label=return];
1044 [label="198_ bool claimed_TOD4 = false;\n1044-new_variable-199-199", method="", type_label=new_variable];
1050 [label="199_ address payable owner_TOD4;\n1050-new_variable-200-200", method="", type_label=new_variable];
1054 [label="200_ uint256 reward_TOD4;\n1054-new_variable-201-201", method="", type_label=new_variable];
1058 [label="201_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n1058-function_definition-202-207", method="setReward_TOD4()", type_label=function_definition];
1063 [label="202_ require (!claimed_TOD4);\n1063-expression_statement-203-203", method="setReward_TOD4()", type_label=expression_statement];
1069 [label="203_ require(msg.sender == owner_TOD4);\n1069-expression_statement-204-204", method="setReward_TOD4()", type_label=expression_statement];
1078 [label="204_ owner_TOD4.transfer(reward_TOD4);\n1078-expression_statement-205-205", method="setReward_TOD4()", type_label=expression_statement];
1085 [label="205_ reward_TOD4 = msg.value;\n1085-expression_statement-206-206", method="setReward_TOD4()", type_label=expression_statement];
1091 [label="207_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n1091-function_definition-208-213", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
1099 [label="208_ require (!claimed_TOD4);\n1099-expression_statement-209-209", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1105 [label="209_ require(submission < 10);\n1105-expression_statement-210-210", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1112 [label="210_ msg.sender.transfer(reward_TOD4);\n1112-expression_statement-211-211", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1121 [label="211_ claimed_TOD4 = true;\n1121-expression_statement-212-212", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1126 [label="213_ function setcontractactive(bool contactive) external onlyManager\n    {\n        contractactive = contactive;\n    }\n1126-function_definition-214-217", method="setcontractactive(bool contactive)", type_label=function_definition];
1133 [label="213_ onlyManager\n1133-expression_statement-214-214", method="setcontractactive(bool contactive)", type_label=expression_statement];
1136 [label="215_ contractactive = contactive;\n1136-expression_statement-216-216", method="setcontractactive(bool contactive)", type_label=expression_statement];
1140 [label="217_ address payable winner_TOD7;\n1140-new_variable-218-218", method="", type_label=new_variable];
1144 [label="218_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n1144-function_definition-219-223", method="play_TOD7(bytes32 guess)", type_label=function_definition];
1152 [label="219_ if\n1152-if-220-222", method="play_TOD7(bytes32 guess)", type_label=if];
3378 [label="219_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
1174 [label="220_ winner_TOD7 = msg.sender;\n1174-expression_statement-221-221", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
1180 [label="223_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n1180-function_definition-224-226", method="getReward_TOD7()", type_label=function_definition];
1185 [label="224_ winner_TOD7.transfer(msg.value);\n1185-expression_statement-225-225", method="getReward_TOD7()", type_label=expression_statement];
1194 [label="226_ function getmanager() external view returns(address)\n    {\n        return manager;\n    }\n1194-function_definition-227-230", method="getmanager()", type_label=function_definition];
1203 [label="228_ return manager;\n1203-return-229-229", method="getmanager()", type_label=return];
1205 [label="230_ address payable winner_TOD23;\n1205-new_variable-231-231", method="", type_label=new_variable];
1209 [label="231_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n1209-function_definition-232-236", method="play_TOD23(bytes32 guess)", type_label=function_definition];
1217 [label="232_ if\n1217-if-233-235", method="play_TOD23(bytes32 guess)", type_label=if];
3443 [label="232_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
1239 [label="233_ winner_TOD23 = msg.sender;\n1239-expression_statement-234-234", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
1245 [label="236_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n1245-function_definition-237-239", method="getReward_TOD23()", type_label=function_definition];
1250 [label="237_ winner_TOD23.transfer(msg.value);\n1250-expression_statement-238-238", method="getReward_TOD23()", type_label=expression_statement];
1259 [label="239_ function setmanager(address payable newmngr) external onlyManager\n    {\n        require(newmngr.balance > 0);\n        manager = newmngr;\n    }\n1259-function_definition-240-244", method="setmanager(address payable newmngr)", type_label=function_definition];
1266 [label="239_ onlyManager\n1266-expression_statement-240-240", method="setmanager(address payable newmngr)", type_label=expression_statement];
1269 [label="241_ require(newmngr.balance > 0);\n1269-expression_statement-242-242", method="setmanager(address payable newmngr)", type_label=expression_statement];
1278 [label="242_ manager = newmngr;\n1278-expression_statement-243-243", method="setmanager(address payable newmngr)", type_label=expression_statement];
1282 [label="244_ bool claimed_TOD14 = false;\n1282-new_variable-245-245", method="", type_label=new_variable];
1288 [label="245_ address payable owner_TOD14;\n1288-new_variable-246-246", method="", type_label=new_variable];
1292 [label="246_ uint256 reward_TOD14;\n1292-new_variable-247-247", method="", type_label=new_variable];
1296 [label="247_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n1296-function_definition-248-253", method="setReward_TOD14()", type_label=function_definition];
1301 [label="248_ require (!claimed_TOD14);\n1301-expression_statement-249-249", method="setReward_TOD14()", type_label=expression_statement];
1307 [label="249_ require(msg.sender == owner_TOD14);\n1307-expression_statement-250-250", method="setReward_TOD14()", type_label=expression_statement];
1316 [label="250_ owner_TOD14.transfer(reward_TOD14);\n1316-expression_statement-251-251", method="setReward_TOD14()", type_label=expression_statement];
1323 [label="251_ reward_TOD14 = msg.value;\n1323-expression_statement-252-252", method="setReward_TOD14()", type_label=expression_statement];
1329 [label="253_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n1329-function_definition-254-259", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
1337 [label="254_ require (!claimed_TOD14);\n1337-expression_statement-255-255", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1343 [label="255_ require(submission < 10);\n1343-expression_statement-256-256", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1350 [label="256_ msg.sender.transfer(reward_TOD14);\n1350-expression_statement-257-257", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1359 [label="257_ claimed_TOD14 = true;\n1359-expression_statement-258-258", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1364 [label="259_ function getcontractbalance() public view returns(uint)\n    {\n        return address(this).balance;\n    }\n1364-function_definition-260-263", method="getcontractbalance()", type_label=function_definition];
1373 [label="261_ return address(this).balance;\n1373-return-262-262", method="getcontractbalance()", type_label=return];
1379 [label="263_ bool claimed_TOD30 = false;\n1379-new_variable-264-264", method="", type_label=new_variable];
1385 [label="264_ address payable owner_TOD30;\n1385-new_variable-265-265", method="", type_label=new_variable];
1389 [label="265_ uint256 reward_TOD30;\n1389-new_variable-266-266", method="", type_label=new_variable];
1393 [label="266_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n1393-function_definition-267-272", method="setReward_TOD30()", type_label=function_definition];
1398 [label="267_ require (!claimed_TOD30);\n1398-expression_statement-268-268", method="setReward_TOD30()", type_label=expression_statement];
1404 [label="268_ require(msg.sender == owner_TOD30);\n1404-expression_statement-269-269", method="setReward_TOD30()", type_label=expression_statement];
1413 [label="269_ owner_TOD30.transfer(reward_TOD30);\n1413-expression_statement-270-270", method="setReward_TOD30()", type_label=expression_statement];
1420 [label="270_ reward_TOD30 = msg.value;\n1420-expression_statement-271-271", method="setReward_TOD30()", type_label=expression_statement];
1426 [label="272_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n1426-function_definition-273-278", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
1434 [label="273_ require (!claimed_TOD30);\n1434-expression_statement-274-274", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1440 [label="274_ require(submission < 10);\n1440-expression_statement-275-275", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1447 [label="275_ msg.sender.transfer(reward_TOD30);\n1447-expression_statement-276-276", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1456 [label="276_ claimed_TOD30 = true;\n1456-expression_statement-277-277", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1461 [label="278_ function transfercontractbalance() external onlyManager\n    {\n        uint cb = address(this).balance;\n        require(cb > 0);\n        manager.transfer(cb);\n    }\n1461-function_definition-279-284", method="transfercontractbalance()", type_label=function_definition];
1464 [label="278_ onlyManager\n1464-expression_statement-279-279", method="transfercontractbalance()", type_label=expression_statement];
1467 [label="280_ uint cb = address(this).balance;\n1467-new_variable-281-281", method="transfercontractbalance()", type_label=new_variable];
1477 [label="281_ require(cb > 0);\n1477-expression_statement-282-282", method="transfercontractbalance()", type_label=expression_statement];
1484 [label="282_ manager.transfer(cb);\n1484-expression_statement-283-283", method="transfercontractbalance()", type_label=expression_statement];
1491 [label="284_ bool claimed_TOD8 = false;\n1491-new_variable-285-285", method="", type_label=new_variable];
1497 [label="285_ address payable owner_TOD8;\n1497-new_variable-286-286", method="", type_label=new_variable];
1501 [label="286_ uint256 reward_TOD8;\n1501-new_variable-287-287", method="", type_label=new_variable];
1505 [label="287_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n1505-function_definition-288-293", method="setReward_TOD8()", type_label=function_definition];
1510 [label="288_ require (!claimed_TOD8);\n1510-expression_statement-289-289", method="setReward_TOD8()", type_label=expression_statement];
1516 [label="289_ require(msg.sender == owner_TOD8);\n1516-expression_statement-290-290", method="setReward_TOD8()", type_label=expression_statement];
1525 [label="290_ owner_TOD8.transfer(reward_TOD8);\n1525-expression_statement-291-291", method="setReward_TOD8()", type_label=expression_statement];
1532 [label="291_ reward_TOD8 = msg.value;\n1532-expression_statement-292-292", method="setReward_TOD8()", type_label=expression_statement];
1538 [label="293_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n1538-function_definition-294-299", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
1546 [label="294_ require (!claimed_TOD8);\n1546-expression_statement-295-295", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1552 [label="295_ require(submission < 10);\n1552-expression_statement-296-296", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1559 [label="296_ msg.sender.transfer(reward_TOD8);\n1559-expression_statement-297-297", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1568 [label="297_ claimed_TOD8 = true;\n1568-expression_statement-298-298", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1573 [label="299_ function getHashOwnersCount(bytes32 hash) public view returns(uint)\n    {\n        return HashList[hash].length;\n    }\n1573-function_definition-300-303", method="getHashOwnersCount(bytes32 hash)", type_label=function_definition];
1586 [label="301_ return HashList[hash].length;\n1586-return-302-302", method="getHashOwnersCount(bytes32 hash)", type_label=return];
1592 [label="303_ address payable winner_TOD39;\n1592-new_variable-304-304", method="", type_label=new_variable];
1596 [label="304_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n1596-function_definition-305-309", method="play_TOD39(bytes32 guess)", type_label=function_definition];
1604 [label="305_ if\n1604-if-306-308", method="play_TOD39(bytes32 guess)", type_label=if];
3830 [label="305_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
1626 [label="306_ winner_TOD39 = msg.sender;\n1626-expression_statement-307-307", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
1632 [label="309_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n1632-function_definition-310-312", method="getReward_TOD39()", type_label=function_definition];
1637 [label="310_ winner_TOD39.transfer(msg.value);\n1637-expression_statement-311-311", method="getReward_TOD39()", type_label=expression_statement];
1646 [label="312_ function getNumberofHashesRegistered() external view returns(uint)\n    {\n        return HashListLength;\n    }\n1646-function_definition-313-316", method="getNumberofHashesRegistered()", type_label=function_definition];
1655 [label="314_ return HashListLength;\n1655-return-315-315", method="getNumberofHashesRegistered()", type_label=return];
1657 [label="316_ bool claimed_TOD36 = false;\n1657-new_variable-317-317", method="", type_label=new_variable];
1663 [label="317_ address payable owner_TOD36;\n1663-new_variable-318-318", method="", type_label=new_variable];
1667 [label="318_ uint256 reward_TOD36;\n1667-new_variable-319-319", method="", type_label=new_variable];
1671 [label="319_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n1671-function_definition-320-325", method="setReward_TOD36()", type_label=function_definition];
1676 [label="320_ require (!claimed_TOD36);\n1676-expression_statement-321-321", method="setReward_TOD36()", type_label=expression_statement];
1682 [label="321_ require(msg.sender == owner_TOD36);\n1682-expression_statement-322-322", method="setReward_TOD36()", type_label=expression_statement];
1691 [label="322_ owner_TOD36.transfer(reward_TOD36);\n1691-expression_statement-323-323", method="setReward_TOD36()", type_label=expression_statement];
1698 [label="323_ reward_TOD36 = msg.value;\n1698-expression_statement-324-324", method="setReward_TOD36()", type_label=expression_statement];
1704 [label="325_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n1704-function_definition-326-331", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
1712 [label="326_ require (!claimed_TOD36);\n1712-expression_statement-327-327", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1718 [label="327_ require(submission < 10);\n1718-expression_statement-328-328", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1725 [label="328_ msg.sender.transfer(reward_TOD36);\n1725-expression_statement-329-329", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1734 [label="329_ claimed_TOD36 = true;\n1734-expression_statement-330-330", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1739 [label="331_ function getHashDetails(bytes32 hash,uint indx) external view returns (address,uint)\n    {\n        uint owncount = getHashOwnersCount(hash);\n        require(owncount > 0);\n        require(indx < owncount);\n        return (HashList[hash][indx].owner,HashList[hash][indx].registrationtime);\n    }\n1739-function_definition-332-338", method="getHashDetails(bytes32 hash,uint indx)", type_label=function_definition];
1759 [label="333_ uint owncount = getHashOwnersCount(hash);\n1759-new_variable-334-334", method="getHashDetails(bytes32 hash,uint indx)", type_label=new_variable];
1768 [label="334_ require(owncount > 0);\n1768-expression_statement-335-335", method="getHashDetails(bytes32 hash,uint indx)", type_label=expression_statement];
1775 [label="335_ require(indx < owncount);\n1775-expression_statement-336-336", method="getHashDetails(bytes32 hash,uint indx)", type_label=expression_statement];
1782 [label="336_ return (HashList[hash][indx].owner,HashList[hash][indx].registrationtime);\n1782-return-337-337", method="getHashDetails(bytes32 hash,uint indx)", type_label=return];
1798 [label="338_ address payable winner_TOD35;\n1798-new_variable-339-339", method="", type_label=new_variable];
1802 [label="339_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n1802-function_definition-340-344", method="play_TOD35(bytes32 guess)", type_label=function_definition];
1810 [label="340_ if\n1810-if-341-343", method="play_TOD35(bytes32 guess)", type_label=if];
4036 [label="340_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
1832 [label="341_ winner_TOD35 = msg.sender;\n1832-expression_statement-342-342", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
1838 [label="344_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n1838-function_definition-345-347", method="getReward_TOD35()", type_label=function_definition];
1843 [label="345_ winner_TOD35.transfer(msg.value);\n1843-expression_statement-346-346", method="getReward_TOD35()", type_label=expression_statement];
1852 [label="347_ function registerHash(bytes32 hash) external payable\n    {\n        require(contractactive == true);\n        require(getHashOwnersCount(hash) == 0);\n        require(msg.value == hashfee);\n        HashRegistration memory thisregistration;\n        thisregistration.owner = msg.sender;\n        thisregistration.registrationtime = now;\n        HashList[hash].push(thisregistration);\n        HashListLength++;\n        emit RegisterHashEvent(thisregistration.owner, hash, thisregistration.registrationtime);\n    }\n1852-function_definition-348-359", method="registerHash(bytes32 hash)", type_label=function_definition];
1861 [label="349_ require(contractactive == true);\n1861-expression_statement-350-350", method="registerHash(bytes32 hash)", type_label=expression_statement];
1869 [label="350_ require(getHashOwnersCount(hash) == 0);\n1869-expression_statement-351-351", method="registerHash(bytes32 hash)", type_label=expression_statement];
1879 [label="351_ require(msg.value == hashfee);\n1879-expression_statement-352-352", method="registerHash(bytes32 hash)", type_label=expression_statement];
1888 [label="352_ HashRegistration memory thisregistration;\n1888-new_variable-353-353", method="registerHash(bytes32 hash)", type_label=new_variable];
1894 [label="353_ thisregistration.owner = msg.sender;\n1894-expression_statement-354-354", method="registerHash(bytes32 hash)", type_label=expression_statement];
1902 [label="354_ thisregistration.registrationtime = now;\n1902-expression_statement-355-355", method="registerHash(bytes32 hash)", type_label=expression_statement];
1908 [label="355_ HashList[hash].push(thisregistration);\n1908-expression_statement-356-356", method="registerHash(bytes32 hash)", type_label=expression_statement];
1917 [label="356_ HashListLength++;\n1917-expression_statement-357-357", method="registerHash(bytes32 hash)", type_label=expression_statement];
1918 [label="356_ HashListLength++\n1918-expression_statement-357-357", method="registerHash(bytes32 hash)", type_label=expression_statement];
1932 [label="359_ bool claimed_TOD40 = false;\n1932-new_variable-360-360", method="", type_label=new_variable];
1938 [label="360_ address payable owner_TOD40;\n1938-new_variable-361-361", method="", type_label=new_variable];
1942 [label="361_ uint256 reward_TOD40;\n1942-new_variable-362-362", method="", type_label=new_variable];
1946 [label="362_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n1946-function_definition-363-368", method="setReward_TOD40()", type_label=function_definition];
1951 [label="363_ require (!claimed_TOD40);\n1951-expression_statement-364-364", method="setReward_TOD40()", type_label=expression_statement];
1957 [label="364_ require(msg.sender == owner_TOD40);\n1957-expression_statement-365-365", method="setReward_TOD40()", type_label=expression_statement];
1966 [label="365_ owner_TOD40.transfer(reward_TOD40);\n1966-expression_statement-366-366", method="setReward_TOD40()", type_label=expression_statement];
1973 [label="366_ reward_TOD40 = msg.value;\n1973-expression_statement-367-367", method="setReward_TOD40()", type_label=expression_statement];
1979 [label="368_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n1979-function_definition-369-374", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
1987 [label="369_ require (!claimed_TOD40);\n1987-expression_statement-370-370", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1993 [label="370_ require(submission < 10);\n1993-expression_statement-371-371", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2000 [label="371_ msg.sender.transfer(reward_TOD40);\n2000-expression_statement-372-372", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2009 [label="372_ claimed_TOD40 = true;\n2009-expression_statement-373-373", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2014 [label="374_ function changeHashOwnership(bytes32 hash, address newowner) external payable\n    {\n        require(contractactive == true);\n        uint owncount = getHashOwnersCount(hash);\n        require(owncount > 0);\n        require(msg.sender == HashList[hash][owncount - 1].owner); \n        require(msg.value == changehashownerfee);\n        HashRegistration memory thisregistration;\n        thisregistration.owner = newowner;\n        thisregistration.registrationtime = now;\n        HashList[hash].push(thisregistration);\n        emit ChangeHashOwnershipEvent(msg.sender, thisregistration.owner, hash, thisregistration.registrationtime);\n    }\n2014-function_definition-375-387", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=function_definition];
2027 [label="376_ require(contractactive == true);\n2027-expression_statement-377-377", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
2035 [label="377_ uint owncount = getHashOwnersCount(hash);\n2035-new_variable-378-378", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=new_variable];
2044 [label="378_ require(owncount > 0);\n2044-expression_statement-379-379", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
2051 [label="379_ require(msg.sender == HashList[hash][owncount - 1].owner);\n2051-expression_statement-380-380", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
2068 [label="380_ require(msg.value == changehashownerfee);\n2068-expression_statement-381-381", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
2077 [label="381_ HashRegistration memory thisregistration;\n2077-new_variable-382-382", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=new_variable];
2083 [label="382_ thisregistration.owner = newowner;\n2083-expression_statement-383-383", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
2089 [label="383_ thisregistration.registrationtime = now;\n2089-expression_statement-384-384", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
2095 [label="384_ HashList[hash].push(thisregistration);\n2095-expression_statement-385-385", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
2120 [label="387_ address payable winner_TOD33;\n2120-new_variable-388-388", method="", type_label=new_variable];
2124 [label="388_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n2124-function_definition-389-393", method="play_TOD33(bytes32 guess)", type_label=function_definition];
2132 [label="389_ if\n2132-if-390-392", method="play_TOD33(bytes32 guess)", type_label=if];
4358 [label="389_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
2154 [label="390_ winner_TOD33 = msg.sender;\n2154-expression_statement-391-391", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
2160 [label="393_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n2160-function_definition-394-396", method="getReward_TOD33()", type_label=function_definition];
2165 [label="394_ winner_TOD33.transfer(msg.value);\n2165-expression_statement-395-395", method="getReward_TOD33()", type_label=expression_statement];
2177 [label="399_ address payable winner_TOD27;\n2177-new_variable-400-400", method="", type_label=new_variable];
2181 [label="400_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n2181-function_definition-401-405", method="play_TOD27(bytes32 guess)", type_label=function_definition];
2189 [label="401_ if\n2189-if-402-404", method="play_TOD27(bytes32 guess)", type_label=if];
4415 [label="401_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
2211 [label="402_ winner_TOD27 = msg.sender;\n2211-expression_statement-403-403", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
2217 [label="405_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n2217-function_definition-406-408", method="getReward_TOD27()", type_label=function_definition];
2222 [label="406_ winner_TOD27.transfer(msg.value);\n2222-expression_statement-407-407", method="getReward_TOD27()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 19  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
19 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
27 -> 32  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
32 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 74  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
74 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 134  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
112 -> 2338  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2338 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 2338  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
140 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 193  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
171 -> 2397  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2397 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 2397  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
199 -> 204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 252  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
230 -> 2456  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2456 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 2456  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
258 -> 263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
272 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 321  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
299 -> 2525  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2525 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 2525  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
327 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
341 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 383  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
361 -> 2587  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2587 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 2587  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
389 -> 394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 442  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
420 -> 2646  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2646 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
442 -> 2646  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
448 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 510  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
488 -> 2714  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2714 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 2714  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
516 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 607  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
585 -> 2811  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2811 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 2811  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
613 -> 618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
652 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
755 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
774 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
810 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
848 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
867 -> 873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
903 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
916 -> 925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
951 -> 957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
998 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1033 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1044 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1069 -> 1078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1078 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1091 -> 1099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 1105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1105 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1126 -> 1136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1152 -> 1174  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1152 -> 3378  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3378 -> 1180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1174 -> 3378  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1180 -> 1185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1194 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1209 -> 1217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1217 -> 1239  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1217 -> 3443  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3443 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1239 -> 3443  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1245 -> 1250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1259 -> 1269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1269 -> 1278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1282 -> 1288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1288 -> 1292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1296 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 1316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1316 -> 1323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1329 -> 1337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1337 -> 1343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1343 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1364 -> 1373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1373 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1379 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1385 -> 1389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1393 -> 1398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1398 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1413 -> 1420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1426 -> 1434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1434 -> 1440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1440 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1461 -> 1467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 1477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1477 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1491 -> 1497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1497 -> 1501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1505 -> 1510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1510 -> 1516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1516 -> 1525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1525 -> 1532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1538 -> 1546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1546 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 1559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1559 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1573 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1586 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1596 -> 1604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1604 -> 1626  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1604 -> 3830  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3830 -> 1632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1626 -> 3830  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1632 -> 1637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1646 -> 1655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1655 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1657 -> 1663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1663 -> 1667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1671 -> 1676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1676 -> 1682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1682 -> 1691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1691 -> 1698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1704 -> 1712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1712 -> 1718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1718 -> 1725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1725 -> 1734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1739 -> 1759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1759 -> 1768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1768 -> 1775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1775 -> 1782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1782 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1802 -> 1810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1810 -> 1832  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1810 -> 4036  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4036 -> 1838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1832 -> 4036  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1838 -> 1843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1852 -> 1861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1861 -> 1869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1869 -> 1879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1879 -> 1888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1888 -> 1894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1894 -> 1902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1902 -> 1908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1908 -> 1917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1932 -> 1938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1938 -> 1942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1946 -> 1951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1951 -> 1957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1957 -> 1966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1966 -> 1973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1979 -> 1987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1987 -> 1993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1993 -> 2000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2000 -> 2009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2014 -> 2027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2027 -> 2035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2035 -> 2044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2044 -> 2051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2051 -> 2068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2068 -> 2077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2077 -> 2083  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2083 -> 2089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2089 -> 2095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2124 -> 2132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2132 -> 2154  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2132 -> 4358  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4358 -> 2160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2154 -> 4358  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2160 -> 2165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2181 -> 2189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2189 -> 2211  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2189 -> 4415  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4415 -> 2217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2211 -> 4415  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2217 -> 2222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
