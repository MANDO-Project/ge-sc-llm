digraph  {
15 [label="2_ function totalSupply() external view returns (uint256);\n15-function_definition-3-3", method="totalSupply()", type_label=function_definition];
23 [label="3_ function balanceOf(address who) external view returns (uint256);\n23-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
35 [label="4_ function transfer(address to, uint256 value) external returns (bool);\n35-function_definition-5-5", method="transfer(address to,uint256 value)", type_label=function_definition];
70 [label="8_ bool claimed_TOD26 = false;\n70-new_variable-9-9", method="", type_label=new_variable];
76 [label="9_ address payable owner_TOD26;\n76-new_variable-10-10", method="", type_label=new_variable];
80 [label="10_ uint256 reward_TOD26;\n80-new_variable-11-11", method="", type_label=new_variable];
84 [label="11_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n84-function_definition-12-17", method="setReward_TOD26()", type_label=function_definition];
89 [label="12_ require (!claimed_TOD26);\n89-expression_statement-13-13", method="setReward_TOD26()", type_label=expression_statement];
95 [label="13_ require(msg.sender == owner_TOD26);\n95-expression_statement-14-14", method="setReward_TOD26()", type_label=expression_statement];
104 [label="14_ owner_TOD26.transfer(reward_TOD26);\n104-expression_statement-15-15", method="setReward_TOD26()", type_label=expression_statement];
111 [label="15_ reward_TOD26 = msg.value;\n111-expression_statement-16-16", method="setReward_TOD26()", type_label=expression_statement];
117 [label="17_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n117-function_definition-18-23", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
125 [label="18_ require (!claimed_TOD26);\n125-expression_statement-19-19", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
131 [label="19_ require(submission < 10);\n131-expression_statement-20-20", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
138 [label="20_ msg.sender.transfer(reward_TOD26);\n138-expression_statement-21-21", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
147 [label="21_ claimed_TOD26 = true;\n147-expression_statement-22-22", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
152 [label="23_ string public name = \"PHO\";\n152-new_variable-24-24", method="", type_label=new_variable];
159 [label="24_ bool claimed_TOD20 = false;\n159-new_variable-25-25", method="", type_label=new_variable];
165 [label="25_ address payable owner_TOD20;\n165-new_variable-26-26", method="", type_label=new_variable];
169 [label="26_ uint256 reward_TOD20;\n169-new_variable-27-27", method="", type_label=new_variable];
173 [label="27_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n173-function_definition-28-33", method="setReward_TOD20()", type_label=function_definition];
178 [label="28_ require (!claimed_TOD20);\n178-expression_statement-29-29", method="setReward_TOD20()", type_label=expression_statement];
184 [label="29_ require(msg.sender == owner_TOD20);\n184-expression_statement-30-30", method="setReward_TOD20()", type_label=expression_statement];
193 [label="30_ owner_TOD20.transfer(reward_TOD20);\n193-expression_statement-31-31", method="setReward_TOD20()", type_label=expression_statement];
200 [label="31_ reward_TOD20 = msg.value;\n200-expression_statement-32-32", method="setReward_TOD20()", type_label=expression_statement];
206 [label="33_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n206-function_definition-34-39", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
214 [label="34_ require (!claimed_TOD20);\n214-expression_statement-35-35", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
220 [label="35_ require(submission < 10);\n220-expression_statement-36-36", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
227 [label="36_ msg.sender.transfer(reward_TOD20);\n227-expression_statement-37-37", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
236 [label="37_ claimed_TOD20 = true;\n236-expression_statement-38-38", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
241 [label="39_ string public symbol = \"PHO\";\n241-new_variable-40-40", method="", type_label=new_variable];
248 [label="40_ bool claimed_TOD32 = false;\n248-new_variable-41-41", method="", type_label=new_variable];
254 [label="41_ address payable owner_TOD32;\n254-new_variable-42-42", method="", type_label=new_variable];
258 [label="42_ uint256 reward_TOD32;\n258-new_variable-43-43", method="", type_label=new_variable];
262 [label="43_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n262-function_definition-44-49", method="setReward_TOD32()", type_label=function_definition];
267 [label="44_ require (!claimed_TOD32);\n267-expression_statement-45-45", method="setReward_TOD32()", type_label=expression_statement];
273 [label="45_ require(msg.sender == owner_TOD32);\n273-expression_statement-46-46", method="setReward_TOD32()", type_label=expression_statement];
282 [label="46_ owner_TOD32.transfer(reward_TOD32);\n282-expression_statement-47-47", method="setReward_TOD32()", type_label=expression_statement];
289 [label="47_ reward_TOD32 = msg.value;\n289-expression_statement-48-48", method="setReward_TOD32()", type_label=expression_statement];
295 [label="49_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n295-function_definition-50-55", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
303 [label="50_ require (!claimed_TOD32);\n303-expression_statement-51-51", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
309 [label="51_ require(submission < 10);\n309-expression_statement-52-52", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
316 [label="52_ msg.sender.transfer(reward_TOD32);\n316-expression_statement-53-53", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
325 [label="53_ claimed_TOD32 = true;\n325-expression_statement-54-54", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
330 [label="55_ uint8 public decimals = 18;\n330-new_variable-56-56", method="", type_label=new_variable];
336 [label="56_ bool claimed_TOD38 = false;\n336-new_variable-57-57", method="", type_label=new_variable];
342 [label="57_ address payable owner_TOD38;\n342-new_variable-58-58", method="", type_label=new_variable];
346 [label="58_ uint256 reward_TOD38;\n346-new_variable-59-59", method="", type_label=new_variable];
350 [label="59_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n350-function_definition-60-65", method="setReward_TOD38()", type_label=function_definition];
355 [label="60_ require (!claimed_TOD38);\n355-expression_statement-61-61", method="setReward_TOD38()", type_label=expression_statement];
361 [label="61_ require(msg.sender == owner_TOD38);\n361-expression_statement-62-62", method="setReward_TOD38()", type_label=expression_statement];
370 [label="62_ owner_TOD38.transfer(reward_TOD38);\n370-expression_statement-63-63", method="setReward_TOD38()", type_label=expression_statement];
377 [label="63_ reward_TOD38 = msg.value;\n377-expression_statement-64-64", method="setReward_TOD38()", type_label=expression_statement];
383 [label="65_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n383-function_definition-66-71", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
391 [label="66_ require (!claimed_TOD38);\n391-expression_statement-67-67", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
397 [label="67_ require(submission < 10);\n397-expression_statement-68-68", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
404 [label="68_ msg.sender.transfer(reward_TOD38);\n404-expression_statement-69-69", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
413 [label="69_ claimed_TOD38 = true;\n413-expression_statement-70-70", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
418 [label="71_ uint256 saleAmount;\n418-new_variable-72-72", method="", type_label=new_variable];
422 [label="72_ bool claimed_TOD4 = false;\n422-new_variable-73-73", method="", type_label=new_variable];
428 [label="73_ address payable owner_TOD4;\n428-new_variable-74-74", method="", type_label=new_variable];
432 [label="74_ uint256 reward_TOD4;\n432-new_variable-75-75", method="", type_label=new_variable];
436 [label="75_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n436-function_definition-76-81", method="setReward_TOD4()", type_label=function_definition];
441 [label="76_ require (!claimed_TOD4);\n441-expression_statement-77-77", method="setReward_TOD4()", type_label=expression_statement];
447 [label="77_ require(msg.sender == owner_TOD4);\n447-expression_statement-78-78", method="setReward_TOD4()", type_label=expression_statement];
456 [label="78_ owner_TOD4.transfer(reward_TOD4);\n456-expression_statement-79-79", method="setReward_TOD4()", type_label=expression_statement];
463 [label="79_ reward_TOD4 = msg.value;\n463-expression_statement-80-80", method="setReward_TOD4()", type_label=expression_statement];
469 [label="81_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n469-function_definition-82-87", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
477 [label="82_ require (!claimed_TOD4);\n477-expression_statement-83-83", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
483 [label="83_ require(submission < 10);\n483-expression_statement-84-84", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
490 [label="84_ msg.sender.transfer(reward_TOD4);\n490-expression_statement-85-85", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
499 [label="85_ claimed_TOD4 = true;\n499-expression_statement-86-86", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
504 [label="87_ uint256 evtAmount;\n504-new_variable-88-88", method="", type_label=new_variable];
508 [label="88_ address payable winner_TOD7;\n508-new_variable-89-89", method="", type_label=new_variable];
512 [label="89_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n512-function_definition-90-94", method="play_TOD7(bytes32 guess)", type_label=function_definition];
520 [label="90_ if\n520-if-91-93", method="play_TOD7(bytes32 guess)", type_label=if];
2278 [label="90_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
542 [label="91_ winner_TOD7 = msg.sender;\n542-expression_statement-92-92", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
548 [label="94_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n548-function_definition-95-97", method="getReward_TOD7()", type_label=function_definition];
553 [label="95_ winner_TOD7.transfer(msg.value);\n553-expression_statement-96-96", method="getReward_TOD7()", type_label=expression_statement];
562 [label="97_ uint256 teamAmount;\n562-new_variable-98-98", method="", type_label=new_variable];
566 [label="98_ address payable winner_TOD23;\n566-new_variable-99-99", method="", type_label=new_variable];
570 [label="99_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n570-function_definition-100-104", method="play_TOD23(bytes32 guess)", type_label=function_definition];
578 [label="100_ if\n578-if-101-103", method="play_TOD23(bytes32 guess)", type_label=if];
2336 [label="100_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
600 [label="101_ winner_TOD23 = msg.sender;\n600-expression_statement-102-102", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
606 [label="104_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n606-function_definition-105-107", method="getReward_TOD23()", type_label=function_definition];
611 [label="105_ winner_TOD23.transfer(msg.value);\n611-expression_statement-106-106", method="getReward_TOD23()", type_label=expression_statement];
620 [label="107_ uint256 _totalSupply;\n620-new_variable-108-108", method="", type_label=new_variable];
624 [label="108_ bool claimed_TOD14 = false;\n624-new_variable-109-109", method="", type_label=new_variable];
630 [label="109_ address payable owner_TOD14;\n630-new_variable-110-110", method="", type_label=new_variable];
634 [label="110_ uint256 reward_TOD14;\n634-new_variable-111-111", method="", type_label=new_variable];
638 [label="111_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n638-function_definition-112-117", method="setReward_TOD14()", type_label=function_definition];
643 [label="112_ require (!claimed_TOD14);\n643-expression_statement-113-113", method="setReward_TOD14()", type_label=expression_statement];
649 [label="113_ require(msg.sender == owner_TOD14);\n649-expression_statement-114-114", method="setReward_TOD14()", type_label=expression_statement];
658 [label="114_ owner_TOD14.transfer(reward_TOD14);\n658-expression_statement-115-115", method="setReward_TOD14()", type_label=expression_statement];
665 [label="115_ reward_TOD14 = msg.value;\n665-expression_statement-116-116", method="setReward_TOD14()", type_label=expression_statement];
671 [label="117_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n671-function_definition-118-123", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
679 [label="118_ require (!claimed_TOD14);\n679-expression_statement-119-119", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
685 [label="119_ require(submission < 10);\n685-expression_statement-120-120", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
692 [label="120_ msg.sender.transfer(reward_TOD14);\n692-expression_statement-121-121", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
701 [label="121_ claimed_TOD14 = true;\n701-expression_statement-122-122", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
706 [label="123_ mapping(address => uint256) balances;\n706-new_variable-124-124", method="", type_label=new_variable];
712 [label="124_ bool claimed_TOD30 = false;\n712-new_variable-125-125", method="", type_label=new_variable];
718 [label="125_ address payable owner_TOD30;\n718-new_variable-126-126", method="", type_label=new_variable];
722 [label="126_ uint256 reward_TOD30;\n722-new_variable-127-127", method="", type_label=new_variable];
726 [label="127_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n726-function_definition-128-133", method="setReward_TOD30()", type_label=function_definition];
731 [label="128_ require (!claimed_TOD30);\n731-expression_statement-129-129", method="setReward_TOD30()", type_label=expression_statement];
737 [label="129_ require(msg.sender == owner_TOD30);\n737-expression_statement-130-130", method="setReward_TOD30()", type_label=expression_statement];
746 [label="130_ owner_TOD30.transfer(reward_TOD30);\n746-expression_statement-131-131", method="setReward_TOD30()", type_label=expression_statement];
753 [label="131_ reward_TOD30 = msg.value;\n753-expression_statement-132-132", method="setReward_TOD30()", type_label=expression_statement];
759 [label="133_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n759-function_definition-134-139", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
767 [label="134_ require (!claimed_TOD30);\n767-expression_statement-135-135", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
773 [label="135_ require(submission < 10);\n773-expression_statement-136-136", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
780 [label="136_ msg.sender.transfer(reward_TOD30);\n780-expression_statement-137-137", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
789 [label="137_ claimed_TOD30 = true;\n789-expression_statement-138-138", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
794 [label="139_ address public owner;\n794-new_variable-140-140", method="", type_label=new_variable];
799 [label="140_ bool claimed_TOD8 = false;\n799-new_variable-141-141", method="", type_label=new_variable];
805 [label="141_ address payable owner_TOD8;\n805-new_variable-142-142", method="", type_label=new_variable];
809 [label="142_ uint256 reward_TOD8;\n809-new_variable-143-143", method="", type_label=new_variable];
813 [label="143_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n813-function_definition-144-149", method="setReward_TOD8()", type_label=function_definition];
818 [label="144_ require (!claimed_TOD8);\n818-expression_statement-145-145", method="setReward_TOD8()", type_label=expression_statement];
824 [label="145_ require(msg.sender == owner_TOD8);\n824-expression_statement-146-146", method="setReward_TOD8()", type_label=expression_statement];
833 [label="146_ owner_TOD8.transfer(reward_TOD8);\n833-expression_statement-147-147", method="setReward_TOD8()", type_label=expression_statement];
840 [label="147_ reward_TOD8 = msg.value;\n840-expression_statement-148-148", method="setReward_TOD8()", type_label=expression_statement];
846 [label="149_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n846-function_definition-150-155", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
854 [label="150_ require (!claimed_TOD8);\n854-expression_statement-151-151", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
860 [label="151_ require(submission < 10);\n860-expression_statement-152-152", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
867 [label="152_ msg.sender.transfer(reward_TOD8);\n867-expression_statement-153-153", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
876 [label="153_ claimed_TOD8 = true;\n876-expression_statement-154-154", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
881 [label="155_ address public sale;\n881-new_variable-156-156", method="", type_label=new_variable];
886 [label="156_ address payable winner_TOD39;\n886-new_variable-157-157", method="", type_label=new_variable];
890 [label="157_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n890-function_definition-158-162", method="play_TOD39(bytes32 guess)", type_label=function_definition];
898 [label="158_ if\n898-if-159-161", method="play_TOD39(bytes32 guess)", type_label=if];
2656 [label="158_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
920 [label="159_ winner_TOD39 = msg.sender;\n920-expression_statement-160-160", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
926 [label="162_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n926-function_definition-163-165", method="getReward_TOD39()", type_label=function_definition];
931 [label="163_ winner_TOD39.transfer(msg.value);\n931-expression_statement-164-164", method="getReward_TOD39()", type_label=expression_statement];
940 [label="165_ address public evt;\n940-new_variable-166-166", method="", type_label=new_variable];
945 [label="166_ bool claimed_TOD36 = false;\n945-new_variable-167-167", method="", type_label=new_variable];
951 [label="167_ address payable owner_TOD36;\n951-new_variable-168-168", method="", type_label=new_variable];
955 [label="168_ uint256 reward_TOD36;\n955-new_variable-169-169", method="", type_label=new_variable];
959 [label="169_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n959-function_definition-170-175", method="setReward_TOD36()", type_label=function_definition];
964 [label="170_ require (!claimed_TOD36);\n964-expression_statement-171-171", method="setReward_TOD36()", type_label=expression_statement];
970 [label="171_ require(msg.sender == owner_TOD36);\n970-expression_statement-172-172", method="setReward_TOD36()", type_label=expression_statement];
979 [label="172_ owner_TOD36.transfer(reward_TOD36);\n979-expression_statement-173-173", method="setReward_TOD36()", type_label=expression_statement];
986 [label="173_ reward_TOD36 = msg.value;\n986-expression_statement-174-174", method="setReward_TOD36()", type_label=expression_statement];
992 [label="175_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n992-function_definition-176-181", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
1000 [label="176_ require (!claimed_TOD36);\n1000-expression_statement-177-177", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1006 [label="177_ require(submission < 10);\n1006-expression_statement-178-178", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1013 [label="178_ msg.sender.transfer(reward_TOD36);\n1013-expression_statement-179-179", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1022 [label="179_ claimed_TOD36 = true;\n1022-expression_statement-180-180", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
1027 [label="181_ address public team;\n1027-new_variable-182-182", method="", type_label=new_variable];
1032 [label="182_ modifier isOwner {\n        require(owner == msg.sender);\n        _;\n    }\n1032-expression_statement-183-186", method="", type_label=expression_statement];
1035 [label="183_ require(owner == msg.sender);\n1035-expression_statement-184-184", method="", type_label=expression_statement];
1044 [label="184_ _;\n1044-expression_statement-185-185", method="", type_label=expression_statement];
1048 [label="187_ owner   = msg.sender;\n1048-expression_statement-188-188", method="", type_label=expression_statement];
1054 [label="188_ sale    = 0x071F73f4D0befd4406901AACE6D5FFD6D297c561;\n1054-expression_statement-189-189", method="", type_label=expression_statement];
1058 [label="189_ evt     = 0x76535ca5BF1d33434A302e5A464Df433BB1F80F6;\n1058-expression_statement-190-190", method="", type_label=expression_statement];
1062 [label="190_ team    = 0xD7EC5D8697e4c83Dc33D781d19dc2910fB165D5C;\n1062-expression_statement-191-191", method="", type_label=expression_statement];
1066 [label="191_ saleAmount    = toWei(1000000000);\n1066-expression_statement-192-192", method="", type_label=expression_statement];
1073 [label="192_ evtAmount     = toWei(200000000);\n1073-expression_statement-193-193", method="", type_label=expression_statement];
1080 [label="193_ teamAmount    = toWei(800000000);\n1080-expression_statement-194-194", method="", type_label=expression_statement];
1087 [label="194_ _totalSupply  = toWei(2000000000);\n1087-expression_statement-195-195", method="", type_label=expression_statement];
1094 [label="195_ require(_totalSupply == saleAmount + evtAmount + teamAmount );\n1094-expression_statement-196-196", method="", type_label=expression_statement];
1105 [label="196_ balances[owner] = _totalSupply;\n1105-expression_statement-197-197", method="", type_label=expression_statement];
1123 [label="198_ transfer(sale, saleAmount);\n1123-expression_statement-199-199", method="", type_label=expression_statement];
1130 [label="199_ transfer(evt, evtAmount);\n1130-expression_statement-200-200", method="", type_label=expression_statement];
1137 [label="200_ transfer(team, teamAmount);\n1137-expression_statement-201-201", method="", type_label=expression_statement];
1144 [label="201_ require(balances[owner] == 0);\n1144-expression_statement-202-202", method="", type_label=expression_statement];
1153 [label="203_ address payable winner_TOD35;\n1153-new_variable-204-204", method="", type_label=new_variable];
1157 [label="204_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n1157-function_definition-205-209", method="play_TOD35(bytes32 guess)", type_label=function_definition];
1165 [label="205_ if\n1165-if-206-208", method="play_TOD35(bytes32 guess)", type_label=if];
2923 [label="205_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
1187 [label="206_ winner_TOD35 = msg.sender;\n1187-expression_statement-207-207", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
1193 [label="209_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n1193-function_definition-210-212", method="getReward_TOD35()", type_label=function_definition];
1198 [label="210_ winner_TOD35.transfer(msg.value);\n1198-expression_statement-211-211", method="getReward_TOD35()", type_label=expression_statement];
1207 [label="212_ function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n1207-function_definition-213-215", method="totalSupply()", type_label=function_definition];
1216 [label="213_ return _totalSupply;\n1216-return-214-214", method="totalSupply()", type_label=return];
1218 [label="215_ bool claimed_TOD40 = false;\n1218-new_variable-216-216", method="", type_label=new_variable];
1224 [label="216_ address payable owner_TOD40;\n1224-new_variable-217-217", method="", type_label=new_variable];
1228 [label="217_ uint256 reward_TOD40;\n1228-new_variable-218-218", method="", type_label=new_variable];
1232 [label="218_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n1232-function_definition-219-224", method="setReward_TOD40()", type_label=function_definition];
1237 [label="219_ require (!claimed_TOD40);\n1237-expression_statement-220-220", method="setReward_TOD40()", type_label=expression_statement];
1243 [label="220_ require(msg.sender == owner_TOD40);\n1243-expression_statement-221-221", method="setReward_TOD40()", type_label=expression_statement];
1252 [label="221_ owner_TOD40.transfer(reward_TOD40);\n1252-expression_statement-222-222", method="setReward_TOD40()", type_label=expression_statement];
1259 [label="222_ reward_TOD40 = msg.value;\n1259-expression_statement-223-223", method="setReward_TOD40()", type_label=expression_statement];
1265 [label="224_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n1265-function_definition-225-230", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
1273 [label="225_ require (!claimed_TOD40);\n1273-expression_statement-226-226", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1279 [label="226_ require(submission < 10);\n1279-expression_statement-227-227", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1286 [label="227_ msg.sender.transfer(reward_TOD40);\n1286-expression_statement-228-228", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1295 [label="228_ claimed_TOD40 = true;\n1295-expression_statement-229-229", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
1300 [label="230_ function balanceOf(address who) public view returns (uint256) {\n        return balances[who];\n    }\n1300-function_definition-231-233", method="balanceOf(address who)", type_label=function_definition];
1313 [label="231_ return balances[who];\n1313-return-232-232", method="balanceOf(address who)", type_label=return];
1317 [label="233_ address payable winner_TOD33;\n1317-new_variable-234-234", method="", type_label=new_variable];
1321 [label="234_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n1321-function_definition-235-239", method="play_TOD33(bytes32 guess)", type_label=function_definition];
1329 [label="235_ if\n1329-if-236-238", method="play_TOD33(bytes32 guess)", type_label=if];
3087 [label="235_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
1351 [label="236_ winner_TOD33 = msg.sender;\n1351-expression_statement-237-237", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
1357 [label="239_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n1357-function_definition-240-242", method="getReward_TOD33()", type_label=function_definition];
1362 [label="240_ winner_TOD33.transfer(msg.value);\n1362-expression_statement-241-241", method="getReward_TOD33()", type_label=expression_statement];
1371 [label="242_ function transfer(address to, uint256 value) public returns (bool success) {\n        require(msg.sender != to);\n        require(value > 0);\n        require( balances[msg.sender] >= value );\n        require( balances[to] + value >= balances[to] );\n        if(msg.sender == team) {\n            require(now >= 1589036400);      \n            if(balances[msg.sender] - value < toWei(600000000))\n                require(now >= 1620572400);      \n            if(balances[msg.sender] - value < toWei(400000000))\n                require(now >= 1652108400);      \n            if(balances[msg.sender] - value < toWei(200000000))\n                require(now >= 1683644400);      \n        }\n        balances[msg.sender] -= value;\n        balances[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n1371-function_definition-243-261", method="transfer(address to,uint256 value)", type_label=function_definition];
1388 [label="243_ require(msg.sender != to);\n1388-expression_statement-244-244", method="transfer(address to,uint256 value)", type_label=expression_statement];
1397 [label="244_ require(value > 0);\n1397-expression_statement-245-245", method="transfer(address to,uint256 value)", type_label=expression_statement];
1404 [label="245_ require( balances[msg.sender] >= value );\n1404-expression_statement-246-246", method="transfer(address to,uint256 value)", type_label=expression_statement];
1415 [label="246_ require( balances[to] + value >= balances[to] );\n1415-expression_statement-247-247", method="transfer(address to,uint256 value)", type_label=expression_statement];
1428 [label="247_ if_msg.sender == team\n1428-if-248-256", method="transfer(address to,uint256 value)", type_label=if];
3186 [label="247_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1435 [label="248_ require(now >= 1589036400);\n1435-expression_statement-249-249", method="transfer(address to,uint256 value)", type_label=expression_statement];
1442 [label="249_ if\n1442-if-250-251", method="transfer(address to,uint256 value)", type_label=if];
3200 [label="249_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1455 [label="250_ require(now >= 1620572400);\n1455-expression_statement-251-251", method="transfer(address to,uint256 value)", type_label=expression_statement];
1462 [label="251_ if\n1462-if-252-253", method="transfer(address to,uint256 value)", type_label=if];
3220 [label="251_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1475 [label="252_ require(now >= 1652108400);\n1475-expression_statement-253-253", method="transfer(address to,uint256 value)", type_label=expression_statement];
1482 [label="253_ if\n1482-if-254-255", method="transfer(address to,uint256 value)", type_label=if];
3240 [label="253_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1495 [label="254_ require(now >= 1683644400);\n1495-expression_statement-255-255", method="transfer(address to,uint256 value)", type_label=expression_statement];
1502 [label="256_ balances[msg.sender] -= value;\n1502-expression_statement-257-257", method="transfer(address to,uint256 value)", type_label=expression_statement];
1510 [label="257_ balances[to] += value;\n1510-expression_statement-258-258", method="transfer(address to,uint256 value)", type_label=expression_statement];
1526 [label="259_ return true;\n1526-return-260-260", method="transfer(address to,uint256 value)", type_label=return];
1529 [label="261_ address payable winner_TOD27;\n1529-new_variable-262-262", method="", type_label=new_variable];
1533 [label="262_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n1533-function_definition-263-267", method="play_TOD27(bytes32 guess)", type_label=function_definition];
1541 [label="263_ if\n1541-if-264-266", method="play_TOD27(bytes32 guess)", type_label=if];
3299 [label="263_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
1563 [label="264_ winner_TOD27 = msg.sender;\n1563-expression_statement-265-265", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
1569 [label="267_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n1569-function_definition-268-270", method="getReward_TOD27()", type_label=function_definition];
1574 [label="268_ winner_TOD27.transfer(msg.value);\n1574-expression_statement-269-269", method="getReward_TOD27()", type_label=expression_statement];
1583 [label="270_ function burnCoins(uint256 value) public {\n        require(balances[msg.sender] >= value);\n        require(_totalSupply >= value);\n        balances[msg.sender] -= value;\n        _totalSupply -= value;\n        emit Transfer(msg.sender, address(0), value);\n    }\n1583-function_definition-271-277", method="burnCoins(uint256 value)", type_label=function_definition];
1591 [label="271_ require(balances[msg.sender] >= value);\n1591-expression_statement-272-272", method="burnCoins(uint256 value)", type_label=expression_statement];
1602 [label="272_ require(_totalSupply >= value);\n1602-expression_statement-273-273", method="burnCoins(uint256 value)", type_label=expression_statement];
1609 [label="273_ balances[msg.sender] -= value;\n1609-expression_statement-274-274", method="burnCoins(uint256 value)", type_label=expression_statement];
1617 [label="274_ _totalSupply -= value;\n1617-expression_statement-275-275", method="burnCoins(uint256 value)", type_label=expression_statement];
1633 [label="277_ address payable winner_TOD31;\n1633-new_variable-278-278", method="", type_label=new_variable];
1637 [label="278_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n1637-function_definition-279-283", method="play_TOD31(bytes32 guess)", type_label=function_definition];
1645 [label="279_ if\n1645-if-280-282", method="play_TOD31(bytes32 guess)", type_label=if];
3403 [label="279_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
1667 [label="280_ winner_TOD31 = msg.sender;\n1667-expression_statement-281-281", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
1673 [label="283_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n1673-function_definition-284-286", method="getReward_TOD31()", type_label=function_definition];
1678 [label="284_ winner_TOD31.transfer(msg.value);\n1678-expression_statement-285-285", method="getReward_TOD31()", type_label=expression_statement];
1687 [label="286_ function toWei(uint256 value) private view returns (uint256) {\n        return value * (10 ** uint256(decimals));\n    }\n1687-function_definition-287-289", method="toWei(uint256 value)", type_label=function_definition];
1700 [label="287_ return value * (10 ** uint256(decimals));\n1700-return-288-288", method="toWei(uint256 value)", type_label=return];
1709 [label="289_ address payable winner_TOD13;\n1709-new_variable-290-290", method="", type_label=new_variable];
1713 [label="290_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n1713-function_definition-291-295", method="play_TOD13(bytes32 guess)", type_label=function_definition];
1721 [label="291_ if\n1721-if-292-294", method="play_TOD13(bytes32 guess)", type_label=if];
3479 [label="291_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
1743 [label="292_ winner_TOD13 = msg.sender;\n1743-expression_statement-293-293", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
1749 [label="295_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n1749-function_definition-296-298", method="getReward_TOD13()", type_label=function_definition];
1754 [label="296_ winner_TOD13.transfer(msg.value);\n1754-expression_statement-297-297", method="getReward_TOD13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
70 -> 76  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
76 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
84 -> 89  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
89 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
117 -> 125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
125 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
152 -> 159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
248 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
254 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
273 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 542  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
520 -> 2278  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2278 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
542 -> 2278  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
548 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 600  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
578 -> 2336  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2336 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 2336  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
606 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
620 -> 624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
692 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
706 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
726 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
767 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
794 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
860 -> 867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
867 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
890 -> 898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
898 -> 920  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
898 -> 2656  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2656 -> 926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
920 -> 2656  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
926 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
951 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
964 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 1013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1013 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 1032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1062 -> 1066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1066 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1073 -> 1080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 1087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1094 -> 1105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1123 -> 1130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1130 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1157 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1187  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1165 -> 2923  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2923 -> 1193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1187 -> 2923  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1193 -> 1198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1207 -> 1216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1216 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1218 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1243 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1252 -> 1259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1279 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1286 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1300 -> 1313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1313 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1321 -> 1329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1329 -> 1351  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1329 -> 3087  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3087 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1351 -> 3087  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1357 -> 1362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1371 -> 1388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1388 -> 1397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1397 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1415 -> 1428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1428 -> 1435  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1428 -> 3186  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1435 -> 1442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1442 -> 1455  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1442 -> 3200  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3200 -> 1462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1455 -> 3200  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1462 -> 1475  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1462 -> 3220  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3220 -> 1482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1475 -> 3220  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1482 -> 1495  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1482 -> 3240  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3240 -> 1502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1495 -> 3240  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1502 -> 1510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1526 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1533 -> 1541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1541 -> 1563  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1541 -> 3299  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3299 -> 1569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> 3299  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1569 -> 1574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1583 -> 1591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1591 -> 1602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1609 -> 1617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1637 -> 1645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1645 -> 1667  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1645 -> 3403  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3403 -> 1673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1667 -> 3403  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1673 -> 1678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1687 -> 1700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1700 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1713 -> 1721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1721 -> 1743  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1721 -> 3479  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3479 -> 1749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1743 -> 3479  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1749 -> 1754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
