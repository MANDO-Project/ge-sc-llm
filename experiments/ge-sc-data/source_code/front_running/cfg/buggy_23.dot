digraph  {
13 [label="2_ function transfer(address to, uint256 value) external returns (bool);\n13-function_definition-3-3", method="transfer(address to,uint256 value)", type_label=function_definition];
28 [label="3_ function approve(address spender, uint256 value) external returns (bool);\n28-function_definition-4-4", method="approve(address spender,uint256 value)", type_label=function_definition];
43 [label="4_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n43-function_definition-5-5", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
62 [label="5_ function totalSupply() external view returns (uint256);\n62-function_definition-6-6", method="totalSupply()", type_label=function_definition];
70 [label="6_ function balanceOf(address who) external view returns (uint256);\n70-function_definition-7-7", method="balanceOf(address who)", type_label=function_definition];
82 [label="7_ function allowance(address owner, address spender) external view returns (uint256);\n82-function_definition-8-8", method="allowance(address owner,address spender)", type_label=function_definition];
133 [label="13_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n133-function_definition-14-21", method="mul(uint256 a,uint256 b)", type_label=function_definition];
150 [label="14_ if_a == 0\n150-if-15-17", method="mul(uint256 a,uint256 b)", type_label=if];
2871 [label="14_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
155 [label="15_ return 0;\n155-return-16-16", method="mul(uint256 a,uint256 b)", type_label=return];
157 [label="17_ uint256 c = a * b;\n157-new_variable-18-18", method="mul(uint256 a,uint256 b)", type_label=new_variable];
165 [label="18_ require(c / a == b);\n165-expression_statement-19-19", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
174 [label="19_ return c;\n174-return-20-20", method="mul(uint256 a,uint256 b)", type_label=return];
176 [label="21_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n176-function_definition-22-26", method="div(uint256 a,uint256 b)", type_label=function_definition];
193 [label="22_ require(b > 0);\n193-expression_statement-23-23", method="div(uint256 a,uint256 b)", type_label=expression_statement];
200 [label="23_ uint256 c = a / b;\n200-new_variable-24-24", method="div(uint256 a,uint256 b)", type_label=new_variable];
208 [label="24_ return c;\n208-return-25-25", method="div(uint256 a,uint256 b)", type_label=return];
210 [label="26_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n210-function_definition-27-31", method="sub(uint256 a,uint256 b)", type_label=function_definition];
227 [label="27_ require(b <= a);\n227-expression_statement-28-28", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
234 [label="28_ uint256 c = a - b;\n234-new_variable-29-29", method="sub(uint256 a,uint256 b)", type_label=new_variable];
242 [label="29_ return c;\n242-return-30-30", method="sub(uint256 a,uint256 b)", type_label=return];
244 [label="31_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n244-function_definition-32-36", method="add(uint256 a,uint256 b)", type_label=function_definition];
261 [label="32_ uint256 c = a + b;\n261-new_variable-33-33", method="add(uint256 a,uint256 b)", type_label=new_variable];
269 [label="33_ require(c >= a);\n269-expression_statement-34-34", method="add(uint256 a,uint256 b)", type_label=expression_statement];
276 [label="34_ return c;\n276-return-35-35", method="add(uint256 a,uint256 b)", type_label=return];
278 [label="36_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n278-function_definition-37-40", method="mod(uint256 a,uint256 b)", type_label=function_definition];
295 [label="37_ require(b != 0);\n295-expression_statement-38-38", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
302 [label="38_ return a % b;\n302-return-39-39", method="mod(uint256 a,uint256 b)", type_label=return];
321 [label="44_ address payable winner_TOD1;\n321-new_variable-45-45", method="", type_label=new_variable];
325 [label="45_ function play_TOD1(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD1 = msg.sender;\n        }\n    }\n325-function_definition-46-50", method="play_TOD1(bytes32 guess)", type_label=function_definition];
333 [label="46_ if\n333-if-47-49", method="play_TOD1(bytes32 guess)", type_label=if];
3054 [label="46_ end_if", method="play_TOD1(bytes32 guess)", type_label=end_if];
355 [label="47_ winner_TOD1 = msg.sender;\n355-expression_statement-48-48", method="play_TOD1(bytes32 guess)", type_label=expression_statement];
361 [label="50_ function getReward_TOD1() payable public{\n       winner_TOD1.transfer(msg.value);\n    }\n361-function_definition-51-53", method="getReward_TOD1()", type_label=function_definition];
366 [label="51_ winner_TOD1.transfer(msg.value);\n366-expression_statement-52-52", method="getReward_TOD1()", type_label=expression_statement];
375 [label="53_ mapping (address => uint256) private _balances;\n375-new_variable-54-54", method="", type_label=new_variable];
382 [label="54_ bool claimed_TOD2 = false;\n382-new_variable-55-55", method="", type_label=new_variable];
388 [label="55_ address payable owner_TOD2;\n388-new_variable-56-56", method="", type_label=new_variable];
392 [label="56_ uint256 reward_TOD2;\n392-new_variable-57-57", method="", type_label=new_variable];
396 [label="57_ function setReward_TOD2() public payable {\n        require (!claimed_TOD2);\n        require(msg.sender == owner_TOD2);\n        owner_TOD2.transfer(reward_TOD2);\n        reward_TOD2 = msg.value;\n    }\n396-function_definition-58-63", method="setReward_TOD2()", type_label=function_definition];
401 [label="58_ require (!claimed_TOD2);\n401-expression_statement-59-59", method="setReward_TOD2()", type_label=expression_statement];
407 [label="59_ require(msg.sender == owner_TOD2);\n407-expression_statement-60-60", method="setReward_TOD2()", type_label=expression_statement];
416 [label="60_ owner_TOD2.transfer(reward_TOD2);\n416-expression_statement-61-61", method="setReward_TOD2()", type_label=expression_statement];
423 [label="61_ reward_TOD2 = msg.value;\n423-expression_statement-62-62", method="setReward_TOD2()", type_label=expression_statement];
429 [label="63_ function claimReward_TOD2(uint256 submission) public {\n        require (!claimed_TOD2);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD2);\n        claimed_TOD2 = true;\n    }\n429-function_definition-64-69", method="claimReward_TOD2(uint256 submission)", type_label=function_definition];
437 [label="64_ require (!claimed_TOD2);\n437-expression_statement-65-65", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
443 [label="65_ require(submission < 10);\n443-expression_statement-66-66", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
450 [label="66_ msg.sender.transfer(reward_TOD2);\n450-expression_statement-67-67", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
459 [label="67_ claimed_TOD2 = true;\n459-expression_statement-68-68", method="claimReward_TOD2(uint256 submission)", type_label=expression_statement];
464 [label="69_ mapping (address => mapping (address => uint256)) private _allowed;\n464-new_variable-70-70", method="", type_label=new_variable];
473 [label="70_ address payable winner_TOD17;\n473-new_variable-71-71", method="", type_label=new_variable];
477 [label="71_ function play_TOD17(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD17 = msg.sender;\n        }\n    }\n477-function_definition-72-76", method="play_TOD17(bytes32 guess)", type_label=function_definition];
485 [label="72_ if\n485-if-73-75", method="play_TOD17(bytes32 guess)", type_label=if];
3206 [label="72_ end_if", method="play_TOD17(bytes32 guess)", type_label=end_if];
507 [label="73_ winner_TOD17 = msg.sender;\n507-expression_statement-74-74", method="play_TOD17(bytes32 guess)", type_label=expression_statement];
513 [label="76_ function getReward_TOD17() payable public{\n       winner_TOD17.transfer(msg.value);\n    }\n513-function_definition-77-79", method="getReward_TOD17()", type_label=function_definition];
518 [label="77_ winner_TOD17.transfer(msg.value);\n518-expression_statement-78-78", method="getReward_TOD17()", type_label=expression_statement];
527 [label="79_ uint256 private _totalSupply;\n527-new_variable-80-80", method="", type_label=new_variable];
532 [label="80_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n532-function_definition-81-83", method="totalSupply()", type_label=function_definition];
541 [label="81_ return _totalSupply;\n541-return-82-82", method="totalSupply()", type_label=return];
543 [label="83_ address payable winner_TOD25;\n543-new_variable-84-84", method="", type_label=new_variable];
547 [label="84_ function play_TOD25(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD25 = msg.sender;\n        }\n    }\n547-function_definition-85-89", method="play_TOD25(bytes32 guess)", type_label=function_definition];
555 [label="85_ if\n555-if-86-88", method="play_TOD25(bytes32 guess)", type_label=if];
3276 [label="85_ end_if", method="play_TOD25(bytes32 guess)", type_label=end_if];
577 [label="86_ winner_TOD25 = msg.sender;\n577-expression_statement-87-87", method="play_TOD25(bytes32 guess)", type_label=expression_statement];
583 [label="89_ function getReward_TOD25() payable public{\n       winner_TOD25.transfer(msg.value);\n    }\n583-function_definition-90-92", method="getReward_TOD25()", type_label=function_definition];
588 [label="90_ winner_TOD25.transfer(msg.value);\n588-expression_statement-91-91", method="getReward_TOD25()", type_label=expression_statement];
597 [label="92_ function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n597-function_definition-93-95", method="balanceOf(address owner)", type_label=function_definition];
610 [label="93_ return _balances[owner];\n610-return-94-94", method="balanceOf(address owner)", type_label=return];
614 [label="95_ address payable winner_TOD19;\n614-new_variable-96-96", method="", type_label=new_variable];
618 [label="96_ function play_TOD19(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD19 = msg.sender;\n        }\n    }\n618-function_definition-97-101", method="play_TOD19(bytes32 guess)", type_label=function_definition];
626 [label="97_ if\n626-if-98-100", method="play_TOD19(bytes32 guess)", type_label=if];
3347 [label="97_ end_if", method="play_TOD19(bytes32 guess)", type_label=end_if];
648 [label="98_ winner_TOD19 = msg.sender;\n648-expression_statement-99-99", method="play_TOD19(bytes32 guess)", type_label=expression_statement];
654 [label="101_ function getReward_TOD19() payable public{\n       winner_TOD19.transfer(msg.value);\n    }\n654-function_definition-102-104", method="getReward_TOD19()", type_label=function_definition];
659 [label="102_ winner_TOD19.transfer(msg.value);\n659-expression_statement-103-103", method="getReward_TOD19()", type_label=expression_statement];
668 [label="104_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n668-function_definition-105-107", method="allowance(address owner,address spender)", type_label=function_definition];
685 [label="105_ return _allowed[owner][spender];\n685-return-106-106", method="allowance(address owner,address spender)", type_label=return];
691 [label="107_ bool claimed_TOD26 = false;\n691-new_variable-108-108", method="", type_label=new_variable];
697 [label="108_ address payable owner_TOD26;\n697-new_variable-109-109", method="", type_label=new_variable];
701 [label="109_ uint256 reward_TOD26;\n701-new_variable-110-110", method="", type_label=new_variable];
705 [label="110_ function setReward_TOD26() public payable {\n        require (!claimed_TOD26);\n        require(msg.sender == owner_TOD26);\n        owner_TOD26.transfer(reward_TOD26);\n        reward_TOD26 = msg.value;\n    }\n705-function_definition-111-116", method="setReward_TOD26()", type_label=function_definition];
710 [label="111_ require (!claimed_TOD26);\n710-expression_statement-112-112", method="setReward_TOD26()", type_label=expression_statement];
716 [label="112_ require(msg.sender == owner_TOD26);\n716-expression_statement-113-113", method="setReward_TOD26()", type_label=expression_statement];
725 [label="113_ owner_TOD26.transfer(reward_TOD26);\n725-expression_statement-114-114", method="setReward_TOD26()", type_label=expression_statement];
732 [label="114_ reward_TOD26 = msg.value;\n732-expression_statement-115-115", method="setReward_TOD26()", type_label=expression_statement];
738 [label="116_ function claimReward_TOD26(uint256 submission) public {\n        require (!claimed_TOD26);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD26);\n        claimed_TOD26 = true;\n    }\n738-function_definition-117-122", method="claimReward_TOD26(uint256 submission)", type_label=function_definition];
746 [label="117_ require (!claimed_TOD26);\n746-expression_statement-118-118", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
752 [label="118_ require(submission < 10);\n752-expression_statement-119-119", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
759 [label="119_ msg.sender.transfer(reward_TOD26);\n759-expression_statement-120-120", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
768 [label="120_ claimed_TOD26 = true;\n768-expression_statement-121-121", method="claimReward_TOD26(uint256 submission)", type_label=expression_statement];
773 [label="122_ function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n773-function_definition-123-126", method="transfer(address to,uint256 value)", type_label=function_definition];
789 [label="123_ _transfer(msg.sender, to, value);\n789-expression_statement-124-124", method="transfer(address to,uint256 value)", type_label=expression_statement];
800 [label="124_ return true;\n800-return-125-125", method="transfer(address to,uint256 value)", type_label=return];
803 [label="126_ bool claimed_TOD20 = false;\n803-new_variable-127-127", method="", type_label=new_variable];
809 [label="127_ address payable owner_TOD20;\n809-new_variable-128-128", method="", type_label=new_variable];
813 [label="128_ uint256 reward_TOD20;\n813-new_variable-129-129", method="", type_label=new_variable];
817 [label="129_ function setReward_TOD20() public payable {\n        require (!claimed_TOD20);\n        require(msg.sender == owner_TOD20);\n        owner_TOD20.transfer(reward_TOD20);\n        reward_TOD20 = msg.value;\n    }\n817-function_definition-130-135", method="setReward_TOD20()", type_label=function_definition];
822 [label="130_ require (!claimed_TOD20);\n822-expression_statement-131-131", method="setReward_TOD20()", type_label=expression_statement];
828 [label="131_ require(msg.sender == owner_TOD20);\n828-expression_statement-132-132", method="setReward_TOD20()", type_label=expression_statement];
837 [label="132_ owner_TOD20.transfer(reward_TOD20);\n837-expression_statement-133-133", method="setReward_TOD20()", type_label=expression_statement];
844 [label="133_ reward_TOD20 = msg.value;\n844-expression_statement-134-134", method="setReward_TOD20()", type_label=expression_statement];
850 [label="135_ function claimReward_TOD20(uint256 submission) public {\n        require (!claimed_TOD20);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD20);\n        claimed_TOD20 = true;\n    }\n850-function_definition-136-141", method="claimReward_TOD20(uint256 submission)", type_label=function_definition];
858 [label="136_ require (!claimed_TOD20);\n858-expression_statement-137-137", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
864 [label="137_ require(submission < 10);\n864-expression_statement-138-138", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
871 [label="138_ msg.sender.transfer(reward_TOD20);\n871-expression_statement-139-139", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
880 [label="139_ claimed_TOD20 = true;\n880-expression_statement-140-140", method="claimReward_TOD20(uint256 submission)", type_label=expression_statement];
885 [label="141_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n885-function_definition-142-145", method="approve(address spender,uint256 value)", type_label=function_definition];
901 [label="142_ _approve(msg.sender, spender, value);\n901-expression_statement-143-143", method="approve(address spender,uint256 value)", type_label=expression_statement];
912 [label="143_ return true;\n912-return-144-144", method="approve(address spender,uint256 value)", type_label=return];
915 [label="145_ bool claimed_TOD32 = false;\n915-new_variable-146-146", method="", type_label=new_variable];
921 [label="146_ address payable owner_TOD32;\n921-new_variable-147-147", method="", type_label=new_variable];
925 [label="147_ uint256 reward_TOD32;\n925-new_variable-148-148", method="", type_label=new_variable];
929 [label="148_ function setReward_TOD32() public payable {\n        require (!claimed_TOD32);\n        require(msg.sender == owner_TOD32);\n        owner_TOD32.transfer(reward_TOD32);\n        reward_TOD32 = msg.value;\n    }\n929-function_definition-149-154", method="setReward_TOD32()", type_label=function_definition];
934 [label="149_ require (!claimed_TOD32);\n934-expression_statement-150-150", method="setReward_TOD32()", type_label=expression_statement];
940 [label="150_ require(msg.sender == owner_TOD32);\n940-expression_statement-151-151", method="setReward_TOD32()", type_label=expression_statement];
949 [label="151_ owner_TOD32.transfer(reward_TOD32);\n949-expression_statement-152-152", method="setReward_TOD32()", type_label=expression_statement];
956 [label="152_ reward_TOD32 = msg.value;\n956-expression_statement-153-153", method="setReward_TOD32()", type_label=expression_statement];
962 [label="154_ function claimReward_TOD32(uint256 submission) public {\n        require (!claimed_TOD32);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD32);\n        claimed_TOD32 = true;\n    }\n962-function_definition-155-160", method="claimReward_TOD32(uint256 submission)", type_label=function_definition];
970 [label="155_ require (!claimed_TOD32);\n970-expression_statement-156-156", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
976 [label="156_ require(submission < 10);\n976-expression_statement-157-157", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
983 [label="157_ msg.sender.transfer(reward_TOD32);\n983-expression_statement-158-158", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
992 [label="158_ claimed_TOD32 = true;\n992-expression_statement-159-159", method="claimReward_TOD32(uint256 submission)", type_label=expression_statement];
997 [label="160_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n997-function_definition-161-165", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
1017 [label="161_ _transfer(from, to, value);\n1017-expression_statement-162-162", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1026 [label="162_ _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n1026-expression_statement-163-163", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1048 [label="163_ return true;\n1048-return-164-164", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1051 [label="165_ bool claimed_TOD38 = false;\n1051-new_variable-166-166", method="", type_label=new_variable];
1057 [label="166_ address payable owner_TOD38;\n1057-new_variable-167-167", method="", type_label=new_variable];
1061 [label="167_ uint256 reward_TOD38;\n1061-new_variable-168-168", method="", type_label=new_variable];
1065 [label="168_ function setReward_TOD38() public payable {\n        require (!claimed_TOD38);\n        require(msg.sender == owner_TOD38);\n        owner_TOD38.transfer(reward_TOD38);\n        reward_TOD38 = msg.value;\n    }\n1065-function_definition-169-174", method="setReward_TOD38()", type_label=function_definition];
1070 [label="169_ require (!claimed_TOD38);\n1070-expression_statement-170-170", method="setReward_TOD38()", type_label=expression_statement];
1076 [label="170_ require(msg.sender == owner_TOD38);\n1076-expression_statement-171-171", method="setReward_TOD38()", type_label=expression_statement];
1085 [label="171_ owner_TOD38.transfer(reward_TOD38);\n1085-expression_statement-172-172", method="setReward_TOD38()", type_label=expression_statement];
1092 [label="172_ reward_TOD38 = msg.value;\n1092-expression_statement-173-173", method="setReward_TOD38()", type_label=expression_statement];
1098 [label="174_ function claimReward_TOD38(uint256 submission) public {\n        require (!claimed_TOD38);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD38);\n        claimed_TOD38 = true;\n    }\n1098-function_definition-175-180", method="claimReward_TOD38(uint256 submission)", type_label=function_definition];
1106 [label="175_ require (!claimed_TOD38);\n1106-expression_statement-176-176", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1112 [label="176_ require(submission < 10);\n1112-expression_statement-177-177", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1119 [label="177_ msg.sender.transfer(reward_TOD38);\n1119-expression_statement-178-178", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1128 [label="178_ claimed_TOD38 = true;\n1128-expression_statement-179-179", method="claimReward_TOD38(uint256 submission)", type_label=expression_statement];
1133 [label="180_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n1133-function_definition-181-184", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
1149 [label="181_ _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n1149-expression_statement-182-182", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1171 [label="182_ return true;\n1171-return-183-183", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
1174 [label="184_ bool claimed_TOD4 = false;\n1174-new_variable-185-185", method="", type_label=new_variable];
1180 [label="185_ address payable owner_TOD4;\n1180-new_variable-186-186", method="", type_label=new_variable];
1184 [label="186_ uint256 reward_TOD4;\n1184-new_variable-187-187", method="", type_label=new_variable];
1188 [label="187_ function setReward_TOD4() public payable {\n        require (!claimed_TOD4);\n        require(msg.sender == owner_TOD4);\n        owner_TOD4.transfer(reward_TOD4);\n        reward_TOD4 = msg.value;\n    }\n1188-function_definition-188-193", method="setReward_TOD4()", type_label=function_definition];
1193 [label="188_ require (!claimed_TOD4);\n1193-expression_statement-189-189", method="setReward_TOD4()", type_label=expression_statement];
1199 [label="189_ require(msg.sender == owner_TOD4);\n1199-expression_statement-190-190", method="setReward_TOD4()", type_label=expression_statement];
1208 [label="190_ owner_TOD4.transfer(reward_TOD4);\n1208-expression_statement-191-191", method="setReward_TOD4()", type_label=expression_statement];
1215 [label="191_ reward_TOD4 = msg.value;\n1215-expression_statement-192-192", method="setReward_TOD4()", type_label=expression_statement];
1221 [label="193_ function claimReward_TOD4(uint256 submission) public {\n        require (!claimed_TOD4);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD4);\n        claimed_TOD4 = true;\n    }\n1221-function_definition-194-199", method="claimReward_TOD4(uint256 submission)", type_label=function_definition];
1229 [label="194_ require (!claimed_TOD4);\n1229-expression_statement-195-195", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1235 [label="195_ require(submission < 10);\n1235-expression_statement-196-196", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1242 [label="196_ msg.sender.transfer(reward_TOD4);\n1242-expression_statement-197-197", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1251 [label="197_ claimed_TOD4 = true;\n1251-expression_statement-198-198", method="claimReward_TOD4(uint256 submission)", type_label=expression_statement];
1256 [label="199_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n1256-function_definition-200-203", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
1272 [label="200_ _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n1272-expression_statement-201-201", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1294 [label="201_ return true;\n1294-return-202-202", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
1297 [label="203_ address payable winner_TOD7;\n1297-new_variable-204-204", method="", type_label=new_variable];
1301 [label="204_ function play_TOD7(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD7 = msg.sender;\n        }\n    }\n1301-function_definition-205-209", method="play_TOD7(bytes32 guess)", type_label=function_definition];
1309 [label="205_ if\n1309-if-206-208", method="play_TOD7(bytes32 guess)", type_label=if];
4030 [label="205_ end_if", method="play_TOD7(bytes32 guess)", type_label=end_if];
1331 [label="206_ winner_TOD7 = msg.sender;\n1331-expression_statement-207-207", method="play_TOD7(bytes32 guess)", type_label=expression_statement];
1337 [label="209_ function getReward_TOD7() payable public{\n       winner_TOD7.transfer(msg.value);\n    }\n1337-function_definition-210-212", method="getReward_TOD7()", type_label=function_definition];
1342 [label="210_ winner_TOD7.transfer(msg.value);\n1342-expression_statement-211-211", method="getReward_TOD7()", type_label=expression_statement];
1351 [label="212_ function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n1351-function_definition-213-218", method="_transfer(address from,address to,uint256 value)", type_label=function_definition];
1367 [label="213_ require(to != address(0));\n1367-expression_statement-214-214", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1376 [label="214_ _balances[from] = _balances[from].sub(value);\n1376-expression_statement-215-215", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1389 [label="215_ _balances[to] = _balances[to].add(value);\n1389-expression_statement-216-216", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1410 [label="218_ address payable winner_TOD23;\n1410-new_variable-219-219", method="", type_label=new_variable];
1414 [label="219_ function play_TOD23(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD23 = msg.sender;\n        }\n    }\n1414-function_definition-220-224", method="play_TOD23(bytes32 guess)", type_label=function_definition];
1422 [label="220_ if\n1422-if-221-223", method="play_TOD23(bytes32 guess)", type_label=if];
4143 [label="220_ end_if", method="play_TOD23(bytes32 guess)", type_label=end_if];
1444 [label="221_ winner_TOD23 = msg.sender;\n1444-expression_statement-222-222", method="play_TOD23(bytes32 guess)", type_label=expression_statement];
1450 [label="224_ function getReward_TOD23() payable public{\n       winner_TOD23.transfer(msg.value);\n    }\n1450-function_definition-225-227", method="getReward_TOD23()", type_label=function_definition];
1455 [label="225_ winner_TOD23.transfer(msg.value);\n1455-expression_statement-226-226", method="getReward_TOD23()", type_label=expression_statement];
1464 [label="227_ function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n1464-function_definition-228-233", method="_mint(address account,uint256 value)", type_label=function_definition];
1476 [label="228_ require(account != address(0));\n1476-expression_statement-229-229", method="_mint(address account,uint256 value)", type_label=expression_statement];
1485 [label="229_ _totalSupply = _totalSupply.add(value);\n1485-expression_statement-230-230", method="_mint(address account,uint256 value)", type_label=expression_statement];
1494 [label="230_ _balances[account] = _balances[account].add(value);\n1494-expression_statement-231-231", method="_mint(address account,uint256 value)", type_label=expression_statement];
1517 [label="233_ bool claimed_TOD14 = false;\n1517-new_variable-234-234", method="", type_label=new_variable];
1523 [label="234_ address payable owner_TOD14;\n1523-new_variable-235-235", method="", type_label=new_variable];
1527 [label="235_ uint256 reward_TOD14;\n1527-new_variable-236-236", method="", type_label=new_variable];
1531 [label="236_ function setReward_TOD14() public payable {\n        require (!claimed_TOD14);\n        require(msg.sender == owner_TOD14);\n        owner_TOD14.transfer(reward_TOD14);\n        reward_TOD14 = msg.value;\n    }\n1531-function_definition-237-242", method="setReward_TOD14()", type_label=function_definition];
1536 [label="237_ require (!claimed_TOD14);\n1536-expression_statement-238-238", method="setReward_TOD14()", type_label=expression_statement];
1542 [label="238_ require(msg.sender == owner_TOD14);\n1542-expression_statement-239-239", method="setReward_TOD14()", type_label=expression_statement];
1551 [label="239_ owner_TOD14.transfer(reward_TOD14);\n1551-expression_statement-240-240", method="setReward_TOD14()", type_label=expression_statement];
1558 [label="240_ reward_TOD14 = msg.value;\n1558-expression_statement-241-241", method="setReward_TOD14()", type_label=expression_statement];
1564 [label="242_ function claimReward_TOD14(uint256 submission) public {\n        require (!claimed_TOD14);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD14);\n        claimed_TOD14 = true;\n    }\n1564-function_definition-243-248", method="claimReward_TOD14(uint256 submission)", type_label=function_definition];
1572 [label="243_ require (!claimed_TOD14);\n1572-expression_statement-244-244", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1578 [label="244_ require(submission < 10);\n1578-expression_statement-245-245", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1585 [label="245_ msg.sender.transfer(reward_TOD14);\n1585-expression_statement-246-246", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1594 [label="246_ claimed_TOD14 = true;\n1594-expression_statement-247-247", method="claimReward_TOD14(uint256 submission)", type_label=expression_statement];
1599 [label="248_ function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n1599-function_definition-249-254", method="_burn(address account,uint256 value)", type_label=function_definition];
1611 [label="249_ require(account != address(0));\n1611-expression_statement-250-250", method="_burn(address account,uint256 value)", type_label=expression_statement];
1620 [label="250_ _totalSupply = _totalSupply.sub(value);\n1620-expression_statement-251-251", method="_burn(address account,uint256 value)", type_label=expression_statement];
1629 [label="251_ _balances[account] = _balances[account].sub(value);\n1629-expression_statement-252-252", method="_burn(address account,uint256 value)", type_label=expression_statement];
1652 [label="254_ bool claimed_TOD30 = false;\n1652-new_variable-255-255", method="", type_label=new_variable];
1658 [label="255_ address payable owner_TOD30;\n1658-new_variable-256-256", method="", type_label=new_variable];
1662 [label="256_ uint256 reward_TOD30;\n1662-new_variable-257-257", method="", type_label=new_variable];
1666 [label="257_ function setReward_TOD30() public payable {\n        require (!claimed_TOD30);\n        require(msg.sender == owner_TOD30);\n        owner_TOD30.transfer(reward_TOD30);\n        reward_TOD30 = msg.value;\n    }\n1666-function_definition-258-263", method="setReward_TOD30()", type_label=function_definition];
1671 [label="258_ require (!claimed_TOD30);\n1671-expression_statement-259-259", method="setReward_TOD30()", type_label=expression_statement];
1677 [label="259_ require(msg.sender == owner_TOD30);\n1677-expression_statement-260-260", method="setReward_TOD30()", type_label=expression_statement];
1686 [label="260_ owner_TOD30.transfer(reward_TOD30);\n1686-expression_statement-261-261", method="setReward_TOD30()", type_label=expression_statement];
1693 [label="261_ reward_TOD30 = msg.value;\n1693-expression_statement-262-262", method="setReward_TOD30()", type_label=expression_statement];
1699 [label="263_ function claimReward_TOD30(uint256 submission) public {\n        require (!claimed_TOD30);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD30);\n        claimed_TOD30 = true;\n    }\n1699-function_definition-264-269", method="claimReward_TOD30(uint256 submission)", type_label=function_definition];
1707 [label="264_ require (!claimed_TOD30);\n1707-expression_statement-265-265", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1713 [label="265_ require(submission < 10);\n1713-expression_statement-266-266", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1720 [label="266_ msg.sender.transfer(reward_TOD30);\n1720-expression_statement-267-267", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1729 [label="267_ claimed_TOD30 = true;\n1729-expression_statement-268-268", method="claimReward_TOD30(uint256 submission)", type_label=expression_statement];
1734 [label="269_ function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n1734-function_definition-270-275", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
1750 [label="270_ require(spender != address(0));\n1750-expression_statement-271-271", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1759 [label="271_ require(owner != address(0));\n1759-expression_statement-272-272", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1768 [label="272_ _allowed[owner][spender] = value;\n1768-expression_statement-273-273", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1784 [label="275_ bool claimed_TOD8 = false;\n1784-new_variable-276-276", method="", type_label=new_variable];
1790 [label="276_ address payable owner_TOD8;\n1790-new_variable-277-277", method="", type_label=new_variable];
1794 [label="277_ uint256 reward_TOD8;\n1794-new_variable-278-278", method="", type_label=new_variable];
1798 [label="278_ function setReward_TOD8() public payable {\n        require (!claimed_TOD8);\n        require(msg.sender == owner_TOD8);\n        owner_TOD8.transfer(reward_TOD8);\n        reward_TOD8 = msg.value;\n    }\n1798-function_definition-279-284", method="setReward_TOD8()", type_label=function_definition];
1803 [label="279_ require (!claimed_TOD8);\n1803-expression_statement-280-280", method="setReward_TOD8()", type_label=expression_statement];
1809 [label="280_ require(msg.sender == owner_TOD8);\n1809-expression_statement-281-281", method="setReward_TOD8()", type_label=expression_statement];
1818 [label="281_ owner_TOD8.transfer(reward_TOD8);\n1818-expression_statement-282-282", method="setReward_TOD8()", type_label=expression_statement];
1825 [label="282_ reward_TOD8 = msg.value;\n1825-expression_statement-283-283", method="setReward_TOD8()", type_label=expression_statement];
1831 [label="284_ function claimReward_TOD8(uint256 submission) public {\n        require (!claimed_TOD8);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD8);\n        claimed_TOD8 = true;\n    }\n1831-function_definition-285-290", method="claimReward_TOD8(uint256 submission)", type_label=function_definition];
1839 [label="285_ require (!claimed_TOD8);\n1839-expression_statement-286-286", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1845 [label="286_ require(submission < 10);\n1845-expression_statement-287-287", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1852 [label="287_ msg.sender.transfer(reward_TOD8);\n1852-expression_statement-288-288", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1861 [label="288_ claimed_TOD8 = true;\n1861-expression_statement-289-289", method="claimReward_TOD8(uint256 submission)", type_label=expression_statement];
1866 [label="290_ function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n1866-function_definition-291-294", method="_burnFrom(address account,uint256 value)", type_label=function_definition];
1878 [label="291_ _burn(account, value);\n1878-expression_statement-292-292", method="_burnFrom(address account,uint256 value)", type_label=expression_statement];
1885 [label="292_ _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n1885-expression_statement-293-293", method="_burnFrom(address account,uint256 value)", type_label=expression_statement];
1907 [label="294_ address payable winner_TOD39;\n1907-new_variable-295-295", method="", type_label=new_variable];
1911 [label="295_ function play_TOD39(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD39 = msg.sender;\n        }\n    }\n1911-function_definition-296-300", method="play_TOD39(bytes32 guess)", type_label=function_definition];
1919 [label="296_ if\n1919-if-297-299", method="play_TOD39(bytes32 guess)", type_label=if];
4640 [label="296_ end_if", method="play_TOD39(bytes32 guess)", type_label=end_if];
1941 [label="297_ winner_TOD39 = msg.sender;\n1941-expression_statement-298-298", method="play_TOD39(bytes32 guess)", type_label=expression_statement];
1947 [label="300_ function getReward_TOD39() payable public{\n       winner_TOD39.transfer(msg.value);\n    }\n1947-function_definition-301-303", method="getReward_TOD39()", type_label=function_definition];
1952 [label="301_ winner_TOD39.transfer(msg.value);\n1952-expression_statement-302-302", method="getReward_TOD39()", type_label=expression_statement];
1971 [label="306_ function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n1971-function_definition-307-309", method="burn(uint256 value)", type_label=function_definition];
1979 [label="307_ _burn(msg.sender, value);\n1979-expression_statement-308-308", method="burn(uint256 value)", type_label=expression_statement];
1988 [label="309_ bool claimed_TOD36 = false;\n1988-new_variable-310-310", method="", type_label=new_variable];
1994 [label="310_ address payable owner_TOD36;\n1994-new_variable-311-311", method="", type_label=new_variable];
1998 [label="311_ uint256 reward_TOD36;\n1998-new_variable-312-312", method="", type_label=new_variable];
2002 [label="312_ function setReward_TOD36() public payable {\n        require (!claimed_TOD36);\n        require(msg.sender == owner_TOD36);\n        owner_TOD36.transfer(reward_TOD36);\n        reward_TOD36 = msg.value;\n    }\n2002-function_definition-313-318", method="setReward_TOD36()", type_label=function_definition];
2007 [label="313_ require (!claimed_TOD36);\n2007-expression_statement-314-314", method="setReward_TOD36()", type_label=expression_statement];
2013 [label="314_ require(msg.sender == owner_TOD36);\n2013-expression_statement-315-315", method="setReward_TOD36()", type_label=expression_statement];
2022 [label="315_ owner_TOD36.transfer(reward_TOD36);\n2022-expression_statement-316-316", method="setReward_TOD36()", type_label=expression_statement];
2029 [label="316_ reward_TOD36 = msg.value;\n2029-expression_statement-317-317", method="setReward_TOD36()", type_label=expression_statement];
2035 [label="318_ function claimReward_TOD36(uint256 submission) public {\n        require (!claimed_TOD36);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD36);\n        claimed_TOD36 = true;\n    }\n2035-function_definition-319-324", method="claimReward_TOD36(uint256 submission)", type_label=function_definition];
2043 [label="319_ require (!claimed_TOD36);\n2043-expression_statement-320-320", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2049 [label="320_ require(submission < 10);\n2049-expression_statement-321-321", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2056 [label="321_ msg.sender.transfer(reward_TOD36);\n2056-expression_statement-322-322", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2065 [label="322_ claimed_TOD36 = true;\n2065-expression_statement-323-323", method="claimReward_TOD36(uint256 submission)", type_label=expression_statement];
2070 [label="324_ function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n2070-function_definition-325-327", method="burnFrom(address from,uint256 value)", type_label=function_definition];
2082 [label="325_ _burnFrom(from, value);\n2082-expression_statement-326-326", method="burnFrom(address from,uint256 value)", type_label=expression_statement];
2089 [label="327_ address payable winner_TOD35;\n2089-new_variable-328-328", method="", type_label=new_variable];
2093 [label="328_ function play_TOD35(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD35 = msg.sender;\n        }\n    }\n2093-function_definition-329-333", method="play_TOD35(bytes32 guess)", type_label=function_definition];
2101 [label="329_ if\n2101-if-330-332", method="play_TOD35(bytes32 guess)", type_label=if];
4822 [label="329_ end_if", method="play_TOD35(bytes32 guess)", type_label=end_if];
2123 [label="330_ winner_TOD35 = msg.sender;\n2123-expression_statement-331-331", method="play_TOD35(bytes32 guess)", type_label=expression_statement];
2129 [label="333_ function getReward_TOD35() payable public{\n       winner_TOD35.transfer(msg.value);\n    }\n2129-function_definition-334-336", method="getReward_TOD35()", type_label=function_definition];
2134 [label="334_ winner_TOD35.transfer(msg.value);\n2134-expression_statement-335-335", method="getReward_TOD35()", type_label=expression_statement];
2153 [label="339_ address payable winner_TOD37;\n2153-new_variable-340-340", method="", type_label=new_variable];
2157 [label="340_ function play_TOD37(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD37 = msg.sender;\n        }\n    }\n2157-function_definition-341-345", method="play_TOD37(bytes32 guess)", type_label=function_definition];
2165 [label="341_ if\n2165-if-342-344", method="play_TOD37(bytes32 guess)", type_label=if];
4886 [label="341_ end_if", method="play_TOD37(bytes32 guess)", type_label=end_if];
2187 [label="342_ winner_TOD37 = msg.sender;\n2187-expression_statement-343-343", method="play_TOD37(bytes32 guess)", type_label=expression_statement];
2193 [label="345_ function getReward_TOD37() payable public{\n       winner_TOD37.transfer(msg.value);\n    }\n2193-function_definition-346-348", method="getReward_TOD37()", type_label=function_definition];
2198 [label="346_ winner_TOD37.transfer(msg.value);\n2198-expression_statement-347-347", method="getReward_TOD37()", type_label=expression_statement];
2207 [label="348_ string private _name;\n2207-new_variable-349-349", method="", type_label=new_variable];
2212 [label="349_ address payable winner_TOD3;\n2212-new_variable-350-350", method="", type_label=new_variable];
2216 [label="350_ function play_TOD3(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD3 = msg.sender;\n        }\n    }\n2216-function_definition-351-355", method="play_TOD3(bytes32 guess)", type_label=function_definition];
2224 [label="351_ if\n2224-if-352-354", method="play_TOD3(bytes32 guess)", type_label=if];
4945 [label="351_ end_if", method="play_TOD3(bytes32 guess)", type_label=end_if];
2246 [label="352_ winner_TOD3 = msg.sender;\n2246-expression_statement-353-353", method="play_TOD3(bytes32 guess)", type_label=expression_statement];
2252 [label="355_ function getReward_TOD3() payable public{\n       winner_TOD3.transfer(msg.value);\n    }\n2252-function_definition-356-358", method="getReward_TOD3()", type_label=function_definition];
2257 [label="356_ winner_TOD3.transfer(msg.value);\n2257-expression_statement-357-357", method="getReward_TOD3()", type_label=expression_statement];
2266 [label="358_ string private _symbol;\n2266-new_variable-359-359", method="", type_label=new_variable];
2271 [label="359_ address payable winner_TOD9;\n2271-new_variable-360-360", method="", type_label=new_variable];
2275 [label="360_ function play_TOD9(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD9 = msg.sender;\n        }\n    }\n2275-function_definition-361-365", method="play_TOD9(bytes32 guess)", type_label=function_definition];
2283 [label="361_ if\n2283-if-362-364", method="play_TOD9(bytes32 guess)", type_label=if];
5004 [label="361_ end_if", method="play_TOD9(bytes32 guess)", type_label=end_if];
2305 [label="362_ winner_TOD9 = msg.sender;\n2305-expression_statement-363-363", method="play_TOD9(bytes32 guess)", type_label=expression_statement];
2311 [label="365_ function getReward_TOD9() payable public{\n       winner_TOD9.transfer(msg.value);\n    }\n2311-function_definition-366-368", method="getReward_TOD9()", type_label=function_definition];
2316 [label="366_ winner_TOD9.transfer(msg.value);\n2316-expression_statement-367-367", method="getReward_TOD9()", type_label=expression_statement];
2325 [label="368_ uint8 private _decimals;\n2325-new_variable-369-369", method="", type_label=new_variable];
2344 [label="370_ _name = name;\n2344-expression_statement-371-371", method="", type_label=expression_statement];
2348 [label="371_ _symbol = symbol;\n2348-expression_statement-372-372", method="", type_label=expression_statement];
2352 [label="372_ _decimals = decimals;\n2352-expression_statement-373-373", method="", type_label=expression_statement];
2356 [label="374_ bool claimed_TOD40 = false;\n2356-new_variable-375-375", method="", type_label=new_variable];
2362 [label="375_ address payable owner_TOD40;\n2362-new_variable-376-376", method="", type_label=new_variable];
2366 [label="376_ uint256 reward_TOD40;\n2366-new_variable-377-377", method="", type_label=new_variable];
2370 [label="377_ function setReward_TOD40() public payable {\n        require (!claimed_TOD40);\n        require(msg.sender == owner_TOD40);\n        owner_TOD40.transfer(reward_TOD40);\n        reward_TOD40 = msg.value;\n    }\n2370-function_definition-378-383", method="setReward_TOD40()", type_label=function_definition];
2375 [label="378_ require (!claimed_TOD40);\n2375-expression_statement-379-379", method="setReward_TOD40()", type_label=expression_statement];
2381 [label="379_ require(msg.sender == owner_TOD40);\n2381-expression_statement-380-380", method="setReward_TOD40()", type_label=expression_statement];
2390 [label="380_ owner_TOD40.transfer(reward_TOD40);\n2390-expression_statement-381-381", method="setReward_TOD40()", type_label=expression_statement];
2397 [label="381_ reward_TOD40 = msg.value;\n2397-expression_statement-382-382", method="setReward_TOD40()", type_label=expression_statement];
2403 [label="383_ function claimReward_TOD40(uint256 submission) public {\n        require (!claimed_TOD40);\n        require(submission < 10);\n        msg.sender.transfer(reward_TOD40);\n        claimed_TOD40 = true;\n    }\n2403-function_definition-384-389", method="claimReward_TOD40(uint256 submission)", type_label=function_definition];
2411 [label="384_ require (!claimed_TOD40);\n2411-expression_statement-385-385", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2417 [label="385_ require(submission < 10);\n2417-expression_statement-386-386", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2424 [label="386_ msg.sender.transfer(reward_TOD40);\n2424-expression_statement-387-387", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2433 [label="387_ claimed_TOD40 = true;\n2433-expression_statement-388-388", method="claimReward_TOD40(uint256 submission)", type_label=expression_statement];
2438 [label="389_ function name() public view returns (string memory) {\n        return _name;\n    }\n2438-function_definition-390-392", method="name()", type_label=function_definition];
2447 [label="390_ return _name;\n2447-return-391-391", method="name()", type_label=return];
2449 [label="392_ address payable winner_TOD33;\n2449-new_variable-393-393", method="", type_label=new_variable];
2453 [label="393_ function play_TOD33(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD33 = msg.sender;\n        }\n    }\n2453-function_definition-394-398", method="play_TOD33(bytes32 guess)", type_label=function_definition];
2461 [label="394_ if\n2461-if-395-397", method="play_TOD33(bytes32 guess)", type_label=if];
5182 [label="394_ end_if", method="play_TOD33(bytes32 guess)", type_label=end_if];
2483 [label="395_ winner_TOD33 = msg.sender;\n2483-expression_statement-396-396", method="play_TOD33(bytes32 guess)", type_label=expression_statement];
2489 [label="398_ function getReward_TOD33() payable public{\n       winner_TOD33.transfer(msg.value);\n    }\n2489-function_definition-399-401", method="getReward_TOD33()", type_label=function_definition];
2494 [label="399_ winner_TOD33.transfer(msg.value);\n2494-expression_statement-400-400", method="getReward_TOD33()", type_label=expression_statement];
2503 [label="401_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n2503-function_definition-402-404", method="symbol()", type_label=function_definition];
2512 [label="402_ return _symbol;\n2512-return-403-403", method="symbol()", type_label=return];
2514 [label="404_ address payable winner_TOD27;\n2514-new_variable-405-405", method="", type_label=new_variable];
2518 [label="405_ function play_TOD27(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD27 = msg.sender;\n        }\n    }\n2518-function_definition-406-410", method="play_TOD27(bytes32 guess)", type_label=function_definition];
2526 [label="406_ if\n2526-if-407-409", method="play_TOD27(bytes32 guess)", type_label=if];
5247 [label="406_ end_if", method="play_TOD27(bytes32 guess)", type_label=end_if];
2548 [label="407_ winner_TOD27 = msg.sender;\n2548-expression_statement-408-408", method="play_TOD27(bytes32 guess)", type_label=expression_statement];
2554 [label="410_ function getReward_TOD27() payable public{\n       winner_TOD27.transfer(msg.value);\n    }\n2554-function_definition-411-413", method="getReward_TOD27()", type_label=function_definition];
2559 [label="411_ winner_TOD27.transfer(msg.value);\n2559-expression_statement-412-412", method="getReward_TOD27()", type_label=expression_statement];
2568 [label="413_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n2568-function_definition-414-416", method="decimals()", type_label=function_definition];
2577 [label="414_ return _decimals;\n2577-return-415-415", method="decimals()", type_label=return];
2579 [label="416_ address payable winner_TOD31;\n2579-new_variable-417-417", method="", type_label=new_variable];
2583 [label="417_ function play_TOD31(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD31 = msg.sender;\n        }\n    }\n2583-function_definition-418-422", method="play_TOD31(bytes32 guess)", type_label=function_definition];
2591 [label="418_ if\n2591-if-419-421", method="play_TOD31(bytes32 guess)", type_label=if];
5312 [label="418_ end_if", method="play_TOD31(bytes32 guess)", type_label=end_if];
2613 [label="419_ winner_TOD31 = msg.sender;\n2613-expression_statement-420-420", method="play_TOD31(bytes32 guess)", type_label=expression_statement];
2619 [label="422_ function getReward_TOD31() payable public{\n       winner_TOD31.transfer(msg.value);\n    }\n2619-function_definition-423-425", method="getReward_TOD31()", type_label=function_definition];
2624 [label="423_ winner_TOD31.transfer(msg.value);\n2624-expression_statement-424-424", method="getReward_TOD31()", type_label=expression_statement];
2650 [label="428_ ERC20Detailed('Aggregion Token', 'AGR', 4)\n2650-expression_statement-429-429", method="", type_label=expression_statement];
2661 [label="429_ super._mint(msg.sender, 30000000000000);\n2661-expression_statement-430-430", method="", type_label=expression_statement];
2672 [label="431_ address payable winner_TOD13;\n2672-new_variable-432-432", method="", type_label=new_variable];
2676 [label="432_ function play_TOD13(bytes32 guess) public{\n       if (keccak256(abi.encode(guess)) == keccak256(abi.encode('hello'))) {\n            winner_TOD13 = msg.sender;\n        }\n    }\n2676-function_definition-433-437", method="play_TOD13(bytes32 guess)", type_label=function_definition];
2684 [label="433_ if\n2684-if-434-436", method="play_TOD13(bytes32 guess)", type_label=if];
5405 [label="433_ end_if", method="play_TOD13(bytes32 guess)", type_label=end_if];
2706 [label="434_ winner_TOD13 = msg.sender;\n2706-expression_statement-435-435", method="play_TOD13(bytes32 guess)", type_label=expression_statement];
2712 [label="437_ function getReward_TOD13() payable public{\n       winner_TOD13.transfer(msg.value);\n    }\n2712-function_definition-438-440", method="getReward_TOD13()", type_label=function_definition];
2717 [label="438_ winner_TOD13.transfer(msg.value);\n2717-expression_statement-439-439", method="getReward_TOD13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 155  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
150 -> 2871  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2871 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 2871  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
157 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
176 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
210 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
234 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
244 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
276 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
278 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
325 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 355  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
333 -> 3054  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3054 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 3054  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
361 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
416 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
429 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
485 -> 507  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
485 -> 3206  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3206 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 3206  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
513 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
532 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
547 -> 555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 577  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
555 -> 3276  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3276 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 3276  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
583 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
618 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 648  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
626 -> 3347  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3347 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
648 -> 3347  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
654 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
691 -> 697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
716 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
738 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
800 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
803 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
817 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
864 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
915 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
934 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
962 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1026 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1051 -> 1057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1057 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1065 -> 1070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1070 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1085 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1119 -> 1128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1171 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1174 -> 1180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1180 -> 1184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1188 -> 1193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1193 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 1208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 1215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1221 -> 1229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1229 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 1242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1242 -> 1251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1272 -> 1294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1294 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1301 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1309 -> 1331  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1309 -> 4030  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4030 -> 1337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 4030  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1337 -> 1342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1351 -> 1367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1367 -> 1376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 1389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1414 -> 1422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1422 -> 1444  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1422 -> 4143  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4143 -> 1450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1444 -> 4143  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1450 -> 1455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1464 -> 1476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1476 -> 1485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1485 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1517 -> 1523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1523 -> 1527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1536 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 1551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1551 -> 1558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1564 -> 1572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 1578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1578 -> 1585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1585 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1599 -> 1611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1611 -> 1620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1620 -> 1629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1652 -> 1658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1658 -> 1662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1666 -> 1671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1671 -> 1677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1677 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 1693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1699 -> 1707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1707 -> 1713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1713 -> 1720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1720 -> 1729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1734 -> 1750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1750 -> 1759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1759 -> 1768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1784 -> 1790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1790 -> 1794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1798 -> 1803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1809 -> 1818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1818 -> 1825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1831 -> 1839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1839 -> 1845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1845 -> 1852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1852 -> 1861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1866 -> 1878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1878 -> 1885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1911 -> 1919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1919 -> 1941  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1919 -> 4640  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4640 -> 1947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1941 -> 4640  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1947 -> 1952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1971 -> 1979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1988 -> 1994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1994 -> 1998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2002 -> 2007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2007 -> 2013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2013 -> 2022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2022 -> 2029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2035 -> 2043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2043 -> 2049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2049 -> 2056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2056 -> 2065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2070 -> 2082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2093 -> 2101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2101 -> 2123  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2101 -> 4822  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4822 -> 2129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2123 -> 4822  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2129 -> 2134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2157 -> 2165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2165 -> 2187  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2165 -> 4886  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4886 -> 2193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2187 -> 4886  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2193 -> 2198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2207 -> 2212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2216 -> 2224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2224 -> 2246  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2224 -> 4945  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4945 -> 2252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2246 -> 4945  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2252 -> 2257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2266 -> 2271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2275 -> 2283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2283 -> 2305  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2283 -> 5004  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5004 -> 2311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2305 -> 5004  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2311 -> 2316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2344 -> 2348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2348 -> 2352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2356 -> 2362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2362 -> 2366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2370 -> 2375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2375 -> 2381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2381 -> 2390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2390 -> 2397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2403 -> 2411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2411 -> 2417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2417 -> 2424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2424 -> 2433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2438 -> 2447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2447 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2453 -> 2461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2461 -> 2483  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2461 -> 5182  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5182 -> 2489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2483 -> 5182  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2489 -> 2494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2503 -> 2512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2512 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2518 -> 2526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2526 -> 2548  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2526 -> 5247  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5247 -> 2554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2548 -> 5247  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2554 -> 2559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2568 -> 2577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2577 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2583 -> 2591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2591 -> 2613  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2591 -> 5312  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5312 -> 2619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2613 -> 5312  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2619 -> 2624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2676 -> 2684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2684 -> 2706  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2684 -> 5405  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5405 -> 2712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2706 -> 5405  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2712 -> 2717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
