digraph  {
13 [label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address who) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [label="4_ function allowance(address owner, address spender) external view returns (uint256);\n33-function_definition-5-5", method="allowance(address owner,address spender)", type_label=function_definition];
49 [label="5_ function transfer(address to, uint256 value) external returns (bool);\n49-function_definition-6-6", method="transfer(address to,uint256 value)", type_label=function_definition];
64 [label="6_ function approve(address spender, uint256 value) external returns (bool);\n64-function_definition-7-7", method="approve(address spender,uint256 value)", type_label=function_definition];
79 [label="7_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n79-function_definition-8-8", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
129 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n129-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
146 [label="13_ if_a == 0\n146-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
3233 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
151 [label="14_ return 0;\n151-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
153 [label="16_ uint256 c = a * b;\n153-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
161 [label="17_ assert(c / a == b);\n161-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
170 [label="18_ return c;\n170-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
172 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n172-function_definition-21-24", method="div(uint256 a,uint256 b)", type_label=function_definition];
189 [label="21_ uint256 c = a / b;\n189-new_variable-22-22", method="div(uint256 a,uint256 b)", type_label=new_variable];
197 [label="22_ return c;\n197-return-23-23", method="div(uint256 a,uint256 b)", type_label=return];
199 [label="24_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n199-function_definition-25-28", method="sub(uint256 a,uint256 b)", type_label=function_definition];
216 [label="25_ assert(b <= a);\n216-expression_statement-26-26", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
223 [label="26_ return a - b;\n223-return-27-27", method="sub(uint256 a,uint256 b)", type_label=return];
227 [label="28_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n227-function_definition-29-33", method="add(uint256 a,uint256 b)", type_label=function_definition];
244 [label="29_ uint256 c = a + b;\n244-new_variable-30-30", method="add(uint256 a,uint256 b)", type_label=new_variable];
252 [label="30_ assert(c >= a);\n252-expression_statement-31-31", method="add(uint256 a,uint256 b)", type_label=expression_statement];
259 [label="31_ return c;\n259-return-32-32", method="add(uint256 a,uint256 b)", type_label=return];
261 [label="33_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n261-function_definition-34-38", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
278 [label="34_ uint256 c = add(a,m);\n278-new_variable-35-35", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
289 [label="35_ uint256 d = sub(c,1);\n289-new_variable-36-36", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
300 [label="36_ return mul(div(d,m),m);\n300-return-37-37", method="ceil(uint256 a,uint256 m)", type_label=return];
315 [label="40_ address public owner;\n315-new_variable-41-41", method="", type_label=new_variable];
320 [label="41_ uint256 bugv_tmstmp5 = block.timestamp;\n320-new_variable-42-42", method="", type_label=new_variable];
339 [label="44_ owner = msg.sender;\n339-expression_statement-45-45", method="", type_label=expression_statement];
345 [label="46_ address winner_tmstmp11;\n345-new_variable-47-47", method="", type_label=new_variable];
349 [label="47_ function play_tmstmp11(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp11 = msg.sender;}}\n349-function_definition-48-51", method="play_tmstmp11(uint startTime)", type_label=function_definition];
357 [label="48_ uint _vtime = block.timestamp;\n357-new_variable-49-49", method="play_tmstmp11(uint startTime)", type_label=new_variable];
365 [label="49_ if_startTime + (5 * 1 days) == _vtime\n365-if-50-51", method="play_tmstmp11(uint startTime)", type_label=if];
3452 [label="49_ end_if", method="play_tmstmp11(uint startTime)", type_label=end_if];
376 [label="50_ winner_tmstmp11 = msg.sender;\n376-expression_statement-51-51", method="play_tmstmp11(uint startTime)", type_label=expression_statement];
382 [label="51_ modifier onlyOwner() {\n      require(msg.sender == owner);\n      _;\n    }\n382-expression_statement-52-55", method="", type_label=expression_statement];
385 [label="52_ require(msg.sender == owner);\n385-expression_statement-53-53", method="", type_label=expression_statement];
394 [label="53_ _;\n394-expression_statement-54-54", method="", type_label=expression_statement];
396 [label="55_ function transferOwnership(address newOwner) public onlyOwner {\n      require(newOwner != address(0));\n      emit OwnershipTransferred(owner, newOwner);\n      owner = newOwner;\n    }\n396-function_definition-56-60", method="transferOwnership(address newOwner)", type_label=function_definition];
403 [label="55_ onlyOwner\n403-expression_statement-56-56", method="transferOwnership(address newOwner)", type_label=expression_statement];
406 [label="56_ require(newOwner != address(0));\n406-expression_statement-57-57", method="transferOwnership(address newOwner)", type_label=expression_statement];
421 [label="58_ owner = newOwner;\n421-expression_statement-59-59", method="transferOwnership(address newOwner)", type_label=expression_statement];
425 [label="60_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n425-function_definition-61-63", method="bug_tmstmp1()", type_label=function_definition];
434 [label="61_ return block.timestamp >= 1546300800;\n434-return-62-62", method="bug_tmstmp1()", type_label=return];
446 [label="65_ string private _name;\n446-new_variable-66-66", method="", type_label=new_variable];
451 [label="66_ address winner_tmstmp18;\n451-new_variable-67-67", method="", type_label=new_variable];
455 [label="67_ function play_tmstmp18(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp18 = msg.sender;}}\n455-function_definition-68-70", method="play_tmstmp18(uint startTime)", type_label=function_definition];
463 [label="68_ if_startTime + (5 * 1 days) == block.timestamp\n463-if-69-70", method="play_tmstmp18(uint startTime)", type_label=if];
3550 [label="68_ end_if", method="play_tmstmp18(uint startTime)", type_label=end_if];
476 [label="69_ winner_tmstmp18 = msg.sender;\n476-expression_statement-70-70", method="play_tmstmp18(uint startTime)", type_label=expression_statement];
482 [label="70_ string private _symbol;\n482-new_variable-71-71", method="", type_label=new_variable];
487 [label="71_ function bug_tmstmp29() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n487-function_definition-72-74", method="bug_tmstmp29()", type_label=function_definition];
496 [label="72_ return block.timestamp >= 1546300800;\n496-return-73-73", method="bug_tmstmp29()", type_label=return];
502 [label="74_ uint8 private _decimals;\n502-new_variable-75-75", method="", type_label=new_variable];
521 [label="76_ _name = name;\n521-expression_statement-77-77", method="", type_label=expression_statement];
525 [label="77_ _symbol = symbol;\n525-expression_statement-78-78", method="", type_label=expression_statement];
529 [label="78_ _decimals = decimals;\n529-expression_statement-79-79", method="", type_label=expression_statement];
533 [label="80_ address winner_tmstmp2;\n533-new_variable-81-81", method="", type_label=new_variable];
537 [label="81_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n537-function_definition-82-84", method="play_tmstmp2(uint startTime)", type_label=function_definition];
545 [label="82_ if_startTime + (5 * 1 days) == block.timestamp\n545-if-83-84", method="play_tmstmp2(uint startTime)", type_label=if];
3632 [label="82_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
558 [label="83_ winner_tmstmp2 = msg.sender;\n558-expression_statement-84-84", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
564 [label="84_ function name() public view returns(string memory) {\n    return _name;\n  }\n564-function_definition-85-87", method="name()", type_label=function_definition];
573 [label="85_ return _name;\n573-return-86-86", method="name()", type_label=return];
575 [label="87_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n575-function_definition-88-90", method="bug_tmstmp17()", type_label=function_definition];
584 [label="88_ return block.timestamp >= 1546300800;\n584-return-89-89", method="bug_tmstmp17()", type_label=return];
590 [label="90_ function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n590-function_definition-91-93", method="symbol()", type_label=function_definition];
599 [label="91_ return _symbol;\n599-return-92-92", method="symbol()", type_label=return];
601 [label="93_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n601-function_definition-94-96", method="bug_tmstmp37()", type_label=function_definition];
610 [label="94_ return block.timestamp >= 1546300800;\n610-return-95-95", method="bug_tmstmp37()", type_label=return];
616 [label="96_ function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n616-function_definition-97-99", method="decimals()", type_label=function_definition];
625 [label="97_ return _decimals;\n625-return-98-98", method="decimals()", type_label=return];
627 [label="99_ address winner_tmstmp3;\n627-new_variable-100-100", method="", type_label=new_variable];
631 [label="100_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n631-function_definition-101-104", method="play_tmstmp3(uint startTime)", type_label=function_definition];
639 [label="101_ uint _vtime = block.timestamp;\n639-new_variable-102-102", method="play_tmstmp3(uint startTime)", type_label=new_variable];
647 [label="102_ if_startTime + (5 * 1 days) == _vtime\n647-if-103-104", method="play_tmstmp3(uint startTime)", type_label=if];
3734 [label="102_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
658 [label="103_ winner_tmstmp3 = msg.sender;\n658-expression_statement-104-104", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
678 [label="107_ address winner_tmstmp6;\n678-new_variable-108-108", method="", type_label=new_variable];
682 [label="108_ function play_tmstmp6(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp6 = msg.sender;}}\n682-function_definition-109-111", method="play_tmstmp6(uint startTime)", type_label=function_definition];
690 [label="109_ if_startTime + (5 * 1 days) == block.timestamp\n690-if-110-111", method="play_tmstmp6(uint startTime)", type_label=if];
3777 [label="109_ end_if", method="play_tmstmp6(uint startTime)", type_label=end_if];
703 [label="110_ winner_tmstmp6 = msg.sender;\n703-expression_statement-111-111", method="play_tmstmp6(uint startTime)", type_label=expression_statement];
709 [label="111_ mapping (address => uint256) private _balances;\n709-new_variable-112-112", method="", type_label=new_variable];
716 [label="112_ function bug_tmstmp16 () public payable {\n	uint pastBlockTime_tmstmp16;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp16);  \n        pastBlockTime_tmstmp16 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n716-function_definition-113-121", method="bug_tmstmp16()", type_label=function_definition];
721 [label="113_ uint pastBlockTime_tmstmp16;\n721-new_variable-114-114", method="bug_tmstmp16()", type_label=new_variable];
726 [label="114_ require(msg.value == 10 ether);\n726-expression_statement-115-115", method="bug_tmstmp16()", type_label=expression_statement];
736 [label="115_ require(now != pastBlockTime_tmstmp16);\n736-expression_statement-116-116", method="bug_tmstmp16()", type_label=expression_statement];
743 [label="116_ pastBlockTime_tmstmp16 = now;\n743-expression_statement-117-117", method="bug_tmstmp16()", type_label=expression_statement];
747 [label="117_ if_now % 15 == 0\n747-if-118-120", method="bug_tmstmp16()", type_label=if];
3834 [label="117_ end_if", method="bug_tmstmp16()", type_label=end_if];
754 [label="118_ msg.sender.transfer(address(this).balance);\n754-expression_statement-119-119", method="bug_tmstmp16()", type_label=expression_statement];
767 [label="121_ mapping (address => mapping (address => uint256)) private _allowed;\n767-new_variable-122-122", method="", type_label=new_variable];
776 [label="122_ function bug_tmstmp24 () public payable {\n	uint pastBlockTime_tmstmp24;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp24);  \n        pastBlockTime_tmstmp24 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n776-function_definition-123-131", method="bug_tmstmp24()", type_label=function_definition];
781 [label="123_ uint pastBlockTime_tmstmp24;\n781-new_variable-124-124", method="bug_tmstmp24()", type_label=new_variable];
786 [label="124_ require(msg.value == 10 ether);\n786-expression_statement-125-125", method="bug_tmstmp24()", type_label=expression_statement];
796 [label="125_ require(now != pastBlockTime_tmstmp24);\n796-expression_statement-126-126", method="bug_tmstmp24()", type_label=expression_statement];
803 [label="126_ pastBlockTime_tmstmp24 = now;\n803-expression_statement-127-127", method="bug_tmstmp24()", type_label=expression_statement];
807 [label="127_ if_now % 15 == 0\n807-if-128-130", method="bug_tmstmp24()", type_label=if];
3894 [label="127_ end_if", method="bug_tmstmp24()", type_label=end_if];
814 [label="128_ msg.sender.transfer(address(this).balance);\n814-expression_statement-129-129", method="bug_tmstmp24()", type_label=expression_statement];
827 [label="131_ string constant tokenName = \"Dan Pan Coin\";\n827-new_variable-132-132", method="", type_label=new_variable];
833 [label="132_ function bug_tmstmp5() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n833-function_definition-133-135", method="bug_tmstmp5()", type_label=function_definition];
842 [label="133_ return block.timestamp >= 1546300800;\n842-return-134-134", method="bug_tmstmp5()", type_label=return];
848 [label="135_ string constant tokenSymbol = \"DPC\";\n848-new_variable-136-136", method="", type_label=new_variable];
854 [label="136_ address winner_tmstmp15;\n854-new_variable-137-137", method="", type_label=new_variable];
858 [label="137_ function play_tmstmp15(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp15 = msg.sender;}}\n858-function_definition-138-141", method="play_tmstmp15(uint startTime)", type_label=function_definition];
866 [label="138_ uint _vtime = block.timestamp;\n866-new_variable-139-139", method="play_tmstmp15(uint startTime)", type_label=new_variable];
874 [label="139_ if_startTime + (5 * 1 days) == _vtime\n874-if-140-141", method="play_tmstmp15(uint startTime)", type_label=if];
3961 [label="139_ end_if", method="play_tmstmp15(uint startTime)", type_label=end_if];
885 [label="140_ winner_tmstmp15 = msg.sender;\n885-expression_statement-141-141", method="play_tmstmp15(uint startTime)", type_label=expression_statement];
891 [label="141_ uint8  constant tokenDecimals = 2;\n891-new_variable-142-142", method="", type_label=new_variable];
896 [label="142_ function bug_tmstmp28 () public payable {\n	uint pastBlockTime_tmstmp28;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp28);  \n        pastBlockTime_tmstmp28 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n896-function_definition-143-151", method="bug_tmstmp28()", type_label=function_definition];
901 [label="143_ uint pastBlockTime_tmstmp28;\n901-new_variable-144-144", method="bug_tmstmp28()", type_label=new_variable];
906 [label="144_ require(msg.value == 10 ether);\n906-expression_statement-145-145", method="bug_tmstmp28()", type_label=expression_statement];
916 [label="145_ require(now != pastBlockTime_tmstmp28);\n916-expression_statement-146-146", method="bug_tmstmp28()", type_label=expression_statement];
923 [label="146_ pastBlockTime_tmstmp28 = now;\n923-expression_statement-147-147", method="bug_tmstmp28()", type_label=expression_statement];
927 [label="147_ if_now % 15 == 0\n927-if-148-150", method="bug_tmstmp28()", type_label=if];
4014 [label="147_ end_if", method="bug_tmstmp28()", type_label=end_if];
934 [label="148_ msg.sender.transfer(address(this).balance);\n934-expression_statement-149-149", method="bug_tmstmp28()", type_label=expression_statement];
947 [label="151_ uint256 _totalSupply = 10000000000;\n947-new_variable-152-152", method="", type_label=new_variable];
952 [label="152_ address winner_tmstmp34;\n952-new_variable-153-153", method="", type_label=new_variable];
956 [label="153_ function play_tmstmp34(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp34 = msg.sender;}}\n956-function_definition-154-156", method="play_tmstmp34(uint startTime)", type_label=function_definition];
964 [label="154_ if_startTime + (5 * 1 days) == block.timestamp\n964-if-155-156", method="play_tmstmp34(uint startTime)", type_label=if];
4051 [label="154_ end_if", method="play_tmstmp34(uint startTime)", type_label=end_if];
977 [label="155_ winner_tmstmp34 = msg.sender;\n977-expression_statement-156-156", method="play_tmstmp34(uint startTime)", type_label=expression_statement];
983 [label="156_ uint256 public basePercent = 100;\n983-new_variable-157-157", method="", type_label=new_variable];
989 [label="157_ function bug_tmstmp21() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n989-function_definition-158-160", method="bug_tmstmp21()", type_label=function_definition];
998 [label="158_ return block.timestamp >= 1546300800;\n998-return-159-159", method="bug_tmstmp21()", type_label=return];
1004 [label="160_ uint256 public dpPercent = 5;\n1004-new_variable-161-161", method="", type_label=new_variable];
1010 [label="161_ address winner_tmstmp10;\n1010-new_variable-162-162", method="", type_label=new_variable];
1014 [label="162_ function play_tmstmp10(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp10 = msg.sender;}}\n1014-function_definition-163-165", method="play_tmstmp10(uint startTime)", type_label=function_definition];
1022 [label="163_ if_startTime + (5 * 1 days) == block.timestamp\n1022-if-164-165", method="play_tmstmp10(uint startTime)", type_label=if];
4109 [label="163_ end_if", method="play_tmstmp10(uint startTime)", type_label=end_if];
1035 [label="164_ winner_tmstmp10 = msg.sender;\n1035-expression_statement-165-165", method="play_tmstmp10(uint startTime)", type_label=expression_statement];
1041 [label="165_ address public DanPanAddress = msg.sender;\n1041-new_variable-166-166", method="", type_label=new_variable];
1049 [label="166_ uint256 bugv_tmstmp1 = block.timestamp;\n1049-new_variable-167-167", method="", type_label=new_variable];
1066 [label="168_ uint256 bugv_tmstmp2 = block.timestamp;\n1066-new_variable-169-169", method="", type_label=new_variable];
1083 [label="170_ uint256 bugv_tmstmp3 = block.timestamp;\n1083-new_variable-171-171", method="", type_label=new_variable];
1100 [label="172_ uint256 bugv_tmstmp4 = block.timestamp;\n1100-new_variable-173-173", method="", type_label=new_variable];
1117 [label="174_ address winner_tmstmp22;\n1117-new_variable-175-175", method="", type_label=new_variable];
1121 [label="175_ function play_tmstmp22(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp22 = msg.sender;}}\n1121-function_definition-176-178", method="play_tmstmp22(uint startTime)", type_label=function_definition];
1129 [label="176_ if_startTime + (5 * 1 days) == block.timestamp\n1129-if-177-178", method="play_tmstmp22(uint startTime)", type_label=if];
4216 [label="176_ end_if", method="play_tmstmp22(uint startTime)", type_label=end_if];
1142 [label="177_ winner_tmstmp22 = msg.sender;\n1142-expression_statement-178-178", method="play_tmstmp22(uint startTime)", type_label=expression_statement];
1148 [label="178_ mapping(address => bool) public whitelistFrom;\n1148-new_variable-179-179", method="", type_label=new_variable];
1155 [label="179_ function bug_tmstmp12 () public payable {\n	uint pastBlockTime_tmstmp12;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp12);  \n        pastBlockTime_tmstmp12 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1155-function_definition-180-188", method="bug_tmstmp12()", type_label=function_definition];
1160 [label="180_ uint pastBlockTime_tmstmp12;\n1160-new_variable-181-181", method="bug_tmstmp12()", type_label=new_variable];
1165 [label="181_ require(msg.value == 10 ether);\n1165-expression_statement-182-182", method="bug_tmstmp12()", type_label=expression_statement];
1175 [label="182_ require(now != pastBlockTime_tmstmp12);\n1175-expression_statement-183-183", method="bug_tmstmp12()", type_label=expression_statement];
1182 [label="183_ pastBlockTime_tmstmp12 = now;\n1182-expression_statement-184-184", method="bug_tmstmp12()", type_label=expression_statement];
1186 [label="184_ if_now % 15 == 0\n1186-if-185-187", method="bug_tmstmp12()", type_label=if];
4273 [label="184_ end_if", method="bug_tmstmp12()", type_label=end_if];
1193 [label="185_ msg.sender.transfer(address(this).balance);\n1193-expression_statement-186-186", method="bug_tmstmp12()", type_label=expression_statement];
1206 [label="188_ mapping(address => bool) public whitelistTo;\n1206-new_variable-189-189", method="", type_label=new_variable];
1214 [label="189_ ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\n1214-expression_statement-190-190", method="", type_label=expression_statement];
1223 [label="190_ _mint(msg.sender, _totalSupply);\n1223-expression_statement-191-191", method="", type_label=expression_statement];
1232 [label="192_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1232-function_definition-193-195", method="bug_tmstmp9()", type_label=function_definition];
1241 [label="193_ return block.timestamp >= 1546300800;\n1241-return-194-194", method="bug_tmstmp9()", type_label=return];
1247 [label="195_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n1247-function_definition-196-198", method="totalSupply()", type_label=function_definition];
1256 [label="196_ return _totalSupply;\n1256-return-197-197", method="totalSupply()", type_label=return];
1258 [label="198_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1258-function_definition-199-201", method="bug_tmstmp25()", type_label=function_definition];
1267 [label="199_ return block.timestamp >= 1546300800;\n1267-return-200-200", method="bug_tmstmp25()", type_label=return];
1273 [label="201_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n1273-function_definition-202-204", method="balanceOf(address owner)", type_label=function_definition];
1286 [label="202_ return _balances[owner];\n1286-return-203-203", method="balanceOf(address owner)", type_label=return];
1290 [label="204_ address winner_tmstmp19;\n1290-new_variable-205-205", method="", type_label=new_variable];
1294 [label="205_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n1294-function_definition-206-209", method="play_tmstmp19(uint startTime)", type_label=function_definition];
1302 [label="206_ uint _vtime = block.timestamp;\n1302-new_variable-207-207", method="play_tmstmp19(uint startTime)", type_label=new_variable];
1310 [label="207_ if_startTime + (5 * 1 days) == _vtime\n1310-if-208-209", method="play_tmstmp19(uint startTime)", type_label=if];
4397 [label="207_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
1321 [label="208_ winner_tmstmp19 = msg.sender;\n1321-expression_statement-209-209", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
1327 [label="209_ function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n1327-function_definition-210-212", method="allowance(address owner,address spender)", type_label=function_definition];
1344 [label="210_ return _allowed[owner][spender];\n1344-return-211-211", method="allowance(address owner,address spender)", type_label=return];
1350 [label="212_ address winner_tmstmp26;\n1350-new_variable-213-213", method="", type_label=new_variable];
1354 [label="213_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n1354-function_definition-214-216", method="play_tmstmp26(uint startTime)", type_label=function_definition];
1362 [label="214_ if_startTime + (5 * 1 days) == block.timestamp\n1362-if-215-216", method="play_tmstmp26(uint startTime)", type_label=if];
4449 [label="214_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
1375 [label="215_ winner_tmstmp26 = msg.sender;\n1375-expression_statement-216-216", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
1381 [label="216_ function findOnePercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 onePercent = roundValue.mul(basePercent).div(10000);\n    return onePercent;\n  }\n1381-function_definition-217-221", method="findOnePercent(uint256 value)", type_label=function_definition];
1394 [label="217_ uint256 roundValue = value.ceil(basePercent);\n1394-new_variable-218-218", method="findOnePercent(uint256 value)", type_label=new_variable];
1405 [label="218_ uint256 onePercent = roundValue.mul(basePercent).div(10000);\n1405-new_variable-219-219", method="findOnePercent(uint256 value)", type_label=new_variable];
1421 [label="219_ return onePercent;\n1421-return-220-220", method="findOnePercent(uint256 value)", type_label=return];
1423 [label="221_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1423-function_definition-222-230", method="bug_tmstmp20()", type_label=function_definition];
1428 [label="222_ uint pastBlockTime_tmstmp20;\n1428-new_variable-223-223", method="bug_tmstmp20()", type_label=new_variable];
1433 [label="223_ require(msg.value == 10 ether);\n1433-expression_statement-224-224", method="bug_tmstmp20()", type_label=expression_statement];
1443 [label="224_ require(now != pastBlockTime_tmstmp20);\n1443-expression_statement-225-225", method="bug_tmstmp20()", type_label=expression_statement];
1450 [label="225_ pastBlockTime_tmstmp20 = now;\n1450-expression_statement-226-226", method="bug_tmstmp20()", type_label=expression_statement];
1454 [label="226_ if_now % 15 == 0\n1454-if-227-229", method="bug_tmstmp20()", type_label=if];
4541 [label="226_ end_if", method="bug_tmstmp20()", type_label=end_if];
1461 [label="227_ msg.sender.transfer(address(this).balance);\n1461-expression_statement-228-228", method="bug_tmstmp20()", type_label=expression_statement];
1474 [label="230_ function findDPPercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);\n    return DPPercent;\n  }\n1474-function_definition-231-235", method="findDPPercent(uint256 value)", type_label=function_definition];
1487 [label="231_ uint256 roundValue = value.ceil(basePercent);\n1487-new_variable-232-232", method="findDPPercent(uint256 value)", type_label=new_variable];
1498 [label="232_ uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);\n1498-new_variable-233-233", method="findDPPercent(uint256 value)", type_label=new_variable];
1519 [label="233_ return DPPercent;\n1519-return-234-234", method="findDPPercent(uint256 value)", type_label=return];
1521 [label="235_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1521-function_definition-236-244", method="bug_tmstmp32()", type_label=function_definition];
1526 [label="236_ uint pastBlockTime_tmstmp32;\n1526-new_variable-237-237", method="bug_tmstmp32()", type_label=new_variable];
1531 [label="237_ require(msg.value == 10 ether);\n1531-expression_statement-238-238", method="bug_tmstmp32()", type_label=expression_statement];
1541 [label="238_ require(now != pastBlockTime_tmstmp32);\n1541-expression_statement-239-239", method="bug_tmstmp32()", type_label=expression_statement];
1548 [label="239_ pastBlockTime_tmstmp32 = now;\n1548-expression_statement-240-240", method="bug_tmstmp32()", type_label=expression_statement];
1552 [label="240_ if_now % 15 == 0\n1552-if-241-243", method="bug_tmstmp32()", type_label=if];
4639 [label="240_ end_if", method="bug_tmstmp32()", type_label=end_if];
1559 [label="241_ msg.sender.transfer(address(this).balance);\n1559-expression_statement-242-242", method="bug_tmstmp32()", type_label=expression_statement];
1572 [label="244_ function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n        if (value == 0) {\n            emit Transfer(msg.sender, to, 0);\n            return true;\n        }\n        uint256 tokensToTransfer = value;\n        uint256 tokensToBurn = 0;\n        uint256 tokensToDanPan = 0;\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        if (!_isWhitelisted(msg.sender, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(msg.sender, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n            emit Transfer(msg.sender, DanPanAddress, tokensToDanPan);\n        }\n        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n        emit Transfer(msg.sender, to, tokensToTransfer);\n    return true;\n  }\n1572-function_definition-245-269", method="transfer(address to,uint256 value)", type_label=function_definition];
1588 [label="245_ require(value <= _balances[msg.sender]);\n1588-expression_statement-246-246", method="transfer(address to,uint256 value)", type_label=expression_statement];
1599 [label="246_ require(to != address(0));\n1599-expression_statement-247-247", method="transfer(address to,uint256 value)", type_label=expression_statement];
1608 [label="247_ if_value == 0\n1608-if-248-251", method="transfer(address to,uint256 value)", type_label=if];
4695 [label="247_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1623 [label="249_ return true;\n1623-return-250-250", method="transfer(address to,uint256 value)", type_label=return];
1626 [label="251_ uint256 tokensToTransfer = value;\n1626-new_variable-252-252", method="transfer(address to,uint256 value)", type_label=new_variable];
1632 [label="252_ uint256 tokensToBurn = 0;\n1632-new_variable-253-253", method="transfer(address to,uint256 value)", type_label=new_variable];
1638 [label="253_ uint256 tokensToDanPan = 0;\n1638-new_variable-254-254", method="transfer(address to,uint256 value)", type_label=new_variable];
1644 [label="254_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n1644-expression_statement-255-255", method="transfer(address to,uint256 value)", type_label=expression_statement];
1661 [label="255_ if\n1661-if-256-264", method="transfer(address to,uint256 value)", type_label=if];
4748 [label="255_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1672 [label="256_ tokensToBurn = findOnePercent(value);\n1672-expression_statement-257-257", method="transfer(address to,uint256 value)", type_label=expression_statement];
1679 [label="257_ tokensToDanPan = findDPPercent(value);\n1679-expression_statement-258-258", method="transfer(address to,uint256 value)", type_label=expression_statement];
1686 [label="258_ tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n1686-expression_statement-259-259", method="transfer(address to,uint256 value)", type_label=expression_statement];
1700 [label="259_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1700-expression_statement-260-260", method="transfer(address to,uint256 value)", type_label=expression_statement];
1721 [label="261_ _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n1721-expression_statement-262-262", method="transfer(address to,uint256 value)", type_label=expression_statement];
1744 [label="264_ assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n1744-expression_statement-265-265", method="transfer(address to,uint256 value)", type_label=expression_statement];
1761 [label="265_ _balances[to] = _balances[to].add(tokensToTransfer);\n1761-expression_statement-266-266", method="transfer(address to,uint256 value)", type_label=expression_statement];
1784 [label="267_ return true;\n1784-return-268-268", method="transfer(address to,uint256 value)", type_label=return];
1787 [label="269_ address winner_tmstmp38;\n1787-new_variable-270-270", method="", type_label=new_variable];
1791 [label="270_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n1791-function_definition-271-273", method="play_tmstmp38(uint startTime)", type_label=function_definition];
1799 [label="271_ if_startTime + (5 * 1 days) == block.timestamp\n1799-if-272-273", method="play_tmstmp38(uint startTime)", type_label=if];
4886 [label="271_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
1812 [label="272_ winner_tmstmp38 = msg.sender;\n1812-expression_statement-273-273", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
1818 [label="273_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n1818-function_definition-274-278", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
1832 [label="274_ for(i < receivers.length;;i++)\n1832-for-275-277", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
4919 [label="274_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
1845 [label="274_ i++\n1845-expression_statement-275-275", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1848 [label="275_ transfer(receivers[i], amounts[i]);\n1848-expression_statement-276-276", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1859 [label="278_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1859-function_definition-279-287", method="bug_tmstmp4()", type_label=function_definition];
1864 [label="279_ uint pastBlockTime_tmstmp4;\n1864-new_variable-280-280", method="bug_tmstmp4()", type_label=new_variable];
1869 [label="280_ require(msg.value == 10 ether);\n1869-expression_statement-281-281", method="bug_tmstmp4()", type_label=expression_statement];
1879 [label="281_ require(now != pastBlockTime_tmstmp4);\n1879-expression_statement-282-282", method="bug_tmstmp4()", type_label=expression_statement];
1886 [label="282_ pastBlockTime_tmstmp4 = now;\n1886-expression_statement-283-283", method="bug_tmstmp4()", type_label=expression_statement];
1890 [label="283_ if_now % 15 == 0\n1890-if-284-286", method="bug_tmstmp4()", type_label=if];
4977 [label="283_ end_if", method="bug_tmstmp4()", type_label=end_if];
1897 [label="284_ msg.sender.transfer(address(this).balance);\n1897-expression_statement-285-285", method="bug_tmstmp4()", type_label=expression_statement];
1910 [label="287_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n1910-function_definition-288-293", method="approve(address spender,uint256 value)", type_label=function_definition];
1926 [label="288_ require(spender != address(0));\n1926-expression_statement-289-289", method="approve(address spender,uint256 value)", type_label=expression_statement];
1935 [label="289_ _allowed[msg.sender][spender] = value;\n1935-expression_statement-290-290", method="approve(address spender,uint256 value)", type_label=expression_statement];
1955 [label="291_ return true;\n1955-return-292-292", method="approve(address spender,uint256 value)", type_label=return];
1958 [label="293_ address winner_tmstmp7;\n1958-new_variable-294-294", method="", type_label=new_variable];
1962 [label="294_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n1962-function_definition-295-298", method="play_tmstmp7(uint startTime)", type_label=function_definition];
1970 [label="295_ uint _vtime = block.timestamp;\n1970-new_variable-296-296", method="play_tmstmp7(uint startTime)", type_label=new_variable];
1978 [label="296_ if_startTime + (5 * 1 days) == _vtime\n1978-if-297-298", method="play_tmstmp7(uint startTime)", type_label=if];
5065 [label="296_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
1989 [label="297_ winner_tmstmp7 = msg.sender;\n1989-expression_statement-298-298", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
1995 [label="298_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n        if (value == 0) {\n            emit Transfer(from, to, 0);\n            return true;\n        }\n        uint256 tokensToTransfer = value;\n        uint256 tokensToBurn = 0;\n        uint256 tokensToDanPan = 0;\n        _balances[from] = _balances[from].sub(value);\n        if (!_isWhitelisted(from, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(from, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n           emit Transfer(from, DanPanAddress, tokensToDanPan);\n        }\n        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n	_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, tokensToTransfer);\n    return true;\n  }\n1995-function_definition-299-325", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
2015 [label="299_ require(value <= _balances[from]);\n2015-expression_statement-300-300", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2024 [label="300_ require(value <= _allowed[from][msg.sender]);\n2024-expression_statement-301-301", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2037 [label="301_ require(to != address(0));\n2037-expression_statement-302-302", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2046 [label="302_ if_value == 0\n2046-if-303-306", method="transferFrom(address from,address to,uint256 value)", type_label=if];
5133 [label="302_ end_if", method="transferFrom(address from,address to,uint256 value)", type_label=end_if];
2059 [label="304_ return true;\n2059-return-305-305", method="transferFrom(address from,address to,uint256 value)", type_label=return];
2062 [label="306_ uint256 tokensToTransfer = value;\n2062-new_variable-307-307", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
2068 [label="307_ uint256 tokensToBurn = 0;\n2068-new_variable-308-308", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
2074 [label="308_ uint256 tokensToDanPan = 0;\n2074-new_variable-309-309", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
2080 [label="309_ _balances[from] = _balances[from].sub(value);\n2080-expression_statement-310-310", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2093 [label="310_ if\n2093-if-311-319", method="transferFrom(address from,address to,uint256 value)", type_label=if];
5180 [label="310_ end_if", method="transferFrom(address from,address to,uint256 value)", type_label=end_if];
2102 [label="311_ tokensToBurn = findOnePercent(value);\n2102-expression_statement-312-312", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2109 [label="312_ tokensToDanPan = findDPPercent(value);\n2109-expression_statement-313-313", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2116 [label="313_ tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n2116-expression_statement-314-314", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2130 [label="314_ _totalSupply = _totalSupply.sub(tokensToBurn);\n2130-expression_statement-315-315", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2149 [label="316_ _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n2149-expression_statement-317-317", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2170 [label="319_ assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n2170-expression_statement-320-320", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2187 [label="320_ _balances[to] = _balances[to].add(tokensToTransfer);\n2187-expression_statement-321-321", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2200 [label="321_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n2200-expression_statement-322-322", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
2229 [label="323_ return true;\n2229-return-324-324", method="transferFrom(address from,address to,uint256 value)", type_label=return];
2232 [label="325_ address winner_tmstmp23;\n2232-new_variable-326-326", method="", type_label=new_variable];
2236 [label="326_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n2236-function_definition-327-330", method="play_tmstmp23(uint startTime)", type_label=function_definition];
2244 [label="327_ uint _vtime = block.timestamp;\n2244-new_variable-328-328", method="play_tmstmp23(uint startTime)", type_label=new_variable];
2252 [label="328_ if_startTime + (5 * 1 days) == _vtime\n2252-if-329-330", method="play_tmstmp23(uint startTime)", type_label=if];
5339 [label="328_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
2263 [label="329_ winner_tmstmp23 = msg.sender;\n2263-expression_statement-330-330", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
2269 [label="330_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n2269-function_definition-331-336", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
2285 [label="331_ require(spender != address(0));\n2285-expression_statement-332-332", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
2294 [label="332_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n2294-expression_statement-333-333", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
2332 [label="334_ return true;\n2332-return-335-335", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
2335 [label="336_ address winner_tmstmp14;\n2335-new_variable-337-337", method="", type_label=new_variable];
2339 [label="337_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n2339-function_definition-338-340", method="play_tmstmp14(uint startTime)", type_label=function_definition];
2347 [label="338_ if_startTime + (5 * 1 days) == block.timestamp\n2347-if-339-340", method="play_tmstmp14(uint startTime)", type_label=if];
5434 [label="338_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
2360 [label="339_ winner_tmstmp14 = msg.sender;\n2360-expression_statement-340-340", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
2366 [label="340_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n2366-function_definition-341-346", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
2382 [label="341_ require(spender != address(0));\n2382-expression_statement-342-342", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2391 [label="342_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n2391-expression_statement-343-343", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2429 [label="344_ return true;\n2429-return-345-345", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
2432 [label="346_ address winner_tmstmp30;\n2432-new_variable-347-347", method="", type_label=new_variable];
2436 [label="347_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n2436-function_definition-348-350", method="play_tmstmp30(uint startTime)", type_label=function_definition];
2444 [label="348_ if_startTime + (5 * 1 days) == block.timestamp\n2444-if-349-350", method="play_tmstmp30(uint startTime)", type_label=if];
5531 [label="348_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
2457 [label="349_ winner_tmstmp30 = msg.sender;\n2457-expression_statement-350-350", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
2463 [label="350_ function _mint(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n2463-function_definition-351-355", method="_mint(address account,uint256 amount)", type_label=function_definition];
2475 [label="351_ require(amount != 0);\n2475-expression_statement-352-352", method="_mint(address account,uint256 amount)", type_label=expression_statement];
2482 [label="352_ _balances[account] = _balances[account].add(amount);\n2482-expression_statement-353-353", method="_mint(address account,uint256 amount)", type_label=expression_statement];
2505 [label="355_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n2505-function_definition-356-364", method="bug_tmstmp8()", type_label=function_definition];
2510 [label="356_ uint pastBlockTime_tmstmp8;\n2510-new_variable-357-357", method="bug_tmstmp8()", type_label=new_variable];
2515 [label="357_ require(msg.value == 10 ether);\n2515-expression_statement-358-358", method="bug_tmstmp8()", type_label=expression_statement];
2525 [label="358_ require(now != pastBlockTime_tmstmp8);\n2525-expression_statement-359-359", method="bug_tmstmp8()", type_label=expression_statement];
2532 [label="359_ pastBlockTime_tmstmp8 = now;\n2532-expression_statement-360-360", method="bug_tmstmp8()", type_label=expression_statement];
2536 [label="360_ if_now % 15 == 0\n2536-if-361-363", method="bug_tmstmp8()", type_label=if];
5623 [label="360_ end_if", method="bug_tmstmp8()", type_label=end_if];
2543 [label="361_ msg.sender.transfer(address(this).balance);\n2543-expression_statement-362-362", method="bug_tmstmp8()", type_label=expression_statement];
2556 [label="364_ function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n2556-function_definition-365-367", method="burn(uint256 amount)", type_label=function_definition];
2564 [label="365_ _burn(msg.sender, amount);\n2564-expression_statement-366-366", method="burn(uint256 amount)", type_label=expression_statement];
2573 [label="367_ address winner_tmstmp39;\n2573-new_variable-368-368", method="", type_label=new_variable];
2577 [label="368_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n2577-function_definition-369-372", method="play_tmstmp39(uint startTime)", type_label=function_definition];
2585 [label="369_ uint _vtime = block.timestamp;\n2585-new_variable-370-370", method="play_tmstmp39(uint startTime)", type_label=new_variable];
2593 [label="370_ if_startTime + (5 * 1 days) == _vtime\n2593-if-371-372", method="play_tmstmp39(uint startTime)", type_label=if];
5680 [label="370_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
2604 [label="371_ winner_tmstmp39 = msg.sender;\n2604-expression_statement-372-372", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
2610 [label="372_ function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n2610-function_definition-373-379", method="_burn(address account,uint256 amount)", type_label=function_definition];
2622 [label="373_ require(amount != 0);\n2622-expression_statement-374-374", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2629 [label="374_ require(amount <= _balances[account]);\n2629-expression_statement-375-375", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2638 [label="375_ _totalSupply = _totalSupply.sub(amount);\n2638-expression_statement-376-376", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2647 [label="376_ _balances[account] = _balances[account].sub(amount);\n2647-expression_statement-377-377", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2670 [label="379_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n2670-function_definition-380-388", method="bug_tmstmp36()", type_label=function_definition];
2675 [label="380_ uint pastBlockTime_tmstmp36;\n2675-new_variable-381-381", method="bug_tmstmp36()", type_label=new_variable];
2680 [label="381_ require(msg.value == 10 ether);\n2680-expression_statement-382-382", method="bug_tmstmp36()", type_label=expression_statement];
2690 [label="382_ require(now != pastBlockTime_tmstmp36);\n2690-expression_statement-383-383", method="bug_tmstmp36()", type_label=expression_statement];
2697 [label="383_ pastBlockTime_tmstmp36 = now;\n2697-expression_statement-384-384", method="bug_tmstmp36()", type_label=expression_statement];
2701 [label="384_ if_now % 15 == 0\n2701-if-385-387", method="bug_tmstmp36()", type_label=if];
5788 [label="384_ end_if", method="bug_tmstmp36()", type_label=end_if];
2708 [label="385_ msg.sender.transfer(address(this).balance);\n2708-expression_statement-386-386", method="bug_tmstmp36()", type_label=expression_statement];
2721 [label="388_ function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }\n2721-function_definition-389-393", method="burnFrom(address account,uint256 amount)", type_label=function_definition];
2733 [label="389_ require(amount <= _allowed[account][msg.sender]);\n2733-expression_statement-390-390", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2746 [label="390_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n2746-expression_statement-391-391", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2767 [label="391_ _burn(account, amount);\n2767-expression_statement-392-392", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2774 [label="393_ address winner_tmstmp35;\n2774-new_variable-394-394", method="", type_label=new_variable];
2778 [label="394_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n2778-function_definition-395-398", method="play_tmstmp35(uint startTime)", type_label=function_definition];
2786 [label="395_ uint _vtime = block.timestamp;\n2786-new_variable-396-396", method="play_tmstmp35(uint startTime)", type_label=new_variable];
2794 [label="396_ if_startTime + (5 * 1 days) == _vtime\n2794-if-397-398", method="play_tmstmp35(uint startTime)", type_label=if];
5881 [label="396_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
2805 [label="397_ winner_tmstmp35 = msg.sender;\n2805-expression_statement-398-398", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
2811 [label="398_ function NewDanPanAddress(address newDanPanaddress) external onlyOwner {\n    require(newDanPanaddress != address(0));\n      emit DanPanAddressChanged(DanPanAddress, newDanPanaddress);\n      DanPanAddress = newDanPanaddress;\n  }\n2811-function_definition-399-403", method="NewDanPanAddress(address newDanPanaddress)", type_label=function_definition];
2818 [label="398_ onlyOwner\n2818-expression_statement-399-399", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2821 [label="399_ require(newDanPanaddress != address(0));\n2821-expression_statement-400-400", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2836 [label="401_ DanPanAddress = newDanPanaddress;\n2836-expression_statement-402-402", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2840 [label="403_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n2840-function_definition-404-412", method="bug_tmstmp40()", type_label=function_definition];
2845 [label="404_ uint pastBlockTime_tmstmp40;\n2845-new_variable-405-405", method="bug_tmstmp40()", type_label=new_variable];
2850 [label="405_ require(msg.value == 10 ether);\n2850-expression_statement-406-406", method="bug_tmstmp40()", type_label=expression_statement];
2860 [label="406_ require(now != pastBlockTime_tmstmp40);\n2860-expression_statement-407-407", method="bug_tmstmp40()", type_label=expression_statement];
2867 [label="407_ pastBlockTime_tmstmp40 = now;\n2867-expression_statement-408-408", method="bug_tmstmp40()", type_label=expression_statement];
2871 [label="408_ if_now % 15 == 0\n2871-if-409-411", method="bug_tmstmp40()", type_label=if];
5958 [label="408_ end_if", method="bug_tmstmp40()", type_label=end_if];
2878 [label="409_ msg.sender.transfer(address(this).balance);\n2878-expression_statement-410-410", method="bug_tmstmp40()", type_label=expression_statement];
2891 [label="412_ function NewDanPanPercent(uint256 newDanPanpercent) external onlyOwner {\n      emit DanPanPercentChanged(dpPercent, newDanPanpercent);\n      dpPercent = newDanPanpercent;\n  }\n2891-function_definition-413-416", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=function_definition];
2898 [label="412_ onlyOwner\n2898-expression_statement-413-413", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=expression_statement];
2907 [label="414_ dpPercent = newDanPanpercent;\n2907-expression_statement-415-415", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=expression_statement];
2911 [label="416_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2911-function_definition-417-419", method="bug_tmstmp33()", type_label=function_definition];
2920 [label="417_ return block.timestamp >= 1546300800;\n2920-return-418-418", method="bug_tmstmp33()", type_label=return];
2926 [label="419_ function _isWhitelisted(address _from, address _to) internal view returns (bool) {\n        return whitelistFrom[_from]||whitelistTo[_to];\n}\n2926-function_definition-420-422", method="_isWhitelisted(address _from,address _to)", type_label=function_definition];
2943 [label="420_ return whitelistFrom[_from]||whitelistTo[_to];\n2943-return-421-421", method="_isWhitelisted(address _from,address _to)", type_label=return];
2951 [label="422_ address winner_tmstmp27;\n2951-new_variable-423-423", method="", type_label=new_variable];
2955 [label="423_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n2955-function_definition-424-427", method="play_tmstmp27(uint startTime)", type_label=function_definition];
2963 [label="424_ uint _vtime = block.timestamp;\n2963-new_variable-425-425", method="play_tmstmp27(uint startTime)", type_label=new_variable];
2971 [label="425_ if_startTime + (5 * 1 days) == _vtime\n2971-if-426-427", method="play_tmstmp27(uint startTime)", type_label=if];
6058 [label="425_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
2982 [label="426_ winner_tmstmp27 = msg.sender;\n2982-expression_statement-427-427", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
2988 [label="427_ function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner {\n        emit WhitelistTo(_addr, _whitelisted);\n        whitelistTo[_addr] = _whitelisted;\n    }\n2988-function_definition-428-431", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=function_definition];
2999 [label="427_ onlyOwner\n2999-expression_statement-428-428", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=expression_statement];
3008 [label="429_ whitelistTo[_addr] = _whitelisted;\n3008-expression_statement-430-430", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=expression_statement];
3014 [label="431_ address winner_tmstmp31;\n3014-new_variable-432-432", method="", type_label=new_variable];
3018 [label="432_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n3018-function_definition-433-436", method="play_tmstmp31(uint startTime)", type_label=function_definition];
3026 [label="433_ uint _vtime = block.timestamp;\n3026-new_variable-434-434", method="play_tmstmp31(uint startTime)", type_label=new_variable];
3034 [label="434_ if_startTime + (5 * 1 days) == _vtime\n3034-if-435-436", method="play_tmstmp31(uint startTime)", type_label=if];
6121 [label="434_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
3045 [label="435_ winner_tmstmp31 = msg.sender;\n3045-expression_statement-436-436", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
3051 [label="436_ function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner {\n        emit WhitelistFrom(_addr, _whitelisted);\n        whitelistFrom[_addr] = _whitelisted;\n}\n3051-function_definition-437-440", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=function_definition];
3062 [label="436_ onlyOwner\n3062-expression_statement-437-437", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=expression_statement];
3071 [label="438_ whitelistFrom[_addr] = _whitelisted;\n3071-expression_statement-439-439", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=expression_statement];
3077 [label="440_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n3077-function_definition-441-443", method="bug_tmstmp13()", type_label=function_definition];
3086 [label="441_ return block.timestamp >= 1546300800;\n3086-return-442-442", method="bug_tmstmp13()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
664;
129 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> 3233  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3233 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 3233  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
227 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
261 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
315 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 376  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
365 -> 3452  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3452 -> 382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 3452  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
385 -> 394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
446 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 476  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
463 -> 3550  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3550 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 3550  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
487 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
521 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 558  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
545 -> 3632  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3632 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 3632  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
564 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
575 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
590 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
601 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
616 -> 625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
631 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 658  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
647 -> 3734  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3734 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 3734  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
682 -> 690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
690 -> 703  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
690 -> 3777  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3777 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 3777  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
716 -> 721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
721 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
726 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 754  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
747 -> 3834  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3834 -> 767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
754 -> 3834  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
776 -> 781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
796 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 814  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
807 -> 3894  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3894 -> 827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
814 -> 3894  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
833 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
842 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
848 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 885  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
874 -> 3961  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3961 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 3961  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
896 -> 901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
906 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
916 -> 923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 934  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
927 -> 4014  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4014 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
934 -> 4014  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
947 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
964 -> 977  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
964 -> 4051  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4051 -> 983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
977 -> 4051  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
989 -> 998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
998 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1004 -> 1010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1022 -> 1035  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1022 -> 4109  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4109 -> 1041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 4109  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1041 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1121 -> 1129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1142  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1129 -> 4216  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4216 -> 1148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 4216  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1155 -> 1160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 1182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1182 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1193  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1186 -> 4273  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4273 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1193 -> 4273  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1232 -> 1241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1241 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1247 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1258 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1273 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1286 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1294 -> 1302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1302 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1321  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1310 -> 4397  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4397 -> 1327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 4397  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1327 -> 1344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1344 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1354 -> 1362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1362 -> 1375  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1362 -> 4449  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4449 -> 1381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1375 -> 4449  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1381 -> 1394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1394 -> 1405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1405 -> 1421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1423 -> 1428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1428 -> 1433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1433 -> 1443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1443 -> 1450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 1454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1454 -> 1461  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1454 -> 4541  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4541 -> 1474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1461 -> 4541  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1474 -> 1487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1487 -> 1498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 1519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1519 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1521 -> 1526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1526 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1541 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1548 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 1559  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1552 -> 4639  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4639 -> 1572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1559 -> 4639  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1572 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1599 -> 1608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1608 -> 4695  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4695 -> 1626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1623 -> 4695  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1623 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1626 -> 1632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1632 -> 1638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1638 -> 1644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1644 -> 1661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1661 -> 1672  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1661 -> 4748  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1672 -> 1679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1679 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 1700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1744 -> 1761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1784 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1791 -> 1799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1799 -> 1812  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1799 -> 4886  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4886 -> 1818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1812 -> 4886  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1818 -> 1832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1832 -> 1848  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1832 -> 4919  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4919 -> 1859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1845 -> 1832  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1848 -> 1845  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1859 -> 1864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1864 -> 1869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1869 -> 1879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1879 -> 1886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1886 -> 1890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1890 -> 1897  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1890 -> 4977  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4977 -> 1910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1897 -> 4977  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1910 -> 1926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1926 -> 1935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1955 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1962 -> 1970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1970 -> 1978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1978 -> 1989  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1978 -> 5065  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5065 -> 1995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1989 -> 5065  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1995 -> 2015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2015 -> 2024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2024 -> 2037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2037 -> 2046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2046 -> 5133  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5133 -> 2062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2059 -> 5133  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2059 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2062 -> 2068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2068 -> 2074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2074 -> 2080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2080 -> 2093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2093 -> 2102  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2093 -> 5180  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2102 -> 2109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2109 -> 2116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2116 -> 2130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2170 -> 2187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2187 -> 2200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2229 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2236 -> 2244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2244 -> 2252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2252 -> 2263  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2252 -> 5339  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5339 -> 2269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2263 -> 5339  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2269 -> 2285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2285 -> 2294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2332 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2339 -> 2347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2347 -> 2360  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2347 -> 5434  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5434 -> 2366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2360 -> 5434  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2366 -> 2382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2382 -> 2391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2429 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2436 -> 2444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2444 -> 2457  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2444 -> 5531  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5531 -> 2463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2457 -> 5531  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2463 -> 2475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2475 -> 2482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2505 -> 2510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2510 -> 2515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2515 -> 2525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2525 -> 2532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2532 -> 2536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2536 -> 2543  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2536 -> 5623  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5623 -> 2556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2543 -> 5623  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2556 -> 2564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2577 -> 2585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2585 -> 2593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2593 -> 2604  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2593 -> 5680  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5680 -> 2610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2604 -> 5680  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2610 -> 2622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2622 -> 2629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2629 -> 2638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2638 -> 2647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2670 -> 2675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2675 -> 2680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2680 -> 2690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2690 -> 2697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2697 -> 2701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2701 -> 2708  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2701 -> 5788  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5788 -> 2721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2708 -> 5788  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2721 -> 2733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2733 -> 2746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2746 -> 2767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2778 -> 2786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2786 -> 2794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2794 -> 2805  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2794 -> 5881  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5881 -> 2811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2805 -> 5881  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2811 -> 2821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2840 -> 2845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2845 -> 2850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2850 -> 2860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2860 -> 2867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2867 -> 2871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2871 -> 2878  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2871 -> 5958  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5958 -> 2891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2878 -> 5958  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2891 -> 2907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2911 -> 2920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2920 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2926 -> 2943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2943 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2955 -> 2963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2963 -> 2971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2971 -> 2982  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2971 -> 6058  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6058 -> 2988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2982 -> 6058  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2988 -> 3008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3018 -> 3026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3026 -> 3034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3034 -> 3045  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3034 -> 6121  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6121 -> 3051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3045 -> 6121  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3051 -> 3071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3077 -> 3086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3086 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
