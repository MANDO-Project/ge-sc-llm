digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ address winner_tmstmp19;\n154-new_variable-22-22", method="", type_label=new_variable];
158 [label="22_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n158-function_definition-23-26", method="play_tmstmp19(uint startTime)", type_label=function_definition];
166 [label="23_ uint _vtime = block.timestamp;\n166-new_variable-24-24", method="play_tmstmp19(uint startTime)", type_label=new_variable];
174 [label="24_ if_startTime + (5 * 1 days) == _vtime\n174-if-25-26", method="play_tmstmp19(uint startTime)", type_label=if];
1907 [label="24_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
185 [label="25_ winner_tmstmp19 = msg.sender;\n185-expression_statement-26-26", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
191 [label="26_ function balanceOf(address tokenOwner) public view returns (uint balance);\n191-function_definition-27-27", method="balanceOf(address tokenOwner)", type_label=function_definition];
204 [label="27_ address winner_tmstmp26;\n204-new_variable-28-28", method="", type_label=new_variable];
208 [label="28_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n208-function_definition-29-31", method="play_tmstmp26(uint startTime)", type_label=function_definition];
216 [label="29_ if_startTime + (5 * 1 days) == block.timestamp\n216-if-30-31", method="play_tmstmp26(uint startTime)", type_label=if];
1949 [label="29_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
229 [label="30_ winner_tmstmp26 = msg.sender;\n229-expression_statement-31-31", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
235 [label="31_ function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n235-function_definition-32-32", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
252 [label="32_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n252-function_definition-33-41", method="bug_tmstmp20()", type_label=function_definition];
257 [label="33_ uint pastBlockTime_tmstmp20;\n257-new_variable-34-34", method="bug_tmstmp20()", type_label=new_variable];
262 [label="34_ require(msg.value == 10 ether);\n262-expression_statement-35-35", method="bug_tmstmp20()", type_label=expression_statement];
272 [label="35_ require(now != pastBlockTime_tmstmp20);\n272-expression_statement-36-36", method="bug_tmstmp20()", type_label=expression_statement];
279 [label="36_ pastBlockTime_tmstmp20 = now;\n279-expression_statement-37-37", method="bug_tmstmp20()", type_label=expression_statement];
283 [label="37_ if_now % 15 == 0\n283-if-38-40", method="bug_tmstmp20()", type_label=if];
2016 [label="37_ end_if", method="bug_tmstmp20()", type_label=end_if];
290 [label="38_ msg.sender.transfer(address(this).balance);\n290-expression_statement-39-39", method="bug_tmstmp20()", type_label=expression_statement];
303 [label="41_ function transfer(address to, uint tokens) public returns (bool success);\n303-function_definition-42-42", method="transfer(address to,uint tokens)", type_label=function_definition];
319 [label="42_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n319-function_definition-43-51", method="bug_tmstmp32()", type_label=function_definition];
324 [label="43_ uint pastBlockTime_tmstmp32;\n324-new_variable-44-44", method="bug_tmstmp32()", type_label=new_variable];
329 [label="44_ require(msg.value == 10 ether);\n329-expression_statement-45-45", method="bug_tmstmp32()", type_label=expression_statement];
339 [label="45_ require(now != pastBlockTime_tmstmp32);\n339-expression_statement-46-46", method="bug_tmstmp32()", type_label=expression_statement];
346 [label="46_ pastBlockTime_tmstmp32 = now;\n346-expression_statement-47-47", method="bug_tmstmp32()", type_label=expression_statement];
350 [label="47_ if_now % 15 == 0\n350-if-48-50", method="bug_tmstmp32()", type_label=if];
2083 [label="47_ end_if", method="bug_tmstmp32()", type_label=end_if];
357 [label="48_ msg.sender.transfer(address(this).balance);\n357-expression_statement-49-49", method="bug_tmstmp32()", type_label=expression_statement];
370 [label="51_ function approve(address spender, uint tokens) public returns (bool success);\n370-function_definition-52-52", method="approve(address spender,uint tokens)", type_label=function_definition];
386 [label="52_ address winner_tmstmp38;\n386-new_variable-53-53", method="", type_label=new_variable];
390 [label="53_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n390-function_definition-54-56", method="play_tmstmp38(uint startTime)", type_label=function_definition];
398 [label="54_ if_startTime + (5 * 1 days) == block.timestamp\n398-if-55-56", method="play_tmstmp38(uint startTime)", type_label=if];
2131 [label="54_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
411 [label="55_ winner_tmstmp38 = msg.sender;\n411-expression_statement-56-56", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
417 [label="56_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n417-function_definition-57-57", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
437 [label="57_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n437-function_definition-58-66", method="bug_tmstmp4()", type_label=function_definition];
442 [label="58_ uint pastBlockTime_tmstmp4;\n442-new_variable-59-59", method="bug_tmstmp4()", type_label=new_variable];
447 [label="59_ require(msg.value == 10 ether);\n447-expression_statement-60-60", method="bug_tmstmp4()", type_label=expression_statement];
457 [label="60_ require(now != pastBlockTime_tmstmp4);\n457-expression_statement-61-61", method="bug_tmstmp4()", type_label=expression_statement];
464 [label="61_ pastBlockTime_tmstmp4 = now;\n464-expression_statement-62-62", method="bug_tmstmp4()", type_label=expression_statement];
468 [label="62_ if_now % 15 == 0\n468-if-63-65", method="bug_tmstmp4()", type_label=if];
2201 [label="62_ end_if", method="bug_tmstmp4()", type_label=end_if];
475 [label="63_ msg.sender.transfer(address(this).balance);\n475-expression_statement-64-64", method="bug_tmstmp4()", type_label=expression_statement];
488 [label="66_ uint256 bugv_tmstmp2 = block.timestamp;\n488-new_variable-67-67", method="", type_label=new_variable];
509 [label="68_ uint256 bugv_tmstmp3 = block.timestamp;\n509-new_variable-69-69", method="", type_label=new_variable];
533 [label="72_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n533-function_definition-73-73", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
552 [label="73_ address winner_tmstmp7;\n552-new_variable-74-74", method="", type_label=new_variable];
556 [label="74_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n556-function_definition-75-78", method="play_tmstmp7(uint startTime)", type_label=function_definition];
564 [label="75_ uint _vtime = block.timestamp;\n564-new_variable-76-76", method="play_tmstmp7(uint startTime)", type_label=new_variable];
572 [label="76_ if_startTime + (5 * 1 days) == _vtime\n572-if-77-78", method="play_tmstmp7(uint startTime)", type_label=if];
2305 [label="76_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
583 [label="77_ winner_tmstmp7 = msg.sender;\n583-expression_statement-78-78", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
592 [label="80_ address winner_tmstmp11;\n592-new_variable-81-81", method="", type_label=new_variable];
596 [label="81_ function play_tmstmp11(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp11 = msg.sender;}}\n596-function_definition-82-85", method="play_tmstmp11(uint startTime)", type_label=function_definition];
604 [label="82_ uint _vtime = block.timestamp;\n604-new_variable-83-83", method="play_tmstmp11(uint startTime)", type_label=new_variable];
612 [label="83_ if_startTime + (5 * 1 days) == _vtime\n612-if-84-85", method="play_tmstmp11(uint startTime)", type_label=if];
2345 [label="83_ end_if", method="play_tmstmp11(uint startTime)", type_label=end_if];
623 [label="84_ winner_tmstmp11 = msg.sender;\n623-expression_statement-85-85", method="play_tmstmp11(uint startTime)", type_label=expression_statement];
629 [label="85_ address public owner;\n629-new_variable-86-86", method="", type_label=new_variable];
634 [label="86_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n634-function_definition-87-89", method="bug_tmstmp1()", type_label=function_definition];
643 [label="87_ return block.timestamp >= 1546300800;\n643-return-88-88", method="bug_tmstmp1()", type_label=return];
649 [label="89_ address public newOwner;\n649-new_variable-90-90", method="", type_label=new_variable];
654 [label="90_ uint256 bugv_tmstmp4 = block.timestamp;\n654-new_variable-91-91", method="", type_label=new_variable];
673 [label="93_ owner = msg.sender;\n673-expression_statement-94-94", method="", type_label=expression_statement];
679 [label="95_ address winner_tmstmp23;\n679-new_variable-96-96", method="", type_label=new_variable];
683 [label="96_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n683-function_definition-97-100", method="play_tmstmp23(uint startTime)", type_label=function_definition];
691 [label="97_ uint _vtime = block.timestamp;\n691-new_variable-98-98", method="play_tmstmp23(uint startTime)", type_label=new_variable];
699 [label="98_ if_startTime + (5 * 1 days) == _vtime\n699-if-99-100", method="play_tmstmp23(uint startTime)", type_label=if];
2432 [label="98_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
710 [label="99_ winner_tmstmp23 = msg.sender;\n710-expression_statement-100-100", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
716 [label="100_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n716-expression_statement-101-104", method="", type_label=expression_statement];
719 [label="101_ require(msg.sender == owner);\n719-expression_statement-102-102", method="", type_label=expression_statement];
728 [label="102_ _;\n728-expression_statement-103-103", method="", type_label=expression_statement];
730 [label="104_ uint256 bugv_tmstmp1 = block.timestamp;\n730-new_variable-105-105", method="", type_label=new_variable];
737 [label="105_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n737-function_definition-106-108", method="transferOwnership(address _newOwner)", type_label=function_definition];
744 [label="105_ onlyOwner\n744-expression_statement-106-106", method="transferOwnership(address _newOwner)", type_label=expression_statement];
747 [label="106_ newOwner = _newOwner;\n747-expression_statement-107-107", method="transferOwnership(address _newOwner)", type_label=expression_statement];
751 [label="108_ address winner_tmstmp14;\n751-new_variable-109-109", method="", type_label=new_variable];
755 [label="109_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n755-function_definition-110-112", method="play_tmstmp14(uint startTime)", type_label=function_definition];
763 [label="110_ if_startTime + (5 * 1 days) == block.timestamp\n763-if-111-112", method="play_tmstmp14(uint startTime)", type_label=if];
2496 [label="110_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
776 [label="111_ winner_tmstmp14 = msg.sender;\n776-expression_statement-112-112", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
782 [label="112_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n782-function_definition-113-118", method="acceptOwnership()", type_label=function_definition];
786 [label="113_ require(msg.sender == newOwner);\n786-expression_statement-114-114", method="acceptOwnership()", type_label=expression_statement];
801 [label="115_ owner = newOwner;\n801-expression_statement-116-116", method="acceptOwnership()", type_label=expression_statement];
805 [label="116_ newOwner = address(0);\n805-expression_statement-117-117", method="acceptOwnership()", type_label=expression_statement];
811 [label="118_ address winner_tmstmp30;\n811-new_variable-119-119", method="", type_label=new_variable];
815 [label="119_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n815-function_definition-120-122", method="play_tmstmp30(uint startTime)", type_label=function_definition];
823 [label="120_ if_startTime + (5 * 1 days) == block.timestamp\n823-if-121-122", method="play_tmstmp30(uint startTime)", type_label=if];
2556 [label="120_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
836 [label="121_ winner_tmstmp30 = msg.sender;\n836-expression_statement-122-122", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
856 [label="125_ address winner_tmstmp2;\n856-new_variable-126-126", method="", type_label=new_variable];
860 [label="126_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n860-function_definition-127-129", method="play_tmstmp2(uint startTime)", type_label=function_definition];
868 [label="127_ if_startTime + (5 * 1 days) == block.timestamp\n868-if-128-129", method="play_tmstmp2(uint startTime)", type_label=if];
2601 [label="127_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
881 [label="128_ winner_tmstmp2 = msg.sender;\n881-expression_statement-129-129", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
887 [label="129_ string public symbol;\n887-new_variable-130-130", method="", type_label=new_variable];
892 [label="130_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n892-function_definition-131-133", method="bug_tmstmp17()", type_label=function_definition];
901 [label="131_ return block.timestamp >= 1546300800;\n901-return-132-132", method="bug_tmstmp17()", type_label=return];
907 [label="133_ uint public decimals;\n907-new_variable-134-134", method="", type_label=new_variable];
912 [label="134_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n912-function_definition-135-137", method="bug_tmstmp37()", type_label=function_definition];
921 [label="135_ return block.timestamp >= 1546300800;\n921-return-136-136", method="bug_tmstmp37()", type_label=return];
927 [label="137_ string public  name;\n927-new_variable-138-138", method="", type_label=new_variable];
932 [label="138_ address winner_tmstmp3;\n932-new_variable-139-139", method="", type_label=new_variable];
936 [label="139_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n936-function_definition-140-143", method="play_tmstmp3(uint startTime)", type_label=function_definition];
944 [label="140_ uint _vtime = block.timestamp;\n944-new_variable-141-141", method="play_tmstmp3(uint startTime)", type_label=new_variable];
952 [label="141_ if_startTime + (5 * 1 days) == _vtime\n952-if-142-143", method="play_tmstmp3(uint startTime)", type_label=if];
2685 [label="141_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
963 [label="142_ winner_tmstmp3 = msg.sender;\n963-expression_statement-143-143", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
969 [label="143_ uint _totalSupply;\n969-new_variable-144-144", method="", type_label=new_variable];
973 [label="144_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n973-function_definition-145-147", method="bug_tmstmp9()", type_label=function_definition];
982 [label="145_ return block.timestamp >= 1546300800;\n982-return-146-146", method="bug_tmstmp9()", type_label=return];
988 [label="147_ mapping(address => uint) balances;\n988-new_variable-148-148", method="", type_label=new_variable];
994 [label="148_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n994-function_definition-149-151", method="bug_tmstmp25()", type_label=function_definition];
1003 [label="149_ return block.timestamp >= 1546300800;\n1003-return-150-150", method="bug_tmstmp25()", type_label=return];
1009 [label="151_ mapping(address => mapping(address => uint)) allowed;\n1009-new_variable-152-152", method="", type_label=new_variable];
1019 [label="153_ symbol = \"FTB\";\n1019-expression_statement-154-154", method="", type_label=expression_statement];
1024 [label="154_ name = \"ForTheBlockchain\";\n1024-expression_statement-155-155", method="", type_label=expression_statement];
1029 [label="155_ decimals = 8;\n1029-expression_statement-156-156", method="", type_label=expression_statement];
1033 [label="156_ _totalSupply =100000000 * 10**(decimals);\n1033-expression_statement-157-157", method="", type_label=expression_statement];
1042 [label="157_ balances[owner] = _totalSupply;\n1042-expression_statement-158-158", method="", type_label=expression_statement];
1058 [label="160_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1058-function_definition-161-169", method="bug_tmstmp8()", type_label=function_definition];
1063 [label="161_ uint pastBlockTime_tmstmp8;\n1063-new_variable-162-162", method="bug_tmstmp8()", type_label=new_variable];
1068 [label="162_ require(msg.value == 10 ether);\n1068-expression_statement-163-163", method="bug_tmstmp8()", type_label=expression_statement];
1078 [label="163_ require(now != pastBlockTime_tmstmp8);\n1078-expression_statement-164-164", method="bug_tmstmp8()", type_label=expression_statement];
1085 [label="164_ pastBlockTime_tmstmp8 = now;\n1085-expression_statement-165-165", method="bug_tmstmp8()", type_label=expression_statement];
1089 [label="165_ if_now % 15 == 0\n1089-if-166-168", method="bug_tmstmp8()", type_label=if];
2822 [label="165_ end_if", method="bug_tmstmp8()", type_label=end_if];
1096 [label="166_ msg.sender.transfer(address(this).balance);\n1096-expression_statement-167-167", method="bug_tmstmp8()", type_label=expression_statement];
1109 [label="169_ function totalSupply() public view returns (uint) {\n        return _totalSupply.sub(balances[address(0)]);\n    }\n1109-function_definition-170-172", method="totalSupply()", type_label=function_definition];
1118 [label="170_ return _totalSupply.sub(balances[address(0)]);\n1118-return-171-171", method="totalSupply()", type_label=return];
1129 [label="172_ address winner_tmstmp39;\n1129-new_variable-173-173", method="", type_label=new_variable];
1133 [label="173_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1133-function_definition-174-177", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1141 [label="174_ uint _vtime = block.timestamp;\n1141-new_variable-175-175", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1149 [label="175_ if_startTime + (5 * 1 days) == _vtime\n1149-if-176-177", method="play_tmstmp39(uint startTime)", type_label=if];
2882 [label="175_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1160 [label="176_ winner_tmstmp39 = msg.sender;\n1160-expression_statement-177-177", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1166 [label="177_ function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n1166-function_definition-178-180", method="balanceOf(address tokenOwner)", type_label=function_definition];
1180 [label="178_ return balances[tokenOwner];\n1180-return-179-179", method="balanceOf(address tokenOwner)", type_label=return];
1184 [label="180_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1184-function_definition-181-189", method="bug_tmstmp36()", type_label=function_definition];
1189 [label="181_ uint pastBlockTime_tmstmp36;\n1189-new_variable-182-182", method="bug_tmstmp36()", type_label=new_variable];
1194 [label="182_ require(msg.value == 10 ether);\n1194-expression_statement-183-183", method="bug_tmstmp36()", type_label=expression_statement];
1204 [label="183_ require(now != pastBlockTime_tmstmp36);\n1204-expression_statement-184-184", method="bug_tmstmp36()", type_label=expression_statement];
1211 [label="184_ pastBlockTime_tmstmp36 = now;\n1211-expression_statement-185-185", method="bug_tmstmp36()", type_label=expression_statement];
1215 [label="185_ if_now % 15 == 0\n1215-if-186-188", method="bug_tmstmp36()", type_label=if];
2948 [label="185_ end_if", method="bug_tmstmp36()", type_label=end_if];
1222 [label="186_ msg.sender.transfer(address(this).balance);\n1222-expression_statement-187-187", method="bug_tmstmp36()", type_label=expression_statement];
1235 [label="189_ function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n1235-function_definition-190-195", method="transfer(address to,uint tokens)", type_label=function_definition];
1252 [label="190_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n1252-expression_statement-191-191", method="transfer(address to,uint tokens)", type_label=expression_statement];
1269 [label="191_ balances[to] = balances[to].add(tokens);\n1269-expression_statement-192-192", method="transfer(address to,uint tokens)", type_label=expression_statement];
1292 [label="193_ return true;\n1292-return-194-194", method="transfer(address to,uint tokens)", type_label=return];
1295 [label="195_ address winner_tmstmp35;\n1295-new_variable-196-196", method="", type_label=new_variable];
1299 [label="196_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1299-function_definition-197-200", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1307 [label="197_ uint _vtime = block.timestamp;\n1307-new_variable-198-198", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1315 [label="198_ if_startTime + (5 * 1 days) == _vtime\n1315-if-199-200", method="play_tmstmp35(uint startTime)", type_label=if];
3048 [label="198_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1326 [label="199_ winner_tmstmp35 = msg.sender;\n1326-expression_statement-200-200", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1332 [label="200_ function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n1332-function_definition-201-205", method="approve(address spender,uint tokens)", type_label=function_definition];
1349 [label="201_ allowed[msg.sender][spender] = tokens;\n1349-expression_statement-202-202", method="approve(address spender,uint tokens)", type_label=expression_statement];
1369 [label="203_ return true;\n1369-return-204-204", method="approve(address spender,uint tokens)", type_label=return];
1372 [label="205_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1372-function_definition-206-214", method="bug_tmstmp40()", type_label=function_definition];
1377 [label="206_ uint pastBlockTime_tmstmp40;\n1377-new_variable-207-207", method="bug_tmstmp40()", type_label=new_variable];
1382 [label="207_ require(msg.value == 10 ether);\n1382-expression_statement-208-208", method="bug_tmstmp40()", type_label=expression_statement];
1392 [label="208_ require(now != pastBlockTime_tmstmp40);\n1392-expression_statement-209-209", method="bug_tmstmp40()", type_label=expression_statement];
1399 [label="209_ pastBlockTime_tmstmp40 = now;\n1399-expression_statement-210-210", method="bug_tmstmp40()", type_label=expression_statement];
1403 [label="210_ if_now % 15 == 0\n1403-if-211-213", method="bug_tmstmp40()", type_label=if];
3136 [label="210_ end_if", method="bug_tmstmp40()", type_label=end_if];
1410 [label="211_ msg.sender.transfer(address(this).balance);\n1410-expression_statement-212-212", method="bug_tmstmp40()", type_label=expression_statement];
1423 [label="214_ function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n1423-function_definition-215-221", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
1444 [label="215_ balances[from] = balances[from].sub(tokens);\n1444-expression_statement-216-216", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1457 [label="216_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n1457-expression_statement-217-217", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1478 [label="217_ balances[to] = balances[to].add(tokens);\n1478-expression_statement-218-218", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1499 [label="219_ return true;\n1499-return-220-220", method="transferFrom(address from,address to,uint tokens)", type_label=return];
1502 [label="221_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1502-function_definition-222-224", method="bug_tmstmp33()", type_label=function_definition];
1511 [label="222_ return block.timestamp >= 1546300800;\n1511-return-223-223", method="bug_tmstmp33()", type_label=return];
1517 [label="224_ function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n1517-function_definition-225-227", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
1535 [label="225_ return allowed[tokenOwner][spender];\n1535-return-226-226", method="allowance(address tokenOwner,address spender)", type_label=return];
1541 [label="227_ address winner_tmstmp27;\n1541-new_variable-228-228", method="", type_label=new_variable];
1545 [label="228_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1545-function_definition-229-232", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1553 [label="229_ uint _vtime = block.timestamp;\n1553-new_variable-230-230", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1561 [label="230_ if_startTime + (5 * 1 days) == _vtime\n1561-if-231-232", method="play_tmstmp27(uint startTime)", type_label=if];
3294 [label="230_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1572 [label="231_ winner_tmstmp27 = msg.sender;\n1572-expression_statement-232-232", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1578 [label="232_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n1578-function_definition-233-238", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
1599 [label="233_ allowed[msg.sender][spender] = tokens;\n1599-expression_statement-234-234", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
1619 [label="235_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n1619-expression_statement-236-236", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
1639 [label="236_ return true;\n1639-return-237-237", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
1642 [label="238_ address winner_tmstmp31;\n1642-new_variable-239-239", method="", type_label=new_variable];
1646 [label="239_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1646-function_definition-240-243", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1654 [label="240_ uint _vtime = block.timestamp;\n1654-new_variable-241-241", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1662 [label="241_ if_startTime + (5 * 1 days) == _vtime\n1662-if-242-243", method="play_tmstmp31(uint startTime)", type_label=if];
3395 [label="241_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1673 [label="242_ winner_tmstmp31 = msg.sender;\n1673-expression_statement-243-243", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1685 [label="246_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1685-function_definition-247-249", method="bug_tmstmp13()", type_label=function_definition];
1694 [label="247_ return block.timestamp >= 1546300800;\n1694-return-248-248", method="bug_tmstmp13()", type_label=return];
1700 [label="249_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n1700-function_definition-250-252", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
1711 [label="249_ onlyOwner\n1711-expression_statement-250-250", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
1719 [label="250_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n1719-return-251-251", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
1731 [label="252_ uint256 bugv_tmstmp5 = block.timestamp;\n1731-new_variable-253-253", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
589;
842;
1679;
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 185  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
174 -> 1907  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1907 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 1907  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
208 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 229  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
216 -> 1949  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1949 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 1949  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
252 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
257 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
272 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 290  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
283 -> 2016  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2016 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
290 -> 2016  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
319 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 357  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
350 -> 2083  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2083 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 2083  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
390 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 411  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
398 -> 2131  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2131 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 2131  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
437 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
442 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 475  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
468 -> 2201  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2201 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
475 -> 2201  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
556 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 583  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
572 -> 2305  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2305 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 2305  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
596 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 623  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
612 -> 2345  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2345 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
623 -> 2345  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
634 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
649 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
683 -> 691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
691 -> 699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 710  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
699 -> 2432  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2432 -> 716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 2432  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
716 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
755 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 776  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
763 -> 2496  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2496 -> 782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 2496  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
782 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
801 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 836  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
823 -> 2556  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2556 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 2556  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
860 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 881  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
868 -> 2601  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2601 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 2601  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
892 -> 901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
912 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
927 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
936 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 963  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
952 -> 2685  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2685 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 2685  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
973 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
982 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
994 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1019 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1024 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1033 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1078 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1085 -> 1089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1089 -> 1096  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1089 -> 2822  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2822 -> 1109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 2822  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1109 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1133 -> 1141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1160  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1149 -> 2882  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2882 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 2882  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1166 -> 1180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1180 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1184 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1194 -> 1204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1204 -> 1211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1211 -> 1215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 1222  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1215 -> 2948  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2948 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1222 -> 2948  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1235 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1252 -> 1269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1292 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1299 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 1315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1315 -> 1326  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1315 -> 3048  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3048 -> 1332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1326 -> 3048  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1332 -> 1349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1369 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1372 -> 1377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1377 -> 1382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1382 -> 1392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 1410  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1403 -> 3136  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3136 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 3136  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1423 -> 1444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1444 -> 1457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1457 -> 1478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1499 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1502 -> 1511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1511 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1517 -> 1535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1535 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1545 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1553 -> 1561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1561 -> 1572  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1561 -> 3294  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3294 -> 1578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1572 -> 3294  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1578 -> 1599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1619 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1639 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1646 -> 1654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1654 -> 1662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1662 -> 1673  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1662 -> 3395  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3395 -> 1679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1673 -> 3395  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1685 -> 1694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1694 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1700 -> 1719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1719 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
