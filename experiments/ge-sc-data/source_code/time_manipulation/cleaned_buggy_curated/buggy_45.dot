digraph  {
13 [label="2_ address winner_tmstmp27;\n13-new_variable-3-3", method="", type_label=new_variable];
17 [label="3_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n17-function_definition-4-7", method="play_tmstmp27(uint startTime)", type_label=function_definition];
25 [label="4_ uint _vtime = block.timestamp;\n25-new_variable-5-5", method="play_tmstmp27(uint startTime)", type_label=new_variable];
33 [label="5_ if_startTime + (5 * 1 days) == _vtime\n33-if-6-7", method="play_tmstmp27(uint startTime)", type_label=if];
1457 [label="5_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
44 [label="6_ winner_tmstmp27 = msg.sender;\n44-expression_statement-7-7", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
56 [label="8_ address winner_tmstmp31;\n56-new_variable-9-9", method="", type_label=new_variable];
60 [label="9_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n60-function_definition-10-13", method="play_tmstmp31(uint startTime)", type_label=function_definition];
68 [label="10_ uint _vtime = block.timestamp;\n68-new_variable-11-11", method="play_tmstmp31(uint startTime)", type_label=new_variable];
76 [label="11_ if_startTime + (5 * 1 days) == _vtime\n76-if-12-13", method="play_tmstmp31(uint startTime)", type_label=if];
1500 [label="11_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
87 [label="12_ winner_tmstmp31 = msg.sender;\n87-expression_statement-13-13", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
99 [label="14_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n99-function_definition-15-17", method="bug_tmstmp13()", type_label=function_definition];
108 [label="15_ return block.timestamp >= 1546300800;\n108-return-16-16", method="bug_tmstmp13()", type_label=return];
116 [label="18_ uint256 bugv_tmstmp5 = block.timestamp;\n116-new_variable-19-19", method="", type_label=new_variable];
129 [label="20_ uint256 bugv_tmstmp1 = block.timestamp;\n129-new_variable-21-21", method="", type_label=new_variable];
142 [label="22_ uint256 bugv_tmstmp2 = block.timestamp;\n142-new_variable-23-23", method="", type_label=new_variable];
159 [label="24_ uint256 bugv_tmstmp3 = block.timestamp;\n159-new_variable-25-25", method="", type_label=new_variable];
176 [label="26_ uint256 bugv_tmstmp4 = block.timestamp;\n176-new_variable-27-27", method="", type_label=new_variable];
202 [label="36_ struct Guess {\n        mapping (address => PaidStatus) players;\n        uint guesses_number;\n    }\n202-expression_statement-37-40", method="Guess()", type_label=expression_statement];
215 [label="40_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n215-function_definition-41-43", method="bug_tmstmp37()", type_label=function_definition];
224 [label="41_ return block.timestamp >= 1546300800;\n224-return-42-42", method="bug_tmstmp37()", type_label=return];
230 [label="43_ address payable public owner;\n230-new_variable-44-44", method="", type_label=new_variable];
235 [label="44_ address winner_tmstmp3;\n235-new_variable-45-45", method="", type_label=new_variable];
239 [label="45_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n239-function_definition-46-49", method="play_tmstmp3(uint startTime)", type_label=function_definition];
247 [label="46_ uint _vtime = block.timestamp;\n247-new_variable-47-47", method="play_tmstmp3(uint startTime)", type_label=new_variable];
255 [label="47_ if_startTime + (5 * 1 days) == _vtime\n255-if-48-49", method="play_tmstmp3(uint startTime)", type_label=if];
1679 [label="47_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
266 [label="48_ winner_tmstmp3 = msg.sender;\n266-expression_statement-49-49", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
272 [label="49_ address public oracle;\n272-new_variable-50-50", method="", type_label=new_variable];
277 [label="50_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n277-function_definition-51-53", method="bug_tmstmp9()", type_label=function_definition];
286 [label="51_ return block.timestamp >= 1546300800;\n286-return-52-52", method="bug_tmstmp9()", type_label=return];
292 [label="53_ State public state;\n292-new_variable-54-54", method="", type_label=new_variable];
298 [label="54_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n298-function_definition-55-57", method="bug_tmstmp25()", type_label=function_definition];
307 [label="55_ return block.timestamp >= 1546300800;\n307-return-56-56", method="bug_tmstmp25()", type_label=return];
313 [label="57_ mapping (uint => Guess) public guesses;\n313-new_variable-58-58", method="", type_label=new_variable];
321 [label="58_ address winner_tmstmp19;\n321-new_variable-59-59", method="", type_label=new_variable];
325 [label="59_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n325-function_definition-60-63", method="play_tmstmp19(uint startTime)", type_label=function_definition];
333 [label="60_ uint _vtime = block.timestamp;\n333-new_variable-61-61", method="play_tmstmp19(uint startTime)", type_label=new_variable];
341 [label="61_ if_startTime + (5 * 1 days) == _vtime\n341-if-62-63", method="play_tmstmp19(uint startTime)", type_label=if];
1765 [label="61_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
352 [label="62_ winner_tmstmp19 = msg.sender;\n352-expression_statement-63-63", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
358 [label="63_ uint256 public bet;\n358-new_variable-64-64", method="", type_label=new_variable];
363 [label="64_ uint256 splitJackpot;\n363-new_variable-65-65", method="", type_label=new_variable];
367 [label="65_ address winner_tmstmp26;\n367-new_variable-66-66", method="", type_label=new_variable];
371 [label="66_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n371-function_definition-67-69", method="play_tmstmp26(uint startTime)", type_label=function_definition];
379 [label="67_ if_startTime + (5 * 1 days) == block.timestamp\n379-if-68-69", method="play_tmstmp26(uint startTime)", type_label=if];
1803 [label="67_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
392 [label="68_ winner_tmstmp26 = msg.sender;\n392-expression_statement-69-69", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
398 [label="69_ uint public result;\n398-new_variable-70-70", method="", type_label=new_variable];
403 [label="70_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n403-function_definition-71-79", method="bug_tmstmp20()", type_label=function_definition];
408 [label="71_ uint pastBlockTime_tmstmp20;\n408-new_variable-72-72", method="bug_tmstmp20()", type_label=new_variable];
413 [label="72_ require(msg.value == 10 ether);\n413-expression_statement-73-73", method="bug_tmstmp20()", type_label=expression_statement];
423 [label="73_ require(now != pastBlockTime_tmstmp20);\n423-expression_statement-74-74", method="bug_tmstmp20()", type_label=expression_statement];
430 [label="74_ pastBlockTime_tmstmp20 = now;\n430-expression_statement-75-75", method="bug_tmstmp20()", type_label=expression_statement];
434 [label="75_ if_now % 15 == 0\n434-if-76-78", method="bug_tmstmp20()", type_label=if];
1858 [label="75_ end_if", method="bug_tmstmp20()", type_label=end_if];
441 [label="76_ msg.sender.transfer(address(this).balance);\n441-expression_statement-77-77", method="bug_tmstmp20()", type_label=expression_statement];
454 [label="79_ uint256 public initialPrice;\n454-new_variable-80-80", method="", type_label=new_variable];
459 [label="80_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n459-function_definition-81-89", method="bug_tmstmp32()", type_label=function_definition];
464 [label="81_ uint pastBlockTime_tmstmp32;\n464-new_variable-82-82", method="bug_tmstmp32()", type_label=new_variable];
469 [label="82_ require(msg.value == 10 ether);\n469-expression_statement-83-83", method="bug_tmstmp32()", type_label=expression_statement];
479 [label="83_ require(now != pastBlockTime_tmstmp32);\n479-expression_statement-84-84", method="bug_tmstmp32()", type_label=expression_statement];
486 [label="84_ pastBlockTime_tmstmp32 = now;\n486-expression_statement-85-85", method="bug_tmstmp32()", type_label=expression_statement];
490 [label="85_ if_now % 15 == 0\n490-if-86-88", method="bug_tmstmp32()", type_label=if];
1914 [label="85_ end_if", method="bug_tmstmp32()", type_label=end_if];
497 [label="86_ msg.sender.transfer(address(this).balance);\n497-expression_statement-87-87", method="bug_tmstmp32()", type_label=expression_statement];
510 [label="89_ uint256 public finalPrice;\n510-new_variable-90-90", method="", type_label=new_variable];
515 [label="90_ address winner_tmstmp38;\n515-new_variable-91-91", method="", type_label=new_variable];
519 [label="91_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n519-function_definition-92-94", method="play_tmstmp38(uint startTime)", type_label=function_definition];
527 [label="92_ if_startTime + (5 * 1 days) == block.timestamp\n527-if-93-94", method="play_tmstmp38(uint startTime)", type_label=if];
1951 [label="92_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
540 [label="93_ winner_tmstmp38 = msg.sender;\n540-expression_statement-94-94", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
546 [label="94_ uint constant UP = 1;\n546-new_variable-95-95", method="", type_label=new_variable];
551 [label="95_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n551-function_definition-96-104", method="bug_tmstmp4()", type_label=function_definition];
556 [label="96_ uint pastBlockTime_tmstmp4;\n556-new_variable-97-97", method="bug_tmstmp4()", type_label=new_variable];
561 [label="97_ require(msg.value == 10 ether);\n561-expression_statement-98-98", method="bug_tmstmp4()", type_label=expression_statement];
571 [label="98_ require(now != pastBlockTime_tmstmp4);\n571-expression_statement-99-99", method="bug_tmstmp4()", type_label=expression_statement];
578 [label="99_ pastBlockTime_tmstmp4 = now;\n578-expression_statement-100-100", method="bug_tmstmp4()", type_label=expression_statement];
582 [label="100_ if_now % 15 == 0\n582-if-101-103", method="bug_tmstmp4()", type_label=if];
2006 [label="100_ end_if", method="bug_tmstmp4()", type_label=end_if];
589 [label="101_ msg.sender.transfer(address(this).balance);\n589-expression_statement-102-102", method="bug_tmstmp4()", type_label=expression_statement];
602 [label="104_ uint constant DOWN = 0;\n602-new_variable-105-105", method="", type_label=new_variable];
607 [label="105_ modifier byPlayer(){\n        require(msg.sender != oracle);\n        _;\n    }\n607-expression_statement-106-109", method="", type_label=expression_statement];
610 [label="106_ require(msg.sender != oracle);\n610-expression_statement-107-107", method="", type_label=expression_statement];
619 [label="107_ _;\n619-expression_statement-108-108", method="", type_label=expression_statement];
621 [label="109_ modifier byOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n621-expression_statement-110-113", method="", type_label=expression_statement];
624 [label="110_ require(msg.sender == owner);\n624-expression_statement-111-111", method="", type_label=expression_statement];
633 [label="111_ _;\n633-expression_statement-112-112", method="", type_label=expression_statement];
635 [label="113_ modifier byOracle(){\n        require(msg.sender == oracle);\n        _;\n    }\n635-expression_statement-114-117", method="", type_label=expression_statement];
638 [label="114_ require(msg.sender == oracle);\n638-expression_statement-115-115", method="", type_label=expression_statement];
647 [label="115_ _;\n647-expression_statement-116-116", method="", type_label=expression_statement];
649 [label="117_ modifier inState(State expected) {\n        require(state == expected);\n        _;\n    }\n649-expression_statement-118-121", method="", type_label=expression_statement];
657 [label="118_ require(state == expected);\n657-expression_statement-119-119", method="", type_label=expression_statement];
664 [label="119_ _;\n664-expression_statement-120-120", method="", type_label=expression_statement];
672 [label="122_ require(_bet > 0);\n672-expression_statement-123-123", method="", type_label=expression_statement];
679 [label="123_ owner = msg.sender;\n679-expression_statement-124-124", method="", type_label=expression_statement];
685 [label="124_ state = State.SETUP;\n685-expression_statement-125-125", method="", type_label=expression_statement];
691 [label="125_ bet = _bet;\n691-expression_statement-126-126", method="", type_label=expression_statement];
699 [label="128_ address winner_tmstmp7;\n699-new_variable-129-129", method="", type_label=new_variable];
703 [label="129_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n703-function_definition-130-133", method="play_tmstmp7(uint startTime)", type_label=function_definition];
711 [label="130_ uint _vtime = block.timestamp;\n711-new_variable-131-131", method="play_tmstmp7(uint startTime)", type_label=new_variable];
719 [label="131_ if_startTime + (5 * 1 days) == _vtime\n719-if-132-133", method="play_tmstmp7(uint startTime)", type_label=if];
2143 [label="131_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
730 [label="132_ winner_tmstmp7 = msg.sender;\n730-expression_statement-133-133", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
736 [label="133_ function setOracle(address _oracle) public payable byOwner inState(State.SETUP) {\n        oracle = _oracle;\n        emit OracleSet(oracle);\n    }\n736-function_definition-134-137", method="setOracle(address _oracle)", type_label=function_definition];
744 [label="133_ byOwner\n744-expression_statement-134-134", method="setOracle(address _oracle)", type_label=expression_statement];
746 [label="133_ inState(State.SETUP)\n746-expression_statement-134-134", method="setOracle(address _oracle)", type_label=expression_statement];
753 [label="134_ oracle = _oracle;\n753-expression_statement-135-135", method="setOracle(address _oracle)", type_label=expression_statement];
761 [label="137_ address winner_tmstmp23;\n761-new_variable-138-138", method="", type_label=new_variable];
765 [label="138_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n765-function_definition-139-142", method="play_tmstmp23(uint startTime)", type_label=function_definition];
773 [label="139_ uint _vtime = block.timestamp;\n773-new_variable-140-140", method="play_tmstmp23(uint startTime)", type_label=new_variable];
781 [label="140_ if_startTime + (5 * 1 days) == _vtime\n781-if-141-142", method="play_tmstmp23(uint startTime)", type_label=if];
2205 [label="140_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
792 [label="141_ winner_tmstmp23 = msg.sender;\n792-expression_statement-142-142", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
798 [label="142_ function setInitialPrice(uint256 _value) public payable byOracle inState(State.SETUP) {\n        initialPrice = _value;\n        state = State.OPEN;\n        emit GameOpened(initialPrice);\n    }\n798-function_definition-143-147", method="setInitialPrice(uint256 _value)", type_label=function_definition];
806 [label="142_ byOracle\n806-expression_statement-143-143", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
808 [label="142_ inState(State.SETUP)\n808-expression_statement-143-143", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
815 [label="143_ initialPrice = _value;\n815-expression_statement-144-144", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
819 [label="144_ state = State.OPEN;\n819-expression_statement-145-145", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
829 [label="147_ address winner_tmstmp14;\n829-new_variable-148-148", method="", type_label=new_variable];
833 [label="148_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n833-function_definition-149-151", method="play_tmstmp14(uint startTime)", type_label=function_definition];
841 [label="149_ if_startTime + (5 * 1 days) == block.timestamp\n841-if-150-151", method="play_tmstmp14(uint startTime)", type_label=if];
2265 [label="149_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
854 [label="150_ winner_tmstmp14 = msg.sender;\n854-expression_statement-151-151", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
860 [label="151_ function closeGame() public byOwner inState(State.OPEN){\n        state = State.CLOSED;\n        emit GameClosed();\n    }\n860-function_definition-152-155", method="closeGame()", type_label=function_definition];
863 [label="151_ byOwner\n863-expression_statement-152-152", method="closeGame()", type_label=expression_statement];
865 [label="151_ inState(State.OPEN)\n865-expression_statement-152-152", method="closeGame()", type_label=expression_statement];
872 [label="152_ state = State.CLOSED;\n872-expression_statement-153-153", method="closeGame()", type_label=expression_statement];
880 [label="155_ address winner_tmstmp30;\n880-new_variable-156-156", method="", type_label=new_variable];
884 [label="156_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n884-function_definition-157-159", method="play_tmstmp30(uint startTime)", type_label=function_definition];
892 [label="157_ if_startTime + (5 * 1 days) == block.timestamp\n892-if-158-159", method="play_tmstmp30(uint startTime)", type_label=if];
2316 [label="157_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
905 [label="158_ winner_tmstmp30 = msg.sender;\n905-expression_statement-159-159", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
911 [label="159_ function betUp() public payable byPlayer inState(State.OPEN){\n        require(msg.value == (bet*0.001 ether));\n        guesses[UP].guesses_number++;\n        guesses[UP].players[msg.sender] = PaidStatus.NOT_PAID;\n        emit PlayerBet(msg.sender, UP);\n    }\n911-function_definition-160-165", method="betUp()", type_label=function_definition];
915 [label="159_ byPlayer\n915-expression_statement-160-160", method="betUp()", type_label=expression_statement];
917 [label="159_ inState(State.OPEN)\n917-expression_statement-160-160", method="betUp()", type_label=expression_statement];
924 [label="160_ require(msg.value == (bet*0.001 ether));\n924-expression_statement-161-161", method="betUp()", type_label=expression_statement];
937 [label="161_ guesses[UP].guesses_number++;\n937-expression_statement-162-162", method="betUp()", type_label=expression_statement];
938 [label="161_ guesses[UP].guesses_number++\n938-expression_statement-162-162", method="betUp()", type_label=expression_statement];
944 [label="162_ guesses[UP].players[msg.sender] = PaidStatus.NOT_PAID;\n944-expression_statement-163-163", method="betUp()", type_label=expression_statement];
966 [label="165_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n966-function_definition-166-174", method="bug_tmstmp8()", type_label=function_definition];
971 [label="166_ uint pastBlockTime_tmstmp8;\n971-new_variable-167-167", method="bug_tmstmp8()", type_label=new_variable];
976 [label="167_ require(msg.value == 10 ether);\n976-expression_statement-168-168", method="bug_tmstmp8()", type_label=expression_statement];
986 [label="168_ require(now != pastBlockTime_tmstmp8);\n986-expression_statement-169-169", method="bug_tmstmp8()", type_label=expression_statement];
993 [label="169_ pastBlockTime_tmstmp8 = now;\n993-expression_statement-170-170", method="bug_tmstmp8()", type_label=expression_statement];
997 [label="170_ if_now % 15 == 0\n997-if-171-173", method="bug_tmstmp8()", type_label=if];
2421 [label="170_ end_if", method="bug_tmstmp8()", type_label=end_if];
1004 [label="171_ msg.sender.transfer(address(this).balance);\n1004-expression_statement-172-172", method="bug_tmstmp8()", type_label=expression_statement];
1017 [label="174_ function betDown() public payable byPlayer inState(State.OPEN){\n        require(msg.value == (bet*0.001 ether));\n        guesses[DOWN].guesses_number++;\n        guesses[DOWN].players[msg.sender] = PaidStatus.NOT_PAID;\n        emit PlayerBet(msg.sender, DOWN);\n    }\n1017-function_definition-175-180", method="betDown()", type_label=function_definition];
1021 [label="174_ byPlayer\n1021-expression_statement-175-175", method="betDown()", type_label=expression_statement];
1023 [label="174_ inState(State.OPEN)\n1023-expression_statement-175-175", method="betDown()", type_label=expression_statement];
1030 [label="175_ require(msg.value == (bet*0.001 ether));\n1030-expression_statement-176-176", method="betDown()", type_label=expression_statement];
1043 [label="176_ guesses[DOWN].guesses_number++;\n1043-expression_statement-177-177", method="betDown()", type_label=expression_statement];
1044 [label="176_ guesses[DOWN].guesses_number++\n1044-expression_statement-177-177", method="betDown()", type_label=expression_statement];
1050 [label="177_ guesses[DOWN].players[msg.sender] = PaidStatus.NOT_PAID;\n1050-expression_statement-178-178", method="betDown()", type_label=expression_statement];
1072 [label="180_ address winner_tmstmp39;\n1072-new_variable-181-181", method="", type_label=new_variable];
1076 [label="181_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1076-function_definition-182-185", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1084 [label="182_ uint _vtime = block.timestamp;\n1084-new_variable-183-183", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1092 [label="183_ if_startTime + (5 * 1 days) == _vtime\n1092-if-184-185", method="play_tmstmp39(uint startTime)", type_label=if];
2516 [label="183_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1103 [label="184_ winner_tmstmp39 = msg.sender;\n1103-expression_statement-185-185", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1109 [label="185_ function setFinalPrice(uint256 _value) public payable byOracle inState(State.CLOSED) {\n        finalPrice = _value;\n        emit FinalPriceSet(finalPrice);\n        if(finalPrice > initialPrice){\n            result = UP;\n        }else{\n            result = DOWN;\n        }\n        if(guesses[result].guesses_number > 0){\n            state = State.PLAYERS_WIN;\n            splitJackpot = getBalance()/guesses[result].guesses_number;\n            emit PlayersWin(result, splitJackpot);\n        }else{\n            state = State.OWNER_WIN;\n            emit OwnerWins(owner);\n        }\n    }\n1109-function_definition-186-202", method="setFinalPrice(uint256 _value)", type_label=function_definition];
1117 [label="185_ byOracle\n1117-expression_statement-186-186", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1119 [label="185_ inState(State.CLOSED)\n1119-expression_statement-186-186", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1126 [label="186_ finalPrice = _value;\n1126-expression_statement-187-187", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1134 [label="188_ if_finalPrice > initialPrice\n1134-if-189-193", method="setFinalPrice(uint256 _value)", type_label=if];
2558 [label="188_ end_if", method="setFinalPrice(uint256 _value)", type_label=end_if];
1139 [label="189_ result = UP;\n1139-expression_statement-190-190", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1144 [label="191_ result = DOWN;\n1144-expression_statement-192-192", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1148 [label="193_ if_guesses[result].guesses_number > 0\n1148-if-194-201", method="setFinalPrice(uint256 _value)", type_label=if];
2572 [label="193_ end_if", method="setFinalPrice(uint256 _value)", type_label=end_if];
1157 [label="194_ state = State.PLAYERS_WIN;\n1157-expression_statement-195-195", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1163 [label="195_ splitJackpot = getBalance()/guesses[result].guesses_number;\n1163-expression_statement-196-196", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1181 [label="198_ state = State.OWNER_WIN;\n1181-expression_statement-199-199", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
1191 [label="202_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1191-function_definition-203-211", method="bug_tmstmp36()", type_label=function_definition];
1196 [label="203_ uint pastBlockTime_tmstmp36;\n1196-new_variable-204-204", method="bug_tmstmp36()", type_label=new_variable];
1201 [label="204_ require(msg.value == 10 ether);\n1201-expression_statement-205-205", method="bug_tmstmp36()", type_label=expression_statement];
1211 [label="205_ require(now != pastBlockTime_tmstmp36);\n1211-expression_statement-206-206", method="bug_tmstmp36()", type_label=expression_statement];
1218 [label="206_ pastBlockTime_tmstmp36 = now;\n1218-expression_statement-207-207", method="bug_tmstmp36()", type_label=expression_statement];
1222 [label="207_ if_now % 15 == 0\n1222-if-208-210", method="bug_tmstmp36()", type_label=if];
2646 [label="207_ end_if", method="bug_tmstmp36()", type_label=end_if];
1229 [label="208_ msg.sender.transfer(address(this).balance);\n1229-expression_statement-209-209", method="bug_tmstmp36()", type_label=expression_statement];
1242 [label="211_ function collectOwnerWinnings() public byOwner inState(State.OWNER_WIN){\n        selfdestruct(owner);\n    }\n1242-function_definition-212-214", method="collectOwnerWinnings()", type_label=function_definition];
1245 [label="211_ byOwner\n1245-expression_statement-212-212", method="collectOwnerWinnings()", type_label=expression_statement];
1247 [label="211_ inState(State.OWNER_WIN)\n1247-expression_statement-212-212", method="collectOwnerWinnings()", type_label=expression_statement];
1254 [label="212_ selfdestruct(owner);\n1254-expression_statement-213-213", method="collectOwnerWinnings()", type_label=expression_statement];
1259 [label="214_ address winner_tmstmp35;\n1259-new_variable-215-215", method="", type_label=new_variable];
1263 [label="215_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1263-function_definition-216-219", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1271 [label="216_ uint _vtime = block.timestamp;\n1271-new_variable-217-217", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1279 [label="217_ if_startTime + (5 * 1 days) == _vtime\n1279-if-218-219", method="play_tmstmp35(uint startTime)", type_label=if];
2703 [label="217_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1290 [label="218_ winner_tmstmp35 = msg.sender;\n1290-expression_statement-219-219", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1296 [label="219_ function collectPlayerWinnings() public byPlayer inState(State.PLAYERS_WIN){\n        if(guesses[result].players[msg.sender] == PaidStatus.NOT_PAID){\n            guesses[result].players[msg.sender] = PaidStatus.PAID;\n            msg.sender.transfer(splitJackpot);\n        } else revert();\n    }\n1296-function_definition-220-225", method="collectPlayerWinnings()", type_label=function_definition];
1299 [label="219_ byPlayer\n1299-expression_statement-220-220", method="collectPlayerWinnings()", type_label=expression_statement];
1301 [label="219_ inState(State.PLAYERS_WIN)\n1301-expression_statement-220-220", method="collectPlayerWinnings()", type_label=expression_statement];
1308 [label="220_ if_guesses[result].players[msg.sender] == PaidStatus.NOT_PAID\n1308-if-221-224", method="collectPlayerWinnings()", type_label=if];
2732 [label="220_ end_if", method="collectPlayerWinnings()", type_label=end_if];
1323 [label="221_ guesses[result].players[msg.sender] = PaidStatus.PAID;\n1323-expression_statement-222-222", method="collectPlayerWinnings()", type_label=expression_statement];
1337 [label="222_ msg.sender.transfer(splitJackpot);\n1337-expression_statement-223-223", method="collectPlayerWinnings()", type_label=expression_statement];
1348 [label="225_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1348-function_definition-226-234", method="bug_tmstmp40()", type_label=function_definition];
1353 [label="226_ uint pastBlockTime_tmstmp40;\n1353-new_variable-227-227", method="bug_tmstmp40()", type_label=new_variable];
1358 [label="227_ require(msg.value == 10 ether);\n1358-expression_statement-228-228", method="bug_tmstmp40()", type_label=expression_statement];
1368 [label="228_ require(now != pastBlockTime_tmstmp40);\n1368-expression_statement-229-229", method="bug_tmstmp40()", type_label=expression_statement];
1375 [label="229_ pastBlockTime_tmstmp40 = now;\n1375-expression_statement-230-230", method="bug_tmstmp40()", type_label=expression_statement];
1379 [label="230_ if_now % 15 == 0\n1379-if-231-233", method="bug_tmstmp40()", type_label=if];
2803 [label="230_ end_if", method="bug_tmstmp40()", type_label=end_if];
1386 [label="231_ msg.sender.transfer(address(this).balance);\n1386-expression_statement-232-232", method="bug_tmstmp40()", type_label=expression_statement];
1399 [label="234_ function getBalance() private view returns (uint256){\n        return address(this).balance;\n    }\n1399-function_definition-235-237", method="getBalance()", type_label=function_definition];
1408 [label="235_ return address(this).balance;\n1408-return-236-236", method="getBalance()", type_label=return];
1414 [label="237_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1414-function_definition-238-240", method="bug_tmstmp33()", type_label=function_definition];
1423 [label="238_ return block.timestamp >= 1546300800;\n1423-return-239-239", method="bug_tmstmp33()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
50;
93;
1187;
1347;
17 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 44  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
33 -> 1457  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1457 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 1457  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
60 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 76  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
76 -> 87  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
76 -> 1500  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1500 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 1500  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
99 -> 108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
108 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
215 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
224 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
230 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
239 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 266  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
255 -> 1679  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1679 -> 272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 1679  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
277 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
298 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
313 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
325 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
341 -> 352  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
341 -> 1765  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1765 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 1765  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
358 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 392  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
379 -> 1803  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1803 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 1803  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
403 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
423 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 441  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
434 -> 1858  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1858 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 1858  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
459 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 497  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
490 -> 1914  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1914 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 1914  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
510 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
527 -> 540  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
527 -> 1951  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1951 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 1951  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
551 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 589  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
582 -> 2006  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2006 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 2006  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
602 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
635 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
672 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
711 -> 719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 730  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
719 -> 2143  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2143 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
730 -> 2143  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
736 -> 753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 792  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
781 -> 2205  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2205 -> 798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 2205  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
798 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 854  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
841 -> 2265  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2265 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 2265  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
860 -> 872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
892 -> 905  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
892 -> 2316  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2316 -> 911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 2316  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
911 -> 924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
915 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
924 -> 937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
966 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
971 -> 976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 1004  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
997 -> 2421  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2421 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 2421  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1017 -> 1030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1030 -> 1043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1092 -> 1103  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1092 -> 2516  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2516 -> 1109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1103 -> 2516  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1109 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1134 -> 1139  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1134 -> 1144  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2558 -> 1148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1139 -> 2558  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1144 -> 2558  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1148 -> 1157  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1148 -> 1181  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1157 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1191 -> 1196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1196 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1211 -> 1218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1218 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1222 -> 1229  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1222 -> 2646  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2646 -> 1242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1229 -> 2646  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1242 -> 1254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1245 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1263 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1279 -> 1290  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1279 -> 2703  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2703 -> 1296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1290 -> 2703  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1296 -> 1308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1299 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1308 -> 1323  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1308 -> 1323  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=1, label=neg_next];
2732 -> 1348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1323 -> 1337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1337 -> 2732  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1348 -> 1353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1353 -> 1358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1358 -> 1368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1368 -> 1375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1375 -> 1379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1379 -> 1386  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1379 -> 2803  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2803 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1386 -> 2803  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1399 -> 1408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1408 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1414 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1187 -> 2572  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1347 -> 2732  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
