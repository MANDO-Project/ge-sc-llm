digraph  {
13 [label="3_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n13-function_definition-4-6", method="bug_tmstmp1()", type_label=function_definition];
22 [label="4_ return block.timestamp >= 1546300800;\n22-return-5-5", method="bug_tmstmp1()", type_label=return];
28 [label="6_ bool private stopped;\n28-new_variable-7-7", method="", type_label=new_variable];
33 [label="7_ address winner_tmstmp2;\n33-new_variable-8-8", method="", type_label=new_variable];
37 [label="8_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n37-function_definition-9-11", method="play_tmstmp2(uint startTime)", type_label=function_definition];
45 [label="9_ if_startTime + (5 * 1 days) == block.timestamp\n45-if-10-11", method="play_tmstmp2(uint startTime)", type_label=if];
1502 [label="9_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
58 [label="10_ winner_tmstmp2 = msg.sender;\n58-expression_statement-11-11", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
64 [label="11_ address private _owner;\n64-new_variable-12-12", method="", type_label=new_variable];
69 [label="12_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n69-function_definition-13-15", method="bug_tmstmp17()", type_label=function_definition];
78 [label="13_ return block.timestamp >= 1546300800;\n78-return-14-14", method="bug_tmstmp17()", type_label=return];
84 [label="15_ address private _master;\n84-new_variable-16-16", method="", type_label=new_variable];
89 [label="16_ address winner_tmstmp31;\n89-new_variable-17-17", method="", type_label=new_variable];
93 [label="17_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n93-function_definition-18-21", method="play_tmstmp31(uint startTime)", type_label=function_definition];
101 [label="18_ uint _vtime = block.timestamp;\n101-new_variable-19-19", method="play_tmstmp31(uint startTime)", type_label=new_variable];
109 [label="19_ if_startTime + (5 * 1 days) == _vtime\n109-if-20-21", method="play_tmstmp31(uint startTime)", type_label=if];
1566 [label="19_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
120 [label="20_ winner_tmstmp31 = msg.sender;\n120-expression_statement-21-21", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
128 [label="22_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n128-function_definition-23-25", method="bug_tmstmp13()", type_label=function_definition];
137 [label="23_ return block.timestamp >= 1546300800;\n137-return-24-24", method="bug_tmstmp13()", type_label=return];
145 [label="26_ uint256 bugv_tmstmp5 = block.timestamp;\n145-new_variable-27-27", method="", type_label=new_variable];
162 [label="28_ uint256 bugv_tmstmp1 = block.timestamp;\n162-new_variable-29-29", method="", type_label=new_variable];
181 [label="32_ stopped = false;\n181-expression_statement-33-33", method="", type_label=expression_statement];
186 [label="33_ _owner = msg.sender;\n186-expression_statement-34-34", method="", type_label=expression_statement];
192 [label="34_ _master = msg.sender;\n192-expression_statement-35-35", method="", type_label=expression_statement];
214 [label="38_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n214-function_definition-39-41", method="bug_tmstmp9()", type_label=function_definition];
223 [label="39_ return block.timestamp >= 1546300800;\n223-return-40-40", method="bug_tmstmp9()", type_label=return];
229 [label="41_ function owner() public view returns (address)\n    {\n        return _owner;\n    }\n229-function_definition-42-45", method="owner()", type_label=function_definition];
238 [label="43_ return _owner;\n238-return-44-44", method="owner()", type_label=return];
240 [label="45_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n240-function_definition-46-48", method="bug_tmstmp25()", type_label=function_definition];
249 [label="46_ return block.timestamp >= 1546300800;\n249-return-47-47", method="bug_tmstmp25()", type_label=return];
255 [label="48_ function master() public view returns (address)\n    {\n        return _master;\n    }\n255-function_definition-49-52", method="master()", type_label=function_definition];
264 [label="50_ return _master;\n264-return-51-51", method="master()", type_label=return];
266 [label="52_ address winner_tmstmp19;\n266-new_variable-53-53", method="", type_label=new_variable];
270 [label="53_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n270-function_definition-54-57", method="play_tmstmp19(uint startTime)", type_label=function_definition];
278 [label="54_ uint _vtime = block.timestamp;\n278-new_variable-55-55", method="play_tmstmp19(uint startTime)", type_label=new_variable];
286 [label="55_ if_startTime + (5 * 1 days) == _vtime\n286-if-56-57", method="play_tmstmp19(uint startTime)", type_label=if];
1743 [label="55_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
297 [label="56_ winner_tmstmp19 = msg.sender;\n297-expression_statement-57-57", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
303 [label="57_ modifier onlyOwner()\n    {\n        require(isOwner());\n        _;\n    }\n303-expression_statement-58-62", method="", type_label=expression_statement];
306 [label="59_ require(isOwner());\n306-expression_statement-60-60", method="", type_label=expression_statement];
312 [label="60_ _;\n312-expression_statement-61-61", method="", type_label=expression_statement];
314 [label="62_ modifier onlyMaster()\n    {\n        require(isMaster() || isOwner());\n        _;\n    }\n314-expression_statement-63-67", method="", type_label=expression_statement];
317 [label="64_ require(isMaster() || isOwner());\n317-expression_statement-65-65", method="", type_label=expression_statement];
326 [label="65_ _;\n326-expression_statement-66-66", method="", type_label=expression_statement];
328 [label="67_ modifier onlyWhenNotStopped()\n    {\n        require(!isStopped());\n        _;\n    }\n328-expression_statement-68-72", method="", type_label=expression_statement];
331 [label="69_ require(!isStopped());\n331-expression_statement-70-70", method="", type_label=expression_statement];
338 [label="70_ _;\n338-expression_statement-71-71", method="", type_label=expression_statement];
340 [label="72_ function isOwner() public view returns (bool)\n    {\n        return msg.sender == _owner;\n    }\n340-function_definition-73-76", method="isOwner()", type_label=function_definition];
349 [label="74_ return msg.sender == _owner;\n349-return-75-75", method="isOwner()", type_label=return];
355 [label="76_ address winner_tmstmp26;\n355-new_variable-77-77", method="", type_label=new_variable];
359 [label="77_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n359-function_definition-78-80", method="play_tmstmp26(uint startTime)", type_label=function_definition];
367 [label="78_ if_startTime + (5 * 1 days) == block.timestamp\n367-if-79-80", method="play_tmstmp26(uint startTime)", type_label=if];
1824 [label="78_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
380 [label="79_ winner_tmstmp26 = msg.sender;\n380-expression_statement-80-80", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
386 [label="80_ function isMaster() public view returns (bool)\n    {\n        return msg.sender == _master;\n    }\n386-function_definition-81-84", method="isMaster()", type_label=function_definition];
395 [label="82_ return msg.sender == _master;\n395-return-83-83", method="isMaster()", type_label=return];
401 [label="84_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n401-function_definition-85-93", method="bug_tmstmp20()", type_label=function_definition];
406 [label="85_ uint pastBlockTime_tmstmp20;\n406-new_variable-86-86", method="bug_tmstmp20()", type_label=new_variable];
411 [label="86_ require(msg.value == 10 ether);\n411-expression_statement-87-87", method="bug_tmstmp20()", type_label=expression_statement];
421 [label="87_ require(now != pastBlockTime_tmstmp20);\n421-expression_statement-88-88", method="bug_tmstmp20()", type_label=expression_statement];
428 [label="88_ pastBlockTime_tmstmp20 = now;\n428-expression_statement-89-89", method="bug_tmstmp20()", type_label=expression_statement];
432 [label="89_ if_now % 15 == 0\n432-if-90-92", method="bug_tmstmp20()", type_label=if];
1889 [label="89_ end_if", method="bug_tmstmp20()", type_label=end_if];
439 [label="90_ msg.sender.transfer(address(this).balance);\n439-expression_statement-91-91", method="bug_tmstmp20()", type_label=expression_statement];
452 [label="93_ function transferOwnership(address newOwner) external onlyOwner\n    {\n        _transferOwnership(newOwner);\n    }\n452-function_definition-94-97", method="transferOwnership(address newOwner)", type_label=function_definition];
459 [label="93_ onlyOwner\n459-expression_statement-94-94", method="transferOwnership(address newOwner)", type_label=expression_statement];
462 [label="95_ _transferOwnership(newOwner);\n462-expression_statement-96-96", method="transferOwnership(address newOwner)", type_label=expression_statement];
467 [label="97_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n467-function_definition-98-106", method="bug_tmstmp32()", type_label=function_definition];
472 [label="98_ uint pastBlockTime_tmstmp32;\n472-new_variable-99-99", method="bug_tmstmp32()", type_label=new_variable];
477 [label="99_ require(msg.value == 10 ether);\n477-expression_statement-100-100", method="bug_tmstmp32()", type_label=expression_statement];
487 [label="100_ require(now != pastBlockTime_tmstmp32);\n487-expression_statement-101-101", method="bug_tmstmp32()", type_label=expression_statement];
494 [label="101_ pastBlockTime_tmstmp32 = now;\n494-expression_statement-102-102", method="bug_tmstmp32()", type_label=expression_statement];
498 [label="102_ if_now % 15 == 0\n498-if-103-105", method="bug_tmstmp32()", type_label=if];
1955 [label="102_ end_if", method="bug_tmstmp32()", type_label=end_if];
505 [label="103_ msg.sender.transfer(address(this).balance);\n505-expression_statement-104-104", method="bug_tmstmp32()", type_label=expression_statement];
518 [label="106_ function transferMasterRole(address newMaster) external onlyOwner\n    {\n        _transferMasterRole(newMaster);\n    }\n518-function_definition-107-110", method="transferMasterRole(address newMaster)", type_label=function_definition];
525 [label="106_ onlyOwner\n525-expression_statement-107-107", method="transferMasterRole(address newMaster)", type_label=expression_statement];
528 [label="108_ _transferMasterRole(newMaster);\n528-expression_statement-109-109", method="transferMasterRole(address newMaster)", type_label=expression_statement];
533 [label="110_ address winner_tmstmp38;\n533-new_variable-111-111", method="", type_label=new_variable];
537 [label="111_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n537-function_definition-112-114", method="play_tmstmp38(uint startTime)", type_label=function_definition];
545 [label="112_ if_startTime + (5 * 1 days) == block.timestamp\n545-if-113-114", method="play_tmstmp38(uint startTime)", type_label=if];
2002 [label="112_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
558 [label="113_ winner_tmstmp38 = msg.sender;\n558-expression_statement-114-114", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
564 [label="114_ function isStopped() public view returns (bool)\n    {\n        return stopped;\n    }\n564-function_definition-115-118", method="isStopped()", type_label=function_definition];
573 [label="116_ return stopped;\n573-return-117-117", method="isStopped()", type_label=return];
575 [label="118_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n575-function_definition-119-127", method="bug_tmstmp4()", type_label=function_definition];
580 [label="119_ uint pastBlockTime_tmstmp4;\n580-new_variable-120-120", method="bug_tmstmp4()", type_label=new_variable];
585 [label="120_ require(msg.value == 10 ether);\n585-expression_statement-121-121", method="bug_tmstmp4()", type_label=expression_statement];
595 [label="121_ require(now != pastBlockTime_tmstmp4);\n595-expression_statement-122-122", method="bug_tmstmp4()", type_label=expression_statement];
602 [label="122_ pastBlockTime_tmstmp4 = now;\n602-expression_statement-123-123", method="bug_tmstmp4()", type_label=expression_statement];
606 [label="123_ if_now % 15 == 0\n606-if-124-126", method="bug_tmstmp4()", type_label=if];
2063 [label="123_ end_if", method="bug_tmstmp4()", type_label=end_if];
613 [label="124_ msg.sender.transfer(address(this).balance);\n613-expression_statement-125-125", method="bug_tmstmp4()", type_label=expression_statement];
626 [label="127_ function stop() public onlyOwner\n    {\n        _stop();\n    }\n626-function_definition-128-131", method="stop()", type_label=function_definition];
629 [label="127_ onlyOwner\n629-expression_statement-128-128", method="stop()", type_label=expression_statement];
632 [label="129_ _stop();\n632-expression_statement-130-130", method="stop()", type_label=expression_statement];
635 [label="131_ address winner_tmstmp7;\n635-new_variable-132-132", method="", type_label=new_variable];
639 [label="132_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n639-function_definition-133-136", method="play_tmstmp7(uint startTime)", type_label=function_definition];
647 [label="133_ uint _vtime = block.timestamp;\n647-new_variable-134-134", method="play_tmstmp7(uint startTime)", type_label=new_variable];
655 [label="134_ if_startTime + (5 * 1 days) == _vtime\n655-if-135-136", method="play_tmstmp7(uint startTime)", type_label=if];
2112 [label="134_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
666 [label="135_ winner_tmstmp7 = msg.sender;\n666-expression_statement-136-136", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
672 [label="136_ function start() public onlyOwner\n    {\n        _start();\n    }\n672-function_definition-137-140", method="start()", type_label=function_definition];
675 [label="136_ onlyOwner\n675-expression_statement-137-137", method="start()", type_label=expression_statement];
678 [label="138_ _start();\n678-expression_statement-139-139", method="start()", type_label=expression_statement];
681 [label="140_ address winner_tmstmp23;\n681-new_variable-141-141", method="", type_label=new_variable];
685 [label="141_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n685-function_definition-142-145", method="play_tmstmp23(uint startTime)", type_label=function_definition];
693 [label="142_ uint _vtime = block.timestamp;\n693-new_variable-143-143", method="play_tmstmp23(uint startTime)", type_label=new_variable];
701 [label="143_ if_startTime + (5 * 1 days) == _vtime\n701-if-144-145", method="play_tmstmp23(uint startTime)", type_label=if];
2158 [label="143_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
712 [label="144_ winner_tmstmp23 = msg.sender;\n712-expression_statement-145-145", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
718 [label="145_ function _transferOwnership(address newOwner) internal\n    {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n718-function_definition-146-151", method="_transferOwnership(address newOwner)", type_label=function_definition];
726 [label="147_ require(newOwner != address(0));\n726-expression_statement-148-148", method="_transferOwnership(address newOwner)", type_label=expression_statement];
741 [label="149_ _owner = newOwner;\n741-expression_statement-150-150", method="_transferOwnership(address newOwner)", type_label=expression_statement];
745 [label="151_ address winner_tmstmp14;\n745-new_variable-152-152", method="", type_label=new_variable];
749 [label="152_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n749-function_definition-153-155", method="play_tmstmp14(uint startTime)", type_label=function_definition];
757 [label="153_ if_startTime + (5 * 1 days) == block.timestamp\n757-if-154-155", method="play_tmstmp14(uint startTime)", type_label=if];
2214 [label="153_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
770 [label="154_ winner_tmstmp14 = msg.sender;\n770-expression_statement-155-155", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
776 [label="155_ function _transferMasterRole(address newMaster) internal\n    {\n        require(newMaster != address(0));\n        emit MasterRoleTransferred(_master, newMaster);\n        _master = newMaster;\n    }\n776-function_definition-156-161", method="_transferMasterRole(address newMaster)", type_label=function_definition];
784 [label="157_ require(newMaster != address(0));\n784-expression_statement-158-158", method="_transferMasterRole(address newMaster)", type_label=expression_statement];
799 [label="159_ _master = newMaster;\n799-expression_statement-160-160", method="_transferMasterRole(address newMaster)", type_label=expression_statement];
803 [label="161_ address winner_tmstmp30;\n803-new_variable-162-162", method="", type_label=new_variable];
807 [label="162_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n807-function_definition-163-165", method="play_tmstmp30(uint startTime)", type_label=function_definition];
815 [label="163_ if_startTime + (5 * 1 days) == block.timestamp\n815-if-164-165", method="play_tmstmp30(uint startTime)", type_label=if];
2272 [label="163_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
828 [label="164_ winner_tmstmp30 = msg.sender;\n828-expression_statement-165-165", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
834 [label="165_ function _stop() internal\n    {\n        emit Stopped();\n        stopped = true;\n    }\n834-function_definition-166-170", method="_stop()", type_label=function_definition];
840 [label="168_ stopped = true;\n840-expression_statement-169-169", method="_stop()", type_label=expression_statement];
845 [label="170_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n845-function_definition-171-179", method="bug_tmstmp8()", type_label=function_definition];
850 [label="171_ uint pastBlockTime_tmstmp8;\n850-new_variable-172-172", method="bug_tmstmp8()", type_label=new_variable];
855 [label="172_ require(msg.value == 10 ether);\n855-expression_statement-173-173", method="bug_tmstmp8()", type_label=expression_statement];
865 [label="173_ require(now != pastBlockTime_tmstmp8);\n865-expression_statement-174-174", method="bug_tmstmp8()", type_label=expression_statement];
872 [label="174_ pastBlockTime_tmstmp8 = now;\n872-expression_statement-175-175", method="bug_tmstmp8()", type_label=expression_statement];
876 [label="175_ if_now % 15 == 0\n876-if-176-178", method="bug_tmstmp8()", type_label=if];
2333 [label="175_ end_if", method="bug_tmstmp8()", type_label=end_if];
883 [label="176_ msg.sender.transfer(address(this).balance);\n883-expression_statement-177-177", method="bug_tmstmp8()", type_label=expression_statement];
896 [label="179_ function _start() internal\n    {\n        emit Started();\n        stopped = false;\n    }\n896-function_definition-180-184", method="_start()", type_label=function_definition];
902 [label="182_ stopped = false;\n902-expression_statement-183-183", method="_start()", type_label=expression_statement];
907 [label="184_ address winner_tmstmp39;\n907-new_variable-185-185", method="", type_label=new_variable];
911 [label="185_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n911-function_definition-186-189", method="play_tmstmp39(uint startTime)", type_label=function_definition];
919 [label="186_ uint _vtime = block.timestamp;\n919-new_variable-187-187", method="play_tmstmp39(uint startTime)", type_label=new_variable];
927 [label="187_ if_startTime + (5 * 1 days) == _vtime\n927-if-188-189", method="play_tmstmp39(uint startTime)", type_label=if];
2384 [label="187_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
938 [label="188_ winner_tmstmp39 = msg.sender;\n938-expression_statement-189-189", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
950 [label="192_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n950-function_definition-193-195", method="bug_tmstmp37()", type_label=function_definition];
959 [label="193_ return block.timestamp >= 1546300800;\n959-return-194-194", method="bug_tmstmp37()", type_label=return];
965 [label="195_ mapping(string => string) private btc;\n965-new_variable-196-196", method="", type_label=new_variable];
972 [label="196_ address winner_tmstmp3;\n972-new_variable-197-197", method="", type_label=new_variable];
976 [label="197_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n976-function_definition-198-201", method="play_tmstmp3(uint startTime)", type_label=function_definition];
984 [label="198_ uint _vtime = block.timestamp;\n984-new_variable-199-199", method="play_tmstmp3(uint startTime)", type_label=new_variable];
992 [label="199_ if_startTime + (5 * 1 days) == _vtime\n992-if-200-201", method="play_tmstmp3(uint startTime)", type_label=if];
2449 [label="199_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
1003 [label="200_ winner_tmstmp3 = msg.sender;\n1003-expression_statement-201-201", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
1009 [label="201_ mapping(string => address) private eth;\n1009-new_variable-202-202", method="", type_label=new_variable];
1016 [label="202_ uint256 bugv_tmstmp2 = block.timestamp;\n1016-new_variable-203-203", method="", type_label=new_variable];
1037 [label="204_ uint256 bugv_tmstmp3 = block.timestamp;\n1037-new_variable-205-205", method="", type_label=new_variable];
1054 [label="206_ uint256 bugv_tmstmp4 = block.timestamp;\n1054-new_variable-207-207", method="", type_label=new_variable];
1067 [label="208_ function version() external pure returns(string memory)\n    {\n        return '1.0.0';\n    }\n1067-function_definition-209-212", method="version()", type_label=function_definition];
1076 [label="210_ return '1.0.0';\n1076-return-211-211", method="version()", type_label=return];
1079 [label="212_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1079-function_definition-213-221", method="bug_tmstmp36()", type_label=function_definition];
1084 [label="213_ uint pastBlockTime_tmstmp36;\n1084-new_variable-214-214", method="bug_tmstmp36()", type_label=new_variable];
1089 [label="214_ require(msg.value == 10 ether);\n1089-expression_statement-215-215", method="bug_tmstmp36()", type_label=expression_statement];
1099 [label="215_ require(now != pastBlockTime_tmstmp36);\n1099-expression_statement-216-216", method="bug_tmstmp36()", type_label=expression_statement];
1106 [label="216_ pastBlockTime_tmstmp36 = now;\n1106-expression_statement-217-217", method="bug_tmstmp36()", type_label=expression_statement];
1110 [label="217_ if_now % 15 == 0\n1110-if-218-220", method="bug_tmstmp36()", type_label=if];
2567 [label="217_ end_if", method="bug_tmstmp36()", type_label=end_if];
1117 [label="218_ msg.sender.transfer(address(this).balance);\n1117-expression_statement-219-219", method="bug_tmstmp36()", type_label=expression_statement];
1130 [label="221_ function getAddress(string calldata account) external view returns (string memory, address)\n    {\n        return (btc[account], eth[account]);\n    }\n1130-function_definition-222-225", method="getAddress(string calldata account)", type_label=function_definition];
1146 [label="223_ return (btc[account], eth[account]);\n1146-return-224-224", method="getAddress(string calldata account)", type_label=return];
1154 [label="225_ address winner_tmstmp35;\n1154-new_variable-226-226", method="", type_label=new_variable];
1158 [label="226_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1158-function_definition-227-230", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1166 [label="227_ uint _vtime = block.timestamp;\n1166-new_variable-228-228", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1174 [label="228_ if_startTime + (5 * 1 days) == _vtime\n1174-if-229-230", method="play_tmstmp35(uint startTime)", type_label=if];
2631 [label="228_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1185 [label="229_ winner_tmstmp35 = msg.sender;\n1185-expression_statement-230-230", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1191 [label="230_ function setAddress(string calldata account, string calldata btcAddress, address ethAddress) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(account).length > 0);\n        btc[account] = btcAddress;\n        eth[account] = ethAddress;\n        emit SetAddress(account, btcAddress, ethAddress);\n    }\n1191-function_definition-231-237", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=function_definition];
1206 [label="230_ onlyMaster\n1206-expression_statement-231-231", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
1208 [label="230_ onlyWhenNotStopped\n1208-expression_statement-231-231", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
1211 [label="232_ require(bytes(account).length > 0);\n1211-expression_statement-233-233", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
1222 [label="233_ btc[account] = btcAddress;\n1222-expression_statement-234-234", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
1228 [label="234_ eth[account] = ethAddress;\n1228-expression_statement-235-235", method="setAddress(string calldata account,string calldata btcAddress,address ethAddress)", type_label=expression_statement];
1242 [label="237_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1242-function_definition-238-246", method="bug_tmstmp40()", type_label=function_definition];
1247 [label="238_ uint pastBlockTime_tmstmp40;\n1247-new_variable-239-239", method="bug_tmstmp40()", type_label=new_variable];
1252 [label="239_ require(msg.value == 10 ether);\n1252-expression_statement-240-240", method="bug_tmstmp40()", type_label=expression_statement];
1262 [label="240_ require(now != pastBlockTime_tmstmp40);\n1262-expression_statement-241-241", method="bug_tmstmp40()", type_label=expression_statement];
1269 [label="241_ pastBlockTime_tmstmp40 = now;\n1269-expression_statement-242-242", method="bug_tmstmp40()", type_label=expression_statement];
1273 [label="242_ if_now % 15 == 0\n1273-if-243-245", method="bug_tmstmp40()", type_label=if];
2730 [label="242_ end_if", method="bug_tmstmp40()", type_label=end_if];
1280 [label="243_ msg.sender.transfer(address(this).balance);\n1280-expression_statement-244-244", method="bug_tmstmp40()", type_label=expression_statement];
1293 [label="246_ function updateAccount(string calldata from, string calldata to) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(from).length > 0);\n        require(bytes(to).length > 0);\n        btc[to] = btc[from];\n        eth[to] = eth[from];\n        btc[from] = '';\n        eth[from] = address(0);\n        emit UpdateAddress(from, to);\n    }\n1293-function_definition-247-256", method="updateAccount(string calldata from,string calldata to)", type_label=function_definition];
1304 [label="246_ onlyMaster\n1304-expression_statement-247-247", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1306 [label="246_ onlyWhenNotStopped\n1306-expression_statement-247-247", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1309 [label="248_ require(bytes(from).length > 0);\n1309-expression_statement-249-249", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1320 [label="249_ require(bytes(to).length > 0);\n1320-expression_statement-250-250", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1331 [label="250_ btc[to] = btc[from];\n1331-expression_statement-251-251", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1339 [label="251_ eth[to] = eth[from];\n1339-expression_statement-252-252", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1347 [label="252_ btc[from] = '';\n1347-expression_statement-253-253", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1354 [label="253_ eth[from] = address(0);\n1354-expression_statement-254-254", method="updateAccount(string calldata from,string calldata to)", type_label=expression_statement];
1368 [label="256_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1368-function_definition-257-259", method="bug_tmstmp33()", type_label=function_definition];
1377 [label="257_ return block.timestamp >= 1546300800;\n1377-return-258-258", method="bug_tmstmp33()", type_label=return];
1383 [label="259_ function deleteAccount(string calldata account) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(account).length > 0);\n        btc[account] = '';\n        eth[account] = address(0);\n        emit DeleteAddress(account);\n    }\n1383-function_definition-260-266", method="deleteAccount(string calldata account)", type_label=function_definition];
1390 [label="259_ onlyMaster\n1390-expression_statement-260-260", method="deleteAccount(string calldata account)", type_label=expression_statement];
1392 [label="259_ onlyWhenNotStopped\n1392-expression_statement-260-260", method="deleteAccount(string calldata account)", type_label=expression_statement];
1395 [label="261_ require(bytes(account).length > 0);\n1395-expression_statement-262-262", method="deleteAccount(string calldata account)", type_label=expression_statement];
1406 [label="262_ btc[account] = '';\n1406-expression_statement-263-263", method="deleteAccount(string calldata account)", type_label=expression_statement];
1413 [label="263_ eth[account] = address(0);\n1413-expression_statement-264-264", method="deleteAccount(string calldata account)", type_label=expression_statement];
1425 [label="266_ address winner_tmstmp27;\n1425-new_variable-267-267", method="", type_label=new_variable];
1429 [label="267_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1429-function_definition-268-271", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1437 [label="268_ uint _vtime = block.timestamp;\n1437-new_variable-269-269", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1445 [label="269_ if_startTime + (5 * 1 days) == _vtime\n1445-if-270-271", method="play_tmstmp27(uint startTime)", type_label=if];
2902 [label="269_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1456 [label="270_ winner_tmstmp27 = msg.sender;\n1456-expression_statement-271-271", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
126;
944;
13 -> 22  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
22 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
28 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 58  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
45 -> 1502  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1502 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
58 -> 1502  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
69 -> 78  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
78 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
84 -> 89  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 120  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
109 -> 1566  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1566 -> 126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 1566  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
128 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
137 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
181 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
229 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
240 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
255 -> 264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
264 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
270 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 297  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
286 -> 1743  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1743 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
297 -> 1743  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
303 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
359 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
367 -> 380  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
367 -> 1824  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1824 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
380 -> 1824  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
386 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
401 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 439  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
432 -> 1889  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1889 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 1889  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
452 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 505  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
498 -> 1955  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1955 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 1955  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
518 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 558  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
545 -> 2002  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2002 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 2002  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
564 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
575 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 613  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
606 -> 2063  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2063 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 2063  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
626 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
655 -> 666  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
655 -> 2112  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2112 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 2112  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
672 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 712  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
701 -> 2158  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2158 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 2158  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
718 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 770  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
757 -> 2214  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2214 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 2214  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
776 -> 784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 828  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
815 -> 2272  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2272 -> 834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 2272  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
834 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
872 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
876 -> 883  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
876 -> 2333  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2333 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 2333  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
896 -> 902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 938  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
927 -> 2384  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2384 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
938 -> 2384  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
950 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
965 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 1003  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
992 -> 2449  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2449 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 2449  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1009 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1079 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1089 -> 1099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1117  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1110 -> 2567  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2567 -> 1130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 2567  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1130 -> 1146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1158 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1174 -> 1185  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1174 -> 2631  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2631 -> 1191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1185 -> 2631  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1191 -> 1211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1206 -> 1208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1211 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1222 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1242 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1252 -> 1262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1262 -> 1269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1269 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 1280  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1273 -> 2730  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2730 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1280 -> 2730  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1293 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 1306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1309 -> 1320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1320 -> 1331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 1347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1347 -> 1354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1368 -> 1377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1377 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1383 -> 1395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1390 -> 1392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1395 -> 1406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1406 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1437 -> 1445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1445 -> 1456  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1445 -> 2902  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2902 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1456 -> 2902  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
