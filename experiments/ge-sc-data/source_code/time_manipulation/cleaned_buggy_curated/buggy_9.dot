digraph  {
15 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n        return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n15-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
33 [label="3_ if_a == 0\n33-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
1613 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
38 [label="4_ return 0;\n38-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
40 [label="6_ c = a * b;\n40-expression_statement-7-7", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
46 [label="7_ assert(c / a == b);\n46-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
55 [label="8_ return c;\n55-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
57 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n57-function_definition-11-13", method="div(uint256 a,uint256 b)", type_label=function_definition];
74 [label="11_ return a / b;\n74-return-12-12", method="div(uint256 a,uint256 b)", type_label=return];
78 [label="13_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n78-function_definition-14-17", method="sub(uint256 a,uint256 b)", type_label=function_definition];
95 [label="14_ assert(b <= a);\n95-expression_statement-15-15", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
102 [label="15_ return a - b;\n102-return-16-16", method="sub(uint256 a,uint256 b)", type_label=return];
106 [label="17_ function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n106-function_definition-18-22", method="add(uint256 a,uint256 b)", type_label=function_definition];
124 [label="18_ c = a + b;\n124-expression_statement-19-19", method="add(uint256 a,uint256 b)", type_label=expression_statement];
130 [label="19_ assert(c >= a);\n130-expression_statement-20-20", method="add(uint256 a,uint256 b)", type_label=expression_statement];
137 [label="20_ return c;\n137-return-21-21", method="add(uint256 a,uint256 b)", type_label=return];
142 [label="24_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n142-function_definition-25-27", method="bug_tmstmp9()", type_label=function_definition];
151 [label="25_ return block.timestamp >= 1546300800;\n151-return-26-26", method="bug_tmstmp9()", type_label=return];
157 [label="27_ address public owner;\n157-new_variable-28-28", method="", type_label=new_variable];
164 [label="29_ owner = msg.sender;\n164-expression_statement-30-30", method="", type_label=expression_statement];
170 [label="31_ address winner_tmstmp7;\n170-new_variable-32-32", method="", type_label=new_variable];
174 [label="32_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n174-function_definition-33-36", method="play_tmstmp7(uint startTime)", type_label=function_definition];
182 [label="33_ uint _vtime = block.timestamp;\n182-new_variable-34-34", method="play_tmstmp7(uint startTime)", type_label=new_variable];
190 [label="34_ if_startTime + (5 * 1 days) == _vtime\n190-if-35-36", method="play_tmstmp7(uint startTime)", type_label=if];
1770 [label="34_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
201 [label="35_ winner_tmstmp7 = msg.sender;\n201-expression_statement-36-36", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
207 [label="36_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n207-expression_statement-37-40", method="", type_label=expression_statement];
210 [label="37_ require(msg.sender == owner);\n210-expression_statement-38-38", method="", type_label=expression_statement];
219 [label="38_ _;\n219-expression_statement-39-39", method="", type_label=expression_statement];
221 [label="40_ uint256 bugv_tmstmp5 = block.timestamp;\n221-new_variable-41-41", method="", type_label=new_variable];
239 [label="44_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n239-function_definition-45-47", method="bug_tmstmp25()", type_label=function_definition];
248 [label="45_ return block.timestamp >= 1546300800;\n248-return-46-46", method="bug_tmstmp25()", type_label=return];
254 [label="47_ string public name;\n254-new_variable-48-48", method="", type_label=new_variable];
259 [label="48_ address winner_tmstmp19;\n259-new_variable-49-49", method="", type_label=new_variable];
263 [label="49_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n263-function_definition-50-53", method="play_tmstmp19(uint startTime)", type_label=function_definition];
271 [label="50_ uint _vtime = block.timestamp;\n271-new_variable-51-51", method="play_tmstmp19(uint startTime)", type_label=new_variable];
279 [label="51_ if_startTime + (5 * 1 days) == _vtime\n279-if-52-53", method="play_tmstmp19(uint startTime)", type_label=if];
1859 [label="51_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
290 [label="52_ winner_tmstmp19 = msg.sender;\n290-expression_statement-53-53", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
296 [label="53_ string public symbol;\n296-new_variable-54-54", method="", type_label=new_variable];
301 [label="54_ address winner_tmstmp26;\n301-new_variable-55-55", method="", type_label=new_variable];
305 [label="55_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n305-function_definition-56-58", method="play_tmstmp26(uint startTime)", type_label=function_definition];
313 [label="56_ if_startTime + (5 * 1 days) == block.timestamp\n313-if-57-58", method="play_tmstmp26(uint startTime)", type_label=if];
1893 [label="56_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
326 [label="57_ winner_tmstmp26 = msg.sender;\n326-expression_statement-58-58", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
332 [label="58_ uint8 public decimals;\n332-new_variable-59-59", method="", type_label=new_variable];
337 [label="59_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n337-function_definition-60-68", method="bug_tmstmp20()", type_label=function_definition];
342 [label="60_ uint pastBlockTime_tmstmp20;\n342-new_variable-61-61", method="bug_tmstmp20()", type_label=new_variable];
347 [label="61_ require(msg.value == 10 ether);\n347-expression_statement-62-62", method="bug_tmstmp20()", type_label=expression_statement];
357 [label="62_ require(now != pastBlockTime_tmstmp20);\n357-expression_statement-63-63", method="bug_tmstmp20()", type_label=expression_statement];
364 [label="63_ pastBlockTime_tmstmp20 = now;\n364-expression_statement-64-64", method="bug_tmstmp20()", type_label=expression_statement];
368 [label="64_ if_now % 15 == 0\n368-if-65-67", method="bug_tmstmp20()", type_label=if];
1948 [label="64_ end_if", method="bug_tmstmp20()", type_label=end_if];
375 [label="65_ msg.sender.transfer(address(this).balance);\n375-expression_statement-66-66", method="bug_tmstmp20()", type_label=expression_statement];
388 [label="68_ uint256 private _totalSupply;\n388-new_variable-69-69", method="", type_label=new_variable];
393 [label="69_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n393-function_definition-70-78", method="bug_tmstmp32()", type_label=function_definition];
398 [label="70_ uint pastBlockTime_tmstmp32;\n398-new_variable-71-71", method="bug_tmstmp32()", type_label=new_variable];
403 [label="71_ require(msg.value == 10 ether);\n403-expression_statement-72-72", method="bug_tmstmp32()", type_label=expression_statement];
413 [label="72_ require(now != pastBlockTime_tmstmp32);\n413-expression_statement-73-73", method="bug_tmstmp32()", type_label=expression_statement];
420 [label="73_ pastBlockTime_tmstmp32 = now;\n420-expression_statement-74-74", method="bug_tmstmp32()", type_label=expression_statement];
424 [label="74_ if_now % 15 == 0\n424-if-75-77", method="bug_tmstmp32()", type_label=if];
2004 [label="74_ end_if", method="bug_tmstmp32()", type_label=end_if];
431 [label="75_ msg.sender.transfer(address(this).balance);\n431-expression_statement-76-76", method="bug_tmstmp32()", type_label=expression_statement];
444 [label="78_ uint256 public cap;\n444-new_variable-79-79", method="", type_label=new_variable];
449 [label="79_ address winner_tmstmp38;\n449-new_variable-80-80", method="", type_label=new_variable];
453 [label="80_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n453-function_definition-81-83", method="play_tmstmp38(uint startTime)", type_label=function_definition];
461 [label="81_ if_startTime + (5 * 1 days) == block.timestamp\n461-if-82-83", method="play_tmstmp38(uint startTime)", type_label=if];
2041 [label="81_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
474 [label="82_ winner_tmstmp38 = msg.sender;\n474-expression_statement-83-83", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
480 [label="83_ mapping (address => uint256) private _balances;\n480-new_variable-84-84", method="", type_label=new_variable];
487 [label="84_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n487-function_definition-85-93", method="bug_tmstmp4()", type_label=function_definition];
492 [label="85_ uint pastBlockTime_tmstmp4;\n492-new_variable-86-86", method="bug_tmstmp4()", type_label=new_variable];
497 [label="86_ require(msg.value == 10 ether);\n497-expression_statement-87-87", method="bug_tmstmp4()", type_label=expression_statement];
507 [label="87_ require(now != pastBlockTime_tmstmp4);\n507-expression_statement-88-88", method="bug_tmstmp4()", type_label=expression_statement];
514 [label="88_ pastBlockTime_tmstmp4 = now;\n514-expression_statement-89-89", method="bug_tmstmp4()", type_label=expression_statement];
518 [label="89_ if_now % 15 == 0\n518-if-90-92", method="bug_tmstmp4()", type_label=if];
2098 [label="89_ end_if", method="bug_tmstmp4()", type_label=end_if];
525 [label="90_ msg.sender.transfer(address(this).balance);\n525-expression_statement-91-91", method="bug_tmstmp4()", type_label=expression_statement];
538 [label="93_ mapping (address => mapping (address => uint256)) private _allowed;\n538-new_variable-94-94", method="", type_label=new_variable];
547 [label="94_ uint256 bugv_tmstmp2 = block.timestamp;\n547-new_variable-95-95", method="", type_label=new_variable];
568 [label="96_ uint256 bugv_tmstmp3 = block.timestamp;\n568-new_variable-97-97", method="", type_label=new_variable];
589 [label="98_ uint256 bugv_tmstmp4 = block.timestamp;\n589-new_variable-99-99", method="", type_label=new_variable];
606 [label="100_ modifier onlyPayloadSize(uint size) {\n        require(msg.data.length >= size + 4);\n        _;\n    }\n606-expression_statement-101-104", method="", type_label=expression_statement];
613 [label="101_ require(msg.data.length >= size + 4);\n613-expression_statement-102-102", method="", type_label=expression_statement];
626 [label="102_ _;\n626-expression_statement-103-103", method="", type_label=expression_statement];
628 [label="104_ uint256 bugv_tmstmp1 = block.timestamp;\n628-new_variable-105-105", method="", type_label=new_variable];
657 [label="112_ require(_cap >= _initialSupply);\n657-expression_statement-113-113", method="", type_label=expression_statement];
664 [label="113_ cap = _cap;\n664-expression_statement-114-114", method="", type_label=expression_statement];
668 [label="114_ name = _name;\n668-expression_statement-115-115", method="", type_label=expression_statement];
672 [label="115_ symbol = _symbol;\n672-expression_statement-116-116", method="", type_label=expression_statement];
676 [label="116_ decimals = _decimals;\n676-expression_statement-117-117", method="", type_label=expression_statement];
680 [label="117_ _totalSupply = _initialSupply;\n680-expression_statement-118-118", method="", type_label=expression_statement];
684 [label="118_ _balances[owner] = _totalSupply;\n684-expression_statement-119-119", method="", type_label=expression_statement];
700 [label="121_ address winner_tmstmp23;\n700-new_variable-122-122", method="", type_label=new_variable];
704 [label="122_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n704-function_definition-123-126", method="play_tmstmp23(uint startTime)", type_label=function_definition];
712 [label="123_ uint _vtime = block.timestamp;\n712-new_variable-124-124", method="play_tmstmp23(uint startTime)", type_label=new_variable];
720 [label="124_ if_startTime + (5 * 1 days) == _vtime\n720-if-125-126", method="play_tmstmp23(uint startTime)", type_label=if];
2300 [label="124_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
731 [label="125_ winner_tmstmp23 = msg.sender;\n731-expression_statement-126-126", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
737 [label="126_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n737-function_definition-127-129", method="totalSupply()", type_label=function_definition];
746 [label="127_ return _totalSupply;\n746-return-128-128", method="totalSupply()", type_label=return];
748 [label="129_ address winner_tmstmp14;\n748-new_variable-130-130", method="", type_label=new_variable];
752 [label="130_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n752-function_definition-131-133", method="play_tmstmp14(uint startTime)", type_label=function_definition];
760 [label="131_ if_startTime + (5 * 1 days) == block.timestamp\n760-if-132-133", method="play_tmstmp14(uint startTime)", type_label=if];
2340 [label="131_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
773 [label="132_ winner_tmstmp14 = msg.sender;\n773-expression_statement-133-133", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
779 [label="133_ function balanceOf(address _owner) public view returns (uint256) {\n        return _balances[_owner];\n    }\n779-function_definition-134-136", method="balanceOf(address _owner)", type_label=function_definition];
792 [label="134_ return _balances[_owner];\n792-return-135-135", method="balanceOf(address _owner)", type_label=return];
796 [label="136_ address winner_tmstmp30;\n796-new_variable-137-137", method="", type_label=new_variable];
800 [label="137_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n800-function_definition-138-140", method="play_tmstmp30(uint startTime)", type_label=function_definition];
808 [label="138_ if_startTime + (5 * 1 days) == block.timestamp\n808-if-139-140", method="play_tmstmp30(uint startTime)", type_label=if];
2388 [label="138_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
821 [label="139_ winner_tmstmp30 = msg.sender;\n821-expression_statement-140-140", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
827 [label="140_ function allowance(address _owner, address _spender) public view returns (uint256) {\n        return _allowed[_owner][_spender];\n    }\n827-function_definition-141-143", method="allowance(address _owner,address _spender)", type_label=function_definition];
844 [label="141_ return _allowed[_owner][_spender];\n844-return-142-142", method="allowance(address _owner,address _spender)", type_label=return];
850 [label="143_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n850-function_definition-144-152", method="bug_tmstmp8()", type_label=function_definition];
855 [label="144_ uint pastBlockTime_tmstmp8;\n855-new_variable-145-145", method="bug_tmstmp8()", type_label=new_variable];
860 [label="145_ require(msg.value == 10 ether);\n860-expression_statement-146-146", method="bug_tmstmp8()", type_label=expression_statement];
870 [label="146_ require(now != pastBlockTime_tmstmp8);\n870-expression_statement-147-147", method="bug_tmstmp8()", type_label=expression_statement];
877 [label="147_ pastBlockTime_tmstmp8 = now;\n877-expression_statement-148-148", method="bug_tmstmp8()", type_label=expression_statement];
881 [label="148_ if_now % 15 == 0\n881-if-149-151", method="bug_tmstmp8()", type_label=if];
2461 [label="148_ end_if", method="bug_tmstmp8()", type_label=end_if];
888 [label="149_ msg.sender.transfer(address(this).balance);\n888-expression_statement-150-150", method="bug_tmstmp8()", type_label=expression_statement];
901 [label="152_ function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n901-function_definition-153-156", method="transfer(address _to,uint256 _value)", type_label=function_definition];
911 [label="152_ onlyPayloadSize(2 * 32)\n911-expression_statement-153-153", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
923 [label="153_ _transfer(msg.sender, _to, _value);\n923-expression_statement-154-154", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
934 [label="154_ return true;\n934-return-155-155", method="transfer(address _to,uint256 _value)", type_label=return];
937 [label="156_ address winner_tmstmp39;\n937-new_variable-157-157", method="", type_label=new_variable];
941 [label="157_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n941-function_definition-158-161", method="play_tmstmp39(uint startTime)", type_label=function_definition];
949 [label="158_ uint _vtime = block.timestamp;\n949-new_variable-159-159", method="play_tmstmp39(uint startTime)", type_label=new_variable];
957 [label="159_ if_startTime + (5 * 1 days) == _vtime\n957-if-160-161", method="play_tmstmp39(uint startTime)", type_label=if];
2537 [label="159_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
968 [label="160_ winner_tmstmp39 = msg.sender;\n968-expression_statement-161-161", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
974 [label="161_ function approve(address _spender, uint256 _value) public returns (bool) {\n        _approve(msg.sender, _spender, _value);\n        return true;\n    }\n974-function_definition-162-165", method="approve(address _spender,uint256 _value)", type_label=function_definition];
990 [label="162_ _approve(msg.sender, _spender, _value);\n990-expression_statement-163-163", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
1001 [label="163_ return true;\n1001-return-164-164", method="approve(address _spender,uint256 _value)", type_label=return];
1004 [label="165_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1004-function_definition-166-174", method="bug_tmstmp36()", type_label=function_definition];
1009 [label="166_ uint pastBlockTime_tmstmp36;\n1009-new_variable-167-167", method="bug_tmstmp36()", type_label=new_variable];
1014 [label="167_ require(msg.value == 10 ether);\n1014-expression_statement-168-168", method="bug_tmstmp36()", type_label=expression_statement];
1024 [label="168_ require(now != pastBlockTime_tmstmp36);\n1024-expression_statement-169-169", method="bug_tmstmp36()", type_label=expression_statement];
1031 [label="169_ pastBlockTime_tmstmp36 = now;\n1031-expression_statement-170-170", method="bug_tmstmp36()", type_label=expression_statement];
1035 [label="170_ if_now % 15 == 0\n1035-if-171-173", method="bug_tmstmp36()", type_label=if];
2615 [label="170_ end_if", method="bug_tmstmp36()", type_label=end_if];
1042 [label="171_ msg.sender.transfer(address(this).balance);\n1042-expression_statement-172-172", method="bug_tmstmp36()", type_label=expression_statement];
1055 [label="174_ function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool) {\n        _transfer(_from, _to, _value);\n        _approve(_from, msg.sender, _allowed[_from][msg.sender].sub(_value));\n        return true;\n    }\n1055-function_definition-175-179", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
1069 [label="174_ onlyPayloadSize(3 * 32)\n1069-expression_statement-175-175", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1081 [label="175_ _transfer(_from, _to, _value);\n1081-expression_statement-176-176", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1090 [label="176_ _approve(_from, msg.sender, _allowed[_from][msg.sender].sub(_value));\n1090-expression_statement-177-177", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1112 [label="177_ return true;\n1112-return-178-178", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
1115 [label="179_ address winner_tmstmp35;\n1115-new_variable-180-180", method="", type_label=new_variable];
1119 [label="180_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1119-function_definition-181-184", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1127 [label="181_ uint _vtime = block.timestamp;\n1127-new_variable-182-182", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1135 [label="182_ if_startTime + (5 * 1 days) == _vtime\n1135-if-183-184", method="play_tmstmp35(uint startTime)", type_label=if];
2715 [label="182_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1146 [label="183_ winner_tmstmp35 = msg.sender;\n1146-expression_statement-184-184", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1152 [label="184_ function _transfer(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\n        _balances[_from] = _balances[_from].sub(_value);\n        _balances[_to] = _balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n    }\n1152-function_definition-185-190", method="_transfer(address _from,address _to,uint256 _value)", type_label=function_definition];
1168 [label="185_ require(_to != address(0), \"ERC20: transfer to the zero address\");\n1168-expression_statement-186-186", method="_transfer(address _from,address _to,uint256 _value)", type_label=expression_statement];
1180 [label="186_ _balances[_from] = _balances[_from].sub(_value);\n1180-expression_statement-187-187", method="_transfer(address _from,address _to,uint256 _value)", type_label=expression_statement];
1193 [label="187_ _balances[_to] = _balances[_to].add(_value);\n1193-expression_statement-188-188", method="_transfer(address _from,address _to,uint256 _value)", type_label=expression_statement];
1214 [label="190_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1214-function_definition-191-199", method="bug_tmstmp40()", type_label=function_definition];
1219 [label="191_ uint pastBlockTime_tmstmp40;\n1219-new_variable-192-192", method="bug_tmstmp40()", type_label=new_variable];
1224 [label="192_ require(msg.value == 10 ether);\n1224-expression_statement-193-193", method="bug_tmstmp40()", type_label=expression_statement];
1234 [label="193_ require(now != pastBlockTime_tmstmp40);\n1234-expression_statement-194-194", method="bug_tmstmp40()", type_label=expression_statement];
1241 [label="194_ pastBlockTime_tmstmp40 = now;\n1241-expression_statement-195-195", method="bug_tmstmp40()", type_label=expression_statement];
1245 [label="195_ if_now % 15 == 0\n1245-if-196-198", method="bug_tmstmp40()", type_label=if];
2825 [label="195_ end_if", method="bug_tmstmp40()", type_label=end_if];
1252 [label="196_ msg.sender.transfer(address(this).balance);\n1252-expression_statement-197-197", method="bug_tmstmp40()", type_label=expression_statement];
1265 [label="199_ function _approve(address _owner, address _spender, uint256 _value) internal {\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\n        _allowed[_owner][_spender] = _value;\n        emit Approval(_owner, _spender, _value);\n    }\n1265-function_definition-200-205", method="_approve(address _owner,address _spender,uint256 _value)", type_label=function_definition];
1281 [label="200_ require(_owner != address(0), \"ERC20: approve from the zero address\");\n1281-expression_statement-201-201", method="_approve(address _owner,address _spender,uint256 _value)", type_label=expression_statement];
1293 [label="201_ require(_spender != address(0), \"ERC20: approve to the zero address\");\n1293-expression_statement-202-202", method="_approve(address _owner,address _spender,uint256 _value)", type_label=expression_statement];
1305 [label="202_ _allowed[_owner][_spender] = _value;\n1305-expression_statement-203-203", method="_approve(address _owner,address _spender,uint256 _value)", type_label=expression_statement];
1321 [label="205_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1321-function_definition-206-208", method="bug_tmstmp33()", type_label=function_definition];
1330 [label="206_ return block.timestamp >= 1546300800;\n1330-return-207-207", method="bug_tmstmp33()", type_label=return];
1336 [label="208_ function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n        require(_totalSupply.add(_amount) <= cap);\n        _totalSupply = _totalSupply.add(_amount);\n        _balances[_to] = _balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n1336-function_definition-209-216", method="mint(address _to,uint256 _amount)", type_label=function_definition];
1346 [label="208_ onlyOwner\n1346-expression_statement-209-209", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
1354 [label="209_ require(_totalSupply.add(_amount) <= cap);\n1354-expression_statement-210-210", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
1366 [label="210_ _totalSupply = _totalSupply.add(_amount);\n1366-expression_statement-211-211", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
1375 [label="211_ _balances[_to] = _balances[_to].add(_amount);\n1375-expression_statement-212-212", method="mint(address _to,uint256 _amount)", type_label=expression_statement];
1404 [label="214_ return true;\n1404-return-215-215", method="mint(address _to,uint256 _amount)", type_label=return];
1407 [label="216_ address winner_tmstmp27;\n1407-new_variable-217-217", method="", type_label=new_variable];
1411 [label="217_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1411-function_definition-218-221", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1419 [label="218_ uint _vtime = block.timestamp;\n1419-new_variable-219-219", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1427 [label="219_ if_startTime + (5 * 1 days) == _vtime\n1427-if-220-221", method="play_tmstmp27(uint startTime)", type_label=if];
3007 [label="219_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1438 [label="220_ winner_tmstmp27 = msg.sender;\n1438-expression_statement-221-221", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1444 [label="221_ function transferBatch(address[] memory _tos, uint256[] memory _values) public returns (bool) {\n        require(_tos.length == _values.length);\n        for (uint256 i = 0; i < _tos.length; i++) {\n            transfer(_tos[i], _values[i]);\n        }\n        return true;\n    }\n1444-function_definition-222-228", method="transferBatch(address[] memory _tos,uint256[] memory _values)", type_label=function_definition];
1462 [label="222_ require(_tos.length == _values.length);\n1462-expression_statement-223-223", method="transferBatch(address[] memory _tos,uint256[] memory _values)", type_label=expression_statement];
1473 [label="223_ for(i < _tos.length;;i++)\n1473-for-224-226", method="transferBatch(address[] memory _tos,uint256[] memory _values)", type_label=for];
3053 [label="223_ end_loop", method="transferBatch(address[] memory _tos,uint256[] memory _values)", type_label=end_loop];
1486 [label="223_ i++\n1486-expression_statement-224-224", method="transferBatch(address[] memory _tos,uint256[] memory _values)", type_label=expression_statement];
1489 [label="224_ transfer(_tos[i], _values[i]);\n1489-expression_statement-225-225", method="transferBatch(address[] memory _tos,uint256[] memory _values)", type_label=expression_statement];
1500 [label="226_ return true;\n1500-return-227-227", method="transferBatch(address[] memory _tos,uint256[] memory _values)", type_label=return];
1503 [label="228_ address winner_tmstmp31;\n1503-new_variable-229-229", method="", type_label=new_variable];
1507 [label="229_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1507-function_definition-230-233", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1515 [label="230_ uint _vtime = block.timestamp;\n1515-new_variable-231-231", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1523 [label="231_ if_startTime + (5 * 1 days) == _vtime\n1523-if-232-233", method="play_tmstmp31(uint startTime)", type_label=if];
3103 [label="231_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1534 [label="232_ winner_tmstmp31 = msg.sender;\n1534-expression_statement-233-233", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1547 [label="235_ TokenERC20(18*10**16, 12*10**16, \"XL Token\", \"XL\", 8)\n1547-expression_statement-236-236", method="", type_label=expression_statement];
1570 [label="236_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1570-function_definition-237-239", method="bug_tmstmp13()", type_label=function_definition];
1579 [label="237_ return block.timestamp >= 1546300800;\n1579-return-238-238", method="bug_tmstmp13()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1540;
15 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 38  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
33 -> 1613  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1613 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 1613  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
38 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
40 -> 46  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
46 -> 55  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
57 -> 74  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
74 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
78 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
102 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
106 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
137 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
142 -> 151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
174 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
190 -> 201  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
190 -> 1770  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1770 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 1770  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
207 -> 221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
239 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
248 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
254 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
271 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 290  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
279 -> 1859  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1859 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
290 -> 1859  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
296 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
305 -> 313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 326  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
313 -> 1893  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1893 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 1893  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
337 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
347 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 375  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
368 -> 1948  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1948 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 1948  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
393 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 431  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
424 -> 2004  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2004 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
431 -> 2004  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
444 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 474  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
461 -> 2041  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2041 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 2041  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
487 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
514 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 525  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
518 -> 2098  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2098 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 2098  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
538 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
672 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 731  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
720 -> 2300  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2300 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 2300  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
737 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
752 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
760 -> 773  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
760 -> 2340  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2340 -> 779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 2340  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
779 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
800 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 821  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
808 -> 2388  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2388 -> 827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 2388  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
827 -> 844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
850 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
860 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
870 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 888  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
881 -> 2461  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2461 -> 901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
888 -> 2461  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
901 -> 923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
934 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
941 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 968  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
957 -> 2537  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2537 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 2537  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
974 -> 990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
990 -> 1001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1001 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1004 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1024 -> 1031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 1035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 1042  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1035 -> 2615  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2615 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 2615  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1055 -> 1081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1081 -> 1090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1119 -> 1127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1135 -> 1146  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1135 -> 2715  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2715 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 2715  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1152 -> 1168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1168 -> 1180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1180 -> 1193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1214 -> 1219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 1234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1234 -> 1241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1241 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1245 -> 1252  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1245 -> 2825  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2825 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1252 -> 2825  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1265 -> 1281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1281 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1293 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1330 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1336 -> 1354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1354 -> 1366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1366 -> 1375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1411 -> 1419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1419 -> 1427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1427 -> 1438  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1427 -> 3007  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3007 -> 1444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 3007  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1444 -> 1462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1462 -> 1473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1473 -> 1489  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1473 -> 3053  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3053 -> 1500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 1473  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1489 -> 1486  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1500 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1507 -> 1515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1515 -> 1523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1523 -> 1534  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1523 -> 3103  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3103 -> 1540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1534 -> 3103  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1570 -> 1579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1579 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
