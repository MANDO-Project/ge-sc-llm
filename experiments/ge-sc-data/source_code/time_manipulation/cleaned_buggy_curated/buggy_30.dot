digraph  {
13 [label="2_ function name() external view returns (string memory);\n13-function_definition-3-3", method="name()", type_label=function_definition];
21 [label="3_ function symbol() external view returns (string memory);\n21-function_definition-4-4", method="symbol()", type_label=function_definition];
29 [label="4_ function granularity() external view returns (uint256);\n29-function_definition-5-5", method="granularity()", type_label=function_definition];
37 [label="5_ function totalSupply() external view returns (uint256);\n37-function_definition-6-6", method="totalSupply()", type_label=function_definition];
45 [label="6_ function balanceOf(address owner) external view returns (uint256);\n45-function_definition-7-7", method="balanceOf(address owner)", type_label=function_definition];
57 [label="7_ function send(address recipient, uint256 amount, bytes calldata data) external;\n57-function_definition-8-8", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=function_definition];
72 [label="8_ function burn(uint256 amount, bytes calldata data) external;\n72-function_definition-9-9", method="burn(uint256 amount,bytes calldata data)", type_label=function_definition];
83 [label="9_ function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n83-function_definition-10-10", method="isOperatorFor(address operator,address tokenHolder)", type_label=function_definition];
99 [label="10_ function authorizeOperator(address operator) external;\n99-function_definition-11-11", method="authorizeOperator(address operator)", type_label=function_definition];
106 [label="11_ function revokeOperator(address operator) external;\n106-function_definition-12-12", method="revokeOperator(address operator)", type_label=function_definition];
113 [label="12_ function defaultOperators() external view returns (address[] memory);\n113-function_definition-13-13", method="defaultOperators()", type_label=function_definition];
122 [label="13_ function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n122-function_definition-14-20", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
145 [label="20_ function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n145-function_definition-21-26", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
257 [label="40_ function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n257-function_definition-41-48", method="tokensReceived(address operator,address from,address to,uint amount,bytes calldata userData,bytes calldata operatorData)", type_label=function_definition];
287 [label="50_ function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n287-function_definition-51-58", method="tokensToSend(address operator,address from,address to,uint amount,bytes calldata userData,bytes calldata operatorData)", type_label=function_definition];
317 [label="60_ function totalSupply() external view returns (uint256);\n317-function_definition-61-61", method="totalSupply()", type_label=function_definition];
325 [label="61_ function balanceOf(address account) external view returns (uint256);\n325-function_definition-62-62", method="balanceOf(address account)", type_label=function_definition];
337 [label="62_ function transfer(address recipient, uint256 amount) external returns (bool);\n337-function_definition-63-63", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
352 [label="63_ function allowance(address owner, address spender) external view returns (uint256);\n352-function_definition-64-64", method="allowance(address owner,address spender)", type_label=function_definition];
368 [label="64_ function approve(address spender, uint256 amount) external returns (bool);\n368-function_definition-65-65", method="approve(address spender,uint256 amount)", type_label=function_definition];
383 [label="65_ function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n383-function_definition-66-66", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
433 [label="70_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n433-function_definition-71-75", method="add(uint256 a,uint256 b)", type_label=function_definition];
450 [label="71_ uint256 c = a + b;\n450-new_variable-72-72", method="add(uint256 a,uint256 b)", type_label=new_variable];
458 [label="72_ require(c >= a, \"SafeMath: addition overflow\");\n458-expression_statement-73-73", method="add(uint256 a,uint256 b)", type_label=expression_statement];
468 [label="73_ return c;\n468-return-74-74", method="add(uint256 a,uint256 b)", type_label=return];
470 [label="75_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n470-function_definition-76-80", method="sub(uint256 a,uint256 b)", type_label=function_definition];
487 [label="76_ require(b <= a, \"SafeMath: subtraction overflow\");\n487-expression_statement-77-77", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
497 [label="77_ uint256 c = a - b;\n497-new_variable-78-78", method="sub(uint256 a,uint256 b)", type_label=new_variable];
505 [label="78_ return c;\n505-return-79-79", method="sub(uint256 a,uint256 b)", type_label=return];
507 [label="80_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n507-function_definition-81-88", method="mul(uint256 a,uint256 b)", type_label=function_definition];
524 [label="81_ if_a == 0\n524-if-82-84", method="mul(uint256 a,uint256 b)", type_label=if];
4744 [label="81_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
529 [label="82_ return 0;\n529-return-83-83", method="mul(uint256 a,uint256 b)", type_label=return];
531 [label="84_ uint256 c = a * b;\n531-new_variable-85-85", method="mul(uint256 a,uint256 b)", type_label=new_variable];
539 [label="85_ require(c / a == b, \"SafeMath: multiplication overflow\");\n539-expression_statement-86-86", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
551 [label="86_ return c;\n551-return-87-87", method="mul(uint256 a,uint256 b)", type_label=return];
553 [label="88_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n553-function_definition-89-93", method="div(uint256 a,uint256 b)", type_label=function_definition];
570 [label="89_ require(b > 0, \"SafeMath: division by zero\");\n570-expression_statement-90-90", method="div(uint256 a,uint256 b)", type_label=expression_statement];
580 [label="90_ uint256 c = a / b;\n580-new_variable-91-91", method="div(uint256 a,uint256 b)", type_label=new_variable];
588 [label="91_ return c;\n588-return-92-92", method="div(uint256 a,uint256 b)", type_label=return];
590 [label="93_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n590-function_definition-94-97", method="mod(uint256 a,uint256 b)", type_label=function_definition];
607 [label="94_ require(b != 0, \"SafeMath: modulo by zero\");\n607-expression_statement-95-95", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
617 [label="95_ return a % b;\n617-return-96-96", method="mod(uint256 a,uint256 b)", type_label=return];
624 [label="99_ function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n624-function_definition-100-104", method="isContract(address account)", type_label=function_definition];
637 [label="100_ uint256 size;\n637-new_variable-101-101", method="isContract(address account)", type_label=new_variable];
652 [label="102_ return size > 0;\n652-return-103-103", method="isContract(address account)", type_label=return];
659 [label="106_ function setManager(address account, address newManager) external;\n659-function_definition-107-107", method="setManager(address account,address newManager)", type_label=function_definition];
670 [label="107_ function getManager(address account) external view returns (address);\n670-function_definition-108-108", method="getManager(address account)", type_label=function_definition];
682 [label="108_ function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n682-function_definition-109-109", method="setInterfaceImplementer(address account,bytes32 interfaceHash,address implementer)", type_label=function_definition];
697 [label="109_ function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n697-function_definition-110-110", method="getInterfaceImplementer(address account,bytes32 interfaceHash)", type_label=function_definition];
713 [label="110_ function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n713-function_definition-111-111", method="interfaceHash(string calldata interfaceName)", type_label=function_definition];
725 [label="111_ function updateERC165Cache(address account, bytes4 interfaceId) external;\n725-function_definition-112-112", method="updateERC165Cache(address account,bytes4 interfaceId)", type_label=function_definition];
736 [label="112_ function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n736-function_definition-113-113", method="implementsERC165Interface(address account,bytes4 interfaceId)", type_label=function_definition];
752 [label="113_ function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n752-function_definition-114-114", method="implementsERC165InterfaceNoCache(address account,bytes4 interfaceId)", type_label=function_definition];
811 [label="120_ IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n811-new_variable-121-121", method="", type_label=new_variable];
821 [label="121_ mapping(address => uint256) private _balances;\n821-new_variable-122-122", method="", type_label=new_variable];
828 [label="122_ uint256 private _totalSupply;\n828-new_variable-123-123", method="", type_label=new_variable];
833 [label="123_ string private _name;\n833-new_variable-124-124", method="", type_label=new_variable];
838 [label="124_ string private _symbol;\n838-new_variable-125-125", method="", type_label=new_variable];
843 [label="125_ bytes32 constant private TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n843-new_variable-126-127", method="", type_label=new_variable];
849 [label="127_ bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n849-new_variable-128-129", method="", type_label=new_variable];
855 [label="129_ address[] private _defaultOperatorsArray;\n855-new_variable-130-130", method="", type_label=new_variable];
861 [label="130_ mapping(address => bool) private _defaultOperators;\n861-new_variable-131-131", method="", type_label=new_variable];
868 [label="131_ mapping(address => mapping(address => bool)) private _operators;\n868-new_variable-132-132", method="", type_label=new_variable];
877 [label="132_ mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n877-new_variable-133-133", method="", type_label=new_variable];
886 [label="133_ mapping (address => mapping (address => uint256)) private _allowances;\n886-new_variable-134-134", method="", type_label=new_variable];
910 [label="139_ _name = name;\n910-expression_statement-140-140", method="", type_label=expression_statement];
914 [label="140_ _symbol = symbol;\n914-expression_statement-141-141", method="", type_label=expression_statement];
918 [label="141_ _defaultOperatorsArray = defaultOperators;\n918-expression_statement-142-142", method="", type_label=expression_statement];
922 [label="142_ for(i < _defaultOperatorsArray.length;;i++)\n922-for-143-145", method="", type_label=for];
5142 [label="142_ end_loop", method="", type_label=end_loop];
935 [label="142_ i++\n935-expression_statement-143-143", method="", type_label=expression_statement];
938 [label="143_ _defaultOperators[_defaultOperatorsArray[i]] = true;\n938-expression_statement-144-144", method="", type_label=expression_statement];
947 [label="145_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n947-expression_statement-146-146", method="", type_label=expression_statement];
966 [label="146_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n966-expression_statement-147-147", method="", type_label=expression_statement];
985 [label="148_ function name() public view returns (string memory) {\n        return _name;\n    }\n985-function_definition-149-151", method="name()", type_label=function_definition];
994 [label="149_ return _name;\n994-return-150-150", method="name()", type_label=return];
996 [label="151_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n996-function_definition-152-154", method="symbol()", type_label=function_definition];
1005 [label="152_ return _symbol;\n1005-return-153-153", method="symbol()", type_label=return];
1007 [label="154_ function decimals() public pure returns (uint8) {\n        return 18;\n    }\n1007-function_definition-155-157", method="decimals()", type_label=function_definition];
1016 [label="155_ return 18;\n1016-return-156-156", method="decimals()", type_label=return];
1018 [label="157_ function granularity() public view returns (uint256) {\n        return 1;\n    }\n1018-function_definition-158-160", method="granularity()", type_label=function_definition];
1027 [label="158_ return 1;\n1027-return-159-159", method="granularity()", type_label=return];
1029 [label="160_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1029-function_definition-161-163", method="totalSupply()", type_label=function_definition];
1038 [label="161_ return _totalSupply;\n1038-return-162-162", method="totalSupply()", type_label=return];
1040 [label="163_ address winner_tmstmp18;\n1040-new_variable-164-164", method="", type_label=new_variable];
1044 [label="164_ function play_tmstmp18(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp18 = msg.sender;}}\n1044-function_definition-165-167", method="play_tmstmp18(uint startTime)", type_label=function_definition];
1052 [label="165_ if_startTime + (5 * 1 days) == block.timestamp\n1052-if-166-167", method="play_tmstmp18(uint startTime)", type_label=if];
5272 [label="165_ end_if", method="play_tmstmp18(uint startTime)", type_label=end_if];
1065 [label="166_ winner_tmstmp18 = msg.sender;\n1065-expression_statement-167-167", method="play_tmstmp18(uint startTime)", type_label=expression_statement];
1071 [label="167_ function balanceOf(address tokenHolder) public view returns (uint256) {\n        return _balances[tokenHolder];\n    }\n1071-function_definition-168-170", method="balanceOf(address tokenHolder)", type_label=function_definition];
1084 [label="168_ return _balances[tokenHolder];\n1084-return-169-169", method="balanceOf(address tokenHolder)", type_label=return];
1088 [label="170_ function bug_tmstmp29() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1088-function_definition-171-173", method="bug_tmstmp29()", type_label=function_definition];
1097 [label="171_ return block.timestamp >= 1546300800;\n1097-return-172-172", method="bug_tmstmp29()", type_label=return];
1103 [label="173_ function send(address recipient, uint256 amount, bytes calldata data) external {\n        _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n    }\n1103-function_definition-174-176", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=function_definition];
1119 [label="174_ _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n1119-expression_statement-175-175", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=expression_statement];
1142 [label="176_ address winner_tmstmp6;\n1142-new_variable-177-177", method="", type_label=new_variable];
1146 [label="177_ function play_tmstmp6(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp6 = msg.sender;}}\n1146-function_definition-178-180", method="play_tmstmp6(uint startTime)", type_label=function_definition];
1154 [label="178_ if_startTime + (5 * 1 days) == block.timestamp\n1154-if-179-180", method="play_tmstmp6(uint startTime)", type_label=if];
5374 [label="178_ end_if", method="play_tmstmp6(uint startTime)", type_label=end_if];
1167 [label="179_ winner_tmstmp6 = msg.sender;\n1167-expression_statement-180-180", method="play_tmstmp6(uint startTime)", type_label=expression_statement];
1173 [label="180_ function transfer(address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        address from = msg.sender;\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n        _move(from, from, recipient, amount, \"\", \"\");\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n1173-function_definition-181-188", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
1189 [label="181_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n1189-expression_statement-182-182", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1201 [label="182_ address from = msg.sender;\n1201-new_variable-183-183", method="transfer(address recipient,uint256 amount)", type_label=new_variable];
1209 [label="183_ _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n1209-expression_statement-184-184", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1226 [label="184_ _move(from, from, recipient, amount, \"\", \"\");\n1226-expression_statement-185-185", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1243 [label="185_ _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n1243-expression_statement-186-186", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1263 [label="186_ return true;\n1263-return-187-187", method="transfer(address recipient,uint256 amount)", type_label=return];
1266 [label="188_ function bug_tmstmp16 () public payable {\n	uint pastBlockTime_tmstmp16;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp16);  \n        pastBlockTime_tmstmp16 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1266-function_definition-189-197", method="bug_tmstmp16()", type_label=function_definition];
1271 [label="189_ uint pastBlockTime_tmstmp16;\n1271-new_variable-190-190", method="bug_tmstmp16()", type_label=new_variable];
1276 [label="190_ require(msg.value == 10 ether);\n1276-expression_statement-191-191", method="bug_tmstmp16()", type_label=expression_statement];
1286 [label="191_ require(now != pastBlockTime_tmstmp16);\n1286-expression_statement-192-192", method="bug_tmstmp16()", type_label=expression_statement];
1293 [label="192_ pastBlockTime_tmstmp16 = now;\n1293-expression_statement-193-193", method="bug_tmstmp16()", type_label=expression_statement];
1297 [label="193_ if_now % 15 == 0\n1297-if-194-196", method="bug_tmstmp16()", type_label=if];
5517 [label="193_ end_if", method="bug_tmstmp16()", type_label=end_if];
1304 [label="194_ msg.sender.transfer(address(this).balance);\n1304-expression_statement-195-195", method="bug_tmstmp16()", type_label=expression_statement];
1317 [label="197_ function burn(uint256 amount, bytes calldata data) external {\n        _burn(msg.sender, msg.sender, amount, data, \"\");\n    }\n1317-function_definition-198-200", method="burn(uint256 amount,bytes calldata data)", type_label=function_definition];
1329 [label="198_ _burn(msg.sender, msg.sender, amount, data, \"\");\n1329-expression_statement-199-199", method="burn(uint256 amount,bytes calldata data)", type_label=expression_statement];
1347 [label="200_ function bug_tmstmp24 () public payable {\n	uint pastBlockTime_tmstmp24;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp24);  \n        pastBlockTime_tmstmp24 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1347-function_definition-201-209", method="bug_tmstmp24()", type_label=function_definition];
1352 [label="201_ uint pastBlockTime_tmstmp24;\n1352-new_variable-202-202", method="bug_tmstmp24()", type_label=new_variable];
1357 [label="202_ require(msg.value == 10 ether);\n1357-expression_statement-203-203", method="bug_tmstmp24()", type_label=expression_statement];
1367 [label="203_ require(now != pastBlockTime_tmstmp24);\n1367-expression_statement-204-204", method="bug_tmstmp24()", type_label=expression_statement];
1374 [label="204_ pastBlockTime_tmstmp24 = now;\n1374-expression_statement-205-205", method="bug_tmstmp24()", type_label=expression_statement];
1378 [label="205_ if_now % 15 == 0\n1378-if-206-208", method="bug_tmstmp24()", type_label=if];
5598 [label="205_ end_if", method="bug_tmstmp24()", type_label=end_if];
1385 [label="206_ msg.sender.transfer(address(this).balance);\n1385-expression_statement-207-207", method="bug_tmstmp24()", type_label=expression_statement];
1398 [label="209_ function isOperatorFor(\n        address operator,\n        address tokenHolder\n    ) public view returns (bool) {\n        return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n    }\n1398-function_definition-210-217", method="isOperatorFor(address operator,address tokenHolder)", type_label=function_definition];
1415 [label="213_ return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n1415-return-214-216", method="isOperatorFor(address operator,address tokenHolder)", type_label=return];
1437 [label="217_ function bug_tmstmp5() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1437-function_definition-218-220", method="bug_tmstmp5()", type_label=function_definition];
1446 [label="218_ return block.timestamp >= 1546300800;\n1446-return-219-219", method="bug_tmstmp5()", type_label=return];
1452 [label="220_ function authorizeOperator(address operator) external {\n        require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n        if (_defaultOperators[operator]) {\n            delete _revokedDefaultOperators[msg.sender][operator];\n        } else {\n            _operators[msg.sender][operator] = true;\n        }\n        emit AuthorizedOperator(operator, msg.sender);\n    }\n1452-function_definition-221-229", method="authorizeOperator(address operator)", type_label=function_definition];
1460 [label="221_ require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n1460-expression_statement-222-222", method="authorizeOperator(address operator)", type_label=expression_statement];
1472 [label="222_ if\n1472-if-223-227", method="authorizeOperator(address operator)", type_label=if];
5692 [label="222_ end_if", method="authorizeOperator(address operator)", type_label=end_if];
1477 [label="223_ delete _revokedDefaultOperators[msg.sender][operator];\n1477-expression_statement-224-224", method="authorizeOperator(address operator)", type_label=expression_statement];
1487 [label="225_ _operators[msg.sender][operator] = true;\n1487-expression_statement-226-226", method="authorizeOperator(address operator)", type_label=expression_statement];
1506 [label="229_ address winner_tmstmp15;\n1506-new_variable-230-230", method="", type_label=new_variable];
1510 [label="230_ function play_tmstmp15(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp15 = msg.sender;}}\n1510-function_definition-231-234", method="play_tmstmp15(uint startTime)", type_label=function_definition];
1518 [label="231_ uint _vtime = block.timestamp;\n1518-new_variable-232-232", method="play_tmstmp15(uint startTime)", type_label=new_variable];
1526 [label="232_ if_startTime + (5 * 1 days) == _vtime\n1526-if-233-234", method="play_tmstmp15(uint startTime)", type_label=if];
5746 [label="232_ end_if", method="play_tmstmp15(uint startTime)", type_label=end_if];
1537 [label="233_ winner_tmstmp15 = msg.sender;\n1537-expression_statement-234-234", method="play_tmstmp15(uint startTime)", type_label=expression_statement];
1543 [label="234_ function revokeOperator(address operator) external {\n        require(operator != msg.sender, \"ERC777: revoking self as operator\");\n        if (_defaultOperators[operator]) {\n            _revokedDefaultOperators[msg.sender][operator] = true;\n        } else {\n            delete _operators[msg.sender][operator];\n        }\n        emit RevokedOperator(operator, msg.sender);\n    }\n1543-function_definition-235-243", method="revokeOperator(address operator)", type_label=function_definition];
1551 [label="235_ require(operator != msg.sender, \"ERC777: revoking self as operator\");\n1551-expression_statement-236-236", method="revokeOperator(address operator)", type_label=expression_statement];
1563 [label="236_ if\n1563-if-237-241", method="revokeOperator(address operator)", type_label=if];
5783 [label="236_ end_if", method="revokeOperator(address operator)", type_label=end_if];
1568 [label="237_ _revokedDefaultOperators[msg.sender][operator] = true;\n1568-expression_statement-238-238", method="revokeOperator(address operator)", type_label=expression_statement];
1580 [label="239_ delete _operators[msg.sender][operator];\n1580-expression_statement-240-240", method="revokeOperator(address operator)", type_label=expression_statement];
1597 [label="243_ function bug_tmstmp28 () public payable {\n	uint pastBlockTime_tmstmp28;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp28);  \n        pastBlockTime_tmstmp28 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1597-function_definition-244-252", method="bug_tmstmp28()", type_label=function_definition];
1602 [label="244_ uint pastBlockTime_tmstmp28;\n1602-new_variable-245-245", method="bug_tmstmp28()", type_label=new_variable];
1607 [label="245_ require(msg.value == 10 ether);\n1607-expression_statement-246-246", method="bug_tmstmp28()", type_label=expression_statement];
1617 [label="246_ require(now != pastBlockTime_tmstmp28);\n1617-expression_statement-247-247", method="bug_tmstmp28()", type_label=expression_statement];
1624 [label="247_ pastBlockTime_tmstmp28 = now;\n1624-expression_statement-248-248", method="bug_tmstmp28()", type_label=expression_statement];
1628 [label="248_ if_now % 15 == 0\n1628-if-249-251", method="bug_tmstmp28()", type_label=if];
5848 [label="248_ end_if", method="bug_tmstmp28()", type_label=end_if];
1635 [label="249_ msg.sender.transfer(address(this).balance);\n1635-expression_statement-250-250", method="bug_tmstmp28()", type_label=expression_statement];
1648 [label="252_ function defaultOperators() public view returns (address[] memory) {\n        return _defaultOperatorsArray;\n    }\n1648-function_definition-253-255", method="defaultOperators()", type_label=function_definition];
1658 [label="253_ return _defaultOperatorsArray;\n1658-return-254-254", method="defaultOperators()", type_label=return];
1660 [label="255_ address winner_tmstmp34;\n1660-new_variable-256-256", method="", type_label=new_variable];
1664 [label="256_ function play_tmstmp34(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp34 = msg.sender;}}\n1664-function_definition-257-259", method="play_tmstmp34(uint startTime)", type_label=function_definition];
1672 [label="257_ if_startTime + (5 * 1 days) == block.timestamp\n1672-if-258-259", method="play_tmstmp34(uint startTime)", type_label=if];
5892 [label="257_ end_if", method="play_tmstmp34(uint startTime)", type_label=end_if];
1685 [label="258_ winner_tmstmp34 = msg.sender;\n1685-expression_statement-259-259", method="play_tmstmp34(uint startTime)", type_label=expression_statement];
1691 [label="259_ function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    )\n    external\n    {\n        require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n        _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n    }\n1691-function_definition-260-271", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
1715 [label="268_ require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n1715-expression_statement-269-269", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1730 [label="269_ _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n1730-expression_statement-270-270", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1750 [label="271_ function bug_tmstmp21() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1750-function_definition-272-274", method="bug_tmstmp21()", type_label=function_definition];
1759 [label="272_ return block.timestamp >= 1546300800;\n1759-return-273-273", method="bug_tmstmp21()", type_label=return];
1765 [label="274_ function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external {\n        require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n        _burn(msg.sender, account, amount, data, operatorData);\n    }\n1765-function_definition-275-278", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
1785 [label="275_ require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n1785-expression_statement-276-276", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1800 [label="276_ _burn(msg.sender, account, amount, data, operatorData);\n1800-expression_statement-277-277", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1815 [label="278_ address winner_tmstmp10;\n1815-new_variable-279-279", method="", type_label=new_variable];
1819 [label="279_ function play_tmstmp10(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp10 = msg.sender;}}\n1819-function_definition-280-282", method="play_tmstmp10(uint startTime)", type_label=function_definition];
1827 [label="280_ if_startTime + (5 * 1 days) == block.timestamp\n1827-if-281-282", method="play_tmstmp10(uint startTime)", type_label=if];
6047 [label="280_ end_if", method="play_tmstmp10(uint startTime)", type_label=end_if];
1840 [label="281_ winner_tmstmp10 = msg.sender;\n1840-expression_statement-282-282", method="play_tmstmp10(uint startTime)", type_label=expression_statement];
1846 [label="282_ function allowance(address holder, address spender) public view returns (uint256) {\n        return _allowances[holder][spender];\n    }\n1846-function_definition-283-285", method="allowance(address holder,address spender)", type_label=function_definition];
1863 [label="283_ return _allowances[holder][spender];\n1863-return-284-284", method="allowance(address holder,address spender)", type_label=return];
1869 [label="285_ address winner_tmstmp22;\n1869-new_variable-286-286", method="", type_label=new_variable];
1873 [label="286_ function play_tmstmp22(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp22 = msg.sender;}}\n1873-function_definition-287-289", method="play_tmstmp22(uint startTime)", type_label=function_definition];
1881 [label="287_ if_startTime + (5 * 1 days) == block.timestamp\n1881-if-288-289", method="play_tmstmp22(uint startTime)", type_label=if];
6101 [label="287_ end_if", method="play_tmstmp22(uint startTime)", type_label=end_if];
1894 [label="288_ winner_tmstmp22 = msg.sender;\n1894-expression_statement-289-289", method="play_tmstmp22(uint startTime)", type_label=expression_statement];
1900 [label="289_ function approve(address spender, uint256 value) external returns (bool) {\n        address holder = msg.sender;\n        _approve(holder, spender, value);\n        return true;\n    }\n1900-function_definition-290-294", method="approve(address spender,uint256 value)", type_label=function_definition];
1916 [label="290_ address holder = msg.sender;\n1916-new_variable-291-291", method="approve(address spender,uint256 value)", type_label=new_variable];
1924 [label="291_ _approve(holder, spender, value);\n1924-expression_statement-292-292", method="approve(address spender,uint256 value)", type_label=expression_statement];
1933 [label="292_ return true;\n1933-return-293-293", method="approve(address spender,uint256 value)", type_label=return];
1936 [label="294_ function bug_tmstmp12 () public payable {\n	uint pastBlockTime_tmstmp12;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp12);  \n        pastBlockTime_tmstmp12 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1936-function_definition-295-303", method="bug_tmstmp12()", type_label=function_definition];
1941 [label="295_ uint pastBlockTime_tmstmp12;\n1941-new_variable-296-296", method="bug_tmstmp12()", type_label=new_variable];
1946 [label="296_ require(msg.value == 10 ether);\n1946-expression_statement-297-297", method="bug_tmstmp12()", type_label=expression_statement];
1956 [label="297_ require(now != pastBlockTime_tmstmp12);\n1956-expression_statement-298-298", method="bug_tmstmp12()", type_label=expression_statement];
1963 [label="298_ pastBlockTime_tmstmp12 = now;\n1963-expression_statement-299-299", method="bug_tmstmp12()", type_label=expression_statement];
1967 [label="299_ if_now % 15 == 0\n1967-if-300-302", method="bug_tmstmp12()", type_label=if];
6187 [label="299_ end_if", method="bug_tmstmp12()", type_label=end_if];
1974 [label="300_ msg.sender.transfer(address(this).balance);\n1974-expression_statement-301-301", method="bug_tmstmp12()", type_label=expression_statement];
1987 [label="303_ function transferFrom(address holder, address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\n        address spender = msg.sender;\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n        _move(spender, holder, recipient, amount, \"\", \"\");\n        _approve(holder, spender, _allowances[holder][spender].sub(amount));\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n1987-function_definition-304-313", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=function_definition];
2007 [label="304_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n2007-expression_statement-305-305", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2019 [label="305_ require(holder != address(0), \"ERC777: transfer from the zero address\");\n2019-expression_statement-306-306", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2031 [label="306_ address spender = msg.sender;\n2031-new_variable-307-307", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=new_variable];
2039 [label="307_ _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n2039-expression_statement-308-308", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2056 [label="308_ _move(spender, holder, recipient, amount, \"\", \"\");\n2056-expression_statement-309-309", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2073 [label="309_ _approve(holder, spender, _allowances[holder][spender].sub(amount));\n2073-expression_statement-310-310", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2091 [label="310_ _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n2091-expression_statement-311-311", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
2111 [label="311_ return true;\n2111-return-312-312", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=return];
2114 [label="313_ address winner_tmstmp11;\n2114-new_variable-314-314", method="", type_label=new_variable];
2118 [label="314_ function play_tmstmp11(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp11 = msg.sender;}}\n2118-function_definition-315-318", method="play_tmstmp11(uint startTime)", type_label=function_definition];
2126 [label="315_ uint _vtime = block.timestamp;\n2126-new_variable-316-316", method="play_tmstmp11(uint startTime)", type_label=new_variable];
2134 [label="316_ if_startTime + (5 * 1 days) == _vtime\n2134-if-317-318", method="play_tmstmp11(uint startTime)", type_label=if];
6354 [label="316_ end_if", method="play_tmstmp11(uint startTime)", type_label=end_if];
2145 [label="317_ winner_tmstmp11 = msg.sender;\n2145-expression_statement-318-318", method="play_tmstmp11(uint startTime)", type_label=expression_statement];
2151 [label="318_ function _mint(\n        address operator,\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n    internal\n    {\n        require(account != address(0), \"ERC777: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n2151-function_definition-319-334", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2175 [label="327_ require(account != address(0), \"ERC777: mint to the zero address\");\n2175-expression_statement-328-328", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2187 [label="328_ _totalSupply = _totalSupply.add(amount);\n2187-expression_statement-329-329", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2196 [label="329_ _balances[account] = _balances[account].add(amount);\n2196-expression_statement-330-330", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2209 [label="330_ _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n2209-expression_statement-331-331", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2251 [label="334_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2251-function_definition-335-337", method="bug_tmstmp1()", type_label=function_definition];
2260 [label="335_ return block.timestamp >= 1546300800;\n2260-return-336-336", method="bug_tmstmp1()", type_label=return];
2266 [label="337_ function _send(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        require(from != address(0), \"ERC777: send from the zero address\");\n        require(to != address(0), \"ERC777: send to the zero address\");\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n        _move(operator, from, to, amount, userData, operatorData);\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n2266-function_definition-338-354", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=function_definition];
2298 [label="348_ require(from != address(0), \"ERC777: send from the zero address\");\n2298-expression_statement-349-349", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2310 [label="349_ require(to != address(0), \"ERC777: send to the zero address\");\n2310-expression_statement-350-350", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2322 [label="350_ _callTokensToSend(operator, from, to, amount, userData, operatorData);\n2322-expression_statement-351-351", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2337 [label="351_ _move(operator, from, to, amount, userData, operatorData);\n2337-expression_statement-352-352", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2352 [label="352_ _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n2352-expression_statement-353-353", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2369 [label="354_ address winner_tmstmp2;\n2369-new_variable-355-355", method="", type_label=new_variable];
2373 [label="355_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n2373-function_definition-356-358", method="play_tmstmp2(uint startTime)", type_label=function_definition];
2381 [label="356_ if_startTime + (5 * 1 days) == block.timestamp\n2381-if-357-358", method="play_tmstmp2(uint startTime)", type_label=if];
6601 [label="356_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
2394 [label="357_ winner_tmstmp2 = msg.sender;\n2394-expression_statement-358-358", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
2400 [label="358_ function _burn(\n        address operator,\n        address from,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n        private\n    {\n        require(from != address(0), \"ERC777: burn from the zero address\");\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[from] = _balances[from].sub(amount);\n        emit Burned(operator, from, amount, data, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n2400-function_definition-359-374", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=function_definition];
2424 [label="367_ require(from != address(0), \"ERC777: burn from the zero address\");\n2424-expression_statement-368-368", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2436 [label="368_ _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n2436-expression_statement-369-369", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2453 [label="369_ _totalSupply = _totalSupply.sub(amount);\n2453-expression_statement-370-370", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2462 [label="370_ _balances[from] = _balances[from].sub(amount);\n2462-expression_statement-371-371", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2497 [label="374_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2497-function_definition-375-377", method="bug_tmstmp17()", type_label=function_definition];
2506 [label="375_ return block.timestamp >= 1546300800;\n2506-return-376-376", method="bug_tmstmp17()", type_label=return];
2512 [label="377_ function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount);\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n2512-function_definition-378-392", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2540 [label="387_ _balances[from] = _balances[from].sub(amount);\n2540-expression_statement-388-388", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2553 [label="388_ _balances[to] = _balances[to].add(amount);\n2553-expression_statement-389-389", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2588 [label="392_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2588-function_definition-393-395", method="bug_tmstmp37()", type_label=function_definition];
2597 [label="393_ return block.timestamp >= 1546300800;\n2597-return-394-394", method="bug_tmstmp37()", type_label=return];
2603 [label="395_ function _approve(address holder, address spender, uint256 value) private {\n        require(spender != address(0), \"ERC777: approve to the zero address\");\n        _allowances[holder][spender] = value;\n        emit Approval(holder, spender, value);\n    }\n2603-function_definition-396-400", method="_approve(address holder,address spender,uint256 value)", type_label=function_definition];
2619 [label="396_ require(spender != address(0), \"ERC777: approve to the zero address\");\n2619-expression_statement-397-397", method="_approve(address holder,address spender,uint256 value)", type_label=expression_statement];
2631 [label="397_ _allowances[holder][spender] = value;\n2631-expression_statement-398-398", method="_approve(address holder,address spender,uint256 value)", type_label=expression_statement];
2647 [label="400_ address winner_tmstmp3;\n2647-new_variable-401-401", method="", type_label=new_variable];
2651 [label="401_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n2651-function_definition-402-405", method="play_tmstmp3(uint startTime)", type_label=function_definition];
2659 [label="402_ uint _vtime = block.timestamp;\n2659-new_variable-403-403", method="play_tmstmp3(uint startTime)", type_label=new_variable];
2667 [label="403_ if_startTime + (5 * 1 days) == _vtime\n2667-if-404-405", method="play_tmstmp3(uint startTime)", type_label=if];
6887 [label="403_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
2678 [label="404_ winner_tmstmp3 = msg.sender;\n2678-expression_statement-405-405", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
2684 [label="405_ function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n2684-function_definition-406-420", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2712 [label="415_ address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n2712-new_variable-416-416", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=new_variable];
2725 [label="416_ if_implementer != address(0)\n2725-if-417-419", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=if];
6945 [label="416_ end_if", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=end_if];
2732 [label="417_ IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n2732-expression_statement-418-418", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2752 [label="420_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2752-function_definition-421-423", method="bug_tmstmp9()", type_label=function_definition];
2761 [label="421_ return block.timestamp >= 1546300800;\n2761-return-422-422", method="bug_tmstmp9()", type_label=return];
2767 [label="423_ function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n        }\n    }\n2767-function_definition-424-441", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=function_definition];
2799 [label="434_ address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n2799-new_variable-435-435", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=new_variable];
2812 [label="435_ if_implementer != address(0)\n2812-if-436-440", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=if];
7032 [label="435_ end_if", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=end_if];
2819 [label="436_ IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n2819-expression_statement-437-437", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2839 [label="437_ if\n2839-if-438-440", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=if];
2842 [label="438_ require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n2842-expression_statement-439-439", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2854 [label="441_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2854-function_definition-442-444", method="bug_tmstmp25()", type_label=function_definition];
2863 [label="442_ return block.timestamp >= 1546300800;\n2863-return-443-443", method="bug_tmstmp25()", type_label=return];
2872 [label="446_ struct Role {\n        mapping (address => bool) bearer;\n    }\n2872-expression_statement-447-449", method="Role()", type_label=expression_statement];
2880 [label="449_ function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n2880-function_definition-450-453", method="add(Role storage role,address account)", type_label=function_definition];
2893 [label="450_ require(!has(role, account), \"Roles: account already has role\");\n2893-expression_statement-451-451", method="add(Role storage role,address account)", type_label=expression_statement];
2907 [label="451_ role.bearer[account] = true;\n2907-expression_statement-452-452", method="add(Role storage role,address account)", type_label=expression_statement];
2916 [label="453_ function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n2916-function_definition-454-457", method="remove(Role storage role,address account)", type_label=function_definition];
2929 [label="454_ require(has(role, account), \"Roles: account does not have role\");\n2929-expression_statement-455-455", method="remove(Role storage role,address account)", type_label=expression_statement];
2942 [label="455_ role.bearer[account] = false;\n2942-expression_statement-456-456", method="remove(Role storage role,address account)", type_label=expression_statement];
2951 [label="457_ function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n2951-function_definition-458-461", method="has(Role storage role,address account)", type_label=function_definition];
2969 [label="458_ require(account != address(0), \"Roles: account is the zero address\");\n2969-expression_statement-459-459", method="has(Role storage role,address account)", type_label=expression_statement];
2981 [label="459_ return role.bearer[account];\n2981-return-460-460", method="has(Role storage role,address account)", type_label=return];
2997 [label="464_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2997-function_definition-465-467", method="bug_tmstmp13()", type_label=function_definition];
3006 [label="465_ return block.timestamp >= 1546300800;\n3006-return-466-466", method="bug_tmstmp13()", type_label=return];
3018 [label="468_ uint256 bugv_tmstmp5 = block.timestamp;\n3018-new_variable-469-469", method="", type_label=new_variable];
3031 [label="470_ Roles.Role private _minters;\n3031-new_variable-471-471", method="", type_label=new_variable];
3040 [label="472_ _addMinter(msg.sender);\n3040-expression_statement-473-473", method="", type_label=expression_statement];
3047 [label="474_ address winner_tmstmp19;\n3047-new_variable-475-475", method="", type_label=new_variable];
3051 [label="475_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n3051-function_definition-476-479", method="play_tmstmp19(uint startTime)", type_label=function_definition];
3059 [label="476_ uint _vtime = block.timestamp;\n3059-new_variable-477-477", method="play_tmstmp19(uint startTime)", type_label=new_variable];
3067 [label="477_ if_startTime + (5 * 1 days) == _vtime\n3067-if-478-479", method="play_tmstmp19(uint startTime)", type_label=if];
7287 [label="477_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
3078 [label="478_ winner_tmstmp19 = msg.sender;\n3078-expression_statement-479-479", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
3084 [label="479_ modifier onlyMinter() {\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n3084-expression_statement-480-483", method="", type_label=expression_statement];
3087 [label="480_ require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n3087-expression_statement-481-481", method="", type_label=expression_statement];
3100 [label="481_ _;\n3100-expression_statement-482-482", method="", type_label=expression_statement];
3102 [label="483_ function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n3102-function_definition-484-486", method="isMinter(address account)", type_label=function_definition];
3115 [label="484_ return _minters.has(account);\n3115-return-485-485", method="isMinter(address account)", type_label=return];
3122 [label="486_ address winner_tmstmp26;\n3122-new_variable-487-487", method="", type_label=new_variable];
3126 [label="487_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n3126-function_definition-488-490", method="play_tmstmp26(uint startTime)", type_label=function_definition];
3134 [label="488_ if_startTime + (5 * 1 days) == block.timestamp\n3134-if-489-490", method="play_tmstmp26(uint startTime)", type_label=if];
7354 [label="488_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
3147 [label="489_ winner_tmstmp26 = msg.sender;\n3147-expression_statement-490-490", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
3153 [label="490_ function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n3153-function_definition-491-493", method="addMinter(address account)", type_label=function_definition];
3160 [label="490_ onlyMinter\n3160-expression_statement-491-491", method="addMinter(address account)", type_label=expression_statement];
3163 [label="491_ _addMinter(account);\n3163-expression_statement-492-492", method="addMinter(address account)", type_label=expression_statement];
3168 [label="493_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n3168-function_definition-494-502", method="bug_tmstmp20()", type_label=function_definition];
3173 [label="494_ uint pastBlockTime_tmstmp20;\n3173-new_variable-495-495", method="bug_tmstmp20()", type_label=new_variable];
3178 [label="495_ require(msg.value == 10 ether);\n3178-expression_statement-496-496", method="bug_tmstmp20()", type_label=expression_statement];
3188 [label="496_ require(now != pastBlockTime_tmstmp20);\n3188-expression_statement-497-497", method="bug_tmstmp20()", type_label=expression_statement];
3195 [label="497_ pastBlockTime_tmstmp20 = now;\n3195-expression_statement-498-498", method="bug_tmstmp20()", type_label=expression_statement];
3199 [label="498_ if_now % 15 == 0\n3199-if-499-501", method="bug_tmstmp20()", type_label=if];
7419 [label="498_ end_if", method="bug_tmstmp20()", type_label=end_if];
3206 [label="499_ msg.sender.transfer(address(this).balance);\n3206-expression_statement-500-500", method="bug_tmstmp20()", type_label=expression_statement];
3219 [label="502_ function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n3219-function_definition-503-505", method="renounceMinter()", type_label=function_definition];
3223 [label="503_ _removeMinter(msg.sender);\n3223-expression_statement-504-504", method="renounceMinter()", type_label=expression_statement];
3230 [label="505_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n3230-function_definition-506-514", method="bug_tmstmp32()", type_label=function_definition];
3235 [label="506_ uint pastBlockTime_tmstmp32;\n3235-new_variable-507-507", method="bug_tmstmp32()", type_label=new_variable];
3240 [label="507_ require(msg.value == 10 ether);\n3240-expression_statement-508-508", method="bug_tmstmp32()", type_label=expression_statement];
3250 [label="508_ require(now != pastBlockTime_tmstmp32);\n3250-expression_statement-509-509", method="bug_tmstmp32()", type_label=expression_statement];
3257 [label="509_ pastBlockTime_tmstmp32 = now;\n3257-expression_statement-510-510", method="bug_tmstmp32()", type_label=expression_statement];
3261 [label="510_ if_now % 15 == 0\n3261-if-511-513", method="bug_tmstmp32()", type_label=if];
7481 [label="510_ end_if", method="bug_tmstmp32()", type_label=end_if];
3268 [label="511_ msg.sender.transfer(address(this).balance);\n3268-expression_statement-512-512", method="bug_tmstmp32()", type_label=expression_statement];
3281 [label="514_ function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n3281-function_definition-515-518", method="_addMinter(address account)", type_label=function_definition];
3289 [label="515_ _minters.add(account);\n3289-expression_statement-516-516", method="_addMinter(address account)", type_label=expression_statement];
3300 [label="518_ address winner_tmstmp38;\n3300-new_variable-519-519", method="", type_label=new_variable];
3304 [label="519_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n3304-function_definition-520-522", method="play_tmstmp38(uint startTime)", type_label=function_definition];
3312 [label="520_ if_startTime + (5 * 1 days) == block.timestamp\n3312-if-521-522", method="play_tmstmp38(uint startTime)", type_label=if];
7532 [label="520_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
3325 [label="521_ winner_tmstmp38 = msg.sender;\n3325-expression_statement-522-522", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
3331 [label="522_ function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n3331-function_definition-523-526", method="_removeMinter(address account)", type_label=function_definition];
3339 [label="523_ _minters.remove(account);\n3339-expression_statement-524-524", method="_removeMinter(address account)", type_label=expression_statement];
3350 [label="526_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n3350-function_definition-527-535", method="bug_tmstmp4()", type_label=function_definition];
3355 [label="527_ uint pastBlockTime_tmstmp4;\n3355-new_variable-528-528", method="bug_tmstmp4()", type_label=new_variable];
3360 [label="528_ require(msg.value == 10 ether);\n3360-expression_statement-529-529", method="bug_tmstmp4()", type_label=expression_statement];
3370 [label="529_ require(now != pastBlockTime_tmstmp4);\n3370-expression_statement-530-530", method="bug_tmstmp4()", type_label=expression_statement];
3377 [label="530_ pastBlockTime_tmstmp4 = now;\n3377-expression_statement-531-531", method="bug_tmstmp4()", type_label=expression_statement];
3381 [label="531_ if_now % 15 == 0\n3381-if-532-534", method="bug_tmstmp4()", type_label=if];
7601 [label="531_ end_if", method="bug_tmstmp4()", type_label=end_if];
3388 [label="532_ msg.sender.transfer(address(this).balance);\n3388-expression_statement-533-533", method="bug_tmstmp4()", type_label=expression_statement];
3411 [label="538_ uint256 bugv_tmstmp1 = block.timestamp;\n3411-new_variable-539-539", method="", type_label=new_variable];
3424 [label="540_ uint256 bugv_tmstmp2 = block.timestamp;\n3424-new_variable-541-541", method="", type_label=new_variable];
3437 [label="542_ Roles.Role private _pausers;\n3437-new_variable-543-543", method="", type_label=new_variable];
3446 [label="544_ _addPauser(msg.sender);\n3446-expression_statement-545-545", method="", type_label=expression_statement];
3453 [label="546_ address winner_tmstmp7;\n3453-new_variable-547-547", method="", type_label=new_variable];
3457 [label="547_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n3457-function_definition-548-551", method="play_tmstmp7(uint startTime)", type_label=function_definition];
3465 [label="548_ uint _vtime = block.timestamp;\n3465-new_variable-549-549", method="play_tmstmp7(uint startTime)", type_label=new_variable];
3473 [label="549_ if_startTime + (5 * 1 days) == _vtime\n3473-if-550-551", method="play_tmstmp7(uint startTime)", type_label=if];
7693 [label="549_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
3484 [label="550_ winner_tmstmp7 = msg.sender;\n3484-expression_statement-551-551", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
3490 [label="551_ modifier onlyPauser() {\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n3490-expression_statement-552-555", method="", type_label=expression_statement];
3493 [label="552_ require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n3493-expression_statement-553-553", method="", type_label=expression_statement];
3506 [label="553_ _;\n3506-expression_statement-554-554", method="", type_label=expression_statement];
3508 [label="555_ function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n3508-function_definition-556-558", method="isPauser(address account)", type_label=function_definition];
3521 [label="556_ return _pausers.has(account);\n3521-return-557-557", method="isPauser(address account)", type_label=return];
3528 [label="558_ address winner_tmstmp23;\n3528-new_variable-559-559", method="", type_label=new_variable];
3532 [label="559_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n3532-function_definition-560-563", method="play_tmstmp23(uint startTime)", type_label=function_definition];
3540 [label="560_ uint _vtime = block.timestamp;\n3540-new_variable-561-561", method="play_tmstmp23(uint startTime)", type_label=new_variable];
3548 [label="561_ if_startTime + (5 * 1 days) == _vtime\n3548-if-562-563", method="play_tmstmp23(uint startTime)", type_label=if];
7768 [label="561_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
3559 [label="562_ winner_tmstmp23 = msg.sender;\n3559-expression_statement-563-563", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
3565 [label="563_ function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n3565-function_definition-564-566", method="addPauser(address account)", type_label=function_definition];
3572 [label="563_ onlyPauser\n3572-expression_statement-564-564", method="addPauser(address account)", type_label=expression_statement];
3575 [label="564_ _addPauser(account);\n3575-expression_statement-565-565", method="addPauser(address account)", type_label=expression_statement];
3580 [label="566_ address winner_tmstmp14;\n3580-new_variable-567-567", method="", type_label=new_variable];
3584 [label="567_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n3584-function_definition-568-570", method="play_tmstmp14(uint startTime)", type_label=function_definition];
3592 [label="568_ if_startTime + (5 * 1 days) == block.timestamp\n3592-if-569-570", method="play_tmstmp14(uint startTime)", type_label=if];
7812 [label="568_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
3605 [label="569_ winner_tmstmp14 = msg.sender;\n3605-expression_statement-570-570", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
3611 [label="570_ function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n3611-function_definition-571-573", method="renouncePauser()", type_label=function_definition];
3615 [label="571_ _removePauser(msg.sender);\n3615-expression_statement-572-572", method="renouncePauser()", type_label=expression_statement];
3622 [label="573_ address winner_tmstmp30;\n3622-new_variable-574-574", method="", type_label=new_variable];
3626 [label="574_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n3626-function_definition-575-577", method="play_tmstmp30(uint startTime)", type_label=function_definition];
3634 [label="575_ if_startTime + (5 * 1 days) == block.timestamp\n3634-if-576-577", method="play_tmstmp30(uint startTime)", type_label=if];
7854 [label="575_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
3647 [label="576_ winner_tmstmp30 = msg.sender;\n3647-expression_statement-577-577", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
3653 [label="577_ function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n3653-function_definition-578-581", method="_addPauser(address account)", type_label=function_definition];
3661 [label="578_ _pausers.add(account);\n3661-expression_statement-579-579", method="_addPauser(address account)", type_label=expression_statement];
3672 [label="581_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n3672-function_definition-582-590", method="bug_tmstmp8()", type_label=function_definition];
3677 [label="582_ uint pastBlockTime_tmstmp8;\n3677-new_variable-583-583", method="bug_tmstmp8()", type_label=new_variable];
3682 [label="583_ require(msg.value == 10 ether);\n3682-expression_statement-584-584", method="bug_tmstmp8()", type_label=expression_statement];
3692 [label="584_ require(now != pastBlockTime_tmstmp8);\n3692-expression_statement-585-585", method="bug_tmstmp8()", type_label=expression_statement];
3699 [label="585_ pastBlockTime_tmstmp8 = now;\n3699-expression_statement-586-586", method="bug_tmstmp8()", type_label=expression_statement];
3703 [label="586_ if_now % 15 == 0\n3703-if-587-589", method="bug_tmstmp8()", type_label=if];
7923 [label="586_ end_if", method="bug_tmstmp8()", type_label=end_if];
3710 [label="587_ msg.sender.transfer(address(this).balance);\n3710-expression_statement-588-588", method="bug_tmstmp8()", type_label=expression_statement];
3723 [label="590_ function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n3723-function_definition-591-594", method="_removePauser(address account)", type_label=function_definition];
3731 [label="591_ _pausers.remove(account);\n3731-expression_statement-592-592", method="_removePauser(address account)", type_label=expression_statement];
3742 [label="594_ address winner_tmstmp39;\n3742-new_variable-595-595", method="", type_label=new_variable];
3746 [label="595_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n3746-function_definition-596-599", method="play_tmstmp39(uint startTime)", type_label=function_definition];
3754 [label="596_ uint _vtime = block.timestamp;\n3754-new_variable-597-597", method="play_tmstmp39(uint startTime)", type_label=new_variable];
3762 [label="597_ if_startTime + (5 * 1 days) == _vtime\n3762-if-598-599", method="play_tmstmp39(uint startTime)", type_label=if];
7982 [label="597_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
3773 [label="598_ winner_tmstmp39 = msg.sender;\n3773-expression_statement-599-599", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
3785 [label="601_ uint256 bugv_tmstmp3 = block.timestamp;\n3785-new_variable-602-602", method="", type_label=new_variable];
3798 [label="603_ uint256 bugv_tmstmp4 = block.timestamp;\n3798-new_variable-604-604", method="", type_label=new_variable];
3811 [label="605_ bool private _paused;\n3811-new_variable-606-606", method="", type_label=new_variable];
3818 [label="607_ _paused = false;\n3818-expression_statement-608-608", method="", type_label=expression_statement];
3823 [label="609_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n3823-function_definition-610-618", method="bug_tmstmp36()", type_label=function_definition];
3828 [label="610_ uint pastBlockTime_tmstmp36;\n3828-new_variable-611-611", method="bug_tmstmp36()", type_label=new_variable];
3833 [label="611_ require(msg.value == 10 ether);\n3833-expression_statement-612-612", method="bug_tmstmp36()", type_label=expression_statement];
3843 [label="612_ require(now != pastBlockTime_tmstmp36);\n3843-expression_statement-613-613", method="bug_tmstmp36()", type_label=expression_statement];
3850 [label="613_ pastBlockTime_tmstmp36 = now;\n3850-expression_statement-614-614", method="bug_tmstmp36()", type_label=expression_statement];
3854 [label="614_ if_now % 15 == 0\n3854-if-615-617", method="bug_tmstmp36()", type_label=if];
8074 [label="614_ end_if", method="bug_tmstmp36()", type_label=end_if];
3861 [label="615_ msg.sender.transfer(address(this).balance);\n3861-expression_statement-616-616", method="bug_tmstmp36()", type_label=expression_statement];
3874 [label="618_ function paused() public view returns (bool) {\n        return _paused;\n    }\n3874-function_definition-619-621", method="paused()", type_label=function_definition];
3883 [label="619_ return _paused;\n3883-return-620-620", method="paused()", type_label=return];
3885 [label="621_ address winner_tmstmp35;\n3885-new_variable-622-622", method="", type_label=new_variable];
3889 [label="622_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n3889-function_definition-623-626", method="play_tmstmp35(uint startTime)", type_label=function_definition];
3897 [label="623_ uint _vtime = block.timestamp;\n3897-new_variable-624-624", method="play_tmstmp35(uint startTime)", type_label=new_variable];
3905 [label="624_ if_startTime + (5 * 1 days) == _vtime\n3905-if-625-626", method="play_tmstmp35(uint startTime)", type_label=if];
8125 [label="624_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
3916 [label="625_ winner_tmstmp35 = msg.sender;\n3916-expression_statement-626-626", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
3922 [label="626_ modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n3922-expression_statement-627-630", method="", type_label=expression_statement];
3925 [label="627_ require(!_paused, \"Pausable: paused\");\n3925-expression_statement-628-628", method="", type_label=expression_statement];
3934 [label="628_ _;\n3934-expression_statement-629-629", method="", type_label=expression_statement];
3936 [label="630_ modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n3936-expression_statement-631-634", method="", type_label=expression_statement];
3939 [label="631_ require(_paused, \"Pausable: not paused\");\n3939-expression_statement-632-632", method="", type_label=expression_statement];
3947 [label="632_ _;\n3947-expression_statement-633-633", method="", type_label=expression_statement];
3949 [label="634_ function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n3949-function_definition-635-638", method="pause()", type_label=function_definition];
3952 [label="634_ onlyPauser\n3952-expression_statement-635-635", method="pause()", type_label=expression_statement];
3954 [label="634_ whenNotPaused\n3954-expression_statement-635-635", method="pause()", type_label=expression_statement];
3957 [label="635_ _paused = true;\n3957-expression_statement-636-636", method="pause()", type_label=expression_statement];
3968 [label="638_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n3968-function_definition-639-647", method="bug_tmstmp40()", type_label=function_definition];
3973 [label="639_ uint pastBlockTime_tmstmp40;\n3973-new_variable-640-640", method="bug_tmstmp40()", type_label=new_variable];
3978 [label="640_ require(msg.value == 10 ether);\n3978-expression_statement-641-641", method="bug_tmstmp40()", type_label=expression_statement];
3988 [label="641_ require(now != pastBlockTime_tmstmp40);\n3988-expression_statement-642-642", method="bug_tmstmp40()", type_label=expression_statement];
3995 [label="642_ pastBlockTime_tmstmp40 = now;\n3995-expression_statement-643-643", method="bug_tmstmp40()", type_label=expression_statement];
3999 [label="643_ if_now % 15 == 0\n3999-if-644-646", method="bug_tmstmp40()", type_label=if];
8219 [label="643_ end_if", method="bug_tmstmp40()", type_label=end_if];
4006 [label="644_ msg.sender.transfer(address(this).balance);\n4006-expression_statement-645-645", method="bug_tmstmp40()", type_label=expression_statement];
4019 [label="647_ function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n4019-function_definition-648-651", method="unpause()", type_label=function_definition];
4022 [label="647_ onlyPauser\n4022-expression_statement-648-648", method="unpause()", type_label=expression_statement];
4024 [label="647_ whenPaused\n4024-expression_statement-648-648", method="unpause()", type_label=expression_statement];
4027 [label="648_ _paused = false;\n4027-expression_statement-649-649", method="unpause()", type_label=expression_statement];
4038 [label="651_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n4038-function_definition-652-654", method="bug_tmstmp33()", type_label=function_definition];
4047 [label="652_ return block.timestamp >= 1546300800;\n4047-return-653-653", method="bug_tmstmp33()", type_label=return];
4075 [label="660_ ERC777(\"SKYBIT\", \"SKYBIT\", defaultOperators)\n4075-expression_statement-661-661", method="", type_label=expression_statement];
4086 [label="662_ _mint(msg.sender, msg.sender, initialSupply, \"\", \"\");\n4086-expression_statement-663-663", method="", type_label=expression_statement];
4105 [label="664_ address winner_tmstmp27;\n4105-new_variable-665-665", method="", type_label=new_variable];
4109 [label="665_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n4109-function_definition-666-669", method="play_tmstmp27(uint startTime)", type_label=function_definition];
4117 [label="666_ uint _vtime = block.timestamp;\n4117-new_variable-667-667", method="play_tmstmp27(uint startTime)", type_label=new_variable];
4125 [label="667_ if_startTime + (5 * 1 days) == _vtime\n4125-if-668-669", method="play_tmstmp27(uint startTime)", type_label=if];
8345 [label="667_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
4136 [label="668_ winner_tmstmp27 = msg.sender;\n4136-expression_statement-669-669", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
4142 [label="669_ function mint(address operator, address account, uint256 amount, bytes memory userData, bytes memory operatorData) public onlyMinter returns (bool) {\n        _mint(operator, account, amount, userData, operatorData);\n        return true;\n    }\n4142-function_definition-670-673", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
4165 [label="669_ onlyMinter\n4165-expression_statement-670-670", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
4172 [label="670_ _mint(operator, account, amount, userData, operatorData);\n4172-expression_statement-671-671", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
4185 [label="671_ return true;\n4185-return-672-672", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=return];
4188 [label="673_ address winner_tmstmp31;\n4188-new_variable-674-674", method="", type_label=new_variable];
4192 [label="674_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n4192-function_definition-675-678", method="play_tmstmp31(uint startTime)", type_label=function_definition];
4200 [label="675_ uint _vtime = block.timestamp;\n4200-new_variable-676-676", method="play_tmstmp31(uint startTime)", type_label=new_variable];
4208 [label="676_ if_startTime + (5 * 1 days) == _vtime\n4208-if-677-678", method="play_tmstmp31(uint startTime)", type_label=if];
8428 [label="676_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
4219 [label="677_ winner_tmstmp31 = msg.sender;\n4219-expression_statement-678-678", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1498;
1589;
3401;
3779;
433 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
470 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
507 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 529  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
524 -> 4744  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4744 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 4744  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
529 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
531 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
553 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
590 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
624 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
811 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 938  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
922 -> 5142  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5142 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 922  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
938 -> 935  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
947 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
996 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1007 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1018 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1029 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1044 -> 1052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 1065  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1052 -> 5272  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5272 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1065 -> 5272  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1071 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1088 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1103 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1154 -> 1167  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1154 -> 5374  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5374 -> 1173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 5374  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1173 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1209 -> 1226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1226 -> 1243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1243 -> 1263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1263 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1266 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1286 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1293 -> 1297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 1304  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1297 -> 5517  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5517 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 5517  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1317 -> 1329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1347 -> 1352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1352 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1357 -> 1367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1367 -> 1374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1374 -> 1378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 1385  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1378 -> 5598  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5598 -> 1398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1385 -> 5598  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1398 -> 1415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1415 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1437 -> 1446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1446 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1452 -> 1460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1472 -> 1477  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1472 -> 1487  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5692 -> 1498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1477 -> 5692  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1487 -> 5692  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1510 -> 1518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1518 -> 1526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1526 -> 1537  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1526 -> 5746  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5746 -> 1543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1537 -> 5746  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1543 -> 1551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1551 -> 1563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> 1568  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1563 -> 1580  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5783 -> 1589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 5783  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1580 -> 5783  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1597 -> 1602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 1617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1617 -> 1624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1624 -> 1628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1628 -> 1635  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1628 -> 5848  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5848 -> 1648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1635 -> 5848  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1648 -> 1658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1658 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1664 -> 1672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1672 -> 1685  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1672 -> 5892  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5892 -> 1691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1685 -> 5892  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1691 -> 1715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1715 -> 1730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1750 -> 1759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1759 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1765 -> 1785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1785 -> 1800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1819 -> 1827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1827 -> 1840  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1827 -> 6047  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6047 -> 1846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1840 -> 6047  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1846 -> 1863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1863 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1873 -> 1881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1881 -> 1894  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1881 -> 6101  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6101 -> 1900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1894 -> 6101  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1900 -> 1916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1916 -> 1924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1924 -> 1933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1933 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1936 -> 1941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1941 -> 1946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1946 -> 1956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1956 -> 1963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1963 -> 1967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1967 -> 1974  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1967 -> 6187  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6187 -> 1987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1974 -> 6187  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1987 -> 2007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2007 -> 2019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2019 -> 2031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2031 -> 2039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2039 -> 2056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2056 -> 2073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2073 -> 2091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2091 -> 2111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2111 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2118 -> 2126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2126 -> 2134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2134 -> 2145  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2134 -> 6354  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6354 -> 2151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2145 -> 6354  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2151 -> 2175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2175 -> 2187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2187 -> 2196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2196 -> 2209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2251 -> 2260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2260 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2266 -> 2298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2298 -> 2310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2310 -> 2322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2322 -> 2337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2337 -> 2352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2373 -> 2381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2381 -> 2394  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2381 -> 6601  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6601 -> 2400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2394 -> 6601  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2400 -> 2424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2424 -> 2436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2436 -> 2453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2453 -> 2462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2497 -> 2506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2506 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2512 -> 2540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2540 -> 2553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2588 -> 2597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2597 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2603 -> 2619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2619 -> 2631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2651 -> 2659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2659 -> 2667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2667 -> 2678  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2667 -> 6887  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6887 -> 2684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2678 -> 6887  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2684 -> 2712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2712 -> 2725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2725 -> 2732  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2725 -> 6945  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6945 -> 2752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2732 -> 6945  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2752 -> 2761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2761 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2767 -> 2799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2799 -> 2812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2812 -> 2819  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2812 -> 2839  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7032 -> 2854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2819 -> 7032  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2839 -> 2842  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2839 -> 7032  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2842 -> 7032  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2854 -> 2863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2863 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2880 -> 2893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2893 -> 2907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2916 -> 2929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2929 -> 2942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2951 -> 2969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2969 -> 2981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2981 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2997 -> 3006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3006 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3051 -> 3059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3059 -> 3067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3067 -> 3078  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3067 -> 7287  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7287 -> 3084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3078 -> 7287  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3087 -> 3100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3102 -> 3115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3115 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3126 -> 3134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3134 -> 3147  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3134 -> 7354  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7354 -> 3153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3147 -> 7354  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3153 -> 3163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3168 -> 3173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3173 -> 3178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3178 -> 3188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3188 -> 3195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3195 -> 3199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3199 -> 3206  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3199 -> 7419  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7419 -> 3219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3206 -> 7419  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3219 -> 3223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3230 -> 3235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3235 -> 3240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3240 -> 3250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3250 -> 3257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3257 -> 3261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3261 -> 3268  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3261 -> 7481  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7481 -> 3281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3268 -> 7481  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3281 -> 3289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3304 -> 3312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3312 -> 3325  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3312 -> 7532  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7532 -> 3331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3325 -> 7532  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3331 -> 3339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3350 -> 3355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3355 -> 3360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3360 -> 3370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3370 -> 3377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3377 -> 3381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3381 -> 3388  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3381 -> 7601  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7601 -> 3401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3388 -> 7601  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3457 -> 3465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3465 -> 3473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3473 -> 3484  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3473 -> 7693  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7693 -> 3490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3484 -> 7693  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3493 -> 3506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3508 -> 3521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3521 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3532 -> 3540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3540 -> 3548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3548 -> 3559  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3548 -> 7768  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7768 -> 3565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3559 -> 7768  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3565 -> 3575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3584 -> 3592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3592 -> 3605  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3592 -> 7812  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7812 -> 3611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3605 -> 7812  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3611 -> 3615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3626 -> 3634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3634 -> 3647  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3634 -> 7854  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7854 -> 3653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3647 -> 7854  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3653 -> 3661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3672 -> 3677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3677 -> 3682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3682 -> 3692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3692 -> 3699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3699 -> 3703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3703 -> 3710  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3703 -> 7923  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7923 -> 3723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3710 -> 7923  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3723 -> 3731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3746 -> 3754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3754 -> 3762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3762 -> 3773  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3762 -> 7982  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7982 -> 3779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3773 -> 7982  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3823 -> 3828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3828 -> 3833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3833 -> 3843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3843 -> 3850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3850 -> 3854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3854 -> 3861  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3854 -> 8074  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8074 -> 3874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3861 -> 8074  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3874 -> 3883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3883 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3889 -> 3897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3897 -> 3905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3905 -> 3916  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3905 -> 8125  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8125 -> 3922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3916 -> 8125  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3922 -> 3936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3925 -> 3934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3939 -> 3947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3949 -> 3957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3952 -> 3954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3968 -> 3973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3973 -> 3978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3978 -> 3988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3988 -> 3995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3995 -> 3999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3999 -> 4006  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3999 -> 8219  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8219 -> 4019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4006 -> 8219  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4019 -> 4027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4022 -> 4024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4038 -> 4047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4047 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4109 -> 4117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4117 -> 4125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4125 -> 4136  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4125 -> 8345  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8345 -> 4142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4136 -> 8345  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4142 -> 4172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4172 -> 4185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4185 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4192 -> 4200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4200 -> 4208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4208 -> 4219  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4208 -> 8428  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8428 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4219 -> 8428  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
