digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
2005 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ require(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0);\n    uint256 c = a / b;\n    return c;\n  }\n56-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ require(b > 0);\n73-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
80 [label="12_ uint256 c = a / b;\n80-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
88 [label="13_ return c;\n88-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
90 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n90-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
107 [label="16_ require(b <= a);\n107-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
114 [label="17_ uint256 c = a - b;\n114-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
122 [label="18_ return c;\n122-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
124 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a && c >= b);\n    return c;\n  }\n124-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
141 [label="21_ uint256 c = a + b;\n141-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
149 [label="22_ require(c >= a && c >= b);\n149-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="23_ return c;\n160-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
162 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n162-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
179 [label="26_ require(b != 0);\n179-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
186 [label="27_ return a % b;\n186-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
190 [label="29_ function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n190-function_definition-30-32", method="max256(uint256 a,uint256 b)", type_label=function_definition];
207 [label="30_ return a >= b ? a : b;\n207-return-31-31", method="max256(uint256 a,uint256 b)", type_label=return];
214 [label="32_ function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n214-function_definition-33-35", method="min256(uint256 a,uint256 b)", type_label=function_definition];
231 [label="33_ return a < b ? a : b;\n231-return-34-34", method="min256(uint256 a,uint256 b)", type_label=return];
241 [label="37_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n241-function_definition-38-40", method="bug_tmstmp1()", type_label=function_definition];
250 [label="38_ return block.timestamp >= 1546300800;\n250-return-39-39", method="bug_tmstmp1()", type_label=return];
256 [label="40_ address public owner;\n256-new_variable-41-41", method="", type_label=new_variable];
263 [label="42_ owner = msg.sender;\n263-expression_statement-43-43", method="", type_label=expression_statement];
269 [label="44_ address winner_tmstmp7;\n269-new_variable-45-45", method="", type_label=new_variable];
273 [label="45_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n273-function_definition-46-49", method="play_tmstmp7(uint startTime)", type_label=function_definition];
281 [label="46_ uint _vtime = block.timestamp;\n281-new_variable-47-47", method="play_tmstmp7(uint startTime)", type_label=new_variable];
289 [label="47_ if_startTime + (5 * 1 days) == _vtime\n289-if-48-49", method="play_tmstmp7(uint startTime)", type_label=if];
2264 [label="47_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
300 [label="48_ winner_tmstmp7 = msg.sender;\n300-expression_statement-49-49", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
306 [label="49_ modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n306-expression_statement-50-53", method="", type_label=expression_statement];
309 [label="50_ require(msg.sender == owner);\n309-expression_statement-51-51", method="", type_label=expression_statement];
318 [label="51_ _;\n318-expression_statement-52-52", method="", type_label=expression_statement];
320 [label="53_ uint256 bugv_tmstmp1 = block.timestamp;\n320-new_variable-54-54", method="", type_label=new_variable];
327 [label="54_ function transferOwnership(address newOwner) onlyOwner public {\n    owner = newOwner;\n  }\n327-function_definition-55-57", method="transferOwnership(address newOwner)", type_label=function_definition];
333 [label="54_ onlyOwner\n333-expression_statement-55-55", method="transferOwnership(address newOwner)", type_label=expression_statement];
337 [label="55_ owner = newOwner;\n337-expression_statement-56-56", method="transferOwnership(address newOwner)", type_label=expression_statement];
341 [label="57_ address winner_tmstmp23;\n341-new_variable-58-58", method="", type_label=new_variable];
345 [label="58_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n345-function_definition-59-62", method="play_tmstmp23(uint startTime)", type_label=function_definition];
353 [label="59_ uint _vtime = block.timestamp;\n353-new_variable-60-60", method="play_tmstmp23(uint startTime)", type_label=new_variable];
361 [label="60_ if_startTime + (5 * 1 days) == _vtime\n361-if-61-62", method="play_tmstmp23(uint startTime)", type_label=if];
2336 [label="60_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
372 [label="61_ winner_tmstmp23 = msg.sender;\n372-expression_statement-62-62", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
381 [label="64_ function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n381-function_definition-65-65", method="receiveApproval(address _from,uint256 _value,address _token,bytes calldata _extraData)", type_label=function_definition];
408 [label="68_ address winner_tmstmp2;\n408-new_variable-69-69", method="", type_label=new_variable];
412 [label="69_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n412-function_definition-70-72", method="play_tmstmp2(uint startTime)", type_label=function_definition];
420 [label="70_ if_startTime + (5 * 1 days) == block.timestamp\n420-if-71-72", method="play_tmstmp2(uint startTime)", type_label=if];
2395 [label="70_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
433 [label="71_ winner_tmstmp2 = msg.sender;\n433-expression_statement-72-72", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
439 [label="72_ string public name;\n439-new_variable-73-73", method="", type_label=new_variable];
444 [label="73_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n444-function_definition-74-76", method="bug_tmstmp17()", type_label=function_definition];
453 [label="74_ return block.timestamp >= 1546300800;\n453-return-75-75", method="bug_tmstmp17()", type_label=return];
459 [label="76_ string public symbol;\n459-new_variable-77-77", method="", type_label=new_variable];
464 [label="77_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n464-function_definition-78-80", method="bug_tmstmp37()", type_label=function_definition];
473 [label="78_ return block.timestamp >= 1546300800;\n473-return-79-79", method="bug_tmstmp37()", type_label=return];
479 [label="80_ uint8 public decimals;\n479-new_variable-81-81", method="", type_label=new_variable];
484 [label="81_ address winner_tmstmp3;\n484-new_variable-82-82", method="", type_label=new_variable];
488 [label="82_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n488-function_definition-83-86", method="play_tmstmp3(uint startTime)", type_label=function_definition];
496 [label="83_ uint _vtime = block.timestamp;\n496-new_variable-84-84", method="play_tmstmp3(uint startTime)", type_label=new_variable];
504 [label="84_ if_startTime + (5 * 1 days) == _vtime\n504-if-85-86", method="play_tmstmp3(uint startTime)", type_label=if];
2479 [label="84_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
515 [label="85_ winner_tmstmp3 = msg.sender;\n515-expression_statement-86-86", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
521 [label="86_ uint256 public totalSupply;\n521-new_variable-87-87", method="", type_label=new_variable];
526 [label="87_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n526-function_definition-88-90", method="bug_tmstmp9()", type_label=function_definition];
535 [label="88_ return block.timestamp >= 1546300800;\n535-return-89-89", method="bug_tmstmp9()", type_label=return];
541 [label="90_ mapping (address => uint256) public balanceOf;\n541-new_variable-91-91", method="", type_label=new_variable];
548 [label="91_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n548-function_definition-92-94", method="bug_tmstmp25()", type_label=function_definition];
557 [label="92_ return block.timestamp >= 1546300800;\n557-return-93-93", method="bug_tmstmp25()", type_label=return];
563 [label="94_ mapping (address => mapping (address => uint256)) public allowance;\n563-new_variable-95-95", method="", type_label=new_variable];
572 [label="95_ uint256 bugv_tmstmp2 = block.timestamp;\n572-new_variable-96-96", method="", type_label=new_variable];
593 [label="97_ uint256 bugv_tmstmp3 = block.timestamp;\n593-new_variable-98-98", method="", type_label=new_variable];
614 [label="99_ uint256 bugv_tmstmp4 = block.timestamp;\n614-new_variable-100-100", method="", type_label=new_variable];
645 [label="102_ decimals = dec;\n645-expression_statement-103-103", method="", type_label=expression_statement];
649 [label="103_ name = tokenName;\n649-expression_statement-104-104", method="", type_label=expression_statement];
653 [label="104_ symbol = tokenSymbol;\n653-expression_statement-105-105", method="", type_label=expression_statement];
657 [label="106_ address winner_tmstmp14;\n657-new_variable-107-107", method="", type_label=new_variable];
661 [label="107_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n661-function_definition-108-110", method="play_tmstmp14(uint startTime)", type_label=function_definition];
669 [label="108_ if_startTime + (5 * 1 days) == block.timestamp\n669-if-109-110", method="play_tmstmp14(uint startTime)", type_label=if];
2644 [label="108_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
682 [label="109_ winner_tmstmp14 = msg.sender;\n682-expression_statement-110-110", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
688 [label="110_ function _transfer(address _from, address _to, uint _value) internal {\n    require(_to != address(0x0));\n    balanceOf[_from] = balanceOf[_from].sub(_value);\n    balanceOf[_to] = balanceOf[_to].add(_value);\n    emit Transfer(_from, _to, _value);\n  }\n688-function_definition-111-116", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
704 [label="111_ require(_to != address(0x0));\n704-expression_statement-112-112", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
713 [label="112_ balanceOf[_from] = balanceOf[_from].sub(_value);\n713-expression_statement-113-113", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
726 [label="113_ balanceOf[_to] = balanceOf[_to].add(_value);\n726-expression_statement-114-114", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
747 [label="116_ address winner_tmstmp30;\n747-new_variable-117-117", method="", type_label=new_variable];
751 [label="117_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n751-function_definition-118-120", method="play_tmstmp30(uint startTime)", type_label=function_definition];
759 [label="118_ if_startTime + (5 * 1 days) == block.timestamp\n759-if-119-120", method="play_tmstmp30(uint startTime)", type_label=if];
2734 [label="118_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
772 [label="119_ winner_tmstmp30 = msg.sender;\n772-expression_statement-120-120", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
778 [label="120_ function transfer(address _to, uint256 _value) public returns (bool success) {\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n778-function_definition-121-124", method="transfer(address _to,uint256 _value)", type_label=function_definition];
795 [label="121_ _transfer(msg.sender, _to, _value);\n795-expression_statement-122-122", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
806 [label="122_ return true;\n806-return-123-123", method="transfer(address _to,uint256 _value)", type_label=return];
809 [label="124_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n809-function_definition-125-133", method="bug_tmstmp8()", type_label=function_definition];
814 [label="125_ uint pastBlockTime_tmstmp8;\n814-new_variable-126-126", method="bug_tmstmp8()", type_label=new_variable];
819 [label="126_ require(msg.value == 10 ether);\n819-expression_statement-127-127", method="bug_tmstmp8()", type_label=expression_statement];
829 [label="127_ require(now != pastBlockTime_tmstmp8);\n829-expression_statement-128-128", method="bug_tmstmp8()", type_label=expression_statement];
836 [label="128_ pastBlockTime_tmstmp8 = now;\n836-expression_statement-129-129", method="bug_tmstmp8()", type_label=expression_statement];
840 [label="129_ if_now % 15 == 0\n840-if-130-132", method="bug_tmstmp8()", type_label=if];
2815 [label="129_ end_if", method="bug_tmstmp8()", type_label=end_if];
847 [label="130_ msg.sender.transfer(address(this).balance);\n847-expression_statement-131-131", method="bug_tmstmp8()", type_label=expression_statement];
860 [label="133_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n		_transfer(_from, _to, _value);\n		return true;\n  }\n860-function_definition-134-138", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
881 [label="134_ allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n881-expression_statement-135-135", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
902 [label="135_ _transfer(_from, _to, _value);\n902-expression_statement-136-136", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
911 [label="136_ return true;\n911-return-137-137", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
914 [label="138_ address winner_tmstmp39;\n914-new_variable-139-139", method="", type_label=new_variable];
918 [label="139_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n918-function_definition-140-143", method="play_tmstmp39(uint startTime)", type_label=function_definition];
926 [label="140_ uint _vtime = block.timestamp;\n926-new_variable-141-141", method="play_tmstmp39(uint startTime)", type_label=new_variable];
934 [label="141_ if_startTime + (5 * 1 days) == _vtime\n934-if-142-143", method="play_tmstmp39(uint startTime)", type_label=if];
2909 [label="141_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
945 [label="142_ winner_tmstmp39 = msg.sender;\n945-expression_statement-143-143", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
951 [label="143_ function approve(address _spender, uint256 _value) public returns (bool success) {\n    allowance[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n951-function_definition-144-148", method="approve(address _spender,uint256 _value)", type_label=function_definition];
968 [label="144_ allowance[msg.sender][_spender] = _value;\n968-expression_statement-145-145", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
988 [label="146_ return true;\n988-return-147-147", method="approve(address _spender,uint256 _value)", type_label=return];
991 [label="148_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n991-function_definition-149-157", method="bug_tmstmp36()", type_label=function_definition];
996 [label="149_ uint pastBlockTime_tmstmp36;\n996-new_variable-150-150", method="bug_tmstmp36()", type_label=new_variable];
1001 [label="150_ require(msg.value == 10 ether);\n1001-expression_statement-151-151", method="bug_tmstmp36()", type_label=expression_statement];
1011 [label="151_ require(now != pastBlockTime_tmstmp36);\n1011-expression_statement-152-152", method="bug_tmstmp36()", type_label=expression_statement];
1018 [label="152_ pastBlockTime_tmstmp36 = now;\n1018-expression_statement-153-153", method="bug_tmstmp36()", type_label=expression_statement];
1022 [label="153_ if_now % 15 == 0\n1022-if-154-156", method="bug_tmstmp36()", type_label=if];
2997 [label="153_ end_if", method="bug_tmstmp36()", type_label=end_if];
1029 [label="154_ msg.sender.transfer(address(this).balance);\n1029-expression_statement-155-155", method="bug_tmstmp36()", type_label=expression_statement];
1042 [label="157_ function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n    tokenRecipient spender = tokenRecipient(_spender);\n    if (approve(_spender, _value)) {\n      spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n      return true;\n    }\n  }\n1042-function_definition-158-164", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=function_definition];
1063 [label="158_ tokenRecipient spender = tokenRecipient(_spender);\n1063-new_variable-159-159", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=new_variable];
1073 [label="159_ if\n1073-if-160-163", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=if];
3048 [label="159_ end_if", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=end_if];
1081 [label="160_ spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n1081-expression_statement-161-161", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=expression_statement];
1098 [label="161_ return true;\n1098-return-162-162", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=return];
1101 [label="164_ address winner_tmstmp35;\n1101-new_variable-165-165", method="", type_label=new_variable];
1105 [label="165_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1105-function_definition-166-169", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1113 [label="166_ uint _vtime = block.timestamp;\n1113-new_variable-167-167", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1121 [label="167_ if_startTime + (5 * 1 days) == _vtime\n1121-if-168-169", method="play_tmstmp35(uint startTime)", type_label=if];
3096 [label="167_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1132 [label="168_ winner_tmstmp35 = msg.sender;\n1132-expression_statement-169-169", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1147 [label="171_ address winner_tmstmp19;\n1147-new_variable-172-172", method="", type_label=new_variable];
1151 [label="172_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n1151-function_definition-173-176", method="play_tmstmp19(uint startTime)", type_label=function_definition];
1159 [label="173_ uint _vtime = block.timestamp;\n1159-new_variable-174-174", method="play_tmstmp19(uint startTime)", type_label=new_variable];
1167 [label="174_ if_startTime + (5 * 1 days) == _vtime\n1167-if-175-176", method="play_tmstmp19(uint startTime)", type_label=if];
3142 [label="174_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
1178 [label="175_ winner_tmstmp19 = msg.sender;\n1178-expression_statement-176-176", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
1184 [label="176_ string _tokenName = \"AZ FundChain\";\n1184-new_variable-177-177", method="", type_label=new_variable];
1190 [label="176_ address winner_tmstmp26;\n1190-new_variable-177-177", method="", type_label=new_variable];
1194 [label="177_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n1194-function_definition-178-180", method="play_tmstmp26(uint startTime)", type_label=function_definition];
1202 [label="178_ if_startTime + (5 * 1 days) == block.timestamp\n1202-if-179-180", method="play_tmstmp26(uint startTime)", type_label=if];
3177 [label="178_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
1215 [label="179_ winner_tmstmp26 = msg.sender;\n1215-expression_statement-180-180", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
1221 [label="180_ string _tokenSymbol = \"AZT\";\n1221-new_variable-181-181", method="", type_label=new_variable];
1227 [label="181_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1227-function_definition-182-190", method="bug_tmstmp20()", type_label=function_definition];
1232 [label="182_ uint pastBlockTime_tmstmp20;\n1232-new_variable-183-183", method="bug_tmstmp20()", type_label=new_variable];
1237 [label="183_ require(msg.value == 10 ether);\n1237-expression_statement-184-184", method="bug_tmstmp20()", type_label=expression_statement];
1247 [label="184_ require(now != pastBlockTime_tmstmp20);\n1247-expression_statement-185-185", method="bug_tmstmp20()", type_label=expression_statement];
1254 [label="185_ pastBlockTime_tmstmp20 = now;\n1254-expression_statement-186-186", method="bug_tmstmp20()", type_label=expression_statement];
1258 [label="186_ if_now % 15 == 0\n1258-if-187-189", method="bug_tmstmp20()", type_label=if];
3233 [label="186_ end_if", method="bug_tmstmp20()", type_label=end_if];
1265 [label="187_ msg.sender.transfer(address(this).balance);\n1265-expression_statement-188-188", method="bug_tmstmp20()", type_label=expression_statement];
1278 [label="190_ uint8 _decimals = 18;\n1278-new_variable-191-191", method="", type_label=new_variable];
1283 [label="191_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1283-function_definition-192-200", method="bug_tmstmp32()", type_label=function_definition];
1288 [label="192_ uint pastBlockTime_tmstmp32;\n1288-new_variable-193-193", method="bug_tmstmp32()", type_label=new_variable];
1293 [label="193_ require(msg.value == 10 ether);\n1293-expression_statement-194-194", method="bug_tmstmp32()", type_label=expression_statement];
1303 [label="194_ require(now != pastBlockTime_tmstmp32);\n1303-expression_statement-195-195", method="bug_tmstmp32()", type_label=expression_statement];
1310 [label="195_ pastBlockTime_tmstmp32 = now;\n1310-expression_statement-196-196", method="bug_tmstmp32()", type_label=expression_statement];
1314 [label="196_ if_now % 15 == 0\n1314-if-197-199", method="bug_tmstmp32()", type_label=if];
3289 [label="196_ end_if", method="bug_tmstmp32()", type_label=end_if];
1321 [label="197_ msg.sender.transfer(address(this).balance);\n1321-expression_statement-198-198", method="bug_tmstmp32()", type_label=expression_statement];
1334 [label="200_ address[] public frozenAddresses;\n1334-new_variable-201-201", method="", type_label=new_variable];
1340 [label="201_ address winner_tmstmp38;\n1340-new_variable-202-202", method="", type_label=new_variable];
1344 [label="202_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n1344-function_definition-203-205", method="play_tmstmp38(uint startTime)", type_label=function_definition];
1352 [label="203_ if_startTime + (5 * 1 days) == block.timestamp\n1352-if-204-205", method="play_tmstmp38(uint startTime)", type_label=if];
3327 [label="203_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
1365 [label="204_ winner_tmstmp38 = msg.sender;\n1365-expression_statement-205-205", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
1371 [label="205_ bool public tokenFrozen;\n1371-new_variable-206-206", method="", type_label=new_variable];
1376 [label="206_ struct frozenWallet {\n    bool isFrozen;  \n    uint256 rewardedAmount;  \n    uint256 frozenAmount;  \n    uint256 frozenTime;  \n  }\n1376-expression_statement-207-212", method="frozenWallet()", type_label=expression_statement];
1394 [label="212_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1394-function_definition-213-221", method="bug_tmstmp4()", type_label=function_definition];
1399 [label="213_ uint pastBlockTime_tmstmp4;\n1399-new_variable-214-214", method="bug_tmstmp4()", type_label=new_variable];
1404 [label="214_ require(msg.value == 10 ether);\n1404-expression_statement-215-215", method="bug_tmstmp4()", type_label=expression_statement];
1414 [label="215_ require(now != pastBlockTime_tmstmp4);\n1414-expression_statement-216-216", method="bug_tmstmp4()", type_label=expression_statement];
1421 [label="216_ pastBlockTime_tmstmp4 = now;\n1421-expression_statement-217-217", method="bug_tmstmp4()", type_label=expression_statement];
1425 [label="217_ if_now % 15 == 0\n1425-if-218-220", method="bug_tmstmp4()", type_label=if];
3400 [label="217_ end_if", method="bug_tmstmp4()", type_label=end_if];
1432 [label="218_ msg.sender.transfer(address(this).balance);\n1432-expression_statement-219-219", method="bug_tmstmp4()", type_label=expression_statement];
1445 [label="221_ mapping (address => frozenWallet) public frozenWallets;\n1445-new_variable-222-222", method="", type_label=new_variable];
1454 [label="222_ TokenERC20(_tokenName, _tokenSymbol, _decimals)\n1454-expression_statement-223-223", method="", type_label=expression_statement];
1463 [label="223_ frozenAddresses.push(address(0x9fd50776F133751E8Ae6abE1Be124638Bb917E05));\n1463-expression_statement-224-224", method="", type_label=expression_statement];
1472 [label="224_ frozenWallets[frozenAddresses[0]] = frozenWallet({\n      isFrozen: true,\n      rewardedAmount: 30000000 * 10 ** uint256(decimals),\n      frozenAmount: 0 * 10 ** uint256(decimals),\n      frozenTime: now + 1 * 1 hours  \n    });\n1472-expression_statement-225-230", method="", type_label=expression_statement];
1512 [label="230_ for(i < frozenAddresses.length;;i++)\n1512-for-231-234", method="", type_label=for];
3487 [label="230_ end_loop", method="", type_label=end_loop];
1525 [label="230_ i++\n1525-expression_statement-231-231", method="", type_label=expression_statement];
1528 [label="231_ balanceOf[frozenAddresses[i]] = frozenWallets[frozenAddresses[i]].rewardedAmount;\n1528-expression_statement-232-232", method="", type_label=expression_statement];
1542 [label="232_ totalSupply = totalSupply.add(frozenWallets[frozenAddresses[i]].rewardedAmount);\n1542-expression_statement-233-233", method="", type_label=expression_statement];
1557 [label="235_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1557-function_definition-236-244", method="bug_tmstmp40()", type_label=function_definition];
1562 [label="236_ uint pastBlockTime_tmstmp40;\n1562-new_variable-237-237", method="bug_tmstmp40()", type_label=new_variable];
1567 [label="237_ require(msg.value == 10 ether);\n1567-expression_statement-238-238", method="bug_tmstmp40()", type_label=expression_statement];
1577 [label="238_ require(now != pastBlockTime_tmstmp40);\n1577-expression_statement-239-239", method="bug_tmstmp40()", type_label=expression_statement];
1584 [label="239_ pastBlockTime_tmstmp40 = now;\n1584-expression_statement-240-240", method="bug_tmstmp40()", type_label=expression_statement];
1588 [label="240_ if_now % 15 == 0\n1588-if-241-243", method="bug_tmstmp40()", type_label=if];
3563 [label="240_ end_if", method="bug_tmstmp40()", type_label=end_if];
1595 [label="241_ msg.sender.transfer(address(this).balance);\n1595-expression_statement-242-242", method="bug_tmstmp40()", type_label=expression_statement];
1608 [label="244_ function _transfer(address _from, address _to, uint _value) internal {\n    require(_to != address(0x0));\n    require(checkFrozenWallet(_from, _value));\n    balanceOf[_from] = balanceOf[_from].sub(_value);      \n    balanceOf[_to] = balanceOf[_to].add(_value);     \n    emit Transfer(_from, _to, _value);\n  }\n1608-function_definition-245-251", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
1624 [label="245_ require(_to != address(0x0));\n1624-expression_statement-246-246", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1633 [label="246_ require(checkFrozenWallet(_from, _value));\n1633-expression_statement-247-247", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1643 [label="247_ balanceOf[_from] = balanceOf[_from].sub(_value);\n1643-expression_statement-248-248", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1656 [label="248_ balanceOf[_to] = balanceOf[_to].add(_value);\n1656-expression_statement-249-249", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1677 [label="251_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1677-function_definition-252-254", method="bug_tmstmp33()", type_label=function_definition];
1686 [label="252_ return block.timestamp >= 1546300800;\n1686-return-253-253", method="bug_tmstmp33()", type_label=return];
1692 [label="254_ function checkFrozenWallet(address _from, uint _value) public view returns (bool) {\n    return(\n      _from==owner || \n      (!tokenFrozen && \n      (!frozenWallets[_from].isFrozen || \n       now>=frozenWallets[_from].frozenTime || \n       balanceOf[_from].sub(_value)>=frozenWallets[_from].frozenAmount))\n    );\n  }\n1692-function_definition-255-263", method="checkFrozenWallet(address _from,uint _value)", type_label=function_definition];
1709 [label="255_ return(\n      _from==owner || \n      (!tokenFrozen && \n      (!frozenWallets[_from].isFrozen || \n       now>=frozenWallets[_from].frozenTime || \n       balanceOf[_from].sub(_value)>=frozenWallets[_from].frozenAmount))\n    );\n1709-return-256-262", method="checkFrozenWallet(address _from,uint _value)", type_label=return];
1749 [label="263_ address winner_tmstmp27;\n1749-new_variable-264-264", method="", type_label=new_variable];
1753 [label="264_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1753-function_definition-265-268", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1761 [label="265_ uint _vtime = block.timestamp;\n1761-new_variable-266-266", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1769 [label="266_ if_startTime + (5 * 1 days) == _vtime\n1769-if-267-268", method="play_tmstmp27(uint startTime)", type_label=if];
3744 [label="266_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1780 [label="267_ winner_tmstmp27 = msg.sender;\n1780-expression_statement-268-268", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1786 [label="268_ function burn(uint256 _value) onlyOwner public returns (bool success) {\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);    \n    totalSupply = totalSupply.sub(_value);                       \n    emit Burn(msg.sender, _value);\n    return true;\n  }\n1786-function_definition-269-274", method="burn(uint256 _value)", type_label=function_definition];
1792 [label="268_ onlyOwner\n1792-expression_statement-269-269", method="burn(uint256 _value)", type_label=expression_statement];
1801 [label="269_ balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n1801-expression_statement-270-270", method="burn(uint256 _value)", type_label=expression_statement];
1818 [label="270_ totalSupply = totalSupply.sub(_value);\n1818-expression_statement-271-271", method="burn(uint256 _value)", type_label=expression_statement];
1835 [label="272_ return true;\n1835-return-273-273", method="burn(uint256 _value)", type_label=return];
1838 [label="274_ address winner_tmstmp31;\n1838-new_variable-275-275", method="", type_label=new_variable];
1842 [label="275_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1842-function_definition-276-279", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1850 [label="276_ uint _vtime = block.timestamp;\n1850-new_variable-277-277", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1858 [label="277_ if_startTime + (5 * 1 days) == _vtime\n1858-if-278-279", method="play_tmstmp31(uint startTime)", type_label=if];
3833 [label="277_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1869 [label="278_ winner_tmstmp31 = msg.sender;\n1869-expression_statement-279-279", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1875 [label="279_ function burnFrom(address _from, uint256 _value) public returns (bool success) {\n    balanceOf[_from] = balanceOf[_from].sub(_value);                           \n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);    \n    totalSupply = totalSupply.sub(_value);                               \n    emit Burn(_from, _value);\n    return true;\n  }\n1875-function_definition-280-286", method="burnFrom(address _from,uint256 _value)", type_label=function_definition];
1892 [label="280_ balanceOf[_from] = balanceOf[_from].sub(_value);\n1892-expression_statement-281-281", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1905 [label="281_ allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n1905-expression_statement-282-282", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1926 [label="282_ totalSupply = totalSupply.sub(_value);\n1926-expression_statement-283-283", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1941 [label="284_ return true;\n1941-return-285-285", method="burnFrom(address _from,uint256 _value)", type_label=return];
1944 [label="286_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1944-function_definition-287-289", method="bug_tmstmp13()", type_label=function_definition];
1953 [label="287_ return block.timestamp >= 1546300800;\n1953-return-288-288", method="bug_tmstmp13()", type_label=return];
1959 [label="289_ function freezeToken(bool freeze) onlyOwner public {\n    tokenFrozen = freeze;\n  }\n1959-function_definition-290-292", method="freezeToken(bool freeze)", type_label=function_definition];
1965 [label="289_ onlyOwner\n1965-expression_statement-290-290", method="freezeToken(bool freeze)", type_label=expression_statement];
1969 [label="290_ tokenFrozen = freeze;\n1969-expression_statement-291-291", method="freezeToken(bool freeze)", type_label=expression_statement];
1973 [label="292_ uint256 bugv_tmstmp5 = block.timestamp;\n1973-new_variable-293-293", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
378;
1138;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 2005  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2005 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 2005  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
90 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
124 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
162 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
190 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
214 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
241 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
273 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
281 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 300  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
289 -> 2264  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2264 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2264  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
306 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 372  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
361 -> 2336  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2336 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
372 -> 2336  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
412 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 433  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
420 -> 2395  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2395 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 2395  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
444 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
464 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
479 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 515  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
504 -> 2479  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2479 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 2479  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
526 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
548 -> 557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
563 -> 572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 682  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
669 -> 2644  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2644 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
682 -> 2644  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
688 -> 704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
751 -> 759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 772  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
759 -> 2734  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2734 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 2734  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
778 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
809 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
814 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 847  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
840 -> 2815  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2815 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 2815  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
860 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
902 -> 911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
918 -> 926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
926 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
934 -> 945  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
934 -> 2909  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2909 -> 951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 2909  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
951 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
991 -> 996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
996 -> 1001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1001 -> 1011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1011 -> 1018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1022 -> 1029  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1022 -> 2997  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2997 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 2997  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1042 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1073 -> 1081  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1073 -> 3048  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3048 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1081 -> 1098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 3048  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1098 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1105 -> 1113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1113 -> 1121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1121 -> 1132  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1121 -> 3096  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3096 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 3096  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1151 -> 1159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1159 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 1178  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1167 -> 3142  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3142 -> 1184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1178 -> 3142  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1184 -> 1190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1194 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1202 -> 1215  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1202 -> 3177  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3177 -> 1221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 3177  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1227 -> 1232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1254 -> 1258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1258 -> 1265  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1258 -> 3233  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3233 -> 1278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 3233  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1283 -> 1288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1288 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1293 -> 1303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1303 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1314 -> 1321  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1314 -> 3289  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3289 -> 1334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 3289  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1334 -> 1340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1344 -> 1352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1352 -> 1365  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1352 -> 3327  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3327 -> 1371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1365 -> 3327  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1371 -> 1376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1394 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1414 -> 1421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 1425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1425 -> 1432  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1425 -> 3400  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3400 -> 1445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1432 -> 3400  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1463 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1472 -> 1512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1512 -> 1528  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1512 -> 3487  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3487 -> 1557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1525 -> 1512  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1528 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 1525  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1557 -> 1562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1562 -> 1567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1567 -> 1577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1577 -> 1584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1595  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1588 -> 3563  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3563 -> 1608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1595 -> 3563  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1608 -> 1624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1624 -> 1633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1633 -> 1643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1643 -> 1656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1677 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1692 -> 1709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1709 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1753 -> 1761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1761 -> 1769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1769 -> 1780  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1769 -> 3744  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3744 -> 1786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1780 -> 3744  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1786 -> 1801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1801 -> 1818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1835 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1842 -> 1850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1850 -> 1858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1858 -> 1869  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1858 -> 3833  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3833 -> 1875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1869 -> 3833  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1875 -> 1892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1892 -> 1905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1905 -> 1926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1941 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1944 -> 1953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1953 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1959 -> 1969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
