digraph  {
15 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n15-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
32 [label="3_ if_a == 0\n32-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
2380 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
37 [label="4_ return 0;\n37-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
39 [label="6_ uint256 c = a * b;\n39-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
47 [label="7_ require(c / a == b);\n47-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
56 [label="8_ return c;\n56-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
58 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n58-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
75 [label="11_ require(b > 0);\n75-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
82 [label="12_ uint256 c = a / b;\n82-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
90 [label="13_ return c;\n90-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
92 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n92-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
109 [label="16_ require(b <= a);\n109-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
116 [label="17_ uint256 c = a - b;\n116-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
124 [label="18_ return c;\n124-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
126 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n126-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
143 [label="21_ uint256 c = a + b;\n143-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
151 [label="22_ require(c >= a);\n151-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
158 [label="23_ return c;\n158-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
160 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n160-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
177 [label="26_ require(b != 0);\n177-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
184 [label="27_ return a % b;\n184-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
188 [label="29_ function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n188-function_definition-30-32", method="max(uint256 a,uint256 b)", type_label=function_definition];
205 [label="30_ return a >= b ? a : b;\n205-return-31-31", method="max(uint256 a,uint256 b)", type_label=return];
212 [label="32_ function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n212-function_definition-33-35", method="min(uint256 a,uint256 b)", type_label=function_definition];
229 [label="33_ return a < b ? a : b;\n229-return-34-34", method="min(uint256 a,uint256 b)", type_label=return];
236 [label="35_ function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n236-function_definition-36-38", method="average(uint256 a,uint256 b)", type_label=function_definition];
253 [label="36_ return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n253-return-37-37", method="average(uint256 a,uint256 b)", type_label=return];
278 [label="40_ function totalSupply() public view returns (uint256);\n278-function_definition-41-41", method="totalSupply()", type_label=function_definition];
286 [label="41_ address winner_tmstmp11;\n286-new_variable-42-42", method="", type_label=new_variable];
290 [label="42_ function play_tmstmp11(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp11 = msg.sender;}}\n290-function_definition-43-46", method="play_tmstmp11(uint startTime)", type_label=function_definition];
298 [label="43_ uint _vtime = block.timestamp;\n298-new_variable-44-44", method="play_tmstmp11(uint startTime)", type_label=new_variable];
306 [label="44_ if_startTime + (5 * 1 days) == _vtime\n306-if-45-46", method="play_tmstmp11(uint startTime)", type_label=if];
2654 [label="44_ end_if", method="play_tmstmp11(uint startTime)", type_label=end_if];
317 [label="45_ winner_tmstmp11 = msg.sender;\n317-expression_statement-46-46", method="play_tmstmp11(uint startTime)", type_label=expression_statement];
323 [label="46_ function balanceOf(address _owner) public view returns (uint256);\n323-function_definition-47-47", method="balanceOf(address _owner)", type_label=function_definition];
335 [label="47_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n335-function_definition-48-50", method="bug_tmstmp1()", type_label=function_definition];
344 [label="48_ return block.timestamp >= 1546300800;\n344-return-49-49", method="bug_tmstmp1()", type_label=return];
350 [label="50_ function transfer(address _to, uint256 _value) public returns (bool);\n350-function_definition-51-51", method="transfer(address _to,uint256 _value)", type_label=function_definition];
365 [label="51_ address winner_tmstmp2;\n365-new_variable-52-52", method="", type_label=new_variable];
369 [label="52_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n369-function_definition-53-55", method="play_tmstmp2(uint startTime)", type_label=function_definition];
377 [label="53_ if_startTime + (5 * 1 days) == block.timestamp\n377-if-54-55", method="play_tmstmp2(uint startTime)", type_label=if];
2725 [label="53_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
390 [label="54_ winner_tmstmp2 = msg.sender;\n390-expression_statement-55-55", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
396 [label="55_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n396-function_definition-56-56", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
415 [label="56_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n415-function_definition-57-59", method="bug_tmstmp17()", type_label=function_definition];
424 [label="57_ return block.timestamp >= 1546300800;\n424-return-58-58", method="bug_tmstmp17()", type_label=return];
430 [label="59_ function approve(address _spender, uint256 _value) public returns (bool);\n430-function_definition-60-60", method="approve(address _spender,uint256 _value)", type_label=function_definition];
445 [label="60_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n445-function_definition-61-63", method="bug_tmstmp37()", type_label=function_definition];
454 [label="61_ return block.timestamp >= 1546300800;\n454-return-62-62", method="bug_tmstmp37()", type_label=return];
460 [label="63_ function allowance(address _owner, address _spender) public view returns (uint256);\n460-function_definition-64-64", method="allowance(address _owner,address _spender)", type_label=function_definition];
476 [label="64_ address winner_tmstmp3;\n476-new_variable-65-65", method="", type_label=new_variable];
480 [label="65_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n480-function_definition-66-69", method="play_tmstmp3(uint startTime)", type_label=function_definition];
488 [label="66_ uint _vtime = block.timestamp;\n488-new_variable-67-67", method="play_tmstmp3(uint startTime)", type_label=new_variable];
496 [label="67_ if_startTime + (5 * 1 days) == _vtime\n496-if-68-69", method="play_tmstmp3(uint startTime)", type_label=if];
2844 [label="67_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
507 [label="68_ winner_tmstmp3 = msg.sender;\n507-expression_statement-69-69", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
513 [label="69_ uint256 bugv_tmstmp2 = block.timestamp;\n513-new_variable-70-70", method="", type_label=new_variable];
534 [label="71_ uint256 bugv_tmstmp3 = block.timestamp;\n534-new_variable-72-72", method="", type_label=new_variable];
558 [label="75_ function tokenFallback(address _from, uint _value, bytes memory _data) public;\n558-function_definition-76-76", method="tokenFallback(address _from,uint _value,bytes memory _data)", type_label=function_definition];
573 [label="76_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n573-function_definition-77-79", method="bug_tmstmp9()", type_label=function_definition];
582 [label="77_ return block.timestamp >= 1546300800;\n582-return-78-78", method="bug_tmstmp9()", type_label=return];
591 [label="81_ function balanceOf(address who) public view returns (uint);\n591-function_definition-82-82", method="balanceOf(address who)", type_label=function_definition];
603 [label="82_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n603-function_definition-83-85", method="bug_tmstmp25()", type_label=function_definition];
612 [label="83_ return block.timestamp >= 1546300800;\n612-return-84-84", method="bug_tmstmp25()", type_label=return];
618 [label="85_ function transfer(address to, uint value) public returns (bool);\n618-function_definition-86-86", method="transfer(address to,uint value)", type_label=function_definition];
633 [label="86_ address winner_tmstmp19;\n633-new_variable-87-87", method="", type_label=new_variable];
637 [label="87_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n637-function_definition-88-91", method="play_tmstmp19(uint startTime)", type_label=function_definition];
645 [label="88_ uint _vtime = block.timestamp;\n645-new_variable-89-89", method="play_tmstmp19(uint startTime)", type_label=new_variable];
653 [label="89_ if_startTime + (5 * 1 days) == _vtime\n653-if-90-91", method="play_tmstmp19(uint startTime)", type_label=if];
3001 [label="89_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
664 [label="90_ winner_tmstmp19 = msg.sender;\n664-expression_statement-91-91", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
670 [label="91_ function transfer(address to, uint value, bytes memory data) public returns (bool);\n670-function_definition-92-92", method="transfer(address to,uint value,bytes memory data)", type_label=function_definition];
689 [label="92_ address winner_tmstmp26;\n689-new_variable-93-93", method="", type_label=new_variable];
693 [label="93_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n693-function_definition-94-96", method="play_tmstmp26(uint startTime)", type_label=function_definition];
701 [label="94_ if_startTime + (5 * 1 days) == block.timestamp\n701-if-95-96", method="play_tmstmp26(uint startTime)", type_label=if];
3049 [label="94_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
714 [label="95_ winner_tmstmp26 = msg.sender;\n714-expression_statement-96-96", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
720 [label="96_ uint256 bugv_tmstmp4 = block.timestamp;\n720-new_variable-97-97", method="", type_label=new_variable];
752 [label="101_ address winner_tmstmp15;\n752-new_variable-102-102", method="", type_label=new_variable];
756 [label="102_ function play_tmstmp15(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp15 = msg.sender;}}\n756-function_definition-103-106", method="play_tmstmp15(uint startTime)", type_label=function_definition];
764 [label="103_ uint _vtime = block.timestamp;\n764-new_variable-104-104", method="play_tmstmp15(uint startTime)", type_label=new_variable];
772 [label="104_ if_startTime + (5 * 1 days) == _vtime\n772-if-105-106", method="play_tmstmp15(uint startTime)", type_label=if];
3120 [label="104_ end_if", method="play_tmstmp15(uint startTime)", type_label=end_if];
783 [label="105_ winner_tmstmp15 = msg.sender;\n783-expression_statement-106-106", method="play_tmstmp15(uint startTime)", type_label=expression_statement];
789 [label="106_ mapping(address => uint256) balances;\n789-new_variable-107-107", method="", type_label=new_variable];
795 [label="107_ function transfer(address _to, uint _value) public returns (bool) {\n        uint codeLength;\n        bytes memory empty;\n        assembly {\n            codeLength := extcodesize(_to)\n        }\n        require(_value > 0);\n        require(balances[msg.sender] >= _value);\n        require(balances[_to] + _value > 0);\n        require(msg.sender != _to);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if (codeLength > 0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, empty);\n            return false;\n        }\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n795-function_definition-108-127", method="transfer(address _to,uint _value)", type_label=function_definition];
811 [label="108_ uint codeLength;\n811-new_variable-109-109", method="transfer(address _to,uint _value)", type_label=new_variable];
816 [label="109_ bytes memory empty;\n816-new_variable-110-110", method="transfer(address _to,uint _value)", type_label=new_variable];
831 [label="113_ require(_value > 0);\n831-expression_statement-114-114", method="transfer(address _to,uint _value)", type_label=expression_statement];
838 [label="114_ require(balances[msg.sender] >= _value);\n838-expression_statement-115-115", method="transfer(address _to,uint _value)", type_label=expression_statement];
849 [label="115_ require(balances[_to] + _value > 0);\n849-expression_statement-116-116", method="transfer(address _to,uint _value)", type_label=expression_statement];
860 [label="116_ require(msg.sender != _to);\n860-expression_statement-117-117", method="transfer(address _to,uint _value)", type_label=expression_statement];
869 [label="117_ balances[msg.sender] = balances[msg.sender].sub(_value);\n869-expression_statement-118-118", method="transfer(address _to,uint _value)", type_label=expression_statement];
886 [label="118_ balances[_to] = balances[_to].add(_value);\n886-expression_statement-119-119", method="transfer(address _to,uint _value)", type_label=expression_statement];
899 [label="119_ if_codeLength > 0\n899-if-120-124", method="transfer(address _to,uint _value)", type_label=if];
3247 [label="119_ end_if", method="transfer(address _to,uint _value)", type_label=end_if];
904 [label="120_ ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n904-new_variable-121-121", method="transfer(address _to,uint _value)", type_label=new_variable];
914 [label="121_ receiver.tokenFallback(msg.sender, _value, empty);\n914-expression_statement-122-122", method="transfer(address _to,uint _value)", type_label=expression_statement];
927 [label="122_ return false;\n927-return-123-123", method="transfer(address _to,uint _value)", type_label=return];
940 [label="125_ return true;\n940-return-126-126", method="transfer(address _to,uint _value)", type_label=return];
943 [label="127_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n943-function_definition-128-136", method="bug_tmstmp20()", type_label=function_definition];
948 [label="128_ uint pastBlockTime_tmstmp20;\n948-new_variable-129-129", method="bug_tmstmp20()", type_label=new_variable];
953 [label="129_ require(msg.value == 10 ether);\n953-expression_statement-130-130", method="bug_tmstmp20()", type_label=expression_statement];
963 [label="130_ require(now != pastBlockTime_tmstmp20);\n963-expression_statement-131-131", method="bug_tmstmp20()", type_label=expression_statement];
970 [label="131_ pastBlockTime_tmstmp20 = now;\n970-expression_statement-132-132", method="bug_tmstmp20()", type_label=expression_statement];
974 [label="132_ if_now % 15 == 0\n974-if-133-135", method="bug_tmstmp20()", type_label=if];
3322 [label="132_ end_if", method="bug_tmstmp20()", type_label=end_if];
981 [label="133_ msg.sender.transfer(address(this).balance);\n981-expression_statement-134-134", method="bug_tmstmp20()", type_label=expression_statement];
994 [label="136_ function transfer(address _to, uint _value, bytes memory _data) public returns (bool) {\n        uint codeLength;\n        assembly {\n            codeLength := extcodesize(_to)\n        }\n        require(_value > 0);\n        require(balances[msg.sender] >= _value);\n        require(balances[_to] + _value > 0);\n        require(msg.sender != _to);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if (codeLength > 0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n            return false;\n        }\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n994-function_definition-137-155", method="transfer(address _to,uint _value,bytes memory _data)", type_label=function_definition];
1014 [label="137_ uint codeLength;\n1014-new_variable-138-138", method="transfer(address _to,uint _value,bytes memory _data)", type_label=new_variable];
1029 [label="141_ require(_value > 0);\n1029-expression_statement-142-142", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
1036 [label="142_ require(balances[msg.sender] >= _value);\n1036-expression_statement-143-143", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
1047 [label="143_ require(balances[_to] + _value > 0);\n1047-expression_statement-144-144", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
1058 [label="144_ require(msg.sender != _to);\n1058-expression_statement-145-145", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
1067 [label="145_ balances[msg.sender] = balances[msg.sender].sub(_value);\n1067-expression_statement-146-146", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
1084 [label="146_ balances[_to] = balances[_to].add(_value);\n1084-expression_statement-147-147", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
1097 [label="147_ if_codeLength > 0\n1097-if-148-152", method="transfer(address _to,uint _value,bytes memory _data)", type_label=if];
3445 [label="147_ end_if", method="transfer(address _to,uint _value,bytes memory _data)", type_label=end_if];
1102 [label="148_ ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n1102-new_variable-149-149", method="transfer(address _to,uint _value,bytes memory _data)", type_label=new_variable];
1112 [label="149_ receiver.tokenFallback(msg.sender, _value, _data);\n1112-expression_statement-150-150", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
1125 [label="150_ return false;\n1125-return-151-151", method="transfer(address _to,uint _value,bytes memory _data)", type_label=return];
1138 [label="153_ return true;\n1138-return-154-154", method="transfer(address _to,uint _value,bytes memory _data)", type_label=return];
1141 [label="155_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1141-function_definition-156-164", method="bug_tmstmp32()", type_label=function_definition];
1146 [label="156_ uint pastBlockTime_tmstmp32;\n1146-new_variable-157-157", method="bug_tmstmp32()", type_label=new_variable];
1151 [label="157_ require(msg.value == 10 ether);\n1151-expression_statement-158-158", method="bug_tmstmp32()", type_label=expression_statement];
1161 [label="158_ require(now != pastBlockTime_tmstmp32);\n1161-expression_statement-159-159", method="bug_tmstmp32()", type_label=expression_statement];
1168 [label="159_ pastBlockTime_tmstmp32 = now;\n1168-expression_statement-160-160", method="bug_tmstmp32()", type_label=expression_statement];
1172 [label="160_ if_now % 15 == 0\n1172-if-161-163", method="bug_tmstmp32()", type_label=if];
3520 [label="160_ end_if", method="bug_tmstmp32()", type_label=end_if];
1179 [label="161_ msg.sender.transfer(address(this).balance);\n1179-expression_statement-162-162", method="bug_tmstmp32()", type_label=expression_statement];
1192 [label="164_ function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n1192-function_definition-165-167", method="balanceOf(address _owner)", type_label=function_definition];
1205 [label="165_ return balances[_owner];\n1205-return-166-166", method="balanceOf(address _owner)", type_label=return];
1209 [label="167_ address winner_tmstmp38;\n1209-new_variable-168-168", method="", type_label=new_variable];
1213 [label="168_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n1213-function_definition-169-171", method="play_tmstmp38(uint startTime)", type_label=function_definition];
1221 [label="169_ if_startTime + (5 * 1 days) == block.timestamp\n1221-if-170-171", method="play_tmstmp38(uint startTime)", type_label=if];
3569 [label="169_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
1234 [label="170_ winner_tmstmp38 = msg.sender;\n1234-expression_statement-171-171", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
1243 [label="173_ function bug_tmstmp28 () public payable {\n	uint pastBlockTime_tmstmp28;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp28);  \n        pastBlockTime_tmstmp28 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1243-function_definition-174-182", method="bug_tmstmp28()", type_label=function_definition];
1248 [label="174_ uint pastBlockTime_tmstmp28;\n1248-new_variable-175-175", method="bug_tmstmp28()", type_label=new_variable];
1253 [label="175_ require(msg.value == 10 ether);\n1253-expression_statement-176-176", method="bug_tmstmp28()", type_label=expression_statement];
1263 [label="176_ require(now != pastBlockTime_tmstmp28);\n1263-expression_statement-177-177", method="bug_tmstmp28()", type_label=expression_statement];
1270 [label="177_ pastBlockTime_tmstmp28 = now;\n1270-expression_statement-178-178", method="bug_tmstmp28()", type_label=expression_statement];
1274 [label="178_ if_now % 15 == 0\n1274-if-179-181", method="bug_tmstmp28()", type_label=if];
3622 [label="178_ end_if", method="bug_tmstmp28()", type_label=end_if];
1281 [label="179_ msg.sender.transfer(address(this).balance);\n1281-expression_statement-180-180", method="bug_tmstmp28()", type_label=expression_statement];
1294 [label="182_ address public owner;\n1294-new_variable-183-183", method="", type_label=new_variable];
1301 [label="184_ owner = msg.sender;\n1301-expression_statement-185-185", method="", type_label=expression_statement];
1307 [label="185_ owner = 0x800A4B210B920020bE22668d28afd7ddef5c6243\n;\n1307-expression_statement-186-187", method="", type_label=expression_statement];
1311 [label="188_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1311-function_definition-189-197", method="bug_tmstmp4()", type_label=function_definition];
1316 [label="189_ uint pastBlockTime_tmstmp4;\n1316-new_variable-190-190", method="bug_tmstmp4()", type_label=new_variable];
1321 [label="190_ require(msg.value == 10 ether);\n1321-expression_statement-191-191", method="bug_tmstmp4()", type_label=expression_statement];
1331 [label="191_ require(now != pastBlockTime_tmstmp4);\n1331-expression_statement-192-192", method="bug_tmstmp4()", type_label=expression_statement];
1338 [label="192_ pastBlockTime_tmstmp4 = now;\n1338-expression_statement-193-193", method="bug_tmstmp4()", type_label=expression_statement];
1342 [label="193_ if_now % 15 == 0\n1342-if-194-196", method="bug_tmstmp4()", type_label=if];
3690 [label="193_ end_if", method="bug_tmstmp4()", type_label=end_if];
1349 [label="194_ msg.sender.transfer(address(this).balance);\n1349-expression_statement-195-195", method="bug_tmstmp4()", type_label=expression_statement];
1362 [label="197_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n1362-expression_statement-198-201", method="", type_label=expression_statement];
1365 [label="198_ require(msg.sender == owner);\n1365-expression_statement-199-199", method="", type_label=expression_statement];
1374 [label="199_ _;\n1374-expression_statement-200-200", method="", type_label=expression_statement];
1376 [label="201_ uint256 bugv_tmstmp5 = block.timestamp;\n1376-new_variable-202-202", method="", type_label=new_variable];
1392 [label="204_ address winner_tmstmp34;\n1392-new_variable-205-205", method="", type_label=new_variable];
1396 [label="205_ function play_tmstmp34(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp34 = msg.sender;}}\n1396-function_definition-206-208", method="play_tmstmp34(uint startTime)", type_label=function_definition];
1404 [label="206_ if_startTime + (5 * 1 days) == block.timestamp\n1404-if-207-208", method="play_tmstmp34(uint startTime)", type_label=if];
3752 [label="206_ end_if", method="play_tmstmp34(uint startTime)", type_label=end_if];
1417 [label="207_ winner_tmstmp34 = msg.sender;\n1417-expression_statement-208-208", method="play_tmstmp34(uint startTime)", type_label=expression_statement];
1423 [label="208_ string public constant name = \"Grand Coin\";\n1423-new_variable-209-209", method="", type_label=new_variable];
1430 [label="209_ function bug_tmstmp21() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1430-function_definition-210-212", method="bug_tmstmp21()", type_label=function_definition];
1439 [label="210_ return block.timestamp >= 1546300800;\n1439-return-211-211", method="bug_tmstmp21()", type_label=return];
1445 [label="212_ string public constant symbol = \"GRAND\";\n1445-new_variable-213-213", method="", type_label=new_variable];
1452 [label="213_ address winner_tmstmp10;\n1452-new_variable-214-214", method="", type_label=new_variable];
1456 [label="214_ function play_tmstmp10(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp10 = msg.sender;}}\n1456-function_definition-215-217", method="play_tmstmp10(uint startTime)", type_label=function_definition];
1464 [label="215_ if_startTime + (5 * 1 days) == block.timestamp\n1464-if-216-217", method="play_tmstmp10(uint startTime)", type_label=if];
3812 [label="215_ end_if", method="play_tmstmp10(uint startTime)", type_label=end_if];
1477 [label="216_ winner_tmstmp10 = msg.sender;\n1477-expression_statement-217-217", method="play_tmstmp10(uint startTime)", type_label=expression_statement];
1483 [label="217_ uint8 public constant decimals = 18;\n1483-new_variable-218-218", method="", type_label=new_variable];
1489 [label="218_ uint256 public tokenRemained = 2 * (10 ** 9) * (10 ** uint(decimals));\n1489-new_variable-219-219", method="", type_label=new_variable];
1507 [label="219_ uint256 public totalSupply = 2 * (10 ** 9) * (10 ** uint(decimals));\n1507-new_variable-220-220", method="", type_label=new_variable];
1525 [label="220_ address winner_tmstmp22;\n1525-new_variable-221-221", method="", type_label=new_variable];
1529 [label="221_ function play_tmstmp22(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp22 = msg.sender;}}\n1529-function_definition-222-224", method="play_tmstmp22(uint startTime)", type_label=function_definition];
1537 [label="222_ if_startTime + (5 * 1 days) == block.timestamp\n1537-if-223-224", method="play_tmstmp22(uint startTime)", type_label=if];
3885 [label="222_ end_if", method="play_tmstmp22(uint startTime)", type_label=end_if];
1550 [label="223_ winner_tmstmp22 = msg.sender;\n1550-expression_statement-224-224", method="play_tmstmp22(uint startTime)", type_label=expression_statement];
1556 [label="224_ bool public pause = false;\n1556-new_variable-225-225", method="", type_label=new_variable];
1563 [label="225_ function bug_tmstmp12 () public payable {\n	uint pastBlockTime_tmstmp12;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp12);  \n        pastBlockTime_tmstmp12 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1563-function_definition-226-234", method="bug_tmstmp12()", type_label=function_definition];
1568 [label="226_ uint pastBlockTime_tmstmp12;\n1568-new_variable-227-227", method="bug_tmstmp12()", type_label=new_variable];
1573 [label="227_ require(msg.value == 10 ether);\n1573-expression_statement-228-228", method="bug_tmstmp12()", type_label=expression_statement];
1583 [label="228_ require(now != pastBlockTime_tmstmp12);\n1583-expression_statement-229-229", method="bug_tmstmp12()", type_label=expression_statement];
1590 [label="229_ pastBlockTime_tmstmp12 = now;\n1590-expression_statement-230-230", method="bug_tmstmp12()", type_label=expression_statement];
1594 [label="230_ if_now % 15 == 0\n1594-if-231-233", method="bug_tmstmp12()", type_label=if];
3942 [label="230_ end_if", method="bug_tmstmp12()", type_label=end_if];
1601 [label="231_ msg.sender.transfer(address(this).balance);\n1601-expression_statement-232-232", method="bug_tmstmp12()", type_label=expression_statement];
1614 [label="234_ mapping(address => bool) lockAddresses;\n1614-new_variable-235-235", method="", type_label=new_variable];
1622 [label="236_ balances[0x96F7F180C6B53e9313Dc26589739FDC8200a699f] = totalSupply;\n1622-expression_statement-237-237", method="", type_label=expression_statement];
1628 [label="238_ address winner_tmstmp7;\n1628-new_variable-239-239", method="", type_label=new_variable];
1632 [label="239_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n1632-function_definition-240-243", method="play_tmstmp7(uint startTime)", type_label=function_definition];
1640 [label="240_ uint _vtime = block.timestamp;\n1640-new_variable-241-241", method="play_tmstmp7(uint startTime)", type_label=new_variable];
1648 [label="241_ if_startTime + (5 * 1 days) == _vtime\n1648-if-242-243", method="play_tmstmp7(uint startTime)", type_label=if];
3996 [label="241_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
1659 [label="242_ winner_tmstmp7 = msg.sender;\n1659-expression_statement-243-243", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
1665 [label="243_ function changeOwner(address _new) public onlyOwner {\n    	require(_new != address(0));\n        owner = _new;\n    }\n1665-function_definition-244-247", method="changeOwner(address _new)", type_label=function_definition];
1672 [label="243_ onlyOwner\n1672-expression_statement-244-244", method="changeOwner(address _new)", type_label=expression_statement];
1675 [label="244_ require(_new != address(0));\n1675-expression_statement-245-245", method="changeOwner(address _new)", type_label=expression_statement];
1684 [label="245_ owner = _new;\n1684-expression_statement-246-246", method="changeOwner(address _new)", type_label=expression_statement];
1688 [label="247_ address winner_tmstmp23;\n1688-new_variable-248-248", method="", type_label=new_variable];
1692 [label="248_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n1692-function_definition-249-252", method="play_tmstmp23(uint startTime)", type_label=function_definition];
1700 [label="249_ uint _vtime = block.timestamp;\n1700-new_variable-250-250", method="play_tmstmp23(uint startTime)", type_label=new_variable];
1708 [label="250_ if_startTime + (5 * 1 days) == _vtime\n1708-if-251-252", method="play_tmstmp23(uint startTime)", type_label=if];
4056 [label="250_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
1719 [label="251_ winner_tmstmp23 = msg.sender;\n1719-expression_statement-252-252", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
1725 [label="252_ function pauseContract() public onlyOwner {\n        pause = true;\n    }\n1725-function_definition-253-255", method="pauseContract()", type_label=function_definition];
1728 [label="252_ onlyOwner\n1728-expression_statement-253-253", method="pauseContract()", type_label=expression_statement];
1731 [label="253_ pause = true;\n1731-expression_statement-254-254", method="pauseContract()", type_label=expression_statement];
1736 [label="255_ address winner_tmstmp14;\n1736-new_variable-256-256", method="", type_label=new_variable];
1740 [label="256_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n1740-function_definition-257-259", method="play_tmstmp14(uint startTime)", type_label=function_definition];
1748 [label="257_ if_startTime + (5 * 1 days) == block.timestamp\n1748-if-258-259", method="play_tmstmp14(uint startTime)", type_label=if];
4096 [label="257_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
1761 [label="258_ winner_tmstmp14 = msg.sender;\n1761-expression_statement-259-259", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
1767 [label="259_ function resumeContract() public onlyOwner {\n        pause = false;\n    }\n1767-function_definition-260-262", method="resumeContract()", type_label=function_definition];
1770 [label="259_ onlyOwner\n1770-expression_statement-260-260", method="resumeContract()", type_label=expression_statement];
1773 [label="260_ pause = false;\n1773-expression_statement-261-261", method="resumeContract()", type_label=expression_statement];
1778 [label="262_ address winner_tmstmp30;\n1778-new_variable-263-263", method="", type_label=new_variable];
1782 [label="263_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n1782-function_definition-264-266", method="play_tmstmp30(uint startTime)", type_label=function_definition];
1790 [label="264_ if_startTime + (5 * 1 days) == block.timestamp\n1790-if-265-266", method="play_tmstmp30(uint startTime)", type_label=if];
4138 [label="264_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
1803 [label="265_ winner_tmstmp30 = msg.sender;\n1803-expression_statement-266-266", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
1809 [label="266_ function is_contract_paused() public view returns (bool) {\n        return pause;\n    }\n1809-function_definition-267-269", method="is_contract_paused()", type_label=function_definition];
1818 [label="267_ return pause;\n1818-return-268-268", method="is_contract_paused()", type_label=return];
1820 [label="269_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1820-function_definition-270-278", method="bug_tmstmp8()", type_label=function_definition];
1825 [label="270_ uint pastBlockTime_tmstmp8;\n1825-new_variable-271-271", method="bug_tmstmp8()", type_label=new_variable];
1830 [label="271_ require(msg.value == 10 ether);\n1830-expression_statement-272-272", method="bug_tmstmp8()", type_label=expression_statement];
1840 [label="272_ require(now != pastBlockTime_tmstmp8);\n1840-expression_statement-273-273", method="bug_tmstmp8()", type_label=expression_statement];
1847 [label="273_ pastBlockTime_tmstmp8 = now;\n1847-expression_statement-274-274", method="bug_tmstmp8()", type_label=expression_statement];
1851 [label="274_ if_now % 15 == 0\n1851-if-275-277", method="bug_tmstmp8()", type_label=if];
4199 [label="274_ end_if", method="bug_tmstmp8()", type_label=end_if];
1858 [label="275_ msg.sender.transfer(address(this).balance);\n1858-expression_statement-276-276", method="bug_tmstmp8()", type_label=expression_statement];
1871 [label="278_ function lock(address _addr) public onlyOwner {\n        lockAddresses[_addr] = true;\n    }\n1871-function_definition-279-281", method="lock(address _addr)", type_label=function_definition];
1878 [label="278_ onlyOwner\n1878-expression_statement-279-279", method="lock(address _addr)", type_label=expression_statement];
1881 [label="279_ lockAddresses[_addr] = true;\n1881-expression_statement-280-280", method="lock(address _addr)", type_label=expression_statement];
1888 [label="281_ address winner_tmstmp39;\n1888-new_variable-282-282", method="", type_label=new_variable];
1892 [label="282_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1892-function_definition-283-286", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1900 [label="283_ uint _vtime = block.timestamp;\n1900-new_variable-284-284", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1908 [label="284_ if_startTime + (5 * 1 days) == _vtime\n1908-if-285-286", method="play_tmstmp39(uint startTime)", type_label=if];
4256 [label="284_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1919 [label="285_ winner_tmstmp39 = msg.sender;\n1919-expression_statement-286-286", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1925 [label="286_ function unlock(address _addr) public onlyOwner {\n        lockAddresses[_addr] = false;\n    }\n1925-function_definition-287-289", method="unlock(address _addr)", type_label=function_definition];
1932 [label="286_ onlyOwner\n1932-expression_statement-287-287", method="unlock(address _addr)", type_label=expression_statement];
1935 [label="287_ lockAddresses[_addr] = false;\n1935-expression_statement-288-288", method="unlock(address _addr)", type_label=expression_statement];
1942 [label="289_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1942-function_definition-290-298", method="bug_tmstmp36()", type_label=function_definition];
1947 [label="290_ uint pastBlockTime_tmstmp36;\n1947-new_variable-291-291", method="bug_tmstmp36()", type_label=new_variable];
1952 [label="291_ require(msg.value == 10 ether);\n1952-expression_statement-292-292", method="bug_tmstmp36()", type_label=expression_statement];
1962 [label="292_ require(now != pastBlockTime_tmstmp36);\n1962-expression_statement-293-293", method="bug_tmstmp36()", type_label=expression_statement];
1969 [label="293_ pastBlockTime_tmstmp36 = now;\n1969-expression_statement-294-294", method="bug_tmstmp36()", type_label=expression_statement];
1973 [label="294_ if_now % 15 == 0\n1973-if-295-297", method="bug_tmstmp36()", type_label=if];
4321 [label="294_ end_if", method="bug_tmstmp36()", type_label=end_if];
1980 [label="295_ msg.sender.transfer(address(this).balance);\n1980-expression_statement-296-296", method="bug_tmstmp36()", type_label=expression_statement];
1993 [label="298_ function am_I_locked(address _addr) public view returns (bool) {\n        return lockAddresses[_addr];\n    }\n1993-function_definition-299-301", method="am_I_locked(address _addr)", type_label=function_definition];
2006 [label="299_ return lockAddresses[_addr];\n2006-return-300-300", method="am_I_locked(address _addr)", type_label=return];
2010 [label="301_ address winner_tmstmp35;\n2010-new_variable-302-302", method="", type_label=new_variable];
2014 [label="302_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n2014-function_definition-303-306", method="play_tmstmp35(uint startTime)", type_label=function_definition];
2022 [label="303_ uint _vtime = block.timestamp;\n2022-new_variable-304-304", method="play_tmstmp35(uint startTime)", type_label=new_variable];
2030 [label="304_ if_startTime + (5 * 1 days) == _vtime\n2030-if-305-306", method="play_tmstmp35(uint startTime)", type_label=if];
4378 [label="304_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
2041 [label="305_ winner_tmstmp35 = msg.sender;\n2041-expression_statement-306-306", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
2051 [label="307_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n2051-function_definition-308-316", method="bug_tmstmp40()", type_label=function_definition];
2056 [label="308_ uint pastBlockTime_tmstmp40;\n2056-new_variable-309-309", method="bug_tmstmp40()", type_label=new_variable];
2061 [label="309_ require(msg.value == 10 ether);\n2061-expression_statement-310-310", method="bug_tmstmp40()", type_label=expression_statement];
2071 [label="310_ require(now != pastBlockTime_tmstmp40);\n2071-expression_statement-311-311", method="bug_tmstmp40()", type_label=expression_statement];
2078 [label="311_ pastBlockTime_tmstmp40 = now;\n2078-expression_statement-312-312", method="bug_tmstmp40()", type_label=expression_statement];
2082 [label="312_ if_now % 15 == 0\n2082-if-313-315", method="bug_tmstmp40()", type_label=if];
4430 [label="312_ end_if", method="bug_tmstmp40()", type_label=end_if];
2089 [label="313_ msg.sender.transfer(address(this).balance);\n2089-expression_statement-314-314", method="bug_tmstmp40()", type_label=expression_statement];
2102 [label="316_ function getETH(uint256 _amount) public onlyOwner {\n        msg.sender.transfer(_amount);\n    }\n2102-function_definition-317-319", method="getETH(uint256 _amount)", type_label=function_definition];
2109 [label="316_ onlyOwner\n2109-expression_statement-317-317", method="getETH(uint256 _amount)", type_label=expression_statement];
2112 [label="317_ msg.sender.transfer(_amount);\n2112-expression_statement-318-318", method="getETH(uint256 _amount)", type_label=expression_statement];
2121 [label="319_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2121-function_definition-320-322", method="bug_tmstmp33()", type_label=function_definition];
2130 [label="320_ return block.timestamp >= 1546300800;\n2130-return-321-321", method="bug_tmstmp33()", type_label=return];
2136 [label="322_ modifier transferable(address _addr) {\n        require(!pause);\n        require(!lockAddresses[_addr]);\n        _;\n    }\n2136-expression_statement-323-327", method="", type_label=expression_statement];
2143 [label="323_ require(!pause);\n2143-expression_statement-324-324", method="", type_label=expression_statement];
2149 [label="324_ require(!lockAddresses[_addr]);\n2149-expression_statement-325-325", method="", type_label=expression_statement];
2157 [label="325_ _;\n2157-expression_statement-326-326", method="", type_label=expression_statement];
2159 [label="327_ uint256 bugv_tmstmp1 = block.timestamp;\n2159-new_variable-328-328", method="", type_label=new_variable];
2166 [label="328_ function transfer(address _to, uint _value, bytes memory _data) public transferable(msg.sender) returns (bool) {\n        return super.transfer(_to, _value, _data);\n    }\n2166-function_definition-329-331", method="transfer(address _to,uint _value,bytes memory _data)", type_label=function_definition];
2181 [label="328_ transferable(msg.sender)\n2181-expression_statement-329-329", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
2192 [label="329_ return super.transfer(_to, _value, _data);\n2192-return-330-330", method="transfer(address _to,uint _value,bytes memory _data)", type_label=return];
2203 [label="331_ address winner_tmstmp27;\n2203-new_variable-332-332", method="", type_label=new_variable];
2207 [label="332_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n2207-function_definition-333-336", method="play_tmstmp27(uint startTime)", type_label=function_definition];
2215 [label="333_ uint _vtime = block.timestamp;\n2215-new_variable-334-334", method="play_tmstmp27(uint startTime)", type_label=new_variable];
2223 [label="334_ if_startTime + (5 * 1 days) == _vtime\n2223-if-335-336", method="play_tmstmp27(uint startTime)", type_label=if];
4571 [label="334_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
2234 [label="335_ winner_tmstmp27 = msg.sender;\n2234-expression_statement-336-336", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
2240 [label="336_ function transfer(address _to, uint _value) public transferable(msg.sender) returns (bool) {\n        return super.transfer(_to, _value);\n    }\n2240-function_definition-337-339", method="transfer(address _to,uint _value)", type_label=function_definition];
2251 [label="336_ transferable(msg.sender)\n2251-expression_statement-337-337", method="transfer(address _to,uint _value)", type_label=expression_statement];
2262 [label="337_ return super.transfer(_to, _value);\n2262-return-338-338", method="transfer(address _to,uint _value)", type_label=return];
2271 [label="339_ address winner_tmstmp31;\n2271-new_variable-340-340", method="", type_label=new_variable];
2275 [label="340_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n2275-function_definition-341-344", method="play_tmstmp31(uint startTime)", type_label=function_definition];
2283 [label="341_ uint _vtime = block.timestamp;\n2283-new_variable-342-342", method="play_tmstmp31(uint startTime)", type_label=new_variable];
2291 [label="342_ if_startTime + (5 * 1 days) == _vtime\n2291-if-343-344", method="play_tmstmp31(uint startTime)", type_label=if];
4639 [label="342_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
2302 [label="343_ winner_tmstmp31 = msg.sender;\n2302-expression_statement-344-344", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
2308 [label="344_ function transferAnyERC20Token(address _tokenAddress, uint256 _value) public onlyOwner returns (bool) {\n        return ERC20(_tokenAddress).transfer(owner, _value);\n    }\n2308-function_definition-345-347", method="transferAnyERC20Token(address _tokenAddress,uint256 _value)", type_label=function_definition];
2319 [label="344_ onlyOwner\n2319-expression_statement-345-345", method="transferAnyERC20Token(address _tokenAddress,uint256 _value)", type_label=expression_statement];
2326 [label="345_ return ERC20(_tokenAddress).transfer(owner, _value);\n2326-return-346-346", method="transferAnyERC20Token(address _tokenAddress,uint256 _value)", type_label=return];
2338 [label="347_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2338-function_definition-348-350", method="bug_tmstmp13()", type_label=function_definition];
2347 [label="348_ return block.timestamp >= 1546300800;\n2347-return-349-349", method="bug_tmstmp13()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
930;
1128;
1240;
2047;
15 -> 32  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
32 -> 37  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
32 -> 2380  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2380 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 2380  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
37 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
39 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 56  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
56 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
58 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 82  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
92 -> 109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
116 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
126 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
143 -> 151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
160 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
188 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
212 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
236 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
290 -> 298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 317  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
306 -> 2654  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2654 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 2654  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
335 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
369 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 390  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
377 -> 2725  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2725 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 2725  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
415 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
445 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
480 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 507  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
496 -> 2844  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2844 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 2844  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
573 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
603 -> 612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
637 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 664  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
653 -> 3001  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3001 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 3001  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
693 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 714  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
701 -> 3049  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3049 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
714 -> 3049  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
756 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 783  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
772 -> 3120  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3120 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 3120  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
795 -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
811 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
831 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
860 -> 869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
899 -> 904  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
899 -> 3247  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3247 -> 930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 3247  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
927 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
940 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
943 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
953 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
974 -> 981  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
974 -> 3322  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3322 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 3322  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
994 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1047 -> 1058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 1102  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1097 -> 3445  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3445 -> 1128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1125 -> 3445  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1125 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1138 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1141 -> 1146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 1151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1151 -> 1161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1161 -> 1168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1168 -> 1172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1172 -> 1179  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1172 -> 3520  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3520 -> 1192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 3520  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1192 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1205 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1213 -> 1221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1221 -> 1234  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1221 -> 3569  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3569 -> 1240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1234 -> 3569  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1243 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1248 -> 1253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 1263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1263 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1270 -> 1274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1274 -> 1281  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1274 -> 3622  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3622 -> 1294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1281 -> 3622  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1301 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 1316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1316 -> 1321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 1331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1338 -> 1342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1342 -> 1349  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1342 -> 3690  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3690 -> 1362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1349 -> 3690  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1362 -> 1376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1365 -> 1374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1396 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1417  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1404 -> 3752  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3752 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1417 -> 3752  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1430 -> 1439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1439 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1445 -> 1452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1456 -> 1464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1464 -> 1477  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1464 -> 3812  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3812 -> 1483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1477 -> 3812  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1483 -> 1489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1489 -> 1507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 1525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1529 -> 1537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1537 -> 1550  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1537 -> 3885  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3885 -> 1556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1550 -> 3885  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1563 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 1573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1573 -> 1583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1583 -> 1590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1590 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 1601  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1594 -> 3942  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3942 -> 1614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1601 -> 3942  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1632 -> 1640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 1648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1648 -> 1659  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1648 -> 3996  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3996 -> 1665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1659 -> 3996  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1665 -> 1675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1675 -> 1684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1692 -> 1700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1700 -> 1708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1708 -> 1719  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1708 -> 4056  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4056 -> 1725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1719 -> 4056  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1725 -> 1731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1740 -> 1748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1748 -> 1761  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1748 -> 4096  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4096 -> 1767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1761 -> 4096  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1767 -> 1773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1782 -> 1790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1790 -> 1803  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1790 -> 4138  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4138 -> 1809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 4138  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1809 -> 1818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1818 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1820 -> 1825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1825 -> 1830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1830 -> 1840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1840 -> 1847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1847 -> 1851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1851 -> 1858  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1851 -> 4199  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4199 -> 1871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1858 -> 4199  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1871 -> 1881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1892 -> 1900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1900 -> 1908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1908 -> 1919  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1908 -> 4256  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4256 -> 1925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1919 -> 4256  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1925 -> 1935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1942 -> 1947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1947 -> 1952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1952 -> 1962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1962 -> 1969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1969 -> 1973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1973 -> 1980  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1973 -> 4321  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4321 -> 1993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1980 -> 4321  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1993 -> 2006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2006 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2014 -> 2022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2022 -> 2030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2030 -> 2041  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2030 -> 4378  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4378 -> 2047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2041 -> 4378  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2051 -> 2056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2056 -> 2061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2061 -> 2071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2071 -> 2078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2078 -> 2082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2082 -> 2089  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2082 -> 4430  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4430 -> 2102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2089 -> 4430  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2102 -> 2112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2121 -> 2130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2130 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2136 -> 2159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2143 -> 2149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2149 -> 2157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2166 -> 2192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2192 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2207 -> 2215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2215 -> 2223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2223 -> 2234  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2223 -> 4571  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4571 -> 2240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2234 -> 4571  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2240 -> 2262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2262 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2275 -> 2283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2283 -> 2291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2291 -> 2302  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2291 -> 4639  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4639 -> 2308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2302 -> 4639  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2308 -> 2326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2326 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2338 -> 2347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2347 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
