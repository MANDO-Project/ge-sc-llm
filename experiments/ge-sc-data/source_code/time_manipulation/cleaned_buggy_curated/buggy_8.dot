digraph  {
15 [label="2_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n15-function_definition-3-5", method="bug_tmstmp1()", type_label=function_definition];
24 [label="3_ return block.timestamp >= 1546300800;\n24-return-4-4", method="bug_tmstmp1()", type_label=return];
30 [label="5_ address public owner;\n30-new_variable-6-6", method="", type_label=new_variable];
35 [label="6_ uint256 bugv_tmstmp5 = block.timestamp;\n35-new_variable-7-7", method="", type_label=new_variable];
54 [label="9_ owner = msg.sender;\n54-expression_statement-10-10", method="", type_label=expression_statement];
60 [label="11_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n60-function_definition-12-20", method="bug_tmstmp32()", type_label=function_definition];
65 [label="12_ uint pastBlockTime_tmstmp32;\n65-new_variable-13-13", method="bug_tmstmp32()", type_label=new_variable];
70 [label="13_ require(msg.value == 10 ether);\n70-expression_statement-14-14", method="bug_tmstmp32()", type_label=expression_statement];
80 [label="14_ require(now != pastBlockTime_tmstmp32);\n80-expression_statement-15-15", method="bug_tmstmp32()", type_label=expression_statement];
87 [label="15_ pastBlockTime_tmstmp32 = now;\n87-expression_statement-16-16", method="bug_tmstmp32()", type_label=expression_statement];
91 [label="16_ if_now % 15 == 0\n91-if-17-19", method="bug_tmstmp32()", type_label=if];
1830 [label="16_ end_if", method="bug_tmstmp32()", type_label=end_if];
98 [label="17_ msg.sender.transfer(address(this).balance);\n98-expression_statement-18-18", method="bug_tmstmp32()", type_label=expression_statement];
111 [label="20_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n111-expression_statement-21-24", method="", type_label=expression_statement];
114 [label="21_ require(msg.sender == owner);\n114-expression_statement-22-22", method="", type_label=expression_statement];
123 [label="22_ _;\n123-expression_statement-23-23", method="", type_label=expression_statement];
125 [label="24_ function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n125-function_definition-25-29", method="transferOwnership(address newOwner)", type_label=function_definition];
132 [label="24_ onlyOwner\n132-expression_statement-25-25", method="transferOwnership(address newOwner)", type_label=expression_statement];
135 [label="25_ require(newOwner != address(0));\n135-expression_statement-26-26", method="transferOwnership(address newOwner)", type_label=expression_statement];
150 [label="27_ owner = newOwner;\n150-expression_statement-28-28", method="transferOwnership(address newOwner)", type_label=expression_statement];
154 [label="29_ address winner_tmstmp38;\n154-new_variable-30-30", method="", type_label=new_variable];
158 [label="30_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n158-function_definition-31-33", method="play_tmstmp38(uint startTime)", type_label=function_definition];
166 [label="31_ if_startTime + (5 * 1 days) == block.timestamp\n166-if-32-33", method="play_tmstmp38(uint startTime)", type_label=if];
1905 [label="31_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
179 [label="32_ winner_tmstmp38 = msg.sender;\n179-expression_statement-33-33", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
188 [label="35_ address winner_tmstmp2;\n188-new_variable-36-36", method="", type_label=new_variable];
192 [label="36_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n192-function_definition-37-39", method="play_tmstmp2(uint startTime)", type_label=function_definition];
200 [label="37_ if_startTime + (5 * 1 days) == block.timestamp\n200-if-38-39", method="play_tmstmp2(uint startTime)", type_label=if];
1939 [label="37_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
213 [label="38_ winner_tmstmp2 = msg.sender;\n213-expression_statement-39-39", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
219 [label="39_ string public name;\n219-new_variable-40-40", method="", type_label=new_variable];
224 [label="40_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n224-function_definition-41-43", method="bug_tmstmp17()", type_label=function_definition];
233 [label="41_ return block.timestamp >= 1546300800;\n233-return-42-42", method="bug_tmstmp17()", type_label=return];
239 [label="43_ string public symbol;\n239-new_variable-44-44", method="", type_label=new_variable];
244 [label="44_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n244-function_definition-45-47", method="bug_tmstmp37()", type_label=function_definition];
253 [label="45_ return block.timestamp >= 1546300800;\n253-return-46-46", method="bug_tmstmp37()", type_label=return];
259 [label="47_ uint8 public decimals = 18;\n259-new_variable-48-48", method="", type_label=new_variable];
265 [label="48_ address winner_tmstmp3;\n265-new_variable-49-49", method="", type_label=new_variable];
269 [label="49_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n269-function_definition-50-53", method="play_tmstmp3(uint startTime)", type_label=function_definition];
277 [label="50_ uint _vtime = block.timestamp;\n277-new_variable-51-51", method="play_tmstmp3(uint startTime)", type_label=new_variable];
285 [label="51_ if_startTime + (5 * 1 days) == _vtime\n285-if-52-53", method="play_tmstmp3(uint startTime)", type_label=if];
2024 [label="51_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
296 [label="52_ winner_tmstmp3 = msg.sender;\n296-expression_statement-53-53", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
302 [label="53_ uint256 public totalSupply;\n302-new_variable-54-54", method="", type_label=new_variable];
307 [label="54_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n307-function_definition-55-57", method="bug_tmstmp9()", type_label=function_definition];
316 [label="55_ return block.timestamp >= 1546300800;\n316-return-56-56", method="bug_tmstmp9()", type_label=return];
322 [label="57_ mapping (address => uint256) public balanceOf;\n322-new_variable-58-58", method="", type_label=new_variable];
329 [label="58_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n329-function_definition-59-61", method="bug_tmstmp25()", type_label=function_definition];
338 [label="59_ return block.timestamp >= 1546300800;\n338-return-60-60", method="bug_tmstmp25()", type_label=return];
344 [label="61_ mapping (address => mapping (address => uint256)) public allowance;\n344-new_variable-62-62", method="", type_label=new_variable];
353 [label="62_ uint256 bugv_tmstmp1 = block.timestamp;\n353-new_variable-63-63", method="", type_label=new_variable];
374 [label="64_ uint256 bugv_tmstmp2 = block.timestamp;\n374-new_variable-65-65", method="", type_label=new_variable];
395 [label="66_ uint256 bugv_tmstmp3 = block.timestamp;\n395-new_variable-67-67", method="", type_label=new_variable];
426 [label="73_ totalSupply = initialSupply * 10 ** uint256(decimals);\n426-expression_statement-74-74", method="", type_label=expression_statement];
436 [label="74_ balanceOf[msg.sender] = totalSupply;\n436-expression_statement-75-75", method="", type_label=expression_statement];
444 [label="75_ name = tokenName;\n444-expression_statement-76-76", method="", type_label=expression_statement];
448 [label="76_ symbol = tokenSymbol;\n448-expression_statement-77-77", method="", type_label=expression_statement];
452 [label="78_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n452-function_definition-79-87", method="bug_tmstmp4()", type_label=function_definition];
457 [label="79_ uint pastBlockTime_tmstmp4;\n457-new_variable-80-80", method="bug_tmstmp4()", type_label=new_variable];
462 [label="80_ require(msg.value == 10 ether);\n462-expression_statement-81-81", method="bug_tmstmp4()", type_label=expression_statement];
472 [label="81_ require(now != pastBlockTime_tmstmp4);\n472-expression_statement-82-82", method="bug_tmstmp4()", type_label=expression_statement];
479 [label="82_ pastBlockTime_tmstmp4 = now;\n479-expression_statement-83-83", method="bug_tmstmp4()", type_label=expression_statement];
483 [label="83_ if_now % 15 == 0\n483-if-84-86", method="bug_tmstmp4()", type_label=if];
2222 [label="83_ end_if", method="bug_tmstmp4()", type_label=end_if];
490 [label="84_ msg.sender.transfer(address(this).balance);\n490-expression_statement-85-85", method="bug_tmstmp4()", type_label=expression_statement];
503 [label="87_ function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0x0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n503-function_definition-88-97", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
519 [label="88_ require(_to != address(0x0));\n519-expression_statement-89-89", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
528 [label="89_ require(balanceOf[_from] >= _value);\n528-expression_statement-90-90", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
537 [label="90_ require(balanceOf[_to] + _value > balanceOf[_to]);\n537-expression_statement-91-91", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
550 [label="91_ uint previousBalances = balanceOf[_from] + balanceOf[_to];\n550-new_variable-92-92", method="_transfer(address _from,address _to,uint _value)", type_label=new_variable];
562 [label="92_ balanceOf[_from] -= _value;\n562-expression_statement-93-93", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
568 [label="93_ balanceOf[_to] += _value;\n568-expression_statement-94-94", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
582 [label="95_ assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n582-expression_statement-96-96", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
595 [label="97_ address winner_tmstmp7;\n595-new_variable-98-98", method="", type_label=new_variable];
599 [label="98_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n599-function_definition-99-102", method="play_tmstmp7(uint startTime)", type_label=function_definition];
607 [label="99_ uint _vtime = block.timestamp;\n607-new_variable-100-100", method="play_tmstmp7(uint startTime)", type_label=new_variable];
615 [label="100_ if_startTime + (5 * 1 days) == _vtime\n615-if-101-102", method="play_tmstmp7(uint startTime)", type_label=if];
2354 [label="100_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
626 [label="101_ winner_tmstmp7 = msg.sender;\n626-expression_statement-102-102", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
632 [label="102_ function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n632-function_definition-103-106", method="transfer(address _to,uint256 _value)", type_label=function_definition];
649 [label="103_ _transfer(msg.sender, _to, _value);\n649-expression_statement-104-104", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
660 [label="104_ return true;\n660-return-105-105", method="transfer(address _to,uint256 _value)", type_label=return];
663 [label="106_ address winner_tmstmp23;\n663-new_variable-107-107", method="", type_label=new_variable];
667 [label="107_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n667-function_definition-108-111", method="play_tmstmp23(uint startTime)", type_label=function_definition];
675 [label="108_ uint _vtime = block.timestamp;\n675-new_variable-109-109", method="play_tmstmp23(uint startTime)", type_label=new_variable];
683 [label="109_ if_startTime + (5 * 1 days) == _vtime\n683-if-110-111", method="play_tmstmp23(uint startTime)", type_label=if];
2422 [label="109_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
694 [label="110_ winner_tmstmp23 = msg.sender;\n694-expression_statement-111-111", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
700 [label="111_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);      \n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n700-function_definition-112-117", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
721 [label="112_ require(_value <= allowance[_from][msg.sender]);\n721-expression_statement-113-113", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
734 [label="113_ allowance[_from][msg.sender] -= _value;\n734-expression_statement-114-114", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
744 [label="114_ _transfer(_from, _to, _value);\n744-expression_statement-115-115", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
753 [label="115_ return true;\n753-return-116-116", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
756 [label="117_ address winner_tmstmp14;\n756-new_variable-118-118", method="", type_label=new_variable];
760 [label="118_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n760-function_definition-119-121", method="play_tmstmp14(uint startTime)", type_label=function_definition];
768 [label="119_ if_startTime + (5 * 1 days) == block.timestamp\n768-if-120-121", method="play_tmstmp14(uint startTime)", type_label=if];
2507 [label="119_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
781 [label="120_ winner_tmstmp14 = msg.sender;\n781-expression_statement-121-121", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
787 [label="121_ function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n787-function_definition-122-127", method="approve(address _spender,uint256 _value)", type_label=function_definition];
804 [label="123_ allowance[msg.sender][_spender] = _value;\n804-expression_statement-124-124", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
824 [label="125_ return true;\n824-return-126-126", method="approve(address _spender,uint256 _value)", type_label=return];
827 [label="127_ address winner_tmstmp30;\n827-new_variable-128-128", method="", type_label=new_variable];
831 [label="128_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n831-function_definition-129-131", method="play_tmstmp30(uint startTime)", type_label=function_definition];
839 [label="129_ if_startTime + (5 * 1 days) == block.timestamp\n839-if-130-131", method="play_tmstmp30(uint startTime)", type_label=if];
2578 [label="129_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
852 [label="130_ winner_tmstmp30 = msg.sender;\n852-expression_statement-131-131", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
858 [label="131_ function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);    \n        balanceOf[msg.sender] -= _value;             \n        totalSupply -= _value;                       \n        emit Burn(msg.sender, _value);\n        return true;\n    }\n858-function_definition-132-138", method="burn(uint256 _value)", type_label=function_definition];
871 [label="132_ require(balanceOf[msg.sender] >= _value);\n871-expression_statement-133-133", method="burn(uint256 _value)", type_label=expression_statement];
882 [label="133_ balanceOf[msg.sender] -= _value;\n882-expression_statement-134-134", method="burn(uint256 _value)", type_label=expression_statement];
890 [label="134_ totalSupply -= _value;\n890-expression_statement-135-135", method="burn(uint256 _value)", type_label=expression_statement];
902 [label="136_ return true;\n902-return-137-137", method="burn(uint256 _value)", type_label=return];
905 [label="138_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n905-function_definition-139-147", method="bug_tmstmp8()", type_label=function_definition];
910 [label="139_ uint pastBlockTime_tmstmp8;\n910-new_variable-140-140", method="bug_tmstmp8()", type_label=new_variable];
915 [label="140_ require(msg.value == 10 ether);\n915-expression_statement-141-141", method="bug_tmstmp8()", type_label=expression_statement];
925 [label="141_ require(now != pastBlockTime_tmstmp8);\n925-expression_statement-142-142", method="bug_tmstmp8()", type_label=expression_statement];
932 [label="142_ pastBlockTime_tmstmp8 = now;\n932-expression_statement-143-143", method="bug_tmstmp8()", type_label=expression_statement];
936 [label="143_ if_now % 15 == 0\n936-if-144-146", method="bug_tmstmp8()", type_label=if];
2675 [label="143_ end_if", method="bug_tmstmp8()", type_label=end_if];
943 [label="144_ msg.sender.transfer(address(this).balance);\n943-expression_statement-145-145", method="bug_tmstmp8()", type_label=expression_statement];
956 [label="147_ function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                 \n        require(_value <= allowance[_from][msg.sender]);     \n        balanceOf[_from] -= _value;                          \n        allowance[_from][msg.sender] -= _value;              \n        totalSupply -= _value;                               \n        emit Burn(_from, _value);\n        return true;\n    }\n956-function_definition-148-156", method="burnFrom(address _from,uint256 _value)", type_label=function_definition];
973 [label="148_ require(balanceOf[_from] >= _value);\n973-expression_statement-149-149", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
982 [label="149_ require(_value <= allowance[_from][msg.sender]);\n982-expression_statement-150-150", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
995 [label="150_ balanceOf[_from] -= _value;\n995-expression_statement-151-151", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1001 [label="151_ allowance[_from][msg.sender] -= _value;\n1001-expression_statement-152-152", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1011 [label="152_ totalSupply -= _value;\n1011-expression_statement-153-153", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1021 [label="154_ return true;\n1021-return-155-155", method="burnFrom(address _from,uint256 _value)", type_label=return];
1024 [label="156_ address winner_tmstmp39;\n1024-new_variable-157-157", method="", type_label=new_variable];
1028 [label="157_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1028-function_definition-158-161", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1036 [label="158_ uint _vtime = block.timestamp;\n1036-new_variable-159-159", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1044 [label="159_ if_startTime + (5 * 1 days) == _vtime\n1044-if-160-161", method="play_tmstmp39(uint startTime)", type_label=if];
2783 [label="159_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1055 [label="160_ winner_tmstmp39 = msg.sender;\n1055-expression_statement-161-161", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1070 [label="163_ address winner_tmstmp19;\n1070-new_variable-164-164", method="", type_label=new_variable];
1074 [label="164_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n1074-function_definition-165-168", method="play_tmstmp19(uint startTime)", type_label=function_definition];
1082 [label="165_ uint _vtime = block.timestamp;\n1082-new_variable-166-166", method="play_tmstmp19(uint startTime)", type_label=new_variable];
1090 [label="166_ if_startTime + (5 * 1 days) == _vtime\n1090-if-167-168", method="play_tmstmp19(uint startTime)", type_label=if];
2829 [label="166_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
1101 [label="167_ winner_tmstmp19 = msg.sender;\n1101-expression_statement-168-168", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
1107 [label="168_ uint256 public sellPrice;\n1107-new_variable-169-169", method="", type_label=new_variable];
1112 [label="169_ address winner_tmstmp26;\n1112-new_variable-170-170", method="", type_label=new_variable];
1116 [label="170_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n1116-function_definition-171-173", method="play_tmstmp26(uint startTime)", type_label=function_definition];
1124 [label="171_ if_startTime + (5 * 1 days) == block.timestamp\n1124-if-172-173", method="play_tmstmp26(uint startTime)", type_label=if];
2863 [label="171_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
1137 [label="172_ winner_tmstmp26 = msg.sender;\n1137-expression_statement-173-173", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
1143 [label="173_ uint256 public buyPrice;\n1143-new_variable-174-174", method="", type_label=new_variable];
1148 [label="174_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1148-function_definition-175-183", method="bug_tmstmp20()", type_label=function_definition];
1153 [label="175_ uint pastBlockTime_tmstmp20;\n1153-new_variable-176-176", method="bug_tmstmp20()", type_label=new_variable];
1158 [label="176_ require(msg.value == 10 ether);\n1158-expression_statement-177-177", method="bug_tmstmp20()", type_label=expression_statement];
1168 [label="177_ require(now != pastBlockTime_tmstmp20);\n1168-expression_statement-178-178", method="bug_tmstmp20()", type_label=expression_statement];
1175 [label="178_ pastBlockTime_tmstmp20 = now;\n1175-expression_statement-179-179", method="bug_tmstmp20()", type_label=expression_statement];
1179 [label="179_ if_now % 15 == 0\n1179-if-180-182", method="bug_tmstmp20()", type_label=if];
2918 [label="179_ end_if", method="bug_tmstmp20()", type_label=end_if];
1186 [label="180_ msg.sender.transfer(address(this).balance);\n1186-expression_statement-181-181", method="bug_tmstmp20()", type_label=expression_statement];
1199 [label="183_ mapping (address => bool) public frozenAccount;\n1199-new_variable-184-184", method="", type_label=new_variable];
1206 [label="184_ uint256 bugv_tmstmp4 = block.timestamp;\n1206-new_variable-185-185", method="", type_label=new_variable];
1236 [label="190_ TokenERC20(initialSupply, tokenName, tokenSymbol)\n1236-expression_statement-191-191", method="", type_label=expression_statement];
1245 [label="191_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1245-function_definition-192-200", method="bug_tmstmp36()", type_label=function_definition];
1250 [label="192_ uint pastBlockTime_tmstmp36;\n1250-new_variable-193-193", method="bug_tmstmp36()", type_label=new_variable];
1255 [label="193_ require(msg.value == 10 ether);\n1255-expression_statement-194-194", method="bug_tmstmp36()", type_label=expression_statement];
1265 [label="194_ require(now != pastBlockTime_tmstmp36);\n1265-expression_statement-195-195", method="bug_tmstmp36()", type_label=expression_statement];
1272 [label="195_ pastBlockTime_tmstmp36 = now;\n1272-expression_statement-196-196", method="bug_tmstmp36()", type_label=expression_statement];
1276 [label="196_ if_now % 15 == 0\n1276-if-197-199", method="bug_tmstmp36()", type_label=if];
3015 [label="196_ end_if", method="bug_tmstmp36()", type_label=end_if];
1283 [label="197_ msg.sender.transfer(address(this).balance);\n1283-expression_statement-198-198", method="bug_tmstmp36()", type_label=expression_statement];
1296 [label="200_ function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != address(0x0));                           \n        require (balanceOf[_from] >= _value);                    \n        require (balanceOf[_to] + _value >= balanceOf[_to]);     \n        require(!frozenAccount[_from]);                          \n        require(!frozenAccount[_to]);                            \n        balanceOf[_from] -= _value;                              \n        balanceOf[_to] += _value;                                \n        emit Transfer(_from, _to, _value);\n    }\n1296-function_definition-201-210", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
1312 [label="201_ require (_to != address(0x0));\n1312-expression_statement-202-202", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1321 [label="202_ require (balanceOf[_from] >= _value);\n1321-expression_statement-203-203", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1330 [label="203_ require (balanceOf[_to] + _value >= balanceOf[_to]);\n1330-expression_statement-204-204", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1343 [label="204_ require(!frozenAccount[_from]);\n1343-expression_statement-205-205", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1351 [label="205_ require(!frozenAccount[_to]);\n1351-expression_statement-206-206", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1359 [label="206_ balanceOf[_from] -= _value;\n1359-expression_statement-207-207", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1365 [label="207_ balanceOf[_to] += _value;\n1365-expression_statement-208-208", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1379 [label="210_ address winner_tmstmp35;\n1379-new_variable-211-211", method="", type_label=new_variable];
1383 [label="211_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1383-function_definition-212-215", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1391 [label="212_ uint _vtime = block.timestamp;\n1391-new_variable-213-213", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1399 [label="213_ if_startTime + (5 * 1 days) == _vtime\n1399-if-214-215", method="play_tmstmp35(uint startTime)", type_label=if];
3138 [label="213_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1410 [label="214_ winner_tmstmp35 = msg.sender;\n1410-expression_statement-215-215", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1416 [label="215_ function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        emit Transfer(address(0), address(this), mintedAmount);\n        emit Transfer(address(this), target, mintedAmount);\n    }\n1416-function_definition-216-221", method="mintToken(address target,uint256 mintedAmount)", type_label=function_definition];
1426 [label="215_ onlyOwner\n1426-expression_statement-216-216", method="mintToken(address target,uint256 mintedAmount)", type_label=expression_statement];
1430 [label="216_ balanceOf[target] += mintedAmount;\n1430-expression_statement-217-217", method="mintToken(address target,uint256 mintedAmount)", type_label=expression_statement];
1436 [label="217_ totalSupply += mintedAmount;\n1436-expression_statement-218-218", method="mintToken(address target,uint256 mintedAmount)", type_label=expression_statement];
1462 [label="221_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1462-function_definition-222-230", method="bug_tmstmp40()", type_label=function_definition];
1467 [label="222_ uint pastBlockTime_tmstmp40;\n1467-new_variable-223-223", method="bug_tmstmp40()", type_label=new_variable];
1472 [label="223_ require(msg.value == 10 ether);\n1472-expression_statement-224-224", method="bug_tmstmp40()", type_label=expression_statement];
1482 [label="224_ require(now != pastBlockTime_tmstmp40);\n1482-expression_statement-225-225", method="bug_tmstmp40()", type_label=expression_statement];
1489 [label="225_ pastBlockTime_tmstmp40 = now;\n1489-expression_statement-226-226", method="bug_tmstmp40()", type_label=expression_statement];
1493 [label="226_ if_now % 15 == 0\n1493-if-227-229", method="bug_tmstmp40()", type_label=if];
3232 [label="226_ end_if", method="bug_tmstmp40()", type_label=end_if];
1500 [label="227_ msg.sender.transfer(address(this).balance);\n1500-expression_statement-228-228", method="bug_tmstmp40()", type_label=expression_statement];
1513 [label="230_ function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n1513-function_definition-231-234", method="freezeAccount(address target,bool freeze)", type_label=function_definition];
1523 [label="230_ onlyOwner\n1523-expression_statement-231-231", method="freezeAccount(address target,bool freeze)", type_label=expression_statement];
1527 [label="231_ frozenAccount[target] = freeze;\n1527-expression_statement-232-232", method="freezeAccount(address target,bool freeze)", type_label=expression_statement];
1539 [label="234_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1539-function_definition-235-237", method="bug_tmstmp33()", type_label=function_definition];
1548 [label="235_ return block.timestamp >= 1546300800;\n1548-return-236-236", method="bug_tmstmp33()", type_label=return];
1554 [label="237_ function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n1554-function_definition-238-241", method="setPrices(uint256 newSellPrice,uint256 newBuyPrice)", type_label=function_definition];
1564 [label="237_ onlyOwner\n1564-expression_statement-238-238", method="setPrices(uint256 newSellPrice,uint256 newBuyPrice)", type_label=expression_statement];
1568 [label="238_ sellPrice = newSellPrice;\n1568-expression_statement-239-239", method="setPrices(uint256 newSellPrice,uint256 newBuyPrice)", type_label=expression_statement];
1572 [label="239_ buyPrice = newBuyPrice;\n1572-expression_statement-240-240", method="setPrices(uint256 newSellPrice,uint256 newBuyPrice)", type_label=expression_statement];
1576 [label="241_ address winner_tmstmp27;\n1576-new_variable-242-242", method="", type_label=new_variable];
1580 [label="242_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1580-function_definition-243-246", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1588 [label="243_ uint _vtime = block.timestamp;\n1588-new_variable-244-244", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1596 [label="244_ if_startTime + (5 * 1 days) == _vtime\n1596-if-245-246", method="play_tmstmp27(uint startTime)", type_label=if];
3335 [label="244_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1607 [label="245_ winner_tmstmp27 = msg.sender;\n1607-expression_statement-246-246", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1613 [label="246_ function buy() payable public {\n        uint amount = msg.value / buyPrice;                  \n        _transfer(address(this), msg.sender, amount);        \n    }\n1613-function_definition-247-250", method="buy()", type_label=function_definition];
1618 [label="247_ uint amount = msg.value / buyPrice;\n1618-new_variable-248-248", method="buy()", type_label=new_variable];
1628 [label="248_ _transfer(address(this), msg.sender, amount);\n1628-expression_statement-249-249", method="buy()", type_label=expression_statement];
1641 [label="250_ address winner_tmstmp31;\n1641-new_variable-251-251", method="", type_label=new_variable];
1645 [label="251_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1645-function_definition-252-255", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1653 [label="252_ uint _vtime = block.timestamp;\n1653-new_variable-253-253", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1661 [label="253_ if_startTime + (5 * 1 days) == _vtime\n1661-if-254-255", method="play_tmstmp31(uint startTime)", type_label=if];
3400 [label="253_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1672 [label="254_ winner_tmstmp31 = msg.sender;\n1672-expression_statement-255-255", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1678 [label="255_ function sell(uint256 amount) public {\n        address myAddress = address(this);\n        require(myAddress.balance >= amount * sellPrice);    \n        _transfer(msg.sender, address(this), amount);        \n        msg.sender.transfer(amount * sellPrice);             \n    }\n1678-function_definition-256-261", method="sell(uint256 amount)", type_label=function_definition];
1686 [label="256_ address myAddress = address(this);\n1686-new_variable-257-257", method="sell(uint256 amount)", type_label=new_variable];
1694 [label="257_ require(myAddress.balance >= amount * sellPrice);\n1694-expression_statement-258-258", method="sell(uint256 amount)", type_label=expression_statement];
1705 [label="258_ _transfer(msg.sender, address(this), amount);\n1705-expression_statement-259-259", method="sell(uint256 amount)", type_label=expression_statement];
1718 [label="259_ msg.sender.transfer(amount * sellPrice);\n1718-expression_statement-260-260", method="sell(uint256 amount)", type_label=expression_statement];
1729 [label="261_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1729-function_definition-262-264", method="bug_tmstmp13()", type_label=function_definition];
1738 [label="262_ return block.timestamp >= 1546300800;\n1738-return-263-263", method="bug_tmstmp13()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
185;
1061;
15 -> 24  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
24 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
30 -> 35  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 65  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
65 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
70 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 87  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
91 -> 98  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
91 -> 1830  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1830 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 1830  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
114 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
125 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 179  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
166 -> 1905  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1905 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 1905  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
192 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 213  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
200 -> 1939  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1939 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 1939  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
224 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
244 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
259 -> 265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 296  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
285 -> 2024  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2024 -> 302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 2024  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
307 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
329 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
338 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
344 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 490  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
483 -> 2222  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2222 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 2222  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
503 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 626  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
615 -> 2354  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2354 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 2354  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
632 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
667 -> 675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
683 -> 694  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
683 -> 2422  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2422 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
694 -> 2422  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
700 -> 721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
721 -> 734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
753 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
760 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 781  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
768 -> 2507  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2507 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 2507  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
787 -> 804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
831 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
839 -> 852  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
839 -> 2578  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2578 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 2578  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
858 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
902 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
905 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
915 -> 925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
925 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
936 -> 943  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
936 -> 2675  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2675 -> 956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 2675  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
956 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
982 -> 995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 1001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1001 -> 1011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1028 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1055  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1044 -> 2783  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2783 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 2783  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1074 -> 1082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1082 -> 1090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1101  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1090 -> 2829  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2829 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 2829  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1107 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1116 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1137  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1124 -> 2863  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2863 -> 1143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 2863  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1148 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 1168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1168 -> 1175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1186  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1179 -> 2918  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2918 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 2918  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1199 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1245 -> 1250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 1255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1255 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1272 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 1283  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1276 -> 3015  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3015 -> 1296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 3015  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1296 -> 1312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1312 -> 1321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1330 -> 1343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1343 -> 1351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1351 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1359 -> 1365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1383 -> 1391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1391 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1410  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1399 -> 3138  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3138 -> 1416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 3138  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1416 -> 1430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1430 -> 1436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1462 -> 1467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1472 -> 1482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1482 -> 1489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1489 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1493 -> 1500  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1493 -> 3232  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3232 -> 1513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1500 -> 3232  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1513 -> 1527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1539 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1548 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1554 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 1572  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1580 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1596 -> 1607  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1596 -> 3335  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3335 -> 1613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 3335  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1613 -> 1618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1618 -> 1628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1645 -> 1653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1661 -> 1672  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1661 -> 3400  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3400 -> 1678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1672 -> 3400  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1678 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 1694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1694 -> 1705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1705 -> 1718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1729 -> 1738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1738 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
