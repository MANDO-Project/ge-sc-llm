digraph  {
13 [label="2_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n13-function_definition-3-11", method="bug_tmstmp32()", type_label=function_definition];
18 [label="3_ uint pastBlockTime_tmstmp32;\n18-new_variable-4-4", method="bug_tmstmp32()", type_label=new_variable];
23 [label="4_ require(msg.value == 10 ether);\n23-expression_statement-5-5", method="bug_tmstmp32()", type_label=expression_statement];
33 [label="5_ require(now != pastBlockTime_tmstmp32);\n33-expression_statement-6-6", method="bug_tmstmp32()", type_label=expression_statement];
40 [label="6_ pastBlockTime_tmstmp32 = now;\n40-expression_statement-7-7", method="bug_tmstmp32()", type_label=expression_statement];
44 [label="7_ if_now % 15 == 0\n44-if-8-10", method="bug_tmstmp32()", type_label=if];
1820 [label="7_ end_if", method="bug_tmstmp32()", type_label=end_if];
51 [label="8_ msg.sender.transfer(address(this).balance);\n51-expression_statement-9-9", method="bug_tmstmp32()", type_label=expression_statement];
64 [label="11_ address payable public owner;\n64-new_variable-12-12", method="", type_label=new_variable];
69 [label="12_ struct GameInfo {\n    uint256 timestamp;\n    uint32 odd_homeTeam;\n    uint32 odd_drawTeam; \n    uint32 odd_awayTeam;\n    uint32 odd_over;\n    uint32 odd_under;\n    uint32 odd_homeTeamAndDraw;\n    uint32 odd_homeAndAwayTeam;\n    uint32 odd_awayTeamAndDraw;\n    uint8  open_status;\n    bool   isDone;\n  }\n69-expression_statement-13-25", method="GameInfo()", type_label=expression_statement];
115 [label="25_ address winner_tmstmp38;\n115-new_variable-26-26", method="", type_label=new_variable];
119 [label="26_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n119-function_definition-27-29", method="play_tmstmp38(uint startTime)", type_label=function_definition];
127 [label="27_ if_startTime + (5 * 1 days) == block.timestamp\n127-if-28-29", method="play_tmstmp38(uint startTime)", type_label=if];
1903 [label="27_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
140 [label="28_ winner_tmstmp38 = msg.sender;\n140-expression_statement-29-29", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
146 [label="29_ mapping(uint64 => GameInfo) public gameList;\n146-new_variable-30-30", method="", type_label=new_variable];
154 [label="30_ struct BetFixture {\n    address payable player;\n    uint256 stake;\n    uint32  odd;\n    uint16  selectedTeam;\n  }\n154-expression_statement-31-36", method="BetFixture()", type_label=expression_statement];
172 [label="36_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n172-function_definition-37-45", method="bug_tmstmp4()", type_label=function_definition];
177 [label="37_ uint pastBlockTime_tmstmp4;\n177-new_variable-38-38", method="bug_tmstmp4()", type_label=new_variable];
182 [label="38_ require(msg.value == 10 ether);\n182-expression_statement-39-39", method="bug_tmstmp4()", type_label=expression_statement];
192 [label="39_ require(now != pastBlockTime_tmstmp4);\n192-expression_statement-40-40", method="bug_tmstmp4()", type_label=expression_statement];
199 [label="40_ pastBlockTime_tmstmp4 = now;\n199-expression_statement-41-41", method="bug_tmstmp4()", type_label=expression_statement];
203 [label="41_ if_now % 15 == 0\n203-if-42-44", method="bug_tmstmp4()", type_label=if];
1979 [label="41_ end_if", method="bug_tmstmp4()", type_label=end_if];
210 [label="42_ msg.sender.transfer(address(this).balance);\n210-expression_statement-43-43", method="bug_tmstmp4()", type_label=expression_statement];
223 [label="45_ mapping(uint64 => BetFixture[]) public betList;\n223-new_variable-46-46", method="", type_label=new_variable];
232 [label="46_ address winner_tmstmp31;\n232-new_variable-47-47", method="", type_label=new_variable];
236 [label="47_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n236-function_definition-48-51", method="play_tmstmp31(uint startTime)", type_label=function_definition];
244 [label="48_ uint _vtime = block.timestamp;\n244-new_variable-49-49", method="play_tmstmp31(uint startTime)", type_label=new_variable];
252 [label="49_ if_startTime + (5 * 1 days) == _vtime\n252-if-50-51", method="play_tmstmp31(uint startTime)", type_label=if];
2028 [label="49_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
263 [label="50_ winner_tmstmp31 = msg.sender;\n263-expression_statement-51-51", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
275 [label="52_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n275-function_definition-53-55", method="bug_tmstmp13()", type_label=function_definition];
284 [label="53_ return block.timestamp >= 1546300800;\n284-return-54-54", method="bug_tmstmp13()", type_label=return];
300 [label="56_ uint256 bugv_tmstmp5 = block.timestamp;\n300-new_variable-57-57", method="", type_label=new_variable];
317 [label="58_ uint256 bugv_tmstmp1 = block.timestamp;\n317-new_variable-59-59", method="", type_label=new_variable];
346 [label="60_ uint256 bugv_tmstmp2 = block.timestamp;\n346-new_variable-61-61", method="", type_label=new_variable];
399 [label="62_ uint256 bugv_tmstmp3 = block.timestamp;\n399-new_variable-63-63", method="", type_label=new_variable];
444 [label="64_ uint256 bugv_tmstmp4 = block.timestamp;\n444-new_variable-65-65", method="", type_label=new_variable];
467 [label="67_ owner   = msg.sender;\n467-expression_statement-68-68", method="", type_label=expression_statement];
473 [label="69_ address winner_tmstmp7;\n473-new_variable-70-70", method="", type_label=new_variable];
477 [label="70_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n477-function_definition-71-74", method="play_tmstmp7(uint startTime)", type_label=function_definition];
485 [label="71_ uint _vtime = block.timestamp;\n485-new_variable-72-72", method="play_tmstmp7(uint startTime)", type_label=new_variable];
493 [label="72_ if_startTime + (5 * 1 days) == _vtime\n493-if-73-74", method="play_tmstmp7(uint startTime)", type_label=if];
2269 [label="72_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
504 [label="73_ winner_tmstmp7 = msg.sender;\n504-expression_statement-74-74", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
510 [label="74_ function setOpenStatus(uint64 _fixtureId, uint8 _open_status) external onlyOwner {\n    gameList[_fixtureId].open_status = _open_status;\n  }\n510-function_definition-75-77", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=function_definition];
521 [label="74_ onlyOwner\n521-expression_statement-75-75", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=expression_statement];
524 [label="75_ gameList[_fixtureId].open_status = _open_status;\n524-expression_statement-76-76", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=expression_statement];
532 [label="77_ address winner_tmstmp23;\n532-new_variable-78-78", method="", type_label=new_variable];
536 [label="78_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n536-function_definition-79-82", method="play_tmstmp23(uint startTime)", type_label=function_definition];
544 [label="79_ uint _vtime = block.timestamp;\n544-new_variable-80-80", method="play_tmstmp23(uint startTime)", type_label=new_variable];
552 [label="80_ if_startTime + (5 * 1 days) == _vtime\n552-if-81-82", method="play_tmstmp23(uint startTime)", type_label=if];
2328 [label="80_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
563 [label="81_ winner_tmstmp23 = msg.sender;\n563-expression_statement-82-82", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
569 [label="82_ function changeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw ) external onlyOwner {\n    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n    gameList[_fixtureId].odd_over            = _odd_over;\n    gameList[_fixtureId].odd_under           = _odd_under;\n    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n    emit ChangeOdd (_fixtureId, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw);\n  }\n569-function_definition-83-93", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=function_definition];
608 [label="82_ onlyOwner\n608-expression_statement-83-83", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
611 [label="83_ gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n611-expression_statement-84-84", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
619 [label="84_ gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n619-expression_statement-85-85", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
627 [label="85_ gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n627-expression_statement-86-86", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
635 [label="86_ gameList[_fixtureId].odd_over            = _odd_over;\n635-expression_statement-87-87", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
643 [label="87_ gameList[_fixtureId].odd_under           = _odd_under;\n643-expression_statement-88-88", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
651 [label="88_ gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n651-expression_statement-89-89", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
659 [label="89_ gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n659-expression_statement-90-90", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
667 [label="90_ gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n667-expression_statement-91-91", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
695 [label="93_ address winner_tmstmp14;\n695-new_variable-94-94", method="", type_label=new_variable];
699 [label="94_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n699-function_definition-95-97", method="play_tmstmp14(uint startTime)", type_label=function_definition];
707 [label="95_ if_startTime + (5 * 1 days) == block.timestamp\n707-if-96-97", method="play_tmstmp14(uint startTime)", type_label=if];
2483 [label="95_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
720 [label="96_ winner_tmstmp14 = msg.sender;\n720-expression_statement-97-97", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
726 [label="97_ function setGameInfo (uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status ) external onlyOwner {\n    gameList[_fixtureId].timestamp           = _timestamp;\n    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n    gameList[_fixtureId].odd_over            = _odd_over;\n    gameList[_fixtureId].odd_under           = _odd_under;\n    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n    gameList[_fixtureId].open_status         = _open_status;\n    gameList[_fixtureId].isDone              = false;\n    emit SetGame(_fixtureId, _timestamp, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw, _open_status);\n  }\n726-function_definition-98-111", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=function_definition];
773 [label="97_ onlyOwner\n773-expression_statement-98-98", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
776 [label="98_ gameList[_fixtureId].timestamp           = _timestamp;\n776-expression_statement-99-99", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
784 [label="99_ gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n784-expression_statement-100-100", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
792 [label="100_ gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n792-expression_statement-101-101", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
800 [label="101_ gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n800-expression_statement-102-102", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
808 [label="102_ gameList[_fixtureId].odd_over            = _odd_over;\n808-expression_statement-103-103", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
816 [label="103_ gameList[_fixtureId].odd_under           = _odd_under;\n816-expression_statement-104-104", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
824 [label="104_ gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n824-expression_statement-105-105", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
832 [label="105_ gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n832-expression_statement-106-106", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
840 [label="106_ gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n840-expression_statement-107-107", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
848 [label="107_ gameList[_fixtureId].open_status         = _open_status;\n848-expression_statement-108-108", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
856 [label="108_ gameList[_fixtureId].isDone              = false;\n856-expression_statement-109-109", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
889 [label="111_ address winner_tmstmp30;\n889-new_variable-112-112", method="", type_label=new_variable];
893 [label="112_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n893-function_definition-113-115", method="play_tmstmp30(uint startTime)", type_label=function_definition];
901 [label="113_ if_startTime + (5 * 1 days) == block.timestamp\n901-if-114-115", method="play_tmstmp30(uint startTime)", type_label=if];
2677 [label="113_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
914 [label="114_ winner_tmstmp30 = msg.sender;\n914-expression_statement-115-115", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
920 [label="115_ function placeBet(uint64 _fixtureId, uint16 _selectedTeam, uint32 _odd) external payable  {\n    uint stake = msg.value;\n    require(stake >= .001 ether);\n    require(_odd != 0 );\n    if (_selectedTeam == 1 ) {\n      require(gameList[_fixtureId].odd_homeTeam == _odd);\n    } else if ( _selectedTeam == 2) {\n      require(gameList[_fixtureId].odd_drawTeam == _odd);\n    } else if ( _selectedTeam == 3) {\n      require(gameList[_fixtureId].odd_awayTeam == _odd);\n    } else if ( _selectedTeam == 4) {\n      require(gameList[_fixtureId].odd_over == _odd);\n    } else if ( _selectedTeam == 5) {\n      require(gameList[_fixtureId].odd_under == _odd);\n    } else if ( _selectedTeam == 6) {\n      require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);\n    } else if ( _selectedTeam == 7) {\n      require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);\n    } else if ( _selectedTeam == 8) {\n      require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);\n    } else {\n      revert();\n    }\n    require(gameList[_fixtureId].open_status == 3);\n    require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );\n    betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));\n    emit NewStake(msg.sender, _fixtureId, _selectedTeam, stake, _odd );\n  }\n920-function_definition-116-143", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=function_definition];
937 [label="116_ uint stake = msg.value;\n937-new_variable-117-117", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=new_variable];
945 [label="117_ require(stake >= .001 ether);\n945-expression_statement-118-118", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
953 [label="118_ require(_odd != 0 );\n953-expression_statement-119-119", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
960 [label="119_ if__selectedTeam == 1\n960-if-120-138", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
2736 [label="119_ end_if", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=end_if];
965 [label="120_ require(gameList[_fixtureId].odd_homeTeam == _odd);\n965-expression_statement-121-121", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
976 [label="121_ if__selectedTeam == 2\n976-if-122-138", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
981 [label="122_ require(gameList[_fixtureId].odd_drawTeam == _odd);\n981-expression_statement-123-123", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
992 [label="123_ if__selectedTeam == 3\n992-if-124-138", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
997 [label="124_ require(gameList[_fixtureId].odd_awayTeam == _odd);\n997-expression_statement-125-125", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1008 [label="125_ if__selectedTeam == 4\n1008-if-126-138", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1013 [label="126_ require(gameList[_fixtureId].odd_over == _odd);\n1013-expression_statement-127-127", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1024 [label="127_ if__selectedTeam == 5\n1024-if-128-138", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1029 [label="128_ require(gameList[_fixtureId].odd_under == _odd);\n1029-expression_statement-129-129", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1040 [label="129_ if__selectedTeam == 6\n1040-if-130-138", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1045 [label="130_ require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);\n1045-expression_statement-131-131", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1056 [label="131_ if__selectedTeam == 7\n1056-if-132-138", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1061 [label="132_ require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);\n1061-expression_statement-133-133", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1072 [label="133_ if__selectedTeam == 8\n1072-if-134-138", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
1077 [label="134_ require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);\n1077-expression_statement-135-135", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1091 [label="138_ require(gameList[_fixtureId].open_status == 3);\n1091-expression_statement-139-139", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1102 [label="139_ require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );\n1102-expression_statement-140-140", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1117 [label="140_ betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));\n1117-expression_statement-141-141", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1151 [label="143_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1151-function_definition-144-152", method="bug_tmstmp8()", type_label=function_definition];
1156 [label="144_ uint pastBlockTime_tmstmp8;\n1156-new_variable-145-145", method="bug_tmstmp8()", type_label=new_variable];
1161 [label="145_ require(msg.value == 10 ether);\n1161-expression_statement-146-146", method="bug_tmstmp8()", type_label=expression_statement];
1171 [label="146_ require(now != pastBlockTime_tmstmp8);\n1171-expression_statement-147-147", method="bug_tmstmp8()", type_label=expression_statement];
1178 [label="147_ pastBlockTime_tmstmp8 = now;\n1178-expression_statement-148-148", method="bug_tmstmp8()", type_label=expression_statement];
1182 [label="148_ if_now % 15 == 0\n1182-if-149-151", method="bug_tmstmp8()", type_label=if];
2958 [label="148_ end_if", method="bug_tmstmp8()", type_label=end_if];
1189 [label="149_ msg.sender.transfer(address(this).balance);\n1189-expression_statement-150-150", method="bug_tmstmp8()", type_label=expression_statement];
1202 [label="152_ function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable {\n    require(gameList[_fixtureId].open_status == 3);\n    require(gameList[_fixtureId].isDone == false);\n    require(betList[_fixtureId][0].player != address(0) );\n    for (uint i= 0 ; i < betList[_fixtureId].length; i++){\n      uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;\n      uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;\n      if ( (selectedTeam == 1 && _homeDrawAway == 1) \n        || (selectedTeam == 2 && _homeDrawAway == 2) \n        || (selectedTeam == 3 && _homeDrawAway == 3) \n        || (selectedTeam == 4 && _overUnder == 1) \n        || (selectedTeam == 5 && _overUnder == 2) \n        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )\n        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )\n        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) ) \n        ){ \n        betList[_fixtureId][i].player.transfer(returnEth);\n      }\n    }\n    gameList[_fixtureId].open_status = 5;\n    gameList[_fixtureId].isDone = true;  \n    emit GivePrizeMoney( _fixtureId,  _homeDrawAway,  _overUnder);\n  }\n1202-function_definition-153-175", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=function_definition];
1217 [label="152_ onlyOwner\n1217-expression_statement-153-153", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1221 [label="153_ require(gameList[_fixtureId].open_status == 3);\n1221-expression_statement-154-154", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1232 [label="154_ require(gameList[_fixtureId].isDone == false);\n1232-expression_statement-155-155", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1244 [label="155_ require(betList[_fixtureId][0].player != address(0) );\n1244-expression_statement-156-156", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1259 [label="156_ for(i < betList[_fixtureId].length;;i++)\n1259-for-157-171", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=for];
3035 [label="156_ end_loop", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=end_loop];
1274 [label="156_ i++\n1274-expression_statement-157-157", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1277 [label="157_ uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;\n1277-new_variable-158-158", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=new_variable];
1289 [label="158_ uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;\n1289-new_variable-159-159", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=new_variable];
1312 [label="159_ if_(selectedTeam == 1 && _homeDrawAway == 1) \n        || (selectedTeam == 2 && _homeDrawAway == 2) \n        || (selectedTeam == 3 && _homeDrawAway == 3) \n        || (selectedTeam == 4 && _overUnder == 1) \n        || (selectedTeam == 5 && _overUnder == 2) \n        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )\n        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )\n        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) )\n1312-if-160-170", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=if];
3088 [label="159_ end_if", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=end_if];
1400 [label="168_ betList[_fixtureId][i].player.transfer(returnEth);\n1400-expression_statement-169-169", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1413 [label="171_ gameList[_fixtureId].open_status = 5;\n1413-expression_statement-172-172", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1421 [label="172_ gameList[_fixtureId].isDone = true;\n1421-expression_statement-173-173", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1438 [label="175_ address winner_tmstmp39;\n1438-new_variable-176-176", method="", type_label=new_variable];
1442 [label="176_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1442-function_definition-177-180", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1450 [label="177_ uint _vtime = block.timestamp;\n1450-new_variable-178-178", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1458 [label="178_ if_startTime + (5 * 1 days) == _vtime\n1458-if-179-180", method="play_tmstmp39(uint startTime)", type_label=if];
3234 [label="178_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1469 [label="179_ winner_tmstmp39 = msg.sender;\n1469-expression_statement-180-180", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1475 [label="180_ modifier onlyOwner {\n    require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n    _;\n  }\n1475-expression_statement-181-184", method="", type_label=expression_statement];
1478 [label="181_ require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n1478-expression_statement-182-182", method="", type_label=expression_statement];
1490 [label="182_ _;\n1490-expression_statement-183-183", method="", type_label=expression_statement];
1492 [label="184_ function getBalance() external view returns(uint){\n    return address(this).balance;\n  }\n1492-function_definition-185-187", method="getBalance()", type_label=function_definition];
1501 [label="185_ return address(this).balance;\n1501-return-186-186", method="getBalance()", type_label=return];
1507 [label="187_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1507-function_definition-188-196", method="bug_tmstmp36()", type_label=function_definition];
1512 [label="188_ uint pastBlockTime_tmstmp36;\n1512-new_variable-189-189", method="bug_tmstmp36()", type_label=new_variable];
1517 [label="189_ require(msg.value == 10 ether);\n1517-expression_statement-190-190", method="bug_tmstmp36()", type_label=expression_statement];
1527 [label="190_ require(now != pastBlockTime_tmstmp36);\n1527-expression_statement-191-191", method="bug_tmstmp36()", type_label=expression_statement];
1534 [label="191_ pastBlockTime_tmstmp36 = now;\n1534-expression_statement-192-192", method="bug_tmstmp36()", type_label=expression_statement];
1538 [label="192_ if_now % 15 == 0\n1538-if-193-195", method="bug_tmstmp36()", type_label=if];
3314 [label="192_ end_if", method="bug_tmstmp36()", type_label=end_if];
1545 [label="193_ msg.sender.transfer(address(this).balance);\n1545-expression_statement-194-194", method="bug_tmstmp36()", type_label=expression_statement];
1558 [label="196_ function deposit(uint256 _eth) external payable{\n    emit Deposit(msg.sender, _eth);\n  }\n1558-function_definition-197-199", method="deposit(uint256 _eth)", type_label=function_definition];
1575 [label="199_ address winner_tmstmp35;\n1575-new_variable-200-200", method="", type_label=new_variable];
1579 [label="200_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1579-function_definition-201-204", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1587 [label="201_ uint _vtime = block.timestamp;\n1587-new_variable-202-202", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1595 [label="202_ if_startTime + (5 * 1 days) == _vtime\n1595-if-203-204", method="play_tmstmp35(uint startTime)", type_label=if];
3371 [label="202_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1606 [label="203_ winner_tmstmp35 = msg.sender;\n1606-expression_statement-204-204", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1612 [label="204_ function changeOwner(address payable _newOwner ) external onlyOwner {\n    owner = _newOwner;\n  }\n1612-function_definition-205-207", method="changeOwner(address payable _newOwner)", type_label=function_definition];
1619 [label="204_ onlyOwner\n1619-expression_statement-205-205", method="changeOwner(address payable _newOwner)", type_label=expression_statement];
1622 [label="205_ owner = _newOwner;\n1622-expression_statement-206-206", method="changeOwner(address payable _newOwner)", type_label=expression_statement];
1626 [label="207_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1626-function_definition-208-216", method="bug_tmstmp40()", type_label=function_definition];
1631 [label="208_ uint pastBlockTime_tmstmp40;\n1631-new_variable-209-209", method="bug_tmstmp40()", type_label=new_variable];
1636 [label="209_ require(msg.value == 10 ether);\n1636-expression_statement-210-210", method="bug_tmstmp40()", type_label=expression_statement];
1646 [label="210_ require(now != pastBlockTime_tmstmp40);\n1646-expression_statement-211-211", method="bug_tmstmp40()", type_label=expression_statement];
1653 [label="211_ pastBlockTime_tmstmp40 = now;\n1653-expression_statement-212-212", method="bug_tmstmp40()", type_label=expression_statement];
1657 [label="212_ if_now % 15 == 0\n1657-if-213-215", method="bug_tmstmp40()", type_label=if];
3433 [label="212_ end_if", method="bug_tmstmp40()", type_label=end_if];
1664 [label="213_ msg.sender.transfer(address(this).balance);\n1664-expression_statement-214-214", method="bug_tmstmp40()", type_label=expression_statement];
1681 [label="217_ owner.transfer(msg.value);\n1681-expression_statement-218-218", method="", type_label=expression_statement];
1690 [label="219_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1690-function_definition-220-222", method="bug_tmstmp33()", type_label=function_definition];
1699 [label="220_ return block.timestamp >= 1546300800;\n1699-return-221-221", method="bug_tmstmp33()", type_label=return];
1705 [label="222_ function withdraw(uint256 _amount) external payable onlyOwner {\n    require(_amount > 0 && _amount <= address(this).balance );\n    owner.transfer(_amount);\n    emit Withdraw(owner, _amount);\n  }\n1705-function_definition-223-227", method="withdraw(uint256 _amount)", type_label=function_definition];
1713 [label="222_ onlyOwner\n1713-expression_statement-223-223", method="withdraw(uint256 _amount)", type_label=expression_statement];
1716 [label="223_ require(_amount > 0 && _amount <= address(this).balance );\n1716-expression_statement-224-224", method="withdraw(uint256 _amount)", type_label=expression_statement];
1731 [label="224_ owner.transfer(_amount);\n1731-expression_statement-225-225", method="withdraw(uint256 _amount)", type_label=expression_statement];
1744 [label="227_ address winner_tmstmp27;\n1744-new_variable-228-228", method="", type_label=new_variable];
1748 [label="228_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1748-function_definition-229-232", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1756 [label="229_ uint _vtime = block.timestamp;\n1756-new_variable-230-230", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1764 [label="230_ if_startTime + (5 * 1 days) == _vtime\n1764-if-231-232", method="play_tmstmp27(uint startTime)", type_label=if];
3540 [label="230_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1775 [label="231_ winner_tmstmp27 = msg.sender;\n1775-expression_statement-232-232", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
269;
1089;
1677;
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
18 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
40 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 51  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
44 -> 1820  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1820 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 1820  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
64 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 140  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
127 -> 1903  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1903 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 1903  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
146 -> 154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 210  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
203 -> 1979  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1979 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 1979  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
223 -> 232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 263  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
252 -> 2028  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2028 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 2028  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
275 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
284 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
477 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
485 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 504  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
493 -> 2269  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2269 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 2269  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
510 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
552 -> 563  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
552 -> 2328  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2328 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 2328  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
569 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
619 -> 627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
627 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
635 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 720  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
707 -> 2483  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2483 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 2483  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
726 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
784 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
800 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
848 -> 856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 914  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
901 -> 2677  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2677 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 2677  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
920 -> 937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
953 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 965  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
960 -> 976  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2736 -> 1091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 2736  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
976 -> 981  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
976 -> 992  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
981 -> 2736  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
992 -> 997  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
992 -> 1008  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
997 -> 2736  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1008 -> 1013  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1008 -> 1024  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1013 -> 2736  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1024 -> 1029  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1024 -> 1040  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1029 -> 2736  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1040 -> 1045  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1040 -> 1056  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1045 -> 2736  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1056 -> 1061  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1056 -> 1072  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1061 -> 2736  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1072 -> 1077  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1077 -> 2736  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1091 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1151 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 1161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1161 -> 1171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1171 -> 1178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1178 -> 1182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1182 -> 1189  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1182 -> 2958  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2958 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 2958  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1202 -> 1221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1221 -> 1232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 1259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1259 -> 1277  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1259 -> 3035  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3035 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1274 -> 1259  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1277 -> 1289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1289 -> 1312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1312 -> 1400  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1312 -> 3088  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3088 -> 1274  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3088 -> 1274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
1400 -> 3088  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1413 -> 1421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1442 -> 1450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 1458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1458 -> 1469  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1458 -> 3234  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3234 -> 1475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1469 -> 3234  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1478 -> 1490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1501 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1507 -> 1512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1512 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1517 -> 1527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1527 -> 1534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1534 -> 1538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1538 -> 1545  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1538 -> 3314  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3314 -> 1558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1545 -> 3314  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1579 -> 1587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1587 -> 1595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1595 -> 1606  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1595 -> 3371  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3371 -> 1612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1606 -> 3371  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1612 -> 1622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1626 -> 1631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1631 -> 1636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1636 -> 1646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1646 -> 1653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1657 -> 1664  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1657 -> 3433  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3433 -> 1677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1664 -> 3433  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1690 -> 1699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1699 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1705 -> 1716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1716 -> 1731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1748 -> 1756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1756 -> 1764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1764 -> 1775  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1764 -> 3540  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3540 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1775 -> 3540  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1089 -> 2736  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
