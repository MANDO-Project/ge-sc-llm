digraph  {
13 [label="2_ function transfer(address to, uint256 value) public returns (bool success);\n13-function_definition-3-3", method="transfer(address to,uint256 value)", type_label=function_definition];
29 [label="3_ address winner_tmstmp7;\n29-new_variable-4-4", method="", type_label=new_variable];
33 [label="4_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n33-function_definition-5-8", method="play_tmstmp7(uint startTime)", type_label=function_definition];
41 [label="5_ uint _vtime = block.timestamp;\n41-new_variable-6-6", method="play_tmstmp7(uint startTime)", type_label=new_variable];
49 [label="6_ if_startTime + (5 * 1 days) == _vtime\n49-if-7-8", method="play_tmstmp7(uint startTime)", type_label=if];
3305 [label="6_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
60 [label="7_ winner_tmstmp7 = msg.sender;\n60-expression_statement-8-8", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
66 [label="8_ function transferFrom(address from, address to, uint256 value) public returns (bool success);\n66-function_definition-9-9", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
86 [label="9_ address winner_tmstmp23;\n86-new_variable-10-10", method="", type_label=new_variable];
90 [label="10_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n90-function_definition-11-14", method="play_tmstmp23(uint startTime)", type_label=function_definition];
98 [label="11_ uint _vtime = block.timestamp;\n98-new_variable-12-12", method="play_tmstmp23(uint startTime)", type_label=new_variable];
106 [label="12_ if_startTime + (5 * 1 days) == _vtime\n106-if-13-14", method="play_tmstmp23(uint startTime)", type_label=if];
3362 [label="12_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
117 [label="13_ winner_tmstmp23 = msg.sender;\n117-expression_statement-14-14", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
123 [label="14_ function balanceOf(address account) external view returns(uint256);\n123-function_definition-15-15", method="balanceOf(address account)", type_label=function_definition];
135 [label="15_ address winner_tmstmp14;\n135-new_variable-16-16", method="", type_label=new_variable];
139 [label="16_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n139-function_definition-17-19", method="play_tmstmp14(uint startTime)", type_label=function_definition];
147 [label="17_ if_startTime + (5 * 1 days) == block.timestamp\n147-if-18-19", method="play_tmstmp14(uint startTime)", type_label=if];
3403 [label="17_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
160 [label="18_ winner_tmstmp14 = msg.sender;\n160-expression_statement-19-19", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
166 [label="19_ function allowance(address _owner, address _spender)external view returns(uint256);\n166-function_definition-20-20", method="allowance(address _owner,address _spender)", type_label=function_definition];
182 [label="20_ address winner_tmstmp30;\n182-new_variable-21-21", method="", type_label=new_variable];
186 [label="21_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n186-function_definition-22-24", method="play_tmstmp30(uint startTime)", type_label=function_definition];
194 [label="22_ if_startTime + (5 * 1 days) == block.timestamp\n194-if-23-24", method="play_tmstmp30(uint startTime)", type_label=if];
3450 [label="22_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
207 [label="23_ winner_tmstmp30 = msg.sender;\n207-expression_statement-24-24", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
216 [label="26_ function mul(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        if (a == 0) {\n        return 0;}\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n216-function_definition-27-34", method="mul(uint256 a,uint256 b)", type_label=function_definition];
233 [label="28_ if_a == 0\n233-if-29-30", method="mul(uint256 a,uint256 b)", type_label=if];
3489 [label="28_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
238 [label="29_ return 0;\n238-return-30-30", method="mul(uint256 a,uint256 b)", type_label=return];
240 [label="30_ uint256 c = a * b;\n240-new_variable-31-31", method="mul(uint256 a,uint256 b)", type_label=new_variable];
248 [label="31_ assert(c / a == b);\n248-expression_statement-32-32", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
257 [label="32_ return c;\n257-return-33-33", method="mul(uint256 a,uint256 b)", type_label=return];
259 [label="34_ function div(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a / b;\n        return c;\n    }\n259-function_definition-35-39", method="div(uint256 a,uint256 b)", type_label=function_definition];
276 [label="36_ uint256 c = a / b;\n276-new_variable-37-37", method="div(uint256 a,uint256 b)", type_label=new_variable];
284 [label="37_ return c;\n284-return-38-38", method="div(uint256 a,uint256 b)", type_label=return];
286 [label="39_ function sub(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        assert(b <= a);\n        return a - b;\n    }\n286-function_definition-40-44", method="sub(uint256 a,uint256 b)", type_label=function_definition];
303 [label="41_ assert(b <= a);\n303-expression_statement-42-42", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
310 [label="42_ return a - b;\n310-return-43-43", method="sub(uint256 a,uint256 b)", type_label=return];
314 [label="44_ function add(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n314-function_definition-45-50", method="add(uint256 a,uint256 b)", type_label=function_definition];
331 [label="46_ uint256 c = a + b;\n331-new_variable-47-47", method="add(uint256 a,uint256 b)", type_label=new_variable];
339 [label="47_ assert(c >= a);\n339-expression_statement-48-48", method="add(uint256 a,uint256 b)", type_label=expression_statement];
346 [label="48_ return c;\n346-return-49-49", method="add(uint256 a,uint256 b)", type_label=return];
356 [label="53_ uint256 bugv_tmstmp4 = block.timestamp;\n356-new_variable-54-54", method="", type_label=new_variable];
381 [label="55_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n381-function_definition-56-58", method="bug_tmstmp37()", type_label=function_definition];
390 [label="56_ return block.timestamp >= 1546300800;\n390-return-57-57", method="bug_tmstmp37()", type_label=return];
396 [label="58_ address payable admin;\n396-new_variable-59-59", method="", type_label=new_variable];
400 [label="59_ address winner_tmstmp3;\n400-new_variable-60-60", method="", type_label=new_variable];
404 [label="60_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n404-function_definition-61-64", method="play_tmstmp3(uint startTime)", type_label=function_definition];
412 [label="61_ uint _vtime = block.timestamp;\n412-new_variable-62-62", method="play_tmstmp3(uint startTime)", type_label=new_variable];
420 [label="62_ if_startTime + (5 * 1 days) == _vtime\n420-if-63-64", method="play_tmstmp3(uint startTime)", type_label=if];
3676 [label="62_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
431 [label="63_ winner_tmstmp3 = msg.sender;\n431-expression_statement-64-64", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
437 [label="64_ address public feeAddress;\n437-new_variable-65-65", method="", type_label=new_variable];
442 [label="65_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n442-function_definition-66-68", method="bug_tmstmp9()", type_label=function_definition];
451 [label="66_ return block.timestamp >= 1546300800;\n451-return-67-67", method="bug_tmstmp9()", type_label=return];
457 [label="68_ bool private dexStatus;\n457-new_variable-69-69", method="", type_label=new_variable];
462 [label="69_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n462-function_definition-70-72", method="bug_tmstmp25()", type_label=function_definition];
471 [label="70_ return block.timestamp >= 1546300800;\n471-return-71-71", method="bug_tmstmp25()", type_label=return];
477 [label="72_ uint256 public tokenId=0;\n477-new_variable-73-73", method="", type_label=new_variable];
483 [label="73_ struct orders{\n        address userAddress;\n        address tokenAddress;\n        uint256 type_;\n        uint256 price;\n        uint256 total;\n        uint256 _decimal;\n        uint256 tradeTotal;\n        uint256 amount;\n        uint256 tradeAmount;\n        uint256 pairOrderID;\n        uint256 status; \n    }\n483-expression_statement-74-86", method="orders()", type_label=expression_statement];
529 [label="86_ struct tokens{\n        address tokenAddress;\n        string tokenSymbol;\n        uint256 decimals;\n        bool status;\n    }\n529-expression_statement-87-92", method="tokens()", type_label=expression_statement];
557 [label="93_ admin = _admin;\n557-expression_statement-94-94", method="", type_label=expression_statement];
561 [label="94_ feeAddress = feeAddress_;\n561-expression_statement-95-95", method="", type_label=expression_statement];
565 [label="95_ dexStatus = true;\n565-expression_statement-96-96", method="", type_label=expression_statement];
570 [label="97_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n570-function_definition-98-106", method="bug_tmstmp8()", type_label=function_definition];
575 [label="98_ uint pastBlockTime_tmstmp8;\n575-new_variable-99-99", method="bug_tmstmp8()", type_label=new_variable];
580 [label="99_ require(msg.value == 10 ether);\n580-expression_statement-100-100", method="bug_tmstmp8()", type_label=expression_statement];
590 [label="100_ require(now != pastBlockTime_tmstmp8);\n590-expression_statement-101-101", method="bug_tmstmp8()", type_label=expression_statement];
597 [label="101_ pastBlockTime_tmstmp8 = now;\n597-expression_statement-102-102", method="bug_tmstmp8()", type_label=expression_statement];
601 [label="102_ if_now % 15 == 0\n601-if-103-105", method="bug_tmstmp8()", type_label=if];
3857 [label="102_ end_if", method="bug_tmstmp8()", type_label=end_if];
608 [label="103_ msg.sender.transfer(address(this).balance);\n608-expression_statement-104-104", method="bug_tmstmp8()", type_label=expression_statement];
621 [label="106_ address winner_tmstmp19;\n621-new_variable-107-107", method="", type_label=new_variable];
625 [label="107_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n625-function_definition-108-111", method="play_tmstmp19(uint startTime)", type_label=function_definition];
633 [label="108_ uint _vtime = block.timestamp;\n633-new_variable-109-109", method="play_tmstmp19(uint startTime)", type_label=new_variable];
641 [label="109_ if_startTime + (5 * 1 days) == _vtime\n641-if-110-111", method="play_tmstmp19(uint startTime)", type_label=if];
3897 [label="109_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
652 [label="110_ winner_tmstmp19 = msg.sender;\n652-expression_statement-111-111", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
658 [label="111_ mapping(uint256=>orders) public Order;\n658-new_variable-112-112", method="", type_label=new_variable];
666 [label="112_ address winner_tmstmp26;\n666-new_variable-113-113", method="", type_label=new_variable];
670 [label="113_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n670-function_definition-114-116", method="play_tmstmp26(uint startTime)", type_label=function_definition];
678 [label="114_ if_startTime + (5 * 1 days) == block.timestamp\n678-if-115-116", method="play_tmstmp26(uint startTime)", type_label=if];
3934 [label="114_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
691 [label="115_ winner_tmstmp26 = msg.sender;\n691-expression_statement-116-116", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
697 [label="116_ mapping(address=>mapping(address=>uint256))public userDetails;\n697-new_variable-117-117", method="", type_label=new_variable];
706 [label="117_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n706-function_definition-118-126", method="bug_tmstmp20()", type_label=function_definition];
711 [label="118_ uint pastBlockTime_tmstmp20;\n711-new_variable-119-119", method="bug_tmstmp20()", type_label=new_variable];
716 [label="119_ require(msg.value == 10 ether);\n716-expression_statement-120-120", method="bug_tmstmp20()", type_label=expression_statement];
726 [label="120_ require(now != pastBlockTime_tmstmp20);\n726-expression_statement-121-121", method="bug_tmstmp20()", type_label=expression_statement];
733 [label="121_ pastBlockTime_tmstmp20 = now;\n733-expression_statement-122-122", method="bug_tmstmp20()", type_label=expression_statement];
737 [label="122_ if_now % 15 == 0\n737-if-123-125", method="bug_tmstmp20()", type_label=if];
3993 [label="122_ end_if", method="bug_tmstmp20()", type_label=end_if];
744 [label="123_ msg.sender.transfer(address(this).balance);\n744-expression_statement-124-124", method="bug_tmstmp20()", type_label=expression_statement];
757 [label="126_ mapping(address=>mapping(address=>uint256))public feeAmount;\n757-new_variable-127-127", method="", type_label=new_variable];
766 [label="127_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n766-function_definition-128-136", method="bug_tmstmp32()", type_label=function_definition];
771 [label="128_ uint pastBlockTime_tmstmp32;\n771-new_variable-129-129", method="bug_tmstmp32()", type_label=new_variable];
776 [label="129_ require(msg.value == 10 ether);\n776-expression_statement-130-130", method="bug_tmstmp32()", type_label=expression_statement];
786 [label="130_ require(now != pastBlockTime_tmstmp32);\n786-expression_statement-131-131", method="bug_tmstmp32()", type_label=expression_statement];
793 [label="131_ pastBlockTime_tmstmp32 = now;\n793-expression_statement-132-132", method="bug_tmstmp32()", type_label=expression_statement];
797 [label="132_ if_now % 15 == 0\n797-if-133-135", method="bug_tmstmp32()", type_label=if];
4053 [label="132_ end_if", method="bug_tmstmp32()", type_label=end_if];
804 [label="133_ msg.sender.transfer(address(this).balance);\n804-expression_statement-134-134", method="bug_tmstmp32()", type_label=expression_statement];
817 [label="136_ mapping(address=>uint256) public withdrawfee;\n817-new_variable-137-137", method="", type_label=new_variable];
824 [label="137_ address winner_tmstmp38;\n824-new_variable-138-138", method="", type_label=new_variable];
828 [label="138_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n828-function_definition-139-141", method="play_tmstmp38(uint startTime)", type_label=function_definition];
836 [label="139_ if_startTime + (5 * 1 days) == block.timestamp\n836-if-140-141", method="play_tmstmp38(uint startTime)", type_label=if];
4092 [label="139_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
849 [label="140_ winner_tmstmp38 = msg.sender;\n849-expression_statement-141-141", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
855 [label="141_ mapping(uint256=>mapping(uint256=>bool)) public orderPairStatus;\n855-new_variable-142-142", method="", type_label=new_variable];
864 [label="142_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n864-function_definition-143-151", method="bug_tmstmp4()", type_label=function_definition];
869 [label="143_ uint pastBlockTime_tmstmp4;\n869-new_variable-144-144", method="bug_tmstmp4()", type_label=new_variable];
874 [label="144_ require(msg.value == 10 ether);\n874-expression_statement-145-145", method="bug_tmstmp4()", type_label=expression_statement];
884 [label="145_ require(now != pastBlockTime_tmstmp4);\n884-expression_statement-146-146", method="bug_tmstmp4()", type_label=expression_statement];
891 [label="146_ pastBlockTime_tmstmp4 = now;\n891-expression_statement-147-147", method="bug_tmstmp4()", type_label=expression_statement];
895 [label="147_ if_now % 15 == 0\n895-if-148-150", method="bug_tmstmp4()", type_label=if];
4151 [label="147_ end_if", method="bug_tmstmp4()", type_label=end_if];
902 [label="148_ msg.sender.transfer(address(this).balance);\n902-expression_statement-149-149", method="bug_tmstmp4()", type_label=expression_statement];
915 [label="151_ mapping(address=>tokens) public tokendetails;\n915-new_variable-152-152", method="", type_label=new_variable];
923 [label="152_ modifier dexstatuscheck(){\n       require(dexStatus==true);\n       _;\n    }\n923-expression_statement-153-156", method="", type_label=expression_statement];
926 [label="153_ require(dexStatus==true);\n926-expression_statement-154-154", method="", type_label=expression_statement];
934 [label="154_ _;\n934-expression_statement-155-155", method="", type_label=expression_statement];
936 [label="156_ uint256 bugv_tmstmp3 = block.timestamp;\n936-new_variable-157-157", method="", type_label=new_variable];
943 [label="157_ function setDexStatus(bool status_) public returns(bool){\n        require(msg.sender == admin);\n        dexStatus = status_;\n        return true;\n    }\n943-function_definition-158-162", method="setDexStatus(bool status_)", type_label=function_definition];
955 [label="158_ require(msg.sender == admin);\n955-expression_statement-159-159", method="setDexStatus(bool status_)", type_label=expression_statement];
964 [label="159_ dexStatus = status_;\n964-expression_statement-160-160", method="setDexStatus(bool status_)", type_label=expression_statement];
968 [label="160_ return true;\n968-return-161-161", method="setDexStatus(bool status_)", type_label=return];
971 [label="162_ address winner_tmstmp39;\n971-new_variable-163-163", method="", type_label=new_variable];
975 [label="163_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n975-function_definition-164-167", method="play_tmstmp39(uint startTime)", type_label=function_definition];
983 [label="164_ uint _vtime = block.timestamp;\n983-new_variable-165-165", method="play_tmstmp39(uint startTime)", type_label=new_variable];
991 [label="165_ if_startTime + (5 * 1 days) == _vtime\n991-if-166-167", method="play_tmstmp39(uint startTime)", type_label=if];
4247 [label="165_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1002 [label="166_ winner_tmstmp39 = msg.sender;\n1002-expression_statement-167-167", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1008 [label="167_ function addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_) public returns(bool){\n        require(msg.sender == feeAddress && tokendetails[tokenAddress].status==false);\n        tokendetails[tokenAddress].tokenSymbol=tokenSymbol;\n        tokendetails[tokenAddress].decimals=decimal_;\n        tokendetails[tokenAddress].status=true;\n        return true;\n    }\n1008-function_definition-168-174", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=function_definition];
1028 [label="168_ require(msg.sender == feeAddress && tokendetails[tokenAddress].status==false);\n1028-expression_statement-169-169", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
1046 [label="169_ tokendetails[tokenAddress].tokenSymbol=tokenSymbol;\n1046-expression_statement-170-170", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
1054 [label="170_ tokendetails[tokenAddress].decimals=decimal_;\n1054-expression_statement-171-171", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
1062 [label="171_ tokendetails[tokenAddress].status=true;\n1062-expression_statement-172-172", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
1071 [label="172_ return true;\n1071-return-173-173", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=return];
1074 [label="174_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1074-function_definition-175-183", method="bug_tmstmp36()", type_label=function_definition];
1079 [label="175_ uint pastBlockTime_tmstmp36;\n1079-new_variable-176-176", method="bug_tmstmp36()", type_label=new_variable];
1084 [label="176_ require(msg.value == 10 ether);\n1084-expression_statement-177-177", method="bug_tmstmp36()", type_label=expression_statement];
1094 [label="177_ require(now != pastBlockTime_tmstmp36);\n1094-expression_statement-178-178", method="bug_tmstmp36()", type_label=expression_statement];
1101 [label="178_ pastBlockTime_tmstmp36 = now;\n1101-expression_statement-179-179", method="bug_tmstmp36()", type_label=expression_statement];
1105 [label="179_ if_now % 15 == 0\n1105-if-180-182", method="bug_tmstmp36()", type_label=if];
4361 [label="179_ end_if", method="bug_tmstmp36()", type_label=end_if];
1112 [label="180_ msg.sender.transfer(address(this).balance);\n1112-expression_statement-181-181", method="bug_tmstmp36()", type_label=expression_statement];
1125 [label="183_ function deposit() dexstatuscheck public payable returns(bool) {\n        require(msg.value > 0);\n        userDetails[msg.sender][address(0)]=userDetails[msg.sender][address(0)].add(msg.value);\n        emit DepositandWithdraw( msg.sender, address(0),msg.value,0);\n        return true;\n    }\n1125-function_definition-184-189", method="deposit()", type_label=function_definition];
1127 [label="183_ dexstatuscheck\n1127-expression_statement-184-184", method="deposit()", type_label=expression_statement];
1136 [label="184_ require(msg.value > 0);\n1136-expression_statement-185-185", method="deposit()", type_label=expression_statement];
1145 [label="185_ userDetails[msg.sender][address(0)]=userDetails[msg.sender][address(0)].add(msg.value);\n1145-expression_statement-186-186", method="deposit()", type_label=expression_statement];
1188 [label="187_ return true;\n1188-return-188-188", method="deposit()", type_label=return];
1191 [label="189_ address winner_tmstmp35;\n1191-new_variable-190-190", method="", type_label=new_variable];
1195 [label="190_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1195-function_definition-191-194", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1203 [label="191_ uint _vtime = block.timestamp;\n1203-new_variable-192-192", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1211 [label="192_ if_startTime + (5 * 1 days) == _vtime\n1211-if-193-194", method="play_tmstmp35(uint startTime)", type_label=if];
4467 [label="192_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1222 [label="193_ winner_tmstmp35 = msg.sender;\n1222-expression_statement-194-194", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1228 [label="194_ function tokenDeposit(address tokenaddr,uint256 tokenAmount) dexstatuscheck public returns(bool)\n    {\n        require(tokenAmount > 0 && tokendetails[tokenaddr].status==true);\n        require(tokenallowance(tokenaddr,msg.sender) > 0);\n        userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].add(tokenAmount);\n        Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);\n        emit DepositandWithdraw( msg.sender,tokenaddr,tokenAmount,0);\n        return true;\n    }\n1228-function_definition-195-203", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=function_definition];
1238 [label="194_ dexstatuscheck\n1238-expression_statement-195-195", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1246 [label="196_ require(tokenAmount > 0 && tokendetails[tokenaddr].status==true);\n1246-expression_statement-197-197", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1262 [label="197_ require(tokenallowance(tokenaddr,msg.sender) > 0);\n1262-expression_statement-198-198", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1276 [label="198_ userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].add(tokenAmount);\n1276-expression_statement-199-199", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1297 [label="199_ Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);\n1297-expression_statement-200-200", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
1327 [label="201_ return true;\n1327-return-202-202", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=return];
1330 [label="203_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1330-function_definition-204-212", method="bug_tmstmp40()", type_label=function_definition];
1335 [label="204_ uint pastBlockTime_tmstmp40;\n1335-new_variable-205-205", method="bug_tmstmp40()", type_label=new_variable];
1340 [label="205_ require(msg.value == 10 ether);\n1340-expression_statement-206-206", method="bug_tmstmp40()", type_label=expression_statement];
1350 [label="206_ require(now != pastBlockTime_tmstmp40);\n1350-expression_statement-207-207", method="bug_tmstmp40()", type_label=expression_statement];
1357 [label="207_ pastBlockTime_tmstmp40 = now;\n1357-expression_statement-208-208", method="bug_tmstmp40()", type_label=expression_statement];
1361 [label="208_ if_now % 15 == 0\n1361-if-209-211", method="bug_tmstmp40()", type_label=if];
4617 [label="208_ end_if", method="bug_tmstmp40()", type_label=end_if];
1368 [label="209_ msg.sender.transfer(address(this).balance);\n1368-expression_statement-210-210", method="bug_tmstmp40()", type_label=expression_statement];
1381 [label="212_ function withdraw(uint8 type_,address tokenaddr,uint256 amount) dexstatuscheck public returns(bool) {\n        require(type_ ==0 || type_ == 1);\n         if(type_==0){  \n         require(tokenaddr == address(0));\n         require(amount>0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)]<amount);\n         require(amount<=address(this).balance);\n                msg.sender.transfer(amount.sub(withdrawfee[address(0)]));    \n                userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount);\n                feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]);\n        }\n        else{  \n        require(tokenaddr != address(0) && tokendetails[tokenaddr].status==true);\n        require(amount>0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr]<amount);\n              Token(tokenaddr).transfer(msg.sender, (amount.sub(withdrawfee[tokenaddr])));\n              userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount);\n              feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]);\n        }\n        emit DepositandWithdraw( msg.sender,tokenaddr,amount,1);\n        return true;\n    }\n1381-function_definition-213-232", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=function_definition];
1395 [label="212_ dexstatuscheck\n1395-expression_statement-213-213", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1403 [label="213_ require(type_ ==0 || type_ == 1);\n1403-expression_statement-214-214", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1414 [label="214_ if_type_==0\n1414-if-215-229", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=if];
4670 [label="214_ end_if", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=end_if];
1419 [label="215_ require(tokenaddr == address(0));\n1419-expression_statement-216-216", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1428 [label="216_ require(amount>0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)]<amount);\n1428-expression_statement-217-217", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1455 [label="217_ require(amount<=address(this).balance);\n1455-expression_statement-218-218", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1466 [label="218_ msg.sender.transfer(amount.sub(withdrawfee[address(0)]));\n1466-expression_statement-219-219", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1484 [label="219_ userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount);\n1484-expression_statement-220-220", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1509 [label="220_ feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]);\n1509-expression_statement-221-221", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1535 [label="223_ require(tokenaddr != address(0) && tokendetails[tokenaddr].status==true);\n1535-expression_statement-224-224", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1553 [label="224_ require(amount>0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr]<amount);\n1553-expression_statement-225-225", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1576 [label="225_ Token(tokenaddr).transfer(msg.sender, (amount.sub(withdrawfee[tokenaddr])));\n1576-expression_statement-226-226", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1598 [label="226_ userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount);\n1598-expression_statement-227-227", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1619 [label="227_ feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]);\n1619-expression_statement-228-228", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1650 [label="230_ return true;\n1650-return-231-231", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=return];
1653 [label="232_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1653-function_definition-233-235", method="bug_tmstmp33()", type_label=function_definition];
1662 [label="233_ return block.timestamp >= 1546300800;\n1662-return-234-234", method="bug_tmstmp33()", type_label=return];
1668 [label="235_ function adminProfitWithdraw(uint8 type_,address tokenAddr)public returns(bool){  \n       require(msg.sender == admin);\n       require(type_ ==0 || type_ == 1);\n         if(type_==0){  \n            admin.transfer(feeAmount[admin][address(0)]);\n            feeAmount[admin][address(0)]=0;\n        }\n        else{  \n            require(tokenAddr != address(0)) ;\n            Token(tokenAddr).transfer(admin, feeAmount[admin][tokenAddr]);\n            feeAmount[admin][tokenAddr]=0;\n        }\n            return true;\n        }\n1668-function_definition-236-249", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=function_definition];
1684 [label="236_ require(msg.sender == admin);\n1684-expression_statement-237-237", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1693 [label="237_ require(type_ ==0 || type_ == 1);\n1693-expression_statement-238-238", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1704 [label="238_ if_type_==0\n1704-if-239-247", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=if];
4960 [label="238_ end_if", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=end_if];
1709 [label="239_ admin.transfer(feeAmount[admin][address(0)]);\n1709-expression_statement-240-240", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1722 [label="240_ feeAmount[admin][address(0)]=0;\n1722-expression_statement-241-241", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1733 [label="243_ require(tokenAddr != address(0)) ;\n1733-expression_statement-244-244", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1742 [label="244_ Token(tokenAddr).transfer(admin, feeAmount[admin][tokenAddr]);\n1742-expression_statement-245-245", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1758 [label="245_ feeAmount[admin][tokenAddr]=0;\n1758-expression_statement-246-246", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1766 [label="247_ return true;\n1766-return-248-248", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=return];
1769 [label="249_ address winner_tmstmp27;\n1769-new_variable-250-250", method="", type_label=new_variable];
1773 [label="250_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1773-function_definition-251-254", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1781 [label="251_ uint _vtime = block.timestamp;\n1781-new_variable-252-252", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1789 [label="252_ if_startTime + (5 * 1 days) == _vtime\n1789-if-253-254", method="play_tmstmp27(uint startTime)", type_label=if];
5045 [label="252_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1800 [label="253_ winner_tmstmp27 = msg.sender;\n1800-expression_statement-254-254", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1806 [label="254_ function setwithdrawfee(address[] memory addr,uint256[] memory feeamount)public returns(bool)\n        {\n          require(msg.sender==admin);\n          require(addr.length <10 && feeamount.length < 10 && addr.length==feeamount.length);\n          for(uint8 i=0;i<addr.length;i++){\n            withdrawfee[addr[i]]=feeamount[i];    \n          }\n           return true;\n        }\n1806-function_definition-255-263", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=function_definition];
1824 [label="256_ require(msg.sender==admin);\n1824-expression_statement-257-257", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1833 [label="257_ require(addr.length <10 && feeamount.length < 10 && addr.length==feeamount.length);\n1833-expression_statement-258-258", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1856 [label="258_ for(i<addr.length;;i++)\n1856-for-259-261", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=for];
5112 [label="258_ end_loop", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=end_loop];
1869 [label="258_ i++\n1869-expression_statement-259-259", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1872 [label="259_ withdrawfee[addr[i]]=feeamount[i];\n1872-expression_statement-260-260", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1882 [label="261_ return true;\n1882-return-262-262", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=return];
1885 [label="263_ address winner_tmstmp31;\n1885-new_variable-264-264", method="", type_label=new_variable];
1889 [label="264_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1889-function_definition-265-268", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1897 [label="265_ uint _vtime = block.timestamp;\n1897-new_variable-266-266", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1905 [label="266_ if_startTime + (5 * 1 days) == _vtime\n1905-if-267-268", method="play_tmstmp31(uint startTime)", type_label=if];
5161 [label="266_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1916 [label="267_ winner_tmstmp31 = msg.sender;\n1916-expression_statement-268-268", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1922 [label="268_ function verify(string memory  message, uint8 v, bytes32 r, bytes32 s) private pure returns (address signer) {\n        string memory header = \"\x19Ethereum Signed Message:\n000000\";\n        uint256 lengthOffset;\n        uint256 length;\n        assembly {\n            length := mload(message)\n            lengthOffset := add(header, 57)\n        }\n        require(length <= 999999);\n        uint256 lengthLength = 0;\n        uint256 divisor = 100000; \n        while (divisor != 0) {\n            uint256 digit = length.div(divisor);\n            if (digit == 0) {\n                if (lengthLength == 0) {\n                      divisor = divisor.div(10);\n                      continue;\n                    }\n            }\n            lengthLength++;\n            length = length.sub(digit.mul(divisor));\n            divisor = divisor.div(10);\n            digit = digit.add(0x30);\n            lengthOffset++;\n            assembly {\n                mstore8(lengthOffset, digit)\n            }\n        }  \n        if (lengthLength == 0) {\n            lengthLength = 1 + 0x19 + 1;\n        } else {\n            lengthLength = lengthLength.add(1 + 0x19);\n        }\n        assembly {\n            mstore(header, lengthLength)\n        }\n        bytes32 check = keccak256(abi.encodePacked(header, message));\n        return ecrecover(check, v, r, s);\n    }\n1922-function_definition-269-307", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
1948 [label="269_ string memory header = \"\x19Ethereum Signed Message:\n000000\";\n1948-new_variable-270-270", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1955 [label="270_ uint256 lengthOffset;\n1955-new_variable-271-271", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1960 [label="271_ uint256 length;\n1960-new_variable-272-272", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1985 [label="276_ require(length <= 999999);\n1985-expression_statement-277-277", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1992 [label="277_ uint256 lengthLength = 0;\n1992-new_variable-278-278", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1998 [label="278_ uint256 divisor = 100000;\n1998-new_variable-279-279", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2004 [label="279_ while\n2004-while-280-296", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=while];
5260 [label="279_ end_loop", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_loop];
2009 [label="280_ uint256 digit = length.div(divisor);\n2009-new_variable-281-281", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2020 [label="281_ if_digit == 0\n2020-if-282-287", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5276 [label="281_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2025 [label="282_ if_lengthLength == 0\n2025-if-283-286", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5281 [label="282_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2030 [label="283_ divisor = divisor.div(10);\n2030-expression_statement-284-284", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2039 [label="284_ continue;\n2039-expression_statement-285-285", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2040 [label="287_ lengthLength++;\n2040-expression_statement-288-288", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2041 [label="287_ lengthLength++\n2041-expression_statement-288-288", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2043 [label="288_ length = length.sub(digit.mul(divisor));\n2043-expression_statement-289-289", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2057 [label="289_ divisor = divisor.div(10);\n2057-expression_statement-290-290", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2066 [label="290_ digit = digit.add(0x30);\n2066-expression_statement-291-291", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2075 [label="291_ lengthOffset++;\n2075-expression_statement-292-292", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2076 [label="291_ lengthOffset++\n2076-expression_statement-292-292", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2087 [label="296_ if_lengthLength == 0\n2087-if-297-301", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5343 [label="296_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2092 [label="297_ lengthLength = 1 + 0x19 + 1;\n2092-expression_statement-298-298", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2101 [label="299_ lengthLength = lengthLength.add(1 + 0x19);\n2101-expression_statement-300-300", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2121 [label="304_ bytes32 check = keccak256(abi.encodePacked(header, message));\n2121-new_variable-305-305", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2137 [label="305_ return ecrecover(check, v, r, s);\n2137-return-306-306", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2148 [label="307_ function makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s) dexstatuscheck public returns(bool){\n      require(msg.sender == feeAddress);\n       require(verify((message),v,r,s)==traderAddresses[1]);\n      uint256 amount__;\n        uint256 orderiD = tradeDetails[0];\n        if(Order[orderiD].status==0){    \n            if(tradeDetails[6] == 0){\n                amount__ = tradeDetails[3];\n            }\n            else if(tradeDetails[6] ==1){\n                amount__ = tradeDetails[1];\n            }\n            require(amount__ > 0 && amount__ <= userDetails[traderAddresses[1]][traderAddresses[0]]);\n                Order[orderiD].userAddress = traderAddresses[1];\n                Order[orderiD].type_ = tradeDetails[6];\n                Order[orderiD].price = tradeDetails[2];\n                Order[orderiD].amount  = tradeDetails[1];\n                Order[orderiD].total  = tradeDetails[3];\n                Order[orderiD].tradeTotal  = tradeDetails[3];\n                Order[orderiD]._decimal  = tradeDetails[7];\n                Order[orderiD].tokenAddress = traderAddresses[0];       \n                userDetails[traderAddresses[1]][traderAddresses[0]]=userDetails[traderAddresses[1]][traderAddresses[0]].sub(amount__);\n                Order[orderiD].tradeAmount=tradeDetails[1];\n                Order[orderiD].status=1;\n        }\n        else if(Order[orderiD].status==1 && tradeDetails[8]==0){  \n            cancelOrder(orderiD);\n        }\n        if(Order[orderiD].status==1 && tradeDetails[1] > 0 && tradeDetails[8]>0 && Order[tradeDetails[8]].status==1 && tradeDetails[3]>0){  \n                Order[orderiD].tradeAmount =Order[orderiD].tradeAmount.sub(tradeDetails[1]);\n                Order[tradeDetails[8]].tradeAmount =Order[tradeDetails[8]].tradeAmount.sub(tradeDetails[1]);\n                if(tradeDetails[2]>0){\n                    userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[2]);\n                }\n                Order[orderiD].tradeTotal =Order[orderiD].tradeTotal.sub(((tradeDetails[1].mul(Order[orderiD].price)).div(Order[orderiD]._decimal)));\n                Order[tradeDetails[8]].tradeTotal =Order[tradeDetails[8]].tradeTotal.sub(((tradeDetails[1].mul(Order[tradeDetails[8]].price)).div(Order[tradeDetails[8]]._decimal)));\n                    if(tradeDetails[6] == 1 || tradeDetails[6]==3)\n                    {\n                        userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1]);\n                        userDetails[Order[orderiD].userAddress][traderAddresses[0]]= userDetails[Order[orderiD].userAddress][traderAddresses[0]].sub(tradeDetails[4]);    \n                        feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[4]);\n                    }\n                    else\n                    {\n                         userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1].sub(tradeDetails[4]));\n                            feeAmount[admin][Order[tradeDetails[8]].tokenAddress]= feeAmount[admin][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[4]);\n                    }\n                    if(tradeDetails[6] == 2 || tradeDetails[6]==3)\n                    {\n                        userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3]);\n                        userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]]= userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]].sub(tradeDetails[5]);\n                        feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[5]);\n                    }\n                    else\n                    {\n                         userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3].sub(tradeDetails[5]));\n                         feeAmount[admin][Order[orderiD].tokenAddress]= feeAmount[admin][Order[orderiD].tokenAddress].add(tradeDetails[5]);\n                    }\n                if(Order[tradeDetails[8]].tradeAmount==0){\n                    Order[tradeDetails[8]].status=2;    \n                }\n                if(Order[orderiD].tradeAmount==0){\n                    Order[orderiD].status=2;    \n                }\n                orderPairStatus[orderiD][tradeDetails[8]] = true;\n            }\n        return true; \n    }\n2148-function_definition-308-375", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=function_definition];
2178 [label="307_ dexstatuscheck\n2178-expression_statement-308-308", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2186 [label="308_ require(msg.sender == feeAddress);\n2186-expression_statement-309-309", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2195 [label="309_ require(verify((message),v,r,s)==traderAddresses[1]);\n2195-expression_statement-310-310", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2214 [label="310_ uint256 amount__;\n2214-new_variable-311-311", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=new_variable];
2219 [label="311_ uint256 orderiD = tradeDetails[0];\n2219-new_variable-312-312", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=new_variable];
2227 [label="312_ if_Order[orderiD].status==0\n2227-if-313-335", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5483 [label="312_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2236 [label="313_ if_tradeDetails[6] == 0\n2236-if-314-319", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5492 [label="313_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2243 [label="314_ amount__ = tradeDetails[3];\n2243-expression_statement-315-315", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2249 [label="316_ if_tradeDetails[6] ==1\n2249-if-317-319", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
2256 [label="317_ amount__ = tradeDetails[1];\n2256-expression_statement-318-318", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2262 [label="319_ require(amount__ > 0 && amount__ <= userDetails[traderAddresses[1]][traderAddresses[0]]);\n2262-expression_statement-320-320", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2281 [label="320_ Order[orderiD].userAddress = traderAddresses[1];\n2281-expression_statement-321-321", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2291 [label="321_ Order[orderiD].type_ = tradeDetails[6];\n2291-expression_statement-322-322", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2301 [label="322_ Order[orderiD].price = tradeDetails[2];\n2301-expression_statement-323-323", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2311 [label="323_ Order[orderiD].amount  = tradeDetails[1];\n2311-expression_statement-324-324", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2321 [label="324_ Order[orderiD].total  = tradeDetails[3];\n2321-expression_statement-325-325", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2331 [label="325_ Order[orderiD].tradeTotal  = tradeDetails[3];\n2331-expression_statement-326-326", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2341 [label="326_ Order[orderiD]._decimal  = tradeDetails[7];\n2341-expression_statement-327-327", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2351 [label="327_ Order[orderiD].tokenAddress = traderAddresses[0];\n2351-expression_statement-328-328", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2361 [label="328_ userDetails[traderAddresses[1]][traderAddresses[0]]=userDetails[traderAddresses[1]][traderAddresses[0]].sub(amount__);\n2361-expression_statement-329-329", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2386 [label="329_ Order[orderiD].tradeAmount=tradeDetails[1];\n2386-expression_statement-330-330", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2396 [label="330_ Order[orderiD].status=1;\n2396-expression_statement-331-331", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2404 [label="332_ if_Order[orderiD].status==1 && tradeDetails[8]==0\n2404-if-333-335", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
2419 [label="333_ cancelOrder(orderiD);\n2419-expression_statement-334-334", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2424 [label="335_ if_Order[orderiD].status==1 && tradeDetails[1] > 0 && tradeDetails[8]>0 && Order[tradeDetails[8]].status==1 && tradeDetails[3]>0\n2424-if-336-373", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5680 [label="335_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2461 [label="336_ Order[orderiD].tradeAmount =Order[orderiD].tradeAmount.sub(tradeDetails[1]);\n2461-expression_statement-337-337", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2480 [label="337_ Order[tradeDetails[8]].tradeAmount =Order[tradeDetails[8]].tradeAmount.sub(tradeDetails[1]);\n2480-expression_statement-338-338", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2503 [label="338_ if_tradeDetails[2]>0\n2503-if-339-341", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5759 [label="338_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2510 [label="339_ userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[2]);\n2510-expression_statement-340-340", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2545 [label="341_ Order[orderiD].tradeTotal =Order[orderiD].tradeTotal.sub(((tradeDetails[1].mul(Order[orderiD].price)).div(Order[orderiD]._decimal)));\n2545-expression_statement-342-342", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2584 [label="342_ Order[tradeDetails[8]].tradeTotal =Order[tradeDetails[8]].tradeTotal.sub(((tradeDetails[1].mul(Order[tradeDetails[8]].price)).div(Order[tradeDetails[8]]._decimal)));\n2584-expression_statement-343-343", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2631 [label="343_ if_tradeDetails[6] == 1 || tradeDetails[6]==3\n2631-if-344-354", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5887 [label="343_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2644 [label="345_ userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1]);\n2644-expression_statement-346-346", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2683 [label="346_ userDetails[Order[orderiD].userAddress][traderAddresses[0]]= userDetails[Order[orderiD].userAddress][traderAddresses[0]].sub(tradeDetails[4]);\n2683-expression_statement-347-347", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2714 [label="347_ feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[4]);\n2714-expression_statement-348-348", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2738 [label="351_ userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1].sub(tradeDetails[4]));\n2738-expression_statement-352-352", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2784 [label="352_ feeAmount[admin][Order[tradeDetails[8]].tokenAddress]= feeAmount[admin][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[4]);\n2784-expression_statement-353-353", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2815 [label="354_ if_tradeDetails[6] == 2 || tradeDetails[6]==3\n2815-if-355-365", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
6071 [label="354_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2828 [label="356_ userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3]);\n2828-expression_statement-357-357", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2867 [label="357_ userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]]= userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]].sub(tradeDetails[5]);\n2867-expression_statement-358-358", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2902 [label="358_ feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[5]);\n2902-expression_statement-359-359", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2926 [label="362_ userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3].sub(tradeDetails[5]));\n2926-expression_statement-363-363", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2972 [label="363_ feeAmount[admin][Order[orderiD].tokenAddress]= feeAmount[admin][Order[orderiD].tokenAddress].add(tradeDetails[5]);\n2972-expression_statement-364-364", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2999 [label="365_ if_Order[tradeDetails[8]].tradeAmount==0\n2999-if-366-368", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
6255 [label="365_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
3010 [label="366_ Order[tradeDetails[8]].status=2;\n3010-expression_statement-367-367", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
3020 [label="368_ if_Order[orderiD].tradeAmount==0\n3020-if-369-371", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
6276 [label="368_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
3029 [label="369_ Order[orderiD].status=2;\n3029-expression_statement-370-370", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
3037 [label="371_ orderPairStatus[orderiD][tradeDetails[8]] = true;\n3037-expression_statement-372-372", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
3048 [label="373_ return true;\n3048-return-374-374", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=return];
3051 [label="375_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n3051-function_definition-376-378", method="bug_tmstmp13()", type_label=function_definition];
3060 [label="376_ return block.timestamp >= 1546300800;\n3060-return-377-377", method="bug_tmstmp13()", type_label=return];
3066 [label="378_ function cancelOrder(uint256 orderid)internal returns(bool){\n        if(Order[orderid].status==1){\n            if(Order[orderid].type_ == 0){\n            userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeTotal);        \n            }\n            else{\n                userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeAmount);\n            }\n            Order[orderid].status=3;     \n        }\n        return true;\n}\n3066-function_definition-379-390", method="cancelOrder(uint256 orderid)", type_label=function_definition];
3078 [label="379_ if_Order[orderid].status==1\n3078-if-380-388", method="cancelOrder(uint256 orderid)", type_label=if];
6334 [label="379_ end_if", method="cancelOrder(uint256 orderid)", type_label=end_if];
3087 [label="380_ if_Order[orderid].type_ == 0\n3087-if-381-386", method="cancelOrder(uint256 orderid)", type_label=if];
6343 [label="380_ end_if", method="cancelOrder(uint256 orderid)", type_label=end_if];
3096 [label="381_ userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeTotal);\n3096-expression_statement-382-382", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
3134 [label="384_ userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeAmount);\n3134-expression_statement-385-385", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
3171 [label="386_ Order[orderid].status=3;\n3171-expression_statement-387-387", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
3179 [label="388_ return true;\n3179-return-389-389", method="cancelOrder(uint256 orderid)", type_label=return];
3182 [label="390_ uint256 bugv_tmstmp5 = block.timestamp;\n3182-new_variable-391-391", method="", type_label=new_variable];
3189 [label="391_ function viewTokenBalance(address tokenAddr,address baladdr)public view returns(uint256){\n        return Token(tokenAddr).balanceOf(baladdr);\n    }\n3189-function_definition-392-394", method="viewTokenBalance(address tokenAddr,address baladdr)", type_label=function_definition];
3206 [label="392_ return Token(tokenAddr).balanceOf(baladdr);\n3206-return-393-393", method="viewTokenBalance(address tokenAddr,address baladdr)", type_label=return];
3216 [label="394_ uint256 bugv_tmstmp1 = block.timestamp;\n3216-new_variable-395-395", method="", type_label=new_variable];
3223 [label="395_ function tokenallowance(address tokenAddr,address owner) public view returns(uint256){\n        return Token(tokenAddr).allowance(owner,address(this));\n    }\n3223-function_definition-396-398", method="tokenallowance(address tokenAddr,address owner)", type_label=function_definition];
3240 [label="396_ return Token(tokenAddr).allowance(owner,address(this));\n3240-return-397-397", method="tokenallowance(address tokenAddr,address owner)", type_label=return];
3254 [label="398_ uint256 bugv_tmstmp2 = block.timestamp;\n3254-new_variable-399-399", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
213;
1638;
2112;
33 -> 41  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
41 -> 49  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
49 -> 60  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
49 -> 3305  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3305 -> 66  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 3305  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
90 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 117  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
106 -> 3362  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3362 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
117 -> 3362  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
139 -> 147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
147 -> 160  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
147 -> 3403  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3403 -> 166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 3403  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
186 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 207  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
194 -> 3450  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3450 -> 213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 3450  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
216 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 238  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
233 -> 3489  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3489 -> 240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 3489  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
238 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
240 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
248 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
257 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
259 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
276 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
284 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
286 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
314 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
381 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
396 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 431  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
420 -> 3676  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3676 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
431 -> 3676  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
442 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
462 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
477 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
590 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 608  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
601 -> 3857  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3857 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
608 -> 3857  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
625 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
633 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
641 -> 652  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
641 -> 3897  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3897 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 3897  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
658 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 691  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
678 -> 3934  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3934 -> 697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
691 -> 3934  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
706 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
711 -> 716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
716 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
726 -> 733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
733 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 744  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
737 -> 3993  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3993 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 3993  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
766 -> 771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
771 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
793 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 804  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
797 -> 4053  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4053 -> 817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
804 -> 4053  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
817 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 849  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
836 -> 4092  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4092 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 4092  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
864 -> 869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 902  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
895 -> 4151  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4151 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
902 -> 4151  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
915 -> 923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
926 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
964 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
975 -> 983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
991 -> 1002  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
991 -> 4247  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4247 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 4247  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1008 -> 1028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1028 -> 1046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1046 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1062 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1074 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1079 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1094 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 1105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1105 -> 1112  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1105 -> 4361  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4361 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 4361  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1125 -> 1136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1136 -> 1145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1188 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1195 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 1211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1211 -> 1222  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1211 -> 4467  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4467 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1222 -> 4467  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1228 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1262 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 1297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1327 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1330 -> 1335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1335 -> 1340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1340 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1357 -> 1361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1361 -> 1368  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1361 -> 4617  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4617 -> 1381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1368 -> 4617  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1381 -> 1403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 1414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1414 -> 1419  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1414 -> 1535  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4670 -> 1638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1419 -> 1428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1428 -> 1455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1455 -> 1466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1466 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1484 -> 1509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1509 -> 4670  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1535 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1553 -> 1576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1576 -> 1598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1598 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1619 -> 4670  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1650 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1653 -> 1662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1662 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1668 -> 1684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1684 -> 1693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1693 -> 1704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1704 -> 1709  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1704 -> 1733  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4960 -> 1766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1709 -> 1722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1722 -> 4960  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1733 -> 1742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1742 -> 1758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1758 -> 4960  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1766 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1773 -> 1781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1781 -> 1789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1789 -> 1800  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1789 -> 5045  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5045 -> 1806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1800 -> 5045  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1806 -> 1824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1824 -> 1833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1833 -> 1856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1856 -> 1872  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1856 -> 5112  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5112 -> 1882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1869 -> 1856  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1872 -> 1869  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1882 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1889 -> 1897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1897 -> 1905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1905 -> 1916  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1905 -> 5161  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5161 -> 1922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1916 -> 5161  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1922 -> 1948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1948 -> 1955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1955 -> 1960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1985 -> 1992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1992 -> 1998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1998 -> 2004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2004 -> 2009  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2004 -> 5260  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5260 -> 2087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2009 -> 2020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2020 -> 2025  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2020 -> 5276  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2025 -> 2030  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2025 -> 5281  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2030 -> 2039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2039 -> 2004  [color=red, controlflow_type=jump_next, edge_type=CFG_edge, key=0, label=jump_next];
2040 -> 2043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2043 -> 2057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2057 -> 2066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2066 -> 2075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2087 -> 2092  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2087 -> 2101  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5343 -> 2112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2092 -> 5343  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2101 -> 5343  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2121 -> 2137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2137 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2148 -> 2186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2186 -> 2195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2195 -> 2214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2214 -> 2219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2219 -> 2227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2227 -> 2236  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2227 -> 2404  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5483 -> 2424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2236 -> 2243  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2236 -> 2249  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5492 -> 2262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2243 -> 5492  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2249 -> 2256  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2249 -> 5492  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2256 -> 5492  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2262 -> 2281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2281 -> 2291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2291 -> 2301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2301 -> 2311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2311 -> 2321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2321 -> 2331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2331 -> 2341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2341 -> 2351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2351 -> 2361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2361 -> 2386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2386 -> 2396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2396 -> 5483  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2404 -> 2419  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2404 -> 5483  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2419 -> 5483  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2424 -> 2461  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2424 -> 5680  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5680 -> 3048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2461 -> 2480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2480 -> 2503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2503 -> 2510  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2503 -> 5759  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5759 -> 2545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2510 -> 5759  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2545 -> 2584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2584 -> 2631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2631 -> 2644  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2631 -> 2738  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5887 -> 2815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2644 -> 2683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2683 -> 2714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2714 -> 5887  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2738 -> 2784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2784 -> 5887  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2815 -> 2828  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2815 -> 2926  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6071 -> 2999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2828 -> 2867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2867 -> 2902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2902 -> 6071  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2926 -> 2972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2972 -> 6071  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2999 -> 3010  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2999 -> 6255  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6255 -> 3020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3010 -> 6255  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3020 -> 3029  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3020 -> 6276  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6276 -> 3037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3029 -> 6276  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3037 -> 5680  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3048 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3051 -> 3060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3060 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3066 -> 3078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3078 -> 3087  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3078 -> 6334  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6334 -> 3179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3087 -> 3096  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3087 -> 3134  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6343 -> 3171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3096 -> 6343  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3134 -> 6343  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3171 -> 6334  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3179 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3189 -> 3206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3206 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3223 -> 3240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3240 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
