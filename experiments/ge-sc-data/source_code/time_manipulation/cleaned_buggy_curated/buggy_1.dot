digraph  {
15 [label="2_ uint256 public totalSupply;\n15-new_variable-3-3", method="", type_label=new_variable];
20 [label="3_ function balanceOf(address _owner) public view returns (uint256 balance);\n20-function_definition-4-4", method="balanceOf(address _owner)", type_label=function_definition];
33 [label="4_ address winner_tmstmp39;\n33-new_variable-5-5", method="", type_label=new_variable];
37 [label="5_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n37-function_definition-6-9", method="play_tmstmp39(uint startTime)", type_label=function_definition];
45 [label="6_ uint _vtime = block.timestamp;\n45-new_variable-7-7", method="play_tmstmp39(uint startTime)", type_label=new_variable];
53 [label="7_ if_startTime + (5 * 1 days) == _vtime\n53-if-8-9", method="play_tmstmp39(uint startTime)", type_label=if];
978 [label="7_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
64 [label="8_ winner_tmstmp39 = msg.sender;\n64-expression_statement-9-9", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
70 [label="9_ function transfer(address _to, uint256 _value) public returns (bool success);\n70-function_definition-10-10", method="transfer(address _to,uint256 _value)", type_label=function_definition];
86 [label="10_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n86-function_definition-11-19", method="bug_tmstmp36()", type_label=function_definition];
91 [label="11_ uint pastBlockTime_tmstmp36;\n91-new_variable-12-12", method="bug_tmstmp36()", type_label=new_variable];
96 [label="12_ require(msg.value == 10 ether);\n96-expression_statement-13-13", method="bug_tmstmp36()", type_label=expression_statement];
106 [label="13_ require(now != pastBlockTime_tmstmp36);\n106-expression_statement-14-14", method="bug_tmstmp36()", type_label=expression_statement];
113 [label="14_ pastBlockTime_tmstmp36 = now;\n113-expression_statement-15-15", method="bug_tmstmp36()", type_label=expression_statement];
117 [label="15_ if_now % 15 == 0\n117-if-16-18", method="bug_tmstmp36()", type_label=if];
1042 [label="15_ end_if", method="bug_tmstmp36()", type_label=end_if];
124 [label="16_ msg.sender.transfer(address(this).balance);\n124-expression_statement-17-17", method="bug_tmstmp36()", type_label=expression_statement];
137 [label="19_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n137-function_definition-20-20", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
157 [label="20_ address winner_tmstmp35;\n157-new_variable-21-21", method="", type_label=new_variable];
161 [label="21_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n161-function_definition-22-25", method="play_tmstmp35(uint startTime)", type_label=function_definition];
169 [label="22_ uint _vtime = block.timestamp;\n169-new_variable-23-23", method="play_tmstmp35(uint startTime)", type_label=new_variable];
177 [label="23_ if_startTime + (5 * 1 days) == _vtime\n177-if-24-25", method="play_tmstmp35(uint startTime)", type_label=if];
1102 [label="23_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
188 [label="24_ winner_tmstmp35 = msg.sender;\n188-expression_statement-25-25", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
194 [label="25_ function approve(address _spender, uint256 _value) public returns (bool success);\n194-function_definition-26-26", method="approve(address _spender,uint256 _value)", type_label=function_definition];
210 [label="26_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n210-function_definition-27-35", method="bug_tmstmp40()", type_label=function_definition];
215 [label="27_ uint pastBlockTime_tmstmp40;\n215-new_variable-28-28", method="bug_tmstmp40()", type_label=new_variable];
220 [label="28_ require(msg.value == 10 ether);\n220-expression_statement-29-29", method="bug_tmstmp40()", type_label=expression_statement];
230 [label="29_ require(now != pastBlockTime_tmstmp40);\n230-expression_statement-30-30", method="bug_tmstmp40()", type_label=expression_statement];
237 [label="30_ pastBlockTime_tmstmp40 = now;\n237-expression_statement-31-31", method="bug_tmstmp40()", type_label=expression_statement];
241 [label="31_ if_now % 15 == 0\n241-if-32-34", method="bug_tmstmp40()", type_label=if];
1166 [label="31_ end_if", method="bug_tmstmp40()", type_label=end_if];
248 [label="32_ msg.sender.transfer(address(this).balance);\n248-expression_statement-33-33", method="bug_tmstmp40()", type_label=expression_statement];
261 [label="35_ function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n261-function_definition-36-36", method="allowance(address _owner,address _spender)", type_label=function_definition];
278 [label="36_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n278-function_definition-37-39", method="bug_tmstmp33()", type_label=function_definition];
287 [label="37_ return block.timestamp >= 1546300800;\n287-return-38-38", method="bug_tmstmp33()", type_label=return];
293 [label="39_ uint256 bugv_tmstmp3 = block.timestamp;\n293-new_variable-40-40", method="", type_label=new_variable];
314 [label="41_ uint256 bugv_tmstmp4 = block.timestamp;\n314-new_variable-42-42", method="", type_label=new_variable];
341 [label="45_ uint256 constant private MAX_UINT256 = 2**256 - 1;\n341-new_variable-46-46", method="", type_label=new_variable];
351 [label="46_ address winner_tmstmp7;\n351-new_variable-47-47", method="", type_label=new_variable];
355 [label="47_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n355-function_definition-48-51", method="play_tmstmp7(uint startTime)", type_label=function_definition];
363 [label="48_ uint _vtime = block.timestamp;\n363-new_variable-49-49", method="play_tmstmp7(uint startTime)", type_label=new_variable];
371 [label="49_ if_startTime + (5 * 1 days) == _vtime\n371-if-50-51", method="play_tmstmp7(uint startTime)", type_label=if];
1296 [label="49_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
382 [label="50_ winner_tmstmp7 = msg.sender;\n382-expression_statement-51-51", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
388 [label="51_ mapping (address => uint256) public balances;\n388-new_variable-52-52", method="", type_label=new_variable];
395 [label="52_ address winner_tmstmp23;\n395-new_variable-53-53", method="", type_label=new_variable];
399 [label="53_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n399-function_definition-54-57", method="play_tmstmp23(uint startTime)", type_label=function_definition];
407 [label="54_ uint _vtime = block.timestamp;\n407-new_variable-55-55", method="play_tmstmp23(uint startTime)", type_label=new_variable];
415 [label="55_ if_startTime + (5 * 1 days) == _vtime\n415-if-56-57", method="play_tmstmp23(uint startTime)", type_label=if];
1340 [label="55_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
426 [label="56_ winner_tmstmp23 = msg.sender;\n426-expression_statement-57-57", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
432 [label="57_ mapping (address => mapping (address => uint256)) public allowed;\n432-new_variable-58-58", method="", type_label=new_variable];
441 [label="58_ address winner_tmstmp14;\n441-new_variable-59-59", method="", type_label=new_variable];
445 [label="59_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n445-function_definition-60-62", method="play_tmstmp14(uint startTime)", type_label=function_definition];
453 [label="60_ if_startTime + (5 * 1 days) == block.timestamp\n453-if-61-62", method="play_tmstmp14(uint startTime)", type_label=if];
1378 [label="60_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
466 [label="61_ winner_tmstmp14 = msg.sender;\n466-expression_statement-62-62", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
472 [label="62_ string public name;\n472-new_variable-63-63", method="", type_label=new_variable];
477 [label="63_ address winner_tmstmp30;\n477-new_variable-64-64", method="", type_label=new_variable];
481 [label="64_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n481-function_definition-65-67", method="play_tmstmp30(uint startTime)", type_label=function_definition];
489 [label="65_ if_startTime + (5 * 1 days) == block.timestamp\n489-if-66-67", method="play_tmstmp30(uint startTime)", type_label=if];
1414 [label="65_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
502 [label="66_ winner_tmstmp30 = msg.sender;\n502-expression_statement-67-67", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
508 [label="67_ uint8 public decimals;\n508-new_variable-68-68", method="", type_label=new_variable];
513 [label="68_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n513-function_definition-69-77", method="bug_tmstmp8()", type_label=function_definition];
518 [label="69_ uint pastBlockTime_tmstmp8;\n518-new_variable-70-70", method="bug_tmstmp8()", type_label=new_variable];
523 [label="70_ require(msg.value == 10 ether);\n523-expression_statement-71-71", method="bug_tmstmp8()", type_label=expression_statement];
533 [label="71_ require(now != pastBlockTime_tmstmp8);\n533-expression_statement-72-72", method="bug_tmstmp8()", type_label=expression_statement];
540 [label="72_ pastBlockTime_tmstmp8 = now;\n540-expression_statement-73-73", method="bug_tmstmp8()", type_label=expression_statement];
544 [label="73_ if_now % 15 == 0\n544-if-74-76", method="bug_tmstmp8()", type_label=if];
1469 [label="73_ end_if", method="bug_tmstmp8()", type_label=end_if];
551 [label="74_ msg.sender.transfer(address(this).balance);\n551-expression_statement-75-75", method="bug_tmstmp8()", type_label=expression_statement];
564 [label="77_ string public symbol;\n564-new_variable-78-78", method="", type_label=new_variable];
571 [label="79_ totalSupply = 3 * 1e28;\n571-expression_statement-80-80", method="", type_label=expression_statement];
577 [label="80_ name = \"HotDollars Token\";\n577-expression_statement-81-81", method="", type_label=expression_statement];
582 [label="81_ decimals = 18;\n582-expression_statement-82-82", method="", type_label=expression_statement];
586 [label="82_ symbol = \"HDS\";\n586-expression_statement-83-83", method="", type_label=expression_statement];
591 [label="83_ balances[msg.sender] = totalSupply;\n591-expression_statement-84-84", method="", type_label=expression_statement];
599 [label="85_ address winner_tmstmp27;\n599-new_variable-86-86", method="", type_label=new_variable];
603 [label="86_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n603-function_definition-87-90", method="play_tmstmp27(uint startTime)", type_label=function_definition];
611 [label="87_ uint _vtime = block.timestamp;\n611-new_variable-88-88", method="play_tmstmp27(uint startTime)", type_label=new_variable];
619 [label="88_ if_startTime + (5 * 1 days) == _vtime\n619-if-89-90", method="play_tmstmp27(uint startTime)", type_label=if];
1544 [label="88_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
630 [label="89_ winner_tmstmp27 = msg.sender;\n630-expression_statement-90-90", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
636 [label="90_ function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);  \n        return true;\n    }\n636-function_definition-91-97", method="transfer(address _to,uint256 _value)", type_label=function_definition];
653 [label="91_ require(balances[msg.sender] >= _value);\n653-expression_statement-92-92", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
664 [label="92_ balances[msg.sender] -= _value;\n664-expression_statement-93-93", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
672 [label="93_ balances[_to] += _value;\n672-expression_statement-94-94", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
688 [label="95_ return true;\n688-return-96-96", method="transfer(address _to,uint256 _value)", type_label=return];
691 [label="97_ address winner_tmstmp31;\n691-new_variable-98-98", method="", type_label=new_variable];
695 [label="98_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n695-function_definition-99-102", method="play_tmstmp31(uint startTime)", type_label=function_definition];
703 [label="99_ uint _vtime = block.timestamp;\n703-new_variable-100-100", method="play_tmstmp31(uint startTime)", type_label=new_variable];
711 [label="100_ if_startTime + (5 * 1 days) == _vtime\n711-if-101-102", method="play_tmstmp31(uint startTime)", type_label=if];
1636 [label="100_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
722 [label="101_ winner_tmstmp31 = msg.sender;\n722-expression_statement-102-102", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
728 [label="102_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        emit Transfer(_from, _to, _value);  \n        return true;\n    }\n728-function_definition-103-113", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
749 [label="103_ uint256 allowance = allowed[_from][msg.sender];\n749-new_variable-104-104", method="transferFrom(address _from,address _to,uint256 _value)", type_label=new_variable];
761 [label="104_ require(balances[_from] >= _value && allowance >= _value);\n761-expression_statement-105-105", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
774 [label="105_ balances[_to] += _value;\n774-expression_statement-106-106", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
780 [label="106_ balances[_from] -= _value;\n780-expression_statement-107-107", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
786 [label="107_ if_allowance < MAX_UINT256\n786-if-108-110", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1711 [label="107_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
791 [label="108_ allowed[_from][msg.sender] -= _value;\n791-expression_statement-109-109", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
809 [label="111_ return true;\n809-return-112-112", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
812 [label="113_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n812-function_definition-114-116", method="bug_tmstmp13()", type_label=function_definition];
821 [label="114_ return block.timestamp >= 1546300800;\n821-return-115-115", method="bug_tmstmp13()", type_label=return];
827 [label="116_ function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n827-function_definition-117-119", method="balanceOf(address _owner)", type_label=function_definition];
841 [label="117_ return balances[_owner];\n841-return-118-118", method="balanceOf(address _owner)", type_label=return];
845 [label="119_ uint256 bugv_tmstmp5 = block.timestamp;\n845-new_variable-120-120", method="", type_label=new_variable];
852 [label="120_ function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);  \n        return true;\n    }\n852-function_definition-121-125", method="approve(address _spender,uint256 _value)", type_label=function_definition];
869 [label="121_ allowed[msg.sender][_spender] = _value;\n869-expression_statement-122-122", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
889 [label="123_ return true;\n889-return-124-124", method="approve(address _spender,uint256 _value)", type_label=return];
892 [label="125_ uint256 bugv_tmstmp1 = block.timestamp;\n892-new_variable-126-126", method="", type_label=new_variable];
899 [label="126_ function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n899-function_definition-127-129", method="allowance(address _owner,address _spender)", type_label=function_definition];
917 [label="127_ return allowed[_owner][_spender];\n917-return-128-128", method="allowance(address _owner,address _spender)", type_label=return];
923 [label="129_ uint256 bugv_tmstmp2 = block.timestamp;\n923-new_variable-130-130", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
801;
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 64  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
53 -> 978  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
978 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 978  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
86 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
91 -> 96  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
117 -> 124  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
117 -> 1042  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1042 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 1042  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
161 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 188  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
177 -> 1102  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1102 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 1102  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
210 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 248  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
241 -> 1166  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1166 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
248 -> 1166  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
278 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
341 -> 351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 382  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
371 -> 1296  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1296 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 1296  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
388 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
399 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 426  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
415 -> 1340  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1340 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 1340  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
432 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 466  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
453 -> 1378  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1378 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 1378  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
472 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 502  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
489 -> 1414  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1414 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 1414  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
513 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
533 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 551  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
544 -> 1469  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1469 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 1469  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
571 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
603 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
619 -> 630  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
619 -> 1544  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1544 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 1544  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
636 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
695 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
711 -> 722  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
711 -> 1636  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1636 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 1636  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
728 -> 749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
774 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 791  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
786 -> 1711  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1711 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
791 -> 1711  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
809 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
812 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
827 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
852 -> 869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
889 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
899 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
