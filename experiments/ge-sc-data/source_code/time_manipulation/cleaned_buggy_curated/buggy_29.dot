digraph  {
13 [label="2_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n13-function_definition-3-3", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
33 [label="3_ address winner_tmstmp30;\n33-new_variable-4-4", method="", type_label=new_variable];
37 [label="4_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n37-function_definition-5-7", method="play_tmstmp30(uint startTime)", type_label=function_definition];
45 [label="5_ if_startTime + (5 * 1 days) == block.timestamp\n45-if-6-7", method="play_tmstmp30(uint startTime)", type_label=if];
1582 [label="5_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
58 [label="6_ winner_tmstmp30 = msg.sender;\n58-expression_statement-7-7", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
67 [label="9_ function allowance(address owner, address spender) external view returns (uint256);\n67-function_definition-10-10", method="allowance(address owner,address spender)", type_label=function_definition];
83 [label="10_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n83-function_definition-11-19", method="bug_tmstmp8()", type_label=function_definition];
88 [label="11_ uint pastBlockTime_tmstmp8;\n88-new_variable-12-12", method="bug_tmstmp8()", type_label=new_variable];
93 [label="12_ require(msg.value == 10 ether);\n93-expression_statement-13-13", method="bug_tmstmp8()", type_label=expression_statement];
103 [label="13_ require(now != pastBlockTime_tmstmp8);\n103-expression_statement-14-14", method="bug_tmstmp8()", type_label=expression_statement];
110 [label="14_ pastBlockTime_tmstmp8 = now;\n110-expression_statement-15-15", method="bug_tmstmp8()", type_label=expression_statement];
114 [label="15_ if_now % 15 == 0\n114-if-16-18", method="bug_tmstmp8()", type_label=if];
1651 [label="15_ end_if", method="bug_tmstmp8()", type_label=end_if];
121 [label="16_ msg.sender.transfer(address(this).balance);\n121-expression_statement-17-17", method="bug_tmstmp8()", type_label=expression_statement];
134 [label="19_ function balanceOf(address account) external view returns (uint256);\n134-function_definition-20-20", method="balanceOf(address account)", type_label=function_definition];
146 [label="20_ address winner_tmstmp39;\n146-new_variable-21-21", method="", type_label=new_variable];
150 [label="21_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n150-function_definition-22-25", method="play_tmstmp39(uint startTime)", type_label=function_definition];
158 [label="22_ uint _vtime = block.timestamp;\n158-new_variable-23-23", method="play_tmstmp39(uint startTime)", type_label=new_variable];
166 [label="23_ if_startTime + (5 * 1 days) == _vtime\n166-if-24-25", method="play_tmstmp39(uint startTime)", type_label=if];
1703 [label="23_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
177 [label="24_ winner_tmstmp39 = msg.sender;\n177-expression_statement-25-25", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
195 [label="28_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n195-function_definition-29-33", method="add(uint256 a,uint256 b)", type_label=function_definition];
212 [label="29_ uint256 c = a + b;\n212-new_variable-30-30", method="add(uint256 a,uint256 b)", type_label=new_variable];
220 [label="30_ require(c >= a, \"SafeMath: addition overflow\");\n220-expression_statement-31-31", method="add(uint256 a,uint256 b)", type_label=expression_statement];
230 [label="31_ return c;\n230-return-32-32", method="add(uint256 a,uint256 b)", type_label=return];
232 [label="33_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n232-function_definition-34-38", method="sub(uint256 a,uint256 b)", type_label=function_definition];
249 [label="34_ require(b <= a, \"SafeMath: subtraction overflow\");\n249-expression_statement-35-35", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
259 [label="35_ uint256 c = a - b;\n259-new_variable-36-36", method="sub(uint256 a,uint256 b)", type_label=new_variable];
267 [label="36_ return c;\n267-return-37-37", method="sub(uint256 a,uint256 b)", type_label=return];
269 [label="38_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n269-function_definition-39-46", method="mul(uint256 a,uint256 b)", type_label=function_definition];
286 [label="39_ if_a == 0\n286-if-40-42", method="mul(uint256 a,uint256 b)", type_label=if];
1823 [label="39_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
291 [label="40_ return 0;\n291-return-41-41", method="mul(uint256 a,uint256 b)", type_label=return];
293 [label="42_ uint256 c = a * b;\n293-new_variable-43-43", method="mul(uint256 a,uint256 b)", type_label=new_variable];
301 [label="43_ require(c / a == b, \"SafeMath: multiplication overflow\");\n301-expression_statement-44-44", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
313 [label="44_ return c;\n313-return-45-45", method="mul(uint256 a,uint256 b)", type_label=return];
315 [label="46_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n315-function_definition-47-51", method="div(uint256 a,uint256 b)", type_label=function_definition];
332 [label="47_ require(b > 0, \"SafeMath: division by zero\");\n332-expression_statement-48-48", method="div(uint256 a,uint256 b)", type_label=expression_statement];
342 [label="48_ uint256 c = a / b;\n342-new_variable-49-49", method="div(uint256 a,uint256 b)", type_label=new_variable];
350 [label="49_ return c;\n350-return-50-50", method="div(uint256 a,uint256 b)", type_label=return];
352 [label="51_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n352-function_definition-52-55", method="mod(uint256 a,uint256 b)", type_label=function_definition];
369 [label="52_ require(b != 0, \"SafeMath: modulo by zero\");\n369-expression_statement-53-53", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
379 [label="53_ return a % b;\n379-return-54-54", method="mod(uint256 a,uint256 b)", type_label=return];
391 [label="58_ RaffleToken constant public raffleContract = RaffleToken(0x0C8cDC16973E88FAb31DD0FCB844DdF0e1056dE2);\n391-new_variable-59-59", method="", type_label=new_variable];
401 [label="59_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n401-function_definition-60-68", method="bug_tmstmp32()", type_label=function_definition];
406 [label="60_ uint pastBlockTime_tmstmp32;\n406-new_variable-61-61", method="bug_tmstmp32()", type_label=new_variable];
411 [label="61_ require(msg.value == 10 ether);\n411-expression_statement-62-62", method="bug_tmstmp32()", type_label=expression_statement];
421 [label="62_ require(now != pastBlockTime_tmstmp32);\n421-expression_statement-63-63", method="bug_tmstmp32()", type_label=expression_statement];
428 [label="63_ pastBlockTime_tmstmp32 = now;\n428-expression_statement-64-64", method="bug_tmstmp32()", type_label=expression_statement];
432 [label="64_ if_now % 15 == 0\n432-if-65-67", method="bug_tmstmp32()", type_label=if];
1969 [label="64_ end_if", method="bug_tmstmp32()", type_label=end_if];
439 [label="65_ msg.sender.transfer(address(this).balance);\n439-expression_statement-66-66", method="bug_tmstmp32()", type_label=expression_statement];
452 [label="68_ bool public paused;\n452-new_variable-69-69", method="", type_label=new_variable];
457 [label="69_ address winner_tmstmp38;\n457-new_variable-70-70", method="", type_label=new_variable];
461 [label="70_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n461-function_definition-71-73", method="play_tmstmp38(uint startTime)", type_label=function_definition];
469 [label="71_ if_startTime + (5 * 1 days) == block.timestamp\n469-if-72-73", method="play_tmstmp38(uint startTime)", type_label=if];
2006 [label="71_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
482 [label="72_ winner_tmstmp38 = msg.sender;\n482-expression_statement-73-73", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
488 [label="73_ address payable public owner;\n488-new_variable-74-74", method="", type_label=new_variable];
493 [label="74_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n493-function_definition-75-83", method="bug_tmstmp4()", type_label=function_definition];
498 [label="75_ uint pastBlockTime_tmstmp4;\n498-new_variable-76-76", method="bug_tmstmp4()", type_label=new_variable];
503 [label="76_ require(msg.value == 10 ether);\n503-expression_statement-77-77", method="bug_tmstmp4()", type_label=expression_statement];
513 [label="77_ require(now != pastBlockTime_tmstmp4);\n513-expression_statement-78-78", method="bug_tmstmp4()", type_label=expression_statement];
520 [label="78_ pastBlockTime_tmstmp4 = now;\n520-expression_statement-79-79", method="bug_tmstmp4()", type_label=expression_statement];
524 [label="79_ if_now % 15 == 0\n524-if-80-82", method="bug_tmstmp4()", type_label=if];
2061 [label="79_ end_if", method="bug_tmstmp4()", type_label=end_if];
531 [label="80_ msg.sender.transfer(address(this).balance);\n531-expression_statement-81-81", method="bug_tmstmp4()", type_label=expression_statement];
544 [label="83_ uint256 public nextListingId;\n544-new_variable-84-84", method="", type_label=new_variable];
549 [label="84_ address winner_tmstmp7;\n549-new_variable-85-85", method="", type_label=new_variable];
553 [label="85_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n553-function_definition-86-89", method="play_tmstmp7(uint startTime)", type_label=function_definition];
561 [label="86_ uint _vtime = block.timestamp;\n561-new_variable-87-87", method="play_tmstmp7(uint startTime)", type_label=new_variable];
569 [label="87_ if_startTime + (5 * 1 days) == _vtime\n569-if-88-89", method="play_tmstmp7(uint startTime)", type_label=if];
2106 [label="87_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
580 [label="88_ winner_tmstmp7 = msg.sender;\n580-expression_statement-89-89", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
586 [label="89_ mapping (uint256 => Listing) public listingsById;\n586-new_variable-90-90", method="", type_label=new_variable];
594 [label="90_ address winner_tmstmp23;\n594-new_variable-91-91", method="", type_label=new_variable];
598 [label="91_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n598-function_definition-92-95", method="play_tmstmp23(uint startTime)", type_label=function_definition];
606 [label="92_ uint _vtime = block.timestamp;\n606-new_variable-93-93", method="play_tmstmp23(uint startTime)", type_label=new_variable];
614 [label="93_ if_startTime + (5 * 1 days) == _vtime\n614-if-94-95", method="play_tmstmp23(uint startTime)", type_label=if];
2151 [label="93_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
625 [label="94_ winner_tmstmp23 = msg.sender;\n625-expression_statement-95-95", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
631 [label="95_ mapping (uint256 => Purchase) public purchasesById;\n631-new_variable-96-96", method="", type_label=new_variable];
639 [label="96_ address winner_tmstmp14;\n639-new_variable-97-97", method="", type_label=new_variable];
643 [label="97_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n643-function_definition-98-100", method="play_tmstmp14(uint startTime)", type_label=function_definition];
651 [label="98_ if_startTime + (5 * 1 days) == block.timestamp\n651-if-99-100", method="play_tmstmp14(uint startTime)", type_label=if];
2188 [label="98_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
664 [label="99_ winner_tmstmp14 = msg.sender;\n664-expression_statement-100-100", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
670 [label="100_ uint256 public nextPurchaseId;\n670-new_variable-101-101", method="", type_label=new_variable];
675 [label="101_ struct Listing {\n        uint256 pricePerToken;\n        uint256 initialAmount;\n        uint256 amountLeft;\n        address payable seller;\n        bool active;\n    }\n675-expression_statement-102-108", method="Listing()", type_label=expression_statement];
697 [label="108_ struct Purchase {\n        uint256 totalAmount;\n        uint256 totalAmountPayed;\n        uint256 timestamp;\n    }\n697-expression_statement-109-113", method="Purchase()", type_label=expression_statement];
711 [label="113_ uint256 bugv_tmstmp2 = block.timestamp;\n711-new_variable-114-114", method="", type_label=new_variable];
736 [label="115_ uint256 bugv_tmstmp3 = block.timestamp;\n736-new_variable-116-116", method="", type_label=new_variable];
749 [label="117_ uint256 bugv_tmstmp4 = block.timestamp;\n749-new_variable-118-118", method="", type_label=new_variable];
774 [label="119_ modifier onlyContractOwner {\n        require(msg.sender == owner, \"Function called by non-owner.\");\n        _;\n    }\n774-expression_statement-120-123", method="", type_label=expression_statement];
777 [label="120_ require(msg.sender == owner, \"Function called by non-owner.\");\n777-expression_statement-121-121", method="", type_label=expression_statement];
789 [label="121_ _;\n789-expression_statement-122-122", method="", type_label=expression_statement];
791 [label="123_ uint256 bugv_tmstmp5 = block.timestamp;\n791-new_variable-124-124", method="", type_label=new_variable];
798 [label="124_ modifier onlyUnpaused {\n        require(paused == false, \"Exchange is paused.\");\n        _;\n    }\n798-expression_statement-125-128", method="", type_label=expression_statement];
801 [label="125_ require(paused == false, \"Exchange is paused.\");\n801-expression_statement-126-126", method="", type_label=expression_statement];
812 [label="126_ _;\n812-expression_statement-127-127", method="", type_label=expression_statement];
814 [label="128_ uint256 bugv_tmstmp1 = block.timestamp;\n814-new_variable-129-129", method="", type_label=new_variable];
823 [label="130_ owner = msg.sender;\n823-expression_statement-131-131", method="", type_label=expression_statement];
829 [label="131_ nextListingId = 916;\n829-expression_statement-132-132", method="", type_label=expression_statement];
833 [label="132_ nextPurchaseId = 344;\n833-expression_statement-133-133", method="", type_label=expression_statement];
837 [label="134_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n837-function_definition-135-143", method="bug_tmstmp36()", type_label=function_definition];
842 [label="135_ uint pastBlockTime_tmstmp36;\n842-new_variable-136-136", method="bug_tmstmp36()", type_label=new_variable];
847 [label="136_ require(msg.value == 10 ether);\n847-expression_statement-137-137", method="bug_tmstmp36()", type_label=expression_statement];
857 [label="137_ require(now != pastBlockTime_tmstmp36);\n857-expression_statement-138-138", method="bug_tmstmp36()", type_label=expression_statement];
864 [label="138_ pastBlockTime_tmstmp36 = now;\n864-expression_statement-139-139", method="bug_tmstmp36()", type_label=expression_statement];
868 [label="139_ if_now % 15 == 0\n868-if-140-142", method="bug_tmstmp36()", type_label=if];
2405 [label="139_ end_if", method="bug_tmstmp36()", type_label=end_if];
875 [label="140_ msg.sender.transfer(address(this).balance);\n875-expression_statement-141-141", method="bug_tmstmp36()", type_label=expression_statement];
888 [label="143_ function buyRaffle(uint256[] calldata amounts, uint256[] calldata listingIds) payable external onlyUnpaused {\n        require(amounts.length == listingIds.length, \"You have to provide amounts for every single listing!\");\n        uint256 totalAmount;\n        uint256 totalAmountPayed;\n        for (uint256 i = 0; i < listingIds.length; i++) {\n            uint256 id = listingIds[i];\n            uint256 amount = amounts[i];\n            Listing storage listing = listingsById[id];\n            require(listing.active, \"Listing is not active anymore!\");\n            listing.amountLeft = listing.amountLeft.sub(amount);\n            require(listing.amountLeft >= 0, \"Amount left needs to be higher than 0.\");\n            if(listing.amountLeft == 0) { listing.active = false; }\n            uint256 amountToPay = listing.pricePerToken * amount;\n            listing.seller.transfer(amountToPay);\n            totalAmountPayed = totalAmountPayed.add(amountToPay);\n            totalAmount = totalAmount.add(amount);\n            require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');\n        }\n        require(totalAmountPayed <= msg.value, 'Overpayed!');\n        uint256 id = nextPurchaseId++;\n        Purchase storage purchase = purchasesById[id];\n        purchase.totalAmount = totalAmount;\n        purchase.totalAmountPayed = totalAmountPayed;\n        purchase.timestamp = now;\n        emit Purchased(id, totalAmount, totalAmountPayed, now);\n    }\n888-function_definition-144-169", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=function_definition];
902 [label="143_ onlyUnpaused\n902-expression_statement-144-144", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
905 [label="144_ require(amounts.length == listingIds.length, \"You have to provide amounts for every single listing!\");\n905-expression_statement-145-145", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
919 [label="145_ uint256 totalAmount;\n919-new_variable-146-146", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
924 [label="146_ uint256 totalAmountPayed;\n924-new_variable-147-147", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
929 [label="147_ for(i < listingIds.length;;i++)\n929-for-148-161", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=for];
2466 [label="147_ end_loop", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=end_loop];
942 [label="147_ i++\n942-expression_statement-148-148", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
945 [label="148_ uint256 id = listingIds[i];\n945-new_variable-149-149", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
953 [label="149_ uint256 amount = amounts[i];\n953-new_variable-150-150", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
961 [label="150_ Listing storage listing = listingsById[id];\n961-new_variable-151-151", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
970 [label="151_ require(listing.active, \"Listing is not active anymore!\");\n970-expression_statement-152-152", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
980 [label="152_ listing.amountLeft = listing.amountLeft.sub(amount);\n980-expression_statement-153-153", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
993 [label="153_ require(listing.amountLeft >= 0, \"Amount left needs to be higher than 0.\");\n993-expression_statement-154-154", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1005 [label="154_ if_listing.amountLeft == 0\n1005-if-155-155", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=if];
2542 [label="154_ end_if", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=end_if];
1012 [label="154_ listing.active = false;\n1012-expression_statement-155-155", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1019 [label="155_ uint256 amountToPay = listing.pricePerToken * amount;\n1019-new_variable-156-156", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1029 [label="156_ listing.seller.transfer(amountToPay);\n1029-expression_statement-157-157", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1038 [label="157_ totalAmountPayed = totalAmountPayed.add(amountToPay);\n1038-expression_statement-158-158", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1047 [label="158_ totalAmount = totalAmount.add(amount);\n1047-expression_statement-159-159", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1056 [label="159_ require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');\n1056-expression_statement-160-160", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1077 [label="161_ require(totalAmountPayed <= msg.value, 'Overpayed!');\n1077-expression_statement-162-162", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1089 [label="162_ uint256 id = nextPurchaseId++;\n1089-new_variable-163-163", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1094 [label="162_ nextPurchaseId++\n1094-expression_statement-163-163", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1096 [label="163_ Purchase storage purchase = purchasesById[id];\n1096-new_variable-164-164", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
1105 [label="164_ purchase.totalAmount = totalAmount;\n1105-expression_statement-165-165", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1111 [label="165_ purchase.totalAmountPayed = totalAmountPayed;\n1111-expression_statement-166-166", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1117 [label="166_ purchase.timestamp = now;\n1117-expression_statement-167-167", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
1133 [label="169_ address winner_tmstmp35;\n1133-new_variable-170-170", method="", type_label=new_variable];
1137 [label="170_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1137-function_definition-171-174", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1145 [label="171_ uint _vtime = block.timestamp;\n1145-new_variable-172-172", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1153 [label="172_ if_startTime + (5 * 1 days) == _vtime\n1153-if-173-174", method="play_tmstmp35(uint startTime)", type_label=if];
2690 [label="172_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1164 [label="173_ winner_tmstmp35 = msg.sender;\n1164-expression_statement-174-174", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1170 [label="174_ function addListing(uint256 initialAmount, uint256 pricePerToken) external onlyUnpaused {\n        require(raffleContract.balanceOf(msg.sender) >= initialAmount, \"Amount to sell is higher than balance!\");\n        require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, \"Allowance is to small (increase allowance)!\");\n        uint256 id = nextListingId++;\n        Listing storage listing = listingsById[id];\n        listing.initialAmount = initialAmount;\n        listing.amountLeft = initialAmount;\n        listing.pricePerToken = pricePerToken;\n        listing.seller = msg.sender;\n        listing.active = true;\n        emit Listed(id, listing.pricePerToken, listing.initialAmount, listing.seller);\n    }\n1170-function_definition-175-186", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=function_definition];
1181 [label="174_ onlyUnpaused\n1181-expression_statement-175-175", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1184 [label="175_ require(raffleContract.balanceOf(msg.sender) >= initialAmount, \"Amount to sell is higher than balance!\");\n1184-expression_statement-176-176", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1201 [label="176_ require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, \"Allowance is to small (increase allowance)!\");\n1201-expression_statement-177-177", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1222 [label="177_ uint256 id = nextListingId++;\n1222-new_variable-178-178", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=new_variable];
1227 [label="177_ nextListingId++\n1227-expression_statement-178-178", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1229 [label="178_ Listing storage listing = listingsById[id];\n1229-new_variable-179-179", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=new_variable];
1238 [label="179_ listing.initialAmount = initialAmount;\n1238-expression_statement-180-180", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1244 [label="180_ listing.amountLeft = initialAmount;\n1244-expression_statement-181-181", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1250 [label="181_ listing.pricePerToken = pricePerToken;\n1250-expression_statement-182-182", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1256 [label="182_ listing.seller = msg.sender;\n1256-expression_statement-183-183", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1264 [label="183_ listing.active = true;\n1264-expression_statement-184-184", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1287 [label="186_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1287-function_definition-187-195", method="bug_tmstmp40()", type_label=function_definition];
1292 [label="187_ uint pastBlockTime_tmstmp40;\n1292-new_variable-188-188", method="bug_tmstmp40()", type_label=new_variable];
1297 [label="188_ require(msg.value == 10 ether);\n1297-expression_statement-189-189", method="bug_tmstmp40()", type_label=expression_statement];
1307 [label="189_ require(now != pastBlockTime_tmstmp40);\n1307-expression_statement-190-190", method="bug_tmstmp40()", type_label=expression_statement];
1314 [label="190_ pastBlockTime_tmstmp40 = now;\n1314-expression_statement-191-191", method="bug_tmstmp40()", type_label=expression_statement];
1318 [label="191_ if_now % 15 == 0\n1318-if-192-194", method="bug_tmstmp40()", type_label=if];
2855 [label="191_ end_if", method="bug_tmstmp40()", type_label=end_if];
1325 [label="192_ msg.sender.transfer(address(this).balance);\n1325-expression_statement-193-193", method="bug_tmstmp40()", type_label=expression_statement];
1338 [label="195_ function cancelListing(uint256 id) external {\n        Listing storage listing = listingsById[id];\n        require(listing.active, \"This listing was turned inactive already!\");\n        require(listing.seller == msg.sender || owner == msg.sender, \"Only the listing owner or the contract owner can cancel the listing!\");\n        listing.active = false;\n        emit Canceled(id);\n    }\n1338-function_definition-196-202", method="cancelListing(uint256 id)", type_label=function_definition];
1346 [label="196_ Listing storage listing = listingsById[id];\n1346-new_variable-197-197", method="cancelListing(uint256 id)", type_label=new_variable];
1355 [label="197_ require(listing.active, \"This listing was turned inactive already!\");\n1355-expression_statement-198-198", method="cancelListing(uint256 id)", type_label=expression_statement];
1365 [label="198_ require(listing.seller == msg.sender || owner == msg.sender, \"Only the listing owner or the contract owner can cancel the listing!\");\n1365-expression_statement-199-199", method="cancelListing(uint256 id)", type_label=expression_statement];
1385 [label="199_ listing.active = false;\n1385-expression_statement-200-200", method="cancelListing(uint256 id)", type_label=expression_statement];
1396 [label="202_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1396-function_definition-203-205", method="bug_tmstmp33()", type_label=function_definition];
1405 [label="203_ return block.timestamp >= 1546300800;\n1405-return-204-204", method="bug_tmstmp33()", type_label=return];
1411 [label="205_ function setPaused(bool value) external onlyContractOwner {\n        paused = value;\n    }\n1411-function_definition-206-208", method="setPaused(bool value)", type_label=function_definition];
1418 [label="205_ onlyContractOwner\n1418-expression_statement-206-206", method="setPaused(bool value)", type_label=expression_statement];
1421 [label="206_ paused = value;\n1421-expression_statement-207-207", method="setPaused(bool value)", type_label=expression_statement];
1425 [label="208_ address winner_tmstmp27;\n1425-new_variable-209-209", method="", type_label=new_variable];
1429 [label="209_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1429-function_definition-210-213", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1437 [label="210_ uint _vtime = block.timestamp;\n1437-new_variable-211-211", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1445 [label="211_ if_startTime + (5 * 1 days) == _vtime\n1445-if-212-213", method="play_tmstmp27(uint startTime)", type_label=if];
2982 [label="211_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1456 [label="212_ winner_tmstmp27 = msg.sender;\n1456-expression_statement-213-213", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1462 [label="213_ function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {\n        owner.transfer(withdrawAmount);\n    }\n1462-function_definition-214-216", method="withdrawFunds(uint256 withdrawAmount)", type_label=function_definition];
1469 [label="213_ onlyContractOwner\n1469-expression_statement-214-214", method="withdrawFunds(uint256 withdrawAmount)", type_label=expression_statement];
1472 [label="214_ owner.transfer(withdrawAmount);\n1472-expression_statement-215-215", method="withdrawFunds(uint256 withdrawAmount)", type_label=expression_statement];
1479 [label="216_ address winner_tmstmp31;\n1479-new_variable-217-217", method="", type_label=new_variable];
1483 [label="217_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1483-function_definition-218-221", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1491 [label="218_ uint _vtime = block.timestamp;\n1491-new_variable-219-219", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1499 [label="219_ if_startTime + (5 * 1 days) == _vtime\n1499-if-220-221", method="play_tmstmp31(uint startTime)", type_label=if];
3036 [label="219_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1510 [label="220_ winner_tmstmp31 = msg.sender;\n1510-expression_statement-221-221", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1516 [label="221_ function kill() external onlyContractOwner {\n        selfdestruct(owner);\n    }\n1516-function_definition-222-224", method="kill()", type_label=function_definition];
1519 [label="221_ onlyContractOwner\n1519-expression_statement-222-222", method="kill()", type_label=expression_statement];
1522 [label="222_ selfdestruct(owner);\n1522-expression_statement-223-223", method="kill()", type_label=expression_statement];
1527 [label="224_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1527-function_definition-225-227", method="bug_tmstmp13()", type_label=function_definition];
1536 [label="225_ return block.timestamp >= 1546300800;\n1536-return-226-226", method="bug_tmstmp13()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
64;
183;
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 58  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
45 -> 1582  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1582 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
58 -> 1582  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
83 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
103 -> 110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
110 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 121  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
114 -> 1651  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1651 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 1651  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
150 -> 158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 177  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
166 -> 1703  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1703 -> 183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 1703  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
195 -> 212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
212 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
232 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
269 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 291  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
286 -> 1823  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1823 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 1823  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
291 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
293 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
301 -> 313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
315 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
332 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
352 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
401 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 439  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
432 -> 1969  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1969 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 1969  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
452 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 482  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
469 -> 2006  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2006 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 2006  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
493 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 531  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
524 -> 2061  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2061 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 2061  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
544 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
569 -> 580  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
569 -> 2106  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2106 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 2106  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
586 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 625  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
614 -> 2151  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2151 -> 631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 2151  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
631 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 664  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
651 -> 2188  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2188 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 2188  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
670 -> 675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
774 -> 791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
777 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
791 -> 798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
798 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
801 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
842 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
864 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 875  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
868 -> 2405  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2405 -> 888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 2405  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
888 -> 905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
924 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 945  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
929 -> 2466  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2466 -> 1077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 929  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
945 -> 953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
953 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
980 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 1012  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1005 -> 2542  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2542 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 2542  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1019 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1047 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 942  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1077 -> 1089  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1089 -> 1096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1105 -> 1111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 1145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1145 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 1164  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1153 -> 2690  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2690 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1164 -> 2690  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1170 -> 1184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1184 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1222 -> 1229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1229 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1238 -> 1244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 1250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1287 -> 1292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1292 -> 1297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 1314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1314 -> 1318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1318 -> 1325  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1318 -> 2855  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2855 -> 1338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1325 -> 2855  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1338 -> 1346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1346 -> 1355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1355 -> 1365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1365 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1396 -> 1405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1405 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1411 -> 1421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1437 -> 1445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1445 -> 1456  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1445 -> 2982  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2982 -> 1462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1456 -> 2982  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1462 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1483 -> 1491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1491 -> 1499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1499 -> 1510  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1499 -> 3036  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3036 -> 1516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1510 -> 3036  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1516 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1527 -> 1536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1536 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
