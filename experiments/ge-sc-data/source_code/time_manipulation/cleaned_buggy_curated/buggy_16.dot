digraph  {
13 [label="2_ function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n13-function_definition-3-6", method="mul(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a * b;\n31-expression_statement-4-4", method="mul(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(a == 0 || c / a == b);\n37-expression_statement-5-5", method="mul(uint a,uint b)", type_label=expression_statement];
50 [label="6_ function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n50-function_definition-7-10", method="div(uint a,uint b)", type_label=function_definition];
68 [label="7_ require(b > 0);\n68-expression_statement-8-8", method="div(uint a,uint b)", type_label=expression_statement];
75 [label="8_ c = a / b;\n75-expression_statement-9-9", method="div(uint a,uint b)", type_label=expression_statement];
81 [label="10_ function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n81-function_definition-11-14", method="sub(uint a,uint b)", type_label=function_definition];
99 [label="11_ require(b <= a);\n99-expression_statement-12-12", method="sub(uint a,uint b)", type_label=expression_statement];
106 [label="12_ c = a - b;\n106-expression_statement-13-13", method="sub(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n112-function_definition-15-18", method="add(uint a,uint b)", type_label=function_definition];
130 [label="15_ c = a + b;\n130-expression_statement-16-16", method="add(uint a,uint b)", type_label=expression_statement];
136 [label="16_ require(c >= a);\n136-expression_statement-17-17", method="add(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint256);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ function bug_tmstmp12 () public payable {\n	uint pastBlockTime_tmstmp12;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp12);  \n        pastBlockTime_tmstmp12 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n154-function_definition-22-30", method="bug_tmstmp12()", type_label=function_definition];
159 [label="22_ uint pastBlockTime_tmstmp12;\n159-new_variable-23-23", method="bug_tmstmp12()", type_label=new_variable];
164 [label="23_ require(msg.value == 10 ether);\n164-expression_statement-24-24", method="bug_tmstmp12()", type_label=expression_statement];
174 [label="24_ require(now != pastBlockTime_tmstmp12);\n174-expression_statement-25-25", method="bug_tmstmp12()", type_label=expression_statement];
181 [label="25_ pastBlockTime_tmstmp12 = now;\n181-expression_statement-26-26", method="bug_tmstmp12()", type_label=expression_statement];
185 [label="26_ if_now % 15 == 0\n185-if-27-29", method="bug_tmstmp12()", type_label=if];
2704 [label="26_ end_if", method="bug_tmstmp12()", type_label=end_if];
192 [label="27_ msg.sender.transfer(address(this).balance);\n192-expression_statement-28-28", method="bug_tmstmp12()", type_label=expression_statement];
205 [label="30_ function balanceOf(address tokenOwner) public view returns (uint256 balance);\n205-function_definition-31-31", method="balanceOf(address tokenOwner)", type_label=function_definition];
218 [label="31_ address winner_tmstmp11;\n218-new_variable-32-32", method="", type_label=new_variable];
222 [label="32_ function play_tmstmp11(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp11 = msg.sender;}}\n222-function_definition-33-36", method="play_tmstmp11(uint startTime)", type_label=function_definition];
230 [label="33_ uint _vtime = block.timestamp;\n230-new_variable-34-34", method="play_tmstmp11(uint startTime)", type_label=new_variable];
238 [label="34_ if_startTime + (5 * 1 days) == _vtime\n238-if-35-36", method="play_tmstmp11(uint startTime)", type_label=if];
2757 [label="34_ end_if", method="play_tmstmp11(uint startTime)", type_label=end_if];
249 [label="35_ winner_tmstmp11 = msg.sender;\n249-expression_statement-36-36", method="play_tmstmp11(uint startTime)", type_label=expression_statement];
255 [label="36_ function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\n255-function_definition-37-37", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
272 [label="37_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n272-function_definition-38-40", method="bug_tmstmp1()", type_label=function_definition];
281 [label="38_ return block.timestamp >= 1546300800;\n281-return-39-39", method="bug_tmstmp1()", type_label=return];
287 [label="40_ function transfer(address to, uint256 tokens) public returns (bool success);\n287-function_definition-41-41", method="transfer(address to,uint256 tokens)", type_label=function_definition];
303 [label="41_ address winner_tmstmp2;\n303-new_variable-42-42", method="", type_label=new_variable];
307 [label="42_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n307-function_definition-43-45", method="play_tmstmp2(uint startTime)", type_label=function_definition];
315 [label="43_ if_startTime + (5 * 1 days) == block.timestamp\n315-if-44-45", method="play_tmstmp2(uint startTime)", type_label=if];
2834 [label="43_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
328 [label="44_ winner_tmstmp2 = msg.sender;\n328-expression_statement-45-45", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
334 [label="45_ function approve(address spender, uint256 tokens) public returns (bool success);\n334-function_definition-46-46", method="approve(address spender,uint256 tokens)", type_label=function_definition];
350 [label="46_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n350-function_definition-47-49", method="bug_tmstmp17()", type_label=function_definition];
359 [label="47_ return block.timestamp >= 1546300800;\n359-return-48-48", method="bug_tmstmp17()", type_label=return];
365 [label="49_ function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n365-function_definition-50-50", method="transferFrom(address from,address to,uint256 tokens)", type_label=function_definition];
385 [label="50_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n385-function_definition-51-53", method="bug_tmstmp37()", type_label=function_definition];
394 [label="51_ return block.timestamp >= 1546300800;\n394-return-52-52", method="bug_tmstmp37()", type_label=return];
400 [label="53_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n400-function_definition-54-56", method="bug_tmstmp13()", type_label=function_definition];
409 [label="54_ return block.timestamp >= 1546300800;\n409-return-55-55", method="bug_tmstmp13()", type_label=return];
429 [label="57_ uint256 bugv_tmstmp5 = block.timestamp;\n429-new_variable-58-58", method="", type_label=new_variable];
453 [label="61_ function bug_tmstmp16 () public payable {\n	uint pastBlockTime_tmstmp16;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp16);  \n        pastBlockTime_tmstmp16 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n453-function_definition-62-70", method="bug_tmstmp16()", type_label=function_definition];
458 [label="62_ uint pastBlockTime_tmstmp16;\n458-new_variable-63-63", method="bug_tmstmp16()", type_label=new_variable];
463 [label="63_ require(msg.value == 10 ether);\n463-expression_statement-64-64", method="bug_tmstmp16()", type_label=expression_statement];
473 [label="64_ require(now != pastBlockTime_tmstmp16);\n473-expression_statement-65-65", method="bug_tmstmp16()", type_label=expression_statement];
480 [label="65_ pastBlockTime_tmstmp16 = now;\n480-expression_statement-66-66", method="bug_tmstmp16()", type_label=expression_statement];
484 [label="66_ if_now % 15 == 0\n484-if-67-69", method="bug_tmstmp16()", type_label=if];
3003 [label="66_ end_if", method="bug_tmstmp16()", type_label=end_if];
491 [label="67_ msg.sender.transfer(address(this).balance);\n491-expression_statement-68-68", method="bug_tmstmp16()", type_label=expression_statement];
504 [label="70_ address payable public owner;\n504-new_variable-71-71", method="", type_label=new_variable];
509 [label="71_ uint256 bugv_tmstmp1 = block.timestamp;\n509-new_variable-72-72", method="", type_label=new_variable];
528 [label="74_ owner = msg.sender;\n528-expression_statement-75-75", method="", type_label=expression_statement];
534 [label="76_ address winner_tmstmp3;\n534-new_variable-77-77", method="", type_label=new_variable];
538 [label="77_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n538-function_definition-78-81", method="play_tmstmp3(uint startTime)", type_label=function_definition];
546 [label="78_ uint _vtime = block.timestamp;\n546-new_variable-79-79", method="play_tmstmp3(uint startTime)", type_label=new_variable];
554 [label="79_ if_startTime + (5 * 1 days) == _vtime\n554-if-80-81", method="play_tmstmp3(uint startTime)", type_label=if];
3073 [label="79_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
565 [label="80_ winner_tmstmp3 = msg.sender;\n565-expression_statement-81-81", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
571 [label="81_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n571-expression_statement-82-85", method="", type_label=expression_statement];
574 [label="82_ require(msg.sender == owner);\n574-expression_statement-83-83", method="", type_label=expression_statement];
583 [label="83_ _;\n583-expression_statement-84-84", method="", type_label=expression_statement];
585 [label="85_ function transferOwnership(address payable newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n585-function_definition-86-90", method="transferOwnership(address payable newOwner)", type_label=function_definition];
592 [label="85_ onlyOwner\n592-expression_statement-86-86", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
595 [label="86_ require(newOwner != address(0));\n595-expression_statement-87-87", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
610 [label="88_ owner = newOwner;\n610-expression_statement-89-89", method="transferOwnership(address payable newOwner)", type_label=expression_statement];
614 [label="90_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n614-function_definition-91-93", method="bug_tmstmp9()", type_label=function_definition];
623 [label="91_ return block.timestamp >= 1546300800;\n623-return-92-92", method="bug_tmstmp9()", type_label=return];
643 [label="96_ function bug_tmstmp24 () public payable {\n	uint pastBlockTime_tmstmp24;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp24);  \n        pastBlockTime_tmstmp24 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n643-function_definition-97-105", method="bug_tmstmp24()", type_label=function_definition];
648 [label="97_ uint pastBlockTime_tmstmp24;\n648-new_variable-98-98", method="bug_tmstmp24()", type_label=new_variable];
653 [label="98_ require(msg.value == 10 ether);\n653-expression_statement-99-99", method="bug_tmstmp24()", type_label=expression_statement];
663 [label="99_ require(now != pastBlockTime_tmstmp24);\n663-expression_statement-100-100", method="bug_tmstmp24()", type_label=expression_statement];
670 [label="100_ pastBlockTime_tmstmp24 = now;\n670-expression_statement-101-101", method="bug_tmstmp24()", type_label=expression_statement];
674 [label="101_ if_now % 15 == 0\n674-if-102-104", method="bug_tmstmp24()", type_label=if];
3193 [label="101_ end_if", method="bug_tmstmp24()", type_label=end_if];
681 [label="102_ msg.sender.transfer(address(this).balance);\n681-expression_statement-103-103", method="bug_tmstmp24()", type_label=expression_statement];
694 [label="105_ mapping (address => uint256) balances;\n694-new_variable-106-106", method="", type_label=new_variable];
700 [label="106_ function bug_tmstmp5() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n700-function_definition-107-109", method="bug_tmstmp5()", type_label=function_definition];
709 [label="107_ return block.timestamp >= 1546300800;\n709-return-108-108", method="bug_tmstmp5()", type_label=return];
715 [label="109_ mapping (address => mapping (address => uint256)) allowed;\n715-new_variable-110-110", method="", type_label=new_variable];
723 [label="110_ address winner_tmstmp15;\n723-new_variable-111-111", method="", type_label=new_variable];
727 [label="111_ function play_tmstmp15(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp15 = msg.sender;}}\n727-function_definition-112-115", method="play_tmstmp15(uint startTime)", type_label=function_definition];
735 [label="112_ uint _vtime = block.timestamp;\n735-new_variable-113-113", method="play_tmstmp15(uint startTime)", type_label=new_variable];
743 [label="113_ if_startTime + (5 * 1 days) == _vtime\n743-if-114-115", method="play_tmstmp15(uint startTime)", type_label=if];
3262 [label="113_ end_if", method="play_tmstmp15(uint startTime)", type_label=end_if];
754 [label="114_ winner_tmstmp15 = msg.sender;\n754-expression_statement-115-115", method="play_tmstmp15(uint startTime)", type_label=expression_statement];
760 [label="115_ string public name = \"Exclusive Platform\";\n760-new_variable-116-116", method="", type_label=new_variable];
767 [label="116_ function bug_tmstmp28 () public payable {\n	uint pastBlockTime_tmstmp28;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp28);  \n        pastBlockTime_tmstmp28 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n767-function_definition-117-125", method="bug_tmstmp28()", type_label=function_definition];
772 [label="117_ uint pastBlockTime_tmstmp28;\n772-new_variable-118-118", method="bug_tmstmp28()", type_label=new_variable];
777 [label="118_ require(msg.value == 10 ether);\n777-expression_statement-119-119", method="bug_tmstmp28()", type_label=expression_statement];
787 [label="119_ require(now != pastBlockTime_tmstmp28);\n787-expression_statement-120-120", method="bug_tmstmp28()", type_label=expression_statement];
794 [label="120_ pastBlockTime_tmstmp28 = now;\n794-expression_statement-121-121", method="bug_tmstmp28()", type_label=expression_statement];
798 [label="121_ if_now % 15 == 0\n798-if-122-124", method="bug_tmstmp28()", type_label=if];
3317 [label="121_ end_if", method="bug_tmstmp28()", type_label=end_if];
805 [label="122_ msg.sender.transfer(address(this).balance);\n805-expression_statement-123-123", method="bug_tmstmp28()", type_label=expression_statement];
818 [label="125_ string public symbol = \"XPL\";\n818-new_variable-126-126", method="", type_label=new_variable];
825 [label="126_ address winner_tmstmp34;\n825-new_variable-127-127", method="", type_label=new_variable];
829 [label="127_ function play_tmstmp34(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp34 = msg.sender;}}\n829-function_definition-128-130", method="play_tmstmp34(uint startTime)", type_label=function_definition];
837 [label="128_ if_startTime + (5 * 1 days) == block.timestamp\n837-if-129-130", method="play_tmstmp34(uint startTime)", type_label=if];
3356 [label="128_ end_if", method="play_tmstmp34(uint startTime)", type_label=end_if];
850 [label="129_ winner_tmstmp34 = msg.sender;\n850-expression_statement-130-130", method="play_tmstmp34(uint startTime)", type_label=expression_statement];
856 [label="130_ uint256 public decimals = 8;\n856-new_variable-131-131", method="", type_label=new_variable];
862 [label="131_ function bug_tmstmp21() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n862-function_definition-132-134", method="bug_tmstmp21()", type_label=function_definition];
871 [label="132_ return block.timestamp >= 1546300800;\n871-return-133-133", method="bug_tmstmp21()", type_label=return];
877 [label="134_ uint256 public _totalSupply;\n877-new_variable-135-135", method="", type_label=new_variable];
882 [label="135_ address winner_tmstmp10;\n882-new_variable-136-136", method="", type_label=new_variable];
886 [label="136_ function play_tmstmp10(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp10 = msg.sender;}}\n886-function_definition-137-139", method="play_tmstmp10(uint startTime)", type_label=function_definition];
894 [label="137_ if_startTime + (5 * 1 days) == block.timestamp\n894-if-138-139", method="play_tmstmp10(uint startTime)", type_label=if];
3413 [label="137_ end_if", method="play_tmstmp10(uint startTime)", type_label=end_if];
907 [label="138_ winner_tmstmp10 = msg.sender;\n907-expression_statement-139-139", method="play_tmstmp10(uint startTime)", type_label=expression_statement];
913 [label="139_ uint256 public XPLPerEther = 8000000e8;\n913-new_variable-140-140", method="", type_label=new_variable];
919 [label="140_ uint256 public minimumBuy = 1 ether / 100;\n919-new_variable-141-141", method="", type_label=new_variable];
928 [label="141_ address winner_tmstmp22;\n928-new_variable-142-142", method="", type_label=new_variable];
932 [label="142_ function play_tmstmp22(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp22 = msg.sender;}}\n932-function_definition-143-145", method="play_tmstmp22(uint startTime)", type_label=function_definition];
940 [label="143_ if_startTime + (5 * 1 days) == block.timestamp\n940-if-144-145", method="play_tmstmp22(uint startTime)", type_label=if];
3459 [label="143_ end_if", method="play_tmstmp22(uint startTime)", type_label=end_if];
953 [label="144_ winner_tmstmp22 = msg.sender;\n953-expression_statement-145-145", method="play_tmstmp22(uint startTime)", type_label=expression_statement];
959 [label="145_ bool public crowdsaleIsOn = true;\n959-new_variable-146-146", method="", type_label=new_variable];
966 [label="146_ modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n966-expression_statement-147-150", method="", type_label=expression_statement];
973 [label="147_ assert(msg.data.length >= size + 4);\n973-expression_statement-148-148", method="", type_label=expression_statement];
986 [label="148_ _;\n986-expression_statement-149-149", method="", type_label=expression_statement];
990 [label="151_ _totalSupply = 10000000000e8;\n990-expression_statement-152-152", method="", type_label=expression_statement];
994 [label="152_ balances[owner] = _totalSupply;\n994-expression_statement-153-153", method="", type_label=expression_statement];
1010 [label="155_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1010-function_definition-156-158", method="bug_tmstmp25()", type_label=function_definition];
1019 [label="156_ return block.timestamp >= 1546300800;\n1019-return-157-157", method="bug_tmstmp25()", type_label=return];
1025 [label="158_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1025-function_definition-159-161", method="totalSupply()", type_label=function_definition];
1034 [label="159_ return _totalSupply;\n1034-return-160-160", method="totalSupply()", type_label=return];
1036 [label="161_ address winner_tmstmp19;\n1036-new_variable-162-162", method="", type_label=new_variable];
1040 [label="162_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n1040-function_definition-163-166", method="play_tmstmp19(uint startTime)", type_label=function_definition];
1048 [label="163_ uint _vtime = block.timestamp;\n1048-new_variable-164-164", method="play_tmstmp19(uint startTime)", type_label=new_variable];
1056 [label="164_ if_startTime + (5 * 1 days) == _vtime\n1056-if-165-166", method="play_tmstmp19(uint startTime)", type_label=if];
3575 [label="164_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
1067 [label="165_ winner_tmstmp19 = msg.sender;\n1067-expression_statement-166-166", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
1073 [label="166_ function updateXPLPerEther(uint _XPLPerEther) public onlyOwner {        \n        emit NewPrice(owner, XPLPerEther, _XPLPerEther);\n        XPLPerEther = _XPLPerEther;\n    }\n1073-function_definition-167-170", method="updateXPLPerEther(uint _XPLPerEther)", type_label=function_definition];
1080 [label="166_ onlyOwner\n1080-expression_statement-167-167", method="updateXPLPerEther(uint _XPLPerEther)", type_label=expression_statement];
1091 [label="168_ XPLPerEther = _XPLPerEther;\n1091-expression_statement-169-169", method="updateXPLPerEther(uint _XPLPerEther)", type_label=expression_statement];
1095 [label="170_ address winner_tmstmp26;\n1095-new_variable-171-171", method="", type_label=new_variable];
1099 [label="171_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n1099-function_definition-172-174", method="play_tmstmp26(uint startTime)", type_label=function_definition];
1107 [label="172_ if_startTime + (5 * 1 days) == block.timestamp\n1107-if-173-174", method="play_tmstmp26(uint startTime)", type_label=if];
3626 [label="172_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
1120 [label="173_ winner_tmstmp26 = msg.sender;\n1120-expression_statement-174-174", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
1126 [label="174_ function switchCrowdsale() public onlyOwner {\n        crowdsaleIsOn = !(crowdsaleIsOn);\n    }\n1126-function_definition-175-177", method="switchCrowdsale()", type_label=function_definition];
1129 [label="174_ onlyOwner\n1129-expression_statement-175-175", method="switchCrowdsale()", type_label=expression_statement];
1132 [label="175_ crowdsaleIsOn = !(crowdsaleIsOn);\n1132-expression_statement-176-176", method="switchCrowdsale()", type_label=expression_statement];
1138 [label="177_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1138-function_definition-178-186", method="bug_tmstmp20()", type_label=function_definition];
1143 [label="178_ uint pastBlockTime_tmstmp20;\n1143-new_variable-179-179", method="bug_tmstmp20()", type_label=new_variable];
1148 [label="179_ require(msg.value == 10 ether);\n1148-expression_statement-180-180", method="bug_tmstmp20()", type_label=expression_statement];
1158 [label="180_ require(now != pastBlockTime_tmstmp20);\n1158-expression_statement-181-181", method="bug_tmstmp20()", type_label=expression_statement];
1165 [label="181_ pastBlockTime_tmstmp20 = now;\n1165-expression_statement-182-182", method="bug_tmstmp20()", type_label=expression_statement];
1169 [label="182_ if_now % 15 == 0\n1169-if-183-185", method="bug_tmstmp20()", type_label=if];
3688 [label="182_ end_if", method="bug_tmstmp20()", type_label=end_if];
1176 [label="183_ msg.sender.transfer(address(this).balance);\n1176-expression_statement-184-184", method="bug_tmstmp20()", type_label=expression_statement];
1189 [label="186_ function getBonus(uint256 _amount) internal view returns (uint256) {\n        if (_amount >= XPLPerEther.mul(5)) {\n            return ((20 * _amount).div(100)).add(_amount);  \n        } else if (_amount >= XPLPerEther) {\n            return ((5 * _amount).div(100)).add(_amount);  \n        }\n        return _amount;\n    }\n1189-function_definition-187-194", method="getBonus(uint256 _amount)", type_label=function_definition];
1202 [label="187_ if\n1202-if-188-192", method="getBonus(uint256 _amount)", type_label=if];
3721 [label="187_ end_if", method="getBonus(uint256 _amount)", type_label=end_if];
1212 [label="188_ return ((20 * _amount).div(100)).add(_amount);\n1212-return-189-189", method="getBonus(uint256 _amount)", type_label=return];
1228 [label="189_ if__amount >= XPLPerEther\n1228-if-190-192", method="getBonus(uint256 _amount)", type_label=if];
1233 [label="190_ return ((5 * _amount).div(100)).add(_amount);\n1233-return-191-191", method="getBonus(uint256 _amount)", type_label=return];
1249 [label="192_ return _amount;\n1249-return-193-193", method="getBonus(uint256 _amount)", type_label=return];
1251 [label="194_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1251-function_definition-195-203", method="bug_tmstmp32()", type_label=function_definition];
1256 [label="195_ uint pastBlockTime_tmstmp32;\n1256-new_variable-196-196", method="bug_tmstmp32()", type_label=new_variable];
1261 [label="196_ require(msg.value == 10 ether);\n1261-expression_statement-197-197", method="bug_tmstmp32()", type_label=expression_statement];
1271 [label="197_ require(now != pastBlockTime_tmstmp32);\n1271-expression_statement-198-198", method="bug_tmstmp32()", type_label=expression_statement];
1278 [label="198_ pastBlockTime_tmstmp32 = now;\n1278-expression_statement-199-199", method="bug_tmstmp32()", type_label=expression_statement];
1282 [label="199_ if_now % 15 == 0\n1282-if-200-202", method="bug_tmstmp32()", type_label=if];
3801 [label="199_ end_if", method="bug_tmstmp32()", type_label=end_if];
1289 [label="200_ msg.sender.transfer(address(this).balance);\n1289-expression_statement-201-201", method="bug_tmstmp32()", type_label=expression_statement];
1306 [label="204_ require(crowdsaleIsOn && msg.value >= minimumBuy);\n1306-expression_statement-205-205", method="", type_label=expression_statement];
1317 [label="205_ uint256 totalBuy =  (XPLPerEther.mul(msg.value)).div(1 ether);\n1317-new_variable-206-206", method="", type_label=new_variable];
1337 [label="206_ totalBuy = getBonus(totalBuy);\n1337-expression_statement-207-207", method="", type_label=expression_statement];
1344 [label="207_ doTransfer(owner, msg.sender, totalBuy);\n1344-expression_statement-208-208", method="", type_label=expression_statement];
1355 [label="209_ address winner_tmstmp38;\n1355-new_variable-210-210", method="", type_label=new_variable];
1359 [label="210_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n1359-function_definition-211-213", method="play_tmstmp38(uint startTime)", type_label=function_definition];
1367 [label="211_ if_startTime + (5 * 1 days) == block.timestamp\n1367-if-212-213", method="play_tmstmp38(uint startTime)", type_label=if];
3886 [label="211_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
1380 [label="212_ winner_tmstmp38 = msg.sender;\n1380-expression_statement-213-213", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
1386 [label="213_ function distribute(address[] calldata _addresses, uint256 _amount) external {        \n        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amount);}\n    }\n1386-function_definition-214-216", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=function_definition];
1399 [label="214_ for(i < _addresses.length;;i++)\n1399-for-215-215", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=for];
3918 [label="214_ end_loop", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=end_loop];
1412 [label="214_ i++\n1412-expression_statement-215-215", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=expression_statement];
1415 [label="214_ transfer(_addresses[i], _amount);\n1415-expression_statement-215-215", method="distribute(address[] calldata _addresses,uint256 _amount)", type_label=expression_statement];
1424 [label="216_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1424-function_definition-217-225", method="bug_tmstmp4()", type_label=function_definition];
1429 [label="217_ uint pastBlockTime_tmstmp4;\n1429-new_variable-218-218", method="bug_tmstmp4()", type_label=new_variable];
1434 [label="218_ require(msg.value == 10 ether);\n1434-expression_statement-219-219", method="bug_tmstmp4()", type_label=expression_statement];
1444 [label="219_ require(now != pastBlockTime_tmstmp4);\n1444-expression_statement-220-220", method="bug_tmstmp4()", type_label=expression_statement];
1451 [label="220_ pastBlockTime_tmstmp4 = now;\n1451-expression_statement-221-221", method="bug_tmstmp4()", type_label=expression_statement];
1455 [label="221_ if_now % 15 == 0\n1455-if-222-224", method="bug_tmstmp4()", type_label=if];
3974 [label="221_ end_if", method="bug_tmstmp4()", type_label=end_if];
1462 [label="222_ msg.sender.transfer(address(this).balance);\n1462-expression_statement-223-223", method="bug_tmstmp4()", type_label=expression_statement];
1475 [label="225_ function distributeWithAmount(address[] calldata _addresses, uint256[] calldata _amounts) external {\n        require(_addresses.length == _amounts.length);\n        for (uint i = 0; i < _addresses.length; i++) {transfer(_addresses[i], _amounts[i]);}\n    }\n1475-function_definition-226-229", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=function_definition];
1489 [label="226_ require(_addresses.length == _amounts.length);\n1489-expression_statement-227-227", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
1500 [label="227_ for(i < _addresses.length;;i++)\n1500-for-228-228", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=for];
4019 [label="227_ end_loop", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=end_loop];
1513 [label="227_ i++\n1513-expression_statement-228-228", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
1516 [label="227_ transfer(_addresses[i], _amounts[i]);\n1516-expression_statement-228-228", method="distributeWithAmount(address[] calldata _addresses,uint256[] calldata _amounts)", type_label=expression_statement];
1527 [label="229_ address winner_tmstmp7;\n1527-new_variable-230-230", method="", type_label=new_variable];
1531 [label="230_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n1531-function_definition-231-234", method="play_tmstmp7(uint startTime)", type_label=function_definition];
1539 [label="231_ uint _vtime = block.timestamp;\n1539-new_variable-232-232", method="play_tmstmp7(uint startTime)", type_label=new_variable];
1547 [label="232_ if_startTime + (5 * 1 days) == _vtime\n1547-if-233-234", method="play_tmstmp7(uint startTime)", type_label=if];
4066 [label="232_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
1558 [label="233_ winner_tmstmp7 = msg.sender;\n1558-expression_statement-234-234", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
1564 [label="234_ function doTransfer(address _from, address _to, uint _amount) internal {\n        require((_to != address(0)));\n        require(_amount <= balances[_from]);\n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n    }\n1564-function_definition-235-241", method="doTransfer(address _from,address _to,uint _amount)", type_label=function_definition];
1580 [label="235_ require((_to != address(0)));\n1580-expression_statement-236-236", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1590 [label="236_ require(_amount <= balances[_from]);\n1590-expression_statement-237-237", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1599 [label="237_ balances[_from] = balances[_from].sub(_amount);\n1599-expression_statement-238-238", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1612 [label="238_ balances[_to] = balances[_to].add(_amount);\n1612-expression_statement-239-239", method="doTransfer(address _from,address _to,uint _amount)", type_label=expression_statement];
1633 [label="241_ address winner_tmstmp23;\n1633-new_variable-242-242", method="", type_label=new_variable];
1637 [label="242_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n1637-function_definition-243-246", method="play_tmstmp23(uint startTime)", type_label=function_definition];
1645 [label="243_ uint _vtime = block.timestamp;\n1645-new_variable-244-244", method="play_tmstmp23(uint startTime)", type_label=new_variable];
1653 [label="244_ if_startTime + (5 * 1 days) == _vtime\n1653-if-245-246", method="play_tmstmp23(uint startTime)", type_label=if];
4172 [label="244_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
1664 [label="245_ winner_tmstmp23 = msg.sender;\n1664-expression_statement-246-246", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
1670 [label="246_ function balanceOf(address _owner) view public returns (uint256) {\n        return balances[_owner];\n    }\n1670-function_definition-247-249", method="balanceOf(address _owner)", type_label=function_definition];
1683 [label="247_ return balances[_owner];\n1683-return-248-248", method="balanceOf(address _owner)", type_label=return];
1687 [label="249_ address winner_tmstmp14;\n1687-new_variable-250-250", method="", type_label=new_variable];
1691 [label="250_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n1691-function_definition-251-253", method="play_tmstmp14(uint startTime)", type_label=function_definition];
1699 [label="251_ if_startTime + (5 * 1 days) == block.timestamp\n1699-if-252-253", method="play_tmstmp14(uint startTime)", type_label=if];
4218 [label="251_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
1712 [label="252_ winner_tmstmp14 = msg.sender;\n1712-expression_statement-253-253", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
1718 [label="253_ function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        doTransfer(msg.sender, _to, _amount);\n        return true;\n    }\n1718-function_definition-254-257", method="transfer(address _to,uint256 _amount)", type_label=function_definition];
1728 [label="253_ onlyPayloadSize(2 * 32)\n1728-expression_statement-254-254", method="transfer(address _to,uint256 _amount)", type_label=expression_statement];
1741 [label="254_ doTransfer(msg.sender, _to, _amount);\n1741-expression_statement-255-255", method="transfer(address _to,uint256 _amount)", type_label=expression_statement];
1752 [label="255_ return true;\n1752-return-256-256", method="transfer(address _to,uint256 _amount)", type_label=return];
1755 [label="257_ address winner_tmstmp30;\n1755-new_variable-258-258", method="", type_label=new_variable];
1759 [label="258_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n1759-function_definition-259-261", method="play_tmstmp30(uint startTime)", type_label=function_definition];
1767 [label="259_ if_startTime + (5 * 1 days) == block.timestamp\n1767-if-260-261", method="play_tmstmp30(uint startTime)", type_label=if];
4286 [label="259_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
1780 [label="260_ winner_tmstmp30 = msg.sender;\n1780-expression_statement-261-261", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
1786 [label="261_ function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(allowed[_from][msg.sender] >= _amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        doTransfer(_from, _to, _amount);\n        return true;\n    }\n1786-function_definition-262-267", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=function_definition];
1800 [label="261_ onlyPayloadSize(3 * 32)\n1800-expression_statement-262-262", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1813 [label="262_ require(allowed[_from][msg.sender] >= _amount);\n1813-expression_statement-263-263", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1826 [label="263_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n1826-expression_statement-264-264", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1847 [label="264_ doTransfer(_from, _to, _amount);\n1847-expression_statement-265-265", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=expression_statement];
1856 [label="265_ return true;\n1856-return-266-266", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=return];
1859 [label="267_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1859-function_definition-268-276", method="bug_tmstmp8()", type_label=function_definition];
1864 [label="268_ uint pastBlockTime_tmstmp8;\n1864-new_variable-269-269", method="bug_tmstmp8()", type_label=new_variable];
1869 [label="269_ require(msg.value == 10 ether);\n1869-expression_statement-270-270", method="bug_tmstmp8()", type_label=expression_statement];
1879 [label="270_ require(now != pastBlockTime_tmstmp8);\n1879-expression_statement-271-271", method="bug_tmstmp8()", type_label=expression_statement];
1886 [label="271_ pastBlockTime_tmstmp8 = now;\n1886-expression_statement-272-272", method="bug_tmstmp8()", type_label=expression_statement];
1890 [label="272_ if_now % 15 == 0\n1890-if-273-275", method="bug_tmstmp8()", type_label=if];
4409 [label="272_ end_if", method="bug_tmstmp8()", type_label=end_if];
1897 [label="273_ msg.sender.transfer(address(this).balance);\n1897-expression_statement-274-274", method="bug_tmstmp8()", type_label=expression_statement];
1910 [label="276_ function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n1910-function_definition-277-282", method="approve(address _spender,uint256 _amount)", type_label=function_definition];
1927 [label="277_ require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n1927-expression_statement-278-278", method="approve(address _spender,uint256 _amount)", type_label=expression_statement];
1946 [label="278_ allowed[msg.sender][_spender] = _amount;\n1946-expression_statement-279-279", method="approve(address _spender,uint256 _amount)", type_label=expression_statement];
1966 [label="280_ return true;\n1966-return-281-281", method="approve(address _spender,uint256 _amount)", type_label=return];
1969 [label="282_ address winner_tmstmp39;\n1969-new_variable-283-283", method="", type_label=new_variable];
1973 [label="283_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1973-function_definition-284-287", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1981 [label="284_ uint _vtime = block.timestamp;\n1981-new_variable-285-285", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1989 [label="285_ if_startTime + (5 * 1 days) == _vtime\n1989-if-286-287", method="play_tmstmp39(uint startTime)", type_label=if];
4508 [label="285_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
2000 [label="286_ winner_tmstmp39 = msg.sender;\n2000-expression_statement-287-287", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
2006 [label="287_ function allowance(address _owner, address _spender) view public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n2006-function_definition-288-290", method="allowance(address _owner,address _spender)", type_label=function_definition];
2023 [label="288_ return allowed[_owner][_spender];\n2023-return-289-289", method="allowance(address _owner,address _spender)", type_label=return];
2029 [label="290_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n2029-function_definition-291-299", method="bug_tmstmp36()", type_label=function_definition];
2034 [label="291_ uint pastBlockTime_tmstmp36;\n2034-new_variable-292-292", method="bug_tmstmp36()", type_label=new_variable];
2039 [label="292_ require(msg.value == 10 ether);\n2039-expression_statement-293-293", method="bug_tmstmp36()", type_label=expression_statement];
2049 [label="293_ require(now != pastBlockTime_tmstmp36);\n2049-expression_statement-294-294", method="bug_tmstmp36()", type_label=expression_statement];
2056 [label="294_ pastBlockTime_tmstmp36 = now;\n2056-expression_statement-295-295", method="bug_tmstmp36()", type_label=expression_statement];
2060 [label="295_ if_now % 15 == 0\n2060-if-296-298", method="bug_tmstmp36()", type_label=if];
4579 [label="295_ end_if", method="bug_tmstmp36()", type_label=end_if];
2067 [label="296_ msg.sender.transfer(address(this).balance);\n2067-expression_statement-297-297", method="bug_tmstmp36()", type_label=expression_statement];
2080 [label="299_ function transferEther(address payable _receiver, uint256 _amount) public onlyOwner {\n        require(_amount <= address(this).balance);\n        emit TransferEther(address(this), _receiver, _amount);\n        _receiver.transfer(_amount);\n    }\n2080-function_definition-300-304", method="transferEther(address payable _receiver,uint256 _amount)", type_label=function_definition];
2091 [label="299_ onlyOwner\n2091-expression_statement-300-300", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
2094 [label="300_ require(_amount <= address(this).balance);\n2094-expression_statement-301-301", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
2115 [label="302_ _receiver.transfer(_amount);\n2115-expression_statement-303-303", method="transferEther(address payable _receiver,uint256 _amount)", type_label=expression_statement];
2122 [label="304_ address winner_tmstmp35;\n2122-new_variable-305-305", method="", type_label=new_variable];
2126 [label="305_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n2126-function_definition-306-309", method="play_tmstmp35(uint startTime)", type_label=function_definition];
2134 [label="306_ uint _vtime = block.timestamp;\n2134-new_variable-307-307", method="play_tmstmp35(uint startTime)", type_label=new_variable];
2142 [label="307_ if_startTime + (5 * 1 days) == _vtime\n2142-if-308-309", method="play_tmstmp35(uint startTime)", type_label=if];
4661 [label="307_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
2153 [label="308_ winner_tmstmp35 = msg.sender;\n2153-expression_statement-309-309", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
2159 [label="309_ function withdrawFund() onlyOwner public {\n        uint256 balance = address(this).balance;\n        owner.transfer(balance);\n    }\n2159-function_definition-310-313", method="withdrawFund()", type_label=function_definition];
2161 [label="309_ onlyOwner\n2161-expression_statement-310-310", method="withdrawFund()", type_label=expression_statement];
2165 [label="310_ uint256 balance = address(this).balance;\n2165-new_variable-311-311", method="withdrawFund()", type_label=new_variable];
2175 [label="311_ owner.transfer(balance);\n2175-expression_statement-312-312", method="withdrawFund()", type_label=expression_statement];
2182 [label="313_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n2182-function_definition-314-322", method="bug_tmstmp40()", type_label=function_definition];
2187 [label="314_ uint pastBlockTime_tmstmp40;\n2187-new_variable-315-315", method="bug_tmstmp40()", type_label=new_variable];
2192 [label="315_ require(msg.value == 10 ether);\n2192-expression_statement-316-316", method="bug_tmstmp40()", type_label=expression_statement];
2202 [label="316_ require(now != pastBlockTime_tmstmp40);\n2202-expression_statement-317-317", method="bug_tmstmp40()", type_label=expression_statement];
2209 [label="317_ pastBlockTime_tmstmp40 = now;\n2209-expression_statement-318-318", method="bug_tmstmp40()", type_label=expression_statement];
2213 [label="318_ if_now % 15 == 0\n2213-if-319-321", method="bug_tmstmp40()", type_label=if];
4732 [label="318_ end_if", method="bug_tmstmp40()", type_label=end_if];
2220 [label="319_ msg.sender.transfer(address(this).balance);\n2220-expression_statement-320-320", method="bug_tmstmp40()", type_label=expression_statement];
2233 [label="322_ function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }\n2233-function_definition-323-329", method="burn(uint256 _value)", type_label=function_definition];
2239 [label="322_ onlyOwner\n2239-expression_statement-323-323", method="burn(uint256 _value)", type_label=expression_statement];
2243 [label="323_ require(_value <= balances[msg.sender]);\n2243-expression_statement-324-324", method="burn(uint256 _value)", type_label=expression_statement];
2254 [label="324_ address burner = msg.sender;\n2254-new_variable-325-325", method="burn(uint256 _value)", type_label=new_variable];
2262 [label="325_ balances[burner] = balances[burner].sub(_value);\n2262-expression_statement-326-326", method="burn(uint256 _value)", type_label=expression_statement];
2275 [label="326_ _totalSupply = _totalSupply.sub(_value);\n2275-expression_statement-327-327", method="burn(uint256 _value)", type_label=expression_statement];
2290 [label="329_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2290-function_definition-330-332", method="bug_tmstmp33()", type_label=function_definition];
2299 [label="330_ return block.timestamp >= 1546300800;\n2299-return-331-331", method="bug_tmstmp33()", type_label=return];
2305 [label="332_ function getForeignTokenBalance(address tokenAddress, address who) view public returns (uint){\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        uint bal = token.balanceOf(who);\n        return bal;\n    }\n2305-function_definition-333-337", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=function_definition];
2322 [label="333_ ERC20Interface token = ERC20Interface(tokenAddress);\n2322-new_variable-334-334", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=new_variable];
2332 [label="334_ uint bal = token.balanceOf(who);\n2332-new_variable-335-335", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=new_variable];
2343 [label="335_ return bal;\n2343-return-336-336", method="getForeignTokenBalance(address tokenAddress,address who)", type_label=return];
2345 [label="337_ address winner_tmstmp27;\n2345-new_variable-338-338", method="", type_label=new_variable];
2349 [label="338_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n2349-function_definition-339-342", method="play_tmstmp27(uint startTime)", type_label=function_definition];
2357 [label="339_ uint _vtime = block.timestamp;\n2357-new_variable-340-340", method="play_tmstmp27(uint startTime)", type_label=new_variable];
2365 [label="340_ if_startTime + (5 * 1 days) == _vtime\n2365-if-341-342", method="play_tmstmp27(uint startTime)", type_label=if];
4884 [label="340_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
2376 [label="341_ winner_tmstmp27 = msg.sender;\n2376-expression_statement-342-342", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
2382 [label="342_ function withdrawForeignTokens(address tokenAddress) onlyOwner public returns (bool) {\n        ERC20Interface token = ERC20Interface(tokenAddress);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n2382-function_definition-343-347", method="withdrawForeignTokens(address tokenAddress)", type_label=function_definition];
2388 [label="342_ onlyOwner\n2388-expression_statement-343-343", method="withdrawForeignTokens(address tokenAddress)", type_label=expression_statement];
2396 [label="343_ ERC20Interface token = ERC20Interface(tokenAddress);\n2396-new_variable-344-344", method="withdrawForeignTokens(address tokenAddress)", type_label=new_variable];
2406 [label="344_ uint256 amount = token.balanceOf(address(this));\n2406-new_variable-345-345", method="withdrawForeignTokens(address tokenAddress)", type_label=new_variable];
2419 [label="345_ return token.transfer(owner, amount);\n2419-return-346-346", method="withdrawForeignTokens(address tokenAddress)", type_label=return];
2428 [label="347_ address winner_tmstmp31;\n2428-new_variable-348-348", method="", type_label=new_variable];
2432 [label="348_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n2432-function_definition-349-352", method="play_tmstmp31(uint startTime)", type_label=function_definition];
2440 [label="349_ uint _vtime = block.timestamp;\n2440-new_variable-350-350", method="play_tmstmp31(uint startTime)", type_label=new_variable];
2448 [label="350_ if_startTime + (5 * 1 days) == _vtime\n2448-if-351-352", method="play_tmstmp31(uint startTime)", type_label=if];
4967 [label="350_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
2459 [label="351_ winner_tmstmp31 = msg.sender;\n2459-expression_statement-352-352", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
2465 [label="352_ uint256 bugv_tmstmp2 = block.timestamp;\n2465-new_variable-353-353", method="", type_label=new_variable];
2486 [label="354_ uint256 bugv_tmstmp3 = block.timestamp;\n2486-new_variable-355-355", method="", type_label=new_variable];
2507 [label="356_ uint256 bugv_tmstmp4 = block.timestamp;\n2507-new_variable-357-357", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1302;
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 192  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
185 -> 2704  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2704 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 2704  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
222 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 249  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
238 -> 2757  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2757 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 2757  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
272 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
281 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
307 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 328  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
315 -> 2834  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2834 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
328 -> 2834  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
350 -> 359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
385 -> 394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
394 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
400 -> 409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
409 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
453 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 491  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
484 -> 3003  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3003 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 3003  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
504 -> 509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
538 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 565  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
554 -> 3073  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3073 -> 571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 3073  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
574 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
623 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
643 -> 648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
648 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 681  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
674 -> 3193  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3193 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 3193  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
700 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
715 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 754  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
743 -> 3262  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3262 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
754 -> 3262  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
767 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
777 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
794 -> 798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
798 -> 805  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
798 -> 3317  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3317 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 3317  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
818 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 850  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
837 -> 3356  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3356 -> 856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 3356  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
862 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
877 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
894 -> 907  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
894 -> 3413  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3413 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 3413  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
913 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 953  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
940 -> 3459  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3459 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
953 -> 3459  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
959 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
990 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1010 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1025 -> 1034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1040 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1067  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1056 -> 3575  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3575 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 3575  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1073 -> 1091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1120  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1107 -> 3626  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3626 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1120 -> 3626  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1126 -> 1132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1143 -> 1148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1148 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1169 -> 1176  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1169 -> 3688  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3688 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 3688  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1189 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1202 -> 1212  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1202 -> 1228  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3721 -> 1249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 3721  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1212 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1228 -> 1233  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1228 -> 3721  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1233 -> 3721  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1233 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1249 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1251 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1261 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 1278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1278 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1282 -> 1289  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1282 -> 3801  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3801 -> 1302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1289 -> 3801  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1306 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1317 -> 1337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1337 -> 1344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1359 -> 1367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1367 -> 1380  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1367 -> 3886  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3886 -> 1386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 3886  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1386 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1415  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1399 -> 3918  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3918 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1412 -> 1399  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1415 -> 1412  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1424 -> 1429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1434 -> 1444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1444 -> 1451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1451 -> 1455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1455 -> 1462  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1455 -> 3974  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3974 -> 1475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1462 -> 3974  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1475 -> 1489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1489 -> 1500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1500 -> 1516  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1500 -> 4019  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4019 -> 1527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 1500  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1516 -> 1513  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1531 -> 1539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1539 -> 1547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 1558  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1547 -> 4066  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4066 -> 1564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1558 -> 4066  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1564 -> 1580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1580 -> 1590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1590 -> 1599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1599 -> 1612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1637 -> 1645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1645 -> 1653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1664  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1653 -> 4172  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4172 -> 1670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1664 -> 4172  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1670 -> 1683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1683 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1691 -> 1699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1699 -> 1712  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1699 -> 4218  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4218 -> 1718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1712 -> 4218  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1718 -> 1741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1741 -> 1752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1752 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1759 -> 1767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1767 -> 1780  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1767 -> 4286  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4286 -> 1786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1780 -> 4286  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1786 -> 1813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1813 -> 1826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1826 -> 1847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1847 -> 1856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1856 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1859 -> 1864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1864 -> 1869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1869 -> 1879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1879 -> 1886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1886 -> 1890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1890 -> 1897  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1890 -> 4409  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4409 -> 1910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1897 -> 4409  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1910 -> 1927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1927 -> 1946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1966 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1973 -> 1981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1981 -> 1989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1989 -> 2000  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1989 -> 4508  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4508 -> 2006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2000 -> 4508  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2006 -> 2023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2023 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2029 -> 2034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2034 -> 2039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2039 -> 2049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2049 -> 2056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2056 -> 2060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2060 -> 2067  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2060 -> 4579  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4579 -> 2080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2067 -> 4579  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2080 -> 2094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2126 -> 2134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2134 -> 2142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2142 -> 2153  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2142 -> 4661  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4661 -> 2159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2153 -> 4661  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2159 -> 2165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2165 -> 2175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2182 -> 2187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2187 -> 2192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2192 -> 2202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2202 -> 2209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2209 -> 2213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2213 -> 2220  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2213 -> 4732  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4732 -> 2233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2220 -> 4732  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2233 -> 2243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2243 -> 2254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2254 -> 2262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2262 -> 2275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2290 -> 2299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2299 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2305 -> 2322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2322 -> 2332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2332 -> 2343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2343 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2349 -> 2357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2357 -> 2365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2365 -> 2376  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2365 -> 4884  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4884 -> 2382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2376 -> 4884  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2382 -> 2396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2396 -> 2406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2406 -> 2419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2419 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2432 -> 2440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2440 -> 2448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2448 -> 2459  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2448 -> 4967  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4967 -> 2465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2459 -> 4967  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
