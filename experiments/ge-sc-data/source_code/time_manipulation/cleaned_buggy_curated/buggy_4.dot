digraph  {
15 [label="2_ function totalSupply() external view returns (uint256);\n15-function_definition-3-3", method="totalSupply()", type_label=function_definition];
23 [label="3_ function balanceOf(address who) external view returns (uint256);\n23-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
35 [label="4_ function transfer(address to, uint256 value) external returns (bool);\n35-function_definition-5-5", method="transfer(address to,uint256 value)", type_label=function_definition];
70 [label="8_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n70-function_definition-9-17", method="bug_tmstmp4()", type_label=function_definition];
75 [label="9_ uint pastBlockTime_tmstmp4;\n75-new_variable-10-10", method="bug_tmstmp4()", type_label=new_variable];
80 [label="10_ require(msg.value == 10 ether);\n80-expression_statement-11-11", method="bug_tmstmp4()", type_label=expression_statement];
90 [label="11_ require(now != pastBlockTime_tmstmp4);\n90-expression_statement-12-12", method="bug_tmstmp4()", type_label=expression_statement];
97 [label="12_ pastBlockTime_tmstmp4 = now;\n97-expression_statement-13-13", method="bug_tmstmp4()", type_label=expression_statement];
101 [label="13_ if_now % 15 == 0\n101-if-14-16", method="bug_tmstmp4()", type_label=if];
1160 [label="13_ end_if", method="bug_tmstmp4()", type_label=end_if];
108 [label="14_ msg.sender.transfer(address(this).balance);\n108-expression_statement-15-15", method="bug_tmstmp4()", type_label=expression_statement];
121 [label="17_ string public name = \"PHO\";\n121-new_variable-18-18", method="", type_label=new_variable];
128 [label="18_ address winner_tmstmp7;\n128-new_variable-19-19", method="", type_label=new_variable];
132 [label="19_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n132-function_definition-20-23", method="play_tmstmp7(uint startTime)", type_label=function_definition];
140 [label="20_ uint _vtime = block.timestamp;\n140-new_variable-21-21", method="play_tmstmp7(uint startTime)", type_label=new_variable];
148 [label="21_ if_startTime + (5 * 1 days) == _vtime\n148-if-22-23", method="play_tmstmp7(uint startTime)", type_label=if];
1207 [label="21_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
159 [label="22_ winner_tmstmp7 = msg.sender;\n159-expression_statement-23-23", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
165 [label="23_ string public symbol = \"PHO\";\n165-new_variable-24-24", method="", type_label=new_variable];
172 [label="24_ address winner_tmstmp23;\n172-new_variable-25-25", method="", type_label=new_variable];
176 [label="25_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n176-function_definition-26-29", method="play_tmstmp23(uint startTime)", type_label=function_definition];
184 [label="26_ uint _vtime = block.timestamp;\n184-new_variable-27-27", method="play_tmstmp23(uint startTime)", type_label=new_variable];
192 [label="27_ if_startTime + (5 * 1 days) == _vtime\n192-if-28-29", method="play_tmstmp23(uint startTime)", type_label=if];
1251 [label="27_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
203 [label="28_ winner_tmstmp23 = msg.sender;\n203-expression_statement-29-29", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
209 [label="29_ uint8 public decimals = 18;\n209-new_variable-30-30", method="", type_label=new_variable];
215 [label="30_ address winner_tmstmp14;\n215-new_variable-31-31", method="", type_label=new_variable];
219 [label="31_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n219-function_definition-32-34", method="play_tmstmp14(uint startTime)", type_label=function_definition];
227 [label="32_ if_startTime + (5 * 1 days) == block.timestamp\n227-if-33-34", method="play_tmstmp14(uint startTime)", type_label=if];
1286 [label="32_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
240 [label="33_ winner_tmstmp14 = msg.sender;\n240-expression_statement-34-34", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
246 [label="34_ uint256 saleAmount;\n246-new_variable-35-35", method="", type_label=new_variable];
250 [label="35_ address winner_tmstmp30;\n250-new_variable-36-36", method="", type_label=new_variable];
254 [label="36_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n254-function_definition-37-39", method="play_tmstmp30(uint startTime)", type_label=function_definition];
262 [label="37_ if_startTime + (5 * 1 days) == block.timestamp\n262-if-38-39", method="play_tmstmp30(uint startTime)", type_label=if];
1321 [label="37_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
275 [label="38_ winner_tmstmp30 = msg.sender;\n275-expression_statement-39-39", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
281 [label="39_ uint256 evtAmount;\n281-new_variable-40-40", method="", type_label=new_variable];
285 [label="40_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n285-function_definition-41-49", method="bug_tmstmp8()", type_label=function_definition];
290 [label="41_ uint pastBlockTime_tmstmp8;\n290-new_variable-42-42", method="bug_tmstmp8()", type_label=new_variable];
295 [label="42_ require(msg.value == 10 ether);\n295-expression_statement-43-43", method="bug_tmstmp8()", type_label=expression_statement];
305 [label="43_ require(now != pastBlockTime_tmstmp8);\n305-expression_statement-44-44", method="bug_tmstmp8()", type_label=expression_statement];
312 [label="44_ pastBlockTime_tmstmp8 = now;\n312-expression_statement-45-45", method="bug_tmstmp8()", type_label=expression_statement];
316 [label="45_ if_now % 15 == 0\n316-if-46-48", method="bug_tmstmp8()", type_label=if];
1375 [label="45_ end_if", method="bug_tmstmp8()", type_label=end_if];
323 [label="46_ msg.sender.transfer(address(this).balance);\n323-expression_statement-47-47", method="bug_tmstmp8()", type_label=expression_statement];
336 [label="49_ uint256 teamAmount;\n336-new_variable-50-50", method="", type_label=new_variable];
340 [label="50_ address winner_tmstmp39;\n340-new_variable-51-51", method="", type_label=new_variable];
344 [label="51_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n344-function_definition-52-55", method="play_tmstmp39(uint startTime)", type_label=function_definition];
352 [label="52_ uint _vtime = block.timestamp;\n352-new_variable-53-53", method="play_tmstmp39(uint startTime)", type_label=new_variable];
360 [label="53_ if_startTime + (5 * 1 days) == _vtime\n360-if-54-55", method="play_tmstmp39(uint startTime)", type_label=if];
1419 [label="53_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
371 [label="54_ winner_tmstmp39 = msg.sender;\n371-expression_statement-55-55", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
377 [label="55_ uint256 _totalSupply;\n377-new_variable-56-56", method="", type_label=new_variable];
381 [label="56_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n381-function_definition-57-65", method="bug_tmstmp36()", type_label=function_definition];
386 [label="57_ uint pastBlockTime_tmstmp36;\n386-new_variable-58-58", method="bug_tmstmp36()", type_label=new_variable];
391 [label="58_ require(msg.value == 10 ether);\n391-expression_statement-59-59", method="bug_tmstmp36()", type_label=expression_statement];
401 [label="59_ require(now != pastBlockTime_tmstmp36);\n401-expression_statement-60-60", method="bug_tmstmp36()", type_label=expression_statement];
408 [label="60_ pastBlockTime_tmstmp36 = now;\n408-expression_statement-61-61", method="bug_tmstmp36()", type_label=expression_statement];
412 [label="61_ if_now % 15 == 0\n412-if-62-64", method="bug_tmstmp36()", type_label=if];
1471 [label="61_ end_if", method="bug_tmstmp36()", type_label=end_if];
419 [label="62_ msg.sender.transfer(address(this).balance);\n419-expression_statement-63-63", method="bug_tmstmp36()", type_label=expression_statement];
432 [label="65_ mapping(address => uint256) balances;\n432-new_variable-66-66", method="", type_label=new_variable];
438 [label="66_ address winner_tmstmp35;\n438-new_variable-67-67", method="", type_label=new_variable];
442 [label="67_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n442-function_definition-68-71", method="play_tmstmp35(uint startTime)", type_label=function_definition];
450 [label="68_ uint _vtime = block.timestamp;\n450-new_variable-69-69", method="play_tmstmp35(uint startTime)", type_label=new_variable];
458 [label="69_ if_startTime + (5 * 1 days) == _vtime\n458-if-70-71", method="play_tmstmp35(uint startTime)", type_label=if];
1517 [label="69_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
469 [label="70_ winner_tmstmp35 = msg.sender;\n469-expression_statement-71-71", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
475 [label="71_ address public owner;\n475-new_variable-72-72", method="", type_label=new_variable];
480 [label="72_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n480-function_definition-73-81", method="bug_tmstmp40()", type_label=function_definition];
485 [label="73_ uint pastBlockTime_tmstmp40;\n485-new_variable-74-74", method="bug_tmstmp40()", type_label=new_variable];
490 [label="74_ require(msg.value == 10 ether);\n490-expression_statement-75-75", method="bug_tmstmp40()", type_label=expression_statement];
500 [label="75_ require(now != pastBlockTime_tmstmp40);\n500-expression_statement-76-76", method="bug_tmstmp40()", type_label=expression_statement];
507 [label="76_ pastBlockTime_tmstmp40 = now;\n507-expression_statement-77-77", method="bug_tmstmp40()", type_label=expression_statement];
511 [label="77_ if_now % 15 == 0\n511-if-78-80", method="bug_tmstmp40()", type_label=if];
1570 [label="77_ end_if", method="bug_tmstmp40()", type_label=end_if];
518 [label="78_ msg.sender.transfer(address(this).balance);\n518-expression_statement-79-79", method="bug_tmstmp40()", type_label=expression_statement];
531 [label="81_ address public sale;\n531-new_variable-82-82", method="", type_label=new_variable];
536 [label="82_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n536-function_definition-83-85", method="bug_tmstmp33()", type_label=function_definition];
545 [label="83_ return block.timestamp >= 1546300800;\n545-return-84-84", method="bug_tmstmp33()", type_label=return];
551 [label="85_ address public evt;\n551-new_variable-86-86", method="", type_label=new_variable];
556 [label="86_ address winner_tmstmp27;\n556-new_variable-87-87", method="", type_label=new_variable];
560 [label="87_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n560-function_definition-88-91", method="play_tmstmp27(uint startTime)", type_label=function_definition];
568 [label="88_ uint _vtime = block.timestamp;\n568-new_variable-89-89", method="play_tmstmp27(uint startTime)", type_label=new_variable];
576 [label="89_ if_startTime + (5 * 1 days) == _vtime\n576-if-90-91", method="play_tmstmp27(uint startTime)", type_label=if];
1635 [label="89_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
587 [label="90_ winner_tmstmp27 = msg.sender;\n587-expression_statement-91-91", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
593 [label="91_ address public team;\n593-new_variable-92-92", method="", type_label=new_variable];
598 [label="92_ modifier isOwner {\n        require(owner == msg.sender);\n        _;\n    }\n598-expression_statement-93-96", method="", type_label=expression_statement];
601 [label="93_ require(owner == msg.sender);\n601-expression_statement-94-94", method="", type_label=expression_statement];
610 [label="94_ _;\n610-expression_statement-95-95", method="", type_label=expression_statement];
612 [label="96_ uint256 bugv_tmstmp4 = block.timestamp;\n612-new_variable-97-97", method="", type_label=new_variable];
621 [label="98_ owner   = msg.sender;\n621-expression_statement-99-99", method="", type_label=expression_statement];
627 [label="99_ sale    = 0x071F73f4D0befd4406901AACE6D5FFD6D297c561;\n627-expression_statement-100-100", method="", type_label=expression_statement];
631 [label="100_ evt     = 0x76535ca5BF1d33434A302e5A464Df433BB1F80F6;\n631-expression_statement-101-101", method="", type_label=expression_statement];
635 [label="101_ team    = 0xD7EC5D8697e4c83Dc33D781d19dc2910fB165D5C;\n635-expression_statement-102-102", method="", type_label=expression_statement];
639 [label="102_ saleAmount    = toWei(1000000000);\n639-expression_statement-103-103", method="", type_label=expression_statement];
646 [label="103_ evtAmount     = toWei(200000000);\n646-expression_statement-104-104", method="", type_label=expression_statement];
653 [label="104_ teamAmount    = toWei(800000000);\n653-expression_statement-105-105", method="", type_label=expression_statement];
660 [label="105_ _totalSupply  = toWei(2000000000);\n660-expression_statement-106-106", method="", type_label=expression_statement];
667 [label="106_ require(_totalSupply == saleAmount + evtAmount + teamAmount );\n667-expression_statement-107-107", method="", type_label=expression_statement];
678 [label="107_ balances[owner] = _totalSupply;\n678-expression_statement-108-108", method="", type_label=expression_statement];
696 [label="109_ transfer(sale, saleAmount);\n696-expression_statement-110-110", method="", type_label=expression_statement];
703 [label="110_ transfer(evt, evtAmount);\n703-expression_statement-111-111", method="", type_label=expression_statement];
710 [label="111_ transfer(team, teamAmount);\n710-expression_statement-112-112", method="", type_label=expression_statement];
717 [label="112_ require(balances[owner] == 0);\n717-expression_statement-113-113", method="", type_label=expression_statement];
726 [label="114_ address winner_tmstmp31;\n726-new_variable-115-115", method="", type_label=new_variable];
730 [label="115_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n730-function_definition-116-119", method="play_tmstmp31(uint startTime)", type_label=function_definition];
738 [label="116_ uint _vtime = block.timestamp;\n738-new_variable-117-117", method="play_tmstmp31(uint startTime)", type_label=new_variable];
746 [label="117_ if_startTime + (5 * 1 days) == _vtime\n746-if-118-119", method="play_tmstmp31(uint startTime)", type_label=if];
1805 [label="117_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
757 [label="118_ winner_tmstmp31 = msg.sender;\n757-expression_statement-119-119", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
763 [label="119_ function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n763-function_definition-120-122", method="totalSupply()", type_label=function_definition];
772 [label="120_ return _totalSupply;\n772-return-121-121", method="totalSupply()", type_label=return];
774 [label="122_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n774-function_definition-123-125", method="bug_tmstmp13()", type_label=function_definition];
783 [label="123_ return block.timestamp >= 1546300800;\n783-return-124-124", method="bug_tmstmp13()", type_label=return];
789 [label="125_ function balanceOf(address who) public view returns (uint256) {\n        return balances[who];\n    }\n789-function_definition-126-128", method="balanceOf(address who)", type_label=function_definition];
802 [label="126_ return balances[who];\n802-return-127-127", method="balanceOf(address who)", type_label=return];
806 [label="128_ uint256 bugv_tmstmp5 = block.timestamp;\n806-new_variable-129-129", method="", type_label=new_variable];
813 [label="129_ function transfer(address to, uint256 value) public returns (bool success) {\n        require(msg.sender != to);\n        require(value > 0);\n        require( balances[msg.sender] >= value );\n        require( balances[to] + value >= balances[to] );\n        if(msg.sender == team) {\n            require(now >= 1589036400);      \n            if(balances[msg.sender] - value < toWei(600000000))\n                require(now >= 1620572400);      \n            if(balances[msg.sender] - value < toWei(400000000))\n                require(now >= 1652108400);      \n            if(balances[msg.sender] - value < toWei(200000000))\n                require(now >= 1683644400);      \n        }\n        balances[msg.sender] -= value;\n        balances[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n813-function_definition-130-148", method="transfer(address to,uint256 value)", type_label=function_definition];
830 [label="130_ require(msg.sender != to);\n830-expression_statement-131-131", method="transfer(address to,uint256 value)", type_label=expression_statement];
839 [label="131_ require(value > 0);\n839-expression_statement-132-132", method="transfer(address to,uint256 value)", type_label=expression_statement];
846 [label="132_ require( balances[msg.sender] >= value );\n846-expression_statement-133-133", method="transfer(address to,uint256 value)", type_label=expression_statement];
857 [label="133_ require( balances[to] + value >= balances[to] );\n857-expression_statement-134-134", method="transfer(address to,uint256 value)", type_label=expression_statement];
870 [label="134_ if_msg.sender == team\n870-if-135-143", method="transfer(address to,uint256 value)", type_label=if];
1929 [label="134_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
877 [label="135_ require(now >= 1589036400);\n877-expression_statement-136-136", method="transfer(address to,uint256 value)", type_label=expression_statement];
884 [label="136_ if\n884-if-137-138", method="transfer(address to,uint256 value)", type_label=if];
1943 [label="136_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
897 [label="137_ require(now >= 1620572400);\n897-expression_statement-138-138", method="transfer(address to,uint256 value)", type_label=expression_statement];
904 [label="138_ if\n904-if-139-140", method="transfer(address to,uint256 value)", type_label=if];
1963 [label="138_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
917 [label="139_ require(now >= 1652108400);\n917-expression_statement-140-140", method="transfer(address to,uint256 value)", type_label=expression_statement];
924 [label="140_ if\n924-if-141-142", method="transfer(address to,uint256 value)", type_label=if];
1983 [label="140_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
937 [label="141_ require(now >= 1683644400);\n937-expression_statement-142-142", method="transfer(address to,uint256 value)", type_label=expression_statement];
944 [label="143_ balances[msg.sender] -= value;\n944-expression_statement-144-144", method="transfer(address to,uint256 value)", type_label=expression_statement];
952 [label="144_ balances[to] += value;\n952-expression_statement-145-145", method="transfer(address to,uint256 value)", type_label=expression_statement];
968 [label="146_ return true;\n968-return-147-147", method="transfer(address to,uint256 value)", type_label=return];
971 [label="148_ uint256 bugv_tmstmp1 = block.timestamp;\n971-new_variable-149-149", method="", type_label=new_variable];
978 [label="149_ function burnCoins(uint256 value) public {\n        require(balances[msg.sender] >= value);\n        require(_totalSupply >= value);\n        balances[msg.sender] -= value;\n        _totalSupply -= value;\n        emit Transfer(msg.sender, address(0), value);\n    }\n978-function_definition-150-156", method="burnCoins(uint256 value)", type_label=function_definition];
986 [label="150_ require(balances[msg.sender] >= value);\n986-expression_statement-151-151", method="burnCoins(uint256 value)", type_label=expression_statement];
997 [label="151_ require(_totalSupply >= value);\n997-expression_statement-152-152", method="burnCoins(uint256 value)", type_label=expression_statement];
1004 [label="152_ balances[msg.sender] -= value;\n1004-expression_statement-153-153", method="burnCoins(uint256 value)", type_label=expression_statement];
1012 [label="153_ _totalSupply -= value;\n1012-expression_statement-154-154", method="burnCoins(uint256 value)", type_label=expression_statement];
1028 [label="156_ uint256 bugv_tmstmp2 = block.timestamp;\n1028-new_variable-157-157", method="", type_label=new_variable];
1035 [label="157_ function toWei(uint256 value) private view returns (uint256) {\n        return value * (10 ** uint256(decimals));\n    }\n1035-function_definition-158-160", method="toWei(uint256 value)", type_label=function_definition];
1048 [label="158_ return value * (10 ** uint256(decimals));\n1048-return-159-159", method="toWei(uint256 value)", type_label=return];
1057 [label="160_ uint256 bugv_tmstmp3 = block.timestamp;\n1057-new_variable-161-161", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
70 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 97  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
97 -> 101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 108  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
101 -> 1160  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1160 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
108 -> 1160  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
121 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
132 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
148 -> 159  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
148 -> 1207  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1207 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 1207  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
165 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
176 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
192 -> 203  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
192 -> 1251  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1251 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 1251  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
209 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 240  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
227 -> 1286  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1286 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
240 -> 1286  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
246 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
254 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 275  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
262 -> 1321  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1321 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
275 -> 1321  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
285 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
290 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
305 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
312 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 323  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
316 -> 1375  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1375 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 1375  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
336 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
360 -> 371  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
360 -> 1419  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1419 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 1419  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
381 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 419  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
412 -> 1471  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1471 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 1471  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
432 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
442 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 469  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
458 -> 1517  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1517 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 1517  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
480 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
485 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 518  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
511 -> 1570  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1570 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 1570  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
536 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
551 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
576 -> 587  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
576 -> 1635  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1635 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 1635  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
593 -> 598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
627 -> 631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
631 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
635 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
667 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
730 -> 738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
738 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 757  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
746 -> 1805  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1805 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 1805  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
763 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
774 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
789 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
813 -> 830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
839 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
870 -> 877  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
870 -> 1929  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
877 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 897  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
884 -> 1943  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1943 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 1943  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
904 -> 917  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
904 -> 1963  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1963 -> 924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 1963  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
924 -> 937  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
924 -> 1983  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1983 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 1983  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
944 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
978 -> 986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
