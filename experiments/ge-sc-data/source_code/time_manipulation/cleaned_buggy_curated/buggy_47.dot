digraph  {
13 [label="2_ function totalSupply() public view returns (uint);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n21-function_definition-4-6", method="bug_tmstmp25()", type_label=function_definition];
30 [label="4_ return block.timestamp >= 1546300800;\n30-return-5-5", method="bug_tmstmp25()", type_label=return];
36 [label="6_ function balanceOf(address tokenOwner) public view returns (uint balance);\n36-function_definition-7-7", method="balanceOf(address tokenOwner)", type_label=function_definition];
49 [label="7_ address winner_tmstmp19;\n49-new_variable-8-8", method="", type_label=new_variable];
53 [label="8_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n53-function_definition-9-12", method="play_tmstmp19(uint startTime)", type_label=function_definition];
61 [label="9_ uint _vtime = block.timestamp;\n61-new_variable-10-10", method="play_tmstmp19(uint startTime)", type_label=new_variable];
69 [label="10_ if_startTime + (5 * 1 days) == _vtime\n69-if-11-12", method="play_tmstmp19(uint startTime)", type_label=if];
2206 [label="10_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
80 [label="11_ winner_tmstmp19 = msg.sender;\n80-expression_statement-12-12", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
86 [label="12_ function transfer(address to, uint tokens) public returns (bool success);\n86-function_definition-13-13", method="transfer(address to,uint tokens)", type_label=function_definition];
102 [label="13_ address winner_tmstmp26;\n102-new_variable-14-14", method="", type_label=new_variable];
106 [label="14_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n106-function_definition-15-17", method="play_tmstmp26(uint startTime)", type_label=function_definition];
114 [label="15_ if_startTime + (5 * 1 days) == block.timestamp\n114-if-16-17", method="play_tmstmp26(uint startTime)", type_label=if];
2251 [label="15_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
127 [label="16_ winner_tmstmp26 = msg.sender;\n127-expression_statement-17-17", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
133 [label="17_ function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n133-function_definition-18-18", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
150 [label="18_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n150-function_definition-19-27", method="bug_tmstmp20()", type_label=function_definition];
155 [label="19_ uint pastBlockTime_tmstmp20;\n155-new_variable-20-20", method="bug_tmstmp20()", type_label=new_variable];
160 [label="20_ require(msg.value == 10 ether);\n160-expression_statement-21-21", method="bug_tmstmp20()", type_label=expression_statement];
170 [label="21_ require(now != pastBlockTime_tmstmp20);\n170-expression_statement-22-22", method="bug_tmstmp20()", type_label=expression_statement];
177 [label="22_ pastBlockTime_tmstmp20 = now;\n177-expression_statement-23-23", method="bug_tmstmp20()", type_label=expression_statement];
181 [label="23_ if_now % 15 == 0\n181-if-24-26", method="bug_tmstmp20()", type_label=if];
2318 [label="23_ end_if", method="bug_tmstmp20()", type_label=end_if];
188 [label="24_ msg.sender.transfer(address(this).balance);\n188-expression_statement-25-25", method="bug_tmstmp20()", type_label=expression_statement];
201 [label="27_ function approve(address spender, uint tokens) public returns (bool success);\n201-function_definition-28-28", method="approve(address spender,uint tokens)", type_label=function_definition];
217 [label="28_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n217-function_definition-29-37", method="bug_tmstmp32()", type_label=function_definition];
222 [label="29_ uint pastBlockTime_tmstmp32;\n222-new_variable-30-30", method="bug_tmstmp32()", type_label=new_variable];
227 [label="30_ require(msg.value == 10 ether);\n227-expression_statement-31-31", method="bug_tmstmp32()", type_label=expression_statement];
237 [label="31_ require(now != pastBlockTime_tmstmp32);\n237-expression_statement-32-32", method="bug_tmstmp32()", type_label=expression_statement];
244 [label="32_ pastBlockTime_tmstmp32 = now;\n244-expression_statement-33-33", method="bug_tmstmp32()", type_label=expression_statement];
248 [label="33_ if_now % 15 == 0\n248-if-34-36", method="bug_tmstmp32()", type_label=if];
2385 [label="33_ end_if", method="bug_tmstmp32()", type_label=end_if];
255 [label="34_ msg.sender.transfer(address(this).balance);\n255-expression_statement-35-35", method="bug_tmstmp32()", type_label=expression_statement];
268 [label="37_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n268-function_definition-38-38", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
288 [label="38_ address winner_tmstmp38;\n288-new_variable-39-39", method="", type_label=new_variable];
292 [label="39_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n292-function_definition-40-42", method="play_tmstmp38(uint startTime)", type_label=function_definition];
300 [label="40_ if_startTime + (5 * 1 days) == block.timestamp\n300-if-41-42", method="play_tmstmp38(uint startTime)", type_label=if];
2437 [label="40_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
313 [label="41_ winner_tmstmp38 = msg.sender;\n313-expression_statement-42-42", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
353 [label="46_ function bug_tmstmp24 () public payable {\n	uint pastBlockTime_tmstmp24;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp24);  \n        pastBlockTime_tmstmp24 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n353-function_definition-47-55", method="bug_tmstmp24()", type_label=function_definition];
358 [label="47_ uint pastBlockTime_tmstmp24;\n358-new_variable-48-48", method="bug_tmstmp24()", type_label=new_variable];
363 [label="48_ require(msg.value == 10 ether);\n363-expression_statement-49-49", method="bug_tmstmp24()", type_label=expression_statement];
373 [label="49_ require(now != pastBlockTime_tmstmp24);\n373-expression_statement-50-50", method="bug_tmstmp24()", type_label=expression_statement];
380 [label="50_ pastBlockTime_tmstmp24 = now;\n380-expression_statement-51-51", method="bug_tmstmp24()", type_label=expression_statement];
384 [label="51_ if_now % 15 == 0\n384-if-52-54", method="bug_tmstmp24()", type_label=if];
2521 [label="51_ end_if", method="bug_tmstmp24()", type_label=end_if];
391 [label="52_ msg.sender.transfer(address(this).balance);\n391-expression_statement-53-53", method="bug_tmstmp24()", type_label=expression_statement];
404 [label="55_ string public name = \"Acunar\";\n404-new_variable-56-56", method="", type_label=new_variable];
411 [label="56_ function bug_tmstmp5() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n411-function_definition-57-59", method="bug_tmstmp5()", type_label=function_definition];
420 [label="57_ return block.timestamp >= 1546300800;\n420-return-58-58", method="bug_tmstmp5()", type_label=return];
426 [label="59_ string public symbol = \"ACN\";\n426-new_variable-60-60", method="", type_label=new_variable];
433 [label="60_ address winner_tmstmp15;\n433-new_variable-61-61", method="", type_label=new_variable];
437 [label="61_ function play_tmstmp15(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp15 = msg.sender;}}\n437-function_definition-62-65", method="play_tmstmp15(uint startTime)", type_label=function_definition];
445 [label="62_ uint _vtime = block.timestamp;\n445-new_variable-63-63", method="play_tmstmp15(uint startTime)", type_label=new_variable];
453 [label="63_ if_startTime + (5 * 1 days) == _vtime\n453-if-64-65", method="play_tmstmp15(uint startTime)", type_label=if];
2590 [label="63_ end_if", method="play_tmstmp15(uint startTime)", type_label=end_if];
464 [label="64_ winner_tmstmp15 = msg.sender;\n464-expression_statement-65-65", method="play_tmstmp15(uint startTime)", type_label=expression_statement];
470 [label="65_ uint public decimals = 0;\n470-new_variable-66-66", method="", type_label=new_variable];
476 [label="66_ function bug_tmstmp28 () public payable {\n	uint pastBlockTime_tmstmp28;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp28);  \n        pastBlockTime_tmstmp28 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n476-function_definition-67-75", method="bug_tmstmp28()", type_label=function_definition];
481 [label="67_ uint pastBlockTime_tmstmp28;\n481-new_variable-68-68", method="bug_tmstmp28()", type_label=new_variable];
486 [label="68_ require(msg.value == 10 ether);\n486-expression_statement-69-69", method="bug_tmstmp28()", type_label=expression_statement];
496 [label="69_ require(now != pastBlockTime_tmstmp28);\n496-expression_statement-70-70", method="bug_tmstmp28()", type_label=expression_statement];
503 [label="70_ pastBlockTime_tmstmp28 = now;\n503-expression_statement-71-71", method="bug_tmstmp28()", type_label=expression_statement];
507 [label="71_ if_now % 15 == 0\n507-if-72-74", method="bug_tmstmp28()", type_label=if];
2644 [label="71_ end_if", method="bug_tmstmp28()", type_label=end_if];
514 [label="72_ msg.sender.transfer(address(this).balance);\n514-expression_statement-73-73", method="bug_tmstmp28()", type_label=expression_statement];
527 [label="75_ uint public supply;\n527-new_variable-76-76", method="", type_label=new_variable];
532 [label="76_ address winner_tmstmp34;\n532-new_variable-77-77", method="", type_label=new_variable];
536 [label="77_ function play_tmstmp34(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp34 = msg.sender;}}\n536-function_definition-78-80", method="play_tmstmp34(uint startTime)", type_label=function_definition];
544 [label="78_ if_startTime + (5 * 1 days) == block.timestamp\n544-if-79-80", method="play_tmstmp34(uint startTime)", type_label=if];
2681 [label="78_ end_if", method="play_tmstmp34(uint startTime)", type_label=end_if];
557 [label="79_ winner_tmstmp34 = msg.sender;\n557-expression_statement-80-80", method="play_tmstmp34(uint startTime)", type_label=expression_statement];
563 [label="80_ address public founder;\n563-new_variable-81-81", method="", type_label=new_variable];
568 [label="81_ function bug_tmstmp21() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n568-function_definition-82-84", method="bug_tmstmp21()", type_label=function_definition];
577 [label="82_ return block.timestamp >= 1546300800;\n577-return-83-83", method="bug_tmstmp21()", type_label=return];
583 [label="84_ mapping(address => uint) public balances;\n583-new_variable-85-85", method="", type_label=new_variable];
590 [label="85_ address winner_tmstmp10;\n590-new_variable-86-86", method="", type_label=new_variable];
594 [label="86_ function play_tmstmp10(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp10 = msg.sender;}}\n594-function_definition-87-89", method="play_tmstmp10(uint startTime)", type_label=function_definition];
602 [label="87_ if_startTime + (5 * 1 days) == block.timestamp\n602-if-88-89", method="play_tmstmp10(uint startTime)", type_label=if];
2739 [label="87_ end_if", method="play_tmstmp10(uint startTime)", type_label=end_if];
615 [label="88_ winner_tmstmp10 = msg.sender;\n615-expression_statement-89-89", method="play_tmstmp10(uint startTime)", type_label=expression_statement];
621 [label="89_ mapping(address => mapping(address => uint)) allowed;\n621-new_variable-90-90", method="", type_label=new_variable];
659 [label="93_ supply = 200000000;\n659-expression_statement-94-94", method="", type_label=expression_statement];
663 [label="94_ founder = msg.sender;\n663-expression_statement-95-95", method="", type_label=expression_statement];
669 [label="95_ balances[founder] = supply;\n669-expression_statement-96-96", method="", type_label=expression_statement];
675 [label="97_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n675-function_definition-98-106", method="bug_tmstmp4()", type_label=function_definition];
680 [label="98_ uint pastBlockTime_tmstmp4;\n680-new_variable-99-99", method="bug_tmstmp4()", type_label=new_variable];
685 [label="99_ require(msg.value == 10 ether);\n685-expression_statement-100-100", method="bug_tmstmp4()", type_label=expression_statement];
695 [label="100_ require(now != pastBlockTime_tmstmp4);\n695-expression_statement-101-101", method="bug_tmstmp4()", type_label=expression_statement];
702 [label="101_ pastBlockTime_tmstmp4 = now;\n702-expression_statement-102-102", method="bug_tmstmp4()", type_label=expression_statement];
706 [label="102_ if_now % 15 == 0\n706-if-103-105", method="bug_tmstmp4()", type_label=if];
2843 [label="102_ end_if", method="bug_tmstmp4()", type_label=end_if];
713 [label="103_ msg.sender.transfer(address(this).balance);\n713-expression_statement-104-104", method="bug_tmstmp4()", type_label=expression_statement];
726 [label="106_ function allowance(address tokenOwner, address spender) view public returns(uint){\n        return allowed[tokenOwner][spender];\n    }\n726-function_definition-107-109", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
743 [label="107_ return allowed[tokenOwner][spender];\n743-return-108-108", method="allowance(address tokenOwner,address spender)", type_label=return];
749 [label="109_ address winner_tmstmp7;\n749-new_variable-110-110", method="", type_label=new_variable];
753 [label="110_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n753-function_definition-111-114", method="play_tmstmp7(uint startTime)", type_label=function_definition];
761 [label="111_ uint _vtime = block.timestamp;\n761-new_variable-112-112", method="play_tmstmp7(uint startTime)", type_label=new_variable];
769 [label="112_ if_startTime + (5 * 1 days) == _vtime\n769-if-113-114", method="play_tmstmp7(uint startTime)", type_label=if];
2906 [label="112_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
780 [label="113_ winner_tmstmp7 = msg.sender;\n780-expression_statement-114-114", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
786 [label="114_ function approve(address spender, uint tokens) public returns(bool){\n        require(balances[msg.sender] >= tokens);\n        require(tokens > 0);\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n786-function_definition-115-121", method="approve(address spender,uint tokens)", type_label=function_definition];
802 [label="115_ require(balances[msg.sender] >= tokens);\n802-expression_statement-116-116", method="approve(address spender,uint tokens)", type_label=expression_statement];
813 [label="116_ require(tokens > 0);\n813-expression_statement-117-117", method="approve(address spender,uint tokens)", type_label=expression_statement];
820 [label="117_ allowed[msg.sender][spender] = tokens;\n820-expression_statement-118-118", method="approve(address spender,uint tokens)", type_label=expression_statement];
840 [label="119_ return true;\n840-return-120-120", method="approve(address spender,uint tokens)", type_label=return];
843 [label="121_ address winner_tmstmp23;\n843-new_variable-122-122", method="", type_label=new_variable];
847 [label="122_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n847-function_definition-123-126", method="play_tmstmp23(uint startTime)", type_label=function_definition];
855 [label="123_ uint _vtime = block.timestamp;\n855-new_variable-124-124", method="play_tmstmp23(uint startTime)", type_label=new_variable];
863 [label="124_ if_startTime + (5 * 1 days) == _vtime\n863-if-125-126", method="play_tmstmp23(uint startTime)", type_label=if];
3000 [label="124_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
874 [label="125_ winner_tmstmp23 = msg.sender;\n874-expression_statement-126-126", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
880 [label="126_ function transferFrom(address from, address to, uint tokens) public returns(bool){\n        require(allowed[from][to] >= tokens);\n        require(balances[from] >= tokens);\n        balances[from] -= tokens;\n        balances[to] += tokens;\n        allowed[from][to] -= tokens;\n        return true;\n    }\n880-function_definition-127-134", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
900 [label="127_ require(allowed[from][to] >= tokens);\n900-expression_statement-128-128", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
911 [label="128_ require(balances[from] >= tokens);\n911-expression_statement-129-129", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
920 [label="129_ balances[from] -= tokens;\n920-expression_statement-130-130", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
926 [label="130_ balances[to] += tokens;\n926-expression_statement-131-131", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
932 [label="131_ allowed[from][to] -= tokens;\n932-expression_statement-132-132", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
940 [label="132_ return true;\n940-return-133-133", method="transferFrom(address from,address to,uint tokens)", type_label=return];
943 [label="134_ address winner_tmstmp14;\n943-new_variable-135-135", method="", type_label=new_variable];
947 [label="135_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n947-function_definition-136-138", method="play_tmstmp14(uint startTime)", type_label=function_definition];
955 [label="136_ if_startTime + (5 * 1 days) == block.timestamp\n955-if-137-138", method="play_tmstmp14(uint startTime)", type_label=if];
3092 [label="136_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
968 [label="137_ winner_tmstmp14 = msg.sender;\n968-expression_statement-138-138", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
974 [label="138_ function totalSupply() public view returns (uint){\n        return supply;\n    }\n974-function_definition-139-141", method="totalSupply()", type_label=function_definition];
983 [label="139_ return supply;\n983-return-140-140", method="totalSupply()", type_label=return];
985 [label="141_ address winner_tmstmp30;\n985-new_variable-142-142", method="", type_label=new_variable];
989 [label="142_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n989-function_definition-143-145", method="play_tmstmp30(uint startTime)", type_label=function_definition];
997 [label="143_ if_startTime + (5 * 1 days) == block.timestamp\n997-if-144-145", method="play_tmstmp30(uint startTime)", type_label=if];
3134 [label="143_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
1010 [label="144_ winner_tmstmp30 = msg.sender;\n1010-expression_statement-145-145", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
1016 [label="145_ function balanceOf(address tokenOwner) public view returns (uint balance){\n         return balances[tokenOwner];\n     }\n1016-function_definition-146-148", method="balanceOf(address tokenOwner)", type_label=function_definition];
1030 [label="146_ return balances[tokenOwner];\n1030-return-147-147", method="balanceOf(address tokenOwner)", type_label=return];
1034 [label="148_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1034-function_definition-149-157", method="bug_tmstmp8()", type_label=function_definition];
1039 [label="149_ uint pastBlockTime_tmstmp8;\n1039-new_variable-150-150", method="bug_tmstmp8()", type_label=new_variable];
1044 [label="150_ require(msg.value == 10 ether);\n1044-expression_statement-151-151", method="bug_tmstmp8()", type_label=expression_statement];
1054 [label="151_ require(now != pastBlockTime_tmstmp8);\n1054-expression_statement-152-152", method="bug_tmstmp8()", type_label=expression_statement];
1061 [label="152_ pastBlockTime_tmstmp8 = now;\n1061-expression_statement-153-153", method="bug_tmstmp8()", type_label=expression_statement];
1065 [label="153_ if_now % 15 == 0\n1065-if-154-156", method="bug_tmstmp8()", type_label=if];
3202 [label="153_ end_if", method="bug_tmstmp8()", type_label=end_if];
1072 [label="154_ msg.sender.transfer(address(this).balance);\n1072-expression_statement-155-155", method="bug_tmstmp8()", type_label=expression_statement];
1085 [label="157_ function transfer(address to, uint tokens) public returns (bool success){\n         require(balances[msg.sender] >= tokens && tokens > 0);\n         balances[to] += tokens;\n         balances[msg.sender] -= tokens;\n         emit Transfer(msg.sender, to, tokens);\n         return true;\n     }\n1085-function_definition-158-164", method="transfer(address to,uint tokens)", type_label=function_definition];
1102 [label="158_ require(balances[msg.sender] >= tokens && tokens > 0);\n1102-expression_statement-159-159", method="transfer(address to,uint tokens)", type_label=expression_statement];
1117 [label="159_ balances[to] += tokens;\n1117-expression_statement-160-160", method="transfer(address to,uint tokens)", type_label=expression_statement];
1123 [label="160_ balances[msg.sender] -= tokens;\n1123-expression_statement-161-161", method="transfer(address to,uint tokens)", type_label=expression_statement];
1141 [label="162_ return true;\n1141-return-163-163", method="transfer(address to,uint tokens)", type_label=return];
1144 [label="164_ address winner_tmstmp39;\n1144-new_variable-165-165", method="", type_label=new_variable];
1148 [label="165_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1148-function_definition-166-169", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1156 [label="166_ uint _vtime = block.timestamp;\n1156-new_variable-167-167", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1164 [label="167_ if_startTime + (5 * 1 days) == _vtime\n1164-if-168-169", method="play_tmstmp39(uint startTime)", type_label=if];
3301 [label="167_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1175 [label="168_ winner_tmstmp39 = msg.sender;\n1175-expression_statement-169-169", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1187 [label="171_ address winner_tmstmp22;\n1187-new_variable-172-172", method="", type_label=new_variable];
1191 [label="172_ function play_tmstmp22(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp22 = msg.sender;}}\n1191-function_definition-173-175", method="play_tmstmp22(uint startTime)", type_label=function_definition];
1199 [label="173_ if_startTime + (5 * 1 days) == block.timestamp\n1199-if-174-175", method="play_tmstmp22(uint startTime)", type_label=if];
3336 [label="173_ end_if", method="play_tmstmp22(uint startTime)", type_label=end_if];
1212 [label="174_ winner_tmstmp22 = msg.sender;\n1212-expression_statement-175-175", method="play_tmstmp22(uint startTime)", type_label=expression_statement];
1218 [label="175_ address public admin;\n1218-new_variable-176-176", method="", type_label=new_variable];
1223 [label="176_ function bug_tmstmp12 () public payable {\n	uint pastBlockTime_tmstmp12;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp12);  \n        pastBlockTime_tmstmp12 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1223-function_definition-177-185", method="bug_tmstmp12()", type_label=function_definition];
1228 [label="177_ uint pastBlockTime_tmstmp12;\n1228-new_variable-178-178", method="bug_tmstmp12()", type_label=new_variable];
1233 [label="178_ require(msg.value == 10 ether);\n1233-expression_statement-179-179", method="bug_tmstmp12()", type_label=expression_statement];
1243 [label="179_ require(now != pastBlockTime_tmstmp12);\n1243-expression_statement-180-180", method="bug_tmstmp12()", type_label=expression_statement];
1250 [label="180_ pastBlockTime_tmstmp12 = now;\n1250-expression_statement-181-181", method="bug_tmstmp12()", type_label=expression_statement];
1254 [label="181_ if_now % 15 == 0\n1254-if-182-184", method="bug_tmstmp12()", type_label=if];
3391 [label="181_ end_if", method="bug_tmstmp12()", type_label=end_if];
1261 [label="182_ msg.sender.transfer(address(this).balance);\n1261-expression_statement-183-183", method="bug_tmstmp12()", type_label=expression_statement];
1274 [label="185_ address payable public deposit;\n1274-new_variable-186-186", method="", type_label=new_variable];
1279 [label="186_ address winner_tmstmp11;\n1279-new_variable-187-187", method="", type_label=new_variable];
1283 [label="187_ function play_tmstmp11(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp11 = msg.sender;}}\n1283-function_definition-188-191", method="play_tmstmp11(uint startTime)", type_label=function_definition];
1291 [label="188_ uint _vtime = block.timestamp;\n1291-new_variable-189-189", method="play_tmstmp11(uint startTime)", type_label=new_variable];
1299 [label="189_ if_startTime + (5 * 1 days) == _vtime\n1299-if-190-191", method="play_tmstmp11(uint startTime)", type_label=if];
3436 [label="189_ end_if", method="play_tmstmp11(uint startTime)", type_label=end_if];
1310 [label="190_ winner_tmstmp11 = msg.sender;\n1310-expression_statement-191-191", method="play_tmstmp11(uint startTime)", type_label=expression_statement];
1316 [label="191_ uint tokenPrice = 0.0001 ether;\n1316-new_variable-192-192", method="", type_label=new_variable];
1322 [label="192_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1322-function_definition-193-195", method="bug_tmstmp1()", type_label=function_definition];
1331 [label="193_ return block.timestamp >= 1546300800;\n1331-return-194-194", method="bug_tmstmp1()", type_label=return];
1337 [label="195_ uint public hardCap =21000 ether;\n1337-new_variable-196-196", method="", type_label=new_variable];
1344 [label="196_ address winner_tmstmp2;\n1344-new_variable-197-197", method="", type_label=new_variable];
1348 [label="197_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n1348-function_definition-198-200", method="play_tmstmp2(uint startTime)", type_label=function_definition];
1356 [label="198_ if_startTime + (5 * 1 days) == block.timestamp\n1356-if-199-200", method="play_tmstmp2(uint startTime)", type_label=if];
3493 [label="198_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
1369 [label="199_ winner_tmstmp2 = msg.sender;\n1369-expression_statement-200-200", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
1375 [label="200_ uint public raisedAmount;\n1375-new_variable-201-201", method="", type_label=new_variable];
1380 [label="201_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1380-function_definition-202-204", method="bug_tmstmp17()", type_label=function_definition];
1389 [label="202_ return block.timestamp >= 1546300800;\n1389-return-203-203", method="bug_tmstmp17()", type_label=return];
1395 [label="204_ uint public saleStart = now;\n1395-new_variable-205-205", method="", type_label=new_variable];
1401 [label="205_ uint public saleEnd = now + 14515200;\n1401-new_variable-206-206", method="", type_label=new_variable];
1409 [label="206_ uint public coinTradeStart = saleEnd + 15120000;\n1409-new_variable-207-207", method="", type_label=new_variable];
1417 [label="207_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1417-function_definition-208-210", method="bug_tmstmp37()", type_label=function_definition];
1426 [label="208_ return block.timestamp >= 1546300800;\n1426-return-209-209", method="bug_tmstmp37()", type_label=return];
1432 [label="210_ uint public maxInvestment = 30 ether;\n1432-new_variable-211-211", method="", type_label=new_variable];
1439 [label="211_ address winner_tmstmp3;\n1439-new_variable-212-212", method="", type_label=new_variable];
1443 [label="212_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n1443-function_definition-213-216", method="play_tmstmp3(uint startTime)", type_label=function_definition];
1451 [label="213_ uint _vtime = block.timestamp;\n1451-new_variable-214-214", method="play_tmstmp3(uint startTime)", type_label=new_variable];
1459 [label="214_ if_startTime + (5 * 1 days) == _vtime\n1459-if-215-216", method="play_tmstmp3(uint startTime)", type_label=if];
3596 [label="214_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
1470 [label="215_ winner_tmstmp3 = msg.sender;\n1470-expression_statement-216-216", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
1476 [label="216_ uint public minInvestment = 0.1 ether;\n1476-new_variable-217-217", method="", type_label=new_variable];
1489 [label="218_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1489-function_definition-219-221", method="bug_tmstmp9()", type_label=function_definition];
1498 [label="219_ return block.timestamp >= 1546300800;\n1498-return-220-220", method="bug_tmstmp9()", type_label=return];
1504 [label="221_ State public ieoState;\n1504-new_variable-222-222", method="", type_label=new_variable];
1510 [label="222_ modifier onlyAdmin(){\n        require(msg.sender == admin);\n        _;\n    }\n1510-expression_statement-223-226", method="", type_label=expression_statement];
1513 [label="223_ require(msg.sender == admin);\n1513-expression_statement-224-224", method="", type_label=expression_statement];
1522 [label="224_ _;\n1522-expression_statement-225-225", method="", type_label=expression_statement];
1524 [label="226_ uint256 bugv_tmstmp3 = block.timestamp;\n1524-new_variable-227-227", method="", type_label=new_variable];
1531 [label="227_ uint256 bugv_tmstmp4 = block.timestamp;\n1531-new_variable-228-228", method="", type_label=new_variable];
1558 [label="230_ deposit = _deposit;\n1558-expression_statement-231-231", method="", type_label=expression_statement];
1562 [label="231_ admin = msg.sender;\n1562-expression_statement-232-232", method="", type_label=expression_statement];
1568 [label="232_ ieoState = State.beforeStart;\n1568-expression_statement-233-233", method="", type_label=expression_statement];
1574 [label="234_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1574-function_definition-235-243", method="bug_tmstmp36()", type_label=function_definition];
1579 [label="235_ uint pastBlockTime_tmstmp36;\n1579-new_variable-236-236", method="bug_tmstmp36()", type_label=new_variable];
1584 [label="236_ require(msg.value == 10 ether);\n1584-expression_statement-237-237", method="bug_tmstmp36()", type_label=expression_statement];
1594 [label="237_ require(now != pastBlockTime_tmstmp36);\n1594-expression_statement-238-238", method="bug_tmstmp36()", type_label=expression_statement];
1601 [label="238_ pastBlockTime_tmstmp36 = now;\n1601-expression_statement-239-239", method="bug_tmstmp36()", type_label=expression_statement];
1605 [label="239_ if_now % 15 == 0\n1605-if-240-242", method="bug_tmstmp36()", type_label=if];
3742 [label="239_ end_if", method="bug_tmstmp36()", type_label=end_if];
1612 [label="240_ msg.sender.transfer(address(this).balance);\n1612-expression_statement-241-241", method="bug_tmstmp36()", type_label=expression_statement];
1625 [label="243_ function halt() public onlyAdmin{\n        ieoState = State.halted;\n    }\n1625-function_definition-244-246", method="halt()", type_label=function_definition];
1628 [label="243_ onlyAdmin\n1628-expression_statement-244-244", method="halt()", type_label=expression_statement];
1631 [label="244_ ieoState = State.halted;\n1631-expression_statement-245-245", method="halt()", type_label=expression_statement];
1637 [label="246_ address winner_tmstmp35;\n1637-new_variable-247-247", method="", type_label=new_variable];
1641 [label="247_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1641-function_definition-248-251", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1649 [label="248_ uint _vtime = block.timestamp;\n1649-new_variable-249-249", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1657 [label="249_ if_startTime + (5 * 1 days) == _vtime\n1657-if-250-251", method="play_tmstmp35(uint startTime)", type_label=if];
3794 [label="249_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1668 [label="250_ winner_tmstmp35 = msg.sender;\n1668-expression_statement-251-251", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1674 [label="251_ function unhalt() public onlyAdmin{\n        ieoState = State.running;\n    }\n1674-function_definition-252-254", method="unhalt()", type_label=function_definition];
1677 [label="251_ onlyAdmin\n1677-expression_statement-252-252", method="unhalt()", type_label=expression_statement];
1680 [label="252_ ieoState = State.running;\n1680-expression_statement-253-253", method="unhalt()", type_label=expression_statement];
1686 [label="254_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1686-function_definition-255-263", method="bug_tmstmp40()", type_label=function_definition];
1691 [label="255_ uint pastBlockTime_tmstmp40;\n1691-new_variable-256-256", method="bug_tmstmp40()", type_label=new_variable];
1696 [label="256_ require(msg.value == 10 ether);\n1696-expression_statement-257-257", method="bug_tmstmp40()", type_label=expression_statement];
1706 [label="257_ require(now != pastBlockTime_tmstmp40);\n1706-expression_statement-258-258", method="bug_tmstmp40()", type_label=expression_statement];
1713 [label="258_ pastBlockTime_tmstmp40 = now;\n1713-expression_statement-259-259", method="bug_tmstmp40()", type_label=expression_statement];
1717 [label="259_ if_now % 15 == 0\n1717-if-260-262", method="bug_tmstmp40()", type_label=if];
3854 [label="259_ end_if", method="bug_tmstmp40()", type_label=end_if];
1724 [label="260_ msg.sender.transfer(address(this).balance);\n1724-expression_statement-261-261", method="bug_tmstmp40()", type_label=expression_statement];
1737 [label="263_ function changeDepositAddress(address payable newDeposit) public onlyAdmin{\n        deposit = newDeposit;\n    }\n1737-function_definition-264-266", method="changeDepositAddress(address payable newDeposit)", type_label=function_definition];
1744 [label="263_ onlyAdmin\n1744-expression_statement-264-264", method="changeDepositAddress(address payable newDeposit)", type_label=expression_statement];
1747 [label="264_ deposit = newDeposit;\n1747-expression_statement-265-265", method="changeDepositAddress(address payable newDeposit)", type_label=expression_statement];
1751 [label="266_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1751-function_definition-267-269", method="bug_tmstmp33()", type_label=function_definition];
1760 [label="267_ return block.timestamp >= 1546300800;\n1760-return-268-268", method="bug_tmstmp33()", type_label=return];
1766 [label="269_ function getCurrentState() public view returns(State){\n        if(ieoState == State.halted){\n            return State.halted;\n        }else if(block.timestamp < saleStart){\n            return State.beforeStart;\n        }else if(block.timestamp >= saleStart && block.timestamp <= saleEnd){\n            return State.running;\n        }else{\n            return State.afterEnd;\n        }\n    }\n1766-function_definition-270-280", method="getCurrentState()", type_label=function_definition];
1776 [label="270_ if_ieoState == State.halted\n1776-if-271-279", method="getCurrentState()", type_label=if];
3913 [label="270_ end_if", method="getCurrentState()", type_label=end_if];
1783 [label="271_ return State.halted;\n1783-return-272-272", method="getCurrentState()", type_label=return];
1787 [label="272_ if_block.timestamp < saleStart\n1787-if-273-279", method="getCurrentState()", type_label=if];
1794 [label="273_ return State.beforeStart;\n1794-return-274-274", method="getCurrentState()", type_label=return];
1798 [label="274_ if_block.timestamp >= saleStart && block.timestamp <= saleEnd\n1798-if-275-279", method="getCurrentState()", type_label=if];
1811 [label="275_ return State.running;\n1811-return-276-276", method="getCurrentState()", type_label=return];
1816 [label="277_ return State.afterEnd;\n1816-return-278-278", method="getCurrentState()", type_label=return];
1820 [label="280_ address winner_tmstmp27;\n1820-new_variable-281-281", method="", type_label=new_variable];
1824 [label="281_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1824-function_definition-282-285", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1832 [label="282_ uint _vtime = block.timestamp;\n1832-new_variable-283-283", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1840 [label="283_ if_startTime + (5 * 1 days) == _vtime\n1840-if-284-285", method="play_tmstmp27(uint startTime)", type_label=if];
3977 [label="283_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1851 [label="284_ winner_tmstmp27 = msg.sender;\n1851-expression_statement-285-285", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1857 [label="285_ function invest() payable public returns(bool){\n        ieoState = getCurrentState();\n        require(ieoState == State.running);\n        require(msg.value >= minInvestment && msg.value <= maxInvestment);\n        uint tokens = msg.value / tokenPrice;\n        require(raisedAmount + msg.value <= hardCap);\n        raisedAmount += msg.value;\n        balances[msg.sender] += tokens;\n        balances[founder] -= tokens;\n        deposit.transfer(msg.value); \n        emit Invest(msg.sender, msg.value, tokens);\n        return true;\n    }\n1857-function_definition-286-298", method="invest()", type_label=function_definition];
1866 [label="286_ ieoState = getCurrentState();\n1866-expression_statement-287-287", method="invest()", type_label=expression_statement];
1871 [label="287_ require(ieoState == State.running);\n1871-expression_statement-288-288", method="invest()", type_label=expression_statement];
1880 [label="288_ require(msg.value >= minInvestment && msg.value <= maxInvestment);\n1880-expression_statement-289-289", method="invest()", type_label=expression_statement];
1895 [label="289_ uint tokens = msg.value / tokenPrice;\n1895-new_variable-290-290", method="invest()", type_label=new_variable];
1905 [label="290_ require(raisedAmount + msg.value <= hardCap);\n1905-expression_statement-291-291", method="invest()", type_label=expression_statement];
1916 [label="291_ raisedAmount += msg.value;\n1916-expression_statement-292-292", method="invest()", type_label=expression_statement];
1922 [label="292_ balances[msg.sender] += tokens;\n1922-expression_statement-293-293", method="invest()", type_label=expression_statement];
1930 [label="293_ balances[founder] -= tokens;\n1930-expression_statement-294-294", method="invest()", type_label=expression_statement];
1936 [label="294_ deposit.transfer(msg.value);\n1936-expression_statement-295-295", method="invest()", type_label=expression_statement];
1957 [label="296_ return true;\n1957-return-297-297", method="invest()", type_label=return];
1960 [label="298_ address winner_tmstmp31;\n1960-new_variable-299-299", method="", type_label=new_variable];
1964 [label="299_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1964-function_definition-300-303", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1972 [label="300_ uint _vtime = block.timestamp;\n1972-new_variable-301-301", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1980 [label="301_ if_startTime + (5 * 1 days) == _vtime\n1980-if-302-303", method="play_tmstmp31(uint startTime)", type_label=if];
4117 [label="301_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1991 [label="302_ winner_tmstmp31 = msg.sender;\n1991-expression_statement-303-303", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
2001 [label="304_ invest();\n2001-expression_statement-305-305", method="", type_label=expression_statement];
2004 [label="306_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2004-function_definition-307-309", method="bug_tmstmp13()", type_label=function_definition];
2013 [label="307_ return block.timestamp >= 1546300800;\n2013-return-308-308", method="bug_tmstmp13()", type_label=return];
2019 [label="309_ function burn() public returns(bool){\n        ieoState = getCurrentState();\n        require(ieoState == State.afterEnd);\n        balances[founder] = 0;\n    }\n2019-function_definition-310-314", method="burn()", type_label=function_definition];
2027 [label="310_ ieoState = getCurrentState();\n2027-expression_statement-311-311", method="burn()", type_label=expression_statement];
2032 [label="311_ require(ieoState == State.afterEnd);\n2032-expression_statement-312-312", method="burn()", type_label=expression_statement];
2041 [label="312_ balances[founder] = 0;\n2041-expression_statement-313-313", method="burn()", type_label=expression_statement];
2047 [label="314_ uint256 bugv_tmstmp5 = block.timestamp;\n2047-new_variable-315-315", method="", type_label=new_variable];
2054 [label="315_ function transfer(address to, uint value) public returns(bool){\n        require(block.timestamp > coinTradeStart);\n        super.transfer(to, value);\n    }\n2054-function_definition-316-319", method="transfer(address to,uint value)", type_label=function_definition];
2070 [label="316_ require(block.timestamp > coinTradeStart);\n2070-expression_statement-317-317", method="transfer(address to,uint value)", type_label=expression_statement];
2079 [label="317_ super.transfer(to, value);\n2079-expression_statement-318-318", method="transfer(address to,uint value)", type_label=expression_statement];
2088 [label="319_ uint256 bugv_tmstmp1 = block.timestamp;\n2088-new_variable-320-320", method="", type_label=new_variable];
2095 [label="320_ function transferFrom(address _from, address _to, uint _value) public returns(bool){\n        require(block.timestamp > coinTradeStart);\n        super.transferFrom(_from, _to, _value);\n    }\n2095-function_definition-321-324", method="transferFrom(address _from,address _to,uint _value)", type_label=function_definition];
2115 [label="321_ require(block.timestamp > coinTradeStart);\n2115-expression_statement-322-322", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
2124 [label="322_ super.transferFrom(_from, _to, _value);\n2124-expression_statement-323-323", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
2135 [label="324_ uint256 bugv_tmstmp2 = block.timestamp;\n2135-new_variable-325-325", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
319;
1181;
1997;
21 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
53 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
61 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 80  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
69 -> 2206  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2206 -> 86  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 2206  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
106 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 127  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
114 -> 2251  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2251 -> 133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 2251  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
150 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 188  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
181 -> 2318  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2318 -> 201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 2318  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
217 -> 222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
248 -> 255  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
248 -> 2385  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2385 -> 268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 2385  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
292 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 313  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
300 -> 2437  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2437 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 2437  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
353 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
358 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
380 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 391  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
384 -> 2521  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2521 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 2521  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
411 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
426 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 464  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
453 -> 2590  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2590 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 2590  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
476 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 514  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
507 -> 2644  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2644 -> 527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
514 -> 2644  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
527 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 557  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
544 -> 2681  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2681 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 2681  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
568 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
577 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
583 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 615  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
602 -> 2739  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2739 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 2739  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
659 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
706 -> 713  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
706 -> 2843  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2843 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 2843  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
726 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
753 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 780  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
769 -> 2906  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2906 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 2906  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
786 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
847 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 874  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
863 -> 3000  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3000 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 3000  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
880 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
920 -> 926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
926 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
947 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 968  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
955 -> 3092  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3092 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 3092  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
974 -> 983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
989 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 1010  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
997 -> 3134  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3134 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1010 -> 3134  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1016 -> 1030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1030 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1034 -> 1039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1039 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 1065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1065 -> 1072  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1065 -> 3202  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3202 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1072 -> 3202  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1085 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1148 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1164 -> 1175  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1164 -> 3301  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3301 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 3301  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1191 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 1212  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1199 -> 3336  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3336 -> 1218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 3336  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1223 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1233 -> 1243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1243 -> 1250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 1254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1254 -> 1261  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1254 -> 3391  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3391 -> 1274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1261 -> 3391  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1274 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1291 -> 1299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1299 -> 1310  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1299 -> 3436  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3436 -> 1316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 3436  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1322 -> 1331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1337 -> 1344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1348 -> 1356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1356 -> 1369  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1356 -> 3493  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3493 -> 1375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1369 -> 3493  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1380 -> 1389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1389 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1395 -> 1401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1401 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1417 -> 1426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1426 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1432 -> 1439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1443 -> 1451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1451 -> 1459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 1470  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1459 -> 3596  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3596 -> 1476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1470 -> 3596  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1489 -> 1498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1504 -> 1510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1510 -> 1524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1524 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1558 -> 1562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1562 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1574 -> 1579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1579 -> 1584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 1601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1601 -> 1605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1605 -> 1612  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1605 -> 3742  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3742 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1612 -> 3742  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1625 -> 1631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1641 -> 1649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1649 -> 1657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1657 -> 1668  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1657 -> 3794  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3794 -> 1674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1668 -> 3794  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1674 -> 1680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 1691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1691 -> 1696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1696 -> 1706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1706 -> 1713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1713 -> 1717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1717 -> 1724  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1717 -> 3854  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3854 -> 1737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1724 -> 3854  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1737 -> 1747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1751 -> 1760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1760 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1766 -> 1776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1776 -> 1783  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1776 -> 1787  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3913 -> 1820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1783 -> 3913  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1783 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1787 -> 1794  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1787 -> 1798  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1794 -> 3913  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1794 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1798 -> 1811  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1798 -> 1816  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1811 -> 3913  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1811 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1816 -> 3913  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1816 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1824 -> 1832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1832 -> 1840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1840 -> 1851  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1840 -> 3977  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3977 -> 1857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1851 -> 3977  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1857 -> 1866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1866 -> 1871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1871 -> 1880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1880 -> 1895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1895 -> 1905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1905 -> 1916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1916 -> 1922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1922 -> 1930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1930 -> 1936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1957 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1964 -> 1972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1972 -> 1980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1980 -> 1991  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1980 -> 4117  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4117 -> 1997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1991 -> 4117  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2004 -> 2013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2013 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2019 -> 2027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2027 -> 2032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2032 -> 2041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2054 -> 2070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2070 -> 2079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2095 -> 2115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2115 -> 2124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
