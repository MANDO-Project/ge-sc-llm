digraph  {
13 [label="2_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n13-function_definition-3-5", method="bug_tmstmp9()", type_label=function_definition];
22 [label="3_ return block.timestamp >= 1546300800;\n22-return-4-4", method="bug_tmstmp9()", type_label=return];
28 [label="5_ address public owner;\n28-new_variable-6-6", method="", type_label=new_variable];
33 [label="6_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n33-function_definition-7-9", method="bug_tmstmp25()", type_label=function_definition];
42 [label="7_ return block.timestamp >= 1546300800;\n42-return-8-8", method="bug_tmstmp25()", type_label=return];
48 [label="9_ address public newOwner;\n48-new_variable-10-10", method="", type_label=new_variable];
53 [label="10_ uint256 bugv_tmstmp2 = block.timestamp;\n53-new_variable-11-11", method="", type_label=new_variable];
72 [label="13_ owner = msg.sender;\n72-expression_statement-14-14", method="", type_label=expression_statement];
78 [label="15_ address winner_tmstmp23;\n78-new_variable-16-16", method="", type_label=new_variable];
82 [label="16_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n82-function_definition-17-20", method="play_tmstmp23(uint startTime)", type_label=function_definition];
90 [label="17_ uint _vtime = block.timestamp;\n90-new_variable-18-18", method="play_tmstmp23(uint startTime)", type_label=new_variable];
98 [label="18_ if_startTime + (5 * 1 days) == _vtime\n98-if-19-20", method="play_tmstmp23(uint startTime)", type_label=if];
1653 [label="18_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
109 [label="19_ winner_tmstmp23 = msg.sender;\n109-expression_statement-20-20", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
115 [label="20_ modifier onlyOwner {\n        require(msg.sender == owner || msg.sender == address(this));\n        _;\n    }\n115-expression_statement-21-24", method="", type_label=expression_statement];
118 [label="21_ require(msg.sender == owner || msg.sender == address(this));\n118-expression_statement-22-22", method="", type_label=expression_statement];
135 [label="22_ _;\n135-expression_statement-23-23", method="", type_label=expression_statement];
137 [label="24_ uint256 bugv_tmstmp1 = block.timestamp;\n137-new_variable-25-25", method="", type_label=new_variable];
144 [label="25_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n144-function_definition-26-28", method="transferOwnership(address _newOwner)", type_label=function_definition];
151 [label="25_ onlyOwner\n151-expression_statement-26-26", method="transferOwnership(address _newOwner)", type_label=expression_statement];
154 [label="26_ newOwner = _newOwner;\n154-expression_statement-27-27", method="transferOwnership(address _newOwner)", type_label=expression_statement];
158 [label="28_ address winner_tmstmp14;\n158-new_variable-29-29", method="", type_label=new_variable];
162 [label="29_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n162-function_definition-30-32", method="play_tmstmp14(uint startTime)", type_label=function_definition];
170 [label="30_ if_startTime + (5 * 1 days) == block.timestamp\n170-if-31-32", method="play_tmstmp14(uint startTime)", type_label=if];
1725 [label="30_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
183 [label="31_ winner_tmstmp14 = msg.sender;\n183-expression_statement-32-32", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
192 [label="34_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n192-function_definition-35-42", method="mul(uint256 a,uint256 b)", type_label=function_definition];
209 [label="35_ if_a == 0\n209-if-36-38", method="mul(uint256 a,uint256 b)", type_label=if];
1764 [label="35_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
214 [label="36_ return 0;\n214-return-37-37", method="mul(uint256 a,uint256 b)", type_label=return];
216 [label="38_ uint256 c = a * b;\n216-new_variable-39-39", method="mul(uint256 a,uint256 b)", type_label=new_variable];
224 [label="39_ assert(c / a == b);\n224-expression_statement-40-40", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
233 [label="40_ return c;\n233-return-41-41", method="mul(uint256 a,uint256 b)", type_label=return];
235 [label="42_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n235-function_definition-43-46", method="div(uint256 a,uint256 b)", type_label=function_definition];
252 [label="43_ uint256 c = a / b;\n252-new_variable-44-44", method="div(uint256 a,uint256 b)", type_label=new_variable];
260 [label="44_ return c;\n260-return-45-45", method="div(uint256 a,uint256 b)", type_label=return];
262 [label="46_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n262-function_definition-47-50", method="sub(uint256 a,uint256 b)", type_label=function_definition];
279 [label="47_ assert(b <= a);\n279-expression_statement-48-48", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
286 [label="48_ return a - b;\n286-return-49-49", method="sub(uint256 a,uint256 b)", type_label=return];
290 [label="50_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n290-function_definition-51-55", method="add(uint256 a,uint256 b)", type_label=function_definition];
307 [label="51_ uint256 c = a + b;\n307-new_variable-52-52", method="add(uint256 a,uint256 b)", type_label=new_variable];
315 [label="52_ assert(c >= a);\n315-expression_statement-53-53", method="add(uint256 a,uint256 b)", type_label=expression_statement];
322 [label="53_ return c;\n322-return-54-54", method="add(uint256 a,uint256 b)", type_label=return];
324 [label="55_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n324-function_definition-56-60", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
341 [label="56_ uint256 c = add(a,m);\n341-new_variable-57-57", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
352 [label="57_ uint256 d = sub(c,1);\n352-new_variable-58-58", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
363 [label="58_ return mul(div(d,m),m);\n363-return-59-59", method="ceil(uint256 a,uint256 m)", type_label=return];
378 [label="62_ function balanceOf(address who) external view returns (uint256);\n378-function_definition-63-63", method="balanceOf(address who)", type_label=function_definition];
390 [label="63_ address winner_tmstmp30;\n390-new_variable-64-64", method="", type_label=new_variable];
394 [label="64_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n394-function_definition-65-67", method="play_tmstmp30(uint startTime)", type_label=function_definition];
402 [label="65_ if_startTime + (5 * 1 days) == block.timestamp\n402-if-66-67", method="play_tmstmp30(uint startTime)", type_label=if];
1957 [label="65_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
415 [label="66_ winner_tmstmp30 = msg.sender;\n415-expression_statement-67-67", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
421 [label="67_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n421-function_definition-68-68", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
440 [label="68_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n440-function_definition-69-77", method="bug_tmstmp8()", type_label=function_definition];
445 [label="69_ uint pastBlockTime_tmstmp8;\n445-new_variable-70-70", method="bug_tmstmp8()", type_label=new_variable];
450 [label="70_ require(msg.value == 10 ether);\n450-expression_statement-71-71", method="bug_tmstmp8()", type_label=expression_statement];
460 [label="71_ require(now != pastBlockTime_tmstmp8);\n460-expression_statement-72-72", method="bug_tmstmp8()", type_label=expression_statement];
467 [label="72_ pastBlockTime_tmstmp8 = now;\n467-expression_statement-73-73", method="bug_tmstmp8()", type_label=expression_statement];
471 [label="73_ if_now % 15 == 0\n471-if-74-76", method="bug_tmstmp8()", type_label=if];
2026 [label="73_ end_if", method="bug_tmstmp8()", type_label=end_if];
478 [label="74_ msg.sender.transfer(address(this).balance);\n478-expression_statement-75-75", method="bug_tmstmp8()", type_label=expression_statement];
491 [label="77_ function transfer(address to, uint256 value) external returns (bool);\n491-function_definition-78-78", method="transfer(address to,uint256 value)", type_label=function_definition];
506 [label="78_ address winner_tmstmp39;\n506-new_variable-79-79", method="", type_label=new_variable];
510 [label="79_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n510-function_definition-80-83", method="play_tmstmp39(uint startTime)", type_label=function_definition];
518 [label="80_ uint _vtime = block.timestamp;\n518-new_variable-81-81", method="play_tmstmp39(uint startTime)", type_label=new_variable];
526 [label="81_ if_startTime + (5 * 1 days) == _vtime\n526-if-82-83", method="play_tmstmp39(uint startTime)", type_label=if];
2081 [label="81_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
537 [label="82_ winner_tmstmp39 = msg.sender;\n537-expression_statement-83-83", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
549 [label="85_ address winner_tmstmp19;\n549-new_variable-86-86", method="", type_label=new_variable];
553 [label="86_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n553-function_definition-87-90", method="play_tmstmp19(uint startTime)", type_label=function_definition];
561 [label="87_ uint _vtime = block.timestamp;\n561-new_variable-88-88", method="play_tmstmp19(uint startTime)", type_label=new_variable];
569 [label="88_ if_startTime + (5 * 1 days) == _vtime\n569-if-89-90", method="play_tmstmp19(uint startTime)", type_label=if];
2124 [label="88_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
580 [label="89_ winner_tmstmp19 = msg.sender;\n580-expression_statement-90-90", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
586 [label="90_ Token public token;\n586-new_variable-91-91", method="", type_label=new_variable];
592 [label="91_ address winner_tmstmp26;\n592-new_variable-92-92", method="", type_label=new_variable];
596 [label="92_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n596-function_definition-93-95", method="play_tmstmp26(uint startTime)", type_label=function_definition];
604 [label="93_ if_startTime + (5 * 1 days) == block.timestamp\n604-if-94-95", method="play_tmstmp26(uint startTime)", type_label=if];
2159 [label="93_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
617 [label="94_ winner_tmstmp26 = msg.sender;\n617-expression_statement-95-95", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
623 [label="95_ bool lock;\n623-new_variable-96-96", method="", type_label=new_variable];
627 [label="96_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n627-function_definition-97-105", method="bug_tmstmp20()", type_label=function_definition];
632 [label="97_ uint pastBlockTime_tmstmp20;\n632-new_variable-98-98", method="bug_tmstmp20()", type_label=new_variable];
637 [label="98_ require(msg.value == 10 ether);\n637-expression_statement-99-99", method="bug_tmstmp20()", type_label=expression_statement];
647 [label="99_ require(now != pastBlockTime_tmstmp20);\n647-expression_statement-100-100", method="bug_tmstmp20()", type_label=expression_statement];
654 [label="100_ pastBlockTime_tmstmp20 = now;\n654-expression_statement-101-101", method="bug_tmstmp20()", type_label=expression_statement];
658 [label="101_ if_now % 15 == 0\n658-if-102-104", method="bug_tmstmp20()", type_label=if];
2213 [label="101_ end_if", method="bug_tmstmp20()", type_label=end_if];
665 [label="102_ msg.sender.transfer(address(this).balance);\n665-expression_statement-103-103", method="bug_tmstmp20()", type_label=expression_statement];
678 [label="105_ uint256 public minstakeTokens;\n678-new_variable-106-106", method="", type_label=new_variable];
683 [label="106_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n683-function_definition-107-115", method="bug_tmstmp32()", type_label=function_definition];
688 [label="107_ uint pastBlockTime_tmstmp32;\n688-new_variable-108-108", method="bug_tmstmp32()", type_label=new_variable];
693 [label="108_ require(msg.value == 10 ether);\n693-expression_statement-109-109", method="bug_tmstmp32()", type_label=expression_statement];
703 [label="109_ require(now != pastBlockTime_tmstmp32);\n703-expression_statement-110-110", method="bug_tmstmp32()", type_label=expression_statement];
710 [label="110_ pastBlockTime_tmstmp32 = now;\n710-expression_statement-111-111", method="bug_tmstmp32()", type_label=expression_statement];
714 [label="111_ if_now % 15 == 0\n714-if-112-114", method="bug_tmstmp32()", type_label=if];
2269 [label="111_ end_if", method="bug_tmstmp32()", type_label=end_if];
721 [label="112_ msg.sender.transfer(address(this).balance);\n721-expression_statement-113-113", method="bug_tmstmp32()", type_label=expression_statement];
734 [label="115_ uint256 private basePercent = 200;\n734-new_variable-116-116", method="", type_label=new_variable];
745 [label="117_ address winner_tmstmp38;\n745-new_variable-118-118", method="", type_label=new_variable];
749 [label="118_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n749-function_definition-119-121", method="play_tmstmp38(uint startTime)", type_label=function_definition];
757 [label="119_ if_startTime + (5 * 1 days) == block.timestamp\n757-if-120-121", method="play_tmstmp38(uint startTime)", type_label=if];
2312 [label="119_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
770 [label="120_ winner_tmstmp38 = msg.sender;\n770-expression_statement-121-121", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
776 [label="121_ uint256 public stakeTime = 1814400;\n776-new_variable-122-122", method="", type_label=new_variable];
782 [label="122_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n782-function_definition-123-131", method="bug_tmstmp4()", type_label=function_definition];
787 [label="123_ uint pastBlockTime_tmstmp4;\n787-new_variable-124-124", method="bug_tmstmp4()", type_label=new_variable];
792 [label="124_ require(msg.value == 10 ether);\n792-expression_statement-125-125", method="bug_tmstmp4()", type_label=expression_statement];
802 [label="125_ require(now != pastBlockTime_tmstmp4);\n802-expression_statement-126-126", method="bug_tmstmp4()", type_label=expression_statement];
809 [label="126_ pastBlockTime_tmstmp4 = now;\n809-expression_statement-127-127", method="bug_tmstmp4()", type_label=expression_statement];
813 [label="127_ if_now % 15 == 0\n813-if-128-130", method="bug_tmstmp4()", type_label=if];
2368 [label="127_ end_if", method="bug_tmstmp4()", type_label=end_if];
820 [label="128_ msg.sender.transfer(address(this).balance);\n820-expression_statement-129-129", method="bug_tmstmp4()", type_label=expression_statement];
833 [label="131_ uint public stakePercentage = 30;\n833-new_variable-132-132", method="", type_label=new_variable];
839 [label="132_ uint256 bugv_tmstmp3 = block.timestamp;\n839-new_variable-133-133", method="", type_label=new_variable];
860 [label="134_ uint256 bugv_tmstmp4 = block.timestamp;\n860-new_variable-135-135", method="", type_label=new_variable];
881 [label="136_ struct stake{\n        uint256 time;\n        bool redeem;\n        uint256 tokens;\n    }\n881-expression_statement-137-141", method="stake()", type_label=expression_statement];
895 [label="141_ address winner_tmstmp7;\n895-new_variable-142-142", method="", type_label=new_variable];
899 [label="142_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n899-function_definition-143-146", method="play_tmstmp7(uint startTime)", type_label=function_definition];
907 [label="143_ uint _vtime = block.timestamp;\n907-new_variable-144-144", method="play_tmstmp7(uint startTime)", type_label=new_variable];
915 [label="144_ if_startTime + (5 * 1 days) == _vtime\n915-if-145-146", method="play_tmstmp7(uint startTime)", type_label=if];
2470 [label="144_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
926 [label="145_ winner_tmstmp7 = msg.sender;\n926-expression_statement-146-146", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
932 [label="146_ mapping(address => stake) staker;\n932-new_variable-147-147", method="", type_label=new_variable];
945 [label="148_ token = Token(tokenContractAddress);\n945-expression_statement-149-149", method="", type_label=expression_statement];
952 [label="149_ owner = msg.sender;\n952-expression_statement-150-150", method="", type_label=expression_statement];
958 [label="150_ minstakeTokens = 500 * 10 ** uint(10);\n958-expression_statement-151-151", method="", type_label=expression_statement];
968 [label="152_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n968-function_definition-153-161", method="bug_tmstmp36()", type_label=function_definition];
973 [label="153_ uint pastBlockTime_tmstmp36;\n973-new_variable-154-154", method="bug_tmstmp36()", type_label=new_variable];
978 [label="154_ require(msg.value == 10 ether);\n978-expression_statement-155-155", method="bug_tmstmp36()", type_label=expression_statement];
988 [label="155_ require(now != pastBlockTime_tmstmp36);\n988-expression_statement-156-156", method="bug_tmstmp36()", type_label=expression_statement];
995 [label="156_ pastBlockTime_tmstmp36 = now;\n995-expression_statement-157-157", method="bug_tmstmp36()", type_label=expression_statement];
999 [label="157_ if_now % 15 == 0\n999-if-158-160", method="bug_tmstmp36()", type_label=if];
2554 [label="157_ end_if", method="bug_tmstmp36()", type_label=end_if];
1006 [label="158_ msg.sender.transfer(address(this).balance);\n1006-expression_statement-159-159", method="bug_tmstmp36()", type_label=expression_statement];
1019 [label="161_ function startStaking(uint256 stakeTokens) public{\n        require(stakeTokens >= minstakeTokens);\n        require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));\n        require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));\n        staker[msg.sender].time = now;\n        staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;\n        emit stakingstarted(msg.sender, staker[msg.sender].tokens, staker[msg.sender].time);\n    }\n1019-function_definition-162-169", method="startStaking(uint256 stakeTokens)", type_label=function_definition];
1027 [label="162_ require(stakeTokens >= minstakeTokens);\n1027-expression_statement-163-163", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1034 [label="163_ require(token.balanceOf(msg.sender) >= stakeTokens + findOnePercent(stakeTokens));\n1034-expression_statement-164-164", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1053 [label="164_ require(token.transferFrom(msg.sender, address(this), stakeTokens  + findOnePercent(stakeTokens)));\n1053-expression_statement-165-165", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1076 [label="165_ staker[msg.sender].time = now;\n1076-expression_statement-166-166", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1086 [label="166_ staker[msg.sender].tokens =  staker[msg.sender].tokens + stakeTokens;\n1086-expression_statement-167-167", method="startStaking(uint256 stakeTokens)", type_label=expression_statement];
1126 [label="169_ address winner_tmstmp35;\n1126-new_variable-170-170", method="", type_label=new_variable];
1130 [label="170_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1130-function_definition-171-174", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1138 [label="171_ uint _vtime = block.timestamp;\n1138-new_variable-172-172", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1146 [label="172_ if_startTime + (5 * 1 days) == _vtime\n1146-if-173-174", method="play_tmstmp35(uint startTime)", type_label=if];
2701 [label="172_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1157 [label="173_ winner_tmstmp35 = msg.sender;\n1157-expression_statement-174-174", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1163 [label="174_ function redeem() public{\n        require(!lock);\n        require(!staker[msg.sender].redeem);\n        require(staker[msg.sender].time + stakeTime <= now);\n        require(token.transfer(msg.sender,staker[msg.sender].tokens));\n        require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));\n        emit tokensRedeemed(msg.sender, staker[msg.sender].tokens, staker[msg.sender].tokens * stakePercentage * 100 / 10000);\n        staker[msg.sender].redeem = true;\n        staker[msg.sender].tokens = 0;\n    }\n1163-function_definition-175-184", method="redeem()", type_label=function_definition];
1167 [label="175_ require(!lock);\n1167-expression_statement-176-176", method="redeem()", type_label=expression_statement];
1173 [label="176_ require(!staker[msg.sender].redeem);\n1173-expression_statement-177-177", method="redeem()", type_label=expression_statement];
1185 [label="177_ require(staker[msg.sender].time + stakeTime <= now);\n1185-expression_statement-178-178", method="redeem()", type_label=expression_statement];
1200 [label="178_ require(token.transfer(msg.sender,staker[msg.sender].tokens));\n1200-expression_statement-179-179", method="redeem()", type_label=expression_statement];
1220 [label="179_ require(token.transferFrom(owner, msg.sender ,staker[msg.sender].tokens * stakePercentage * 100 / 10000));\n1220-expression_statement-180-180", method="redeem()", type_label=expression_statement];
1276 [label="181_ staker[msg.sender].redeem = true;\n1276-expression_statement-182-182", method="redeem()", type_label=expression_statement];
1287 [label="182_ staker[msg.sender].tokens = 0;\n1287-expression_statement-183-183", method="redeem()", type_label=expression_statement];
1297 [label="184_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1297-function_definition-185-193", method="bug_tmstmp40()", type_label=function_definition];
1302 [label="185_ uint pastBlockTime_tmstmp40;\n1302-new_variable-186-186", method="bug_tmstmp40()", type_label=new_variable];
1307 [label="186_ require(msg.value == 10 ether);\n1307-expression_statement-187-187", method="bug_tmstmp40()", type_label=expression_statement];
1317 [label="187_ require(now != pastBlockTime_tmstmp40);\n1317-expression_statement-188-188", method="bug_tmstmp40()", type_label=expression_statement];
1324 [label="188_ pastBlockTime_tmstmp40 = now;\n1324-expression_statement-189-189", method="bug_tmstmp40()", type_label=expression_statement];
1328 [label="189_ if_now % 15 == 0\n1328-if-190-192", method="bug_tmstmp40()", type_label=if];
2883 [label="189_ end_if", method="bug_tmstmp40()", type_label=end_if];
1335 [label="190_ msg.sender.transfer(address(this).balance);\n1335-expression_statement-191-191", method="bug_tmstmp40()", type_label=expression_statement];
1348 [label="193_ function changeStakeTokens(uint256 _NewTokensThreshold) public onlyOwner{\n        minstakeTokens = _NewTokensThreshold * 10 ** uint(10);\n    }\n1348-function_definition-194-196", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=function_definition];
1355 [label="193_ onlyOwner\n1355-expression_statement-194-194", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=expression_statement];
1358 [label="194_ minstakeTokens = _NewTokensThreshold * 10 ** uint(10);\n1358-expression_statement-195-195", method="changeStakeTokens(uint256 _NewTokensThreshold)", type_label=expression_statement];
1368 [label="196_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1368-function_definition-197-199", method="bug_tmstmp33()", type_label=function_definition];
1377 [label="197_ return block.timestamp >= 1546300800;\n1377-return-198-198", method="bug_tmstmp33()", type_label=return];
1383 [label="199_ function changeStakeTime(uint256 _newStakeTime) public onlyOwner{\n        stakeTime = _newStakeTime;\n    }\n1383-function_definition-200-202", method="changeStakeTime(uint256 _newStakeTime)", type_label=function_definition];
1390 [label="199_ onlyOwner\n1390-expression_statement-200-200", method="changeStakeTime(uint256 _newStakeTime)", type_label=expression_statement];
1393 [label="200_ stakeTime = _newStakeTime;\n1393-expression_statement-201-201", method="changeStakeTime(uint256 _newStakeTime)", type_label=expression_statement];
1397 [label="202_ address winner_tmstmp27;\n1397-new_variable-203-203", method="", type_label=new_variable];
1401 [label="203_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1401-function_definition-204-207", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1409 [label="204_ uint _vtime = block.timestamp;\n1409-new_variable-205-205", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1417 [label="205_ if_startTime + (5 * 1 days) == _vtime\n1417-if-206-207", method="play_tmstmp27(uint startTime)", type_label=if];
2972 [label="205_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1428 [label="206_ winner_tmstmp27 = msg.sender;\n1428-expression_statement-207-207", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1434 [label="207_ function changeStakingPercentage(uint _newStakePercentage) public onlyOwner{\n        stakePercentage = _newStakePercentage;\n    }\n1434-function_definition-208-210", method="changeStakingPercentage(uint _newStakePercentage)", type_label=function_definition];
1441 [label="207_ onlyOwner\n1441-expression_statement-208-208", method="changeStakingPercentage(uint _newStakePercentage)", type_label=expression_statement];
1444 [label="208_ stakePercentage = _newStakePercentage;\n1444-expression_statement-209-209", method="changeStakingPercentage(uint _newStakePercentage)", type_label=expression_statement];
1448 [label="210_ address winner_tmstmp31;\n1448-new_variable-211-211", method="", type_label=new_variable];
1452 [label="211_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1452-function_definition-212-215", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1460 [label="212_ uint _vtime = block.timestamp;\n1460-new_variable-213-213", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1468 [label="213_ if_startTime + (5 * 1 days) == _vtime\n1468-if-214-215", method="play_tmstmp31(uint startTime)", type_label=if];
3023 [label="213_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1479 [label="214_ winner_tmstmp31 = msg.sender;\n1479-expression_statement-215-215", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1485 [label="215_ function lockWithdrawals() public onlyOwner{\n        lock = true;\n    }\n1485-function_definition-216-218", method="lockWithdrawals()", type_label=function_definition];
1488 [label="215_ onlyOwner\n1488-expression_statement-216-216", method="lockWithdrawals()", type_label=expression_statement];
1491 [label="216_ lock = true;\n1491-expression_statement-217-217", method="lockWithdrawals()", type_label=expression_statement];
1496 [label="218_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1496-function_definition-219-221", method="bug_tmstmp13()", type_label=function_definition];
1505 [label="219_ return block.timestamp >= 1546300800;\n1505-return-220-220", method="bug_tmstmp13()", type_label=return];
1511 [label="221_ function findOnePercent(uint256 value) private view returns (uint256)  {\n        uint256 roundValue = value.ceil(basePercent);\n        uint256 onePercent = roundValue.mul(basePercent).div(10000);\n        return onePercent;\n    }\n1511-function_definition-222-226", method="findOnePercent(uint256 value)", type_label=function_definition];
1524 [label="222_ uint256 roundValue = value.ceil(basePercent);\n1524-new_variable-223-223", method="findOnePercent(uint256 value)", type_label=new_variable];
1535 [label="223_ uint256 onePercent = roundValue.mul(basePercent).div(10000);\n1535-new_variable-224-224", method="findOnePercent(uint256 value)", type_label=new_variable];
1551 [label="224_ return onePercent;\n1551-return-225-225", method="findOnePercent(uint256 value)", type_label=return];
1553 [label="226_ uint256 bugv_tmstmp5 = block.timestamp;\n1553-new_variable-227-227", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
189;
543;
13 -> 22  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
22 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
33 -> 42  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
48 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
98 -> 1653  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1653 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 1653  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
115 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
118 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 183  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
170 -> 1725  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1725 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
183 -> 1725  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
192 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 214  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
209 -> 1764  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1764 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 1764  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
214 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
216 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
224 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
235 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
260 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
262 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
290 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
324 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
341 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
394 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
402 -> 415  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
402 -> 1957  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1957 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 1957  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
440 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 478  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
471 -> 2026  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2026 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 2026  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
510 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
526 -> 537  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
526 -> 2081  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2081 -> 543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 2081  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
553 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
569 -> 580  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
569 -> 2124  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2124 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 2124  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
586 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 617  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
604 -> 2159  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2159 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 2159  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
627 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 665  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
658 -> 2213  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2213 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 2213  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
683 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
714 -> 721  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
714 -> 2269  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2269 -> 734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
721 -> 2269  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
749 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 770  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
757 -> 2312  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2312 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 2312  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
782 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 820  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
813 -> 2368  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2368 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
820 -> 2368  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
833 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
899 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
915 -> 926  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
915 -> 2470  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2470 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
926 -> 2470  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
945 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
999 -> 1006  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
999 -> 2554  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2554 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 2554  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1019 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 1034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1130 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 1157  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1146 -> 2701  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2701 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1157 -> 2701  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1163 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 1173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1173 -> 1185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1185 -> 1200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1200 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 1287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 1302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1302 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1317 -> 1324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1324 -> 1328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 1335  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1328 -> 2883  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2883 -> 1348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1335 -> 2883  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1348 -> 1358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1368 -> 1377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1377 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1383 -> 1393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1401 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1409 -> 1417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1417 -> 1428  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1417 -> 2972  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2972 -> 1434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1428 -> 2972  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1434 -> 1444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1452 -> 1460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1468 -> 1479  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1468 -> 3023  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3023 -> 1485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1479 -> 3023  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1485 -> 1491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1496 -> 1505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1505 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1511 -> 1524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1524 -> 1535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1535 -> 1551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1551 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
