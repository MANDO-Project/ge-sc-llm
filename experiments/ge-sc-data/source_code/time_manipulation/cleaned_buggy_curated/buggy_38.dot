digraph  {
13 [label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address who) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [label="4_ function allowance(address owner, address spender) external view returns (uint256);\n33-function_definition-5-5", method="allowance(address owner,address spender)", type_label=function_definition];
49 [label="5_ function transfer(address to, uint256 value) external returns (bool);\n49-function_definition-6-6", method="transfer(address to,uint256 value)", type_label=function_definition];
64 [label="6_ function approve(address spender, uint256 value) external returns (bool);\n64-function_definition-7-7", method="approve(address spender,uint256 value)", type_label=function_definition];
79 [label="7_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n79-function_definition-8-8", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
129 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n129-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
146 [label="13_ if_a == 0\n146-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
2212 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
151 [label="14_ return 0;\n151-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
153 [label="16_ uint256 c = a * b;\n153-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
161 [label="17_ assert(c / a == b);\n161-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
170 [label="18_ return c;\n170-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
172 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n172-function_definition-21-24", method="div(uint256 a,uint256 b)", type_label=function_definition];
189 [label="21_ uint256 c = a / b;\n189-new_variable-22-22", method="div(uint256 a,uint256 b)", type_label=new_variable];
197 [label="22_ return c;\n197-return-23-23", method="div(uint256 a,uint256 b)", type_label=return];
199 [label="24_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n199-function_definition-25-28", method="sub(uint256 a,uint256 b)", type_label=function_definition];
216 [label="25_ assert(b <= a);\n216-expression_statement-26-26", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
223 [label="26_ return a - b;\n223-return-27-27", method="sub(uint256 a,uint256 b)", type_label=return];
227 [label="28_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n227-function_definition-29-33", method="add(uint256 a,uint256 b)", type_label=function_definition];
244 [label="29_ uint256 c = a + b;\n244-new_variable-30-30", method="add(uint256 a,uint256 b)", type_label=new_variable];
252 [label="30_ assert(c >= a);\n252-expression_statement-31-31", method="add(uint256 a,uint256 b)", type_label=expression_statement];
259 [label="31_ return c;\n259-return-32-32", method="add(uint256 a,uint256 b)", type_label=return];
261 [label="33_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n261-function_definition-34-38", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
278 [label="34_ uint256 c = add(a,m);\n278-new_variable-35-35", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
289 [label="35_ uint256 d = sub(c,1);\n289-new_variable-36-36", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
300 [label="36_ return mul(div(d,m),m);\n300-return-37-37", method="ceil(uint256 a,uint256 m)", type_label=return];
318 [label="40_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n318-function_definition-41-43", method="bug_tmstmp17()", type_label=function_definition];
327 [label="41_ return block.timestamp >= 1546300800;\n327-return-42-42", method="bug_tmstmp17()", type_label=return];
333 [label="43_ string private _name;\n333-new_variable-44-44", method="", type_label=new_variable];
338 [label="44_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n338-function_definition-45-47", method="bug_tmstmp37()", type_label=function_definition];
347 [label="45_ return block.timestamp >= 1546300800;\n347-return-46-46", method="bug_tmstmp37()", type_label=return];
353 [label="47_ string private _symbol;\n353-new_variable-48-48", method="", type_label=new_variable];
358 [label="48_ address winner_tmstmp3;\n358-new_variable-49-49", method="", type_label=new_variable];
362 [label="49_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n362-function_definition-50-53", method="play_tmstmp3(uint startTime)", type_label=function_definition];
370 [label="50_ uint _vtime = block.timestamp;\n370-new_variable-51-51", method="play_tmstmp3(uint startTime)", type_label=new_variable];
378 [label="51_ if_startTime + (5 * 1 days) == _vtime\n378-if-52-53", method="play_tmstmp3(uint startTime)", type_label=if];
2444 [label="51_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
389 [label="52_ winner_tmstmp3 = msg.sender;\n389-expression_statement-53-53", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
395 [label="53_ uint8 private _decimals;\n395-new_variable-54-54", method="", type_label=new_variable];
414 [label="55_ _name = name;\n414-expression_statement-56-56", method="", type_label=expression_statement];
418 [label="56_ _symbol = symbol;\n418-expression_statement-57-57", method="", type_label=expression_statement];
422 [label="57_ _decimals = decimals;\n422-expression_statement-58-58", method="", type_label=expression_statement];
426 [label="59_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n426-function_definition-60-68", method="bug_tmstmp4()", type_label=function_definition];
431 [label="60_ uint pastBlockTime_tmstmp4;\n431-new_variable-61-61", method="bug_tmstmp4()", type_label=new_variable];
436 [label="61_ require(msg.value == 10 ether);\n436-expression_statement-62-62", method="bug_tmstmp4()", type_label=expression_statement];
446 [label="62_ require(now != pastBlockTime_tmstmp4);\n446-expression_statement-63-63", method="bug_tmstmp4()", type_label=expression_statement];
453 [label="63_ pastBlockTime_tmstmp4 = now;\n453-expression_statement-64-64", method="bug_tmstmp4()", type_label=expression_statement];
457 [label="64_ if_now % 15 == 0\n457-if-65-67", method="bug_tmstmp4()", type_label=if];
2523 [label="64_ end_if", method="bug_tmstmp4()", type_label=end_if];
464 [label="65_ msg.sender.transfer(address(this).balance);\n464-expression_statement-66-66", method="bug_tmstmp4()", type_label=expression_statement];
477 [label="68_ function name() public view returns(string memory) {\n    return _name;\n  }\n477-function_definition-69-71", method="name()", type_label=function_definition];
486 [label="69_ return _name;\n486-return-70-70", method="name()", type_label=return];
488 [label="71_ address winner_tmstmp7;\n488-new_variable-72-72", method="", type_label=new_variable];
492 [label="72_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n492-function_definition-73-76", method="play_tmstmp7(uint startTime)", type_label=function_definition];
500 [label="73_ uint _vtime = block.timestamp;\n500-new_variable-74-74", method="play_tmstmp7(uint startTime)", type_label=new_variable];
508 [label="74_ if_startTime + (5 * 1 days) == _vtime\n508-if-75-76", method="play_tmstmp7(uint startTime)", type_label=if];
2574 [label="74_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
519 [label="75_ winner_tmstmp7 = msg.sender;\n519-expression_statement-76-76", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
525 [label="76_ function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n525-function_definition-77-79", method="symbol()", type_label=function_definition];
534 [label="77_ return _symbol;\n534-return-78-78", method="symbol()", type_label=return];
536 [label="79_ address winner_tmstmp23;\n536-new_variable-80-80", method="", type_label=new_variable];
540 [label="80_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n540-function_definition-81-84", method="play_tmstmp23(uint startTime)", type_label=function_definition];
548 [label="81_ uint _vtime = block.timestamp;\n548-new_variable-82-82", method="play_tmstmp23(uint startTime)", type_label=new_variable];
556 [label="82_ if_startTime + (5 * 1 days) == _vtime\n556-if-83-84", method="play_tmstmp23(uint startTime)", type_label=if];
2622 [label="82_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
567 [label="83_ winner_tmstmp23 = msg.sender;\n567-expression_statement-84-84", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
573 [label="84_ function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n573-function_definition-85-87", method="decimals()", type_label=function_definition];
582 [label="85_ return _decimals;\n582-return-86-86", method="decimals()", type_label=return];
584 [label="87_ address winner_tmstmp14;\n584-new_variable-88-88", method="", type_label=new_variable];
588 [label="88_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n588-function_definition-89-91", method="play_tmstmp14(uint startTime)", type_label=function_definition];
596 [label="89_ if_startTime + (5 * 1 days) == block.timestamp\n596-if-90-91", method="play_tmstmp14(uint startTime)", type_label=if];
2662 [label="89_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
609 [label="90_ winner_tmstmp14 = msg.sender;\n609-expression_statement-91-91", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
626 [label="94_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n626-function_definition-95-97", method="bug_tmstmp9()", type_label=function_definition];
635 [label="95_ return block.timestamp >= 1546300800;\n635-return-96-96", method="bug_tmstmp9()", type_label=return];
641 [label="97_ mapping (address => uint256) private _balances;\n641-new_variable-98-98", method="", type_label=new_variable];
648 [label="98_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n648-function_definition-99-101", method="bug_tmstmp25()", type_label=function_definition];
657 [label="99_ return block.timestamp >= 1546300800;\n657-return-100-100", method="bug_tmstmp25()", type_label=return];
663 [label="101_ mapping (address => mapping (address => uint256)) private _allowed;\n663-new_variable-102-102", method="", type_label=new_variable];
672 [label="102_ address winner_tmstmp19;\n672-new_variable-103-103", method="", type_label=new_variable];
676 [label="103_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n676-function_definition-104-107", method="play_tmstmp19(uint startTime)", type_label=function_definition];
684 [label="104_ uint _vtime = block.timestamp;\n684-new_variable-105-105", method="play_tmstmp19(uint startTime)", type_label=new_variable];
692 [label="105_ if_startTime + (5 * 1 days) == _vtime\n692-if-106-107", method="play_tmstmp19(uint startTime)", type_label=if];
2758 [label="105_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
703 [label="106_ winner_tmstmp19 = msg.sender;\n703-expression_statement-107-107", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
709 [label="107_ string constant tokenName = \"BIGBOMB\";\n709-new_variable-108-108", method="", type_label=new_variable];
715 [label="108_ address winner_tmstmp26;\n715-new_variable-109-109", method="", type_label=new_variable];
719 [label="109_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n719-function_definition-110-112", method="play_tmstmp26(uint startTime)", type_label=function_definition];
727 [label="110_ if_startTime + (5 * 1 days) == block.timestamp\n727-if-111-112", method="play_tmstmp26(uint startTime)", type_label=if];
2793 [label="110_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
740 [label="111_ winner_tmstmp26 = msg.sender;\n740-expression_statement-112-112", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
746 [label="112_ string constant tokenSymbol = \"BBOMB\";\n746-new_variable-113-113", method="", type_label=new_variable];
752 [label="113_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n752-function_definition-114-122", method="bug_tmstmp20()", type_label=function_definition];
757 [label="114_ uint pastBlockTime_tmstmp20;\n757-new_variable-115-115", method="bug_tmstmp20()", type_label=new_variable];
762 [label="115_ require(msg.value == 10 ether);\n762-expression_statement-116-116", method="bug_tmstmp20()", type_label=expression_statement];
772 [label="116_ require(now != pastBlockTime_tmstmp20);\n772-expression_statement-117-117", method="bug_tmstmp20()", type_label=expression_statement];
779 [label="117_ pastBlockTime_tmstmp20 = now;\n779-expression_statement-118-118", method="bug_tmstmp20()", type_label=expression_statement];
783 [label="118_ if_now % 15 == 0\n783-if-119-121", method="bug_tmstmp20()", type_label=if];
2849 [label="118_ end_if", method="bug_tmstmp20()", type_label=end_if];
790 [label="119_ msg.sender.transfer(address(this).balance);\n790-expression_statement-120-120", method="bug_tmstmp20()", type_label=expression_statement];
803 [label="122_ uint8  constant tokenDecimals = 18;\n803-new_variable-123-123", method="", type_label=new_variable];
808 [label="123_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n808-function_definition-124-132", method="bug_tmstmp32()", type_label=function_definition];
813 [label="124_ uint pastBlockTime_tmstmp32;\n813-new_variable-125-125", method="bug_tmstmp32()", type_label=new_variable];
818 [label="125_ require(msg.value == 10 ether);\n818-expression_statement-126-126", method="bug_tmstmp32()", type_label=expression_statement];
828 [label="126_ require(now != pastBlockTime_tmstmp32);\n828-expression_statement-127-127", method="bug_tmstmp32()", type_label=expression_statement];
835 [label="127_ pastBlockTime_tmstmp32 = now;\n835-expression_statement-128-128", method="bug_tmstmp32()", type_label=expression_statement];
839 [label="128_ if_now % 15 == 0\n839-if-129-131", method="bug_tmstmp32()", type_label=if];
2905 [label="128_ end_if", method="bug_tmstmp32()", type_label=end_if];
846 [label="129_ msg.sender.transfer(address(this).balance);\n846-expression_statement-130-130", method="bug_tmstmp32()", type_label=expression_statement];
859 [label="132_ uint256 _totalSupply = 800000000000000000000000;\n859-new_variable-133-133", method="", type_label=new_variable];
864 [label="133_ address winner_tmstmp38;\n864-new_variable-134-134", method="", type_label=new_variable];
868 [label="134_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n868-function_definition-135-137", method="play_tmstmp38(uint startTime)", type_label=function_definition];
876 [label="135_ if_startTime + (5 * 1 days) == block.timestamp\n876-if-136-137", method="play_tmstmp38(uint startTime)", type_label=if];
2942 [label="135_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
889 [label="136_ winner_tmstmp38 = msg.sender;\n889-expression_statement-137-137", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
895 [label="137_ uint256 public basePercent = 100;\n895-new_variable-138-138", method="", type_label=new_variable];
902 [label="138_ ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\n902-expression_statement-139-139", method="", type_label=expression_statement];
911 [label="139_ _mint(msg.sender, _totalSupply);\n911-expression_statement-140-140", method="", type_label=expression_statement];
920 [label="141_ address winner_tmstmp30;\n920-new_variable-142-142", method="", type_label=new_variable];
924 [label="142_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n924-function_definition-143-145", method="play_tmstmp30(uint startTime)", type_label=function_definition];
932 [label="143_ if_startTime + (5 * 1 days) == block.timestamp\n932-if-144-145", method="play_tmstmp30(uint startTime)", type_label=if];
2998 [label="143_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
945 [label="144_ winner_tmstmp30 = msg.sender;\n945-expression_statement-145-145", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
951 [label="145_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n951-function_definition-146-148", method="totalSupply()", type_label=function_definition];
960 [label="146_ return _totalSupply;\n960-return-147-147", method="totalSupply()", type_label=return];
962 [label="148_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n962-function_definition-149-157", method="bug_tmstmp8()", type_label=function_definition];
967 [label="149_ uint pastBlockTime_tmstmp8;\n967-new_variable-150-150", method="bug_tmstmp8()", type_label=new_variable];
972 [label="150_ require(msg.value == 10 ether);\n972-expression_statement-151-151", method="bug_tmstmp8()", type_label=expression_statement];
982 [label="151_ require(now != pastBlockTime_tmstmp8);\n982-expression_statement-152-152", method="bug_tmstmp8()", type_label=expression_statement];
989 [label="152_ pastBlockTime_tmstmp8 = now;\n989-expression_statement-153-153", method="bug_tmstmp8()", type_label=expression_statement];
993 [label="153_ if_now % 15 == 0\n993-if-154-156", method="bug_tmstmp8()", type_label=if];
3059 [label="153_ end_if", method="bug_tmstmp8()", type_label=end_if];
1000 [label="154_ msg.sender.transfer(address(this).balance);\n1000-expression_statement-155-155", method="bug_tmstmp8()", type_label=expression_statement];
1013 [label="157_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n1013-function_definition-158-160", method="balanceOf(address owner)", type_label=function_definition];
1026 [label="158_ return _balances[owner];\n1026-return-159-159", method="balanceOf(address owner)", type_label=return];
1030 [label="160_ address winner_tmstmp39;\n1030-new_variable-161-161", method="", type_label=new_variable];
1034 [label="161_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1034-function_definition-162-165", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1042 [label="162_ uint _vtime = block.timestamp;\n1042-new_variable-163-163", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1050 [label="163_ if_startTime + (5 * 1 days) == _vtime\n1050-if-164-165", method="play_tmstmp39(uint startTime)", type_label=if];
3116 [label="163_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1061 [label="164_ winner_tmstmp39 = msg.sender;\n1061-expression_statement-165-165", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1067 [label="165_ function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n1067-function_definition-166-168", method="allowance(address owner,address spender)", type_label=function_definition];
1084 [label="166_ return _allowed[owner][spender];\n1084-return-167-167", method="allowance(address owner,address spender)", type_label=return];
1090 [label="168_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1090-function_definition-169-177", method="bug_tmstmp36()", type_label=function_definition];
1095 [label="169_ uint pastBlockTime_tmstmp36;\n1095-new_variable-170-170", method="bug_tmstmp36()", type_label=new_variable];
1100 [label="170_ require(msg.value == 10 ether);\n1100-expression_statement-171-171", method="bug_tmstmp36()", type_label=expression_statement];
1110 [label="171_ require(now != pastBlockTime_tmstmp36);\n1110-expression_statement-172-172", method="bug_tmstmp36()", type_label=expression_statement];
1117 [label="172_ pastBlockTime_tmstmp36 = now;\n1117-expression_statement-173-173", method="bug_tmstmp36()", type_label=expression_statement];
1121 [label="173_ if_now % 15 == 0\n1121-if-174-176", method="bug_tmstmp36()", type_label=if];
3187 [label="173_ end_if", method="bug_tmstmp36()", type_label=end_if];
1128 [label="174_ msg.sender.transfer(address(this).balance);\n1128-expression_statement-175-175", method="bug_tmstmp36()", type_label=expression_statement];
1141 [label="177_ function findfourPercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 fourPercent = roundValue.mul(basePercent).div(2500);\n    return fourPercent;\n  }\n1141-function_definition-178-182", method="findfourPercent(uint256 value)", type_label=function_definition];
1154 [label="178_ uint256 roundValue = value.ceil(basePercent);\n1154-new_variable-179-179", method="findfourPercent(uint256 value)", type_label=new_variable];
1165 [label="179_ uint256 fourPercent = roundValue.mul(basePercent).div(2500);\n1165-new_variable-180-180", method="findfourPercent(uint256 value)", type_label=new_variable];
1181 [label="180_ return fourPercent;\n1181-return-181-181", method="findfourPercent(uint256 value)", type_label=return];
1183 [label="182_ address winner_tmstmp35;\n1183-new_variable-183-183", method="", type_label=new_variable];
1187 [label="183_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1187-function_definition-184-187", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1195 [label="184_ uint _vtime = block.timestamp;\n1195-new_variable-185-185", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1203 [label="185_ if_startTime + (5 * 1 days) == _vtime\n1203-if-186-187", method="play_tmstmp35(uint startTime)", type_label=if];
3269 [label="185_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1214 [label="186_ winner_tmstmp35 = msg.sender;\n1214-expression_statement-187-187", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1220 [label="187_ function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n    uint256 tokensToBurn = findfourPercent(value);\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    _balances[to] = _balances[to].add(tokensToTransfer);\n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    emit Transfer(msg.sender, to, tokensToTransfer);\n    emit Transfer(msg.sender, address(0), tokensToBurn);\n    return true;\n  }\n1220-function_definition-188-199", method="transfer(address to,uint256 value)", type_label=function_definition];
1236 [label="188_ require(value <= _balances[msg.sender]);\n1236-expression_statement-189-189", method="transfer(address to,uint256 value)", type_label=expression_statement];
1247 [label="189_ require(to != address(0));\n1247-expression_statement-190-190", method="transfer(address to,uint256 value)", type_label=expression_statement];
1256 [label="190_ uint256 tokensToBurn = findfourPercent(value);\n1256-new_variable-191-191", method="transfer(address to,uint256 value)", type_label=new_variable];
1265 [label="191_ uint256 tokensToTransfer = value.sub(tokensToBurn);\n1265-new_variable-192-192", method="transfer(address to,uint256 value)", type_label=new_variable];
1276 [label="192_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n1276-expression_statement-193-193", method="transfer(address to,uint256 value)", type_label=expression_statement];
1293 [label="193_ _balances[to] = _balances[to].add(tokensToTransfer);\n1293-expression_statement-194-194", method="transfer(address to,uint256 value)", type_label=expression_statement];
1306 [label="194_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1306-expression_statement-195-195", method="transfer(address to,uint256 value)", type_label=expression_statement];
1337 [label="197_ return true;\n1337-return-198-198", method="transfer(address to,uint256 value)", type_label=return];
1340 [label="199_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1340-function_definition-200-208", method="bug_tmstmp40()", type_label=function_definition];
1345 [label="200_ uint pastBlockTime_tmstmp40;\n1345-new_variable-201-201", method="bug_tmstmp40()", type_label=new_variable];
1350 [label="201_ require(msg.value == 10 ether);\n1350-expression_statement-202-202", method="bug_tmstmp40()", type_label=expression_statement];
1360 [label="202_ require(now != pastBlockTime_tmstmp40);\n1360-expression_statement-203-203", method="bug_tmstmp40()", type_label=expression_statement];
1367 [label="203_ pastBlockTime_tmstmp40 = now;\n1367-expression_statement-204-204", method="bug_tmstmp40()", type_label=expression_statement];
1371 [label="204_ if_now % 15 == 0\n1371-if-205-207", method="bug_tmstmp40()", type_label=if];
3437 [label="204_ end_if", method="bug_tmstmp40()", type_label=end_if];
1378 [label="205_ msg.sender.transfer(address(this).balance);\n1378-expression_statement-206-206", method="bug_tmstmp40()", type_label=expression_statement];
1391 [label="208_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n1391-function_definition-209-213", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
1405 [label="209_ for(i < receivers.length;;i++)\n1405-for-210-212", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
3471 [label="209_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
1418 [label="209_ i++\n1418-expression_statement-210-210", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1421 [label="210_ transfer(receivers[i], amounts[i]);\n1421-expression_statement-211-211", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1432 [label="213_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1432-function_definition-214-216", method="bug_tmstmp33()", type_label=function_definition];
1441 [label="214_ return block.timestamp >= 1546300800;\n1441-return-215-215", method="bug_tmstmp33()", type_label=return];
1447 [label="216_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n1447-function_definition-217-222", method="approve(address spender,uint256 value)", type_label=function_definition];
1463 [label="217_ require(spender != address(0));\n1463-expression_statement-218-218", method="approve(address spender,uint256 value)", type_label=expression_statement];
1472 [label="218_ _allowed[msg.sender][spender] = value;\n1472-expression_statement-219-219", method="approve(address spender,uint256 value)", type_label=expression_statement];
1492 [label="220_ return true;\n1492-return-221-221", method="approve(address spender,uint256 value)", type_label=return];
1495 [label="222_ address winner_tmstmp27;\n1495-new_variable-223-223", method="", type_label=new_variable];
1499 [label="223_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1499-function_definition-224-227", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1507 [label="224_ uint _vtime = block.timestamp;\n1507-new_variable-225-225", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1515 [label="225_ if_startTime + (5 * 1 days) == _vtime\n1515-if-226-227", method="play_tmstmp27(uint startTime)", type_label=if];
3581 [label="225_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1526 [label="226_ winner_tmstmp27 = msg.sender;\n1526-expression_statement-227-227", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1532 [label="227_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n    _balances[from] = _balances[from].sub(value);\n    uint256 tokensToBurn = findfourPercent(value);\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\n    _balances[to] = _balances[to].add(tokensToTransfer);\n    _totalSupply = _totalSupply.sub(tokensToBurn);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, tokensToTransfer);\n    emit Transfer(from, address(0), tokensToBurn);\n    return true;\n  }\n1532-function_definition-228-241", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
1552 [label="228_ require(value <= _balances[from]);\n1552-expression_statement-229-229", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1561 [label="229_ require(value <= _allowed[from][msg.sender]);\n1561-expression_statement-230-230", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1574 [label="230_ require(to != address(0));\n1574-expression_statement-231-231", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1583 [label="231_ _balances[from] = _balances[from].sub(value);\n1583-expression_statement-232-232", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1596 [label="232_ uint256 tokensToBurn = findfourPercent(value);\n1596-new_variable-233-233", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1605 [label="233_ uint256 tokensToTransfer = value.sub(tokensToBurn);\n1605-new_variable-234-234", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1616 [label="234_ _balances[to] = _balances[to].add(tokensToTransfer);\n1616-expression_statement-235-235", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1629 [label="235_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1629-expression_statement-236-236", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1638 [label="236_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n1638-expression_statement-237-237", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1677 [label="239_ return true;\n1677-return-240-240", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1680 [label="241_ address winner_tmstmp31;\n1680-new_variable-242-242", method="", type_label=new_variable];
1684 [label="242_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1684-function_definition-243-246", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1692 [label="243_ uint _vtime = block.timestamp;\n1692-new_variable-244-244", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1700 [label="244_ if_startTime + (5 * 1 days) == _vtime\n1700-if-245-246", method="play_tmstmp31(uint startTime)", type_label=if];
3766 [label="244_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1711 [label="245_ winner_tmstmp31 = msg.sender;\n1711-expression_statement-246-246", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1717 [label="246_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n1717-function_definition-247-252", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
1733 [label="247_ require(spender != address(0));\n1733-expression_statement-248-248", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1742 [label="248_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n1742-expression_statement-249-249", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1780 [label="250_ return true;\n1780-return-251-251", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
1783 [label="252_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1783-function_definition-253-255", method="bug_tmstmp13()", type_label=function_definition];
1792 [label="253_ return block.timestamp >= 1546300800;\n1792-return-254-254", method="bug_tmstmp13()", type_label=return];
1798 [label="255_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n1798-function_definition-256-261", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
1814 [label="256_ require(spender != address(0));\n1814-expression_statement-257-257", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1823 [label="257_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n1823-expression_statement-258-258", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1861 [label="259_ return true;\n1861-return-260-260", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
1864 [label="261_ uint256 bugv_tmstmp5 = block.timestamp;\n1864-new_variable-262-262", method="", type_label=new_variable];
1871 [label="262_ function _mint(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n1871-function_definition-263-267", method="_mint(address account,uint256 amount)", type_label=function_definition];
1883 [label="263_ require(amount != 0);\n1883-expression_statement-264-264", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1890 [label="264_ _balances[account] = _balances[account].add(amount);\n1890-expression_statement-265-265", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1913 [label="267_ uint256 bugv_tmstmp1 = block.timestamp;\n1913-new_variable-268-268", method="", type_label=new_variable];
1920 [label="268_ function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n1920-function_definition-269-271", method="burn(uint256 amount)", type_label=function_definition];
1928 [label="269_ _burn(msg.sender, amount);\n1928-expression_statement-270-270", method="burn(uint256 amount)", type_label=expression_statement];
1937 [label="271_ uint256 bugv_tmstmp2 = block.timestamp;\n1937-new_variable-272-272", method="", type_label=new_variable];
1944 [label="272_ function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n1944-function_definition-273-279", method="_burn(address account,uint256 amount)", type_label=function_definition];
1956 [label="273_ require(amount != 0);\n1956-expression_statement-274-274", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1963 [label="274_ require(amount <= _balances[account]);\n1963-expression_statement-275-275", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1972 [label="275_ _totalSupply = _totalSupply.sub(amount);\n1972-expression_statement-276-276", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1981 [label="276_ _balances[account] = _balances[account].sub(amount);\n1981-expression_statement-277-277", method="_burn(address account,uint256 amount)", type_label=expression_statement];
2004 [label="279_ uint256 bugv_tmstmp3 = block.timestamp;\n2004-new_variable-280-280", method="", type_label=new_variable];
2011 [label="280_ function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }\n2011-function_definition-281-285", method="burnFrom(address account,uint256 amount)", type_label=function_definition];
2023 [label="281_ require(amount <= _allowed[account][msg.sender]);\n2023-expression_statement-282-282", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2036 [label="282_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n2036-expression_statement-283-283", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2057 [label="283_ _burn(account, amount);\n2057-expression_statement-284-284", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
2064 [label="285_ uint256 bugv_tmstmp4 = block.timestamp;\n2064-new_variable-286-286", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
615;
129 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> 2212  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2212 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 2212  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
227 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
261 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
318 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
338 -> 347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
347 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
353 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 389  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
378 -> 2444  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2444 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
389 -> 2444  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
414 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
431 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 464  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
457 -> 2523  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2523 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 2523  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
477 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
492 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 519  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
508 -> 2574  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2574 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 2574  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
525 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
534 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
540 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
548 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 567  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
556 -> 2622  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2622 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 2622  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
573 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
588 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 609  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
596 -> 2662  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2662 -> 615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 2662  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
626 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
635 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
648 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
663 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
692 -> 703  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
692 -> 2758  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2758 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 2758  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
709 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 740  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
727 -> 2793  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2793 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
740 -> 2793  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
752 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
762 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
779 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 790  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
783 -> 2849  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2849 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
790 -> 2849  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
808 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
839 -> 846  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
839 -> 2905  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2905 -> 859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 2905  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
859 -> 864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
876 -> 889  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
876 -> 2942  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2942 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
889 -> 2942  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
924 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 945  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
932 -> 2998  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2998 -> 951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 2998  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
951 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
962 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
982 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
989 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 1000  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
993 -> 3059  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3059 -> 1013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 3059  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1013 -> 1026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1026 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1034 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 1061  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1050 -> 3116  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3116 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 3116  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1067 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1090 -> 1095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1095 -> 1100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1100 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1121 -> 1128  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1121 -> 3187  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3187 -> 1141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1128 -> 3187  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1141 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1154 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1187 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 1214  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1203 -> 3269  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3269 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1214 -> 3269  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1220 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1293 -> 1306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1337 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1340 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1345 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 1360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1360 -> 1367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1367 -> 1371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1371 -> 1378  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1371 -> 3437  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3437 -> 1391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 3437  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1391 -> 1405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1405 -> 1421  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1405 -> 3471  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3471 -> 1432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1418 -> 1405  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1421 -> 1418  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1432 -> 1441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1441 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1447 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1463 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1499 -> 1507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 1515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1515 -> 1526  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1515 -> 3581  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3581 -> 1532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1526 -> 3581  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1532 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 1561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1561 -> 1574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1574 -> 1583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1583 -> 1596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1596 -> 1605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1605 -> 1616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1616 -> 1629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1629 -> 1638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1677 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1684 -> 1692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1692 -> 1700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1700 -> 1711  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1700 -> 3766  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3766 -> 1717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1711 -> 3766  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1717 -> 1733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1733 -> 1742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1780 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1783 -> 1792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1792 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1798 -> 1814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1814 -> 1823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1861 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1871 -> 1883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1883 -> 1890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1920 -> 1928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1944 -> 1956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1956 -> 1963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1963 -> 1972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1972 -> 1981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2011 -> 2023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2023 -> 2036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2036 -> 2057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
