digraph  {
13 [label="3_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n13-function_definition-4-6", method="bug_tmstmp9()", type_label=function_definition];
22 [label="4_ return block.timestamp >= 1546300800;\n22-return-5-5", method="bug_tmstmp9()", type_label=return];
28 [label="6_ address payable private manager;\n28-new_variable-7-7", method="", type_label=new_variable];
33 [label="7_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n33-function_definition-8-10", method="bug_tmstmp25()", type_label=function_definition];
42 [label="8_ return block.timestamp >= 1546300800;\n42-return-9-9", method="bug_tmstmp25()", type_label=return];
48 [label="10_ bool private contractactive;\n48-new_variable-11-11", method="", type_label=new_variable];
53 [label="11_ address winner_tmstmp19;\n53-new_variable-12-12", method="", type_label=new_variable];
57 [label="12_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n57-function_definition-13-16", method="play_tmstmp19(uint startTime)", type_label=function_definition];
65 [label="13_ uint _vtime = block.timestamp;\n65-new_variable-14-14", method="play_tmstmp19(uint startTime)", type_label=new_variable];
73 [label="14_ if_startTime + (5 * 1 days) == _vtime\n73-if-15-16", method="play_tmstmp19(uint startTime)", type_label=if];
1425 [label="14_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
84 [label="15_ winner_tmstmp19 = msg.sender;\n84-expression_statement-16-16", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
90 [label="16_ uint private hashfee;\n90-new_variable-17-17", method="", type_label=new_variable];
95 [label="17_ address winner_tmstmp26;\n95-new_variable-18-18", method="", type_label=new_variable];
99 [label="18_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n99-function_definition-19-21", method="play_tmstmp26(uint startTime)", type_label=function_definition];
107 [label="19_ if_startTime + (5 * 1 days) == block.timestamp\n107-if-20-21", method="play_tmstmp26(uint startTime)", type_label=if];
1459 [label="19_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
120 [label="20_ winner_tmstmp26 = msg.sender;\n120-expression_statement-21-21", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
126 [label="21_ uint private changehashownerfee;\n126-new_variable-22-22", method="", type_label=new_variable];
131 [label="22_ struct HashRegistration \n    {\n        address owner;\n        uint registrationtime;\n    }\n131-expression_statement-23-27", method="HashRegistration()", type_label=expression_statement];
141 [label="27_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n141-function_definition-28-36", method="bug_tmstmp20()", type_label=function_definition];
146 [label="28_ uint pastBlockTime_tmstmp20;\n146-new_variable-29-29", method="bug_tmstmp20()", type_label=new_variable];
151 [label="29_ require(msg.value == 10 ether);\n151-expression_statement-30-30", method="bug_tmstmp20()", type_label=expression_statement];
161 [label="30_ require(now != pastBlockTime_tmstmp20);\n161-expression_statement-31-31", method="bug_tmstmp20()", type_label=expression_statement];
168 [label="31_ pastBlockTime_tmstmp20 = now;\n168-expression_statement-32-32", method="bug_tmstmp20()", type_label=expression_statement];
172 [label="32_ if_now % 15 == 0\n172-if-33-35", method="bug_tmstmp20()", type_label=if];
1524 [label="32_ end_if", method="bug_tmstmp20()", type_label=end_if];
179 [label="33_ msg.sender.transfer(address(this).balance);\n179-expression_statement-34-34", method="bug_tmstmp20()", type_label=expression_statement];
192 [label="36_ mapping(bytes32 => HashRegistration[]) HashList;\n192-new_variable-37-37", method="", type_label=new_variable];
200 [label="37_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n200-function_definition-38-46", method="bug_tmstmp32()", type_label=function_definition];
205 [label="38_ uint pastBlockTime_tmstmp32;\n205-new_variable-39-39", method="bug_tmstmp32()", type_label=new_variable];
210 [label="39_ require(msg.value == 10 ether);\n210-expression_statement-40-40", method="bug_tmstmp32()", type_label=expression_statement];
220 [label="40_ require(now != pastBlockTime_tmstmp32);\n220-expression_statement-41-41", method="bug_tmstmp32()", type_label=expression_statement];
227 [label="41_ pastBlockTime_tmstmp32 = now;\n227-expression_statement-42-42", method="bug_tmstmp32()", type_label=expression_statement];
231 [label="42_ if_now % 15 == 0\n231-if-43-45", method="bug_tmstmp32()", type_label=if];
1583 [label="42_ end_if", method="bug_tmstmp32()", type_label=end_if];
238 [label="43_ msg.sender.transfer(address(this).balance);\n238-expression_statement-44-44", method="bug_tmstmp32()", type_label=expression_statement];
251 [label="46_ uint private HashListLength;\n251-new_variable-47-47", method="", type_label=new_variable];
256 [label="47_ uint256 bugv_tmstmp3 = block.timestamp;\n256-new_variable-48-48", method="", type_label=new_variable];
277 [label="49_ uint256 bugv_tmstmp4 = block.timestamp;\n277-new_variable-50-50", method="", type_label=new_variable];
304 [label="53_ manager = msg.sender;\n304-expression_statement-54-54", method="", type_label=expression_statement];
310 [label="54_ contractactive = true;\n310-expression_statement-55-55", method="", type_label=expression_statement];
315 [label="55_ hashfee = 5000000000000000;\n315-expression_statement-56-56", method="", type_label=expression_statement];
319 [label="56_ changehashownerfee = 25000000000000000;\n319-expression_statement-57-57", method="", type_label=expression_statement];
323 [label="57_ HashListLength = 0;\n323-expression_statement-58-58", method="", type_label=expression_statement];
327 [label="59_ address winner_tmstmp38;\n327-new_variable-60-60", method="", type_label=new_variable];
331 [label="60_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n331-function_definition-61-63", method="play_tmstmp38(uint startTime)", type_label=function_definition];
339 [label="61_ if_startTime + (5 * 1 days) == block.timestamp\n339-if-62-63", method="play_tmstmp38(uint startTime)", type_label=if];
1691 [label="61_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
352 [label="62_ winner_tmstmp38 = msg.sender;\n352-expression_statement-63-63", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
358 [label="63_ modifier onlyManager()\n    {\n        require(msg.sender == manager);\n        _;\n    }\n358-expression_statement-64-68", method="", type_label=expression_statement];
361 [label="65_ require(msg.sender == manager);\n361-expression_statement-66-66", method="", type_label=expression_statement];
370 [label="66_ _;\n370-expression_statement-67-67", method="", type_label=expression_statement];
372 [label="68_ uint256 bugv_tmstmp2 = block.timestamp;\n372-new_variable-69-69", method="", type_label=new_variable];
379 [label="69_ function gethashfee() external view returns(uint)\n    {\n        return hashfee;\n    }\n379-function_definition-70-73", method="gethashfee()", type_label=function_definition];
388 [label="71_ return hashfee;\n388-return-72-72", method="gethashfee()", type_label=return];
390 [label="73_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n390-function_definition-74-82", method="bug_tmstmp4()", type_label=function_definition];
395 [label="74_ uint pastBlockTime_tmstmp4;\n395-new_variable-75-75", method="bug_tmstmp4()", type_label=new_variable];
400 [label="75_ require(msg.value == 10 ether);\n400-expression_statement-76-76", method="bug_tmstmp4()", type_label=expression_statement];
410 [label="76_ require(now != pastBlockTime_tmstmp4);\n410-expression_statement-77-77", method="bug_tmstmp4()", type_label=expression_statement];
417 [label="77_ pastBlockTime_tmstmp4 = now;\n417-expression_statement-78-78", method="bug_tmstmp4()", type_label=expression_statement];
421 [label="78_ if_now % 15 == 0\n421-if-79-81", method="bug_tmstmp4()", type_label=if];
1773 [label="78_ end_if", method="bug_tmstmp4()", type_label=end_if];
428 [label="79_ msg.sender.transfer(address(this).balance);\n428-expression_statement-80-80", method="bug_tmstmp4()", type_label=expression_statement];
441 [label="82_ function sethashfee(uint newfee) external onlyManager\n    {\n        require(newfee >= 0);\n        hashfee = newfee;\n    }\n441-function_definition-83-87", method="sethashfee(uint newfee)", type_label=function_definition];
448 [label="82_ onlyManager\n448-expression_statement-83-83", method="sethashfee(uint newfee)", type_label=expression_statement];
451 [label="84_ require(newfee >= 0);\n451-expression_statement-85-85", method="sethashfee(uint newfee)", type_label=expression_statement];
458 [label="85_ hashfee = newfee;\n458-expression_statement-86-86", method="sethashfee(uint newfee)", type_label=expression_statement];
462 [label="87_ address winner_tmstmp7;\n462-new_variable-88-88", method="", type_label=new_variable];
466 [label="88_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n466-function_definition-89-92", method="play_tmstmp7(uint startTime)", type_label=function_definition];
474 [label="89_ uint _vtime = block.timestamp;\n474-new_variable-90-90", method="play_tmstmp7(uint startTime)", type_label=new_variable];
482 [label="90_ if_startTime + (5 * 1 days) == _vtime\n482-if-91-92", method="play_tmstmp7(uint startTime)", type_label=if];
1834 [label="90_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
493 [label="91_ winner_tmstmp7 = msg.sender;\n493-expression_statement-92-92", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
499 [label="92_ function getchangehashownerfee() external view returns(uint)\n    {\n        return changehashownerfee;\n    }\n499-function_definition-93-96", method="getchangehashownerfee()", type_label=function_definition];
508 [label="94_ return changehashownerfee;\n508-return-95-95", method="getchangehashownerfee()", type_label=return];
510 [label="96_ address winner_tmstmp23;\n510-new_variable-97-97", method="", type_label=new_variable];
514 [label="97_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n514-function_definition-98-101", method="play_tmstmp23(uint startTime)", type_label=function_definition];
522 [label="98_ uint _vtime = block.timestamp;\n522-new_variable-99-99", method="play_tmstmp23(uint startTime)", type_label=new_variable];
530 [label="99_ if_startTime + (5 * 1 days) == _vtime\n530-if-100-101", method="play_tmstmp23(uint startTime)", type_label=if];
1882 [label="99_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
541 [label="100_ winner_tmstmp23 = msg.sender;\n541-expression_statement-101-101", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
547 [label="101_ function setchangehashownerfee(uint newfee) external onlyManager\n    {\n        require(newfee >= 0);\n        changehashownerfee = newfee;\n    }\n547-function_definition-102-106", method="setchangehashownerfee(uint newfee)", type_label=function_definition];
554 [label="101_ onlyManager\n554-expression_statement-102-102", method="setchangehashownerfee(uint newfee)", type_label=expression_statement];
557 [label="103_ require(newfee >= 0);\n557-expression_statement-104-104", method="setchangehashownerfee(uint newfee)", type_label=expression_statement];
564 [label="104_ changehashownerfee = newfee;\n564-expression_statement-105-105", method="setchangehashownerfee(uint newfee)", type_label=expression_statement];
568 [label="106_ address winner_tmstmp14;\n568-new_variable-107-107", method="", type_label=new_variable];
572 [label="107_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n572-function_definition-108-110", method="play_tmstmp14(uint startTime)", type_label=function_definition];
580 [label="108_ if_startTime + (5 * 1 days) == block.timestamp\n580-if-109-110", method="play_tmstmp14(uint startTime)", type_label=if];
1932 [label="108_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
593 [label="109_ winner_tmstmp14 = msg.sender;\n593-expression_statement-110-110", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
599 [label="110_ function getcontractactive() external view returns (bool)\n    {\n        return contractactive;\n    }\n599-function_definition-111-114", method="getcontractactive()", type_label=function_definition];
608 [label="112_ return contractactive;\n608-return-113-113", method="getcontractactive()", type_label=return];
610 [label="114_ address winner_tmstmp30;\n610-new_variable-115-115", method="", type_label=new_variable];
614 [label="115_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n614-function_definition-116-118", method="play_tmstmp30(uint startTime)", type_label=function_definition];
622 [label="116_ if_startTime + (5 * 1 days) == block.timestamp\n622-if-117-118", method="play_tmstmp30(uint startTime)", type_label=if];
1974 [label="116_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
635 [label="117_ winner_tmstmp30 = msg.sender;\n635-expression_statement-118-118", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
641 [label="118_ function setcontractactive(bool contactive) external onlyManager\n    {\n        contractactive = contactive;\n    }\n641-function_definition-119-122", method="setcontractactive(bool contactive)", type_label=function_definition];
648 [label="118_ onlyManager\n648-expression_statement-119-119", method="setcontractactive(bool contactive)", type_label=expression_statement];
651 [label="120_ contractactive = contactive;\n651-expression_statement-121-121", method="setcontractactive(bool contactive)", type_label=expression_statement];
655 [label="122_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n655-function_definition-123-131", method="bug_tmstmp8()", type_label=function_definition];
660 [label="123_ uint pastBlockTime_tmstmp8;\n660-new_variable-124-124", method="bug_tmstmp8()", type_label=new_variable];
665 [label="124_ require(msg.value == 10 ether);\n665-expression_statement-125-125", method="bug_tmstmp8()", type_label=expression_statement];
675 [label="125_ require(now != pastBlockTime_tmstmp8);\n675-expression_statement-126-126", method="bug_tmstmp8()", type_label=expression_statement];
682 [label="126_ pastBlockTime_tmstmp8 = now;\n682-expression_statement-127-127", method="bug_tmstmp8()", type_label=expression_statement];
686 [label="127_ if_now % 15 == 0\n686-if-128-130", method="bug_tmstmp8()", type_label=if];
2038 [label="127_ end_if", method="bug_tmstmp8()", type_label=end_if];
693 [label="128_ msg.sender.transfer(address(this).balance);\n693-expression_statement-129-129", method="bug_tmstmp8()", type_label=expression_statement];
706 [label="131_ function getmanager() external view returns(address)\n    {\n        return manager;\n    }\n706-function_definition-132-135", method="getmanager()", type_label=function_definition];
715 [label="133_ return manager;\n715-return-134-134", method="getmanager()", type_label=return];
717 [label="135_ address winner_tmstmp39;\n717-new_variable-136-136", method="", type_label=new_variable];
721 [label="136_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n721-function_definition-137-140", method="play_tmstmp39(uint startTime)", type_label=function_definition];
729 [label="137_ uint _vtime = block.timestamp;\n729-new_variable-138-138", method="play_tmstmp39(uint startTime)", type_label=new_variable];
737 [label="138_ if_startTime + (5 * 1 days) == _vtime\n737-if-139-140", method="play_tmstmp39(uint startTime)", type_label=if];
2089 [label="138_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
748 [label="139_ winner_tmstmp39 = msg.sender;\n748-expression_statement-140-140", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
754 [label="140_ function setmanager(address payable newmngr) external onlyManager\n    {\n        require(newmngr.balance > 0);\n        manager = newmngr;\n    }\n754-function_definition-141-145", method="setmanager(address payable newmngr)", type_label=function_definition];
761 [label="140_ onlyManager\n761-expression_statement-141-141", method="setmanager(address payable newmngr)", type_label=expression_statement];
764 [label="142_ require(newmngr.balance > 0);\n764-expression_statement-143-143", method="setmanager(address payable newmngr)", type_label=expression_statement];
773 [label="143_ manager = newmngr;\n773-expression_statement-144-144", method="setmanager(address payable newmngr)", type_label=expression_statement];
777 [label="145_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n777-function_definition-146-154", method="bug_tmstmp36()", type_label=function_definition];
782 [label="146_ uint pastBlockTime_tmstmp36;\n782-new_variable-147-147", method="bug_tmstmp36()", type_label=new_variable];
787 [label="147_ require(msg.value == 10 ether);\n787-expression_statement-148-148", method="bug_tmstmp36()", type_label=expression_statement];
797 [label="148_ require(now != pastBlockTime_tmstmp36);\n797-expression_statement-149-149", method="bug_tmstmp36()", type_label=expression_statement];
804 [label="149_ pastBlockTime_tmstmp36 = now;\n804-expression_statement-150-150", method="bug_tmstmp36()", type_label=expression_statement];
808 [label="150_ if_now % 15 == 0\n808-if-151-153", method="bug_tmstmp36()", type_label=if];
2160 [label="150_ end_if", method="bug_tmstmp36()", type_label=end_if];
815 [label="151_ msg.sender.transfer(address(this).balance);\n815-expression_statement-152-152", method="bug_tmstmp36()", type_label=expression_statement];
828 [label="154_ function getcontractbalance() public view returns(uint)\n    {\n        return address(this).balance;\n    }\n828-function_definition-155-158", method="getcontractbalance()", type_label=function_definition];
837 [label="156_ return address(this).balance;\n837-return-157-157", method="getcontractbalance()", type_label=return];
843 [label="158_ address winner_tmstmp35;\n843-new_variable-159-159", method="", type_label=new_variable];
847 [label="159_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n847-function_definition-160-163", method="play_tmstmp35(uint startTime)", type_label=function_definition];
855 [label="160_ uint _vtime = block.timestamp;\n855-new_variable-161-161", method="play_tmstmp35(uint startTime)", type_label=new_variable];
863 [label="161_ if_startTime + (5 * 1 days) == _vtime\n863-if-162-163", method="play_tmstmp35(uint startTime)", type_label=if];
2215 [label="161_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
874 [label="162_ winner_tmstmp35 = msg.sender;\n874-expression_statement-163-163", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
880 [label="163_ function transfercontractbalance() external onlyManager\n    {\n        uint cb = address(this).balance;\n        require(cb > 0);\n        manager.transfer(cb);\n    }\n880-function_definition-164-169", method="transfercontractbalance()", type_label=function_definition];
883 [label="163_ onlyManager\n883-expression_statement-164-164", method="transfercontractbalance()", type_label=expression_statement];
886 [label="165_ uint cb = address(this).balance;\n886-new_variable-166-166", method="transfercontractbalance()", type_label=new_variable];
896 [label="166_ require(cb > 0);\n896-expression_statement-167-167", method="transfercontractbalance()", type_label=expression_statement];
903 [label="167_ manager.transfer(cb);\n903-expression_statement-168-168", method="transfercontractbalance()", type_label=expression_statement];
910 [label="169_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n910-function_definition-170-178", method="bug_tmstmp40()", type_label=function_definition];
915 [label="170_ uint pastBlockTime_tmstmp40;\n915-new_variable-171-171", method="bug_tmstmp40()", type_label=new_variable];
920 [label="171_ require(msg.value == 10 ether);\n920-expression_statement-172-172", method="bug_tmstmp40()", type_label=expression_statement];
930 [label="172_ require(now != pastBlockTime_tmstmp40);\n930-expression_statement-173-173", method="bug_tmstmp40()", type_label=expression_statement];
937 [label="173_ pastBlockTime_tmstmp40 = now;\n937-expression_statement-174-174", method="bug_tmstmp40()", type_label=expression_statement];
941 [label="174_ if_now % 15 == 0\n941-if-175-177", method="bug_tmstmp40()", type_label=if];
2293 [label="174_ end_if", method="bug_tmstmp40()", type_label=end_if];
948 [label="175_ msg.sender.transfer(address(this).balance);\n948-expression_statement-176-176", method="bug_tmstmp40()", type_label=expression_statement];
961 [label="178_ function getHashOwnersCount(bytes32 hash) public view returns(uint)\n    {\n        return HashList[hash].length;\n    }\n961-function_definition-179-182", method="getHashOwnersCount(bytes32 hash)", type_label=function_definition];
974 [label="180_ return HashList[hash].length;\n974-return-181-181", method="getHashOwnersCount(bytes32 hash)", type_label=return];
980 [label="182_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n980-function_definition-183-185", method="bug_tmstmp33()", type_label=function_definition];
989 [label="183_ return block.timestamp >= 1546300800;\n989-return-184-184", method="bug_tmstmp33()", type_label=return];
995 [label="185_ function getNumberofHashesRegistered() external view returns(uint)\n    {\n        return HashListLength;\n    }\n995-function_definition-186-189", method="getNumberofHashesRegistered()", type_label=function_definition];
1004 [label="187_ return HashListLength;\n1004-return-188-188", method="getNumberofHashesRegistered()", type_label=return];
1006 [label="189_ address winner_tmstmp27;\n1006-new_variable-190-190", method="", type_label=new_variable];
1010 [label="190_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1010-function_definition-191-194", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1018 [label="191_ uint _vtime = block.timestamp;\n1018-new_variable-192-192", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1026 [label="192_ if_startTime + (5 * 1 days) == _vtime\n1026-if-193-194", method="play_tmstmp27(uint startTime)", type_label=if];
2378 [label="192_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1037 [label="193_ winner_tmstmp27 = msg.sender;\n1037-expression_statement-194-194", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1043 [label="194_ function getHashDetails(bytes32 hash,uint indx) external view returns (address,uint)\n    {\n        uint owncount = getHashOwnersCount(hash);\n        require(owncount > 0);\n        require(indx < owncount);\n        return (HashList[hash][indx].owner,HashList[hash][indx].registrationtime);\n    }\n1043-function_definition-195-201", method="getHashDetails(bytes32 hash,uint indx)", type_label=function_definition];
1063 [label="196_ uint owncount = getHashOwnersCount(hash);\n1063-new_variable-197-197", method="getHashDetails(bytes32 hash,uint indx)", type_label=new_variable];
1072 [label="197_ require(owncount > 0);\n1072-expression_statement-198-198", method="getHashDetails(bytes32 hash,uint indx)", type_label=expression_statement];
1079 [label="198_ require(indx < owncount);\n1079-expression_statement-199-199", method="getHashDetails(bytes32 hash,uint indx)", type_label=expression_statement];
1086 [label="199_ return (HashList[hash][indx].owner,HashList[hash][indx].registrationtime);\n1086-return-200-200", method="getHashDetails(bytes32 hash,uint indx)", type_label=return];
1102 [label="201_ address winner_tmstmp31;\n1102-new_variable-202-202", method="", type_label=new_variable];
1106 [label="202_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1106-function_definition-203-206", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1114 [label="203_ uint _vtime = block.timestamp;\n1114-new_variable-204-204", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1122 [label="204_ if_startTime + (5 * 1 days) == _vtime\n1122-if-205-206", method="play_tmstmp31(uint startTime)", type_label=if];
2474 [label="204_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1133 [label="205_ winner_tmstmp31 = msg.sender;\n1133-expression_statement-206-206", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1139 [label="206_ function registerHash(bytes32 hash) external payable\n    {\n        require(contractactive == true);\n        require(getHashOwnersCount(hash) == 0);\n        require(msg.value == hashfee);\n        HashRegistration memory thisregistration;\n        thisregistration.owner = msg.sender;\n        thisregistration.registrationtime = now;\n        HashList[hash].push(thisregistration);\n        HashListLength++;\n        emit RegisterHashEvent(thisregistration.owner, hash, thisregistration.registrationtime);\n    }\n1139-function_definition-207-218", method="registerHash(bytes32 hash)", type_label=function_definition];
1148 [label="208_ require(contractactive == true);\n1148-expression_statement-209-209", method="registerHash(bytes32 hash)", type_label=expression_statement];
1156 [label="209_ require(getHashOwnersCount(hash) == 0);\n1156-expression_statement-210-210", method="registerHash(bytes32 hash)", type_label=expression_statement];
1166 [label="210_ require(msg.value == hashfee);\n1166-expression_statement-211-211", method="registerHash(bytes32 hash)", type_label=expression_statement];
1175 [label="211_ HashRegistration memory thisregistration;\n1175-new_variable-212-212", method="registerHash(bytes32 hash)", type_label=new_variable];
1181 [label="212_ thisregistration.owner = msg.sender;\n1181-expression_statement-213-213", method="registerHash(bytes32 hash)", type_label=expression_statement];
1189 [label="213_ thisregistration.registrationtime = now;\n1189-expression_statement-214-214", method="registerHash(bytes32 hash)", type_label=expression_statement];
1195 [label="214_ HashList[hash].push(thisregistration);\n1195-expression_statement-215-215", method="registerHash(bytes32 hash)", type_label=expression_statement];
1204 [label="215_ HashListLength++;\n1204-expression_statement-216-216", method="registerHash(bytes32 hash)", type_label=expression_statement];
1205 [label="215_ HashListLength++\n1205-expression_statement-216-216", method="registerHash(bytes32 hash)", type_label=expression_statement];
1219 [label="218_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1219-function_definition-219-221", method="bug_tmstmp13()", type_label=function_definition];
1228 [label="219_ return block.timestamp >= 1546300800;\n1228-return-220-220", method="bug_tmstmp13()", type_label=return];
1234 [label="221_ function changeHashOwnership(bytes32 hash, address newowner) external payable\n    {\n        require(contractactive == true);\n        uint owncount = getHashOwnersCount(hash);\n        require(owncount > 0);\n        require(msg.sender == HashList[hash][owncount - 1].owner); \n        require(msg.value == changehashownerfee);\n        HashRegistration memory thisregistration;\n        thisregistration.owner = newowner;\n        thisregistration.registrationtime = now;\n        HashList[hash].push(thisregistration);\n        emit ChangeHashOwnershipEvent(msg.sender, thisregistration.owner, hash, thisregistration.registrationtime);\n    }\n1234-function_definition-222-234", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=function_definition];
1247 [label="223_ require(contractactive == true);\n1247-expression_statement-224-224", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
1255 [label="224_ uint owncount = getHashOwnersCount(hash);\n1255-new_variable-225-225", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=new_variable];
1264 [label="225_ require(owncount > 0);\n1264-expression_statement-226-226", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
1271 [label="226_ require(msg.sender == HashList[hash][owncount - 1].owner);\n1271-expression_statement-227-227", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
1288 [label="227_ require(msg.value == changehashownerfee);\n1288-expression_statement-228-228", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
1297 [label="228_ HashRegistration memory thisregistration;\n1297-new_variable-229-229", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=new_variable];
1303 [label="229_ thisregistration.owner = newowner;\n1303-expression_statement-230-230", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
1309 [label="230_ thisregistration.registrationtime = now;\n1309-expression_statement-231-231", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
1315 [label="231_ HashList[hash].push(thisregistration);\n1315-expression_statement-232-232", method="changeHashOwnership(bytes32 hash,address newowner)", type_label=expression_statement];
1340 [label="234_ uint256 bugv_tmstmp5 = block.timestamp;\n1340-new_variable-235-235", method="", type_label=new_variable];
1350 [label="238_ uint256 bugv_tmstmp1 = block.timestamp;\n1350-new_variable-239-239", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 22  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
22 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
33 -> 42  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
48 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
57 -> 65  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
65 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 84  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
73 -> 1425  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1425 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
84 -> 1425  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
90 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 120  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
107 -> 1459  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1459 -> 126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 1459  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
126 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 179  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
172 -> 1524  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1524 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 1524  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
200 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 238  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
231 -> 1583  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1583 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 1583  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
251 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 352  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
339 -> 1691  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1691 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 1691  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
358 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
390 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 428  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
421 -> 1773  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1773 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 1773  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
441 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 493  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
482 -> 1834  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1834 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 1834  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
499 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
514 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 541  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
530 -> 1882  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1882 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 1882  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
547 -> 557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
572 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 593  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
580 -> 1932  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1932 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 1932  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
599 -> 608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
608 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
614 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 635  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
622 -> 1974  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1974 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
635 -> 1974  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
641 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
655 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
675 -> 682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
682 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 693  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
686 -> 2038  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2038 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 2038  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
706 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
721 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 748  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
737 -> 2089  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2089 -> 754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 2089  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
754 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
777 -> 782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
804 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 815  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
808 -> 2160  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2160 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 2160  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
828 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
847 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 874  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
863 -> 2215  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2215 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 2215  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
880 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
896 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
915 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
920 -> 930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
941 -> 948  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
941 -> 2293  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2293 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 2293  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
961 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
974 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
980 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
989 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
995 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1010 -> 1018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 1026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1026 -> 1037  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1026 -> 2378  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2378 -> 1043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 2378  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1043 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1072 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1079 -> 1086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1086 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1106 -> 1114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1114 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1122 -> 1133  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1122 -> 2474  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2474 -> 1139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 2474  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1139 -> 1148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1148 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1234 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1255 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1264 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 1288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1288 -> 1297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 1303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1303 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1309 -> 1315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
