digraph  {
13 [label="2_ function transfer(address to, uint256 value) external returns (bool);\n13-function_definition-3-3", method="transfer(address to,uint256 value)", type_label=function_definition];
28 [label="3_ function approve(address spender, uint256 value) external returns (bool);\n28-function_definition-4-4", method="approve(address spender,uint256 value)", type_label=function_definition];
43 [label="4_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n43-function_definition-5-5", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
62 [label="5_ function totalSupply() external view returns (uint256);\n62-function_definition-6-6", method="totalSupply()", type_label=function_definition];
70 [label="6_ function balanceOf(address who) external view returns (uint256);\n70-function_definition-7-7", method="balanceOf(address who)", type_label=function_definition];
82 [label="7_ function allowance(address owner, address spender) external view returns (uint256);\n82-function_definition-8-8", method="allowance(address owner,address spender)", type_label=function_definition];
133 [label="13_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n133-function_definition-14-21", method="mul(uint256 a,uint256 b)", type_label=function_definition];
150 [label="14_ if_a == 0\n150-if-15-17", method="mul(uint256 a,uint256 b)", type_label=if];
1943 [label="14_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
155 [label="15_ return 0;\n155-return-16-16", method="mul(uint256 a,uint256 b)", type_label=return];
157 [label="17_ uint256 c = a * b;\n157-new_variable-18-18", method="mul(uint256 a,uint256 b)", type_label=new_variable];
165 [label="18_ require(c / a == b);\n165-expression_statement-19-19", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
174 [label="19_ return c;\n174-return-20-20", method="mul(uint256 a,uint256 b)", type_label=return];
176 [label="21_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n176-function_definition-22-26", method="div(uint256 a,uint256 b)", type_label=function_definition];
193 [label="22_ require(b > 0);\n193-expression_statement-23-23", method="div(uint256 a,uint256 b)", type_label=expression_statement];
200 [label="23_ uint256 c = a / b;\n200-new_variable-24-24", method="div(uint256 a,uint256 b)", type_label=new_variable];
208 [label="24_ return c;\n208-return-25-25", method="div(uint256 a,uint256 b)", type_label=return];
210 [label="26_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n210-function_definition-27-31", method="sub(uint256 a,uint256 b)", type_label=function_definition];
227 [label="27_ require(b <= a);\n227-expression_statement-28-28", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
234 [label="28_ uint256 c = a - b;\n234-new_variable-29-29", method="sub(uint256 a,uint256 b)", type_label=new_variable];
242 [label="29_ return c;\n242-return-30-30", method="sub(uint256 a,uint256 b)", type_label=return];
244 [label="31_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n244-function_definition-32-36", method="add(uint256 a,uint256 b)", type_label=function_definition];
261 [label="32_ uint256 c = a + b;\n261-new_variable-33-33", method="add(uint256 a,uint256 b)", type_label=new_variable];
269 [label="33_ require(c >= a);\n269-expression_statement-34-34", method="add(uint256 a,uint256 b)", type_label=expression_statement];
276 [label="34_ return c;\n276-return-35-35", method="add(uint256 a,uint256 b)", type_label=return];
278 [label="36_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n278-function_definition-37-40", method="mod(uint256 a,uint256 b)", type_label=function_definition];
295 [label="37_ require(b != 0);\n295-expression_statement-38-38", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
302 [label="38_ return a % b;\n302-return-39-39", method="mod(uint256 a,uint256 b)", type_label=return];
321 [label="44_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n321-function_definition-45-47", method="bug_tmstmp9()", type_label=function_definition];
330 [label="45_ return block.timestamp >= 1546300800;\n330-return-46-46", method="bug_tmstmp9()", type_label=return];
336 [label="47_ mapping (address => uint256) private _balances;\n336-new_variable-48-48", method="", type_label=new_variable];
343 [label="48_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n343-function_definition-49-51", method="bug_tmstmp25()", type_label=function_definition];
352 [label="49_ return block.timestamp >= 1546300800;\n352-return-50-50", method="bug_tmstmp25()", type_label=return];
358 [label="51_ mapping (address => mapping (address => uint256)) private _allowed;\n358-new_variable-52-52", method="", type_label=new_variable];
367 [label="52_ address winner_tmstmp19;\n367-new_variable-53-53", method="", type_label=new_variable];
371 [label="53_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n371-function_definition-54-57", method="play_tmstmp19(uint startTime)", type_label=function_definition];
379 [label="54_ uint _vtime = block.timestamp;\n379-new_variable-55-55", method="play_tmstmp19(uint startTime)", type_label=new_variable];
387 [label="55_ if_startTime + (5 * 1 days) == _vtime\n387-if-56-57", method="play_tmstmp19(uint startTime)", type_label=if];
2180 [label="55_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
398 [label="56_ winner_tmstmp19 = msg.sender;\n398-expression_statement-57-57", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
404 [label="57_ uint256 private _totalSupply;\n404-new_variable-58-58", method="", type_label=new_variable];
409 [label="58_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n409-function_definition-59-61", method="totalSupply()", type_label=function_definition];
418 [label="59_ return _totalSupply;\n418-return-60-60", method="totalSupply()", type_label=return];
420 [label="61_ address winner_tmstmp38;\n420-new_variable-62-62", method="", type_label=new_variable];
424 [label="62_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n424-function_definition-63-65", method="play_tmstmp38(uint startTime)", type_label=function_definition];
432 [label="63_ if_startTime + (5 * 1 days) == block.timestamp\n432-if-64-65", method="play_tmstmp38(uint startTime)", type_label=if];
2225 [label="63_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
445 [label="64_ winner_tmstmp38 = msg.sender;\n445-expression_statement-65-65", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
451 [label="65_ function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n451-function_definition-66-68", method="balanceOf(address owner)", type_label=function_definition];
464 [label="66_ return _balances[owner];\n464-return-67-67", method="balanceOf(address owner)", type_label=return];
468 [label="68_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n468-function_definition-69-77", method="bug_tmstmp4()", type_label=function_definition];
473 [label="69_ uint pastBlockTime_tmstmp4;\n473-new_variable-70-70", method="bug_tmstmp4()", type_label=new_variable];
478 [label="70_ require(msg.value == 10 ether);\n478-expression_statement-71-71", method="bug_tmstmp4()", type_label=expression_statement];
488 [label="71_ require(now != pastBlockTime_tmstmp4);\n488-expression_statement-72-72", method="bug_tmstmp4()", type_label=expression_statement];
495 [label="72_ pastBlockTime_tmstmp4 = now;\n495-expression_statement-73-73", method="bug_tmstmp4()", type_label=expression_statement];
499 [label="73_ if_now % 15 == 0\n499-if-74-76", method="bug_tmstmp4()", type_label=if];
2292 [label="73_ end_if", method="bug_tmstmp4()", type_label=end_if];
506 [label="74_ msg.sender.transfer(address(this).balance);\n506-expression_statement-75-75", method="bug_tmstmp4()", type_label=expression_statement];
519 [label="77_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n519-function_definition-78-80", method="allowance(address owner,address spender)", type_label=function_definition];
536 [label="78_ return _allowed[owner][spender];\n536-return-79-79", method="allowance(address owner,address spender)", type_label=return];
542 [label="80_ address winner_tmstmp7;\n542-new_variable-81-81", method="", type_label=new_variable];
546 [label="81_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n546-function_definition-82-85", method="play_tmstmp7(uint startTime)", type_label=function_definition];
554 [label="82_ uint _vtime = block.timestamp;\n554-new_variable-83-83", method="play_tmstmp7(uint startTime)", type_label=new_variable];
562 [label="83_ if_startTime + (5 * 1 days) == _vtime\n562-if-84-85", method="play_tmstmp7(uint startTime)", type_label=if];
2355 [label="83_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
573 [label="84_ winner_tmstmp7 = msg.sender;\n573-expression_statement-85-85", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
579 [label="85_ function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n579-function_definition-86-89", method="transfer(address to,uint256 value)", type_label=function_definition];
595 [label="86_ _transfer(msg.sender, to, value);\n595-expression_statement-87-87", method="transfer(address to,uint256 value)", type_label=expression_statement];
606 [label="87_ return true;\n606-return-88-88", method="transfer(address to,uint256 value)", type_label=return];
609 [label="89_ address winner_tmstmp23;\n609-new_variable-90-90", method="", type_label=new_variable];
613 [label="90_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n613-function_definition-91-94", method="play_tmstmp23(uint startTime)", type_label=function_definition];
621 [label="91_ uint _vtime = block.timestamp;\n621-new_variable-92-92", method="play_tmstmp23(uint startTime)", type_label=new_variable];
629 [label="92_ if_startTime + (5 * 1 days) == _vtime\n629-if-93-94", method="play_tmstmp23(uint startTime)", type_label=if];
2422 [label="92_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
640 [label="93_ winner_tmstmp23 = msg.sender;\n640-expression_statement-94-94", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
646 [label="94_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n646-function_definition-95-98", method="approve(address spender,uint256 value)", type_label=function_definition];
662 [label="95_ _approve(msg.sender, spender, value);\n662-expression_statement-96-96", method="approve(address spender,uint256 value)", type_label=expression_statement];
673 [label="96_ return true;\n673-return-97-97", method="approve(address spender,uint256 value)", type_label=return];
676 [label="98_ address winner_tmstmp14;\n676-new_variable-99-99", method="", type_label=new_variable];
680 [label="99_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n680-function_definition-100-102", method="play_tmstmp14(uint startTime)", type_label=function_definition];
688 [label="100_ if_startTime + (5 * 1 days) == block.timestamp\n688-if-101-102", method="play_tmstmp14(uint startTime)", type_label=if];
2481 [label="100_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
701 [label="101_ winner_tmstmp14 = msg.sender;\n701-expression_statement-102-102", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
707 [label="102_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n707-function_definition-103-107", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
727 [label="103_ _transfer(from, to, value);\n727-expression_statement-104-104", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
736 [label="104_ _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n736-expression_statement-105-105", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
758 [label="105_ return true;\n758-return-106-106", method="transferFrom(address from,address to,uint256 value)", type_label=return];
761 [label="107_ address winner_tmstmp30;\n761-new_variable-108-108", method="", type_label=new_variable];
765 [label="108_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n765-function_definition-109-111", method="play_tmstmp30(uint startTime)", type_label=function_definition];
773 [label="109_ if_startTime + (5 * 1 days) == block.timestamp\n773-if-110-111", method="play_tmstmp30(uint startTime)", type_label=if];
2566 [label="109_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
786 [label="110_ winner_tmstmp30 = msg.sender;\n786-expression_statement-111-111", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
792 [label="111_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n792-function_definition-112-115", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
808 [label="112_ _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n808-expression_statement-113-113", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
830 [label="113_ return true;\n830-return-114-114", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
833 [label="115_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n833-function_definition-116-124", method="bug_tmstmp8()", type_label=function_definition];
838 [label="116_ uint pastBlockTime_tmstmp8;\n838-new_variable-117-117", method="bug_tmstmp8()", type_label=new_variable];
843 [label="117_ require(msg.value == 10 ether);\n843-expression_statement-118-118", method="bug_tmstmp8()", type_label=expression_statement];
853 [label="118_ require(now != pastBlockTime_tmstmp8);\n853-expression_statement-119-119", method="bug_tmstmp8()", type_label=expression_statement];
860 [label="119_ pastBlockTime_tmstmp8 = now;\n860-expression_statement-120-120", method="bug_tmstmp8()", type_label=expression_statement];
864 [label="120_ if_now % 15 == 0\n864-if-121-123", method="bug_tmstmp8()", type_label=if];
2657 [label="120_ end_if", method="bug_tmstmp8()", type_label=end_if];
871 [label="121_ msg.sender.transfer(address(this).balance);\n871-expression_statement-122-122", method="bug_tmstmp8()", type_label=expression_statement];
884 [label="124_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n884-function_definition-125-128", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
900 [label="125_ _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n900-expression_statement-126-126", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
922 [label="126_ return true;\n922-return-127-127", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
925 [label="128_ address winner_tmstmp39;\n925-new_variable-129-129", method="", type_label=new_variable];
929 [label="129_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n929-function_definition-130-133", method="play_tmstmp39(uint startTime)", type_label=function_definition];
937 [label="130_ uint _vtime = block.timestamp;\n937-new_variable-131-131", method="play_tmstmp39(uint startTime)", type_label=new_variable];
945 [label="131_ if_startTime + (5 * 1 days) == _vtime\n945-if-132-133", method="play_tmstmp39(uint startTime)", type_label=if];
2738 [label="131_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
956 [label="132_ winner_tmstmp39 = msg.sender;\n956-expression_statement-133-133", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
962 [label="133_ function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n962-function_definition-134-139", method="_transfer(address from,address to,uint256 value)", type_label=function_definition];
978 [label="134_ require(to != address(0));\n978-expression_statement-135-135", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
987 [label="135_ _balances[from] = _balances[from].sub(value);\n987-expression_statement-136-136", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1000 [label="136_ _balances[to] = _balances[to].add(value);\n1000-expression_statement-137-137", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1021 [label="139_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1021-function_definition-140-148", method="bug_tmstmp36()", type_label=function_definition];
1026 [label="140_ uint pastBlockTime_tmstmp36;\n1026-new_variable-141-141", method="bug_tmstmp36()", type_label=new_variable];
1031 [label="141_ require(msg.value == 10 ether);\n1031-expression_statement-142-142", method="bug_tmstmp36()", type_label=expression_statement];
1041 [label="142_ require(now != pastBlockTime_tmstmp36);\n1041-expression_statement-143-143", method="bug_tmstmp36()", type_label=expression_statement];
1048 [label="143_ pastBlockTime_tmstmp36 = now;\n1048-expression_statement-144-144", method="bug_tmstmp36()", type_label=expression_statement];
1052 [label="144_ if_now % 15 == 0\n1052-if-145-147", method="bug_tmstmp36()", type_label=if];
2845 [label="144_ end_if", method="bug_tmstmp36()", type_label=end_if];
1059 [label="145_ msg.sender.transfer(address(this).balance);\n1059-expression_statement-146-146", method="bug_tmstmp36()", type_label=expression_statement];
1072 [label="148_ function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n1072-function_definition-149-154", method="_mint(address account,uint256 value)", type_label=function_definition];
1084 [label="149_ require(account != address(0));\n1084-expression_statement-150-150", method="_mint(address account,uint256 value)", type_label=expression_statement];
1093 [label="150_ _totalSupply = _totalSupply.add(value);\n1093-expression_statement-151-151", method="_mint(address account,uint256 value)", type_label=expression_statement];
1102 [label="151_ _balances[account] = _balances[account].add(value);\n1102-expression_statement-152-152", method="_mint(address account,uint256 value)", type_label=expression_statement];
1125 [label="154_ address winner_tmstmp35;\n1125-new_variable-155-155", method="", type_label=new_variable];
1129 [label="155_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1129-function_definition-156-159", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1137 [label="156_ uint _vtime = block.timestamp;\n1137-new_variable-157-157", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1145 [label="157_ if_startTime + (5 * 1 days) == _vtime\n1145-if-158-159", method="play_tmstmp35(uint startTime)", type_label=if];
2938 [label="157_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1156 [label="158_ winner_tmstmp35 = msg.sender;\n1156-expression_statement-159-159", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1162 [label="159_ function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n1162-function_definition-160-165", method="_burn(address account,uint256 value)", type_label=function_definition];
1174 [label="160_ require(account != address(0));\n1174-expression_statement-161-161", method="_burn(address account,uint256 value)", type_label=expression_statement];
1183 [label="161_ _totalSupply = _totalSupply.sub(value);\n1183-expression_statement-162-162", method="_burn(address account,uint256 value)", type_label=expression_statement];
1192 [label="162_ _balances[account] = _balances[account].sub(value);\n1192-expression_statement-163-163", method="_burn(address account,uint256 value)", type_label=expression_statement];
1215 [label="165_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1215-function_definition-166-174", method="bug_tmstmp40()", type_label=function_definition];
1220 [label="166_ uint pastBlockTime_tmstmp40;\n1220-new_variable-167-167", method="bug_tmstmp40()", type_label=new_variable];
1225 [label="167_ require(msg.value == 10 ether);\n1225-expression_statement-168-168", method="bug_tmstmp40()", type_label=expression_statement];
1235 [label="168_ require(now != pastBlockTime_tmstmp40);\n1235-expression_statement-169-169", method="bug_tmstmp40()", type_label=expression_statement];
1242 [label="169_ pastBlockTime_tmstmp40 = now;\n1242-expression_statement-170-170", method="bug_tmstmp40()", type_label=expression_statement];
1246 [label="170_ if_now % 15 == 0\n1246-if-171-173", method="bug_tmstmp40()", type_label=if];
3039 [label="170_ end_if", method="bug_tmstmp40()", type_label=end_if];
1253 [label="171_ msg.sender.transfer(address(this).balance);\n1253-expression_statement-172-172", method="bug_tmstmp40()", type_label=expression_statement];
1266 [label="174_ function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n1266-function_definition-175-180", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
1282 [label="175_ require(spender != address(0));\n1282-expression_statement-176-176", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1291 [label="176_ require(owner != address(0));\n1291-expression_statement-177-177", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1300 [label="177_ _allowed[owner][spender] = value;\n1300-expression_statement-178-178", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1316 [label="180_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1316-function_definition-181-183", method="bug_tmstmp33()", type_label=function_definition];
1325 [label="181_ return block.timestamp >= 1546300800;\n1325-return-182-182", method="bug_tmstmp33()", type_label=return];
1331 [label="183_ function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n1331-function_definition-184-187", method="_burnFrom(address account,uint256 value)", type_label=function_definition];
1343 [label="184_ _burn(account, value);\n1343-expression_statement-185-185", method="_burnFrom(address account,uint256 value)", type_label=expression_statement];
1350 [label="185_ _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n1350-expression_statement-186-186", method="_burnFrom(address account,uint256 value)", type_label=expression_statement];
1372 [label="187_ address winner_tmstmp27;\n1372-new_variable-188-188", method="", type_label=new_variable];
1376 [label="188_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1376-function_definition-189-192", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1384 [label="189_ uint _vtime = block.timestamp;\n1384-new_variable-190-190", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1392 [label="190_ if_startTime + (5 * 1 days) == _vtime\n1392-if-191-192", method="play_tmstmp27(uint startTime)", type_label=if];
3185 [label="190_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1403 [label="191_ winner_tmstmp27 = msg.sender;\n1403-expression_statement-192-192", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1419 [label="195_ function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n1419-function_definition-196-198", method="burn(uint256 value)", type_label=function_definition];
1427 [label="196_ _burn(msg.sender, value);\n1427-expression_statement-197-197", method="burn(uint256 value)", type_label=expression_statement];
1436 [label="198_ address winner_tmstmp31;\n1436-new_variable-199-199", method="", type_label=new_variable];
1440 [label="199_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1440-function_definition-200-203", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1448 [label="200_ uint _vtime = block.timestamp;\n1448-new_variable-201-201", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1456 [label="201_ if_startTime + (5 * 1 days) == _vtime\n1456-if-202-203", method="play_tmstmp31(uint startTime)", type_label=if];
3249 [label="201_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1467 [label="202_ winner_tmstmp31 = msg.sender;\n1467-expression_statement-203-203", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1473 [label="203_ function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n1473-function_definition-204-206", method="burnFrom(address from,uint256 value)", type_label=function_definition];
1485 [label="204_ _burnFrom(from, value);\n1485-expression_statement-205-205", method="burnFrom(address from,uint256 value)", type_label=expression_statement];
1492 [label="206_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1492-function_definition-207-209", method="bug_tmstmp13()", type_label=function_definition];
1501 [label="207_ return block.timestamp >= 1546300800;\n1501-return-208-208", method="bug_tmstmp13()", type_label=return];
1517 [label="212_ address winner_tmstmp26;\n1517-new_variable-213-213", method="", type_label=new_variable];
1521 [label="213_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n1521-function_definition-214-216", method="play_tmstmp26(uint startTime)", type_label=function_definition];
1529 [label="214_ if_startTime + (5 * 1 days) == block.timestamp\n1529-if-215-216", method="play_tmstmp26(uint startTime)", type_label=if];
3322 [label="214_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
1542 [label="215_ winner_tmstmp26 = msg.sender;\n1542-expression_statement-216-216", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
1548 [label="216_ string private _name;\n1548-new_variable-217-217", method="", type_label=new_variable];
1553 [label="217_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1553-function_definition-218-226", method="bug_tmstmp20()", type_label=function_definition];
1558 [label="218_ uint pastBlockTime_tmstmp20;\n1558-new_variable-219-219", method="bug_tmstmp20()", type_label=new_variable];
1563 [label="219_ require(msg.value == 10 ether);\n1563-expression_statement-220-220", method="bug_tmstmp20()", type_label=expression_statement];
1573 [label="220_ require(now != pastBlockTime_tmstmp20);\n1573-expression_statement-221-221", method="bug_tmstmp20()", type_label=expression_statement];
1580 [label="221_ pastBlockTime_tmstmp20 = now;\n1580-expression_statement-222-222", method="bug_tmstmp20()", type_label=expression_statement];
1584 [label="222_ if_now % 15 == 0\n1584-if-223-225", method="bug_tmstmp20()", type_label=if];
3377 [label="222_ end_if", method="bug_tmstmp20()", type_label=end_if];
1591 [label="223_ msg.sender.transfer(address(this).balance);\n1591-expression_statement-224-224", method="bug_tmstmp20()", type_label=expression_statement];
1604 [label="226_ string private _symbol;\n1604-new_variable-227-227", method="", type_label=new_variable];
1609 [label="227_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1609-function_definition-228-236", method="bug_tmstmp32()", type_label=function_definition];
1614 [label="228_ uint pastBlockTime_tmstmp32;\n1614-new_variable-229-229", method="bug_tmstmp32()", type_label=new_variable];
1619 [label="229_ require(msg.value == 10 ether);\n1619-expression_statement-230-230", method="bug_tmstmp32()", type_label=expression_statement];
1629 [label="230_ require(now != pastBlockTime_tmstmp32);\n1629-expression_statement-231-231", method="bug_tmstmp32()", type_label=expression_statement];
1636 [label="231_ pastBlockTime_tmstmp32 = now;\n1636-expression_statement-232-232", method="bug_tmstmp32()", type_label=expression_statement];
1640 [label="232_ if_now % 15 == 0\n1640-if-233-235", method="bug_tmstmp32()", type_label=if];
3433 [label="232_ end_if", method="bug_tmstmp32()", type_label=end_if];
1647 [label="233_ msg.sender.transfer(address(this).balance);\n1647-expression_statement-234-234", method="bug_tmstmp32()", type_label=expression_statement];
1660 [label="236_ uint8 private _decimals;\n1660-new_variable-237-237", method="", type_label=new_variable];
1679 [label="238_ _name = name;\n1679-expression_statement-239-239", method="", type_label=expression_statement];
1683 [label="239_ _symbol = symbol;\n1683-expression_statement-240-240", method="", type_label=expression_statement];
1687 [label="240_ _decimals = decimals;\n1687-expression_statement-241-241", method="", type_label=expression_statement];
1691 [label="242_ uint256 bugv_tmstmp5 = block.timestamp;\n1691-new_variable-243-243", method="", type_label=new_variable];
1698 [label="243_ function name() public view returns (string memory) {\n        return _name;\n    }\n1698-function_definition-244-246", method="name()", type_label=function_definition];
1707 [label="244_ return _name;\n1707-return-245-245", method="name()", type_label=return];
1709 [label="246_ uint256 bugv_tmstmp1 = block.timestamp;\n1709-new_variable-247-247", method="", type_label=new_variable];
1716 [label="247_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n1716-function_definition-248-250", method="symbol()", type_label=function_definition];
1725 [label="248_ return _symbol;\n1725-return-249-249", method="symbol()", type_label=return];
1727 [label="250_ uint256 bugv_tmstmp2 = block.timestamp;\n1727-new_variable-251-251", method="", type_label=new_variable];
1734 [label="251_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n1734-function_definition-252-254", method="decimals()", type_label=function_definition];
1743 [label="252_ return _decimals;\n1743-return-253-253", method="decimals()", type_label=return];
1745 [label="254_ uint256 bugv_tmstmp3 = block.timestamp;\n1745-new_variable-255-255", method="", type_label=new_variable];
1769 [label="258_ ERC20Detailed('Aggregion Token', 'AGR', 4)\n1769-expression_statement-259-259", method="", type_label=expression_statement];
1780 [label="259_ super._mint(msg.sender, 30000000000000);\n1780-expression_statement-260-260", method="", type_label=expression_statement];
1791 [label="261_ uint256 bugv_tmstmp4 = block.timestamp;\n1791-new_variable-262-262", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1409;
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 155  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
150 -> 1943  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1943 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 1943  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
157 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
176 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
210 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
234 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
244 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
276 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
278 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
321 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
343 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
358 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 398  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
387 -> 2180  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2180 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 2180  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
409 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
424 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 445  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
432 -> 2225  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2225 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 2225  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
451 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
468 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
499 -> 506  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
499 -> 2292  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2292 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
506 -> 2292  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
519 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
546 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 573  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
562 -> 2355  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2355 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 2355  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
579 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
613 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
621 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 640  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
629 -> 2422  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2422 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 2422  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
646 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
680 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 701  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
688 -> 2481  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2481 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 2481  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
707 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
765 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 786  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
773 -> 2566  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2566 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 2566  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
792 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
833 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
853 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
860 -> 864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
864 -> 871  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
864 -> 2657  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2657 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 2657  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
884 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
929 -> 937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 956  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
945 -> 2738  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2738 -> 962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 2738  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
962 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1026 -> 1031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 1041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1041 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 1052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 1059  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1052 -> 2845  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2845 -> 1072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1059 -> 2845  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1072 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1093 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 1145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1145 -> 1156  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1145 -> 2938  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2938 -> 1162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 2938  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1162 -> 1174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1174 -> 1183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1183 -> 1192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1225 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 1242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1242 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1253  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1246 -> 3039  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3039 -> 1266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 3039  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1266 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1282 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1291 -> 1300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1316 -> 1325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1325 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1331 -> 1343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1343 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 1384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 1392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1403  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1392 -> 3185  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3185 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 3185  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1419 -> 1427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1440 -> 1448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1456 -> 1467  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1456 -> 3249  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3249 -> 1473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 3249  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1473 -> 1485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1501 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1521 -> 1529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1529 -> 1542  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1529 -> 3322  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3322 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 3322  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1553 -> 1558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1558 -> 1563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> 1573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1573 -> 1580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1580 -> 1584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 1591  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1584 -> 3377  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3377 -> 1604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1591 -> 3377  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1609 -> 1614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1614 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1619 -> 1629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1629 -> 1636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1636 -> 1640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 1647  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1640 -> 3433  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3433 -> 1660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1647 -> 3433  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1679 -> 1683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1683 -> 1687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1698 -> 1707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1707 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1716 -> 1725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1725 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1734 -> 1743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1743 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
