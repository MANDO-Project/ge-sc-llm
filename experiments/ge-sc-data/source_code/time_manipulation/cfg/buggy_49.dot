digraph  {
13 [label="2_ address winner_tmstmp35;\n13-new_variable-3-3", method="", type_label=new_variable];
17 [label="3_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n17-function_definition-4-7", method="play_tmstmp35(uint startTime)", type_label=function_definition];
25 [label="4_ uint _vtime = block.timestamp;\n25-new_variable-5-5", method="play_tmstmp35(uint startTime)", type_label=new_variable];
33 [label="5_ if_startTime + (5 * 1 days) == _vtime\n33-if-6-7", method="play_tmstmp35(uint startTime)", type_label=if];
538 [label="5_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
44 [label="6_ winner_tmstmp35 = msg.sender;\n44-expression_statement-7-7", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
50 [label="7_ mapping (address => uint256) public balanceOf;\n50-new_variable-8-8", method="", type_label=new_variable];
57 [label="8_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n57-function_definition-9-17", method="bug_tmstmp40()", type_label=function_definition];
62 [label="9_ uint pastBlockTime_tmstmp40;\n62-new_variable-10-10", method="bug_tmstmp40()", type_label=new_variable];
67 [label="10_ require(msg.value == 10 ether);\n67-expression_statement-11-11", method="bug_tmstmp40()", type_label=expression_statement];
77 [label="11_ require(now != pastBlockTime_tmstmp40);\n77-expression_statement-12-12", method="bug_tmstmp40()", type_label=expression_statement];
84 [label="12_ pastBlockTime_tmstmp40 = now;\n84-expression_statement-13-13", method="bug_tmstmp40()", type_label=expression_statement];
88 [label="13_ if_now % 15 == 0\n88-if-14-16", method="bug_tmstmp40()", type_label=if];
593 [label="13_ end_if", method="bug_tmstmp40()", type_label=end_if];
95 [label="14_ msg.sender.transfer(address(this).balance);\n95-expression_statement-15-15", method="bug_tmstmp40()", type_label=expression_statement];
108 [label="17_ string public name = \"TAMC\";\n108-new_variable-18-18", method="", type_label=new_variable];
115 [label="18_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n115-function_definition-19-21", method="bug_tmstmp33()", type_label=function_definition];
124 [label="19_ return block.timestamp >= 1546300800;\n124-return-20-20", method="bug_tmstmp33()", type_label=return];
130 [label="21_ string public symbol = \"TAMC\";\n130-new_variable-22-22", method="", type_label=new_variable];
137 [label="22_ address winner_tmstmp27;\n137-new_variable-23-23", method="", type_label=new_variable];
141 [label="23_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n141-function_definition-24-27", method="play_tmstmp27(uint startTime)", type_label=function_definition];
149 [label="24_ uint _vtime = block.timestamp;\n149-new_variable-25-25", method="play_tmstmp27(uint startTime)", type_label=new_variable];
157 [label="25_ if_startTime + (5 * 1 days) == _vtime\n157-if-26-27", method="play_tmstmp27(uint startTime)", type_label=if];
662 [label="25_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
168 [label="26_ winner_tmstmp27 = msg.sender;\n168-expression_statement-27-27", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
174 [label="27_ uint8 public decimals = 18;\n174-new_variable-28-28", method="", type_label=new_variable];
180 [label="28_ uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);\n180-new_variable-29-29", method="", type_label=new_variable];
193 [label="29_ uint256 bugv_tmstmp3 = block.timestamp;\n193-new_variable-30-30", method="", type_label=new_variable];
216 [label="32_ balanceOf[msg.sender] = totalSupply;\n216-expression_statement-33-33", method="", type_label=expression_statement];
236 [label="35_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n236-function_definition-36-38", method="bug_tmstmp13()", type_label=function_definition];
245 [label="36_ return block.timestamp >= 1546300800;\n245-return-37-37", method="bug_tmstmp13()", type_label=return];
251 [label="38_ function transfer(address to, uint256 value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= value);\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n251-function_definition-39-45", method="transfer(address to,uint256 value)", type_label=function_definition];
268 [label="39_ require(balanceOf[msg.sender] >= value);\n268-expression_statement-40-40", method="transfer(address to,uint256 value)", type_label=expression_statement];
279 [label="40_ balanceOf[msg.sender] -= value;\n279-expression_statement-41-41", method="transfer(address to,uint256 value)", type_label=expression_statement];
287 [label="41_ balanceOf[to] += value;\n287-expression_statement-42-42", method="transfer(address to,uint256 value)", type_label=expression_statement];
303 [label="43_ return true;\n303-return-44-44", method="transfer(address to,uint256 value)", type_label=return];
306 [label="45_ uint256 bugv_tmstmp5 = block.timestamp;\n306-new_variable-46-46", method="", type_label=new_variable];
313 [label="46_ uint256 bugv_tmstmp4 = block.timestamp;\n313-new_variable-47-47", method="", type_label=new_variable];
334 [label="48_ address winner_tmstmp31;\n334-new_variable-49-49", method="", type_label=new_variable];
338 [label="49_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n338-function_definition-50-53", method="play_tmstmp31(uint startTime)", type_label=function_definition];
346 [label="50_ uint _vtime = block.timestamp;\n346-new_variable-51-51", method="play_tmstmp31(uint startTime)", type_label=new_variable];
354 [label="51_ if_startTime + (5 * 1 days) == _vtime\n354-if-52-53", method="play_tmstmp31(uint startTime)", type_label=if];
859 [label="51_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
365 [label="52_ winner_tmstmp31 = msg.sender;\n365-expression_statement-53-53", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
371 [label="53_ mapping(address => mapping(address => uint256)) public allowance;\n371-new_variable-54-54", method="", type_label=new_variable];
380 [label="54_ function approve(address spender, uint256 value)\n        public\n        returns (bool success)\n    {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n380-function_definition-55-62", method="approve(address spender,uint256 value)", type_label=function_definition];
397 [label="58_ allowance[msg.sender][spender] = value;\n397-expression_statement-59-59", method="approve(address spender,uint256 value)", type_label=expression_statement];
417 [label="60_ return true;\n417-return-61-61", method="approve(address spender,uint256 value)", type_label=return];
420 [label="62_ uint256 bugv_tmstmp1 = block.timestamp;\n420-new_variable-63-63", method="", type_label=new_variable];
427 [label="63_ function transferFrom(address from, address to, uint256 value)\n        public\n        returns (bool success)\n    {\n        require(value <= balanceOf[from]);\n        require(value <= allowance[from][msg.sender]);\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n427-function_definition-64-75", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
448 [label="67_ require(value <= balanceOf[from]);\n448-expression_statement-68-68", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
457 [label="68_ require(value <= allowance[from][msg.sender]);\n457-expression_statement-69-69", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
470 [label="69_ balanceOf[from] -= value;\n470-expression_statement-70-70", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
476 [label="70_ balanceOf[to] += value;\n476-expression_statement-71-71", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
482 [label="71_ allowance[from][msg.sender] -= value;\n482-expression_statement-72-72", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
500 [label="73_ return true;\n500-return-74-74", method="transferFrom(address from,address to,uint256 value)", type_label=return];
503 [label="75_ uint256 bugv_tmstmp2 = block.timestamp;\n503-new_variable-76-76", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
17 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 44  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
33 -> 538  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
538 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 538  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
57 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
84 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 95  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
88 -> 593  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
593 -> 108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 593  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
115 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
157 -> 168  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
157 -> 662  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
662 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 662  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
174 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
251 -> 268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
268 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
306 -> 313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
338 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
354 -> 365  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
354 -> 859  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
859 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 859  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
380 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
427 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
