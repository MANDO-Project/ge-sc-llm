digraph  {
13 [label="2_ address leader;\n13-new_variable-3-3", method="", type_label=new_variable];
17 [label="3_ uint    timestamp;\n17-new_variable-4-4", method="", type_label=new_variable];
21 [label="4_ function payOut(uint rand) internal {\n    if ( rand> 0 && now - rand > 24 hours ) {\n      msg.sender.send( msg.value );\n      if ( this.balance > 0 ) {\n        leader.send( this.balance );\n      }\n    }\n    else if ( msg.value >= 1 ether ) {\n      leader = msg.sender;\n      timestamp = rand;\n    }\n  }\n21-function_definition-5-16", method="payOut(uint rand)", type_label=function_definition];
29 [label="5_ if_rand> 0 && now - rand > 24 hours\n29-if-6-15", method="payOut(uint rand)", type_label=if];
143 [label="5_ end_if", method="payOut(uint rand)", type_label=end_if];
41 [label="6_ msg.sender.send( msg.value );\n41-expression_statement-7-7", method="payOut(uint rand)", type_label=expression_statement];
52 [label="7_ if_this.balance > 0\n52-if-8-10", method="payOut(uint rand)", type_label=if];
166 [label="7_ end_if", method="payOut(uint rand)", type_label=end_if];
59 [label="8_ leader.send( this.balance );\n59-expression_statement-9-9", method="payOut(uint rand)", type_label=expression_statement];
68 [label="11_ if_msg.value >= 1 ether\n68-if-12-15", method="payOut(uint rand)", type_label=if];
76 [label="12_ leader = msg.sender;\n76-expression_statement-13-13", method="payOut(uint rand)", type_label=expression_statement];
82 [label="13_ timestamp = rand;\n82-expression_statement-14-14", method="payOut(uint rand)", type_label=expression_statement];
86 [label="16_ function randomGen() constant returns (uint randomNumber) {\n      return block.timestamp;   \n    }\n86-function_definition-17-19", method="randomGen()", type_label=function_definition];
88 [label="16_ constant\n88-expression_statement-17-17", method="randomGen()", type_label=expression_statement];
96 [label="17_ return block.timestamp;\n96-return-18-18", method="randomGen()", type_label=return];
100 [label="19_ function draw(uint seed){\n    uint randomNumber=randomGen(); \n    payOut(randomNumber);\n  }\n100-function_definition-20-23", method="draw(uint seed)", type_label=function_definition];
107 [label="20_ uint randomNumber=randomGen();\n107-new_variable-21-21", method="draw(uint seed)", type_label=new_variable];
114 [label="21_ payOut(randomNumber);\n114-expression_statement-22-22", method="draw(uint seed)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 17  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
21 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 41  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 68  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
41 -> 52  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
52 -> 59  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
52 -> 166  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
166 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
59 -> 166  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
68 -> 76  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
68 -> 143  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
76 -> 82  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 143  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
86 -> 96  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
100 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
