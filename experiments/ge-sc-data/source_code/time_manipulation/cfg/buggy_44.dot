digraph  {
13 [label="2_ uint256 bugv_tmstmp5 = block.timestamp;\n13-new_variable-3-3", method="", type_label=new_variable];
26 [label="4_ function _setMetadata(bytes memory metadata) internal {\n        emit MetadataSet(metadata);\n    }\n26-function_definition-5-7", method="_setMetadata(bytes memory metadata)", type_label=function_definition];
38 [label="7_ address winner_tmstmp3;\n38-new_variable-8-8", method="", type_label=new_variable];
42 [label="8_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n42-function_definition-9-12", method="play_tmstmp3(uint startTime)", type_label=function_definition];
50 [label="9_ uint _vtime = block.timestamp;\n50-new_variable-10-10", method="play_tmstmp3(uint startTime)", type_label=new_variable];
58 [label="10_ if_startTime + (5 * 1 days) == _vtime\n58-if-11-12", method="play_tmstmp3(uint startTime)", type_label=if];
1960 [label="10_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
69 [label="11_ winner_tmstmp3 = msg.sender;\n69-expression_statement-12-12", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
78 [label="14_ address winner_tmstmp2;\n78-new_variable-15-15", method="", type_label=new_variable];
82 [label="15_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n82-function_definition-16-18", method="play_tmstmp2(uint startTime)", type_label=function_definition];
90 [label="16_ if_startTime + (5 * 1 days) == block.timestamp\n90-if-17-18", method="play_tmstmp2(uint startTime)", type_label=if];
1992 [label="16_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
103 [label="17_ winner_tmstmp2 = msg.sender;\n103-expression_statement-18-18", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
109 [label="18_ address private _operator;\n109-new_variable-19-19", method="", type_label=new_variable];
114 [label="19_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n114-function_definition-20-22", method="bug_tmstmp17()", type_label=function_definition];
123 [label="20_ return block.timestamp >= 1546300800;\n123-return-21-21", method="bug_tmstmp17()", type_label=return];
129 [label="22_ bool private _status;\n129-new_variable-23-23", method="", type_label=new_variable];
134 [label="23_ uint256 bugv_tmstmp1 = block.timestamp;\n134-new_variable-24-24", method="", type_label=new_variable];
151 [label="25_ function _setOperator(address operator) internal {\n        require(_operator != operator, \"cannot set same operator\");\n        _operator = operator;\n        emit OperatorUpdated(operator, hasActiveOperator());\n    }\n151-function_definition-26-30", method="_setOperator(address operator)", type_label=function_definition];
159 [label="26_ require(_operator != operator, \"cannot set same operator\");\n159-expression_statement-27-27", method="_setOperator(address operator)", type_label=expression_statement];
169 [label="27_ _operator = operator;\n169-expression_statement-28-28", method="_setOperator(address operator)", type_label=expression_statement];
180 [label="30_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n180-function_definition-31-33", method="bug_tmstmp9()", type_label=function_definition];
189 [label="31_ return block.timestamp >= 1546300800;\n189-return-32-32", method="bug_tmstmp9()", type_label=return];
195 [label="33_ function _transferOperator(address operator) internal {\n        require(_operator != address(0), \"operator not set\");\n        _setOperator(operator);\n    }\n195-function_definition-34-37", method="_transferOperator(address operator)", type_label=function_definition];
203 [label="34_ require(_operator != address(0), \"operator not set\");\n203-expression_statement-35-35", method="_transferOperator(address operator)", type_label=expression_statement];
215 [label="35_ _setOperator(operator);\n215-expression_statement-36-36", method="_transferOperator(address operator)", type_label=expression_statement];
220 [label="37_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n220-function_definition-38-40", method="bug_tmstmp25()", type_label=function_definition];
229 [label="38_ return block.timestamp >= 1546300800;\n229-return-39-39", method="bug_tmstmp25()", type_label=return];
235 [label="40_ function _renounceOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _operator = address(0);\n        _status = false;\n        emit OperatorUpdated(address(0), false);\n    }\n235-function_definition-41-46", method="_renounceOperator()", type_label=function_definition];
239 [label="41_ require(hasActiveOperator(), \"only when operator active\");\n239-expression_statement-42-42", method="_renounceOperator()", type_label=expression_statement];
248 [label="42_ _operator = address(0);\n248-expression_statement-43-43", method="_renounceOperator()", type_label=expression_statement];
254 [label="43_ _status = false;\n254-expression_statement-44-44", method="_renounceOperator()", type_label=expression_statement];
268 [label="46_ address winner_tmstmp19;\n268-new_variable-47-47", method="", type_label=new_variable];
272 [label="47_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n272-function_definition-48-51", method="play_tmstmp19(uint startTime)", type_label=function_definition];
280 [label="48_ uint _vtime = block.timestamp;\n280-new_variable-49-49", method="play_tmstmp19(uint startTime)", type_label=new_variable];
288 [label="49_ if_startTime + (5 * 1 days) == _vtime\n288-if-50-51", method="play_tmstmp19(uint startTime)", type_label=if];
2190 [label="49_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
299 [label="50_ winner_tmstmp19 = msg.sender;\n299-expression_statement-51-51", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
305 [label="51_ function _activateOperator() internal {\n        require(!hasActiveOperator(), \"only when operator not active\");\n        _status = true;\n        emit OperatorUpdated(_operator, true);\n    }\n305-function_definition-52-56", method="_activateOperator()", type_label=function_definition];
309 [label="52_ require(!hasActiveOperator(), \"only when operator not active\");\n309-expression_statement-53-53", method="_activateOperator()", type_label=expression_statement];
319 [label="53_ _status = true;\n319-expression_statement-54-54", method="_activateOperator()", type_label=expression_statement];
331 [label="56_ address winner_tmstmp26;\n331-new_variable-57-57", method="", type_label=new_variable];
335 [label="57_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n335-function_definition-58-60", method="play_tmstmp26(uint startTime)", type_label=function_definition];
343 [label="58_ if_startTime + (5 * 1 days) == block.timestamp\n343-if-59-60", method="play_tmstmp26(uint startTime)", type_label=if];
2245 [label="58_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
356 [label="59_ winner_tmstmp26 = msg.sender;\n356-expression_statement-60-60", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
362 [label="60_ function _deactivateOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _status = false;\n        emit OperatorUpdated(_operator, false);\n    }\n362-function_definition-61-65", method="_deactivateOperator()", type_label=function_definition];
366 [label="61_ require(hasActiveOperator(), \"only when operator active\");\n366-expression_statement-62-62", method="_deactivateOperator()", type_label=expression_statement];
375 [label="62_ _status = false;\n375-expression_statement-63-63", method="_deactivateOperator()", type_label=expression_statement];
387 [label="65_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n387-function_definition-66-74", method="bug_tmstmp20()", type_label=function_definition];
392 [label="66_ uint pastBlockTime_tmstmp20;\n392-new_variable-67-67", method="bug_tmstmp20()", type_label=new_variable];
397 [label="67_ require(msg.value == 10 ether);\n397-expression_statement-68-68", method="bug_tmstmp20()", type_label=expression_statement];
407 [label="68_ require(now != pastBlockTime_tmstmp20);\n407-expression_statement-69-69", method="bug_tmstmp20()", type_label=expression_statement];
414 [label="69_ pastBlockTime_tmstmp20 = now;\n414-expression_statement-70-70", method="bug_tmstmp20()", type_label=expression_statement];
418 [label="70_ if_now % 15 == 0\n418-if-71-73", method="bug_tmstmp20()", type_label=if];
2320 [label="70_ end_if", method="bug_tmstmp20()", type_label=end_if];
425 [label="71_ msg.sender.transfer(address(this).balance);\n425-expression_statement-72-72", method="bug_tmstmp20()", type_label=expression_statement];
438 [label="74_ function getOperator() public view returns (address operator) {\n        operator = _operator;\n    }\n438-function_definition-75-77", method="getOperator()", type_label=function_definition];
448 [label="75_ operator = _operator;\n448-expression_statement-76-76", method="getOperator()", type_label=expression_statement];
452 [label="77_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n452-function_definition-78-86", method="bug_tmstmp32()", type_label=function_definition];
457 [label="78_ uint pastBlockTime_tmstmp32;\n457-new_variable-79-79", method="bug_tmstmp32()", type_label=new_variable];
462 [label="79_ require(msg.value == 10 ether);\n462-expression_statement-80-80", method="bug_tmstmp32()", type_label=expression_statement];
472 [label="80_ require(now != pastBlockTime_tmstmp32);\n472-expression_statement-81-81", method="bug_tmstmp32()", type_label=expression_statement];
479 [label="81_ pastBlockTime_tmstmp32 = now;\n479-expression_statement-82-82", method="bug_tmstmp32()", type_label=expression_statement];
483 [label="82_ if_now % 15 == 0\n483-if-83-85", method="bug_tmstmp32()", type_label=if];
2385 [label="82_ end_if", method="bug_tmstmp32()", type_label=end_if];
490 [label="83_ msg.sender.transfer(address(this).balance);\n490-expression_statement-84-84", method="bug_tmstmp32()", type_label=expression_statement];
503 [label="86_ function isOperator(address caller) public view returns (bool ok) {\n        return (caller == getOperator());\n    }\n503-function_definition-87-89", method="isOperator(address caller)", type_label=function_definition];
517 [label="87_ return (caller == getOperator());\n517-return-88-88", method="isOperator(address caller)", type_label=return];
523 [label="89_ address winner_tmstmp38;\n523-new_variable-90-90", method="", type_label=new_variable];
527 [label="90_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n527-function_definition-91-93", method="play_tmstmp38(uint startTime)", type_label=function_definition];
535 [label="91_ if_startTime + (5 * 1 days) == block.timestamp\n535-if-92-93", method="play_tmstmp38(uint startTime)", type_label=if];
2437 [label="91_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
548 [label="92_ winner_tmstmp38 = msg.sender;\n548-expression_statement-93-93", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
554 [label="93_ function hasActiveOperator() public view returns (bool ok) {\n        return _status;\n    }\n554-function_definition-94-96", method="hasActiveOperator()", type_label=function_definition];
564 [label="94_ return _status;\n564-return-95-95", method="hasActiveOperator()", type_label=return];
566 [label="96_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n566-function_definition-97-105", method="bug_tmstmp4()", type_label=function_definition];
571 [label="97_ uint pastBlockTime_tmstmp4;\n571-new_variable-98-98", method="bug_tmstmp4()", type_label=new_variable];
576 [label="98_ require(msg.value == 10 ether);\n576-expression_statement-99-99", method="bug_tmstmp4()", type_label=expression_statement];
586 [label="99_ require(now != pastBlockTime_tmstmp4);\n586-expression_statement-100-100", method="bug_tmstmp4()", type_label=expression_statement];
593 [label="100_ pastBlockTime_tmstmp4 = now;\n593-expression_statement-101-101", method="bug_tmstmp4()", type_label=expression_statement];
597 [label="101_ if_now % 15 == 0\n597-if-102-104", method="bug_tmstmp4()", type_label=if];
2499 [label="101_ end_if", method="bug_tmstmp4()", type_label=end_if];
604 [label="102_ msg.sender.transfer(address(this).balance);\n604-expression_statement-103-103", method="bug_tmstmp4()", type_label=expression_statement];
617 [label="105_ function isActiveOperator(address caller) public view returns (bool ok) {\n        return (isOperator(caller) && hasActiveOperator());\n    }\n617-function_definition-106-108", method="isActiveOperator(address caller)", type_label=function_definition];
631 [label="106_ return (isOperator(caller) && hasActiveOperator());\n631-return-107-107", method="isActiveOperator(address caller)", type_label=return];
640 [label="108_ address winner_tmstmp7;\n640-new_variable-109-109", method="", type_label=new_variable];
644 [label="109_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n644-function_definition-110-113", method="play_tmstmp7(uint startTime)", type_label=function_definition];
652 [label="110_ uint _vtime = block.timestamp;\n652-new_variable-111-111", method="play_tmstmp7(uint startTime)", type_label=new_variable];
660 [label="111_ if_startTime + (5 * 1 days) == _vtime\n660-if-112-113", method="play_tmstmp7(uint startTime)", type_label=if];
2562 [label="111_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
671 [label="112_ winner_tmstmp7 = msg.sender;\n671-expression_statement-113-113", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
680 [label="115_ uint256 bugv_tmstmp2 = block.timestamp;\n680-new_variable-116-116", method="", type_label=new_variable];
697 [label="117_ uint256 bugv_tmstmp3 = block.timestamp;\n697-new_variable-118-118", method="", type_label=new_variable];
710 [label="119_ function _setMultiHashFormat(uint8 hashFunction, uint8 digestSize) internal {\n        emit HashFormatSet(hashFunction, digestSize);\n    }\n710-function_definition-120-122", method="_setMultiHashFormat(uint8 hashFunction,uint8 digestSize)", type_label=function_definition];
728 [label="122_ address winner_tmstmp23;\n728-new_variable-123-123", method="", type_label=new_variable];
732 [label="123_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n732-function_definition-124-127", method="play_tmstmp23(uint startTime)", type_label=function_definition];
740 [label="124_ uint _vtime = block.timestamp;\n740-new_variable-125-125", method="play_tmstmp23(uint startTime)", type_label=new_variable];
748 [label="125_ if_startTime + (5 * 1 days) == _vtime\n748-if-126-127", method="play_tmstmp23(uint startTime)", type_label=if];
2650 [label="125_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
759 [label="126_ winner_tmstmp23 = msg.sender;\n759-expression_statement-127-127", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
765 [label="127_ function _submitHash(bytes32 hash) internal {\n        emit HashSubmitted(hash);\n    }\n765-function_definition-128-130", method="_submitHash(bytes32 hash)", type_label=function_definition];
777 [label="130_ address winner_tmstmp14;\n777-new_variable-131-131", method="", type_label=new_variable];
781 [label="131_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n781-function_definition-132-134", method="play_tmstmp14(uint startTime)", type_label=function_definition];
789 [label="132_ if_startTime + (5 * 1 days) == block.timestamp\n789-if-133-134", method="play_tmstmp14(uint startTime)", type_label=if];
2691 [label="132_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
802 [label="133_ winner_tmstmp14 = msg.sender;\n802-expression_statement-134-134", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
811 [label="136_ struct MultiHash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 digestSize;\n    }\n811-expression_statement-137-141", method="MultiHash()", type_label=expression_statement];
825 [label="141_ function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {\n        bytes memory out = new bytes(34);\n        out[0] = byte(multihash.hashFunction);\n        out[1] = byte(multihash.digestSize);\n        uint8 i;\n        for (i = 0; i < 32; i++) {\n          out[i+2] = multihash.hash[i];\n        }\n        return out;\n    }\n825-function_definition-142-151", method="_combineMultiHash(MultiHash memory multihash)", type_label=function_definition];
839 [label="142_ bytes memory out = new bytes(34);\n839-new_variable-143-143", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
850 [label="143_ out[0] = byte(multihash.hashFunction);\n850-expression_statement-144-144", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
860 [label="144_ out[1] = byte(multihash.digestSize);\n860-expression_statement-145-145", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
870 [label="145_ uint8 i;\n870-new_variable-146-146", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
875 [label="146_ for(i < 32;;i++)\n875-for-147-149", method="_combineMultiHash(MultiHash memory multihash)", type_label=for];
2777 [label="146_ end_loop", method="_combineMultiHash(MultiHash memory multihash)", type_label=end_loop];
884 [label="146_ i++\n884-expression_statement-147-147", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
887 [label="147_ out[i+2] = multihash.hash[i];\n887-expression_statement-148-148", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
899 [label="149_ return out;\n899-return-150-150", method="_combineMultiHash(MultiHash memory multihash)", type_label=return];
901 [label="151_ address winner_tmstmp30;\n901-new_variable-152-152", method="", type_label=new_variable];
905 [label="152_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n905-function_definition-153-155", method="play_tmstmp30(uint startTime)", type_label=function_definition];
913 [label="153_ if_startTime + (5 * 1 days) == block.timestamp\n913-if-154-155", method="play_tmstmp30(uint startTime)", type_label=if];
2815 [label="153_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
926 [label="154_ winner_tmstmp30 = msg.sender;\n926-expression_statement-155-155", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
932 [label="155_ function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {\n        require(source.length == 34, \"length of source must be 34\");\n        uint8 hashFunction = uint8(source[0]);\n        uint8 digestSize = uint8(source[1]);\n        bytes32 hash;\n        assembly {\n          hash := mload(add(source, 34))\n        }\n        return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n    }\n932-function_definition-156-169", method="_splitMultiHash(bytes memory source)", type_label=function_definition];
946 [label="156_ require(source.length == 34, \"length of source must be 34\");\n946-expression_statement-157-157", method="_splitMultiHash(bytes memory source)", type_label=expression_statement];
958 [label="157_ uint8 hashFunction = uint8(source[0]);\n958-new_variable-158-158", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
968 [label="158_ uint8 digestSize = uint8(source[1]);\n968-new_variable-159-159", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
978 [label="159_ bytes32 hash;\n978-new_variable-160-160", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
996 [label="163_ return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n996-return-164-168", method="_splitMultiHash(bytes memory source)", type_label=return];
1010 [label="169_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1010-function_definition-170-178", method="bug_tmstmp8()", type_label=function_definition];
1015 [label="170_ uint pastBlockTime_tmstmp8;\n1015-new_variable-171-171", method="bug_tmstmp8()", type_label=new_variable];
1020 [label="171_ require(msg.value == 10 ether);\n1020-expression_statement-172-172", method="bug_tmstmp8()", type_label=expression_statement];
1030 [label="172_ require(now != pastBlockTime_tmstmp8);\n1030-expression_statement-173-173", method="bug_tmstmp8()", type_label=expression_statement];
1037 [label="173_ pastBlockTime_tmstmp8 = now;\n1037-expression_statement-174-174", method="bug_tmstmp8()", type_label=expression_statement];
1041 [label="174_ if_now % 15 == 0\n1041-if-175-177", method="bug_tmstmp8()", type_label=if];
2943 [label="174_ end_if", method="bug_tmstmp8()", type_label=end_if];
1048 [label="175_ msg.sender.transfer(address(this).balance);\n1048-expression_statement-176-176", method="bug_tmstmp8()", type_label=expression_statement];
1082 [label="181_ function create(bytes calldata initData) external returns (address instance);\n1082-function_definition-182-182", method="create(bytes calldata initData)", type_label=function_definition];
1094 [label="182_ function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);\n1094-function_definition-183-183", method="createSalty(bytes calldata initData,bytes32 salt)", type_label=function_definition];
1110 [label="183_ function getInitSelector() external view returns (bytes4 initSelector);\n1110-function_definition-184-184", method="getInitSelector()", type_label=function_definition];
1119 [label="184_ function getInstanceRegistry() external view returns (address instanceRegistry);\n1119-function_definition-185-185", method="getInstanceRegistry()", type_label=function_definition];
1128 [label="185_ function getTemplate() external view returns (address template);\n1128-function_definition-186-186", method="getTemplate()", type_label=function_definition];
1137 [label="186_ function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);\n1137-function_definition-187-187", method="getSaltyInstance(bytes calldata,bytes32 salt)", type_label=function_definition];
1153 [label="187_ function getNextInstance(bytes calldata) external view returns (address instance);\n1153-function_definition-188-188", method="getNextInstance(bytes calldata)", type_label=function_definition];
1165 [label="188_ function getInstanceCreator(address instance) external view returns (address creator);\n1165-function_definition-189-189", method="getInstanceCreator(address instance)", type_label=function_definition];
1178 [label="189_ function getInstanceType() external view returns (bytes4 instanceType);\n1178-function_definition-190-190", method="getInstanceType()", type_label=function_definition];
1187 [label="190_ function getInstanceCount() external view returns (uint256 count);\n1187-function_definition-191-191", method="getInstanceCount()", type_label=function_definition];
1196 [label="191_ function getInstance(uint256 index) external view returns (address instance);\n1196-function_definition-192-192", method="getInstance(uint256 index)", type_label=function_definition];
1209 [label="192_ function getInstances() external view returns (address[] memory instances);\n1209-function_definition-193-193", method="getInstances()", type_label=function_definition];
1219 [label="193_ function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n1219-function_definition-194-194", method="getPaginatedInstances(uint256 startIndex,uint256 endIndex)", type_label=function_definition];
1240 [label="196_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1240-function_definition-197-199", method="bug_tmstmp37()", type_label=function_definition];
1249 [label="197_ return block.timestamp >= 1546300800;\n1249-return-198-198", method="bug_tmstmp37()", type_label=return];
1255 [label="199_ address private _factory;\n1255-new_variable-200-200", method="", type_label=new_variable];
1260 [label="200_ modifier initializeTemplate() {\n        _factory = msg.sender;\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n1260-expression_statement-201-207", method="", type_label=expression_statement];
1263 [label="201_ _factory = msg.sender;\n1263-expression_statement-202-202", method="", type_label=expression_statement];
1269 [label="202_ uint32 codeSize;\n1269-new_variable-203-203", method="", type_label=new_variable];
1283 [label="204_ require(codeSize == 0, \"must be called within contract constructor\");\n1283-expression_statement-205-205", method="", type_label=expression_statement];
1293 [label="205_ _;\n1293-expression_statement-206-206", method="", type_label=expression_statement];
1295 [label="207_ function getCreator() public view returns (address creator) {\n        creator = iFactory(_factory).getInstanceCreator(address(this));\n    }\n1295-function_definition-208-210", method="getCreator()", type_label=function_definition];
1305 [label="208_ creator = iFactory(_factory).getInstanceCreator(address(this));\n1305-expression_statement-209-209", method="getCreator()", type_label=expression_statement];
1319 [label="210_ address winner_tmstmp39;\n1319-new_variable-211-211", method="", type_label=new_variable];
1323 [label="211_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1323-function_definition-212-215", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1331 [label="212_ uint _vtime = block.timestamp;\n1331-new_variable-213-213", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1339 [label="213_ if_startTime + (5 * 1 days) == _vtime\n1339-if-214-215", method="play_tmstmp39(uint startTime)", type_label=if];
3241 [label="213_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1350 [label="214_ winner_tmstmp39 = msg.sender;\n1350-expression_statement-215-215", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1356 [label="215_ function isCreator(address caller) public view returns (bool ok) {\n        ok = (caller == getCreator());\n    }\n1356-function_definition-216-218", method="isCreator(address caller)", type_label=function_definition];
1370 [label="216_ ok = (caller == getCreator());\n1370-expression_statement-217-217", method="isCreator(address caller)", type_label=expression_statement];
1378 [label="218_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1378-function_definition-219-227", method="bug_tmstmp36()", type_label=function_definition];
1383 [label="219_ uint pastBlockTime_tmstmp36;\n1383-new_variable-220-220", method="bug_tmstmp36()", type_label=new_variable];
1388 [label="220_ require(msg.value == 10 ether);\n1388-expression_statement-221-221", method="bug_tmstmp36()", type_label=expression_statement];
1398 [label="221_ require(now != pastBlockTime_tmstmp36);\n1398-expression_statement-222-222", method="bug_tmstmp36()", type_label=expression_statement];
1405 [label="222_ pastBlockTime_tmstmp36 = now;\n1405-expression_statement-223-223", method="bug_tmstmp36()", type_label=expression_statement];
1409 [label="223_ if_now % 15 == 0\n1409-if-224-226", method="bug_tmstmp36()", type_label=if];
3311 [label="223_ end_if", method="bug_tmstmp36()", type_label=end_if];
1416 [label="224_ msg.sender.transfer(address(this).balance);\n1416-expression_statement-225-225", method="bug_tmstmp36()", type_label=expression_statement];
1429 [label="227_ function getFactory() public view returns (address factory) {\n        factory = _factory;\n    }\n1429-function_definition-228-230", method="getFactory()", type_label=function_definition];
1439 [label="228_ factory = _factory;\n1439-expression_statement-229-229", method="getFactory()", type_label=expression_statement];
1443 [label="230_ address winner_tmstmp35;\n1443-new_variable-231-231", method="", type_label=new_variable];
1447 [label="231_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1447-function_definition-232-235", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1455 [label="232_ uint _vtime = block.timestamp;\n1455-new_variable-233-233", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1463 [label="233_ if_startTime + (5 * 1 days) == _vtime\n1463-if-234-235", method="play_tmstmp35(uint startTime)", type_label=if];
3365 [label="233_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1474 [label="234_ winner_tmstmp35 = msg.sender;\n1474-expression_statement-235-235", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1498 [label="237_ uint256 bugv_tmstmp4 = block.timestamp;\n1498-new_variable-238-238", method="", type_label=new_variable];
1519 [label="239_ function initialize(\n        address operator,\n        bytes memory multihash,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n        if (multihash.length != 0) {\n            MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);\n            ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);\n            ProofHashes._submitHash(multihashObj.hash);\n        }\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n        emit Initialized(operator, multihash, metadata);\n    }\n1519-function_definition-240-258", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=function_definition];
1534 [label="243_ initializeTemplate()\n1534-expression_statement-244-244", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1537 [label="244_ if_operator != address(0)\n1537-if-245-248", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3439 [label="244_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1544 [label="245_ Operated._setOperator(operator);\n1544-expression_statement-246-246", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1551 [label="246_ Operated._activateOperator();\n1551-expression_statement-247-247", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1556 [label="248_ if_multihash.length != 0\n1556-if-249-253", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3458 [label="248_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1563 [label="249_ MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);\n1563-new_variable-250-250", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=new_variable];
1576 [label="250_ ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);\n1576-expression_statement-251-251", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1589 [label="251_ ProofHashes._submitHash(multihashObj.hash);\n1589-expression_statement-252-252", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1598 [label="253_ if_metadata.length != 0\n1598-if-254-256", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3500 [label="253_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1605 [label="254_ EventMetadata._setMetadata(metadata);\n1605-expression_statement-255-255", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1620 [label="258_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1620-function_definition-259-267", method="bug_tmstmp40()", type_label=function_definition];
1625 [label="259_ uint pastBlockTime_tmstmp40;\n1625-new_variable-260-260", method="bug_tmstmp40()", type_label=new_variable];
1630 [label="260_ require(msg.value == 10 ether);\n1630-expression_statement-261-261", method="bug_tmstmp40()", type_label=expression_statement];
1640 [label="261_ require(now != pastBlockTime_tmstmp40);\n1640-expression_statement-262-262", method="bug_tmstmp40()", type_label=expression_statement];
1647 [label="262_ pastBlockTime_tmstmp40 = now;\n1647-expression_statement-263-263", method="bug_tmstmp40()", type_label=expression_statement];
1651 [label="263_ if_now % 15 == 0\n1651-if-264-266", method="bug_tmstmp40()", type_label=if];
3553 [label="263_ end_if", method="bug_tmstmp40()", type_label=end_if];
1658 [label="264_ msg.sender.transfer(address(this).balance);\n1658-expression_statement-265-265", method="bug_tmstmp40()", type_label=expression_statement];
1671 [label="267_ function submitHash(bytes32 multihash) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        ProofHashes._submitHash(multihash);\n    }\n1671-function_definition-268-271", method="submitHash(bytes32 multihash)", type_label=function_definition];
1679 [label="268_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1679-expression_statement-269-269", method="submitHash(bytes32 multihash)", type_label=expression_statement];
1703 [label="269_ ProofHashes._submitHash(multihash);\n1703-expression_statement-270-270", method="submitHash(bytes32 multihash)", type_label=expression_statement];
1710 [label="271_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1710-function_definition-272-274", method="bug_tmstmp33()", type_label=function_definition];
1719 [label="272_ return block.timestamp >= 1546300800;\n1719-return-273-273", method="bug_tmstmp33()", type_label=return];
1725 [label="274_ function setMetadata(bytes memory metadata) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        EventMetadata._setMetadata(metadata);\n    }\n1725-function_definition-275-278", method="setMetadata(bytes memory metadata)", type_label=function_definition];
1733 [label="275_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1733-expression_statement-276-276", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1757 [label="276_ EventMetadata._setMetadata(metadata);\n1757-expression_statement-277-277", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1764 [label="278_ address winner_tmstmp27;\n1764-new_variable-279-279", method="", type_label=new_variable];
1768 [label="279_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1768-function_definition-280-283", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1776 [label="280_ uint _vtime = block.timestamp;\n1776-new_variable-281-281", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1784 [label="281_ if_startTime + (5 * 1 days) == _vtime\n1784-if-282-283", method="play_tmstmp27(uint startTime)", type_label=if];
3686 [label="281_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1795 [label="282_ winner_tmstmp27 = msg.sender;\n1795-expression_statement-283-283", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1801 [label="283_ function transferOperator(address operator) public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._transferOperator(operator);\n    }\n1801-function_definition-284-287", method="transferOperator(address operator)", type_label=function_definition];
1809 [label="284_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1809-expression_statement-285-285", method="transferOperator(address operator)", type_label=expression_statement];
1824 [label="285_ Operated._transferOperator(operator);\n1824-expression_statement-286-286", method="transferOperator(address operator)", type_label=expression_statement];
1831 [label="287_ address winner_tmstmp31;\n1831-new_variable-288-288", method="", type_label=new_variable];
1835 [label="288_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1835-function_definition-289-292", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1843 [label="289_ uint _vtime = block.timestamp;\n1843-new_variable-290-290", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1851 [label="290_ if_startTime + (5 * 1 days) == _vtime\n1851-if-291-292", method="play_tmstmp31(uint startTime)", type_label=if];
3753 [label="290_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1862 [label="291_ winner_tmstmp31 = msg.sender;\n1862-expression_statement-292-292", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1868 [label="292_ function renounceOperator() public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._renounceOperator();\n    }\n1868-function_definition-293-296", method="renounceOperator()", type_label=function_definition];
1872 [label="293_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1872-expression_statement-294-294", method="renounceOperator()", type_label=expression_statement];
1887 [label="294_ Operated._renounceOperator();\n1887-expression_statement-295-295", method="renounceOperator()", type_label=expression_statement];
1892 [label="296_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1892-function_definition-297-299", method="bug_tmstmp13()", type_label=function_definition];
1901 [label="297_ return block.timestamp >= 1546300800;\n1901-return-298-298", method="bug_tmstmp13()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
75;
677;
808;
1061;
1480;
1612;
42 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 58  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
58 -> 69  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
58 -> 1960  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1960 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 1960  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
82 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 103  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
90 -> 1992  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1992 -> 109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
103 -> 1992  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
114 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
129 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
195 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
235 -> 239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
239 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
248 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
272 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 299  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
288 -> 2190  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2190 -> 305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 2190  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
305 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 356  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
343 -> 2245  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2245 -> 362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 2245  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
362 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 425  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
418 -> 2320  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2320 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 2320  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
438 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 490  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
483 -> 2385  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2385 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 2385  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
503 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
517 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
527 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 548  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
535 -> 2437  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2437 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
548 -> 2437  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
554 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
566 -> 571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
576 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 604  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
597 -> 2499  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2499 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 2499  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
617 -> 631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
631 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
644 -> 652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 671  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
660 -> 2562  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2562 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 2562  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
732 -> 740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
740 -> 748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 759  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
748 -> 2650  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2650 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 2650  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
781 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 802  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
789 -> 2691  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2691 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 2691  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
825 -> 839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
839 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
860 -> 870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
870 -> 875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 887  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
875 -> 2777  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2777 -> 899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 875  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
887 -> 884  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
899 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
905 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
913 -> 926  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
913 -> 2815  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2815 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
926 -> 2815  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
932 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
946 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
958 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
996 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1010 -> 1015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1015 -> 1020  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1020 -> 1030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1030 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 1041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1041 -> 1048  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1041 -> 2943  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2943 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1048 -> 2943  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1240 -> 1249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1249 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1255 -> 1260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1263 -> 1269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1323 -> 1331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 1350  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1339 -> 3241  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3241 -> 1356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 3241  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1356 -> 1370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 1383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1383 -> 1388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1388 -> 1398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1398 -> 1405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1405 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1409 -> 1416  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1409 -> 3311  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3311 -> 1429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1416 -> 3311  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1429 -> 1439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 1455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1455 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1463 -> 1474  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1463 -> 3365  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3365 -> 1480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1474 -> 3365  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1519 -> 1537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1537 -> 1544  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1537 -> 3439  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3439 -> 1556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1544 -> 1551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1551 -> 3439  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1556 -> 1563  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1556 -> 3458  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3458 -> 1598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> 1576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1576 -> 1589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1589 -> 3458  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1598 -> 1605  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1598 -> 3500  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3500 -> 1612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1605 -> 3500  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1620 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 1630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1630 -> 1640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 1647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1647 -> 1651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1651 -> 1658  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1651 -> 3553  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3553 -> 1671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1658 -> 3553  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1671 -> 1679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1679 -> 1703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1710 -> 1719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1719 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1725 -> 1733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1733 -> 1757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1768 -> 1776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1776 -> 1784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1784 -> 1795  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1784 -> 3686  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3686 -> 1801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1795 -> 3686  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1801 -> 1809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1809 -> 1824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1835 -> 1843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1843 -> 1851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1851 -> 1862  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1851 -> 3753  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3753 -> 1868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1862 -> 3753  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1868 -> 1872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1872 -> 1887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1892 -> 1901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1901 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
