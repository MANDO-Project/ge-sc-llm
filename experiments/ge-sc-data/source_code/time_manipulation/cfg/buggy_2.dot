digraph  {
13 [label="2_ uint256 bugv_tmstmp2 = block.timestamp;\n13-new_variable-3-3", method="", type_label=new_variable];
34 [label="4_ uint256 bugv_tmstmp3 = block.timestamp;\n34-new_variable-5-5", method="", type_label=new_variable];
55 [label="6_ uint256 bugv_tmstmp4 = block.timestamp;\n55-new_variable-7-7", method="", type_label=new_variable];
76 [label="8_ address winner_tmstmp38;\n76-new_variable-9-9", method="", type_label=new_variable];
80 [label="9_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n80-function_definition-10-12", method="play_tmstmp38(uint startTime)", type_label=function_definition];
88 [label="10_ if_startTime + (5 * 1 days) == block.timestamp\n88-if-11-12", method="play_tmstmp38(uint startTime)", type_label=if];
1223 [label="10_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
101 [label="11_ winner_tmstmp38 = msg.sender;\n101-expression_statement-12-12", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
107 [label="12_ uint256 public totalSupply;\n107-new_variable-13-13", method="", type_label=new_variable];
112 [label="13_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n112-function_definition-14-22", method="bug_tmstmp4()", type_label=function_definition];
117 [label="14_ uint pastBlockTime_tmstmp4;\n117-new_variable-15-15", method="bug_tmstmp4()", type_label=new_variable];
122 [label="15_ require(msg.value == 10 ether);\n122-expression_statement-16-16", method="bug_tmstmp4()", type_label=expression_statement];
132 [label="16_ require(now != pastBlockTime_tmstmp4);\n132-expression_statement-17-17", method="bug_tmstmp4()", type_label=expression_statement];
139 [label="17_ pastBlockTime_tmstmp4 = now;\n139-expression_statement-18-18", method="bug_tmstmp4()", type_label=expression_statement];
143 [label="18_ if_now % 15 == 0\n143-if-19-21", method="bug_tmstmp4()", type_label=if];
1278 [label="18_ end_if", method="bug_tmstmp4()", type_label=end_if];
150 [label="19_ msg.sender.transfer(address(this).balance);\n150-expression_statement-20-20", method="bug_tmstmp4()", type_label=expression_statement];
163 [label="22_ string public name;\n163-new_variable-23-23", method="", type_label=new_variable];
168 [label="23_ address winner_tmstmp7;\n168-new_variable-24-24", method="", type_label=new_variable];
172 [label="24_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n172-function_definition-25-28", method="play_tmstmp7(uint startTime)", type_label=function_definition];
180 [label="25_ uint _vtime = block.timestamp;\n180-new_variable-26-26", method="play_tmstmp7(uint startTime)", type_label=new_variable];
188 [label="26_ if_startTime + (5 * 1 days) == _vtime\n188-if-27-28", method="play_tmstmp7(uint startTime)", type_label=if];
1323 [label="26_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
199 [label="27_ winner_tmstmp7 = msg.sender;\n199-expression_statement-28-28", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
205 [label="28_ uint8 public decimals;\n205-new_variable-29-29", method="", type_label=new_variable];
210 [label="29_ address winner_tmstmp23;\n210-new_variable-30-30", method="", type_label=new_variable];
214 [label="30_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n214-function_definition-31-34", method="play_tmstmp23(uint startTime)", type_label=function_definition];
222 [label="31_ uint _vtime = block.timestamp;\n222-new_variable-32-32", method="play_tmstmp23(uint startTime)", type_label=new_variable];
230 [label="32_ if_startTime + (5 * 1 days) == _vtime\n230-if-33-34", method="play_tmstmp23(uint startTime)", type_label=if];
1365 [label="32_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
241 [label="33_ winner_tmstmp23 = msg.sender;\n241-expression_statement-34-34", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
247 [label="34_ string public symbol;\n247-new_variable-35-35", method="", type_label=new_variable];
252 [label="35_ address winner_tmstmp14;\n252-new_variable-36-36", method="", type_label=new_variable];
256 [label="36_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n256-function_definition-37-39", method="play_tmstmp14(uint startTime)", type_label=function_definition];
264 [label="37_ if_startTime + (5 * 1 days) == block.timestamp\n264-if-38-39", method="play_tmstmp14(uint startTime)", type_label=if];
1399 [label="37_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
277 [label="38_ winner_tmstmp14 = msg.sender;\n277-expression_statement-39-39", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
283 [label="39_ address public owner;\n283-new_variable-40-40", method="", type_label=new_variable];
288 [label="40_ address winner_tmstmp30;\n288-new_variable-41-41", method="", type_label=new_variable];
292 [label="41_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n292-function_definition-42-44", method="play_tmstmp30(uint startTime)", type_label=function_definition];
300 [label="42_ if_startTime + (5 * 1 days) == block.timestamp\n300-if-43-44", method="play_tmstmp30(uint startTime)", type_label=if];
1435 [label="42_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
313 [label="43_ winner_tmstmp30 = msg.sender;\n313-expression_statement-44-44", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
319 [label="44_ mapping (address => uint256) public balances;\n319-new_variable-45-45", method="", type_label=new_variable];
326 [label="45_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n326-function_definition-46-54", method="bug_tmstmp8()", type_label=function_definition];
331 [label="46_ uint pastBlockTime_tmstmp8;\n331-new_variable-47-47", method="bug_tmstmp8()", type_label=new_variable];
336 [label="47_ require(msg.value == 10 ether);\n336-expression_statement-48-48", method="bug_tmstmp8()", type_label=expression_statement];
346 [label="48_ require(now != pastBlockTime_tmstmp8);\n346-expression_statement-49-49", method="bug_tmstmp8()", type_label=expression_statement];
353 [label="49_ pastBlockTime_tmstmp8 = now;\n353-expression_statement-50-50", method="bug_tmstmp8()", type_label=expression_statement];
357 [label="50_ if_now % 15 == 0\n357-if-51-53", method="bug_tmstmp8()", type_label=if];
1492 [label="50_ end_if", method="bug_tmstmp8()", type_label=end_if];
364 [label="51_ msg.sender.transfer(address(this).balance);\n364-expression_statement-52-52", method="bug_tmstmp8()", type_label=expression_statement];
377 [label="54_ mapping (address => mapping (address => uint256)) public allowed;\n377-new_variable-55-55", method="", type_label=new_variable];
386 [label="55_ address winner_tmstmp39;\n386-new_variable-56-56", method="", type_label=new_variable];
390 [label="56_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n390-function_definition-57-60", method="play_tmstmp39(uint startTime)", type_label=function_definition];
398 [label="57_ uint _vtime = block.timestamp;\n398-new_variable-58-58", method="play_tmstmp39(uint startTime)", type_label=new_variable];
406 [label="58_ if_startTime + (5 * 1 days) == _vtime\n406-if-59-60", method="play_tmstmp39(uint startTime)", type_label=if];
1541 [label="58_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
417 [label="59_ winner_tmstmp39 = msg.sender;\n417-expression_statement-60-60", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
423 [label="60_ bool isTransPaused=false;\n423-new_variable-61-61", method="", type_label=new_variable];
439 [label="65_ owner=msg.sender;\n439-expression_statement-66-66", method="", type_label=expression_statement];
445 [label="66_ if__initialAmount<=0\n445-if-67-73", method="", type_label=if];
1580 [label="66_ end_if", method="", type_label=end_if];
450 [label="67_ totalSupply = 100000000000000000;\n450-expression_statement-68-68", method="", type_label=expression_statement];
454 [label="68_ balances[owner]=totalSupply;\n454-expression_statement-69-69", method="", type_label=expression_statement];
461 [label="70_ totalSupply = _initialAmount;\n461-expression_statement-71-71", method="", type_label=expression_statement];
465 [label="71_ balances[owner]=_initialAmount;\n465-expression_statement-72-72", method="", type_label=expression_statement];
471 [label="73_ if__decimalUnits<=0\n471-if-74-78", method="", type_label=if];
1606 [label="73_ end_if", method="", type_label=end_if];
476 [label="74_ decimals=2;\n476-expression_statement-75-75", method="", type_label=expression_statement];
481 [label="76_ decimals = _decimalUnits;\n481-expression_statement-77-77", method="", type_label=expression_statement];
485 [label="78_ name = \"CareerOn Chain Token\";\n485-expression_statement-79-79", method="", type_label=expression_statement];
490 [label="79_ symbol = \"COT\";\n490-expression_statement-80-80", method="", type_label=expression_statement];
495 [label="81_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n495-function_definition-82-90", method="bug_tmstmp36()", type_label=function_definition];
500 [label="82_ uint pastBlockTime_tmstmp36;\n500-new_variable-83-83", method="bug_tmstmp36()", type_label=new_variable];
505 [label="83_ require(msg.value == 10 ether);\n505-expression_statement-84-84", method="bug_tmstmp36()", type_label=expression_statement];
515 [label="84_ require(now != pastBlockTime_tmstmp36);\n515-expression_statement-85-85", method="bug_tmstmp36()", type_label=expression_statement];
522 [label="85_ pastBlockTime_tmstmp36 = now;\n522-expression_statement-86-86", method="bug_tmstmp36()", type_label=expression_statement];
526 [label="86_ if_now % 15 == 0\n526-if-87-89", method="bug_tmstmp36()", type_label=if];
1661 [label="86_ end_if", method="bug_tmstmp36()", type_label=end_if];
533 [label="87_ msg.sender.transfer(address(this).balance);\n533-expression_statement-88-88", method="bug_tmstmp36()", type_label=expression_statement];
546 [label="90_ function transfer(\n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n        balances[msg.sender] -= _value; \n        balances[_to] += _value; \n		if(msg.sender==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(msg.sender, _to, _value); \n		}\n        return true;\n    }\n546-function_definition-91-108", method="transfer(address _to,uint256 _value)", type_label=function_definition];
563 [label="94_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n563-expression_statement-95-99", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
593 [label="99_ balances[msg.sender] -= _value;\n593-expression_statement-100-100", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
601 [label="100_ balances[_to] += _value;\n601-expression_statement-101-101", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
607 [label="101_ if_msg.sender==owner\n607-if-102-106", method="transfer(address _to,uint256 _value)", type_label=if];
1742 [label="101_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
635 [label="106_ return true;\n635-return-107-107", method="transfer(address _to,uint256 _value)", type_label=return];
638 [label="108_ address winner_tmstmp35;\n638-new_variable-109-109", method="", type_label=new_variable];
642 [label="109_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n642-function_definition-110-113", method="play_tmstmp35(uint startTime)", type_label=function_definition];
650 [label="110_ uint _vtime = block.timestamp;\n650-new_variable-111-111", method="play_tmstmp35(uint startTime)", type_label=new_variable];
658 [label="111_ if_startTime + (5 * 1 days) == _vtime\n658-if-112-113", method="play_tmstmp35(uint startTime)", type_label=if];
1793 [label="111_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
669 [label="112_ winner_tmstmp35 = msg.sender;\n669-expression_statement-113-113", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
675 [label="113_ function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n        balances[_to] += _value; \n        balances[_from] -= _value;  \n        allowed[_from][msg.sender] -= _value; \n        if(_from==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(_from, _to, _value); \n		}\n        return true;\n    }\n675-function_definition-114-134", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
696 [label="118_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n696-expression_statement-119-124", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
736 [label="124_ balances[_to] += _value;\n736-expression_statement-125-125", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
742 [label="125_ balances[_from] -= _value;\n742-expression_statement-126-126", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
748 [label="126_ allowed[_from][msg.sender] -= _value;\n748-expression_statement-127-127", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
758 [label="127_ if__from==owner\n758-if-128-132", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1893 [label="127_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
782 [label="132_ return true;\n782-return-133-133", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
785 [label="134_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n785-function_definition-135-143", method="bug_tmstmp40()", type_label=function_definition];
790 [label="135_ uint pastBlockTime_tmstmp40;\n790-new_variable-136-136", method="bug_tmstmp40()", type_label=new_variable];
795 [label="136_ require(msg.value == 10 ether);\n795-expression_statement-137-137", method="bug_tmstmp40()", type_label=expression_statement];
805 [label="137_ require(now != pastBlockTime_tmstmp40);\n805-expression_statement-138-138", method="bug_tmstmp40()", type_label=expression_statement];
812 [label="138_ pastBlockTime_tmstmp40 = now;\n812-expression_statement-139-139", method="bug_tmstmp40()", type_label=expression_statement];
816 [label="139_ if_now % 15 == 0\n816-if-140-142", method="bug_tmstmp40()", type_label=if];
1951 [label="139_ end_if", method="bug_tmstmp40()", type_label=end_if];
823 [label="140_ msg.sender.transfer(address(this).balance);\n823-expression_statement-141-141", method="bug_tmstmp40()", type_label=expression_statement];
836 [label="143_ function approve(address _spender, uint256 _value) public returns (bool success) \n    { \n        assert(msg.sender!=_spender && _value>0);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n836-function_definition-144-150", method="approve(address _spender,uint256 _value)", type_label=function_definition];
853 [label="145_ assert(msg.sender!=_spender && _value>0);\n853-expression_statement-146-146", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
866 [label="146_ allowed[msg.sender][_spender] = _value;\n866-expression_statement-147-147", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
886 [label="148_ return true;\n886-return-149-149", method="approve(address _spender,uint256 _value)", type_label=return];
889 [label="150_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n889-function_definition-151-153", method="bug_tmstmp33()", type_label=function_definition];
898 [label="151_ return block.timestamp >= 1546300800;\n898-return-152-152", method="bug_tmstmp33()", type_label=return];
904 [label="153_ function allowance(\n        address _owner, \n        address _spender) public view returns (uint256 remaining) \n    {\n        return allowed[_owner][_spender]; \n    }\n904-function_definition-154-159", method="allowance(address _owner,address _spender)", type_label=function_definition];
922 [label="157_ return allowed[_owner][_spender];\n922-return-158-158", method="allowance(address _owner,address _spender)", type_label=return];
928 [label="159_ address winner_tmstmp27;\n928-new_variable-160-160", method="", type_label=new_variable];
932 [label="160_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n932-function_definition-161-164", method="play_tmstmp27(uint startTime)", type_label=function_definition];
940 [label="161_ uint _vtime = block.timestamp;\n940-new_variable-162-162", method="play_tmstmp27(uint startTime)", type_label=new_variable];
948 [label="162_ if_startTime + (5 * 1 days) == _vtime\n948-if-163-164", method="play_tmstmp27(uint startTime)", type_label=if];
2083 [label="162_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
959 [label="163_ winner_tmstmp27 = msg.sender;\n959-expression_statement-164-164", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
965 [label="164_ function changeOwner(address newOwner) public{\n        assert(msg.sender==owner && msg.sender!=newOwner);\n        balances[newOwner]=balances[owner];\n        balances[owner]=0;\n        owner=newOwner;\n        emit OwnerChang(msg.sender,newOwner,balances[owner]); \n    }\n965-function_definition-165-171", method="changeOwner(address newOwner)", type_label=function_definition];
973 [label="165_ assert(msg.sender==owner && msg.sender!=newOwner);\n973-expression_statement-166-166", method="changeOwner(address newOwner)", type_label=expression_statement];
988 [label="166_ balances[newOwner]=balances[owner];\n988-expression_statement-167-167", method="changeOwner(address newOwner)", type_label=expression_statement];
996 [label="167_ balances[owner]=0;\n996-expression_statement-168-168", method="changeOwner(address newOwner)", type_label=expression_statement];
1002 [label="168_ owner=newOwner;\n1002-expression_statement-169-169", method="changeOwner(address newOwner)", type_label=expression_statement];
1018 [label="171_ address winner_tmstmp31;\n1018-new_variable-172-172", method="", type_label=new_variable];
1022 [label="172_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1022-function_definition-173-176", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1030 [label="173_ uint _vtime = block.timestamp;\n1030-new_variable-174-174", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1038 [label="174_ if_startTime + (5 * 1 days) == _vtime\n1038-if-175-176", method="play_tmstmp31(uint startTime)", type_label=if];
2173 [label="174_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1049 [label="175_ winner_tmstmp31 = msg.sender;\n1049-expression_statement-176-176", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1055 [label="176_ function setPauseStatus(bool isPaused)public{\n        assert(msg.sender==owner);\n        isTransPaused=isPaused;\n    }\n1055-function_definition-177-180", method="setPauseStatus(bool isPaused)", type_label=function_definition];
1063 [label="177_ assert(msg.sender==owner);\n1063-expression_statement-178-178", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1072 [label="178_ isTransPaused=isPaused;\n1072-expression_statement-179-179", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1076 [label="180_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1076-function_definition-181-183", method="bug_tmstmp13()", type_label=function_definition];
1085 [label="181_ return block.timestamp >= 1546300800;\n1085-return-182-182", method="bug_tmstmp13()", type_label=return];
1091 [label="183_ function changeContractName(string memory _newName,string memory _newSymbol) public {\n        assert(msg.sender==owner);\n        name=_newName;\n        symbol=_newSymbol;\n    }\n1091-function_definition-184-188", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=function_definition];
1103 [label="184_ assert(msg.sender==owner);\n1103-expression_statement-185-185", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1112 [label="185_ name=_newName;\n1112-expression_statement-186-186", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1116 [label="186_ symbol=_newSymbol;\n1116-expression_statement-187-187", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1120 [label="188_ uint256 bugv_tmstmp5 = block.timestamp;\n1120-new_variable-189-189", method="", type_label=new_variable];
1133 [label="192_ uint256 bugv_tmstmp1 = block.timestamp;\n1133-new_variable-193-193", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
625;
774;
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 101  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
88 -> 1223  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1223 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 1223  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
112 -> 117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
117 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
132 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
143 -> 150  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
143 -> 1278  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1278 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 1278  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
163 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 199  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
188 -> 1323  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1323 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 1323  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
205 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 241  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
230 -> 1365  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1365 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 1365  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
247 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
256 -> 264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
264 -> 277  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
264 -> 1399  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1399 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 1399  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
283 -> 288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 313  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
300 -> 1435  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1435 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 1435  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
326 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
346 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 364  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
357 -> 1492  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1492 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 1492  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
377 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 417  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
406 -> 1541  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1541 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 1541  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
439 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 450  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
445 -> 461  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1580 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 1580  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
461 -> 465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 1580  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
471 -> 476  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
471 -> 481  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1606 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 1606  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
481 -> 1606  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
485 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
526 -> 533  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
526 -> 1661  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1661 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
533 -> 1661  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
546 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
635 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
642 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
650 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 669  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
658 -> 1793  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1793 -> 675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 1793  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
675 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
785 -> 790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
790 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
805 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 823  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
816 -> 1951  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1951 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 1951  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
836 -> 853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
853 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
889 -> 898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
898 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
904 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
932 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 959  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
948 -> 2083  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2083 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 2083  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
965 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
988 -> 996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
996 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1022 -> 1030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1030 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1049  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1038 -> 2173  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2173 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 2173  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1055 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1085 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1091 -> 1103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1103 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 1742  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
774 -> 1893  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
