digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n50-function_definition-8-10", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ return sub(a, b, \"SafeMath: subtraction overflow\");\n67-return-9-9", method="sub(uint256 a,uint256 b)", type_label=return];
77 [label="10_ function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n77-function_definition-11-15", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
98 [label="11_ require(b <= a, errorMessage);\n98-expression_statement-12-12", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
107 [label="12_ uint256 c = a - b;\n107-new_variable-13-13", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=new_variable];
115 [label="13_ return c;\n115-return-14-14", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
117 [label="15_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n117-function_definition-16-23", method="mul(uint256 a,uint256 b)", type_label=function_definition];
134 [label="16_ if_a == 0\n134-if-17-19", method="mul(uint256 a,uint256 b)", type_label=if];
5227 [label="16_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
139 [label="17_ return 0;\n139-return-18-18", method="mul(uint256 a,uint256 b)", type_label=return];
141 [label="19_ uint256 c = a * b;\n141-new_variable-20-20", method="mul(uint256 a,uint256 b)", type_label=new_variable];
149 [label="20_ require(c / a == b, \"SafeMath: multiplication overflow\");\n149-expression_statement-21-21", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
161 [label="21_ return c;\n161-return-22-22", method="mul(uint256 a,uint256 b)", type_label=return];
163 [label="23_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n163-function_definition-24-26", method="div(uint256 a,uint256 b)", type_label=function_definition];
180 [label="24_ return div(a, b, \"SafeMath: division by zero\");\n180-return-25-25", method="div(uint256 a,uint256 b)", type_label=return];
190 [label="26_ function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n190-function_definition-27-31", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
211 [label="27_ require(b > 0, errorMessage);\n211-expression_statement-28-28", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
220 [label="28_ uint256 c = a / b;\n220-new_variable-29-29", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=new_variable];
228 [label="29_ return c;\n228-return-30-30", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
230 [label="31_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n230-function_definition-32-34", method="mod(uint256 a,uint256 b)", type_label=function_definition];
247 [label="32_ return mod(a, b, \"SafeMath: modulo by zero\");\n247-return-33-33", method="mod(uint256 a,uint256 b)", type_label=return];
257 [label="34_ function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n257-function_definition-35-38", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
278 [label="35_ require(b != 0, errorMessage);\n278-expression_statement-36-36", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
287 [label="36_ return a % b;\n287-return-37-37", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
303 [label="42_ struct User {\n        uint256 totalInvestCount;\n        uint256 totalInvestAmount;\n        uint256 totalStaticCommissionWithdrawAmount;\n        uint256 totalDynamicCommissionWithdrawAmount;\n        uint256 totalWithdrawAmount;\n        uint256 downlineCount;\n        uint256 nodeCount;\n        uint256 totalDownlineInvestAmount;\n        uint256 currentInvestTime;\n        uint256 currentInvestAmount;\n        uint256 currentInvestCycle;\n        uint256 currentlevel;\n        uint256 currentStaticCommissionRatio;\n        uint256 currentStaticCommissionWithdrawAmount;\n        uint256 staticCommissionBalance;\n        uint256 dynamicCommissionBalance;\n        uint256 calcDynamicCommissionAmount;\n        address sponsorAddress;\n    }\n303-expression_statement-43-62", method="User()", type_label=expression_statement];
377 [label="62_ struct InvestRecord {\n        uint256 time;\n        uint256 amount;\n        uint256 cycle;\n    }\n377-expression_statement-63-67", method="InvestRecord()", type_label=expression_statement];
391 [label="67_ struct CommissionRecord {\n        uint256 time;\n        uint256 amount;\n    }\n391-expression_statement-68-71", method="CommissionRecord()", type_label=expression_statement];
401 [label="71_ uint256 private constant ONE_ETH = 1 ether;\n401-new_variable-72-72", method="", type_label=new_variable];
408 [label="72_ uint256 private constant ONE_DAY = 1 days;\n408-new_variable-73-73", method="", type_label=new_variable];
415 [label="73_ address private constant GENESIS_USER_ADDRESS = 0xe00d13D53Ba180EAD5F4838BD56b15629026A8C9;\n415-new_variable-74-74", method="", type_label=new_variable];
421 [label="74_ address private constant ENGINEER_ADDRESS = 0xddf0bB01f81059CCdB3D5bF5b1C7Bd540aDDFEac;\n421-new_variable-75-75", method="", type_label=new_variable];
427 [label="75_ bool private initialized = false;\n427-new_variable-76-76", method="", type_label=new_variable];
434 [label="76_ address winner_tmstmp18;\n434-new_variable-77-77", method="", type_label=new_variable];
438 [label="77_ function play_tmstmp18(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp18 = msg.sender;}}\n438-function_definition-78-80", method="play_tmstmp18(uint startTime)", type_label=function_definition];
446 [label="78_ if_startTime + (5 * 1 days) == block.timestamp\n446-if-79-80", method="play_tmstmp18(uint startTime)", type_label=if];
5539 [label="78_ end_if", method="play_tmstmp18(uint startTime)", type_label=end_if];
459 [label="79_ winner_tmstmp18 = msg.sender;\n459-expression_statement-80-80", method="play_tmstmp18(uint startTime)", type_label=expression_statement];
465 [label="80_ address public owner;\n465-new_variable-81-81", method="", type_label=new_variable];
470 [label="81_ function bug_tmstmp29() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n470-function_definition-82-84", method="bug_tmstmp29()", type_label=function_definition];
479 [label="82_ return block.timestamp >= 1546300800;\n479-return-83-83", method="bug_tmstmp29()", type_label=return];
485 [label="84_ uint256 public totalInvestCount;\n485-new_variable-85-85", method="", type_label=new_variable];
490 [label="85_ address winner_tmstmp6;\n490-new_variable-86-86", method="", type_label=new_variable];
494 [label="86_ function play_tmstmp6(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp6 = msg.sender;}}\n494-function_definition-87-89", method="play_tmstmp6(uint startTime)", type_label=function_definition];
502 [label="87_ if_startTime + (5 * 1 days) == block.timestamp\n502-if-88-89", method="play_tmstmp6(uint startTime)", type_label=if];
5595 [label="87_ end_if", method="play_tmstmp6(uint startTime)", type_label=end_if];
515 [label="88_ winner_tmstmp6 = msg.sender;\n515-expression_statement-89-89", method="play_tmstmp6(uint startTime)", type_label=expression_statement];
521 [label="89_ uint256 public totalInvestAmount;\n521-new_variable-90-90", method="", type_label=new_variable];
526 [label="90_ function bug_tmstmp16 () public payable {\n	uint pastBlockTime_tmstmp16;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp16);  \n        pastBlockTime_tmstmp16 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n526-function_definition-91-99", method="bug_tmstmp16()", type_label=function_definition];
531 [label="91_ uint pastBlockTime_tmstmp16;\n531-new_variable-92-92", method="bug_tmstmp16()", type_label=new_variable];
536 [label="92_ require(msg.value == 10 ether);\n536-expression_statement-93-93", method="bug_tmstmp16()", type_label=expression_statement];
546 [label="93_ require(now != pastBlockTime_tmstmp16);\n546-expression_statement-94-94", method="bug_tmstmp16()", type_label=expression_statement];
553 [label="94_ pastBlockTime_tmstmp16 = now;\n553-expression_statement-95-95", method="bug_tmstmp16()", type_label=expression_statement];
557 [label="95_ if_now % 15 == 0\n557-if-96-98", method="bug_tmstmp16()", type_label=if];
5650 [label="95_ end_if", method="bug_tmstmp16()", type_label=end_if];
564 [label="96_ msg.sender.transfer(address(this).balance);\n564-expression_statement-97-97", method="bug_tmstmp16()", type_label=expression_statement];
577 [label="99_ uint256 public totalStaticCommissionWithdrawAmount;\n577-new_variable-100-100", method="", type_label=new_variable];
582 [label="100_ function bug_tmstmp24 () public payable {\n	uint pastBlockTime_tmstmp24;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp24);  \n        pastBlockTime_tmstmp24 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n582-function_definition-101-109", method="bug_tmstmp24()", type_label=function_definition];
587 [label="101_ uint pastBlockTime_tmstmp24;\n587-new_variable-102-102", method="bug_tmstmp24()", type_label=new_variable];
592 [label="102_ require(msg.value == 10 ether);\n592-expression_statement-103-103", method="bug_tmstmp24()", type_label=expression_statement];
602 [label="103_ require(now != pastBlockTime_tmstmp24);\n602-expression_statement-104-104", method="bug_tmstmp24()", type_label=expression_statement];
609 [label="104_ pastBlockTime_tmstmp24 = now;\n609-expression_statement-105-105", method="bug_tmstmp24()", type_label=expression_statement];
613 [label="105_ if_now % 15 == 0\n613-if-106-108", method="bug_tmstmp24()", type_label=if];
5706 [label="105_ end_if", method="bug_tmstmp24()", type_label=end_if];
620 [label="106_ msg.sender.transfer(address(this).balance);\n620-expression_statement-107-107", method="bug_tmstmp24()", type_label=expression_statement];
633 [label="109_ uint256 public totalDynamicCommissionWithdrawAmount;\n633-new_variable-110-110", method="", type_label=new_variable];
638 [label="110_ function bug_tmstmp5() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n638-function_definition-111-113", method="bug_tmstmp5()", type_label=function_definition];
647 [label="111_ return block.timestamp >= 1546300800;\n647-return-112-112", method="bug_tmstmp5()", type_label=return];
653 [label="113_ uint256 public totalWithdrawAmount;\n653-new_variable-114-114", method="", type_label=new_variable];
658 [label="114_ address winner_tmstmp15;\n658-new_variable-115-115", method="", type_label=new_variable];
662 [label="115_ function play_tmstmp15(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp15 = msg.sender;}}\n662-function_definition-116-119", method="play_tmstmp15(uint startTime)", type_label=function_definition];
670 [label="116_ uint _vtime = block.timestamp;\n670-new_variable-117-117", method="play_tmstmp15(uint startTime)", type_label=new_variable];
678 [label="117_ if_startTime + (5 * 1 days) == _vtime\n678-if-118-119", method="play_tmstmp15(uint startTime)", type_label=if];
5771 [label="117_ end_if", method="play_tmstmp15(uint startTime)", type_label=end_if];
689 [label="118_ winner_tmstmp15 = msg.sender;\n689-expression_statement-119-119", method="play_tmstmp15(uint startTime)", type_label=expression_statement];
695 [label="119_ uint256 public totalUserCount;\n695-new_variable-120-120", method="", type_label=new_variable];
700 [label="120_ function bug_tmstmp28 () public payable {\n	uint pastBlockTime_tmstmp28;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp28);  \n        pastBlockTime_tmstmp28 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n700-function_definition-121-129", method="bug_tmstmp28()", type_label=function_definition];
705 [label="121_ uint pastBlockTime_tmstmp28;\n705-new_variable-122-122", method="bug_tmstmp28()", type_label=new_variable];
710 [label="122_ require(msg.value == 10 ether);\n710-expression_statement-123-123", method="bug_tmstmp28()", type_label=expression_statement];
720 [label="123_ require(now != pastBlockTime_tmstmp28);\n720-expression_statement-124-124", method="bug_tmstmp28()", type_label=expression_statement];
727 [label="124_ pastBlockTime_tmstmp28 = now;\n727-expression_statement-125-125", method="bug_tmstmp28()", type_label=expression_statement];
731 [label="125_ if_now % 15 == 0\n731-if-126-128", method="bug_tmstmp28()", type_label=if];
5824 [label="125_ end_if", method="bug_tmstmp28()", type_label=end_if];
738 [label="126_ msg.sender.transfer(address(this).balance);\n738-expression_statement-127-127", method="bug_tmstmp28()", type_label=expression_statement];
751 [label="129_ uint256 public engineerFunds;\n751-new_variable-130-130", method="", type_label=new_variable];
756 [label="130_ address winner_tmstmp34;\n756-new_variable-131-131", method="", type_label=new_variable];
760 [label="131_ function play_tmstmp34(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp34 = msg.sender;}}\n760-function_definition-132-134", method="play_tmstmp34(uint startTime)", type_label=function_definition];
768 [label="132_ if_startTime + (5 * 1 days) == block.timestamp\n768-if-133-134", method="play_tmstmp34(uint startTime)", type_label=if];
5861 [label="132_ end_if", method="play_tmstmp34(uint startTime)", type_label=end_if];
781 [label="133_ winner_tmstmp34 = msg.sender;\n781-expression_statement-134-134", method="play_tmstmp34(uint startTime)", type_label=expression_statement];
787 [label="134_ uint256 public engineerWithdrawAmount;\n787-new_variable-135-135", method="", type_label=new_variable];
792 [label="135_ function bug_tmstmp21() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n792-function_definition-136-138", method="bug_tmstmp21()", type_label=function_definition];
801 [label="136_ return block.timestamp >= 1546300800;\n801-return-137-137", method="bug_tmstmp21()", type_label=return];
807 [label="138_ uint256 public operatorFunds;\n807-new_variable-139-139", method="", type_label=new_variable];
812 [label="139_ address winner_tmstmp10;\n812-new_variable-140-140", method="", type_label=new_variable];
816 [label="140_ function play_tmstmp10(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp10 = msg.sender;}}\n816-function_definition-141-143", method="play_tmstmp10(uint startTime)", type_label=function_definition];
824 [label="141_ if_startTime + (5 * 1 days) == block.timestamp\n824-if-142-143", method="play_tmstmp10(uint startTime)", type_label=if];
5917 [label="141_ end_if", method="play_tmstmp10(uint startTime)", type_label=end_if];
837 [label="142_ winner_tmstmp10 = msg.sender;\n837-expression_statement-143-143", method="play_tmstmp10(uint startTime)", type_label=expression_statement];
843 [label="143_ uint256 public operatorWithdrawAmount;\n843-new_variable-144-144", method="", type_label=new_variable];
848 [label="144_ address winner_tmstmp22;\n848-new_variable-145-145", method="", type_label=new_variable];
852 [label="145_ function play_tmstmp22(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp22 = msg.sender;}}\n852-function_definition-146-148", method="play_tmstmp22(uint startTime)", type_label=function_definition];
860 [label="146_ if_startTime + (5 * 1 days) == block.timestamp\n860-if-147-148", method="play_tmstmp22(uint startTime)", type_label=if];
5953 [label="146_ end_if", method="play_tmstmp22(uint startTime)", type_label=end_if];
873 [label="147_ winner_tmstmp22 = msg.sender;\n873-expression_statement-148-148", method="play_tmstmp22(uint startTime)", type_label=expression_statement];
879 [label="148_ mapping (address => User) private userMapping;\n879-new_variable-149-149", method="", type_label=new_variable];
887 [label="149_ function bug_tmstmp12 () public payable {\n	uint pastBlockTime_tmstmp12;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp12);  \n        pastBlockTime_tmstmp12 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n887-function_definition-150-158", method="bug_tmstmp12()", type_label=function_definition];
892 [label="150_ uint pastBlockTime_tmstmp12;\n892-new_variable-151-151", method="bug_tmstmp12()", type_label=new_variable];
897 [label="151_ require(msg.value == 10 ether);\n897-expression_statement-152-152", method="bug_tmstmp12()", type_label=expression_statement];
907 [label="152_ require(now != pastBlockTime_tmstmp12);\n907-expression_statement-153-153", method="bug_tmstmp12()", type_label=expression_statement];
914 [label="153_ pastBlockTime_tmstmp12 = now;\n914-expression_statement-154-154", method="bug_tmstmp12()", type_label=expression_statement];
918 [label="154_ if_now % 15 == 0\n918-if-155-157", method="bug_tmstmp12()", type_label=if];
6011 [label="154_ end_if", method="bug_tmstmp12()", type_label=end_if];
925 [label="155_ msg.sender.transfer(address(this).balance);\n925-expression_statement-156-156", method="bug_tmstmp12()", type_label=expression_statement];
938 [label="158_ mapping (uint256 => address) private addressMapping;\n938-new_variable-159-159", method="", type_label=new_variable];
945 [label="159_ address winner_tmstmp11;\n945-new_variable-160-160", method="", type_label=new_variable];
949 [label="160_ function play_tmstmp11(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp11 = msg.sender;}}\n949-function_definition-161-164", method="play_tmstmp11(uint startTime)", type_label=function_definition];
957 [label="161_ uint _vtime = block.timestamp;\n957-new_variable-162-162", method="play_tmstmp11(uint startTime)", type_label=new_variable];
965 [label="162_ if_startTime + (5 * 1 days) == _vtime\n965-if-163-164", method="play_tmstmp11(uint startTime)", type_label=if];
6058 [label="162_ end_if", method="play_tmstmp11(uint startTime)", type_label=end_if];
976 [label="163_ winner_tmstmp11 = msg.sender;\n976-expression_statement-164-164", method="play_tmstmp11(uint startTime)", type_label=expression_statement];
982 [label="164_ mapping (address => InvestRecord[9]) private investRecordMapping;\n982-new_variable-165-165", method="", type_label=new_variable];
992 [label="165_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n992-function_definition-166-168", method="bug_tmstmp1()", type_label=function_definition];
1001 [label="166_ return block.timestamp >= 1546300800;\n1001-return-167-167", method="bug_tmstmp1()", type_label=return];
1007 [label="168_ mapping (address => CommissionRecord[9]) private staticCommissionRecordMapping;\n1007-new_variable-169-169", method="", type_label=new_variable];
1017 [label="169_ address winner_tmstmp2;\n1017-new_variable-170-170", method="", type_label=new_variable];
1021 [label="170_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n1021-function_definition-171-173", method="play_tmstmp2(uint startTime)", type_label=function_definition];
1029 [label="171_ if_startTime + (5 * 1 days) == block.timestamp\n1029-if-172-173", method="play_tmstmp2(uint startTime)", type_label=if];
6122 [label="171_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
1042 [label="172_ winner_tmstmp2 = msg.sender;\n1042-expression_statement-173-173", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
1048 [label="173_ mapping (address => CommissionRecord[9]) private dynamicCommissionRecordMapping;\n1048-new_variable-174-174", method="", type_label=new_variable];
1058 [label="174_ function initialize() public {\n        require(!initialized, \"already initialized\");\n        owner = msg.sender;\n        userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n        initialized = true;\n    }\n1058-function_definition-175-180", method="initialize()", type_label=function_definition];
1062 [label="175_ require(!initialized, \"already initialized\");\n1062-expression_statement-176-176", method="initialize()", type_label=expression_statement];
1071 [label="176_ owner = msg.sender;\n1071-expression_statement-177-177", method="initialize()", type_label=expression_statement];
1077 [label="177_ userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n1077-expression_statement-178-178", method="initialize()", type_label=expression_statement];
1122 [label="178_ initialized = true;\n1122-expression_statement-179-179", method="initialize()", type_label=expression_statement];
1127 [label="180_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1127-function_definition-181-183", method="bug_tmstmp17()", type_label=function_definition];
1136 [label="181_ return block.timestamp >= 1546300800;\n1136-return-182-182", method="bug_tmstmp17()", type_label=return];
1144 [label="184_ initialize();\n1144-expression_statement-185-185", method="", type_label=expression_statement];
1147 [label="186_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1147-function_definition-187-189", method="bug_tmstmp37()", type_label=function_definition];
1156 [label="187_ return block.timestamp >= 1546300800;\n1156-return-188-188", method="bug_tmstmp37()", type_label=return];
1162 [label="189_ modifier onlyOwner() {\n        require(msg.sender == owner, \"onlyOwner\");\n        _;\n    }\n1162-expression_statement-190-193", method="", type_label=expression_statement];
1165 [label="190_ require(msg.sender == owner, \"onlyOwner\");\n1165-expression_statement-191-191", method="", type_label=expression_statement];
1177 [label="191_ _;\n1177-expression_statement-192-192", method="", type_label=expression_statement];
1179 [label="193_ uint256 bugv_tmstmp3 = block.timestamp;\n1179-new_variable-194-194", method="", type_label=new_variable];
1186 [label="194_ modifier onlyEngineer() {\n        require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n        _;\n    }\n1186-expression_statement-195-198", method="", type_label=expression_statement];
1189 [label="195_ require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n1189-expression_statement-196-196", method="", type_label=expression_statement];
1201 [label="196_ _;\n1201-expression_statement-197-197", method="", type_label=expression_statement];
1203 [label="198_ uint256 bugv_tmstmp4 = block.timestamp;\n1203-new_variable-199-199", method="", type_label=new_variable];
1210 [label="199_ function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n        owner = newOwner;\n    }\n1210-function_definition-200-203", method="transferOwnership(address newOwner)", type_label=function_definition];
1217 [label="199_ onlyOwner\n1217-expression_statement-200-200", method="transferOwnership(address newOwner)", type_label=expression_statement];
1220 [label="200_ require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n1220-expression_statement-201-201", method="transferOwnership(address newOwner)", type_label=expression_statement];
1232 [label="201_ owner = newOwner;\n1232-expression_statement-202-202", method="transferOwnership(address newOwner)", type_label=expression_statement];
1236 [label="203_ address winner_tmstmp3;\n1236-new_variable-204-204", method="", type_label=new_variable];
1240 [label="204_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n1240-function_definition-205-208", method="play_tmstmp3(uint startTime)", type_label=function_definition];
1248 [label="205_ uint _vtime = block.timestamp;\n1248-new_variable-206-206", method="play_tmstmp3(uint startTime)", type_label=new_variable];
1256 [label="206_ if_startTime + (5 * 1 days) == _vtime\n1256-if-207-208", method="play_tmstmp3(uint startTime)", type_label=if];
6349 [label="206_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
1267 [label="207_ winner_tmstmp3 = msg.sender;\n1267-expression_statement-208-208", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
1273 [label="208_ function getLevelByInvestAmount(uint256 investAmount) private pure returns (uint256 level) {\n        if (investAmount >= ONE_ETH.mul(11)) {\n            level = 3;\n        } else if (investAmount >= ONE_ETH.mul(6)) {\n            level = 2;\n        } else {\n            level = 1;\n        }\n    }\n1273-function_definition-209-217", method="getLevelByInvestAmount(uint256 investAmount)", type_label=function_definition];
1287 [label="209_ if\n1287-if-210-216", method="getLevelByInvestAmount(uint256 investAmount)", type_label=if];
6380 [label="209_ end_if", method="getLevelByInvestAmount(uint256 investAmount)", type_label=end_if];
1297 [label="210_ level = 3;\n1297-expression_statement-211-211", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1301 [label="211_ if\n1301-if-212-216", method="getLevelByInvestAmount(uint256 investAmount)", type_label=if];
1311 [label="212_ level = 2;\n1311-expression_statement-213-213", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1316 [label="214_ level = 1;\n1316-expression_statement-215-215", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
1320 [label="217_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1320-function_definition-218-220", method="bug_tmstmp9()", type_label=function_definition];
1329 [label="218_ return block.timestamp >= 1546300800;\n1329-return-219-219", method="bug_tmstmp9()", type_label=return];
1335 [label="220_ function isInvestExpired(User memory user) private view returns (bool expired) {\n        expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n    }\n1335-function_definition-221-223", method="isInvestExpired(User memory user)", type_label=function_definition];
1350 [label="221_ expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n1350-expression_statement-222-222", method="isInvestExpired(User memory user)", type_label=expression_statement];
1371 [label="223_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1371-function_definition-224-226", method="bug_tmstmp25()", type_label=function_definition];
1380 [label="224_ return block.timestamp >= 1546300800;\n1380-return-225-225", method="bug_tmstmp25()", type_label=return];
1386 [label="226_ function getAbortInvestAmount(User memory user) private view returns (uint256 amount) {\n        uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n        require(commissionDays >= 3, \"Invest time must >= 3days\");\n        uint256 lossRatio = 15;\n        if (commissionDays >= 60) {\n            lossRatio = 5;\n        } else if (commissionDays >= 30) {\n            lossRatio = 10;\n        }\n        amount = user.currentInvestAmount;\n        amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n    }\n1386-function_definition-227-238", method="getAbortInvestAmount(User memory user)", type_label=function_definition];
1401 [label="227_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n1401-new_variable-228-228", method="getAbortInvestAmount(User memory user)", type_label=new_variable];
1419 [label="228_ require(commissionDays >= 3, \"Invest time must >= 3days\");\n1419-expression_statement-229-229", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1429 [label="229_ uint256 lossRatio = 15;\n1429-new_variable-230-230", method="getAbortInvestAmount(User memory user)", type_label=new_variable];
1435 [label="230_ if_commissionDays >= 60\n1435-if-231-235", method="getAbortInvestAmount(User memory user)", type_label=if];
6528 [label="230_ end_if", method="getAbortInvestAmount(User memory user)", type_label=end_if];
1440 [label="231_ lossRatio = 5;\n1440-expression_statement-232-232", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1444 [label="232_ if_commissionDays >= 30\n1444-if-233-235", method="getAbortInvestAmount(User memory user)", type_label=if];
1449 [label="233_ lossRatio = 10;\n1449-expression_statement-234-234", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1453 [label="235_ amount = user.currentInvestAmount;\n1453-expression_statement-236-236", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1459 [label="236_ amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n1459-expression_statement-237-237", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
1480 [label="238_ address winner_tmstmp19;\n1480-new_variable-239-239", method="", type_label=new_variable];
1484 [label="239_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n1484-function_definition-240-243", method="play_tmstmp19(uint startTime)", type_label=function_definition];
1492 [label="240_ uint _vtime = block.timestamp;\n1492-new_variable-241-241", method="play_tmstmp19(uint startTime)", type_label=new_variable];
1500 [label="241_ if_startTime + (5 * 1 days) == _vtime\n1500-if-242-243", method="play_tmstmp19(uint startTime)", type_label=if];
6593 [label="241_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
1511 [label="242_ winner_tmstmp19 = msg.sender;\n1511-expression_statement-243-243", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
1517 [label="243_ function getStaticCommissionRatio(uint256 level, uint256 investCycle) private pure returns (uint256 ratio) {\n        if (level == 1) {\n            if (investCycle == 30) {\n                ratio = 7;\n            } else if(investCycle == 60) {\n                ratio = 8;\n            } else {\n                ratio = 9;\n            }\n        } else if (level == 2) {\n            if (investCycle == 30) {\n                ratio = 8;\n            } else if(investCycle == 60) {\n                ratio = 9;\n            } else {\n                ratio = 10;\n            }\n        } else {\n            if (investCycle == 30) {\n                ratio = 11;\n            } else if(investCycle == 60) {\n                ratio = 12;\n            } else {\n                ratio = 13;\n            }\n        }\n    }\n1517-function_definition-244-270", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=function_definition];
1535 [label="244_ if_level == 1\n1535-if-245-269", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6628 [label="244_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1540 [label="245_ if_investCycle == 30\n1540-if-246-252", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6633 [label="245_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1545 [label="246_ ratio = 7;\n1545-expression_statement-247-247", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1549 [label="247_ if_investCycle == 60\n1549-if-248-252", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1554 [label="248_ ratio = 8;\n1554-expression_statement-249-249", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1559 [label="250_ ratio = 9;\n1559-expression_statement-251-251", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1563 [label="252_ if_level == 2\n1563-if-253-269", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1568 [label="253_ if_investCycle == 30\n1568-if-254-260", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6661 [label="253_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1573 [label="254_ ratio = 8;\n1573-expression_statement-255-255", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1577 [label="255_ if_investCycle == 60\n1577-if-256-260", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1582 [label="256_ ratio = 9;\n1582-expression_statement-257-257", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1587 [label="258_ ratio = 10;\n1587-expression_statement-259-259", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1592 [label="261_ if_investCycle == 30\n1592-if-262-268", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
6685 [label="261_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1597 [label="262_ ratio = 11;\n1597-expression_statement-263-263", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1601 [label="263_ if_investCycle == 60\n1601-if-264-268", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1606 [label="264_ ratio = 12;\n1606-expression_statement-265-265", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1611 [label="266_ ratio = 13;\n1611-expression_statement-267-267", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1615 [label="270_ address winner_tmstmp26;\n1615-new_variable-271-271", method="", type_label=new_variable];
1619 [label="271_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n1619-function_definition-272-274", method="play_tmstmp26(uint startTime)", type_label=function_definition];
1627 [label="272_ if_startTime + (5 * 1 days) == block.timestamp\n1627-if-273-274", method="play_tmstmp26(uint startTime)", type_label=if];
6720 [label="272_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
1640 [label="273_ winner_tmstmp26 = msg.sender;\n1640-expression_statement-274-274", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
1646 [label="274_ function getDynamicCommissionRatio(User memory user, uint256 depth) private pure returns (uint256 ratio) {\n        if (user.currentlevel == 1) {\n            if (depth == 1) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else if (user.currentlevel == 2) {\n            if (depth == 1) {\n                ratio = 70;\n            } else if (depth == 2) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else {\n            if (depth == 1) {\n                ratio = 100;\n            } else if (depth == 2) {\n                ratio = 70;\n            } else if (depth == 3) {\n                ratio = 50;\n            } else if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }\n        }\n    }\n1646-function_definition-275-305", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=function_definition];
1665 [label="275_ if_user.currentlevel == 1\n1665-if-276-304", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6758 [label="275_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1672 [label="276_ if_depth == 1\n1672-if-277-281", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6765 [label="276_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1677 [label="277_ ratio = 50;\n1677-expression_statement-278-278", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1682 [label="279_ ratio = 0;\n1682-expression_statement-280-280", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1686 [label="281_ if_user.currentlevel == 2\n1686-if-282-304", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1693 [label="282_ if_depth == 1\n1693-if-283-289", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6786 [label="282_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1698 [label="283_ ratio = 70;\n1698-expression_statement-284-284", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1702 [label="284_ if_depth == 2\n1702-if-285-289", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1707 [label="285_ ratio = 50;\n1707-expression_statement-286-286", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1712 [label="287_ ratio = 0;\n1712-expression_statement-288-288", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1717 [label="290_ if_depth == 1\n1717-if-291-303", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
6810 [label="290_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1722 [label="291_ ratio = 100;\n1722-expression_statement-292-292", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1726 [label="292_ if_depth == 2\n1726-if-293-303", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1731 [label="293_ ratio = 70;\n1731-expression_statement-294-294", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1735 [label="294_ if_depth == 3\n1735-if-295-303", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1740 [label="295_ ratio = 50;\n1740-expression_statement-296-296", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1744 [label="296_ if_depth >= 4 && depth <= 10\n1744-if-297-303", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1753 [label="297_ ratio = 10;\n1753-expression_statement-298-298", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1757 [label="298_ if_depth >= 11 && depth <= 20\n1757-if-299-303", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1766 [label="299_ ratio = 5;\n1766-expression_statement-300-300", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1771 [label="301_ ratio = 1;\n1771-expression_statement-302-302", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1775 [label="305_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1775-function_definition-306-314", method="bug_tmstmp20()", type_label=function_definition];
1780 [label="306_ uint pastBlockTime_tmstmp20;\n1780-new_variable-307-307", method="bug_tmstmp20()", type_label=new_variable];
1785 [label="307_ require(msg.value == 10 ether);\n1785-expression_statement-308-308", method="bug_tmstmp20()", type_label=expression_statement];
1795 [label="308_ require(now != pastBlockTime_tmstmp20);\n1795-expression_statement-309-309", method="bug_tmstmp20()", type_label=expression_statement];
1802 [label="309_ pastBlockTime_tmstmp20 = now;\n1802-expression_statement-310-310", method="bug_tmstmp20()", type_label=expression_statement];
1806 [label="310_ if_now % 15 == 0\n1806-if-311-313", method="bug_tmstmp20()", type_label=if];
6899 [label="310_ end_if", method="bug_tmstmp20()", type_label=end_if];
1813 [label="311_ msg.sender.transfer(address(this).balance);\n1813-expression_statement-312-312", method="bug_tmstmp20()", type_label=expression_statement];
1826 [label="314_ function getAvaliableStaticCommissionAmount(User memory user) private view returns (uint256 amount) {\n        if (user.currentInvestAmount == 0) {\n            amount = 0;\n        } else {\n            uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n            if (commissionDays > user.currentInvestCycle) {\n                commissionDays = user.currentInvestCycle;\n            }\n            amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n            amount = amount.div(1000);\n            amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n        }\n    }\n1826-function_definition-315-327", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=function_definition];
1841 [label="315_ if_user.currentInvestAmount == 0\n1841-if-316-326", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=if];
6934 [label="315_ end_if", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=end_if];
1848 [label="316_ amount = 0;\n1848-expression_statement-317-317", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1853 [label="318_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n1853-new_variable-319-319", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=new_variable];
1871 [label="319_ if_commissionDays > user.currentInvestCycle\n1871-if-320-322", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=if];
6964 [label="319_ end_if", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=end_if];
1878 [label="320_ commissionDays = user.currentInvestCycle;\n1878-expression_statement-321-321", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1884 [label="322_ amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n1884-expression_statement-323-323", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1902 [label="323_ amount = amount.div(1000);\n1902-expression_statement-324-324", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1911 [label="324_ amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n1911-expression_statement-325-325", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1922 [label="327_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1922-function_definition-328-336", method="bug_tmstmp32()", type_label=function_definition];
1927 [label="328_ uint pastBlockTime_tmstmp32;\n1927-new_variable-329-329", method="bug_tmstmp32()", type_label=new_variable];
1932 [label="329_ require(msg.value == 10 ether);\n1932-expression_statement-330-330", method="bug_tmstmp32()", type_label=expression_statement];
1942 [label="330_ require(now != pastBlockTime_tmstmp32);\n1942-expression_statement-331-331", method="bug_tmstmp32()", type_label=expression_statement];
1949 [label="331_ pastBlockTime_tmstmp32 = now;\n1949-expression_statement-332-332", method="bug_tmstmp32()", type_label=expression_statement];
1953 [label="332_ if_now % 15 == 0\n1953-if-333-335", method="bug_tmstmp32()", type_label=if];
7046 [label="332_ end_if", method="bug_tmstmp32()", type_label=end_if];
1960 [label="333_ msg.sender.transfer(address(this).balance);\n1960-expression_statement-334-334", method="bug_tmstmp32()", type_label=expression_statement];
1973 [label="336_ function addInvestRecord(address userAddress, uint256 time, uint256 amount, uint256 cycle) private {\n        InvestRecord[9] storage records = investRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            InvestRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = InvestRecord(time, amount, cycle);\n    }\n1973-function_definition-337-344", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=function_definition];
1993 [label="337_ InvestRecord[9] storage records = investRecordMapping[userAddress];\n1993-new_variable-338-338", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=new_variable];
2004 [label="338_ for(i > 0;;--i)\n2004-for-339-342", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=for];
7097 [label="338_ end_loop", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=end_loop];
2015 [label="338_ --i\n2015-expression_statement-339-339", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
2018 [label="339_ InvestRecord memory prevRecord = records[i - 1];\n2018-new_variable-340-340", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=new_variable];
2029 [label="340_ records[i] = prevRecord;\n2029-expression_statement-341-341", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
2035 [label="342_ records[0] = InvestRecord(time, amount, cycle);\n2035-expression_statement-343-343", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
2048 [label="344_ address winner_tmstmp38;\n2048-new_variable-345-345", method="", type_label=new_variable];
2052 [label="345_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n2052-function_definition-346-348", method="play_tmstmp38(uint startTime)", type_label=function_definition];
2060 [label="346_ if_startTime + (5 * 1 days) == block.timestamp\n2060-if-347-348", method="play_tmstmp38(uint startTime)", type_label=if];
7153 [label="346_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
2073 [label="347_ winner_tmstmp38 = msg.sender;\n2073-expression_statement-348-348", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
2079 [label="348_ function addStaticCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }\n2079-function_definition-349-356", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=function_definition];
2095 [label="349_ CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n2095-new_variable-350-350", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2106 [label="350_ for(i > 0;;--i)\n2106-for-351-354", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=for];
7199 [label="350_ end_loop", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=end_loop];
2117 [label="350_ --i\n2117-expression_statement-351-351", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2120 [label="351_ CommissionRecord memory prevRecord = records[i - 1];\n2120-new_variable-352-352", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2131 [label="352_ records[i] = prevRecord;\n2131-expression_statement-353-353", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2137 [label="354_ records[0] = CommissionRecord(time, amount);\n2137-expression_statement-355-355", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2148 [label="356_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n2148-function_definition-357-365", method="bug_tmstmp4()", type_label=function_definition];
2153 [label="357_ uint pastBlockTime_tmstmp4;\n2153-new_variable-358-358", method="bug_tmstmp4()", type_label=new_variable];
2158 [label="358_ require(msg.value == 10 ether);\n2158-expression_statement-359-359", method="bug_tmstmp4()", type_label=expression_statement];
2168 [label="359_ require(now != pastBlockTime_tmstmp4);\n2168-expression_statement-360-360", method="bug_tmstmp4()", type_label=expression_statement];
2175 [label="360_ pastBlockTime_tmstmp4 = now;\n2175-expression_statement-361-361", method="bug_tmstmp4()", type_label=expression_statement];
2179 [label="361_ if_now % 15 == 0\n2179-if-362-364", method="bug_tmstmp4()", type_label=if];
7272 [label="361_ end_if", method="bug_tmstmp4()", type_label=end_if];
2186 [label="362_ msg.sender.transfer(address(this).balance);\n2186-expression_statement-363-363", method="bug_tmstmp4()", type_label=expression_statement];
2199 [label="365_ function addDynamicCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }\n2199-function_definition-366-373", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=function_definition];
2215 [label="366_ CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n2215-new_variable-367-367", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2226 [label="367_ for(i > 0;;--i)\n2226-for-368-371", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=for];
7319 [label="367_ end_loop", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=end_loop];
2237 [label="367_ --i\n2237-expression_statement-368-368", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2240 [label="368_ CommissionRecord memory prevRecord = records[i - 1];\n2240-new_variable-369-369", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
2251 [label="369_ records[i] = prevRecord;\n2251-expression_statement-370-370", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2257 [label="371_ records[0] = CommissionRecord(time, amount);\n2257-expression_statement-372-372", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
2268 [label="373_ address winner_tmstmp7;\n2268-new_variable-374-374", method="", type_label=new_variable];
2272 [label="374_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n2272-function_definition-375-378", method="play_tmstmp7(uint startTime)", type_label=function_definition];
2280 [label="375_ uint _vtime = block.timestamp;\n2280-new_variable-376-376", method="play_tmstmp7(uint startTime)", type_label=new_variable];
2288 [label="376_ if_startTime + (5 * 1 days) == _vtime\n2288-if-377-378", method="play_tmstmp7(uint startTime)", type_label=if];
7381 [label="376_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
2299 [label="377_ winner_tmstmp7 = msg.sender;\n2299-expression_statement-378-378", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
2305 [label="378_ function invest(address sponsorAddress, uint256 investCycle) external payable {\n        User storage sponsor = userMapping[sponsorAddress];\n        require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n        require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n        uint256 investAmount = msg.value.div(ONE_ETH);\n        investAmount = investAmount.mul(ONE_ETH);\n        require(investAmount == msg.value, \"Invest amount is not integer\");\n        require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n        User memory user = userMapping[msg.sender];\n        uint256 level = getLevelByInvestAmount(investAmount);\n        if (user.totalInvestCount > 0) {\n            require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n            require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n            require(user.currentInvestTime == 0, \"Invalid state\");\n            require(user.currentInvestCycle == 0, \"Invalid state\");\n            require(user.currentlevel == 0, \"Invalid state\");\n            require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n            require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n            user.totalInvestCount = user.totalInvestCount.add(1);\n            user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n            user.currentInvestTime = now;\n            user.currentInvestAmount = investAmount;\n            user.currentInvestCycle = investCycle;\n            user.currentlevel = level;\n            user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n            userMapping[msg.sender] = user;\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        } else {\n            userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n            addressMapping[totalUserCount] = msg.sender;\n            totalUserCount = totalUserCount.add(1);\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.downlineCount = sponsor.downlineCount.add(1);\n                if (addressWalker == sponsorAddress) {\n                    sponsor.nodeCount = sponsor.nodeCount.add(1);\n                }\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        }\n        addInvestRecord(msg.sender, now, investAmount, investCycle);\n        totalInvestCount = totalInvestCount.add(1);\n        totalInvestAmount = totalInvestAmount.add(investAmount);\n        engineerFunds = engineerFunds.add(investAmount.div(50));\n        operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n    }\n2305-function_definition-379-434", method="invest(address sponsorAddress,uint256 investCycle)", type_label=function_definition];
2318 [label="379_ User storage sponsor = userMapping[sponsorAddress];\n2318-new_variable-380-380", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2327 [label="380_ require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n2327-expression_statement-381-381", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2339 [label="381_ require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n2339-expression_statement-382-382", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2357 [label="382_ uint256 investAmount = msg.value.div(ONE_ETH);\n2357-new_variable-383-383", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2370 [label="383_ investAmount = investAmount.mul(ONE_ETH);\n2370-expression_statement-384-384", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2379 [label="384_ require(investAmount == msg.value, \"Invest amount is not integer\");\n2379-expression_statement-385-385", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2391 [label="385_ require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n2391-expression_statement-386-386", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2415 [label="386_ User memory user = userMapping[msg.sender];\n2415-new_variable-387-387", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2426 [label="387_ uint256 level = getLevelByInvestAmount(investAmount);\n2426-new_variable-388-388", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2435 [label="388_ if_user.totalInvestCount > 0\n2435-if-389-428", method="invest(address sponsorAddress,uint256 investCycle)", type_label=if];
7528 [label="388_ end_if", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_if];
2442 [label="389_ require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n2442-expression_statement-390-390", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2454 [label="390_ require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n2454-expression_statement-391-391", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2466 [label="391_ require(user.currentInvestTime == 0, \"Invalid state\");\n2466-expression_statement-392-392", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2478 [label="392_ require(user.currentInvestCycle == 0, \"Invalid state\");\n2478-expression_statement-393-393", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2490 [label="393_ require(user.currentlevel == 0, \"Invalid state\");\n2490-expression_statement-394-394", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2502 [label="394_ require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n2502-expression_statement-395-395", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2514 [label="395_ require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n2514-expression_statement-396-396", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2526 [label="396_ user.totalInvestCount = user.totalInvestCount.add(1);\n2526-expression_statement-397-397", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2539 [label="397_ user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n2539-expression_statement-398-398", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2552 [label="398_ user.currentInvestTime = now;\n2552-expression_statement-399-399", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2558 [label="399_ user.currentInvestAmount = investAmount;\n2558-expression_statement-400-400", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2564 [label="400_ user.currentInvestCycle = investCycle;\n2564-expression_statement-401-401", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2570 [label="401_ user.currentlevel = level;\n2570-expression_statement-402-402", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2576 [label="402_ user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n2576-expression_statement-403-403", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2587 [label="403_ userMapping[msg.sender] = user;\n2587-expression_statement-404-404", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2595 [label="404_ address addressWalker = sponsorAddress;\n2595-new_variable-405-405", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2601 [label="405_ while\n2601-while-406-410", method="invest(address sponsorAddress,uint256 investCycle)", type_label=while];
7694 [label="405_ end_loop", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_loop];
2606 [label="406_ sponsor = userMapping[addressWalker];\n2606-expression_statement-407-407", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2612 [label="407_ sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n2612-expression_statement-408-408", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2625 [label="408_ addressWalker = sponsor.sponsorAddress;\n2625-expression_statement-409-409", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2632 [label="411_ userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n2632-expression_statement-412-415", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2682 [label="415_ addressMapping[totalUserCount] = msg.sender;\n2682-expression_statement-416-416", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2690 [label="416_ totalUserCount = totalUserCount.add(1);\n2690-expression_statement-417-417", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2699 [label="417_ address addressWalker = sponsorAddress;\n2699-new_variable-418-418", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2705 [label="418_ while\n2705-while-419-427", method="invest(address sponsorAddress,uint256 investCycle)", type_label=while];
7798 [label="418_ end_loop", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_loop];
2710 [label="419_ sponsor = userMapping[addressWalker];\n2710-expression_statement-420-420", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2716 [label="420_ sponsor.downlineCount = sponsor.downlineCount.add(1);\n2716-expression_statement-421-421", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2729 [label="421_ if_addressWalker == sponsorAddress\n2729-if-422-424", method="invest(address sponsorAddress,uint256 investCycle)", type_label=if];
7822 [label="421_ end_if", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_if];
2734 [label="422_ sponsor.nodeCount = sponsor.nodeCount.add(1);\n2734-expression_statement-423-423", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2747 [label="424_ sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n2747-expression_statement-425-425", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2760 [label="425_ addressWalker = sponsor.sponsorAddress;\n2760-expression_statement-426-426", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2766 [label="428_ addInvestRecord(msg.sender, now, investAmount, investCycle);\n2766-expression_statement-429-429", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2779 [label="429_ totalInvestCount = totalInvestCount.add(1);\n2779-expression_statement-430-430", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2788 [label="430_ totalInvestAmount = totalInvestAmount.add(investAmount);\n2788-expression_statement-431-431", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2797 [label="431_ engineerFunds = engineerFunds.add(investAmount.div(50));\n2797-expression_statement-432-432", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2811 [label="432_ operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n2811-expression_statement-433-433", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2830 [label="434_ address winner_tmstmp23;\n2830-new_variable-435-435", method="", type_label=new_variable];
2834 [label="435_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n2834-function_definition-436-439", method="play_tmstmp23(uint startTime)", type_label=function_definition];
2842 [label="436_ uint _vtime = block.timestamp;\n2842-new_variable-437-437", method="play_tmstmp23(uint startTime)", type_label=new_variable];
2850 [label="437_ if_startTime + (5 * 1 days) == _vtime\n2850-if-438-439", method="play_tmstmp23(uint startTime)", type_label=if];
7943 [label="437_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
2861 [label="438_ winner_tmstmp23 = msg.sender;\n2861-expression_statement-439-439", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
2867 [label="439_ function userWithdraw() external {\n        User storage user = userMapping[msg.sender];\n        if (user.currentInvestAmount > 0) {\n            uint256 avaliableIA = user.currentInvestAmount;\n            if (!isInvestExpired(user)) {\n                avaliableIA = getAbortInvestAmount(user);\n            }\n            uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n            user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n            user.currentInvestTime = 0;\n            user.currentInvestAmount = 0;\n            user.currentInvestCycle = 0;\n            user.currentlevel = 0;\n            user.currentStaticCommissionRatio = 0;\n            user.currentStaticCommissionWithdrawAmount = 0;\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n            msg.sender.transfer(avaliableIA);\n        }\n    }\n2867-function_definition-440-459", method="userWithdraw()", type_label=function_definition];
2871 [label="440_ User storage user = userMapping[msg.sender];\n2871-new_variable-441-441", method="userWithdraw()", type_label=new_variable];
2882 [label="441_ if_user.currentInvestAmount > 0\n2882-if-442-458", method="userWithdraw()", type_label=if];
7975 [label="441_ end_if", method="userWithdraw()", type_label=end_if];
2889 [label="442_ uint256 avaliableIA = user.currentInvestAmount;\n2889-new_variable-443-443", method="userWithdraw()", type_label=new_variable];
2897 [label="443_ if\n2897-if-444-446", method="userWithdraw()", type_label=if];
7990 [label="443_ end_if", method="userWithdraw()", type_label=end_if];
2904 [label="444_ avaliableIA = getAbortInvestAmount(user);\n2904-expression_statement-445-445", method="userWithdraw()", type_label=expression_statement];
2911 [label="446_ uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n2911-new_variable-447-447", method="userWithdraw()", type_label=new_variable];
2920 [label="447_ user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n2920-expression_statement-448-448", method="userWithdraw()", type_label=expression_statement];
2933 [label="448_ user.currentInvestTime = 0;\n2933-expression_statement-449-449", method="userWithdraw()", type_label=expression_statement];
2939 [label="449_ user.currentInvestAmount = 0;\n2939-expression_statement-450-450", method="userWithdraw()", type_label=expression_statement];
2945 [label="450_ user.currentInvestCycle = 0;\n2945-expression_statement-451-451", method="userWithdraw()", type_label=expression_statement];
2951 [label="451_ user.currentlevel = 0;\n2951-expression_statement-452-452", method="userWithdraw()", type_label=expression_statement];
2957 [label="452_ user.currentStaticCommissionRatio = 0;\n2957-expression_statement-453-453", method="userWithdraw()", type_label=expression_statement];
2963 [label="453_ user.currentStaticCommissionWithdrawAmount = 0;\n2963-expression_statement-454-454", method="userWithdraw()", type_label=expression_statement];
2969 [label="454_ user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n2969-expression_statement-455-455", method="userWithdraw()", type_label=expression_statement];
2982 [label="455_ totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n2982-expression_statement-456-456", method="userWithdraw()", type_label=expression_statement];
2991 [label="456_ msg.sender.transfer(avaliableIA);\n2991-expression_statement-457-457", method="userWithdraw()", type_label=expression_statement];
3000 [label="459_ address winner_tmstmp14;\n3000-new_variable-460-460", method="", type_label=new_variable];
3004 [label="460_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n3004-function_definition-461-463", method="play_tmstmp14(uint startTime)", type_label=function_definition];
3012 [label="461_ if_startTime + (5 * 1 days) == block.timestamp\n3012-if-462-463", method="play_tmstmp14(uint startTime)", type_label=if];
8105 [label="461_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
3025 [label="462_ winner_tmstmp14 = msg.sender;\n3025-expression_statement-463-463", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
3031 [label="463_ function userWithdrawCommission() external {\n        User storage user = userMapping[msg.sender];\n        uint256 avaliableDCB = user.dynamicCommissionBalance;\n        uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n        uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n        uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n        if (avaliableWithdrawAmount >= ONE_ETH.div(10)) {\n            user.staticCommissionBalance = 0;\n            user.dynamicCommissionBalance = 0;\n            user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n            user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n            totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n            if (avaliableSCB > 0) {\n                addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n            }\n            msg.sender.transfer(avaliableWithdrawAmount);\n        }\n    }\n3031-function_definition-464-485", method="userWithdrawCommission()", type_label=function_definition];
3035 [label="464_ User storage user = userMapping[msg.sender];\n3035-new_variable-465-465", method="userWithdrawCommission()", type_label=new_variable];
3046 [label="465_ uint256 avaliableDCB = user.dynamicCommissionBalance;\n3046-new_variable-466-466", method="userWithdrawCommission()", type_label=new_variable];
3054 [label="466_ uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n3054-new_variable-467-467", method="userWithdrawCommission()", type_label=new_variable];
3063 [label="467_ uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n3063-new_variable-468-468", method="userWithdrawCommission()", type_label=new_variable];
3076 [label="468_ uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n3076-new_variable-469-469", method="userWithdrawCommission()", type_label=new_variable];
3087 [label="469_ if\n3087-if-470-484", method="userWithdrawCommission()", type_label=if];
8180 [label="469_ end_if", method="userWithdrawCommission()", type_label=end_if];
3097 [label="470_ user.staticCommissionBalance = 0;\n3097-expression_statement-471-471", method="userWithdrawCommission()", type_label=expression_statement];
3103 [label="471_ user.dynamicCommissionBalance = 0;\n3103-expression_statement-472-472", method="userWithdrawCommission()", type_label=expression_statement];
3109 [label="472_ user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n3109-expression_statement-473-473", method="userWithdrawCommission()", type_label=expression_statement];
3122 [label="473_ user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n3122-expression_statement-474-474", method="userWithdrawCommission()", type_label=expression_statement];
3135 [label="474_ user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n3135-expression_statement-475-475", method="userWithdrawCommission()", type_label=expression_statement];
3148 [label="475_ user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n3148-expression_statement-476-476", method="userWithdrawCommission()", type_label=expression_statement];
3161 [label="476_ totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n3161-expression_statement-477-477", method="userWithdrawCommission()", type_label=expression_statement];
3170 [label="477_ totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n3170-expression_statement-478-478", method="userWithdrawCommission()", type_label=expression_statement];
3179 [label="478_ totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n3179-expression_statement-479-479", method="userWithdrawCommission()", type_label=expression_statement];
3188 [label="479_ if_avaliableSCB > 0\n3188-if-480-482", method="userWithdrawCommission()", type_label=if];
8281 [label="479_ end_if", method="userWithdrawCommission()", type_label=end_if];
3193 [label="480_ addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n3193-expression_statement-481-481", method="userWithdrawCommission()", type_label=expression_statement];
3204 [label="482_ msg.sender.transfer(avaliableWithdrawAmount);\n3204-expression_statement-483-483", method="userWithdrawCommission()", type_label=expression_statement];
3213 [label="485_ address winner_tmstmp30;\n3213-new_variable-486-486", method="", type_label=new_variable];
3217 [label="486_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n3217-function_definition-487-489", method="play_tmstmp30(uint startTime)", type_label=function_definition];
3225 [label="487_ if_startTime + (5 * 1 days) == block.timestamp\n3225-if-488-489", method="play_tmstmp30(uint startTime)", type_label=if];
8318 [label="487_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
3238 [label="488_ winner_tmstmp30 = msg.sender;\n3238-expression_statement-489-489", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
3244 [label="489_ function engineerWithdraw() external onlyEngineer {\n        uint256 avaliableAmount = engineerFunds;\n        if (avaliableAmount > 0) {\n            engineerFunds = 0;\n            engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }\n3244-function_definition-490-497", method="engineerWithdraw()", type_label=function_definition];
3247 [label="489_ onlyEngineer\n3247-expression_statement-490-490", method="engineerWithdraw()", type_label=expression_statement];
3250 [label="490_ uint256 avaliableAmount = engineerFunds;\n3250-new_variable-491-491", method="engineerWithdraw()", type_label=new_variable];
3256 [label="491_ if_avaliableAmount > 0\n3256-if-492-496", method="engineerWithdraw()", type_label=if];
8349 [label="491_ end_if", method="engineerWithdraw()", type_label=end_if];
3261 [label="492_ engineerFunds = 0;\n3261-expression_statement-493-493", method="engineerWithdraw()", type_label=expression_statement];
3265 [label="493_ engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n3265-expression_statement-494-494", method="engineerWithdraw()", type_label=expression_statement];
3274 [label="494_ msg.sender.transfer(avaliableAmount);\n3274-expression_statement-495-495", method="engineerWithdraw()", type_label=expression_statement];
3283 [label="497_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n3283-function_definition-498-506", method="bug_tmstmp8()", type_label=function_definition];
3288 [label="498_ uint pastBlockTime_tmstmp8;\n3288-new_variable-499-499", method="bug_tmstmp8()", type_label=new_variable];
3293 [label="499_ require(msg.value == 10 ether);\n3293-expression_statement-500-500", method="bug_tmstmp8()", type_label=expression_statement];
3303 [label="500_ require(now != pastBlockTime_tmstmp8);\n3303-expression_statement-501-501", method="bug_tmstmp8()", type_label=expression_statement];
3310 [label="501_ pastBlockTime_tmstmp8 = now;\n3310-expression_statement-502-502", method="bug_tmstmp8()", type_label=expression_statement];
3314 [label="502_ if_now % 15 == 0\n3314-if-503-505", method="bug_tmstmp8()", type_label=if];
8407 [label="502_ end_if", method="bug_tmstmp8()", type_label=end_if];
3321 [label="503_ msg.sender.transfer(address(this).balance);\n3321-expression_statement-504-504", method="bug_tmstmp8()", type_label=expression_statement];
3334 [label="506_ function operatorWithdraw() external onlyOwner {\n        uint256 avaliableAmount = operatorFunds;\n        if (avaliableAmount > 0) {\n            operatorFunds = 0;\n            operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }\n3334-function_definition-507-514", method="operatorWithdraw()", type_label=function_definition];
3337 [label="506_ onlyOwner\n3337-expression_statement-507-507", method="operatorWithdraw()", type_label=expression_statement];
3340 [label="507_ uint256 avaliableAmount = operatorFunds;\n3340-new_variable-508-508", method="operatorWithdraw()", type_label=new_variable];
3346 [label="508_ if_avaliableAmount > 0\n3346-if-509-513", method="operatorWithdraw()", type_label=if];
8439 [label="508_ end_if", method="operatorWithdraw()", type_label=end_if];
3351 [label="509_ operatorFunds = 0;\n3351-expression_statement-510-510", method="operatorWithdraw()", type_label=expression_statement];
3355 [label="510_ operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n3355-expression_statement-511-511", method="operatorWithdraw()", type_label=expression_statement];
3364 [label="511_ msg.sender.transfer(avaliableAmount);\n3364-expression_statement-512-512", method="operatorWithdraw()", type_label=expression_statement];
3373 [label="514_ address winner_tmstmp39;\n3373-new_variable-515-515", method="", type_label=new_variable];
3377 [label="515_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n3377-function_definition-516-519", method="play_tmstmp39(uint startTime)", type_label=function_definition];
3385 [label="516_ uint _vtime = block.timestamp;\n3385-new_variable-517-517", method="play_tmstmp39(uint startTime)", type_label=new_variable];
3393 [label="517_ if_startTime + (5 * 1 days) == _vtime\n3393-if-518-519", method="play_tmstmp39(uint startTime)", type_label=if];
8486 [label="517_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
3404 [label="518_ winner_tmstmp39 = msg.sender;\n3404-expression_statement-519-519", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
3410 [label="519_ function getSummary() public view returns (uint256[11] memory) {\n        return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n    }\n3410-function_definition-520-528", method="getSummary()", type_label=function_definition];
3421 [label="520_ return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n3421-return-521-527", method="getSummary()", type_label=return];
3439 [label="528_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n3439-function_definition-529-537", method="bug_tmstmp36()", type_label=function_definition];
3444 [label="529_ uint pastBlockTime_tmstmp36;\n3444-new_variable-530-530", method="bug_tmstmp36()", type_label=new_variable];
3449 [label="530_ require(msg.value == 10 ether);\n3449-expression_statement-531-531", method="bug_tmstmp36()", type_label=expression_statement];
3459 [label="531_ require(now != pastBlockTime_tmstmp36);\n3459-expression_statement-532-532", method="bug_tmstmp36()", type_label=expression_statement];
3466 [label="532_ pastBlockTime_tmstmp36 = now;\n3466-expression_statement-533-533", method="bug_tmstmp36()", type_label=expression_statement];
3470 [label="533_ if_now % 15 == 0\n3470-if-534-536", method="bug_tmstmp36()", type_label=if];
8563 [label="533_ end_if", method="bug_tmstmp36()", type_label=end_if];
3477 [label="534_ msg.sender.transfer(address(this).balance);\n3477-expression_statement-535-535", method="bug_tmstmp36()", type_label=expression_statement];
3490 [label="537_ function getUserByAddress(address userAddress) public view returns(uint256[16] memory,\n                                                                       address) {\n        User memory user = userMapping[userAddress];\n        return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n    }\n3490-function_definition-538-554", method="getUserByAddress(address userAddress)", type_label=function_definition];
3508 [label="539_ User memory user = userMapping[userAddress];\n3508-new_variable-540-540", method="getUserByAddress(address userAddress)", type_label=new_variable];
3517 [label="540_ return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n3517-return-541-553", method="getUserByAddress(address userAddress)", type_label=return];
3579 [label="554_ address winner_tmstmp35;\n3579-new_variable-555-555", method="", type_label=new_variable];
3583 [label="555_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n3583-function_definition-556-559", method="play_tmstmp35(uint startTime)", type_label=function_definition];
3591 [label="556_ uint _vtime = block.timestamp;\n3591-new_variable-557-557", method="play_tmstmp35(uint startTime)", type_label=new_variable];
3599 [label="557_ if_startTime + (5 * 1 days) == _vtime\n3599-if-558-559", method="play_tmstmp35(uint startTime)", type_label=if];
8692 [label="557_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
3610 [label="558_ winner_tmstmp35 = msg.sender;\n3610-expression_statement-559-559", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
3616 [label="559_ function getUserByIndex(uint256 index) external view onlyOwner returns(uint256[16] memory,\n                                                                           address) {\n        return getUserByAddress(addressMapping[index]);\n    }\n3616-function_definition-560-563", method="getUserByIndex(uint256 index)", type_label=function_definition];
3624 [label="559_ onlyOwner\n3624-expression_statement-560-560", method="getUserByIndex(uint256 index)", type_label=expression_statement];
3636 [label="561_ return getUserByAddress(addressMapping[index]);\n3636-return-562-562", method="getUserByIndex(uint256 index)", type_label=return];
3643 [label="563_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n3643-function_definition-564-572", method="bug_tmstmp40()", type_label=function_definition];
3648 [label="564_ uint pastBlockTime_tmstmp40;\n3648-new_variable-565-565", method="bug_tmstmp40()", type_label=new_variable];
3653 [label="565_ require(msg.value == 10 ether);\n3653-expression_statement-566-566", method="bug_tmstmp40()", type_label=expression_statement];
3663 [label="566_ require(now != pastBlockTime_tmstmp40);\n3663-expression_statement-567-567", method="bug_tmstmp40()", type_label=expression_statement];
3670 [label="567_ pastBlockTime_tmstmp40 = now;\n3670-expression_statement-568-568", method="bug_tmstmp40()", type_label=expression_statement];
3674 [label="568_ if_now % 15 == 0\n3674-if-569-571", method="bug_tmstmp40()", type_label=if];
8767 [label="568_ end_if", method="bug_tmstmp40()", type_label=end_if];
3681 [label="569_ msg.sender.transfer(address(this).balance);\n3681-expression_statement-570-570", method="bug_tmstmp40()", type_label=expression_statement];
3694 [label="572_ function getInvestRecords(address userAddress) external view returns(uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory) {\n        InvestRecord[9] memory records = investRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n    }\n3694-function_definition-573-592", method="getInvestRecords(address userAddress)", type_label=function_definition];
3749 [label="581_ InvestRecord[9] memory records = investRecordMapping[userAddress];\n3749-new_variable-582-582", method="getInvestRecords(address userAddress)", type_label=new_variable];
3760 [label="582_ return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n3760-return-583-591", method="getInvestRecords(address userAddress)", type_label=return];
3906 [label="592_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n3906-function_definition-593-595", method="bug_tmstmp33()", type_label=function_definition];
3915 [label="593_ return block.timestamp >= 1546300800;\n3915-return-594-594", method="bug_tmstmp33()", type_label=return];
3921 [label="595_ function getStaticCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory) {\n        CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }\n3921-function_definition-596-615", method="getStaticCommissionRecords(address userAddress)", type_label=function_definition];
3976 [label="604_ CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n3976-new_variable-605-605", method="getStaticCommissionRecords(address userAddress)", type_label=new_variable];
3987 [label="605_ return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n3987-return-606-614", method="getStaticCommissionRecords(address userAddress)", type_label=return];
4088 [label="615_ address winner_tmstmp27;\n4088-new_variable-616-616", method="", type_label=new_variable];
4092 [label="616_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n4092-function_definition-617-620", method="play_tmstmp27(uint startTime)", type_label=function_definition];
4100 [label="617_ uint _vtime = block.timestamp;\n4100-new_variable-618-618", method="play_tmstmp27(uint startTime)", type_label=new_variable];
4108 [label="618_ if_startTime + (5 * 1 days) == _vtime\n4108-if-619-620", method="play_tmstmp27(uint startTime)", type_label=if];
9201 [label="618_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
4119 [label="619_ winner_tmstmp27 = msg.sender;\n4119-expression_statement-620-620", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
4125 [label="620_ function getDynamicCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory) {\n        CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }\n4125-function_definition-621-640", method="getDynamicCommissionRecords(address userAddress)", type_label=function_definition];
4180 [label="629_ CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n4180-new_variable-630-630", method="getDynamicCommissionRecords(address userAddress)", type_label=new_variable];
4191 [label="630_ return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n4191-return-631-639", method="getDynamicCommissionRecords(address userAddress)", type_label=return];
4292 [label="640_ address winner_tmstmp31;\n4292-new_variable-641-641", method="", type_label=new_variable];
4296 [label="641_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n4296-function_definition-642-645", method="play_tmstmp31(uint startTime)", type_label=function_definition];
4304 [label="642_ uint _vtime = block.timestamp;\n4304-new_variable-643-643", method="play_tmstmp31(uint startTime)", type_label=new_variable];
4312 [label="643_ if_startTime + (5 * 1 days) == _vtime\n4312-if-644-645", method="play_tmstmp31(uint startTime)", type_label=if];
9405 [label="643_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
4323 [label="644_ winner_tmstmp31 = msg.sender;\n4323-expression_statement-645-645", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
4329 [label="645_ function calcDynamicCommission() external onlyOwner {\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }\n4329-function_definition-646-693", method="calcDynamicCommission()", type_label=function_definition];
4332 [label="645_ onlyOwner\n4332-expression_statement-646-646", method="calcDynamicCommission()", type_label=expression_statement];
4335 [label="646_ for(i < totalUserCount;;++i)\n4335-for-647-650", method="calcDynamicCommission()", type_label=for];
9428 [label="646_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4346 [label="646_ ++i\n4346-expression_statement-647-647", method="calcDynamicCommission()", type_label=expression_statement];
4349 [label="647_ User storage user = userMapping[addressMapping[i]];\n4349-new_variable-648-648", method="calcDynamicCommission()", type_label=new_variable];
4360 [label="648_ user.calcDynamicCommissionAmount = 0;\n4360-expression_statement-649-649", method="calcDynamicCommission()", type_label=expression_statement];
4366 [label="650_ for(i < totalUserCount;;++i)\n4366-for-651-684", method="calcDynamicCommission()", type_label=for];
9459 [label="650_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4377 [label="650_ ++i\n4377-expression_statement-651-651", method="calcDynamicCommission()", type_label=expression_statement];
4380 [label="651_ User memory user = userMapping[addressMapping[i]];\n4380-new_variable-652-652", method="calcDynamicCommission()", type_label=new_variable];
4391 [label="652_ if_user.currentInvestAmount > 0\n4391-if-653-683", method="calcDynamicCommission()", type_label=if];
9484 [label="652_ end_if", method="calcDynamicCommission()", type_label=end_if];
4398 [label="653_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n4398-new_variable-654-654", method="calcDynamicCommission()", type_label=new_variable];
4416 [label="654_ if_commissionDays >= 1 && commissionDays <= user.currentInvestCycle\n4416-if-655-682", method="calcDynamicCommission()", type_label=if];
9509 [label="654_ end_if", method="calcDynamicCommission()", type_label=end_if];
4427 [label="655_ uint256 depth = 1;\n4427-new_variable-656-656", method="calcDynamicCommission()", type_label=new_variable];
4433 [label="656_ address addressWalker = user.sponsorAddress;\n4433-new_variable-657-657", method="calcDynamicCommission()", type_label=new_variable];
4441 [label="657_ while\n4441-while-658-681", method="calcDynamicCommission()", type_label=while];
9534 [label="657_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4446 [label="658_ User storage sponsor = userMapping[addressWalker];\n4446-new_variable-659-659", method="calcDynamicCommission()", type_label=new_variable];
4455 [label="659_ if_sponsor.currentInvestAmount > 0\n4455-if-660-678", method="calcDynamicCommission()", type_label=if];
9548 [label="659_ end_if", method="calcDynamicCommission()", type_label=end_if];
4462 [label="660_ uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n4462-new_variable-661-661", method="calcDynamicCommission()", type_label=new_variable];
4473 [label="661_ if_dynamicCommissionRatio > 0\n4473-if-662-677", method="calcDynamicCommission()", type_label=if];
9566 [label="661_ end_if", method="calcDynamicCommission()", type_label=end_if];
4478 [label="662_ uint256 dynamicCA = sponsor.currentInvestAmount;\n4478-new_variable-663-663", method="calcDynamicCommission()", type_label=new_variable];
4486 [label="663_ if_dynamicCA > user.currentInvestAmount\n4486-if-664-666", method="calcDynamicCommission()", type_label=if];
9579 [label="663_ end_if", method="calcDynamicCommission()", type_label=end_if];
4493 [label="664_ dynamicCA = user.currentInvestAmount;\n4493-expression_statement-665-665", method="calcDynamicCommission()", type_label=expression_statement];
4499 [label="666_ dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n4499-expression_statement-667-667", method="calcDynamicCommission()", type_label=expression_statement];
4510 [label="667_ dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n4510-expression_statement-668-668", method="calcDynamicCommission()", type_label=expression_statement];
4519 [label="668_ if_sponsor.currentlevel == 1\n4519-if-669-675", method="calcDynamicCommission()", type_label=if];
9612 [label="668_ end_if", method="calcDynamicCommission()", type_label=end_if];
4526 [label="669_ dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n4526-expression_statement-670-670", method="calcDynamicCommission()", type_label=expression_statement];
4544 [label="670_ if_sponsor.currentlevel == 2\n4544-if-671-675", method="calcDynamicCommission()", type_label=if];
4551 [label="671_ dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n4551-expression_statement-672-672", method="calcDynamicCommission()", type_label=expression_statement];
4570 [label="673_ dynamicCA = dynamicCA.div(1000 * 100);\n4570-expression_statement-674-674", method="calcDynamicCommission()", type_label=expression_statement];
4581 [label="675_ sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n4581-expression_statement-676-676", method="calcDynamicCommission()", type_label=expression_statement];
4594 [label="678_ addressWalker = sponsor.sponsorAddress;\n4594-expression_statement-679-679", method="calcDynamicCommission()", type_label=expression_statement];
4600 [label="679_ depth = depth.add(1);\n4600-expression_statement-680-680", method="calcDynamicCommission()", type_label=expression_statement];
4609 [label="684_ for(i < totalUserCount;;++i)\n4609-for-685-692", method="calcDynamicCommission()", type_label=for];
9702 [label="684_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
4620 [label="684_ ++i\n4620-expression_statement-685-685", method="calcDynamicCommission()", type_label=expression_statement];
4623 [label="685_ address userAddress = addressMapping[i];\n4623-new_variable-686-686", method="calcDynamicCommission()", type_label=new_variable];
4631 [label="686_ User storage user = userMapping[userAddress];\n4631-new_variable-687-687", method="calcDynamicCommission()", type_label=new_variable];
4640 [label="687_ if_user.calcDynamicCommissionAmount > 0\n4640-if-688-691", method="calcDynamicCommission()", type_label=if];
9733 [label="687_ end_if", method="calcDynamicCommission()", type_label=end_if];
4647 [label="688_ user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n4647-expression_statement-689-689", method="calcDynamicCommission()", type_label=expression_statement];
4662 [label="689_ addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n4662-expression_statement-690-690", method="calcDynamicCommission()", type_label=expression_statement];
4673 [label="693_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n4673-function_definition-694-696", method="bug_tmstmp13()", type_label=function_definition];
4682 [label="694_ return block.timestamp >= 1546300800;\n4682-return-695-695", method="bug_tmstmp13()", type_label=return];
4688 [label="696_ function calcDynamicCommissionBegin(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n    }\n4688-function_definition-697-702", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=function_definition];
4699 [label="696_ onlyOwner\n4699-expression_statement-697-697", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4702 [label="697_ for(i < (index + length);;++i)\n4702-for-698-701", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=for];
9795 [label="697_ end_loop", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=end_loop];
4716 [label="697_ ++i\n4716-expression_statement-698-698", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4719 [label="698_ User storage user = userMapping[addressMapping[i]];\n4719-new_variable-699-699", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=new_variable];
4730 [label="699_ user.calcDynamicCommissionAmount = 0;\n4730-expression_statement-700-700", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
4736 [label="702_ uint256 bugv_tmstmp5 = block.timestamp;\n4736-new_variable-703-703", method="", type_label=new_variable];
4743 [label="703_ function calcDynamicCommissionRange(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n    }\n4743-function_definition-704-739", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=function_definition];
4754 [label="703_ onlyOwner\n4754-expression_statement-704-704", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4757 [label="704_ for(i < (index + length);;++i)\n4757-for-705-738", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=for];
9850 [label="704_ end_loop", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_loop];
4771 [label="704_ ++i\n4771-expression_statement-705-705", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4774 [label="705_ User memory user = userMapping[addressMapping[i]];\n4774-new_variable-706-706", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4785 [label="706_ if_user.currentInvestAmount > 0\n4785-if-707-737", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9878 [label="706_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4792 [label="707_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n4792-new_variable-708-708", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4810 [label="708_ if_commissionDays >= 1 && commissionDays <= user.currentInvestCycle\n4810-if-709-736", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9903 [label="708_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4821 [label="709_ uint256 depth = 1;\n4821-new_variable-710-710", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4827 [label="710_ address addressWalker = user.sponsorAddress;\n4827-new_variable-711-711", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4835 [label="711_ while\n4835-while-712-735", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=while];
9928 [label="711_ end_loop", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_loop];
4840 [label="712_ User storage sponsor = userMapping[addressWalker];\n4840-new_variable-713-713", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4849 [label="713_ if_sponsor.currentInvestAmount > 0\n4849-if-714-732", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9942 [label="713_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4856 [label="714_ uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n4856-new_variable-715-715", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4867 [label="715_ if_dynamicCommissionRatio > 0\n4867-if-716-731", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9960 [label="715_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4872 [label="716_ uint256 dynamicCA = sponsor.currentInvestAmount;\n4872-new_variable-717-717", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
4880 [label="717_ if_dynamicCA > user.currentInvestAmount\n4880-if-718-720", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
9973 [label="717_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4887 [label="718_ dynamicCA = user.currentInvestAmount;\n4887-expression_statement-719-719", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4893 [label="720_ dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n4893-expression_statement-721-721", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4904 [label="721_ dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n4904-expression_statement-722-722", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4913 [label="722_ if_sponsor.currentlevel == 1\n4913-if-723-729", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
10006 [label="722_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4920 [label="723_ dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n4920-expression_statement-724-724", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4938 [label="724_ if_sponsor.currentlevel == 2\n4938-if-725-729", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
4945 [label="725_ dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n4945-expression_statement-726-726", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4964 [label="727_ dynamicCA = dynamicCA.div(1000 * 100);\n4964-expression_statement-728-728", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4975 [label="729_ sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n4975-expression_statement-730-730", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4988 [label="732_ addressWalker = sponsor.sponsorAddress;\n4988-expression_statement-733-733", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4994 [label="733_ depth = depth.add(1);\n4994-expression_statement-734-734", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
5003 [label="739_ uint256 bugv_tmstmp1 = block.timestamp;\n5003-new_variable-740-740", method="", type_label=new_variable];
5010 [label="740_ function calcDynamicCommissionEnd(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }\n5010-function_definition-741-750", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=function_definition];
5021 [label="740_ onlyOwner\n5021-expression_statement-741-741", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
5024 [label="741_ for(i < (index + length);;++i)\n5024-for-742-749", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=for];
10117 [label="741_ end_loop", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=end_loop];
5038 [label="741_ ++i\n5038-expression_statement-742-742", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
5041 [label="742_ address userAddress = addressMapping[i];\n5041-new_variable-743-743", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=new_variable];
5049 [label="743_ User storage user = userMapping[userAddress];\n5049-new_variable-744-744", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=new_variable];
5058 [label="744_ if_user.calcDynamicCommissionAmount > 0\n5058-if-745-748", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=if];
10151 [label="744_ end_if", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=end_if];
5065 [label="745_ user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n5065-expression_statement-746-746", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
5080 [label="746_ addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n5080-expression_statement-747-747", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
5091 [label="750_ uint256 bugv_tmstmp2 = block.timestamp;\n5091-new_variable-751-751", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
77 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
117 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 139  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
134 -> 5227  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5227 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 5227  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
139 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
163 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
190 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
230 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
257 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
303 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
438 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 459  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
446 -> 5539  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5539 -> 465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
459 -> 5539  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
470 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
485 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 515  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
502 -> 5595  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5595 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 5595  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
526 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 564  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
557 -> 5650  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5650 -> 577  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 5650  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
582 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 620  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
613 -> 5706  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5706 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
620 -> 5706  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
638 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
653 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 689  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
678 -> 5771  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5771 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 5771  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
700 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 738  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
731 -> 5824  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5824 -> 751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
738 -> 5824  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
751 -> 756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
760 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 781  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
768 -> 5861  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5861 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 5861  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
792 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
801 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
807 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 837  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
824 -> 5917  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5917 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 5917  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
843 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
860 -> 873  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
860 -> 5953  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5953 -> 879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 5953  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
887 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
892 -> 897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 925  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
918 -> 6011  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6011 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
925 -> 6011  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
938 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 976  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
965 -> 6058  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6058 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 6058  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
992 -> 1001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1001 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1007 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1042  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1029 -> 6122  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6122 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 6122  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1058 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1062 -> 1071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 1077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1136 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1147 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1162 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1210 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1240 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1248 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1267  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1256 -> 6349  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6349 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 6349  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1273 -> 1287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1287 -> 1297  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1287 -> 1301  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6380 -> 1320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 6380  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1301 -> 1311  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1301 -> 1316  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1311 -> 6380  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1316 -> 6380  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1320 -> 1329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1329 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1335 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1371 -> 1380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1386 -> 1401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1401 -> 1419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1419 -> 1429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1435 -> 1440  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1435 -> 1444  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6528 -> 1453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1440 -> 6528  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1444 -> 1449  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1444 -> 6528  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1449 -> 6528  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1453 -> 1459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1484 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1500 -> 1511  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1500 -> 6593  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6593 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1511 -> 6593  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1517 -> 1535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1535 -> 1540  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1535 -> 1563  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1540 -> 1545  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1540 -> 1549  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6633 -> 1563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1545 -> 6633  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1549 -> 1554  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1549 -> 1559  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1554 -> 6633  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1559 -> 6633  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1563 -> 1568  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1563 -> 1592  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1568 -> 6628  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1568 -> 1573  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1568 -> 1577  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6661 -> 1592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1573 -> 6661  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1577 -> 1582  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1577 -> 1587  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1582 -> 6661  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1587 -> 6661  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1592 -> 6628  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1592 -> 1597  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1592 -> 1601  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6685 -> 1615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1597 -> 6685  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1601 -> 1606  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1601 -> 1611  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1606 -> 6685  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1611 -> 6685  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1619 -> 1627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1627 -> 1640  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1627 -> 6720  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6720 -> 1646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 6720  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1646 -> 1665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1665 -> 1672  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1665 -> 1686  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1672 -> 1677  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1672 -> 1682  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6765 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1677 -> 6765  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1682 -> 6765  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1686 -> 1693  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1686 -> 1717  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1693 -> 6758  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1693 -> 1698  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1693 -> 1702  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6786 -> 1717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1698 -> 6786  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1702 -> 1707  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1702 -> 1712  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1707 -> 6786  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1712 -> 6786  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1717 -> 6758  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1717 -> 1722  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1717 -> 1726  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6810 -> 1775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1722 -> 6810  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1726 -> 1731  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1726 -> 1735  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1731 -> 6810  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1735 -> 1740  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1735 -> 1744  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1740 -> 6810  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1744 -> 1753  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1744 -> 1757  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1753 -> 6810  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1757 -> 1766  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1757 -> 1771  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1766 -> 6810  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1771 -> 6810  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1775 -> 1780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1780 -> 1785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1785 -> 1795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1795 -> 1802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1802 -> 1806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1806 -> 1813  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1806 -> 6899  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6899 -> 1826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1813 -> 6899  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1826 -> 1841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1841 -> 1848  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1841 -> 1853  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6934 -> 1922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1848 -> 6934  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1853 -> 1871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1871 -> 1878  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1871 -> 6964  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6964 -> 1884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1878 -> 6964  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1884 -> 1902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1902 -> 1911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1911 -> 6934  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1922 -> 1927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1927 -> 1932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1932 -> 1942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1942 -> 1949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1949 -> 1953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1953 -> 1960  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1953 -> 7046  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7046 -> 1973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1960 -> 7046  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1973 -> 1993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1993 -> 2004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2004 -> 2018  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2004 -> 7097  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7097 -> 2035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2015 -> 2004  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2018 -> 2029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2029 -> 2015  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2052 -> 2060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2060 -> 2073  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2060 -> 7153  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7153 -> 2079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2073 -> 7153  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2079 -> 2095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2095 -> 2106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2106 -> 2120  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2106 -> 7199  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7199 -> 2137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2117 -> 2106  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2120 -> 2131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2131 -> 2117  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2148 -> 2153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2153 -> 2158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2158 -> 2168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2168 -> 2175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2175 -> 2179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2179 -> 2186  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2179 -> 7272  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7272 -> 2199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2186 -> 7272  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2199 -> 2215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2215 -> 2226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2226 -> 2240  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2226 -> 7319  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7319 -> 2257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2237 -> 2226  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2240 -> 2251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2251 -> 2237  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2272 -> 2280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2280 -> 2288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2288 -> 2299  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2288 -> 7381  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7381 -> 2305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2299 -> 7381  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2305 -> 2318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2318 -> 2327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2327 -> 2339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2339 -> 2357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2357 -> 2370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2370 -> 2379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2379 -> 2391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2391 -> 2415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2415 -> 2426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2426 -> 2435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2435 -> 2442  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2435 -> 2632  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2442 -> 2454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2454 -> 2466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2466 -> 2478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2478 -> 2490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2490 -> 2502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2502 -> 2514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2514 -> 2526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2526 -> 2539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2539 -> 2552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2552 -> 2558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2558 -> 2564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2564 -> 2570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2570 -> 2576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2576 -> 2587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2587 -> 2595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2595 -> 2601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2601 -> 2606  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2601 -> 7694  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7694 -> 2632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2606 -> 2612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2612 -> 2625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2625 -> 2601  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2632 -> 2682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2682 -> 2690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2690 -> 2699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2699 -> 2705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2705 -> 7528  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2705 -> 2710  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2705 -> 7798  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7798 -> 2766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2710 -> 2716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2716 -> 2729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2729 -> 2734  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2729 -> 7822  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7822 -> 2747  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2734 -> 7822  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2747 -> 2760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2760 -> 2705  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2766 -> 2779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2779 -> 2788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2788 -> 2797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2797 -> 2811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2834 -> 2842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2842 -> 2850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2850 -> 2861  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2850 -> 7943  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7943 -> 2867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2861 -> 7943  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2867 -> 2871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2871 -> 2882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2882 -> 2889  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2882 -> 7975  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7975 -> 3000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2889 -> 2897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2897 -> 2904  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2897 -> 7990  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7990 -> 2911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2904 -> 7990  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2911 -> 2920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2920 -> 2933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2933 -> 2939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2939 -> 2945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2945 -> 2951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2951 -> 2957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2957 -> 2963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2963 -> 2969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2969 -> 2982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2982 -> 2991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2991 -> 7975  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3004 -> 3012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3012 -> 3025  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3012 -> 8105  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8105 -> 3031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3025 -> 8105  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3031 -> 3035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3035 -> 3046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3046 -> 3054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3054 -> 3063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3063 -> 3076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3076 -> 3087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3087 -> 3097  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3087 -> 8180  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8180 -> 3213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3097 -> 3103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3103 -> 3109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3109 -> 3122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3122 -> 3135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3135 -> 3148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3148 -> 3161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3161 -> 3170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3170 -> 3179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3179 -> 3188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3188 -> 3193  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3188 -> 8281  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8281 -> 3204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3193 -> 8281  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3204 -> 8180  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3217 -> 3225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3225 -> 3238  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3225 -> 8318  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8318 -> 3244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3238 -> 8318  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3244 -> 3250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3250 -> 3256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3256 -> 3261  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3256 -> 8349  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8349 -> 3283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3261 -> 3265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3265 -> 3274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3274 -> 8349  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3283 -> 3288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3288 -> 3293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3293 -> 3303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3303 -> 3310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3310 -> 3314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3314 -> 3321  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3314 -> 8407  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8407 -> 3334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3321 -> 8407  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3334 -> 3340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3340 -> 3346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3346 -> 3351  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3346 -> 8439  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8439 -> 3373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3351 -> 3355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3355 -> 3364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3364 -> 8439  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3377 -> 3385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3385 -> 3393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3393 -> 3404  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3393 -> 8486  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8486 -> 3410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3404 -> 8486  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3410 -> 3421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3421 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3439 -> 3444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3444 -> 3449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3449 -> 3459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3459 -> 3466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3466 -> 3470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3470 -> 3477  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3470 -> 8563  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8563 -> 3490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3477 -> 8563  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3490 -> 3508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3508 -> 3517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3517 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3583 -> 3591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3591 -> 3599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3599 -> 3610  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3599 -> 8692  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8692 -> 3616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3610 -> 8692  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3616 -> 3636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3636 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3643 -> 3648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3648 -> 3653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3653 -> 3663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3663 -> 3670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3670 -> 3674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3674 -> 3681  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3674 -> 8767  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8767 -> 3694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3681 -> 8767  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3694 -> 3749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3749 -> 3760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3760 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3906 -> 3915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3915 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3921 -> 3976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3976 -> 3987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3987 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4092 -> 4100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4100 -> 4108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4108 -> 4119  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4108 -> 9201  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9201 -> 4125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4119 -> 9201  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4125 -> 4180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4180 -> 4191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4191 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4296 -> 4304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4304 -> 4312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4312 -> 4323  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4312 -> 9405  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9405 -> 4329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4323 -> 9405  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4329 -> 4335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4335 -> 4349  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4335 -> 9428  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9428 -> 4366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4346 -> 4335  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4349 -> 4360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4360 -> 4346  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4366 -> 4380  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4366 -> 9459  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9459 -> 4609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4377 -> 4366  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4380 -> 4391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4391 -> 4398  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4391 -> 9484  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9484 -> 4377  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4398 -> 4416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4416 -> 4427  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4416 -> 9509  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4427 -> 4433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4433 -> 4441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4441 -> 4446  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4441 -> 9534  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9534 -> 4377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4446 -> 4455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4455 -> 4462  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4455 -> 9548  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4462 -> 4473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4473 -> 4478  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4473 -> 9566  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9566 -> 4594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4478 -> 4486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4486 -> 4493  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4486 -> 9579  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9579 -> 4499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4493 -> 9579  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4499 -> 4510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4510 -> 4519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4519 -> 4526  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4519 -> 4544  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9612 -> 4581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4526 -> 9612  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4544 -> 4551  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4544 -> 4570  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4551 -> 9612  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4570 -> 9612  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4581 -> 9566  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4594 -> 4600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4600 -> 4441  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4609 -> 4623  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4609 -> 9702  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9702 -> 4673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4620 -> 4609  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4623 -> 4631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4631 -> 4640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4640 -> 4647  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4640 -> 9733  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9733 -> 4620  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
9733 -> 4620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
4647 -> 4662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4662 -> 9733  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4673 -> 4682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4682 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4688 -> 4702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4702 -> 4719  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4702 -> 9795  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9795 -> 4736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4716 -> 4702  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4719 -> 4730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4730 -> 4716  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4743 -> 4757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4757 -> 4774  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4757 -> 9850  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9850 -> 5003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4771 -> 4757  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4774 -> 4785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4785 -> 4792  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4785 -> 9878  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9878 -> 4771  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4792 -> 4810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4810 -> 4821  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4810 -> 9903  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4821 -> 4827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4827 -> 4835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4835 -> 4840  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4835 -> 9928  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9928 -> 4771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4840 -> 4849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4849 -> 4856  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4849 -> 9942  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4856 -> 4867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4867 -> 4872  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4867 -> 9960  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9960 -> 4988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4872 -> 4880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4880 -> 4887  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4880 -> 9973  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9973 -> 4893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4887 -> 9973  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4893 -> 4904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4904 -> 4913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4913 -> 4920  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4913 -> 4938  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10006 -> 4975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4920 -> 10006  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4938 -> 4945  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4938 -> 4964  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4945 -> 10006  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4964 -> 10006  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4975 -> 9960  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4988 -> 4994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4994 -> 4835  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5010 -> 5024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5024 -> 5041  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5024 -> 10117  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10117 -> 5091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5038 -> 5024  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5041 -> 5049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5049 -> 5058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5058 -> 5065  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5058 -> 10151  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10151 -> 5038  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
10151 -> 5038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
5065 -> 5080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5080 -> 10151  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
