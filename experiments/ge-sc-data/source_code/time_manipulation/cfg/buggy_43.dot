digraph  {
13 [label="2_ uint256 bugv_tmstmp1 = block.timestamp;\n13-new_variable-3-3", method="", type_label=new_variable];
26 [label="4_ function _setMetadata(bytes memory metadata) internal {\n        emit MetadataSet(metadata);\n    }\n26-function_definition-5-7", method="_setMetadata(bytes memory metadata)", type_label=function_definition];
38 [label="7_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n38-function_definition-8-10", method="bug_tmstmp9()", type_label=function_definition];
47 [label="8_ return block.timestamp >= 1546300800;\n47-return-9-9", method="bug_tmstmp9()", type_label=return];
56 [label="12_ address winner_tmstmp2;\n56-new_variable-13-13", method="", type_label=new_variable];
60 [label="13_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n60-function_definition-14-16", method="play_tmstmp2(uint startTime)", type_label=function_definition];
68 [label="14_ if_startTime + (5 * 1 days) == block.timestamp\n68-if-15-16", method="play_tmstmp2(uint startTime)", type_label=if];
1917 [label="14_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
81 [label="15_ winner_tmstmp2 = msg.sender;\n81-expression_statement-16-16", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
87 [label="16_ address private _operator;\n87-new_variable-17-17", method="", type_label=new_variable];
92 [label="17_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n92-function_definition-18-20", method="bug_tmstmp17()", type_label=function_definition];
101 [label="18_ return block.timestamp >= 1546300800;\n101-return-19-19", method="bug_tmstmp17()", type_label=return];
107 [label="20_ bool private _status;\n107-new_variable-21-21", method="", type_label=new_variable];
112 [label="21_ uint256 bugv_tmstmp2 = block.timestamp;\n112-new_variable-22-22", method="", type_label=new_variable];
129 [label="23_ function _setOperator(address operator) internal {\n        require(_operator != operator, \"cannot set same operator\");\n        _operator = operator;\n        emit OperatorUpdated(operator, hasActiveOperator());\n    }\n129-function_definition-24-28", method="_setOperator(address operator)", type_label=function_definition];
137 [label="24_ require(_operator != operator, \"cannot set same operator\");\n137-expression_statement-25-25", method="_setOperator(address operator)", type_label=expression_statement];
147 [label="25_ _operator = operator;\n147-expression_statement-26-26", method="_setOperator(address operator)", type_label=expression_statement];
158 [label="28_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n158-function_definition-29-31", method="bug_tmstmp25()", type_label=function_definition];
167 [label="29_ return block.timestamp >= 1546300800;\n167-return-30-30", method="bug_tmstmp25()", type_label=return];
173 [label="31_ function _transferOperator(address operator) internal {\n        require(_operator != address(0), \"operator not set\");\n        _setOperator(operator);\n    }\n173-function_definition-32-35", method="_transferOperator(address operator)", type_label=function_definition];
181 [label="32_ require(_operator != address(0), \"operator not set\");\n181-expression_statement-33-33", method="_transferOperator(address operator)", type_label=expression_statement];
193 [label="33_ _setOperator(operator);\n193-expression_statement-34-34", method="_transferOperator(address operator)", type_label=expression_statement];
198 [label="35_ address winner_tmstmp19;\n198-new_variable-36-36", method="", type_label=new_variable];
202 [label="36_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n202-function_definition-37-40", method="play_tmstmp19(uint startTime)", type_label=function_definition];
210 [label="37_ uint _vtime = block.timestamp;\n210-new_variable-38-38", method="play_tmstmp19(uint startTime)", type_label=new_variable];
218 [label="38_ if_startTime + (5 * 1 days) == _vtime\n218-if-39-40", method="play_tmstmp19(uint startTime)", type_label=if];
2067 [label="38_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
229 [label="39_ winner_tmstmp19 = msg.sender;\n229-expression_statement-40-40", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
235 [label="40_ function _renounceOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _operator = address(0);\n        _status = false;\n        emit OperatorUpdated(address(0), false);\n    }\n235-function_definition-41-46", method="_renounceOperator()", type_label=function_definition];
239 [label="41_ require(hasActiveOperator(), \"only when operator active\");\n239-expression_statement-42-42", method="_renounceOperator()", type_label=expression_statement];
248 [label="42_ _operator = address(0);\n248-expression_statement-43-43", method="_renounceOperator()", type_label=expression_statement];
254 [label="43_ _status = false;\n254-expression_statement-44-44", method="_renounceOperator()", type_label=expression_statement];
268 [label="46_ address winner_tmstmp26;\n268-new_variable-47-47", method="", type_label=new_variable];
272 [label="47_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n272-function_definition-48-50", method="play_tmstmp26(uint startTime)", type_label=function_definition];
280 [label="48_ if_startTime + (5 * 1 days) == block.timestamp\n280-if-49-50", method="play_tmstmp26(uint startTime)", type_label=if];
2129 [label="48_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
293 [label="49_ winner_tmstmp26 = msg.sender;\n293-expression_statement-50-50", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
299 [label="50_ function _activateOperator() internal {\n        require(!hasActiveOperator(), \"only when operator not active\");\n        _status = true;\n        emit OperatorUpdated(_operator, true);\n    }\n299-function_definition-51-55", method="_activateOperator()", type_label=function_definition];
303 [label="51_ require(!hasActiveOperator(), \"only when operator not active\");\n303-expression_statement-52-52", method="_activateOperator()", type_label=expression_statement];
313 [label="52_ _status = true;\n313-expression_statement-53-53", method="_activateOperator()", type_label=expression_statement];
325 [label="55_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n325-function_definition-56-64", method="bug_tmstmp20()", type_label=function_definition];
330 [label="56_ uint pastBlockTime_tmstmp20;\n330-new_variable-57-57", method="bug_tmstmp20()", type_label=new_variable];
335 [label="57_ require(msg.value == 10 ether);\n335-expression_statement-58-58", method="bug_tmstmp20()", type_label=expression_statement];
345 [label="58_ require(now != pastBlockTime_tmstmp20);\n345-expression_statement-59-59", method="bug_tmstmp20()", type_label=expression_statement];
352 [label="59_ pastBlockTime_tmstmp20 = now;\n352-expression_statement-60-60", method="bug_tmstmp20()", type_label=expression_statement];
356 [label="60_ if_now % 15 == 0\n356-if-61-63", method="bug_tmstmp20()", type_label=if];
2205 [label="60_ end_if", method="bug_tmstmp20()", type_label=end_if];
363 [label="61_ msg.sender.transfer(address(this).balance);\n363-expression_statement-62-62", method="bug_tmstmp20()", type_label=expression_statement];
376 [label="64_ function _deactivateOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _status = false;\n        emit OperatorUpdated(_operator, false);\n    }\n376-function_definition-65-69", method="_deactivateOperator()", type_label=function_definition];
380 [label="65_ require(hasActiveOperator(), \"only when operator active\");\n380-expression_statement-66-66", method="_deactivateOperator()", type_label=expression_statement];
389 [label="66_ _status = false;\n389-expression_statement-67-67", method="_deactivateOperator()", type_label=expression_statement];
401 [label="69_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n401-function_definition-70-78", method="bug_tmstmp32()", type_label=function_definition];
406 [label="70_ uint pastBlockTime_tmstmp32;\n406-new_variable-71-71", method="bug_tmstmp32()", type_label=new_variable];
411 [label="71_ require(msg.value == 10 ether);\n411-expression_statement-72-72", method="bug_tmstmp32()", type_label=expression_statement];
421 [label="72_ require(now != pastBlockTime_tmstmp32);\n421-expression_statement-73-73", method="bug_tmstmp32()", type_label=expression_statement];
428 [label="73_ pastBlockTime_tmstmp32 = now;\n428-expression_statement-74-74", method="bug_tmstmp32()", type_label=expression_statement];
432 [label="74_ if_now % 15 == 0\n432-if-75-77", method="bug_tmstmp32()", type_label=if];
2281 [label="74_ end_if", method="bug_tmstmp32()", type_label=end_if];
439 [label="75_ msg.sender.transfer(address(this).balance);\n439-expression_statement-76-76", method="bug_tmstmp32()", type_label=expression_statement];
452 [label="78_ function getOperator() public view returns (address operator) {\n        operator = _operator;\n    }\n452-function_definition-79-81", method="getOperator()", type_label=function_definition];
462 [label="79_ operator = _operator;\n462-expression_statement-80-80", method="getOperator()", type_label=expression_statement];
466 [label="81_ address winner_tmstmp38;\n466-new_variable-82-82", method="", type_label=new_variable];
470 [label="82_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n470-function_definition-83-85", method="play_tmstmp38(uint startTime)", type_label=function_definition];
478 [label="83_ if_startTime + (5 * 1 days) == block.timestamp\n478-if-84-85", method="play_tmstmp38(uint startTime)", type_label=if];
2327 [label="83_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
491 [label="84_ winner_tmstmp38 = msg.sender;\n491-expression_statement-85-85", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
497 [label="85_ function isOperator(address caller) public view returns (bool ok) {\n        return (caller == getOperator());\n    }\n497-function_definition-86-88", method="isOperator(address caller)", type_label=function_definition];
511 [label="86_ return (caller == getOperator());\n511-return-87-87", method="isOperator(address caller)", type_label=return];
517 [label="88_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n517-function_definition-89-97", method="bug_tmstmp4()", type_label=function_definition];
522 [label="89_ uint pastBlockTime_tmstmp4;\n522-new_variable-90-90", method="bug_tmstmp4()", type_label=new_variable];
527 [label="90_ require(msg.value == 10 ether);\n527-expression_statement-91-91", method="bug_tmstmp4()", type_label=expression_statement];
537 [label="91_ require(now != pastBlockTime_tmstmp4);\n537-expression_statement-92-92", method="bug_tmstmp4()", type_label=expression_statement];
544 [label="92_ pastBlockTime_tmstmp4 = now;\n544-expression_statement-93-93", method="bug_tmstmp4()", type_label=expression_statement];
548 [label="93_ if_now % 15 == 0\n548-if-94-96", method="bug_tmstmp4()", type_label=if];
2397 [label="93_ end_if", method="bug_tmstmp4()", type_label=end_if];
555 [label="94_ msg.sender.transfer(address(this).balance);\n555-expression_statement-95-95", method="bug_tmstmp4()", type_label=expression_statement];
568 [label="97_ function hasActiveOperator() public view returns (bool ok) {\n        return _status;\n    }\n568-function_definition-98-100", method="hasActiveOperator()", type_label=function_definition];
578 [label="98_ return _status;\n578-return-99-99", method="hasActiveOperator()", type_label=return];
580 [label="100_ address winner_tmstmp7;\n580-new_variable-101-101", method="", type_label=new_variable];
584 [label="101_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n584-function_definition-102-105", method="play_tmstmp7(uint startTime)", type_label=function_definition];
592 [label="102_ uint _vtime = block.timestamp;\n592-new_variable-103-103", method="play_tmstmp7(uint startTime)", type_label=new_variable];
600 [label="103_ if_startTime + (5 * 1 days) == _vtime\n600-if-104-105", method="play_tmstmp7(uint startTime)", type_label=if];
2449 [label="103_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
611 [label="104_ winner_tmstmp7 = msg.sender;\n611-expression_statement-105-105", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
617 [label="105_ function isActiveOperator(address caller) public view returns (bool ok) {\n        return (isOperator(caller) && hasActiveOperator());\n    }\n617-function_definition-106-108", method="isActiveOperator(address caller)", type_label=function_definition];
631 [label="106_ return (isOperator(caller) && hasActiveOperator());\n631-return-107-107", method="isActiveOperator(address caller)", type_label=return];
640 [label="108_ address winner_tmstmp23;\n640-new_variable-109-109", method="", type_label=new_variable];
644 [label="109_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n644-function_definition-110-113", method="play_tmstmp23(uint startTime)", type_label=function_definition];
652 [label="110_ uint _vtime = block.timestamp;\n652-new_variable-111-111", method="play_tmstmp23(uint startTime)", type_label=new_variable];
660 [label="111_ if_startTime + (5 * 1 days) == _vtime\n660-if-112-113", method="play_tmstmp23(uint startTime)", type_label=if];
2509 [label="111_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
671 [label="112_ winner_tmstmp23 = msg.sender;\n671-expression_statement-113-113", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
680 [label="115_ struct MultiHash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 digestSize;\n    }\n680-expression_statement-116-120", method="MultiHash()", type_label=expression_statement];
694 [label="120_ function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {\n        bytes memory out = new bytes(34);\n        out[0] = byte(multihash.hashFunction);\n        out[1] = byte(multihash.digestSize);\n        uint8 i;\n        for (i = 0; i < 32; i++) {\n          out[i+2] = multihash.hash[i];\n        }\n        return out;\n    }\n694-function_definition-121-130", method="_combineMultiHash(MultiHash memory multihash)", type_label=function_definition];
708 [label="121_ bytes memory out = new bytes(34);\n708-new_variable-122-122", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
719 [label="122_ out[0] = byte(multihash.hashFunction);\n719-expression_statement-123-123", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
729 [label="123_ out[1] = byte(multihash.digestSize);\n729-expression_statement-124-124", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
739 [label="124_ uint8 i;\n739-new_variable-125-125", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
744 [label="125_ for(i < 32;;i++)\n744-for-126-128", method="_combineMultiHash(MultiHash memory multihash)", type_label=for];
2593 [label="125_ end_loop", method="_combineMultiHash(MultiHash memory multihash)", type_label=end_loop];
753 [label="125_ i++\n753-expression_statement-126-126", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
756 [label="126_ out[i+2] = multihash.hash[i];\n756-expression_statement-127-127", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
768 [label="128_ return out;\n768-return-129-129", method="_combineMultiHash(MultiHash memory multihash)", type_label=return];
770 [label="130_ address winner_tmstmp14;\n770-new_variable-131-131", method="", type_label=new_variable];
774 [label="131_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n774-function_definition-132-134", method="play_tmstmp14(uint startTime)", type_label=function_definition];
782 [label="132_ if_startTime + (5 * 1 days) == block.timestamp\n782-if-133-134", method="play_tmstmp14(uint startTime)", type_label=if];
2631 [label="132_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
795 [label="133_ winner_tmstmp14 = msg.sender;\n795-expression_statement-134-134", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
801 [label="134_ function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {\n        require(source.length == 34, \"length of source must be 34\");\n        uint8 hashFunction = uint8(source[0]);\n        uint8 digestSize = uint8(source[1]);\n        bytes32 hash;\n        assembly {\n          hash := mload(add(source, 34))\n        }\n        return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n    }\n801-function_definition-135-148", method="_splitMultiHash(bytes memory source)", type_label=function_definition];
815 [label="135_ require(source.length == 34, \"length of source must be 34\");\n815-expression_statement-136-136", method="_splitMultiHash(bytes memory source)", type_label=expression_statement];
827 [label="136_ uint8 hashFunction = uint8(source[0]);\n827-new_variable-137-137", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
837 [label="137_ uint8 digestSize = uint8(source[1]);\n837-new_variable-138-138", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
847 [label="138_ bytes32 hash;\n847-new_variable-139-139", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
865 [label="142_ return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n865-return-143-147", method="_splitMultiHash(bytes memory source)", type_label=return];
879 [label="148_ address winner_tmstmp30;\n879-new_variable-149-149", method="", type_label=new_variable];
883 [label="149_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n883-function_definition-150-152", method="play_tmstmp30(uint startTime)", type_label=function_definition];
891 [label="150_ if_startTime + (5 * 1 days) == block.timestamp\n891-if-151-152", method="play_tmstmp30(uint startTime)", type_label=if];
2740 [label="150_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
904 [label="151_ winner_tmstmp30 = msg.sender;\n904-expression_statement-152-152", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
931 [label="155_ function create(bytes calldata initData) external returns (address instance);\n931-function_definition-156-156", method="create(bytes calldata initData)", type_label=function_definition];
943 [label="156_ function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);\n943-function_definition-157-157", method="createSalty(bytes calldata initData,bytes32 salt)", type_label=function_definition];
959 [label="157_ function getInitSelector() external view returns (bytes4 initSelector);\n959-function_definition-158-158", method="getInitSelector()", type_label=function_definition];
968 [label="158_ function getInstanceRegistry() external view returns (address instanceRegistry);\n968-function_definition-159-159", method="getInstanceRegistry()", type_label=function_definition];
977 [label="159_ function getTemplate() external view returns (address template);\n977-function_definition-160-160", method="getTemplate()", type_label=function_definition];
986 [label="160_ function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);\n986-function_definition-161-161", method="getSaltyInstance(bytes calldata,bytes32 salt)", type_label=function_definition];
1002 [label="161_ function getNextInstance(bytes calldata) external view returns (address instance);\n1002-function_definition-162-162", method="getNextInstance(bytes calldata)", type_label=function_definition];
1014 [label="162_ function getInstanceCreator(address instance) external view returns (address creator);\n1014-function_definition-163-163", method="getInstanceCreator(address instance)", type_label=function_definition];
1027 [label="163_ function getInstanceType() external view returns (bytes4 instanceType);\n1027-function_definition-164-164", method="getInstanceType()", type_label=function_definition];
1036 [label="164_ function getInstanceCount() external view returns (uint256 count);\n1036-function_definition-165-165", method="getInstanceCount()", type_label=function_definition];
1045 [label="165_ function getInstance(uint256 index) external view returns (address instance);\n1045-function_definition-166-166", method="getInstance(uint256 index)", type_label=function_definition];
1058 [label="166_ function getInstances() external view returns (address[] memory instances);\n1058-function_definition-167-167", method="getInstances()", type_label=function_definition];
1068 [label="167_ function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n1068-function_definition-168-168", method="getPaginatedInstances(uint256 startIndex,uint256 endIndex)", type_label=function_definition];
1092 [label="170_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1092-function_definition-171-173", method="bug_tmstmp37()", type_label=function_definition];
1101 [label="171_ return block.timestamp >= 1546300800;\n1101-return-172-172", method="bug_tmstmp37()", type_label=return];
1107 [label="173_ MultiHash private _proofHash;\n1107-new_variable-174-174", method="", type_label=new_variable];
1113 [label="174_ uint256 bugv_tmstmp3 = block.timestamp;\n1113-new_variable-175-175", method="", type_label=new_variable];
1130 [label="176_ function _setProofHash(bytes memory proofHash) internal {\n        _proofHash = MultiHashWrapper._splitMultiHash(proofHash);\n        emit ProofHashSet(msg.sender, proofHash);\n    }\n1130-function_definition-177-180", method="_setProofHash(bytes memory proofHash)", type_label=function_definition];
1138 [label="177_ _proofHash = MultiHashWrapper._splitMultiHash(proofHash);\n1138-expression_statement-178-178", method="_setProofHash(bytes memory proofHash)", type_label=expression_statement];
1155 [label="180_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1155-function_definition-181-189", method="bug_tmstmp8()", type_label=function_definition];
1160 [label="181_ uint pastBlockTime_tmstmp8;\n1160-new_variable-182-182", method="bug_tmstmp8()", type_label=new_variable];
1165 [label="182_ require(msg.value == 10 ether);\n1165-expression_statement-183-183", method="bug_tmstmp8()", type_label=expression_statement];
1175 [label="183_ require(now != pastBlockTime_tmstmp8);\n1175-expression_statement-184-184", method="bug_tmstmp8()", type_label=expression_statement];
1182 [label="184_ pastBlockTime_tmstmp8 = now;\n1182-expression_statement-185-185", method="bug_tmstmp8()", type_label=expression_statement];
1186 [label="185_ if_now % 15 == 0\n1186-if-186-188", method="bug_tmstmp8()", type_label=if];
3035 [label="185_ end_if", method="bug_tmstmp8()", type_label=end_if];
1193 [label="186_ msg.sender.transfer(address(this).balance);\n1193-expression_statement-187-187", method="bug_tmstmp8()", type_label=expression_statement];
1206 [label="189_ function getProofHash() public view returns (bytes memory proofHash) {\n        proofHash = MultiHashWrapper._combineMultiHash(_proofHash);\n    }\n1206-function_definition-190-192", method="getProofHash()", type_label=function_definition];
1216 [label="190_ proofHash = MultiHashWrapper._combineMultiHash(_proofHash);\n1216-expression_statement-191-191", method="getProofHash()", type_label=expression_statement];
1225 [label="192_ address winner_tmstmp39;\n1225-new_variable-193-193", method="", type_label=new_variable];
1229 [label="193_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1229-function_definition-194-197", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1237 [label="194_ uint _vtime = block.timestamp;\n1237-new_variable-195-195", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1245 [label="195_ if_startTime + (5 * 1 days) == _vtime\n1245-if-196-197", method="play_tmstmp39(uint startTime)", type_label=if];
3094 [label="195_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1256 [label="196_ winner_tmstmp39 = msg.sender;\n1256-expression_statement-197-197", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1265 [label="199_ address winner_tmstmp3;\n1265-new_variable-200-200", method="", type_label=new_variable];
1269 [label="200_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n1269-function_definition-201-204", method="play_tmstmp3(uint startTime)", type_label=function_definition];
1277 [label="201_ uint _vtime = block.timestamp;\n1277-new_variable-202-202", method="play_tmstmp3(uint startTime)", type_label=new_variable];
1285 [label="202_ if_startTime + (5 * 1 days) == _vtime\n1285-if-203-204", method="play_tmstmp3(uint startTime)", type_label=if];
3134 [label="202_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
1296 [label="203_ winner_tmstmp3 = msg.sender;\n1296-expression_statement-204-204", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
1302 [label="204_ address private _factory;\n1302-new_variable-205-205", method="", type_label=new_variable];
1307 [label="205_ modifier initializeTemplate() {\n        _factory = msg.sender;\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n1307-expression_statement-206-212", method="", type_label=expression_statement];
1310 [label="206_ _factory = msg.sender;\n1310-expression_statement-207-207", method="", type_label=expression_statement];
1316 [label="207_ uint32 codeSize;\n1316-new_variable-208-208", method="", type_label=new_variable];
1330 [label="209_ require(codeSize == 0, \"must be called within contract constructor\");\n1330-expression_statement-210-210", method="", type_label=expression_statement];
1340 [label="210_ _;\n1340-expression_statement-211-211", method="", type_label=expression_statement];
1342 [label="212_ uint256 bugv_tmstmp5 = block.timestamp;\n1342-new_variable-213-213", method="", type_label=new_variable];
1349 [label="213_ function getCreator() public view returns (address creator) {\n        creator = iFactory(_factory).getInstanceCreator(address(this));\n    }\n1349-function_definition-214-216", method="getCreator()", type_label=function_definition];
1359 [label="214_ creator = iFactory(_factory).getInstanceCreator(address(this));\n1359-expression_statement-215-215", method="getCreator()", type_label=expression_statement];
1373 [label="216_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1373-function_definition-217-225", method="bug_tmstmp36()", type_label=function_definition];
1378 [label="217_ uint pastBlockTime_tmstmp36;\n1378-new_variable-218-218", method="bug_tmstmp36()", type_label=new_variable];
1383 [label="218_ require(msg.value == 10 ether);\n1383-expression_statement-219-219", method="bug_tmstmp36()", type_label=expression_statement];
1393 [label="219_ require(now != pastBlockTime_tmstmp36);\n1393-expression_statement-220-220", method="bug_tmstmp36()", type_label=expression_statement];
1400 [label="220_ pastBlockTime_tmstmp36 = now;\n1400-expression_statement-221-221", method="bug_tmstmp36()", type_label=expression_statement];
1404 [label="221_ if_now % 15 == 0\n1404-if-222-224", method="bug_tmstmp36()", type_label=if];
3253 [label="221_ end_if", method="bug_tmstmp36()", type_label=end_if];
1411 [label="222_ msg.sender.transfer(address(this).balance);\n1411-expression_statement-223-223", method="bug_tmstmp36()", type_label=expression_statement];
1424 [label="225_ function isCreator(address caller) public view returns (bool ok) {\n        ok = (caller == getCreator());\n    }\n1424-function_definition-226-228", method="isCreator(address caller)", type_label=function_definition];
1438 [label="226_ ok = (caller == getCreator());\n1438-expression_statement-227-227", method="isCreator(address caller)", type_label=expression_statement];
1446 [label="228_ address winner_tmstmp35;\n1446-new_variable-229-229", method="", type_label=new_variable];
1450 [label="229_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1450-function_definition-230-233", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1458 [label="230_ uint _vtime = block.timestamp;\n1458-new_variable-231-231", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1466 [label="231_ if_startTime + (5 * 1 days) == _vtime\n1466-if-232-233", method="play_tmstmp35(uint startTime)", type_label=if];
3315 [label="231_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1477 [label="232_ winner_tmstmp35 = msg.sender;\n1477-expression_statement-233-233", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1483 [label="233_ function getFactory() public view returns (address factory) {\n        factory = _factory;\n    }\n1483-function_definition-234-236", method="getFactory()", type_label=function_definition];
1493 [label="234_ factory = _factory;\n1493-expression_statement-235-235", method="getFactory()", type_label=expression_statement];
1497 [label="236_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1497-function_definition-237-245", method="bug_tmstmp40()", type_label=function_definition];
1502 [label="237_ uint pastBlockTime_tmstmp40;\n1502-new_variable-238-238", method="bug_tmstmp40()", type_label=new_variable];
1507 [label="238_ require(msg.value == 10 ether);\n1507-expression_statement-239-239", method="bug_tmstmp40()", type_label=expression_statement];
1517 [label="239_ require(now != pastBlockTime_tmstmp40);\n1517-expression_statement-240-240", method="bug_tmstmp40()", type_label=expression_statement];
1524 [label="240_ pastBlockTime_tmstmp40 = now;\n1524-expression_statement-241-241", method="bug_tmstmp40()", type_label=expression_statement];
1528 [label="241_ if_now % 15 == 0\n1528-if-242-244", method="bug_tmstmp40()", type_label=if];
3377 [label="241_ end_if", method="bug_tmstmp40()", type_label=end_if];
1535 [label="242_ msg.sender.transfer(address(this).balance);\n1535-expression_statement-243-243", method="bug_tmstmp40()", type_label=expression_statement];
1563 [label="247_ uint256 bugv_tmstmp4 = block.timestamp;\n1563-new_variable-248-248", method="", type_label=new_variable];
1584 [label="249_ function initialize(\n        address operator,\n        bytes memory multihash,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        if (multihash.length != 0) {\n            ProofHash._setProofHash(multihash);\n        }\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n        emit Initialized(operator, multihash, metadata);\n    }\n1584-function_definition-250-266", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=function_definition];
1599 [label="253_ initializeTemplate()\n1599-expression_statement-254-254", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1602 [label="254_ if_multihash.length != 0\n1602-if-255-257", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3451 [label="254_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1609 [label="255_ ProofHash._setProofHash(multihash);\n1609-expression_statement-256-256", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1616 [label="257_ if_operator != address(0)\n1616-if-258-261", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3465 [label="257_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1623 [label="258_ Operated._setOperator(operator);\n1623-expression_statement-259-259", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1630 [label="259_ Operated._activateOperator();\n1630-expression_statement-260-260", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1635 [label="261_ if_metadata.length != 0\n1635-if-262-264", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
3484 [label="261_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1642 [label="262_ EventMetadata._setMetadata(metadata);\n1642-expression_statement-263-263", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1657 [label="266_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1657-function_definition-267-269", method="bug_tmstmp33()", type_label=function_definition];
1666 [label="267_ return block.timestamp >= 1546300800;\n1666-return-268-268", method="bug_tmstmp33()", type_label=return];
1672 [label="269_ function setMetadata(bytes memory metadata) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        EventMetadata._setMetadata(metadata);\n    }\n1672-function_definition-270-273", method="setMetadata(bytes memory metadata)", type_label=function_definition];
1680 [label="270_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1680-expression_statement-271-271", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1704 [label="271_ EventMetadata._setMetadata(metadata);\n1704-expression_statement-272-272", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1711 [label="273_ address winner_tmstmp27;\n1711-new_variable-274-274", method="", type_label=new_variable];
1715 [label="274_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1715-function_definition-275-278", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1723 [label="275_ uint _vtime = block.timestamp;\n1723-new_variable-276-276", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1731 [label="276_ if_startTime + (5 * 1 days) == _vtime\n1731-if-277-278", method="play_tmstmp27(uint startTime)", type_label=if];
3580 [label="276_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1742 [label="277_ winner_tmstmp27 = msg.sender;\n1742-expression_statement-278-278", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1748 [label="278_ function transferOperator(address operator) public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._transferOperator(operator);\n    }\n1748-function_definition-279-282", method="transferOperator(address operator)", type_label=function_definition];
1756 [label="279_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1756-expression_statement-280-280", method="transferOperator(address operator)", type_label=expression_statement];
1771 [label="280_ Operated._transferOperator(operator);\n1771-expression_statement-281-281", method="transferOperator(address operator)", type_label=expression_statement];
1778 [label="282_ address winner_tmstmp31;\n1778-new_variable-283-283", method="", type_label=new_variable];
1782 [label="283_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1782-function_definition-284-287", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1790 [label="284_ uint _vtime = block.timestamp;\n1790-new_variable-285-285", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1798 [label="285_ if_startTime + (5 * 1 days) == _vtime\n1798-if-286-287", method="play_tmstmp31(uint startTime)", type_label=if];
3647 [label="285_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1809 [label="286_ winner_tmstmp31 = msg.sender;\n1809-expression_statement-287-287", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1815 [label="287_ function renounceOperator() public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._renounceOperator();\n    }\n1815-function_definition-288-291", method="renounceOperator()", type_label=function_definition];
1819 [label="288_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1819-expression_statement-289-289", method="renounceOperator()", type_label=expression_statement];
1834 [label="289_ Operated._renounceOperator();\n1834-expression_statement-290-290", method="renounceOperator()", type_label=expression_statement];
1839 [label="291_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1839-function_definition-292-294", method="bug_tmstmp13()", type_label=function_definition];
1848 [label="292_ return block.timestamp >= 1546300800;\n1848-return-293-293", method="bug_tmstmp13()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
677;
910;
1262;
1548;
1649;
38 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
60 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 81  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
68 -> 1917  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1917 -> 87  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 1917  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
92 -> 101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
107 -> 112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
137 -> 147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
173 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
218 -> 229  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
218 -> 2067  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2067 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 2067  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
235 -> 239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
239 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
248 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
272 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 293  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
280 -> 2129  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2129 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 2129  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
299 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
325 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 363  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
356 -> 2205  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2205 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
363 -> 2205  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
376 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
380 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 439  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
432 -> 2281  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2281 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 2281  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
452 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 491  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
478 -> 2327  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2327 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 2327  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
497 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
517 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
527 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
548 -> 555  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
548 -> 2397  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2397 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 2397  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
568 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
584 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 611  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
600 -> 2449  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2449 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 2449  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
617 -> 631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
631 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
644 -> 652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 671  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
660 -> 2509  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2509 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 2509  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
694 -> 708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
708 -> 719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 756  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
744 -> 2593  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2593 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
753 -> 744  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
756 -> 753  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
768 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
774 -> 782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 795  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
782 -> 2631  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2631 -> 801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 2631  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
801 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
827 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
883 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 904  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
891 -> 2740  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2740 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 2740  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1092 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1107 -> 1113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1130 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1155 -> 1160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 1182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1182 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1193  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1186 -> 3035  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3035 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1193 -> 3035  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1206 -> 1216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1229 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1245 -> 1256  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1245 -> 3094  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3094 -> 1262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 3094  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1269 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1277 -> 1285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1285 -> 1296  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1285 -> 3134  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3134 -> 1302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1296 -> 3134  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1302 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 1342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1330 -> 1340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1349 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1373 -> 1378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 1383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1383 -> 1393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1393 -> 1400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1400 -> 1404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1404 -> 1411  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1404 -> 3253  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3253 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1411 -> 3253  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1424 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 1458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1458 -> 1466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1466 -> 1477  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1466 -> 3315  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3315 -> 1483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1477 -> 3315  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1483 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1497 -> 1502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1502 -> 1507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1517 -> 1524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1524 -> 1528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1528 -> 1535  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1528 -> 3377  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3377 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1535 -> 3377  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1584 -> 1602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1609  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1602 -> 3451  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3451 -> 1616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1609 -> 3451  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1616 -> 1623  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1616 -> 3465  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3465 -> 1635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1623 -> 1630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1630 -> 3465  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1635 -> 1642  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1635 -> 3484  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3484 -> 1649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1642 -> 3484  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1657 -> 1666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1666 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1672 -> 1680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1680 -> 1704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1715 -> 1723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1723 -> 1731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1731 -> 1742  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1731 -> 3580  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3580 -> 1748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1742 -> 3580  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1748 -> 1756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1756 -> 1771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1782 -> 1790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1790 -> 1798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1798 -> 1809  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1798 -> 3647  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3647 -> 1815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1809 -> 3647  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1815 -> 1819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1819 -> 1834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1839 -> 1848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1848 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
