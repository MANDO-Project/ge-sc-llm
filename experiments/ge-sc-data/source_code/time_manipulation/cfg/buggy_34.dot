digraph  {
13 [label="2_ function bug_tmstmp28 () public payable {\n	uint pastBlockTime_tmstmp28;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp28);  \n        pastBlockTime_tmstmp28 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n13-function_definition-3-11", method="bug_tmstmp28()", type_label=function_definition];
18 [label="3_ uint pastBlockTime_tmstmp28;\n18-new_variable-4-4", method="bug_tmstmp28()", type_label=new_variable];
23 [label="4_ require(msg.value == 10 ether);\n23-expression_statement-5-5", method="bug_tmstmp28()", type_label=expression_statement];
33 [label="5_ require(now != pastBlockTime_tmstmp28);\n33-expression_statement-6-6", method="bug_tmstmp28()", type_label=expression_statement];
40 [label="6_ pastBlockTime_tmstmp28 = now;\n40-expression_statement-7-7", method="bug_tmstmp28()", type_label=expression_statement];
44 [label="7_ if_now % 15 == 0\n44-if-8-10", method="bug_tmstmp28()", type_label=if];
2427 [label="7_ end_if", method="bug_tmstmp28()", type_label=end_if];
51 [label="8_ msg.sender.transfer(address(this).balance);\n51-expression_statement-9-9", method="bug_tmstmp28()", type_label=expression_statement];
64 [label="11_ address payable public owner;\n64-new_variable-12-12", method="", type_label=new_variable];
69 [label="12_ uint256 bugv_tmstmp2 = block.timestamp;\n69-new_variable-13-13", method="", type_label=new_variable];
88 [label="15_ owner = msg.sender;\n88-expression_statement-16-16", method="", type_label=expression_statement];
94 [label="17_ address winner_tmstmp3;\n94-new_variable-18-18", method="", type_label=new_variable];
98 [label="18_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n98-function_definition-19-22", method="play_tmstmp3(uint startTime)", type_label=function_definition];
106 [label="19_ uint _vtime = block.timestamp;\n106-new_variable-20-20", method="play_tmstmp3(uint startTime)", type_label=new_variable];
114 [label="20_ if_startTime + (5 * 1 days) == _vtime\n114-if-21-22", method="play_tmstmp3(uint startTime)", type_label=if];
2497 [label="20_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
125 [label="21_ winner_tmstmp3 = msg.sender;\n125-expression_statement-22-22", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
131 [label="22_ modifier onlyOwner {\n       require(msg.sender == owner);\n       _;\n   }\n131-expression_statement-23-26", method="", type_label=expression_statement];
134 [label="23_ require(msg.sender == owner);\n134-expression_statement-24-24", method="", type_label=expression_statement];
143 [label="24_ _;\n143-expression_statement-25-25", method="", type_label=expression_statement];
145 [label="26_ uint256 bugv_tmstmp5 = block.timestamp;\n145-new_variable-27-27", method="", type_label=new_variable];
152 [label="27_ function transferOwnership(address payable _newOwner) public onlyOwner {\n       owner = _newOwner;\n   }\n152-function_definition-28-30", method="transferOwnership(address payable _newOwner)", type_label=function_definition];
159 [label="27_ onlyOwner\n159-expression_statement-28-28", method="transferOwnership(address payable _newOwner)", type_label=expression_statement];
162 [label="28_ owner = _newOwner;\n162-expression_statement-29-29", method="transferOwnership(address payable _newOwner)", type_label=expression_statement];
166 [label="30_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n166-function_definition-31-33", method="bug_tmstmp9()", type_label=function_definition];
175 [label="31_ return block.timestamp >= 1546300800;\n175-return-32-32", method="bug_tmstmp9()", type_label=return];
184 [label="35_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n184-function_definition-36-40", method="add(uint256 a,uint256 b)", type_label=function_definition];
201 [label="36_ uint256 c = a + b;\n201-new_variable-37-37", method="add(uint256 a,uint256 b)", type_label=new_variable];
209 [label="37_ require(c >= a, \"SafeMath: addition overflow\");\n209-expression_statement-38-38", method="add(uint256 a,uint256 b)", type_label=expression_statement];
219 [label="38_ return c;\n219-return-39-39", method="add(uint256 a,uint256 b)", type_label=return];
221 [label="40_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n221-function_definition-41-45", method="sub(uint256 a,uint256 b)", type_label=function_definition];
238 [label="41_ require(b <= a, \"SafeMath: subtraction overflow\");\n238-expression_statement-42-42", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
248 [label="42_ uint256 c = a - b;\n248-new_variable-43-43", method="sub(uint256 a,uint256 b)", type_label=new_variable];
256 [label="43_ return c;\n256-return-44-44", method="sub(uint256 a,uint256 b)", type_label=return];
258 [label="45_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n258-function_definition-46-53", method="mul(uint256 a,uint256 b)", type_label=function_definition];
275 [label="46_ if_a == 0\n275-if-47-49", method="mul(uint256 a,uint256 b)", type_label=if];
2658 [label="46_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
280 [label="47_ return 0;\n280-return-48-48", method="mul(uint256 a,uint256 b)", type_label=return];
282 [label="49_ uint256 c = a * b;\n282-new_variable-50-50", method="mul(uint256 a,uint256 b)", type_label=new_variable];
290 [label="50_ require(c / a == b, \"SafeMath: multiplication overflow\");\n290-expression_statement-51-51", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
302 [label="51_ return c;\n302-return-52-52", method="mul(uint256 a,uint256 b)", type_label=return];
304 [label="53_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n304-function_definition-54-58", method="div(uint256 a,uint256 b)", type_label=function_definition];
321 [label="54_ require(b > 0, \"SafeMath: division by zero\");\n321-expression_statement-55-55", method="div(uint256 a,uint256 b)", type_label=expression_statement];
331 [label="55_ uint256 c = a / b;\n331-new_variable-56-56", method="div(uint256 a,uint256 b)", type_label=new_variable];
339 [label="56_ return c;\n339-return-57-57", method="div(uint256 a,uint256 b)", type_label=return];
341 [label="58_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n341-function_definition-59-62", method="mod(uint256 a,uint256 b)", type_label=function_definition];
358 [label="59_ require(b != 0, \"SafeMath: modulo by zero\");\n358-expression_statement-60-60", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
368 [label="60_ return a % b;\n368-return-61-61", method="mod(uint256 a,uint256 b)", type_label=return];
383 [label="65_ address winner_tmstmp34;\n383-new_variable-66-66", method="", type_label=new_variable];
387 [label="66_ function play_tmstmp34(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp34 = msg.sender;}}\n387-function_definition-67-69", method="play_tmstmp34(uint startTime)", type_label=function_definition];
395 [label="67_ if_startTime + (5 * 1 days) == block.timestamp\n395-if-68-69", method="play_tmstmp34(uint startTime)", type_label=if];
2778 [label="67_ end_if", method="play_tmstmp34(uint startTime)", type_label=end_if];
408 [label="68_ winner_tmstmp34 = msg.sender;\n408-expression_statement-69-69", method="play_tmstmp34(uint startTime)", type_label=expression_statement];
414 [label="69_ mapping (address => transferMapping) private _balances;\n414-new_variable-70-70", method="", type_label=new_variable];
422 [label="70_ function bug_tmstmp21() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n422-function_definition-71-73", method="bug_tmstmp21()", type_label=function_definition];
431 [label="71_ return block.timestamp >= 1546300800;\n431-return-72-72", method="bug_tmstmp21()", type_label=return];
437 [label="73_ mapping (address => mapping (address => uint256)) private _allowances;\n437-new_variable-74-74", method="", type_label=new_variable];
446 [label="74_ address winner_tmstmp10;\n446-new_variable-75-75", method="", type_label=new_variable];
450 [label="75_ function play_tmstmp10(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp10 = msg.sender;}}\n450-function_definition-76-78", method="play_tmstmp10(uint startTime)", type_label=function_definition];
458 [label="76_ if_startTime + (5 * 1 days) == block.timestamp\n458-if-77-78", method="play_tmstmp10(uint startTime)", type_label=if];
2841 [label="76_ end_if", method="play_tmstmp10(uint startTime)", type_label=end_if];
471 [label="77_ winner_tmstmp10 = msg.sender;\n471-expression_statement-78-78", method="play_tmstmp10(uint startTime)", type_label=expression_statement];
477 [label="78_ uint256 private _totalSupply;\n477-new_variable-79-79", method="", type_label=new_variable];
482 [label="79_ address winner_tmstmp22;\n482-new_variable-80-80", method="", type_label=new_variable];
486 [label="80_ function play_tmstmp22(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp22 = msg.sender;}}\n486-function_definition-81-83", method="play_tmstmp22(uint startTime)", type_label=function_definition];
494 [label="81_ if_startTime + (5 * 1 days) == block.timestamp\n494-if-82-83", method="play_tmstmp22(uint startTime)", type_label=if];
2877 [label="81_ end_if", method="play_tmstmp22(uint startTime)", type_label=end_if];
507 [label="82_ winner_tmstmp22 = msg.sender;\n507-expression_statement-83-83", method="play_tmstmp22(uint startTime)", type_label=expression_statement];
513 [label="83_ uint256 public _maxTotalSupply;\n513-new_variable-84-84", method="", type_label=new_variable];
518 [label="84_ function bug_tmstmp12 () public payable {\n	uint pastBlockTime_tmstmp12;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp12);  \n        pastBlockTime_tmstmp12 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n518-function_definition-85-93", method="bug_tmstmp12()", type_label=function_definition];
523 [label="85_ uint pastBlockTime_tmstmp12;\n523-new_variable-86-86", method="bug_tmstmp12()", type_label=new_variable];
528 [label="86_ require(msg.value == 10 ether);\n528-expression_statement-87-87", method="bug_tmstmp12()", type_label=expression_statement];
538 [label="87_ require(now != pastBlockTime_tmstmp12);\n538-expression_statement-88-88", method="bug_tmstmp12()", type_label=expression_statement];
545 [label="88_ pastBlockTime_tmstmp12 = now;\n545-expression_statement-89-89", method="bug_tmstmp12()", type_label=expression_statement];
549 [label="89_ if_now % 15 == 0\n549-if-90-92", method="bug_tmstmp12()", type_label=if];
2932 [label="89_ end_if", method="bug_tmstmp12()", type_label=end_if];
556 [label="90_ msg.sender.transfer(address(this).balance);\n556-expression_statement-91-91", method="bug_tmstmp12()", type_label=expression_statement];
569 [label="93_ string private _name = \"Lollypop\";\n569-new_variable-94-94", method="", type_label=new_variable];
576 [label="94_ address winner_tmstmp11;\n576-new_variable-95-95", method="", type_label=new_variable];
580 [label="95_ function play_tmstmp11(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp11 = msg.sender;}}\n580-function_definition-96-99", method="play_tmstmp11(uint startTime)", type_label=function_definition];
588 [label="96_ uint _vtime = block.timestamp;\n588-new_variable-97-97", method="play_tmstmp11(uint startTime)", type_label=new_variable];
596 [label="97_ if_startTime + (5 * 1 days) == _vtime\n596-if-98-99", method="play_tmstmp11(uint startTime)", type_label=if];
2979 [label="97_ end_if", method="play_tmstmp11(uint startTime)", type_label=end_if];
607 [label="98_ winner_tmstmp11 = msg.sender;\n607-expression_statement-99-99", method="play_tmstmp11(uint startTime)", type_label=expression_statement];
613 [label="99_ string private _symbol = \"Lolly\";\n613-new_variable-100-100", method="", type_label=new_variable];
620 [label="100_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n620-function_definition-101-103", method="bug_tmstmp1()", type_label=function_definition];
629 [label="101_ return block.timestamp >= 1546300800;\n629-return-102-102", method="bug_tmstmp1()", type_label=return];
635 [label="103_ uint8 private _decimals= 18;\n635-new_variable-104-104", method="", type_label=new_variable];
641 [label="104_ address winner_tmstmp2;\n641-new_variable-105-105", method="", type_label=new_variable];
645 [label="105_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n645-function_definition-106-108", method="play_tmstmp2(uint startTime)", type_label=function_definition];
653 [label="106_ if_startTime + (5 * 1 days) == block.timestamp\n653-if-107-108", method="play_tmstmp2(uint startTime)", type_label=if];
3036 [label="106_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
666 [label="107_ winner_tmstmp2 = msg.sender;\n666-expression_statement-108-108", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
672 [label="108_ uint256 public maxAgeOfToken = 365 days;\n672-new_variable-109-109", method="", type_label=new_variable];
679 [label="109_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n679-function_definition-110-112", method="bug_tmstmp17()", type_label=function_definition];
688 [label="110_ return block.timestamp >= 1546300800;\n688-return-111-111", method="bug_tmstmp17()", type_label=return];
694 [label="112_ uint256  public minAgeOfToken = 1 days;\n694-new_variable-113-113", method="", type_label=new_variable];
701 [label="113_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n701-function_definition-114-116", method="bug_tmstmp37()", type_label=function_definition];
710 [label="114_ return block.timestamp >= 1546300800;\n710-return-115-115", method="bug_tmstmp37()", type_label=return];
716 [label="116_ uint256 public perDayBonus = 100;\n716-new_variable-117-117", method="", type_label=new_variable];
722 [label="117_ struct  transferMapping{\n        uint256 amount;\n        uint256 time;\n    }\n722-expression_statement-118-121", method="transferMapping()", type_label=expression_statement];
734 [label="122_ _maxTotalSupply = 1000000000 * 10 ** 18;\n734-expression_statement-123-123", method="", type_label=expression_statement];
742 [label="123_ _totalSupply =  2000000 * 10 ** 18;\n742-expression_statement-124-124", method="", type_label=expression_statement];
750 [label="124_ _balances[msg.sender].amount = _totalSupply;\n750-expression_statement-125-125", method="", type_label=expression_statement];
760 [label="125_ _balances[msg.sender].time = now;\n760-expression_statement-126-126", method="", type_label=expression_statement];
770 [label="127_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n770-function_definition-128-130", method="bug_tmstmp25()", type_label=function_definition];
779 [label="128_ return block.timestamp >= 1546300800;\n779-return-129-129", method="bug_tmstmp25()", type_label=return];
785 [label="130_ function calculateBonus(uint256 timeElasped , uint256 amount) public view  returns(uint256){\n        uint256 totalDays = timeElasped.div(minAgeOfToken);\n        if(totalDays > maxAgeOfToken){\n            totalDays = maxAgeOfToken;\n        }\n        uint256 totalBonus = (totalDays *  amount).div(perDayBonus);\n        return totalBonus;\n    }\n785-function_definition-131-138", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=function_definition];
802 [label="131_ uint256 totalDays = timeElasped.div(minAgeOfToken);\n802-new_variable-132-132", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=new_variable];
813 [label="132_ if_totalDays > maxAgeOfToken\n813-if-133-135", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=if];
3196 [label="132_ end_if", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=end_if];
818 [label="133_ totalDays = maxAgeOfToken;\n818-expression_statement-134-134", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=expression_statement];
822 [label="135_ uint256 totalBonus = (totalDays *  amount).div(perDayBonus);\n822-new_variable-136-136", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=new_variable];
836 [label="136_ return totalBonus;\n836-return-137-137", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=return];
838 [label="138_ address winner_tmstmp19;\n838-new_variable-139-139", method="", type_label=new_variable];
842 [label="139_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n842-function_definition-140-143", method="play_tmstmp19(uint startTime)", type_label=function_definition];
850 [label="140_ uint _vtime = block.timestamp;\n850-new_variable-141-141", method="play_tmstmp19(uint startTime)", type_label=new_variable];
858 [label="141_ if_startTime + (5 * 1 days) == _vtime\n858-if-142-143", method="play_tmstmp19(uint startTime)", type_label=if];
3241 [label="141_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
869 [label="142_ winner_tmstmp19 = msg.sender;\n869-expression_statement-143-143", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
875 [label="143_ function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        uint256 senderTimeElasped = now - (_balances[sender].time);\n        uint256 recipientTimeElasped = now - (_balances[recipient].time);\n        if(senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)){\n            uint256 bonus = calculateBonus(senderTimeElasped , balanceOf(sender));\n            mint(sender , bonus);\n        }\n        if(recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient){\n             uint256 bonus = calculateBonus(recipientTimeElasped , balanceOf(recipient));\n             mint(recipient , bonus);\n        }\n        _balances[sender].amount = _balances[sender].amount.sub(amount);\n        _balances[recipient].amount = _balances[recipient].amount.add(amount);\n        _balances[sender].time = now;\n        _balances[recipient].time = now;\n        emit Transfer(sender, recipient, amount);\n    }\n875-function_definition-144-162", method="_transfer(address sender,address recipient,uint256 amount)", type_label=function_definition];
891 [label="144_ require(sender != address(0), \"ERC20: transfer from the zero address\");\n891-expression_statement-145-145", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
903 [label="145_ require(recipient != address(0), \"ERC20: transfer to the zero address\");\n903-expression_statement-146-146", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
915 [label="146_ uint256 senderTimeElasped = now - (_balances[sender].time);\n915-new_variable-147-147", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
928 [label="147_ uint256 recipientTimeElasped = now - (_balances[recipient].time);\n928-new_variable-148-148", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
941 [label="148_ if_senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)\n941-if-149-152", method="_transfer(address sender,address recipient,uint256 amount)", type_label=if];
3324 [label="148_ end_if", method="_transfer(address sender,address recipient,uint256 amount)", type_label=end_if];
951 [label="149_ uint256 bonus = calculateBonus(senderTimeElasped , balanceOf(sender));\n951-new_variable-150-150", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
965 [label="150_ mint(sender , bonus);\n965-expression_statement-151-151", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
972 [label="152_ if_recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient\n972-if-153-156", method="_transfer(address sender,address recipient,uint256 amount)", type_label=if];
3355 [label="152_ end_if", method="_transfer(address sender,address recipient,uint256 amount)", type_label=end_if];
986 [label="153_ uint256 bonus = calculateBonus(recipientTimeElasped , balanceOf(recipient));\n986-new_variable-154-154", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
1000 [label="154_ mint(recipient , bonus);\n1000-expression_statement-155-155", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1007 [label="156_ _balances[sender].amount = _balances[sender].amount.sub(amount);\n1007-expression_statement-157-157", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1024 [label="157_ _balances[recipient].amount = _balances[recipient].amount.add(amount);\n1024-expression_statement-158-158", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1041 [label="158_ _balances[sender].time = now;\n1041-expression_statement-159-159", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1049 [label="159_ _balances[recipient].time = now;\n1049-expression_statement-160-160", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1065 [label="162_ address winner_tmstmp26;\n1065-new_variable-163-163", method="", type_label=new_variable];
1069 [label="163_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n1069-function_definition-164-166", method="play_tmstmp26(uint startTime)", type_label=function_definition];
1077 [label="164_ if_startTime + (5 * 1 days) == block.timestamp\n1077-if-165-166", method="play_tmstmp26(uint startTime)", type_label=if];
3460 [label="164_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
1090 [label="165_ winner_tmstmp26 = msg.sender;\n1090-expression_statement-166-166", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
1096 [label="166_ function name() public view returns (string memory) {\n        return _name;\n    }\n1096-function_definition-167-169", method="name()", type_label=function_definition];
1105 [label="167_ return _name;\n1105-return-168-168", method="name()", type_label=return];
1107 [label="169_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1107-function_definition-170-178", method="bug_tmstmp20()", type_label=function_definition];
1112 [label="170_ uint pastBlockTime_tmstmp20;\n1112-new_variable-171-171", method="bug_tmstmp20()", type_label=new_variable];
1117 [label="171_ require(msg.value == 10 ether);\n1117-expression_statement-172-172", method="bug_tmstmp20()", type_label=expression_statement];
1127 [label="172_ require(now != pastBlockTime_tmstmp20);\n1127-expression_statement-173-173", method="bug_tmstmp20()", type_label=expression_statement];
1134 [label="173_ pastBlockTime_tmstmp20 = now;\n1134-expression_statement-174-174", method="bug_tmstmp20()", type_label=expression_statement];
1138 [label="174_ if_now % 15 == 0\n1138-if-175-177", method="bug_tmstmp20()", type_label=if];
3521 [label="174_ end_if", method="bug_tmstmp20()", type_label=end_if];
1145 [label="175_ msg.sender.transfer(address(this).balance);\n1145-expression_statement-176-176", method="bug_tmstmp20()", type_label=expression_statement];
1158 [label="178_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n1158-function_definition-179-181", method="symbol()", type_label=function_definition];
1167 [label="179_ return _symbol;\n1167-return-180-180", method="symbol()", type_label=return];
1169 [label="181_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1169-function_definition-182-190", method="bug_tmstmp32()", type_label=function_definition];
1174 [label="182_ uint pastBlockTime_tmstmp32;\n1174-new_variable-183-183", method="bug_tmstmp32()", type_label=new_variable];
1179 [label="183_ require(msg.value == 10 ether);\n1179-expression_statement-184-184", method="bug_tmstmp32()", type_label=expression_statement];
1189 [label="184_ require(now != pastBlockTime_tmstmp32);\n1189-expression_statement-185-185", method="bug_tmstmp32()", type_label=expression_statement];
1196 [label="185_ pastBlockTime_tmstmp32 = now;\n1196-expression_statement-186-186", method="bug_tmstmp32()", type_label=expression_statement];
1200 [label="186_ if_now % 15 == 0\n1200-if-187-189", method="bug_tmstmp32()", type_label=if];
3583 [label="186_ end_if", method="bug_tmstmp32()", type_label=end_if];
1207 [label="187_ msg.sender.transfer(address(this).balance);\n1207-expression_statement-188-188", method="bug_tmstmp32()", type_label=expression_statement];
1220 [label="190_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n1220-function_definition-191-193", method="decimals()", type_label=function_definition];
1229 [label="191_ return _decimals;\n1229-return-192-192", method="decimals()", type_label=return];
1231 [label="193_ address winner_tmstmp38;\n1231-new_variable-194-194", method="", type_label=new_variable];
1235 [label="194_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n1235-function_definition-195-197", method="play_tmstmp38(uint startTime)", type_label=function_definition];
1243 [label="195_ if_startTime + (5 * 1 days) == block.timestamp\n1243-if-196-197", method="play_tmstmp38(uint startTime)", type_label=if];
3626 [label="195_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
1256 [label="196_ winner_tmstmp38 = msg.sender;\n1256-expression_statement-197-197", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
1262 [label="197_ modifier onlyLollypopAndOwner {\n        require(msg.sender == address(this) || msg.sender == owner);\n        _;\n    }\n1262-expression_statement-198-201", method="", type_label=expression_statement];
1265 [label="198_ require(msg.sender == address(this) || msg.sender == owner);\n1265-expression_statement-199-199", method="", type_label=expression_statement];
1282 [label="199_ _;\n1282-expression_statement-200-200", method="", type_label=expression_statement];
1284 [label="201_ uint256 bugv_tmstmp1 = block.timestamp;\n1284-new_variable-202-202", method="", type_label=new_variable];
1291 [label="202_ uint256 bugv_tmstmp3 = block.timestamp;\n1291-new_variable-203-203", method="", type_label=new_variable];
1312 [label="204_ uint256 bugv_tmstmp4 = block.timestamp;\n1312-new_variable-205-205", method="", type_label=new_variable];
1333 [label="206_ function mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account].amount = _balances[account].amount.add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n1333-function_definition-207-212", method="mint(address account,uint256 amount)", type_label=function_definition];
1345 [label="207_ require(account != address(0), \"ERC20: mint to the zero address\");\n1345-expression_statement-208-208", method="mint(address account,uint256 amount)", type_label=expression_statement];
1357 [label="208_ _totalSupply = _totalSupply.add(amount);\n1357-expression_statement-209-209", method="mint(address account,uint256 amount)", type_label=expression_statement];
1366 [label="209_ _balances[account].amount = _balances[account].amount.add(amount);\n1366-expression_statement-210-210", method="mint(address account,uint256 amount)", type_label=expression_statement];
1393 [label="212_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1393-function_definition-213-221", method="bug_tmstmp4()", type_label=function_definition];
1398 [label="213_ uint pastBlockTime_tmstmp4;\n1398-new_variable-214-214", method="bug_tmstmp4()", type_label=new_variable];
1403 [label="214_ require(msg.value == 10 ether);\n1403-expression_statement-215-215", method="bug_tmstmp4()", type_label=expression_statement];
1413 [label="215_ require(now != pastBlockTime_tmstmp4);\n1413-expression_statement-216-216", method="bug_tmstmp4()", type_label=expression_statement];
1420 [label="216_ pastBlockTime_tmstmp4 = now;\n1420-expression_statement-217-217", method="bug_tmstmp4()", type_label=expression_statement];
1424 [label="217_ if_now % 15 == 0\n1424-if-218-220", method="bug_tmstmp4()", type_label=if];
3807 [label="217_ end_if", method="bug_tmstmp4()", type_label=end_if];
1431 [label="218_ msg.sender.transfer(address(this).balance);\n1431-expression_statement-219-219", method="bug_tmstmp4()", type_label=expression_statement];
1444 [label="221_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1444-function_definition-222-224", method="totalSupply()", type_label=function_definition];
1453 [label="222_ return _totalSupply;\n1453-return-223-223", method="totalSupply()", type_label=return];
1455 [label="224_ address winner_tmstmp7;\n1455-new_variable-225-225", method="", type_label=new_variable];
1459 [label="225_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n1459-function_definition-226-229", method="play_tmstmp7(uint startTime)", type_label=function_definition];
1467 [label="226_ uint _vtime = block.timestamp;\n1467-new_variable-227-227", method="play_tmstmp7(uint startTime)", type_label=new_variable];
1475 [label="227_ if_startTime + (5 * 1 days) == _vtime\n1475-if-228-229", method="play_tmstmp7(uint startTime)", type_label=if];
3858 [label="227_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
1486 [label="228_ winner_tmstmp7 = msg.sender;\n1486-expression_statement-229-229", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
1492 [label="229_ function balanceOf(address account) public view returns (uint256) {\n        return _balances[account].amount;\n    }\n1492-function_definition-230-232", method="balanceOf(address account)", type_label=function_definition];
1505 [label="230_ return _balances[account].amount;\n1505-return-231-231", method="balanceOf(address account)", type_label=return];
1511 [label="232_ address winner_tmstmp23;\n1511-new_variable-233-233", method="", type_label=new_variable];
1515 [label="233_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n1515-function_definition-234-237", method="play_tmstmp23(uint startTime)", type_label=function_definition];
1523 [label="234_ uint _vtime = block.timestamp;\n1523-new_variable-235-235", method="play_tmstmp23(uint startTime)", type_label=new_variable];
1531 [label="235_ if_startTime + (5 * 1 days) == _vtime\n1531-if-236-237", method="play_tmstmp23(uint startTime)", type_label=if];
3914 [label="235_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
1542 [label="236_ winner_tmstmp23 = msg.sender;\n1542-expression_statement-237-237", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
1548 [label="237_ function timeOf(address account) public view returns (uint256) {\n        return _balances[account].time;\n    }\n1548-function_definition-238-240", method="timeOf(address account)", type_label=function_definition];
1561 [label="238_ return _balances[account].time;\n1561-return-239-239", method="timeOf(address account)", type_label=return];
1567 [label="240_ address winner_tmstmp14;\n1567-new_variable-241-241", method="", type_label=new_variable];
1571 [label="241_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n1571-function_definition-242-244", method="play_tmstmp14(uint startTime)", type_label=function_definition];
1579 [label="242_ if_startTime + (5 * 1 days) == block.timestamp\n1579-if-243-244", method="play_tmstmp14(uint startTime)", type_label=if];
3962 [label="242_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
1592 [label="243_ winner_tmstmp14 = msg.sender;\n1592-expression_statement-244-244", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
1598 [label="244_ function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n1598-function_definition-245-248", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
1614 [label="245_ _transfer(msg.sender, recipient, amount);\n1614-expression_statement-246-246", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1625 [label="246_ return true;\n1625-return-247-247", method="transfer(address recipient,uint256 amount)", type_label=return];
1628 [label="248_ address winner_tmstmp30;\n1628-new_variable-249-249", method="", type_label=new_variable];
1632 [label="249_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n1632-function_definition-250-252", method="play_tmstmp30(uint startTime)", type_label=function_definition];
1640 [label="250_ if_startTime + (5 * 1 days) == block.timestamp\n1640-if-251-252", method="play_tmstmp30(uint startTime)", type_label=if];
4023 [label="250_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
1653 [label="251_ winner_tmstmp30 = msg.sender;\n1653-expression_statement-252-252", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
1659 [label="252_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    require(receivers.length == amounts.length);\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n1659-function_definition-253-258", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
1673 [label="253_ require(receivers.length == amounts.length);\n1673-expression_statement-254-254", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1684 [label="254_ for(i < receivers.length;;i++)\n1684-for-255-257", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
4067 [label="254_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
1697 [label="254_ i++\n1697-expression_statement-255-255", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1700 [label="255_ transfer(receivers[i], amounts[i]);\n1700-expression_statement-256-256", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1711 [label="258_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1711-function_definition-259-267", method="bug_tmstmp8()", type_label=function_definition];
1716 [label="259_ uint pastBlockTime_tmstmp8;\n1716-new_variable-260-260", method="bug_tmstmp8()", type_label=new_variable];
1721 [label="260_ require(msg.value == 10 ether);\n1721-expression_statement-261-261", method="bug_tmstmp8()", type_label=expression_statement];
1731 [label="261_ require(now != pastBlockTime_tmstmp8);\n1731-expression_statement-262-262", method="bug_tmstmp8()", type_label=expression_statement];
1738 [label="262_ pastBlockTime_tmstmp8 = now;\n1738-expression_statement-263-263", method="bug_tmstmp8()", type_label=expression_statement];
1742 [label="263_ if_now % 15 == 0\n1742-if-264-266", method="bug_tmstmp8()", type_label=if];
4125 [label="263_ end_if", method="bug_tmstmp8()", type_label=end_if];
1749 [label="264_ msg.sender.transfer(address(this).balance);\n1749-expression_statement-265-265", method="bug_tmstmp8()", type_label=expression_statement];
1762 [label="267_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n1762-function_definition-268-270", method="allowance(address owner,address spender)", type_label=function_definition];
1779 [label="268_ return _allowances[owner][spender];\n1779-return-269-269", method="allowance(address owner,address spender)", type_label=return];
1785 [label="270_ address winner_tmstmp39;\n1785-new_variable-271-271", method="", type_label=new_variable];
1789 [label="271_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1789-function_definition-272-275", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1797 [label="272_ uint _vtime = block.timestamp;\n1797-new_variable-273-273", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1805 [label="273_ if_startTime + (5 * 1 days) == _vtime\n1805-if-274-275", method="play_tmstmp39(uint startTime)", type_label=if];
4188 [label="273_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1816 [label="274_ winner_tmstmp39 = msg.sender;\n1816-expression_statement-275-275", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1822 [label="275_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n1822-function_definition-276-279", method="approve(address spender,uint256 value)", type_label=function_definition];
1838 [label="276_ _approve(msg.sender, spender, value);\n1838-expression_statement-277-277", method="approve(address spender,uint256 value)", type_label=expression_statement];
1849 [label="277_ return true;\n1849-return-278-278", method="approve(address spender,uint256 value)", type_label=return];
1852 [label="279_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1852-function_definition-280-288", method="bug_tmstmp36()", type_label=function_definition];
1857 [label="280_ uint pastBlockTime_tmstmp36;\n1857-new_variable-281-281", method="bug_tmstmp36()", type_label=new_variable];
1862 [label="281_ require(msg.value == 10 ether);\n1862-expression_statement-282-282", method="bug_tmstmp36()", type_label=expression_statement];
1872 [label="282_ require(now != pastBlockTime_tmstmp36);\n1872-expression_statement-283-283", method="bug_tmstmp36()", type_label=expression_statement];
1879 [label="283_ pastBlockTime_tmstmp36 = now;\n1879-expression_statement-284-284", method="bug_tmstmp36()", type_label=expression_statement];
1883 [label="284_ if_now % 15 == 0\n1883-if-285-287", method="bug_tmstmp36()", type_label=if];
4266 [label="284_ end_if", method="bug_tmstmp36()", type_label=end_if];
1890 [label="285_ msg.sender.transfer(address(this).balance);\n1890-expression_statement-286-286", method="bug_tmstmp36()", type_label=expression_statement];
1903 [label="288_ function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n1903-function_definition-289-293", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
1923 [label="289_ _transfer(sender, recipient, amount);\n1923-expression_statement-290-290", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1932 [label="290_ _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n1932-expression_statement-291-291", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1954 [label="291_ return true;\n1954-return-292-292", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=return];
1957 [label="293_ address winner_tmstmp35;\n1957-new_variable-294-294", method="", type_label=new_variable];
1961 [label="294_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1961-function_definition-295-298", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1969 [label="295_ uint _vtime = block.timestamp;\n1969-new_variable-296-296", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1977 [label="296_ if_startTime + (5 * 1 days) == _vtime\n1977-if-297-298", method="play_tmstmp35(uint startTime)", type_label=if];
4360 [label="296_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1988 [label="297_ winner_tmstmp35 = msg.sender;\n1988-expression_statement-298-298", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1994 [label="298_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n1994-function_definition-299-302", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
2010 [label="299_ _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n2010-expression_statement-300-300", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
2032 [label="300_ return true;\n2032-return-301-301", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
2035 [label="302_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n2035-function_definition-303-311", method="bug_tmstmp40()", type_label=function_definition];
2040 [label="303_ uint pastBlockTime_tmstmp40;\n2040-new_variable-304-304", method="bug_tmstmp40()", type_label=new_variable];
2045 [label="304_ require(msg.value == 10 ether);\n2045-expression_statement-305-305", method="bug_tmstmp40()", type_label=expression_statement];
2055 [label="305_ require(now != pastBlockTime_tmstmp40);\n2055-expression_statement-306-306", method="bug_tmstmp40()", type_label=expression_statement];
2062 [label="306_ pastBlockTime_tmstmp40 = now;\n2062-expression_statement-307-307", method="bug_tmstmp40()", type_label=expression_statement];
2066 [label="307_ if_now % 15 == 0\n2066-if-308-310", method="bug_tmstmp40()", type_label=if];
4449 [label="307_ end_if", method="bug_tmstmp40()", type_label=end_if];
2073 [label="308_ msg.sender.transfer(address(this).balance);\n2073-expression_statement-309-309", method="bug_tmstmp40()", type_label=expression_statement];
2086 [label="311_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n2086-function_definition-312-315", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
2102 [label="312_ _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n2102-expression_statement-313-313", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
2124 [label="313_ return true;\n2124-return-314-314", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
2127 [label="315_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2127-function_definition-316-318", method="bug_tmstmp33()", type_label=function_definition];
2136 [label="316_ return block.timestamp >= 1546300800;\n2136-return-317-317", method="bug_tmstmp33()", type_label=return];
2142 [label="318_ function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account].amount = _balances[account].amount.sub(value);\n        emit Transfer(account, address(0), value);\n    }\n2142-function_definition-319-324", method="_burn(address account,uint256 value)", type_label=function_definition];
2154 [label="319_ require(account != address(0), \"ERC20: burn from the zero address\");\n2154-expression_statement-320-320", method="_burn(address account,uint256 value)", type_label=expression_statement];
2166 [label="320_ _totalSupply = _totalSupply.sub(value);\n2166-expression_statement-321-321", method="_burn(address account,uint256 value)", type_label=expression_statement];
2175 [label="321_ _balances[account].amount = _balances[account].amount.sub(value);\n2175-expression_statement-322-322", method="_burn(address account,uint256 value)", type_label=expression_statement];
2202 [label="324_ address winner_tmstmp27;\n2202-new_variable-325-325", method="", type_label=new_variable];
2206 [label="325_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n2206-function_definition-326-329", method="play_tmstmp27(uint startTime)", type_label=function_definition];
2214 [label="326_ uint _vtime = block.timestamp;\n2214-new_variable-327-327", method="play_tmstmp27(uint startTime)", type_label=new_variable];
2222 [label="327_ if_startTime + (5 * 1 days) == _vtime\n2222-if-328-329", method="play_tmstmp27(uint startTime)", type_label=if];
4605 [label="327_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
2233 [label="328_ winner_tmstmp27 = msg.sender;\n2233-expression_statement-329-329", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
2239 [label="329_ function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n2239-function_definition-330-335", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
2255 [label="330_ require(owner != address(0), \"ERC20: approve from the zero address\");\n2255-expression_statement-331-331", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
2267 [label="331_ require(spender != address(0), \"ERC20: approve to the zero address\");\n2267-expression_statement-332-332", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
2279 [label="332_ _allowances[owner][spender] = value;\n2279-expression_statement-333-333", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
2295 [label="335_ address winner_tmstmp31;\n2295-new_variable-336-336", method="", type_label=new_variable];
2299 [label="336_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n2299-function_definition-337-340", method="play_tmstmp31(uint startTime)", type_label=function_definition];
2307 [label="337_ uint _vtime = block.timestamp;\n2307-new_variable-338-338", method="play_tmstmp31(uint startTime)", type_label=new_variable];
2315 [label="338_ if_startTime + (5 * 1 days) == _vtime\n2315-if-339-340", method="play_tmstmp31(uint startTime)", type_label=if];
4698 [label="338_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
2326 [label="339_ winner_tmstmp31 = msg.sender;\n2326-expression_statement-340-340", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
2332 [label="340_ function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n2332-function_definition-341-344", method="_burnFrom(address account,uint256 amount)", type_label=function_definition];
2344 [label="341_ _burn(account, amount);\n2344-expression_statement-342-342", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
2351 [label="342_ _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n2351-expression_statement-343-343", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
2373 [label="344_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2373-function_definition-345-347", method="bug_tmstmp13()", type_label=function_definition];
2382 [label="345_ return block.timestamp >= 1546300800;\n2382-return-346-346", method="bug_tmstmp13()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
18 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
40 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 51  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
44 -> 2427  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2427 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 2427  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
64 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 125  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
114 -> 2497  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2497 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
125 -> 2497  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
131 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
152 -> 162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
184 -> 201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
219 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
221 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
248 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
256 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
258 -> 275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
275 -> 280  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
275 -> 2658  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2658 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 2658  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
280 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
282 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
290 -> 302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
304 -> 321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
341 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
358 -> 368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
387 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 408  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
395 -> 2778  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2778 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 2778  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
422 -> 431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
431 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
437 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 471  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
458 -> 2841  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2841 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 2841  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
477 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 507  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
494 -> 2877  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2877 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 2877  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
518 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
538 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 556  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
549 -> 2932  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2932 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 2932  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
569 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 607  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
596 -> 2979  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2979 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 2979  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
620 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
635 -> 641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
645 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 666  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
653 -> 3036  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3036 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 3036  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
679 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
701 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
716 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
779 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
785 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 818  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
813 -> 3196  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3196 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 3196  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
822 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
842 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 869  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
858 -> 3241  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3241 -> 875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 3241  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
875 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
903 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
915 -> 928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
941 -> 951  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
941 -> 3324  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3324 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
951 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 3324  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
972 -> 986  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
972 -> 3355  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3355 -> 1007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 3355  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1007 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1024 -> 1041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1041 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1069 -> 1077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 1090  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1077 -> 3460  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3460 -> 1096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 3460  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1096 -> 1105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1105 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1107 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 1134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1134 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1145  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1138 -> 3521  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3521 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1145 -> 3521  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1158 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1169 -> 1174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1174 -> 1179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1179 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1196 -> 1200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1200 -> 1207  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1200 -> 3583  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3583 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1207 -> 3583  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1220 -> 1229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1229 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1235 -> 1243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1243 -> 1256  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1243 -> 3626  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3626 -> 1262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 3626  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1262 -> 1284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1284 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1333 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1345 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1357 -> 1366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1393 -> 1398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1398 -> 1403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1413 -> 1420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1420 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1424 -> 1431  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1424 -> 3807  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3807 -> 1444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1431 -> 3807  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1444 -> 1453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1453 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1459 -> 1467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 1475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1475 -> 1486  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1475 -> 3858  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3858 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 3858  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1492 -> 1505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1505 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1515 -> 1523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1523 -> 1531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1542  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1531 -> 3914  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3914 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 3914  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1548 -> 1561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1561 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1571 -> 1579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1579 -> 1592  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1579 -> 3962  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3962 -> 1598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1592 -> 3962  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1598 -> 1614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1614 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1632 -> 1640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 1653  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1640 -> 4023  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4023 -> 1659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 4023  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1659 -> 1673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1673 -> 1684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1684 -> 1700  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1684 -> 4067  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4067 -> 1711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1697 -> 1684  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1700 -> 1697  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1711 -> 1716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1716 -> 1721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1721 -> 1731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1731 -> 1738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1738 -> 1742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1742 -> 1749  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1742 -> 4125  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4125 -> 1762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1749 -> 4125  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1762 -> 1779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1779 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1789 -> 1797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1797 -> 1805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1805 -> 1816  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1805 -> 4188  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4188 -> 1822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1816 -> 4188  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1822 -> 1838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1838 -> 1849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1849 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1852 -> 1857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1857 -> 1862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1862 -> 1872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1872 -> 1879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1879 -> 1883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1883 -> 1890  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1883 -> 4266  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4266 -> 1903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1890 -> 4266  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1903 -> 1923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1923 -> 1932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1932 -> 1954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1954 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1961 -> 1969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1969 -> 1977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1977 -> 1988  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1977 -> 4360  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4360 -> 1994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1988 -> 4360  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1994 -> 2010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2010 -> 2032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2032 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2035 -> 2040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2040 -> 2045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2045 -> 2055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2055 -> 2062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2062 -> 2066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2066 -> 2073  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2066 -> 4449  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4449 -> 2086  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2073 -> 4449  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2086 -> 2102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2102 -> 2124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2124 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2127 -> 2136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2136 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2142 -> 2154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2154 -> 2166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2166 -> 2175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2206 -> 2214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2214 -> 2222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2222 -> 2233  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2222 -> 4605  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4605 -> 2239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2233 -> 4605  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2239 -> 2255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2255 -> 2267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2267 -> 2279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2299 -> 2307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2307 -> 2315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2315 -> 2326  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2315 -> 4698  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4698 -> 2332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2326 -> 4698  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2332 -> 2344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2344 -> 2351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2373 -> 2382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2382 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
