digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n50-function_definition-8-12", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ require(b <= a, \"SafeMath: subtraction overflow\");\n67-expression_statement-9-9", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
77 [label="9_ uint256 c = a - b;\n77-new_variable-10-10", method="sub(uint256 a,uint256 b)", type_label=new_variable];
85 [label="10_ return c;\n85-return-11-11", method="sub(uint256 a,uint256 b)", type_label=return];
87 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n87-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
104 [label="13_ if_a == 0\n104-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
1651 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
109 [label="14_ return 0;\n109-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
111 [label="16_ uint256 c = a * b;\n111-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
119 [label="17_ require(c / a == b, \"SafeMath: multiplication overflow\");\n119-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
131 [label="18_ return c;\n131-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
133 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n133-function_definition-21-25", method="div(uint256 a,uint256 b)", type_label=function_definition];
150 [label="21_ require(b > 0, \"SafeMath: division by zero\");\n150-expression_statement-22-22", method="div(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="22_ uint256 c = a / b;\n160-new_variable-23-23", method="div(uint256 a,uint256 b)", type_label=new_variable];
168 [label="23_ return c;\n168-return-24-24", method="div(uint256 a,uint256 b)", type_label=return];
170 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n170-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
187 [label="26_ require(b != 0, \"SafeMath: modulo by zero\");\n187-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
197 [label="27_ return a % b;\n197-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
204 [label="31_ function totalSupply() external view returns (uint256);\n204-function_definition-32-32", method="totalSupply()", type_label=function_definition];
212 [label="32_ function balanceOf(address account) external view returns (uint256);\n212-function_definition-33-33", method="balanceOf(address account)", type_label=function_definition];
224 [label="33_ function transfer(address recipient, uint256 amount) external returns (bool);\n224-function_definition-34-34", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
239 [label="34_ function allowance(address owner, address spender) external view returns (uint256);\n239-function_definition-35-35", method="allowance(address owner,address spender)", type_label=function_definition];
255 [label="35_ function approve(address spender, uint256 amount) external returns (bool);\n255-function_definition-36-36", method="approve(address spender,uint256 amount)", type_label=function_definition];
270 [label="36_ function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n270-function_definition-37-37", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
328 [label="42_ address winner_tmstmp26;\n328-new_variable-43-43", method="", type_label=new_variable];
332 [label="43_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n332-function_definition-44-46", method="play_tmstmp26(uint startTime)", type_label=function_definition];
340 [label="44_ if_startTime + (5 * 1 days) == block.timestamp\n340-if-45-46", method="play_tmstmp26(uint startTime)", type_label=if];
1887 [label="44_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
353 [label="45_ winner_tmstmp26 = msg.sender;\n353-expression_statement-46-46", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
359 [label="46_ mapping (address => uint256) private _balances;\n359-new_variable-47-47", method="", type_label=new_variable];
366 [label="47_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n366-function_definition-48-56", method="bug_tmstmp20()", type_label=function_definition];
371 [label="48_ uint pastBlockTime_tmstmp20;\n371-new_variable-49-49", method="bug_tmstmp20()", type_label=new_variable];
376 [label="49_ require(msg.value == 10 ether);\n376-expression_statement-50-50", method="bug_tmstmp20()", type_label=expression_statement];
386 [label="50_ require(now != pastBlockTime_tmstmp20);\n386-expression_statement-51-51", method="bug_tmstmp20()", type_label=expression_statement];
393 [label="51_ pastBlockTime_tmstmp20 = now;\n393-expression_statement-52-52", method="bug_tmstmp20()", type_label=expression_statement];
397 [label="52_ if_now % 15 == 0\n397-if-53-55", method="bug_tmstmp20()", type_label=if];
1944 [label="52_ end_if", method="bug_tmstmp20()", type_label=end_if];
404 [label="53_ msg.sender.transfer(address(this).balance);\n404-expression_statement-54-54", method="bug_tmstmp20()", type_label=expression_statement];
417 [label="56_ mapping (address => mapping (address => uint256)) private _allowances;\n417-new_variable-57-57", method="", type_label=new_variable];
426 [label="57_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n426-function_definition-58-66", method="bug_tmstmp32()", type_label=function_definition];
431 [label="58_ uint pastBlockTime_tmstmp32;\n431-new_variable-59-59", method="bug_tmstmp32()", type_label=new_variable];
436 [label="59_ require(msg.value == 10 ether);\n436-expression_statement-60-60", method="bug_tmstmp32()", type_label=expression_statement];
446 [label="60_ require(now != pastBlockTime_tmstmp32);\n446-expression_statement-61-61", method="bug_tmstmp32()", type_label=expression_statement];
453 [label="61_ pastBlockTime_tmstmp32 = now;\n453-expression_statement-62-62", method="bug_tmstmp32()", type_label=expression_statement];
457 [label="62_ if_now % 15 == 0\n457-if-63-65", method="bug_tmstmp32()", type_label=if];
2004 [label="62_ end_if", method="bug_tmstmp32()", type_label=end_if];
464 [label="63_ msg.sender.transfer(address(this).balance);\n464-expression_statement-64-64", method="bug_tmstmp32()", type_label=expression_statement];
477 [label="66_ uint256 private _totalSupply;\n477-new_variable-67-67", method="", type_label=new_variable];
482 [label="67_ address winner_tmstmp38;\n482-new_variable-68-68", method="", type_label=new_variable];
486 [label="68_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n486-function_definition-69-71", method="play_tmstmp38(uint startTime)", type_label=function_definition];
494 [label="69_ if_startTime + (5 * 1 days) == block.timestamp\n494-if-70-71", method="play_tmstmp38(uint startTime)", type_label=if];
2041 [label="69_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
507 [label="70_ winner_tmstmp38 = msg.sender;\n507-expression_statement-71-71", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
513 [label="71_ string private _name;\n513-new_variable-72-72", method="", type_label=new_variable];
518 [label="72_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n518-function_definition-73-81", method="bug_tmstmp4()", type_label=function_definition];
523 [label="73_ uint pastBlockTime_tmstmp4;\n523-new_variable-74-74", method="bug_tmstmp4()", type_label=new_variable];
528 [label="74_ require(msg.value == 10 ether);\n528-expression_statement-75-75", method="bug_tmstmp4()", type_label=expression_statement];
538 [label="75_ require(now != pastBlockTime_tmstmp4);\n538-expression_statement-76-76", method="bug_tmstmp4()", type_label=expression_statement];
545 [label="76_ pastBlockTime_tmstmp4 = now;\n545-expression_statement-77-77", method="bug_tmstmp4()", type_label=expression_statement];
549 [label="77_ if_now % 15 == 0\n549-if-78-80", method="bug_tmstmp4()", type_label=if];
2096 [label="77_ end_if", method="bug_tmstmp4()", type_label=end_if];
556 [label="78_ msg.sender.transfer(address(this).balance);\n556-expression_statement-79-79", method="bug_tmstmp4()", type_label=expression_statement];
569 [label="81_ string private _symbol;\n569-new_variable-82-82", method="", type_label=new_variable];
574 [label="82_ address winner_tmstmp7;\n574-new_variable-83-83", method="", type_label=new_variable];
578 [label="83_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n578-function_definition-84-87", method="play_tmstmp7(uint startTime)", type_label=function_definition];
586 [label="84_ uint _vtime = block.timestamp;\n586-new_variable-85-85", method="play_tmstmp7(uint startTime)", type_label=new_variable];
594 [label="85_ if_startTime + (5 * 1 days) == _vtime\n594-if-86-87", method="play_tmstmp7(uint startTime)", type_label=if];
2141 [label="85_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
605 [label="86_ winner_tmstmp7 = msg.sender;\n605-expression_statement-87-87", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
611 [label="87_ uint8 private _decimals;\n611-new_variable-88-88", method="", type_label=new_variable];
618 [label="89_ _name = \"UBBC Token\";\n618-expression_statement-90-90", method="", type_label=expression_statement];
623 [label="90_ _symbol = \"UBBC\";\n623-expression_statement-91-91", method="", type_label=expression_statement];
628 [label="91_ _decimals = 18;\n628-expression_statement-92-92", method="", type_label=expression_statement];
632 [label="92_ _totalSupply = 260000000 ether;\n632-expression_statement-93-93", method="", type_label=expression_statement];
637 [label="93_ _balances[0x0e475cd2c1f8222868cf85B4f97D7EB70fB3ffD3] = _totalSupply;\n637-expression_statement-94-94", method="", type_label=expression_statement];
643 [label="95_ address winner_tmstmp23;\n643-new_variable-96-96", method="", type_label=new_variable];
647 [label="96_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n647-function_definition-97-100", method="play_tmstmp23(uint startTime)", type_label=function_definition];
655 [label="97_ uint _vtime = block.timestamp;\n655-new_variable-98-98", method="play_tmstmp23(uint startTime)", type_label=new_variable];
663 [label="98_ if_startTime + (5 * 1 days) == _vtime\n663-if-99-100", method="play_tmstmp23(uint startTime)", type_label=if];
2210 [label="98_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
674 [label="99_ winner_tmstmp23 = msg.sender;\n674-expression_statement-100-100", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
680 [label="100_ uint256 bugv_tmstmp3 = block.timestamp;\n680-new_variable-101-101", method="", type_label=new_variable];
701 [label="102_ uint256 bugv_tmstmp4 = block.timestamp;\n701-new_variable-103-103", method="", type_label=new_variable];
722 [label="104_ function name() public view returns (string memory) {\n        return _name;\n    }\n722-function_definition-105-107", method="name()", type_label=function_definition];
731 [label="105_ return _name;\n731-return-106-106", method="name()", type_label=return];
733 [label="107_ address winner_tmstmp14;\n733-new_variable-108-108", method="", type_label=new_variable];
737 [label="108_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n737-function_definition-109-111", method="play_tmstmp14(uint startTime)", type_label=function_definition];
745 [label="109_ if_startTime + (5 * 1 days) == block.timestamp\n745-if-110-111", method="play_tmstmp14(uint startTime)", type_label=if];
2292 [label="109_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
758 [label="110_ winner_tmstmp14 = msg.sender;\n758-expression_statement-111-111", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
764 [label="111_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n764-function_definition-112-114", method="symbol()", type_label=function_definition];
773 [label="112_ return _symbol;\n773-return-113-113", method="symbol()", type_label=return];
775 [label="114_ address winner_tmstmp30;\n775-new_variable-115-115", method="", type_label=new_variable];
779 [label="115_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n779-function_definition-116-118", method="play_tmstmp30(uint startTime)", type_label=function_definition];
787 [label="116_ if_startTime + (5 * 1 days) == block.timestamp\n787-if-117-118", method="play_tmstmp30(uint startTime)", type_label=if];
2334 [label="116_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
800 [label="117_ winner_tmstmp30 = msg.sender;\n800-expression_statement-118-118", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
806 [label="118_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n806-function_definition-119-121", method="decimals()", type_label=function_definition];
815 [label="119_ return _decimals;\n815-return-120-120", method="decimals()", type_label=return];
817 [label="121_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n817-function_definition-122-130", method="bug_tmstmp8()", type_label=function_definition];
822 [label="122_ uint pastBlockTime_tmstmp8;\n822-new_variable-123-123", method="bug_tmstmp8()", type_label=new_variable];
827 [label="123_ require(msg.value == 10 ether);\n827-expression_statement-124-124", method="bug_tmstmp8()", type_label=expression_statement];
837 [label="124_ require(now != pastBlockTime_tmstmp8);\n837-expression_statement-125-125", method="bug_tmstmp8()", type_label=expression_statement];
844 [label="125_ pastBlockTime_tmstmp8 = now;\n844-expression_statement-126-126", method="bug_tmstmp8()", type_label=expression_statement];
848 [label="126_ if_now % 15 == 0\n848-if-127-129", method="bug_tmstmp8()", type_label=if];
2395 [label="126_ end_if", method="bug_tmstmp8()", type_label=end_if];
855 [label="127_ msg.sender.transfer(address(this).balance);\n855-expression_statement-128-128", method="bug_tmstmp8()", type_label=expression_statement];
868 [label="130_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n868-function_definition-131-133", method="totalSupply()", type_label=function_definition];
877 [label="131_ return _totalSupply;\n877-return-132-132", method="totalSupply()", type_label=return];
879 [label="133_ address winner_tmstmp39;\n879-new_variable-134-134", method="", type_label=new_variable];
883 [label="134_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n883-function_definition-135-138", method="play_tmstmp39(uint startTime)", type_label=function_definition];
891 [label="135_ uint _vtime = block.timestamp;\n891-new_variable-136-136", method="play_tmstmp39(uint startTime)", type_label=new_variable];
899 [label="136_ if_startTime + (5 * 1 days) == _vtime\n899-if-137-138", method="play_tmstmp39(uint startTime)", type_label=if];
2446 [label="136_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
910 [label="137_ winner_tmstmp39 = msg.sender;\n910-expression_statement-138-138", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
916 [label="138_ function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n916-function_definition-139-141", method="balanceOf(address account)", type_label=function_definition];
929 [label="139_ return _balances[account];\n929-return-140-140", method="balanceOf(address account)", type_label=return];
933 [label="141_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n933-function_definition-142-150", method="bug_tmstmp36()", type_label=function_definition];
938 [label="142_ uint pastBlockTime_tmstmp36;\n938-new_variable-143-143", method="bug_tmstmp36()", type_label=new_variable];
943 [label="143_ require(msg.value == 10 ether);\n943-expression_statement-144-144", method="bug_tmstmp36()", type_label=expression_statement];
953 [label="144_ require(now != pastBlockTime_tmstmp36);\n953-expression_statement-145-145", method="bug_tmstmp36()", type_label=expression_statement];
960 [label="145_ pastBlockTime_tmstmp36 = now;\n960-expression_statement-146-146", method="bug_tmstmp36()", type_label=expression_statement];
964 [label="146_ if_now % 15 == 0\n964-if-147-149", method="bug_tmstmp36()", type_label=if];
2511 [label="146_ end_if", method="bug_tmstmp36()", type_label=end_if];
971 [label="147_ msg.sender.transfer(address(this).balance);\n971-expression_statement-148-148", method="bug_tmstmp36()", type_label=expression_statement];
984 [label="150_ function transfer(address recipient, uint256 amount) public  returns (bool) {\n         _transfer(msg.sender, recipient, amount);\n         return true;\n    }\n984-function_definition-151-154", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
1000 [label="151_ _transfer(msg.sender, recipient, amount);\n1000-expression_statement-152-152", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1011 [label="152_ return true;\n1011-return-153-153", method="transfer(address recipient,uint256 amount)", type_label=return];
1014 [label="154_ address winner_tmstmp35;\n1014-new_variable-155-155", method="", type_label=new_variable];
1018 [label="155_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1018-function_definition-156-159", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1026 [label="156_ uint _vtime = block.timestamp;\n1026-new_variable-157-157", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1034 [label="157_ if_startTime + (5 * 1 days) == _vtime\n1034-if-158-159", method="play_tmstmp35(uint startTime)", type_label=if];
2581 [label="157_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1045 [label="158_ winner_tmstmp35 = msg.sender;\n1045-expression_statement-159-159", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1051 [label="159_ function allowance(address owner, address spender) public  view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n1051-function_definition-160-162", method="allowance(address owner,address spender)", type_label=function_definition];
1068 [label="160_ return _allowances[owner][spender];\n1068-return-161-161", method="allowance(address owner,address spender)", type_label=return];
1074 [label="162_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1074-function_definition-163-171", method="bug_tmstmp40()", type_label=function_definition];
1079 [label="163_ uint pastBlockTime_tmstmp40;\n1079-new_variable-164-164", method="bug_tmstmp40()", type_label=new_variable];
1084 [label="164_ require(msg.value == 10 ether);\n1084-expression_statement-165-165", method="bug_tmstmp40()", type_label=expression_statement];
1094 [label="165_ require(now != pastBlockTime_tmstmp40);\n1094-expression_statement-166-166", method="bug_tmstmp40()", type_label=expression_statement];
1101 [label="166_ pastBlockTime_tmstmp40 = now;\n1101-expression_statement-167-167", method="bug_tmstmp40()", type_label=expression_statement];
1105 [label="167_ if_now % 15 == 0\n1105-if-168-170", method="bug_tmstmp40()", type_label=if];
2652 [label="167_ end_if", method="bug_tmstmp40()", type_label=end_if];
1112 [label="168_ msg.sender.transfer(address(this).balance);\n1112-expression_statement-169-169", method="bug_tmstmp40()", type_label=expression_statement];
1125 [label="171_ function approve(address spender, uint256 value) public  returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n1125-function_definition-172-175", method="approve(address spender,uint256 value)", type_label=function_definition];
1141 [label="172_ _approve(msg.sender, spender, value);\n1141-expression_statement-173-173", method="approve(address spender,uint256 value)", type_label=expression_statement];
1152 [label="173_ return true;\n1152-return-174-174", method="approve(address spender,uint256 value)", type_label=return];
1155 [label="175_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1155-function_definition-176-178", method="bug_tmstmp33()", type_label=function_definition];
1164 [label="176_ return block.timestamp >= 1546300800;\n1164-return-177-177", method="bug_tmstmp33()", type_label=return];
1170 [label="178_ function transferFrom(address sender, address recipient, uint256 amount) public  returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n1170-function_definition-179-183", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
1190 [label="179_ _transfer(sender, recipient, amount);\n1190-expression_statement-180-180", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1199 [label="180_ _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n1199-expression_statement-181-181", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1221 [label="181_ return true;\n1221-return-182-182", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=return];
1224 [label="183_ address winner_tmstmp27;\n1224-new_variable-184-184", method="", type_label=new_variable];
1228 [label="184_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1228-function_definition-185-188", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1236 [label="185_ uint _vtime = block.timestamp;\n1236-new_variable-186-186", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1244 [label="186_ if_startTime + (5 * 1 days) == _vtime\n1244-if-187-188", method="play_tmstmp27(uint startTime)", type_label=if];
2791 [label="186_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1255 [label="187_ winner_tmstmp27 = msg.sender;\n1255-expression_statement-188-188", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1261 [label="188_ function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n1261-function_definition-189-192", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
1277 [label="189_ _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n1277-expression_statement-190-190", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1299 [label="190_ return true;\n1299-return-191-191", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
1302 [label="192_ address winner_tmstmp31;\n1302-new_variable-193-193", method="", type_label=new_variable];
1306 [label="193_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1306-function_definition-194-197", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1314 [label="194_ uint _vtime = block.timestamp;\n1314-new_variable-195-195", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1322 [label="195_ if_startTime + (5 * 1 days) == _vtime\n1322-if-196-197", method="play_tmstmp31(uint startTime)", type_label=if];
2869 [label="195_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1333 [label="196_ winner_tmstmp31 = msg.sender;\n1333-expression_statement-197-197", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1339 [label="197_ function decreaseAllowance(address spender, uint256 subtractedValue) public  returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n1339-function_definition-198-201", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
1355 [label="198_ _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n1355-expression_statement-199-199", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1377 [label="199_ return true;\n1377-return-200-200", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
1380 [label="201_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1380-function_definition-202-204", method="bug_tmstmp13()", type_label=function_definition];
1389 [label="202_ return block.timestamp >= 1546300800;\n1389-return-203-203", method="bug_tmstmp13()", type_label=return];
1395 [label="204_ function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n1395-function_definition-205-211", method="_transfer(address sender,address recipient,uint256 amount)", type_label=function_definition];
1411 [label="205_ require(sender != address(0), \"ERC20: transfer from the zero address\");\n1411-expression_statement-206-206", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1423 [label="206_ require(recipient != address(0), \"ERC20: transfer to the zero address\");\n1423-expression_statement-207-207", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1435 [label="207_ _balances[sender] = _balances[sender].sub(amount);\n1435-expression_statement-208-208", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1448 [label="208_ _balances[recipient] = _balances[recipient].add(amount);\n1448-expression_statement-209-209", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1469 [label="211_ uint256 bugv_tmstmp5 = block.timestamp;\n1469-new_variable-212-212", method="", type_label=new_variable];
1476 [label="212_ function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n1476-function_definition-213-218", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
1492 [label="213_ require(owner != address(0), \"ERC20: approve from the zero address\");\n1492-expression_statement-214-214", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1504 [label="214_ require(spender != address(0), \"ERC20: approve to the zero address\");\n1504-expression_statement-215-215", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1516 [label="215_ _allowances[owner][spender] = value;\n1516-expression_statement-216-216", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1532 [label="218_ uint256 bugv_tmstmp1 = block.timestamp;\n1532-new_variable-219-219", method="", type_label=new_variable];
1545 [label="222_ uint256 bugv_tmstmp2 = block.timestamp;\n1545-new_variable-223-223", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
87 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 1651  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1651 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 1651  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
332 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 353  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
340 -> 1887  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1887 -> 359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 1887  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
366 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 404  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
397 -> 1944  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1944 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 1944  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
426 -> 431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
431 -> 436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 464  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
457 -> 2004  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2004 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 2004  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
477 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 507  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
494 -> 2041  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2041 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 2041  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
518 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
538 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 556  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
549 -> 2096  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2096 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 2096  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
569 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 605  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
594 -> 2141  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2141 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
605 -> 2141  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
618 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
623 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
628 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
655 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 674  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
663 -> 2210  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2210 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 2210  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
722 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
737 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 758  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
745 -> 2292  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2292 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 2292  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
764 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
779 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 800  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
787 -> 2334  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2334 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
800 -> 2334  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
806 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
817 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 827  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
827 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
848 -> 855  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
848 -> 2395  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2395 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 2395  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
868 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
883 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
891 -> 899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
899 -> 910  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
899 -> 2446  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2446 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 2446  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
916 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
933 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
938 -> 943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
953 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
964 -> 971  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
964 -> 2511  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2511 -> 984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
971 -> 2511  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
984 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1011 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1018 -> 1026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1026 -> 1034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 1045  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1034 -> 2581  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2581 -> 1051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1045 -> 2581  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1051 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1074 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1079 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1094 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 1105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1105 -> 1112  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1105 -> 2652  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2652 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 2652  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1125 -> 1141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1152 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1155 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1164 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1170 -> 1190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1190 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 1221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1221 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1228 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 1244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 1255  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1244 -> 2791  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2791 -> 1261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1255 -> 2791  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1261 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1277 -> 1299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1299 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1306 -> 1314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1314 -> 1322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1333  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1322 -> 2869  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2869 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1333 -> 2869  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1339 -> 1355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1355 -> 1377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1377 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1380 -> 1389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1389 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1395 -> 1411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1411 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 1435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1435 -> 1448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1476 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1492 -> 1504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 1516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
