digraph  {
13 [label="3_ address winner_tmstmp2;\n13-new_variable-4-4", method="", type_label=new_variable];
17 [label="4_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n17-function_definition-5-7", method="play_tmstmp2(uint startTime)", type_label=function_definition];
25 [label="5_ if_startTime + (5 * 1 days) == block.timestamp\n25-if-6-7", method="play_tmstmp2(uint startTime)", type_label=if];
1428 [label="5_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
38 [label="6_ winner_tmstmp2 = msg.sender;\n38-expression_statement-7-7", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
44 [label="7_ bool private stopped;\n44-new_variable-8-8", method="", type_label=new_variable];
49 [label="8_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n49-function_definition-9-11", method="bug_tmstmp17()", type_label=function_definition];
58 [label="9_ return block.timestamp >= 1546300800;\n58-return-10-10", method="bug_tmstmp17()", type_label=return];
64 [label="11_ address private _owner;\n64-new_variable-12-12", method="", type_label=new_variable];
69 [label="12_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n69-function_definition-13-15", method="bug_tmstmp37()", type_label=function_definition];
78 [label="13_ return block.timestamp >= 1546300800;\n78-return-14-14", method="bug_tmstmp37()", type_label=return];
84 [label="15_ address private _master;\n84-new_variable-16-16", method="", type_label=new_variable];
89 [label="16_ address winner_tmstmp31;\n89-new_variable-17-17", method="", type_label=new_variable];
93 [label="17_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n93-function_definition-18-21", method="play_tmstmp31(uint startTime)", type_label=function_definition];
101 [label="18_ uint _vtime = block.timestamp;\n101-new_variable-19-19", method="play_tmstmp31(uint startTime)", type_label=new_variable];
109 [label="19_ if_startTime + (5 * 1 days) == _vtime\n109-if-20-21", method="play_tmstmp31(uint startTime)", type_label=if];
1512 [label="19_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
120 [label="20_ winner_tmstmp31 = msg.sender;\n120-expression_statement-21-21", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
128 [label="22_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n128-function_definition-23-25", method="bug_tmstmp13()", type_label=function_definition];
137 [label="23_ return block.timestamp >= 1546300800;\n137-return-24-24", method="bug_tmstmp13()", type_label=return];
145 [label="26_ uint256 bugv_tmstmp5 = block.timestamp;\n145-new_variable-27-27", method="", type_label=new_variable];
162 [label="28_ uint256 bugv_tmstmp1 = block.timestamp;\n162-new_variable-29-29", method="", type_label=new_variable];
181 [label="32_ stopped = false;\n181-expression_statement-33-33", method="", type_label=expression_statement];
186 [label="33_ _owner = msg.sender;\n186-expression_statement-34-34", method="", type_label=expression_statement];
192 [label="34_ _master = msg.sender;\n192-expression_statement-35-35", method="", type_label=expression_statement];
214 [label="38_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n214-function_definition-39-41", method="bug_tmstmp9()", type_label=function_definition];
223 [label="39_ return block.timestamp >= 1546300800;\n223-return-40-40", method="bug_tmstmp9()", type_label=return];
229 [label="41_ function owner() public view returns (address)\n    {\n        return _owner;\n    }\n229-function_definition-42-45", method="owner()", type_label=function_definition];
238 [label="43_ return _owner;\n238-return-44-44", method="owner()", type_label=return];
240 [label="45_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n240-function_definition-46-48", method="bug_tmstmp25()", type_label=function_definition];
249 [label="46_ return block.timestamp >= 1546300800;\n249-return-47-47", method="bug_tmstmp25()", type_label=return];
255 [label="48_ function master() public view returns (address)\n    {\n        return _master;\n    }\n255-function_definition-49-52", method="master()", type_label=function_definition];
264 [label="50_ return _master;\n264-return-51-51", method="master()", type_label=return];
266 [label="52_ address winner_tmstmp19;\n266-new_variable-53-53", method="", type_label=new_variable];
270 [label="53_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n270-function_definition-54-57", method="play_tmstmp19(uint startTime)", type_label=function_definition];
278 [label="54_ uint _vtime = block.timestamp;\n278-new_variable-55-55", method="play_tmstmp19(uint startTime)", type_label=new_variable];
286 [label="55_ if_startTime + (5 * 1 days) == _vtime\n286-if-56-57", method="play_tmstmp19(uint startTime)", type_label=if];
1689 [label="55_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
297 [label="56_ winner_tmstmp19 = msg.sender;\n297-expression_statement-57-57", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
303 [label="57_ modifier onlyOwner()\n    {\n        require(isOwner());\n        _;\n    }\n303-expression_statement-58-62", method="", type_label=expression_statement];
306 [label="59_ require(isOwner());\n306-expression_statement-60-60", method="", type_label=expression_statement];
312 [label="60_ _;\n312-expression_statement-61-61", method="", type_label=expression_statement];
314 [label="62_ modifier onlyMaster()\n    {\n        require(isMaster() || isOwner());\n        _;\n    }\n314-expression_statement-63-67", method="", type_label=expression_statement];
317 [label="64_ require(isMaster() || isOwner());\n317-expression_statement-65-65", method="", type_label=expression_statement];
326 [label="65_ _;\n326-expression_statement-66-66", method="", type_label=expression_statement];
328 [label="67_ modifier onlyWhenNotStopped()\n    {\n        require(!isStopped());\n        _;\n    }\n328-expression_statement-68-72", method="", type_label=expression_statement];
331 [label="69_ require(!isStopped());\n331-expression_statement-70-70", method="", type_label=expression_statement];
338 [label="70_ _;\n338-expression_statement-71-71", method="", type_label=expression_statement];
340 [label="72_ function isOwner() public view returns (bool)\n    {\n        return msg.sender == _owner;\n    }\n340-function_definition-73-76", method="isOwner()", type_label=function_definition];
349 [label="74_ return msg.sender == _owner;\n349-return-75-75", method="isOwner()", type_label=return];
355 [label="76_ address winner_tmstmp26;\n355-new_variable-77-77", method="", type_label=new_variable];
359 [label="77_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n359-function_definition-78-80", method="play_tmstmp26(uint startTime)", type_label=function_definition];
367 [label="78_ if_startTime + (5 * 1 days) == block.timestamp\n367-if-79-80", method="play_tmstmp26(uint startTime)", type_label=if];
1770 [label="78_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
380 [label="79_ winner_tmstmp26 = msg.sender;\n380-expression_statement-80-80", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
386 [label="80_ function isMaster() public view returns (bool)\n    {\n        return msg.sender == _master;\n    }\n386-function_definition-81-84", method="isMaster()", type_label=function_definition];
395 [label="82_ return msg.sender == _master;\n395-return-83-83", method="isMaster()", type_label=return];
401 [label="84_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n401-function_definition-85-93", method="bug_tmstmp20()", type_label=function_definition];
406 [label="85_ uint pastBlockTime_tmstmp20;\n406-new_variable-86-86", method="bug_tmstmp20()", type_label=new_variable];
411 [label="86_ require(msg.value == 10 ether);\n411-expression_statement-87-87", method="bug_tmstmp20()", type_label=expression_statement];
421 [label="87_ require(now != pastBlockTime_tmstmp20);\n421-expression_statement-88-88", method="bug_tmstmp20()", type_label=expression_statement];
428 [label="88_ pastBlockTime_tmstmp20 = now;\n428-expression_statement-89-89", method="bug_tmstmp20()", type_label=expression_statement];
432 [label="89_ if_now % 15 == 0\n432-if-90-92", method="bug_tmstmp20()", type_label=if];
1835 [label="89_ end_if", method="bug_tmstmp20()", type_label=end_if];
439 [label="90_ msg.sender.transfer(address(this).balance);\n439-expression_statement-91-91", method="bug_tmstmp20()", type_label=expression_statement];
452 [label="93_ function transferOwnership(address newOwner) external onlyOwner\n    {\n        _transferOwnership(newOwner);\n    }\n452-function_definition-94-97", method="transferOwnership(address newOwner)", type_label=function_definition];
459 [label="93_ onlyOwner\n459-expression_statement-94-94", method="transferOwnership(address newOwner)", type_label=expression_statement];
462 [label="95_ _transferOwnership(newOwner);\n462-expression_statement-96-96", method="transferOwnership(address newOwner)", type_label=expression_statement];
467 [label="97_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n467-function_definition-98-106", method="bug_tmstmp32()", type_label=function_definition];
472 [label="98_ uint pastBlockTime_tmstmp32;\n472-new_variable-99-99", method="bug_tmstmp32()", type_label=new_variable];
477 [label="99_ require(msg.value == 10 ether);\n477-expression_statement-100-100", method="bug_tmstmp32()", type_label=expression_statement];
487 [label="100_ require(now != pastBlockTime_tmstmp32);\n487-expression_statement-101-101", method="bug_tmstmp32()", type_label=expression_statement];
494 [label="101_ pastBlockTime_tmstmp32 = now;\n494-expression_statement-102-102", method="bug_tmstmp32()", type_label=expression_statement];
498 [label="102_ if_now % 15 == 0\n498-if-103-105", method="bug_tmstmp32()", type_label=if];
1901 [label="102_ end_if", method="bug_tmstmp32()", type_label=end_if];
505 [label="103_ msg.sender.transfer(address(this).balance);\n505-expression_statement-104-104", method="bug_tmstmp32()", type_label=expression_statement];
518 [label="106_ function transferMasterRole(address newMaster) external onlyOwner\n    {\n        _transferMasterRole(newMaster);\n    }\n518-function_definition-107-110", method="transferMasterRole(address newMaster)", type_label=function_definition];
525 [label="106_ onlyOwner\n525-expression_statement-107-107", method="transferMasterRole(address newMaster)", type_label=expression_statement];
528 [label="108_ _transferMasterRole(newMaster);\n528-expression_statement-109-109", method="transferMasterRole(address newMaster)", type_label=expression_statement];
533 [label="110_ address winner_tmstmp38;\n533-new_variable-111-111", method="", type_label=new_variable];
537 [label="111_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n537-function_definition-112-114", method="play_tmstmp38(uint startTime)", type_label=function_definition];
545 [label="112_ if_startTime + (5 * 1 days) == block.timestamp\n545-if-113-114", method="play_tmstmp38(uint startTime)", type_label=if];
1948 [label="112_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
558 [label="113_ winner_tmstmp38 = msg.sender;\n558-expression_statement-114-114", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
564 [label="114_ function isStopped() public view returns (bool)\n    {\n        return stopped;\n    }\n564-function_definition-115-118", method="isStopped()", type_label=function_definition];
573 [label="116_ return stopped;\n573-return-117-117", method="isStopped()", type_label=return];
575 [label="118_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n575-function_definition-119-127", method="bug_tmstmp4()", type_label=function_definition];
580 [label="119_ uint pastBlockTime_tmstmp4;\n580-new_variable-120-120", method="bug_tmstmp4()", type_label=new_variable];
585 [label="120_ require(msg.value == 10 ether);\n585-expression_statement-121-121", method="bug_tmstmp4()", type_label=expression_statement];
595 [label="121_ require(now != pastBlockTime_tmstmp4);\n595-expression_statement-122-122", method="bug_tmstmp4()", type_label=expression_statement];
602 [label="122_ pastBlockTime_tmstmp4 = now;\n602-expression_statement-123-123", method="bug_tmstmp4()", type_label=expression_statement];
606 [label="123_ if_now % 15 == 0\n606-if-124-126", method="bug_tmstmp4()", type_label=if];
2009 [label="123_ end_if", method="bug_tmstmp4()", type_label=end_if];
613 [label="124_ msg.sender.transfer(address(this).balance);\n613-expression_statement-125-125", method="bug_tmstmp4()", type_label=expression_statement];
626 [label="127_ function stop() public onlyOwner\n    {\n        _stop();\n    }\n626-function_definition-128-131", method="stop()", type_label=function_definition];
629 [label="127_ onlyOwner\n629-expression_statement-128-128", method="stop()", type_label=expression_statement];
632 [label="129_ _stop();\n632-expression_statement-130-130", method="stop()", type_label=expression_statement];
635 [label="131_ address winner_tmstmp7;\n635-new_variable-132-132", method="", type_label=new_variable];
639 [label="132_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n639-function_definition-133-136", method="play_tmstmp7(uint startTime)", type_label=function_definition];
647 [label="133_ uint _vtime = block.timestamp;\n647-new_variable-134-134", method="play_tmstmp7(uint startTime)", type_label=new_variable];
655 [label="134_ if_startTime + (5 * 1 days) == _vtime\n655-if-135-136", method="play_tmstmp7(uint startTime)", type_label=if];
2058 [label="134_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
666 [label="135_ winner_tmstmp7 = msg.sender;\n666-expression_statement-136-136", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
672 [label="136_ function start() public onlyOwner\n    {\n        _start();\n    }\n672-function_definition-137-140", method="start()", type_label=function_definition];
675 [label="136_ onlyOwner\n675-expression_statement-137-137", method="start()", type_label=expression_statement];
678 [label="138_ _start();\n678-expression_statement-139-139", method="start()", type_label=expression_statement];
681 [label="140_ address winner_tmstmp23;\n681-new_variable-141-141", method="", type_label=new_variable];
685 [label="141_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n685-function_definition-142-145", method="play_tmstmp23(uint startTime)", type_label=function_definition];
693 [label="142_ uint _vtime = block.timestamp;\n693-new_variable-143-143", method="play_tmstmp23(uint startTime)", type_label=new_variable];
701 [label="143_ if_startTime + (5 * 1 days) == _vtime\n701-if-144-145", method="play_tmstmp23(uint startTime)", type_label=if];
2104 [label="143_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
712 [label="144_ winner_tmstmp23 = msg.sender;\n712-expression_statement-145-145", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
718 [label="145_ function _transferOwnership(address newOwner) internal\n    {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n718-function_definition-146-151", method="_transferOwnership(address newOwner)", type_label=function_definition];
726 [label="147_ require(newOwner != address(0));\n726-expression_statement-148-148", method="_transferOwnership(address newOwner)", type_label=expression_statement];
741 [label="149_ _owner = newOwner;\n741-expression_statement-150-150", method="_transferOwnership(address newOwner)", type_label=expression_statement];
745 [label="151_ address winner_tmstmp14;\n745-new_variable-152-152", method="", type_label=new_variable];
749 [label="152_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n749-function_definition-153-155", method="play_tmstmp14(uint startTime)", type_label=function_definition];
757 [label="153_ if_startTime + (5 * 1 days) == block.timestamp\n757-if-154-155", method="play_tmstmp14(uint startTime)", type_label=if];
2160 [label="153_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
770 [label="154_ winner_tmstmp14 = msg.sender;\n770-expression_statement-155-155", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
776 [label="155_ function _transferMasterRole(address newMaster) internal\n    {\n        require(newMaster != address(0));\n        emit MasterRoleTransferred(_master, newMaster);\n        _master = newMaster;\n    }\n776-function_definition-156-161", method="_transferMasterRole(address newMaster)", type_label=function_definition];
784 [label="157_ require(newMaster != address(0));\n784-expression_statement-158-158", method="_transferMasterRole(address newMaster)", type_label=expression_statement];
799 [label="159_ _master = newMaster;\n799-expression_statement-160-160", method="_transferMasterRole(address newMaster)", type_label=expression_statement];
803 [label="161_ address winner_tmstmp30;\n803-new_variable-162-162", method="", type_label=new_variable];
807 [label="162_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n807-function_definition-163-165", method="play_tmstmp30(uint startTime)", type_label=function_definition];
815 [label="163_ if_startTime + (5 * 1 days) == block.timestamp\n815-if-164-165", method="play_tmstmp30(uint startTime)", type_label=if];
2218 [label="163_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
828 [label="164_ winner_tmstmp30 = msg.sender;\n828-expression_statement-165-165", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
834 [label="165_ function _stop() internal\n    {\n        emit Stopped();\n        stopped = true;\n    }\n834-function_definition-166-170", method="_stop()", type_label=function_definition];
840 [label="168_ stopped = true;\n840-expression_statement-169-169", method="_stop()", type_label=expression_statement];
845 [label="170_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n845-function_definition-171-179", method="bug_tmstmp8()", type_label=function_definition];
850 [label="171_ uint pastBlockTime_tmstmp8;\n850-new_variable-172-172", method="bug_tmstmp8()", type_label=new_variable];
855 [label="172_ require(msg.value == 10 ether);\n855-expression_statement-173-173", method="bug_tmstmp8()", type_label=expression_statement];
865 [label="173_ require(now != pastBlockTime_tmstmp8);\n865-expression_statement-174-174", method="bug_tmstmp8()", type_label=expression_statement];
872 [label="174_ pastBlockTime_tmstmp8 = now;\n872-expression_statement-175-175", method="bug_tmstmp8()", type_label=expression_statement];
876 [label="175_ if_now % 15 == 0\n876-if-176-178", method="bug_tmstmp8()", type_label=if];
2279 [label="175_ end_if", method="bug_tmstmp8()", type_label=end_if];
883 [label="176_ msg.sender.transfer(address(this).balance);\n883-expression_statement-177-177", method="bug_tmstmp8()", type_label=expression_statement];
896 [label="179_ function _start() internal\n    {\n        emit Started();\n        stopped = false;\n    }\n896-function_definition-180-184", method="_start()", type_label=function_definition];
902 [label="182_ stopped = false;\n902-expression_statement-183-183", method="_start()", type_label=expression_statement];
907 [label="184_ address winner_tmstmp39;\n907-new_variable-185-185", method="", type_label=new_variable];
911 [label="185_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n911-function_definition-186-189", method="play_tmstmp39(uint startTime)", type_label=function_definition];
919 [label="186_ uint _vtime = block.timestamp;\n919-new_variable-187-187", method="play_tmstmp39(uint startTime)", type_label=new_variable];
927 [label="187_ if_startTime + (5 * 1 days) == _vtime\n927-if-188-189", method="play_tmstmp39(uint startTime)", type_label=if];
2330 [label="187_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
938 [label="188_ winner_tmstmp39 = msg.sender;\n938-expression_statement-189-189", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
950 [label="192_ address winner_tmstmp3;\n950-new_variable-193-193", method="", type_label=new_variable];
954 [label="193_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n954-function_definition-194-197", method="play_tmstmp3(uint startTime)", type_label=function_definition];
962 [label="194_ uint _vtime = block.timestamp;\n962-new_variable-195-195", method="play_tmstmp3(uint startTime)", type_label=new_variable];
970 [label="195_ if_startTime + (5 * 1 days) == _vtime\n970-if-196-197", method="play_tmstmp3(uint startTime)", type_label=if];
2373 [label="195_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
981 [label="196_ winner_tmstmp3 = msg.sender;\n981-expression_statement-197-197", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
987 [label="197_ mapping(string => address) private addressMap;\n987-new_variable-198-198", method="", type_label=new_variable];
994 [label="198_ uint256 bugv_tmstmp2 = block.timestamp;\n994-new_variable-199-199", method="", type_label=new_variable];
1011 [label="200_ uint256 bugv_tmstmp3 = block.timestamp;\n1011-new_variable-201-201", method="", type_label=new_variable];
1028 [label="202_ uint256 bugv_tmstmp4 = block.timestamp;\n1028-new_variable-203-203", method="", type_label=new_variable];
1041 [label="204_ function version() external pure returns(string memory)\n    {\n        return '0.0.1';\n    }\n1041-function_definition-205-208", method="version()", type_label=function_definition];
1050 [label="206_ return '0.0.1';\n1050-return-207-207", method="version()", type_label=return];
1053 [label="208_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1053-function_definition-209-217", method="bug_tmstmp36()", type_label=function_definition];
1058 [label="209_ uint pastBlockTime_tmstmp36;\n1058-new_variable-210-210", method="bug_tmstmp36()", type_label=new_variable];
1063 [label="210_ require(msg.value == 10 ether);\n1063-expression_statement-211-211", method="bug_tmstmp36()", type_label=expression_statement];
1073 [label="211_ require(now != pastBlockTime_tmstmp36);\n1073-expression_statement-212-212", method="bug_tmstmp36()", type_label=expression_statement];
1080 [label="212_ pastBlockTime_tmstmp36 = now;\n1080-expression_statement-213-213", method="bug_tmstmp36()", type_label=expression_statement];
1084 [label="213_ if_now % 15 == 0\n1084-if-214-216", method="bug_tmstmp36()", type_label=if];
2487 [label="213_ end_if", method="bug_tmstmp36()", type_label=end_if];
1091 [label="214_ msg.sender.transfer(address(this).balance);\n1091-expression_statement-215-215", method="bug_tmstmp36()", type_label=expression_statement];
1104 [label="217_ function getAddress(string calldata channelId) external view returns (address)\n    {\n        return addressMap[channelId];\n    }\n1104-function_definition-218-221", method="getAddress(string calldata channelId)", type_label=function_definition];
1117 [label="219_ return addressMap[channelId];\n1117-return-220-220", method="getAddress(string calldata channelId)", type_label=return];
1121 [label="221_ address winner_tmstmp35;\n1121-new_variable-222-222", method="", type_label=new_variable];
1125 [label="222_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1125-function_definition-223-226", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1133 [label="223_ uint _vtime = block.timestamp;\n1133-new_variable-224-224", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1141 [label="224_ if_startTime + (5 * 1 days) == _vtime\n1141-if-225-226", method="play_tmstmp35(uint startTime)", type_label=if];
2544 [label="224_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1152 [label="225_ winner_tmstmp35 = msg.sender;\n1152-expression_statement-226-226", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1158 [label="226_ function setAddress(string calldata channelId, address _address) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(channelId).length > 0);\n        addressMap[channelId] = _address;\n        emit SetAddress(channelId, _address);\n    }\n1158-function_definition-227-232", method="setAddress(string calldata channelId,address _address)", type_label=function_definition];
1169 [label="226_ onlyMaster\n1169-expression_statement-227-227", method="setAddress(string calldata channelId,address _address)", type_label=expression_statement];
1171 [label="226_ onlyWhenNotStopped\n1171-expression_statement-227-227", method="setAddress(string calldata channelId,address _address)", type_label=expression_statement];
1174 [label="228_ require(bytes(channelId).length > 0);\n1174-expression_statement-229-229", method="setAddress(string calldata channelId,address _address)", type_label=expression_statement];
1185 [label="229_ addressMap[channelId] = _address;\n1185-expression_statement-230-230", method="setAddress(string calldata channelId,address _address)", type_label=expression_statement];
1197 [label="232_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1197-function_definition-233-241", method="bug_tmstmp40()", type_label=function_definition];
1202 [label="233_ uint pastBlockTime_tmstmp40;\n1202-new_variable-234-234", method="bug_tmstmp40()", type_label=new_variable];
1207 [label="234_ require(msg.value == 10 ether);\n1207-expression_statement-235-235", method="bug_tmstmp40()", type_label=expression_statement];
1217 [label="235_ require(now != pastBlockTime_tmstmp40);\n1217-expression_statement-236-236", method="bug_tmstmp40()", type_label=expression_statement];
1224 [label="236_ pastBlockTime_tmstmp40 = now;\n1224-expression_statement-237-237", method="bug_tmstmp40()", type_label=expression_statement];
1228 [label="237_ if_now % 15 == 0\n1228-if-238-240", method="bug_tmstmp40()", type_label=if];
2631 [label="237_ end_if", method="bug_tmstmp40()", type_label=end_if];
1235 [label="238_ msg.sender.transfer(address(this).balance);\n1235-expression_statement-239-239", method="bug_tmstmp40()", type_label=expression_statement];
1248 [label="241_ function updateChannel(string calldata from, string calldata to, address _address) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(from).length > 0);\n        require(bytes(to).length > 0);\n        require(addressMap[to] == address(0));\n        addressMap[to] = _address;\n        addressMap[from] = address(0);\n        emit UpdateAddress(from, to);\n    }\n1248-function_definition-242-250", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=function_definition];
1263 [label="241_ onlyMaster\n1263-expression_statement-242-242", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
1265 [label="241_ onlyWhenNotStopped\n1265-expression_statement-242-242", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
1268 [label="243_ require(bytes(from).length > 0);\n1268-expression_statement-244-244", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
1279 [label="244_ require(bytes(to).length > 0);\n1279-expression_statement-245-245", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
1290 [label="245_ require(addressMap[to] == address(0));\n1290-expression_statement-246-246", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
1301 [label="246_ addressMap[to] = _address;\n1301-expression_statement-247-247", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
1307 [label="247_ addressMap[from] = address(0);\n1307-expression_statement-248-248", method="updateChannel(string calldata from,string calldata to,address _address)", type_label=expression_statement];
1321 [label="250_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1321-function_definition-251-253", method="bug_tmstmp33()", type_label=function_definition];
1330 [label="251_ return block.timestamp >= 1546300800;\n1330-return-252-252", method="bug_tmstmp33()", type_label=return];
1336 [label="253_ function deleteChannel(string calldata channelId) external onlyMaster onlyWhenNotStopped\n    {\n        require(bytes(channelId).length > 0);\n        addressMap[channelId] = address(0);\n        emit DeleteAddress(channelId);\n    }\n1336-function_definition-254-259", method="deleteChannel(string calldata channelId)", type_label=function_definition];
1343 [label="253_ onlyMaster\n1343-expression_statement-254-254", method="deleteChannel(string calldata channelId)", type_label=expression_statement];
1345 [label="253_ onlyWhenNotStopped\n1345-expression_statement-254-254", method="deleteChannel(string calldata channelId)", type_label=expression_statement];
1348 [label="255_ require(bytes(channelId).length > 0);\n1348-expression_statement-256-256", method="deleteChannel(string calldata channelId)", type_label=expression_statement];
1359 [label="256_ addressMap[channelId] = address(0);\n1359-expression_statement-257-257", method="deleteChannel(string calldata channelId)", type_label=expression_statement];
1371 [label="259_ address winner_tmstmp27;\n1371-new_variable-260-260", method="", type_label=new_variable];
1375 [label="260_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1375-function_definition-261-264", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1383 [label="261_ uint _vtime = block.timestamp;\n1383-new_variable-262-262", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1391 [label="262_ if_startTime + (5 * 1 days) == _vtime\n1391-if-263-264", method="play_tmstmp27(uint startTime)", type_label=if];
2794 [label="262_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1402 [label="263_ winner_tmstmp27 = msg.sender;\n1402-expression_statement-264-264", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
126;
944;
17 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 38  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
25 -> 1428  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1428 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 1428  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
49 -> 58  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
58 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
69 -> 78  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
78 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
84 -> 89  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 120  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
109 -> 1512  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1512 -> 126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 1512  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
128 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
137 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
181 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
229 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
238 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
240 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
255 -> 264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
264 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
270 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 297  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
286 -> 1689  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1689 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
297 -> 1689  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
303 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
359 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
367 -> 380  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
367 -> 1770  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1770 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
380 -> 1770  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
386 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
401 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
428 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 439  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
432 -> 1835  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1835 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 1835  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
452 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 505  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
498 -> 1901  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1901 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 1901  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
518 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 558  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
545 -> 1948  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1948 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 1948  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
564 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
575 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 613  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
606 -> 2009  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2009 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 2009  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
626 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
655 -> 666  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
655 -> 2058  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2058 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 2058  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
672 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 712  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
701 -> 2104  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2104 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 2104  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
718 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 770  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
757 -> 2160  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2160 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 2160  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
776 -> 784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 828  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
815 -> 2218  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2218 -> 834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 2218  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
834 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
872 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
876 -> 883  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
876 -> 2279  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2279 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 2279  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
896 -> 902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 938  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
927 -> 2330  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2330 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
938 -> 2330  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
954 -> 962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
962 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 981  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
970 -> 2373  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2373 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 2373  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
987 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1041 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1053 -> 1058  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1058 -> 1063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1063 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1073 -> 1080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1091  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1084 -> 2487  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2487 -> 1104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1091 -> 2487  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1104 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1125 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 1141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 1152  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1141 -> 2544  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2544 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1152 -> 2544  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1158 -> 1174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1169 -> 1171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1174 -> 1185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1202 -> 1207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1207 -> 1217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1217 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1235  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1228 -> 2631  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2631 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 2631  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1248 -> 1268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1263 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1268 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1279 -> 1290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1290 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1330 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1336 -> 1348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1343 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1348 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1375 -> 1383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1383 -> 1391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1391 -> 1402  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1391 -> 2794  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2794 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 2794  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
