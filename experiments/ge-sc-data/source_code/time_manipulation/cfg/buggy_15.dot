digraph  {
13 [label="2_ function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n13-function_definition-3-3", method="receiveApproval(address _from,uint256 _value,address _token,bytes calldata _extraData)", type_label=function_definition];
35 [label="5_ address winner_tmstmp23;\n35-new_variable-6-6", method="", type_label=new_variable];
39 [label="6_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n39-function_definition-7-10", method="play_tmstmp23(uint startTime)", type_label=function_definition];
47 [label="7_ uint _vtime = block.timestamp;\n47-new_variable-8-8", method="play_tmstmp23(uint startTime)", type_label=new_variable];
55 [label="8_ if_startTime + (5 * 1 days) == _vtime\n55-if-9-10", method="play_tmstmp23(uint startTime)", type_label=if];
1058 [label="8_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
66 [label="9_ winner_tmstmp23 = msg.sender;\n66-expression_statement-10-10", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
72 [label="10_ string public name;\n72-new_variable-11-11", method="", type_label=new_variable];
77 [label="11_ address winner_tmstmp14;\n77-new_variable-12-12", method="", type_label=new_variable];
81 [label="12_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n81-function_definition-13-15", method="play_tmstmp14(uint startTime)", type_label=function_definition];
89 [label="13_ if_startTime + (5 * 1 days) == block.timestamp\n89-if-14-15", method="play_tmstmp14(uint startTime)", type_label=if];
1092 [label="13_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
102 [label="14_ winner_tmstmp14 = msg.sender;\n102-expression_statement-15-15", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
108 [label="15_ string public symbol;\n108-new_variable-16-16", method="", type_label=new_variable];
113 [label="16_ address winner_tmstmp30;\n113-new_variable-17-17", method="", type_label=new_variable];
117 [label="17_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n117-function_definition-18-20", method="play_tmstmp30(uint startTime)", type_label=function_definition];
125 [label="18_ if_startTime + (5 * 1 days) == block.timestamp\n125-if-19-20", method="play_tmstmp30(uint startTime)", type_label=if];
1128 [label="18_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
138 [label="19_ winner_tmstmp30 = msg.sender;\n138-expression_statement-20-20", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
144 [label="20_ uint8 public decimals = 18;\n144-new_variable-21-21", method="", type_label=new_variable];
150 [label="21_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n150-function_definition-22-30", method="bug_tmstmp8()", type_label=function_definition];
155 [label="22_ uint pastBlockTime_tmstmp8;\n155-new_variable-23-23", method="bug_tmstmp8()", type_label=new_variable];
160 [label="23_ require(msg.value == 10 ether);\n160-expression_statement-24-24", method="bug_tmstmp8()", type_label=expression_statement];
170 [label="24_ require(now != pastBlockTime_tmstmp8);\n170-expression_statement-25-25", method="bug_tmstmp8()", type_label=expression_statement];
177 [label="25_ pastBlockTime_tmstmp8 = now;\n177-expression_statement-26-26", method="bug_tmstmp8()", type_label=expression_statement];
181 [label="26_ if_now % 15 == 0\n181-if-27-29", method="bug_tmstmp8()", type_label=if];
1184 [label="26_ end_if", method="bug_tmstmp8()", type_label=end_if];
188 [label="27_ msg.sender.transfer(address(this).balance);\n188-expression_statement-28-28", method="bug_tmstmp8()", type_label=expression_statement];
201 [label="30_ uint256 public totalSupply;\n201-new_variable-31-31", method="", type_label=new_variable];
206 [label="31_ address winner_tmstmp39;\n206-new_variable-32-32", method="", type_label=new_variable];
210 [label="32_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n210-function_definition-33-36", method="play_tmstmp39(uint startTime)", type_label=function_definition];
218 [label="33_ uint _vtime = block.timestamp;\n218-new_variable-34-34", method="play_tmstmp39(uint startTime)", type_label=new_variable];
226 [label="34_ if_startTime + (5 * 1 days) == _vtime\n226-if-35-36", method="play_tmstmp39(uint startTime)", type_label=if];
1229 [label="34_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
237 [label="35_ winner_tmstmp39 = msg.sender;\n237-expression_statement-36-36", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
243 [label="36_ mapping (address => uint256) public balanceOf;\n243-new_variable-37-37", method="", type_label=new_variable];
250 [label="37_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n250-function_definition-38-46", method="bug_tmstmp36()", type_label=function_definition];
255 [label="38_ uint pastBlockTime_tmstmp36;\n255-new_variable-39-39", method="bug_tmstmp36()", type_label=new_variable];
260 [label="39_ require(msg.value == 10 ether);\n260-expression_statement-40-40", method="bug_tmstmp36()", type_label=expression_statement];
270 [label="40_ require(now != pastBlockTime_tmstmp36);\n270-expression_statement-41-41", method="bug_tmstmp36()", type_label=expression_statement];
277 [label="41_ pastBlockTime_tmstmp36 = now;\n277-expression_statement-42-42", method="bug_tmstmp36()", type_label=expression_statement];
281 [label="42_ if_now % 15 == 0\n281-if-43-45", method="bug_tmstmp36()", type_label=if];
1284 [label="42_ end_if", method="bug_tmstmp36()", type_label=end_if];
288 [label="43_ msg.sender.transfer(address(this).balance);\n288-expression_statement-44-44", method="bug_tmstmp36()", type_label=expression_statement];
301 [label="46_ mapping (address => mapping (address => uint256)) public allowance;\n301-new_variable-47-47", method="", type_label=new_variable];
310 [label="47_ uint256 bugv_tmstmp2 = block.timestamp;\n310-new_variable-48-48", method="", type_label=new_variable];
331 [label="49_ uint256 bugv_tmstmp3 = block.timestamp;\n331-new_variable-50-50", method="", type_label=new_variable];
352 [label="51_ uint256 bugv_tmstmp4 = block.timestamp;\n352-new_variable-52-52", method="", type_label=new_variable];
383 [label="58_ totalSupply = initialSupply * 10 ** uint256(decimals);\n383-expression_statement-59-59", method="", type_label=expression_statement];
393 [label="59_ balanceOf[msg.sender] = totalSupply;\n393-expression_statement-60-60", method="", type_label=expression_statement];
401 [label="60_ name = tokenName;\n401-expression_statement-61-61", method="", type_label=expression_statement];
405 [label="61_ symbol = tokenSymbol;\n405-expression_statement-62-62", method="", type_label=expression_statement];
409 [label="63_ address winner_tmstmp35;\n409-new_variable-64-64", method="", type_label=new_variable];
413 [label="64_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n413-function_definition-65-68", method="play_tmstmp35(uint startTime)", type_label=function_definition];
421 [label="65_ uint _vtime = block.timestamp;\n421-new_variable-66-66", method="play_tmstmp35(uint startTime)", type_label=new_variable];
429 [label="66_ if_startTime + (5 * 1 days) == _vtime\n429-if-67-68", method="play_tmstmp35(uint startTime)", type_label=if];
1432 [label="66_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
440 [label="67_ winner_tmstmp35 = msg.sender;\n440-expression_statement-68-68", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
446 [label="68_ function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0x0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n446-function_definition-69-78", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
462 [label="69_ require(_to != address(0x0));\n462-expression_statement-70-70", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
471 [label="70_ require(balanceOf[_from] >= _value);\n471-expression_statement-71-71", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
480 [label="71_ require(balanceOf[_to] + _value >= balanceOf[_to]);\n480-expression_statement-72-72", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
493 [label="72_ uint previousBalances = balanceOf[_from] + balanceOf[_to];\n493-new_variable-73-73", method="_transfer(address _from,address _to,uint _value)", type_label=new_variable];
505 [label="73_ balanceOf[_from] -= _value;\n505-expression_statement-74-74", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
511 [label="74_ balanceOf[_to] += _value;\n511-expression_statement-75-75", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
525 [label="76_ assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n525-expression_statement-77-77", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
538 [label="78_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n538-function_definition-79-87", method="bug_tmstmp40()", type_label=function_definition];
543 [label="79_ uint pastBlockTime_tmstmp40;\n543-new_variable-80-80", method="bug_tmstmp40()", type_label=new_variable];
548 [label="80_ require(msg.value == 10 ether);\n548-expression_statement-81-81", method="bug_tmstmp40()", type_label=expression_statement];
558 [label="81_ require(now != pastBlockTime_tmstmp40);\n558-expression_statement-82-82", method="bug_tmstmp40()", type_label=expression_statement];
565 [label="82_ pastBlockTime_tmstmp40 = now;\n565-expression_statement-83-83", method="bug_tmstmp40()", type_label=expression_statement];
569 [label="83_ if_now % 15 == 0\n569-if-84-86", method="bug_tmstmp40()", type_label=if];
1572 [label="83_ end_if", method="bug_tmstmp40()", type_label=end_if];
576 [label="84_ msg.sender.transfer(address(this).balance);\n576-expression_statement-85-85", method="bug_tmstmp40()", type_label=expression_statement];
589 [label="87_ function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n589-function_definition-88-91", method="transfer(address _to,uint256 _value)", type_label=function_definition];
606 [label="88_ _transfer(msg.sender, _to, _value);\n606-expression_statement-89-89", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
617 [label="89_ return true;\n617-return-90-90", method="transfer(address _to,uint256 _value)", type_label=return];
620 [label="91_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n620-function_definition-92-94", method="bug_tmstmp33()", type_label=function_definition];
629 [label="92_ return block.timestamp >= 1546300800;\n629-return-93-93", method="bug_tmstmp33()", type_label=return];
635 [label="94_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);      \n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n635-function_definition-95-100", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
656 [label="95_ require(_value <= allowance[_from][msg.sender]);\n656-expression_statement-96-96", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
669 [label="96_ allowance[_from][msg.sender] -= _value;\n669-expression_statement-97-97", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
679 [label="97_ _transfer(_from, _to, _value);\n679-expression_statement-98-98", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
688 [label="98_ return true;\n688-return-99-99", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
691 [label="100_ address winner_tmstmp27;\n691-new_variable-101-101", method="", type_label=new_variable];
695 [label="101_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n695-function_definition-102-105", method="play_tmstmp27(uint startTime)", type_label=function_definition];
703 [label="102_ uint _vtime = block.timestamp;\n703-new_variable-103-103", method="play_tmstmp27(uint startTime)", type_label=new_variable];
711 [label="103_ if_startTime + (5 * 1 days) == _vtime\n711-if-104-105", method="play_tmstmp27(uint startTime)", type_label=if];
1714 [label="103_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
722 [label="104_ winner_tmstmp27 = msg.sender;\n722-expression_statement-105-105", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
728 [label="105_ function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n728-function_definition-106-111", method="approve(address _spender,uint256 _value)", type_label=function_definition];
745 [label="107_ allowance[msg.sender][_spender] = _value;\n745-expression_statement-108-108", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
765 [label="109_ return true;\n765-return-110-110", method="approve(address _spender,uint256 _value)", type_label=return];
768 [label="111_ address winner_tmstmp31;\n768-new_variable-112-112", method="", type_label=new_variable];
772 [label="112_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n772-function_definition-113-116", method="play_tmstmp31(uint startTime)", type_label=function_definition];
780 [label="113_ uint _vtime = block.timestamp;\n780-new_variable-114-114", method="play_tmstmp31(uint startTime)", type_label=new_variable];
788 [label="114_ if_startTime + (5 * 1 days) == _vtime\n788-if-115-116", method="play_tmstmp31(uint startTime)", type_label=if];
1791 [label="114_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
799 [label="115_ winner_tmstmp31 = msg.sender;\n799-expression_statement-116-116", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
805 [label="116_ function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n805-function_definition-117-125", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=function_definition];
826 [label="119_ tokenRecipient spender = tokenRecipient(_spender);\n826-new_variable-120-120", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=new_variable];
836 [label="120_ if\n836-if-121-124", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=if];
1839 [label="120_ end_if", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=end_if];
844 [label="121_ spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n844-expression_statement-122-122", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=expression_statement];
861 [label="122_ return true;\n861-return-123-123", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=return];
864 [label="125_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n864-function_definition-126-128", method="bug_tmstmp13()", type_label=function_definition];
873 [label="126_ return block.timestamp >= 1546300800;\n873-return-127-127", method="bug_tmstmp13()", type_label=return];
879 [label="128_ function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);    \n        balanceOf[msg.sender] -= _value;             \n        totalSupply -= _value;                       \n        emit Burn(msg.sender, _value);\n        return true;\n    }\n879-function_definition-129-135", method="burn(uint256 _value)", type_label=function_definition];
892 [label="129_ require(balanceOf[msg.sender] >= _value);\n892-expression_statement-130-130", method="burn(uint256 _value)", type_label=expression_statement];
903 [label="130_ balanceOf[msg.sender] -= _value;\n903-expression_statement-131-131", method="burn(uint256 _value)", type_label=expression_statement];
911 [label="131_ totalSupply -= _value;\n911-expression_statement-132-132", method="burn(uint256 _value)", type_label=expression_statement];
923 [label="133_ return true;\n923-return-134-134", method="burn(uint256 _value)", type_label=return];
926 [label="135_ uint256 bugv_tmstmp5 = block.timestamp;\n926-new_variable-136-136", method="", type_label=new_variable];
933 [label="136_ function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                 \n        require(_value <= allowance[_from][msg.sender]);     \n        balanceOf[_from] -= _value;                          \n        allowance[_from][msg.sender] -= _value;              \n        totalSupply -= _value;                               \n        emit Burn(_from, _value);\n        return true;\n    }\n933-function_definition-137-145", method="burnFrom(address _from,uint256 _value)", type_label=function_definition];
950 [label="137_ require(balanceOf[_from] >= _value);\n950-expression_statement-138-138", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
959 [label="138_ require(_value <= allowance[_from][msg.sender]);\n959-expression_statement-139-139", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
972 [label="139_ balanceOf[_from] -= _value;\n972-expression_statement-140-140", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
978 [label="140_ allowance[_from][msg.sender] -= _value;\n978-expression_statement-141-141", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
988 [label="141_ totalSupply -= _value;\n988-expression_statement-142-142", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
998 [label="143_ return true;\n998-return-144-144", method="burnFrom(address _from,uint256 _value)", type_label=return];
1001 [label="145_ uint256 bugv_tmstmp1 = block.timestamp;\n1001-new_variable-146-146", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
39 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 55  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 66  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
55 -> 1058  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1058 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
66 -> 1058  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
72 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 89  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
89 -> 102  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
89 -> 1092  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1092 -> 108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
102 -> 1092  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
108 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
117 -> 125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
125 -> 138  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
125 -> 1128  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1128 -> 144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 1128  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
150 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 188  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
181 -> 1184  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1184 -> 201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 1184  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
201 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
218 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 237  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
226 -> 1229  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1229 -> 243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 1229  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
250 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
260 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
281 -> 288  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
281 -> 1284  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1284 -> 301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 1284  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
301 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
383 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
429 -> 440  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
429 -> 1432  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1432 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 1432  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
446 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
538 -> 543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
548 -> 558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
569 -> 576  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
569 -> 1572  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1572 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
576 -> 1572  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
589 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
620 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
635 -> 656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
656 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
695 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
711 -> 722  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
711 -> 1714  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1714 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 1714  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
728 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
772 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 799  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
788 -> 1791  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1791 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 1791  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
805 -> 826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
826 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 844  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
836 -> 1839  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1839 -> 864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 1839  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
861 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
864 -> 873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
879 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
892 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
903 -> 911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
923 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
933 -> 950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
950 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 988  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
998 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
