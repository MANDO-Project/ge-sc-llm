digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns (uint c) {	 \n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns (uint c) {	 \n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns (uint c) {	 \n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns (uint c) {	 \n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function totalSupply() public view returns (uint);\n146-function_definition-21-21", method="totalSupply()", type_label=function_definition];
154 [label="21_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n154-function_definition-22-24", method="bug_tmstmp25()", type_label=function_definition];
163 [label="22_ return block.timestamp >= 1546300800;\n163-return-23-23", method="bug_tmstmp25()", type_label=return];
169 [label="24_ function balanceOf(address tokenOwner) public view returns (uint balance);\n169-function_definition-25-25", method="balanceOf(address tokenOwner)", type_label=function_definition];
182 [label="25_ address winner_tmstmp19;\n182-new_variable-26-26", method="", type_label=new_variable];
186 [label="26_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n186-function_definition-27-30", method="play_tmstmp19(uint startTime)", type_label=function_definition];
194 [label="27_ uint _vtime = block.timestamp;\n194-new_variable-28-28", method="play_tmstmp19(uint startTime)", type_label=new_variable];
202 [label="28_ if_startTime + (5 * 1 days) == _vtime\n202-if-29-30", method="play_tmstmp19(uint startTime)", type_label=if];
2109 [label="28_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
213 [label="29_ winner_tmstmp19 = msg.sender;\n213-expression_statement-30-30", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
219 [label="30_ function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n219-function_definition-31-31", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
236 [label="31_ address winner_tmstmp26;\n236-new_variable-32-32", method="", type_label=new_variable];
240 [label="32_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n240-function_definition-33-35", method="play_tmstmp26(uint startTime)", type_label=function_definition];
248 [label="33_ if_startTime + (5 * 1 days) == block.timestamp\n248-if-34-35", method="play_tmstmp26(uint startTime)", type_label=if];
2155 [label="33_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
261 [label="34_ winner_tmstmp26 = msg.sender;\n261-expression_statement-35-35", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
267 [label="35_ function transfer(address to, uint tokens) public returns (bool success);\n267-function_definition-36-36", method="transfer(address to,uint tokens)", type_label=function_definition];
283 [label="36_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n283-function_definition-37-45", method="bug_tmstmp20()", type_label=function_definition];
288 [label="37_ uint pastBlockTime_tmstmp20;\n288-new_variable-38-38", method="bug_tmstmp20()", type_label=new_variable];
293 [label="38_ require(msg.value == 10 ether);\n293-expression_statement-39-39", method="bug_tmstmp20()", type_label=expression_statement];
303 [label="39_ require(now != pastBlockTime_tmstmp20);\n303-expression_statement-40-40", method="bug_tmstmp20()", type_label=expression_statement];
310 [label="40_ pastBlockTime_tmstmp20 = now;\n310-expression_statement-41-41", method="bug_tmstmp20()", type_label=expression_statement];
314 [label="41_ if_now % 15 == 0\n314-if-42-44", method="bug_tmstmp20()", type_label=if];
2221 [label="41_ end_if", method="bug_tmstmp20()", type_label=end_if];
321 [label="42_ msg.sender.transfer(address(this).balance);\n321-expression_statement-43-43", method="bug_tmstmp20()", type_label=expression_statement];
334 [label="45_ function approve(address spender, uint tokens) public returns (bool success);\n334-function_definition-46-46", method="approve(address spender,uint tokens)", type_label=function_definition];
350 [label="46_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n350-function_definition-47-55", method="bug_tmstmp32()", type_label=function_definition];
355 [label="47_ uint pastBlockTime_tmstmp32;\n355-new_variable-48-48", method="bug_tmstmp32()", type_label=new_variable];
360 [label="48_ require(msg.value == 10 ether);\n360-expression_statement-49-49", method="bug_tmstmp32()", type_label=expression_statement];
370 [label="49_ require(now != pastBlockTime_tmstmp32);\n370-expression_statement-50-50", method="bug_tmstmp32()", type_label=expression_statement];
377 [label="50_ pastBlockTime_tmstmp32 = now;\n377-expression_statement-51-51", method="bug_tmstmp32()", type_label=expression_statement];
381 [label="51_ if_now % 15 == 0\n381-if-52-54", method="bug_tmstmp32()", type_label=if];
2288 [label="51_ end_if", method="bug_tmstmp32()", type_label=end_if];
388 [label="52_ msg.sender.transfer(address(this).balance);\n388-expression_statement-53-53", method="bug_tmstmp32()", type_label=expression_statement];
401 [label="55_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n401-function_definition-56-56", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
421 [label="56_ address winner_tmstmp38;\n421-new_variable-57-57", method="", type_label=new_variable];
425 [label="57_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n425-function_definition-58-60", method="play_tmstmp38(uint startTime)", type_label=function_definition];
433 [label="58_ if_startTime + (5 * 1 days) == block.timestamp\n433-if-59-60", method="play_tmstmp38(uint startTime)", type_label=if];
2340 [label="58_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
446 [label="59_ winner_tmstmp38 = msg.sender;\n446-expression_statement-60-60", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
452 [label="60_ uint256 bugv_tmstmp2 = block.timestamp;\n452-new_variable-61-61", method="", type_label=new_variable];
473 [label="62_ uint256 bugv_tmstmp3 = block.timestamp;\n473-new_variable-63-63", method="", type_label=new_variable];
497 [label="66_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n497-function_definition-67-67", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
516 [label="67_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n516-function_definition-68-76", method="bug_tmstmp4()", type_label=function_definition];
521 [label="68_ uint pastBlockTime_tmstmp4;\n521-new_variable-69-69", method="bug_tmstmp4()", type_label=new_variable];
526 [label="69_ require(msg.value == 10 ether);\n526-expression_statement-70-70", method="bug_tmstmp4()", type_label=expression_statement];
536 [label="70_ require(now != pastBlockTime_tmstmp4);\n536-expression_statement-71-71", method="bug_tmstmp4()", type_label=expression_statement];
543 [label="71_ pastBlockTime_tmstmp4 = now;\n543-expression_statement-72-72", method="bug_tmstmp4()", type_label=expression_statement];
547 [label="72_ if_now % 15 == 0\n547-if-73-75", method="bug_tmstmp4()", type_label=if];
2454 [label="72_ end_if", method="bug_tmstmp4()", type_label=end_if];
554 [label="73_ msg.sender.transfer(address(this).balance);\n554-expression_statement-74-74", method="bug_tmstmp4()", type_label=expression_statement];
570 [label="78_ function bug_tmstmp12 () public payable {\n	uint pastBlockTime_tmstmp12;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp12);  \n        pastBlockTime_tmstmp12 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n570-function_definition-79-87", method="bug_tmstmp12()", type_label=function_definition];
575 [label="79_ uint pastBlockTime_tmstmp12;\n575-new_variable-80-80", method="bug_tmstmp12()", type_label=new_variable];
580 [label="80_ require(msg.value == 10 ether);\n580-expression_statement-81-81", method="bug_tmstmp12()", type_label=expression_statement];
590 [label="81_ require(now != pastBlockTime_tmstmp12);\n590-expression_statement-82-82", method="bug_tmstmp12()", type_label=expression_statement];
597 [label="82_ pastBlockTime_tmstmp12 = now;\n597-expression_statement-83-83", method="bug_tmstmp12()", type_label=expression_statement];
601 [label="83_ if_now % 15 == 0\n601-if-84-86", method="bug_tmstmp12()", type_label=if];
2508 [label="83_ end_if", method="bug_tmstmp12()", type_label=end_if];
608 [label="84_ msg.sender.transfer(address(this).balance);\n608-expression_statement-85-85", method="bug_tmstmp12()", type_label=expression_statement];
621 [label="87_ address public owner;\n621-new_variable-88-88", method="", type_label=new_variable];
626 [label="88_ address winner_tmstmp11;\n626-new_variable-89-89", method="", type_label=new_variable];
630 [label="89_ function play_tmstmp11(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp11 = msg.sender;}}\n630-function_definition-90-93", method="play_tmstmp11(uint startTime)", type_label=function_definition];
638 [label="90_ uint _vtime = block.timestamp;\n638-new_variable-91-91", method="play_tmstmp11(uint startTime)", type_label=new_variable];
646 [label="91_ if_startTime + (5 * 1 days) == _vtime\n646-if-92-93", method="play_tmstmp11(uint startTime)", type_label=if];
2553 [label="91_ end_if", method="play_tmstmp11(uint startTime)", type_label=end_if];
657 [label="92_ winner_tmstmp11 = msg.sender;\n657-expression_statement-93-93", method="play_tmstmp11(uint startTime)", type_label=expression_statement];
663 [label="93_ address public newOwner;\n663-new_variable-94-94", method="", type_label=new_variable];
668 [label="94_ uint256 bugv_tmstmp4 = block.timestamp;\n668-new_variable-95-95", method="", type_label=new_variable];
687 [label="97_ owner = msg.sender;\n687-expression_statement-98-98", method="", type_label=expression_statement];
693 [label="99_ address winner_tmstmp7;\n693-new_variable-100-100", method="", type_label=new_variable];
697 [label="100_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n697-function_definition-101-104", method="play_tmstmp7(uint startTime)", type_label=function_definition];
705 [label="101_ uint _vtime = block.timestamp;\n705-new_variable-102-102", method="play_tmstmp7(uint startTime)", type_label=new_variable];
713 [label="102_ if_startTime + (5 * 1 days) == _vtime\n713-if-103-104", method="play_tmstmp7(uint startTime)", type_label=if];
2620 [label="102_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
724 [label="103_ winner_tmstmp7 = msg.sender;\n724-expression_statement-104-104", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
730 [label="104_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n730-expression_statement-105-108", method="", type_label=expression_statement];
733 [label="105_ require(msg.sender == owner);\n733-expression_statement-106-106", method="", type_label=expression_statement];
742 [label="106_ _;\n742-expression_statement-107-107", method="", type_label=expression_statement];
744 [label="108_ uint256 bugv_tmstmp1 = block.timestamp;\n744-new_variable-109-109", method="", type_label=new_variable];
751 [label="109_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n751-function_definition-110-112", method="transferOwnership(address _newOwner)", type_label=function_definition];
758 [label="109_ onlyOwner\n758-expression_statement-110-110", method="transferOwnership(address _newOwner)", type_label=expression_statement];
761 [label="110_ newOwner = _newOwner;\n761-expression_statement-111-111", method="transferOwnership(address _newOwner)", type_label=expression_statement];
765 [label="112_ address winner_tmstmp23;\n765-new_variable-113-113", method="", type_label=new_variable];
769 [label="113_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n769-function_definition-114-117", method="play_tmstmp23(uint startTime)", type_label=function_definition];
777 [label="114_ uint _vtime = block.timestamp;\n777-new_variable-115-115", method="play_tmstmp23(uint startTime)", type_label=new_variable];
785 [label="115_ if_startTime + (5 * 1 days) == _vtime\n785-if-116-117", method="play_tmstmp23(uint startTime)", type_label=if];
2692 [label="115_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
796 [label="116_ winner_tmstmp23 = msg.sender;\n796-expression_statement-117-117", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
802 [label="117_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);	 \n        owner = newOwner;\n        newOwner = address(0);\n    }\n802-function_definition-118-123", method="acceptOwnership()", type_label=function_definition];
806 [label="118_ require(msg.sender == newOwner);\n806-expression_statement-119-119", method="acceptOwnership()", type_label=expression_statement];
821 [label="120_ owner = newOwner;\n821-expression_statement-121-121", method="acceptOwnership()", type_label=expression_statement];
825 [label="121_ newOwner = address(0);\n825-expression_statement-122-122", method="acceptOwnership()", type_label=expression_statement];
831 [label="123_ address winner_tmstmp14;\n831-new_variable-124-124", method="", type_label=new_variable];
835 [label="124_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n835-function_definition-125-127", method="play_tmstmp14(uint startTime)", type_label=function_definition];
843 [label="125_ if_startTime + (5 * 1 days) == block.timestamp\n843-if-126-127", method="play_tmstmp14(uint startTime)", type_label=if];
2750 [label="125_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
856 [label="126_ winner_tmstmp14 = msg.sender;\n856-expression_statement-127-127", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
876 [label="130_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n876-function_definition-131-133", method="bug_tmstmp1()", type_label=function_definition];
885 [label="131_ return block.timestamp >= 1546300800;\n885-return-132-132", method="bug_tmstmp1()", type_label=return];
891 [label="133_ string public symbol;\n891-new_variable-134-134", method="", type_label=new_variable];
896 [label="134_ address winner_tmstmp2;\n896-new_variable-135-135", method="", type_label=new_variable];
900 [label="135_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n900-function_definition-136-138", method="play_tmstmp2(uint startTime)", type_label=function_definition];
908 [label="136_ if_startTime + (5 * 1 days) == block.timestamp\n908-if-137-138", method="play_tmstmp2(uint startTime)", type_label=if];
2815 [label="136_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
921 [label="137_ winner_tmstmp2 = msg.sender;\n921-expression_statement-138-138", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
927 [label="138_ string public  name;\n927-new_variable-139-139", method="", type_label=new_variable];
932 [label="139_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n932-function_definition-140-142", method="bug_tmstmp17()", type_label=function_definition];
941 [label="140_ return block.timestamp >= 1546300800;\n941-return-141-141", method="bug_tmstmp17()", type_label=return];
947 [label="142_ uint8 public decimals;\n947-new_variable-143-143", method="", type_label=new_variable];
952 [label="143_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n952-function_definition-144-146", method="bug_tmstmp37()", type_label=function_definition];
961 [label="144_ return block.timestamp >= 1546300800;\n961-return-145-145", method="bug_tmstmp37()", type_label=return];
967 [label="146_ uint _totalSupply;\n967-new_variable-147-147", method="", type_label=new_variable];
971 [label="147_ address winner_tmstmp3;\n971-new_variable-148-148", method="", type_label=new_variable];
975 [label="148_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n975-function_definition-149-152", method="play_tmstmp3(uint startTime)", type_label=function_definition];
983 [label="149_ uint _vtime = block.timestamp;\n983-new_variable-150-150", method="play_tmstmp3(uint startTime)", type_label=new_variable];
991 [label="150_ if_startTime + (5 * 1 days) == _vtime\n991-if-151-152", method="play_tmstmp3(uint startTime)", type_label=if];
2898 [label="150_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
1002 [label="151_ winner_tmstmp3 = msg.sender;\n1002-expression_statement-152-152", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
1008 [label="152_ mapping(address => uint) balances;\n1008-new_variable-153-153", method="", type_label=new_variable];
1014 [label="153_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1014-function_definition-154-156", method="bug_tmstmp9()", type_label=function_definition];
1023 [label="154_ return block.timestamp >= 1546300800;\n1023-return-155-155", method="bug_tmstmp9()", type_label=return];
1029 [label="156_ mapping(address => mapping(address => uint)) allowed;\n1029-new_variable-157-157", method="", type_label=new_variable];
1039 [label="158_ symbol = \"XQC\";\n1039-expression_statement-159-159", method="", type_label=expression_statement];
1044 [label="159_ name = \"Quras Token\";\n1044-expression_statement-160-160", method="", type_label=expression_statement];
1049 [label="160_ decimals = 8;\n1049-expression_statement-161-161", method="", type_label=expression_statement];
1053 [label="161_ _totalSupply = 88888888800000000;\n1053-expression_statement-162-162", method="", type_label=expression_statement];
1057 [label="162_ balances[owner] = _totalSupply;\n1057-expression_statement-163-163", method="", type_label=expression_statement];
1073 [label="165_ address winner_tmstmp30;\n1073-new_variable-166-166", method="", type_label=new_variable];
1077 [label="166_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n1077-function_definition-167-169", method="play_tmstmp30(uint startTime)", type_label=function_definition];
1085 [label="167_ if_startTime + (5 * 1 days) == block.timestamp\n1085-if-168-169", method="play_tmstmp30(uint startTime)", type_label=if];
2992 [label="167_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
1098 [label="168_ winner_tmstmp30 = msg.sender;\n1098-expression_statement-169-169", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
1104 [label="169_ function totalSupply() public view returns (uint) {		 \n        return _totalSupply.sub(balances[address(0)]);\n    }\n1104-function_definition-170-172", method="totalSupply()", type_label=function_definition];
1113 [label="170_ return _totalSupply.sub(balances[address(0)]);\n1113-return-171-171", method="totalSupply()", type_label=return];
1124 [label="172_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1124-function_definition-173-181", method="bug_tmstmp8()", type_label=function_definition];
1129 [label="173_ uint pastBlockTime_tmstmp8;\n1129-new_variable-174-174", method="bug_tmstmp8()", type_label=new_variable];
1134 [label="174_ require(msg.value == 10 ether);\n1134-expression_statement-175-175", method="bug_tmstmp8()", type_label=expression_statement];
1144 [label="175_ require(now != pastBlockTime_tmstmp8);\n1144-expression_statement-176-176", method="bug_tmstmp8()", type_label=expression_statement];
1151 [label="176_ pastBlockTime_tmstmp8 = now;\n1151-expression_statement-177-177", method="bug_tmstmp8()", type_label=expression_statement];
1155 [label="177_ if_now % 15 == 0\n1155-if-178-180", method="bug_tmstmp8()", type_label=if];
3062 [label="177_ end_if", method="bug_tmstmp8()", type_label=end_if];
1162 [label="178_ msg.sender.transfer(address(this).balance);\n1162-expression_statement-179-179", method="bug_tmstmp8()", type_label=expression_statement];
1175 [label="181_ function balanceOf(address tokenOwner) public view returns (uint balance) {		 \n        return balances[tokenOwner];\n    }\n1175-function_definition-182-184", method="balanceOf(address tokenOwner)", type_label=function_definition];
1189 [label="182_ return balances[tokenOwner];\n1189-return-183-183", method="balanceOf(address tokenOwner)", type_label=return];
1193 [label="184_ address winner_tmstmp39;\n1193-new_variable-185-185", method="", type_label=new_variable];
1197 [label="185_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1197-function_definition-186-189", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1205 [label="186_ uint _vtime = block.timestamp;\n1205-new_variable-187-187", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1213 [label="187_ if_startTime + (5 * 1 days) == _vtime\n1213-if-188-189", method="play_tmstmp39(uint startTime)", type_label=if];
3120 [label="187_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1224 [label="188_ winner_tmstmp39 = msg.sender;\n1224-expression_statement-189-189", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1230 [label="189_ function transfer(address to, uint tokens) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);		 \n        return true;\n    }\n1230-function_definition-190-195", method="transfer(address to,uint tokens)", type_label=function_definition];
1247 [label="190_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n1247-expression_statement-191-191", method="transfer(address to,uint tokens)", type_label=expression_statement];
1264 [label="191_ balances[to] = balances[to].add(tokens);\n1264-expression_statement-192-192", method="transfer(address to,uint tokens)", type_label=expression_statement];
1287 [label="193_ return true;\n1287-return-194-194", method="transfer(address to,uint tokens)", type_label=return];
1290 [label="195_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1290-function_definition-196-204", method="bug_tmstmp36()", type_label=function_definition];
1295 [label="196_ uint pastBlockTime_tmstmp36;\n1295-new_variable-197-197", method="bug_tmstmp36()", type_label=new_variable];
1300 [label="197_ require(msg.value == 10 ether);\n1300-expression_statement-198-198", method="bug_tmstmp36()", type_label=expression_statement];
1310 [label="198_ require(now != pastBlockTime_tmstmp36);\n1310-expression_statement-199-199", method="bug_tmstmp36()", type_label=expression_statement];
1317 [label="199_ pastBlockTime_tmstmp36 = now;\n1317-expression_statement-200-200", method="bug_tmstmp36()", type_label=expression_statement];
1321 [label="200_ if_now % 15 == 0\n1321-if-201-203", method="bug_tmstmp36()", type_label=if];
3228 [label="200_ end_if", method="bug_tmstmp36()", type_label=end_if];
1328 [label="201_ msg.sender.transfer(address(this).balance);\n1328-expression_statement-202-202", method="bug_tmstmp36()", type_label=expression_statement];
1341 [label="204_ function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n1341-function_definition-205-209", method="increaseApproval(address _spender,uint _addedValue)", type_label=function_definition];
1357 [label="205_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n1357-expression_statement-206-206", method="increaseApproval(address _spender,uint _addedValue)", type_label=expression_statement];
1394 [label="207_ return true;\n1394-return-208-208", method="increaseApproval(address _spender,uint _addedValue)", type_label=return];
1397 [label="209_ address winner_tmstmp35;\n1397-new_variable-210-210", method="", type_label=new_variable];
1401 [label="210_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1401-function_definition-211-214", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1409 [label="211_ uint _vtime = block.timestamp;\n1409-new_variable-212-212", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1417 [label="212_ if_startTime + (5 * 1 days) == _vtime\n1417-if-213-214", method="play_tmstmp35(uint startTime)", type_label=if];
3324 [label="212_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1428 [label="213_ winner_tmstmp35 = msg.sender;\n1428-expression_statement-214-214", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1434 [label="214_ function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n1434-function_definition-215-224", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=function_definition];
1450 [label="215_ uint oldValue = allowed[msg.sender][_spender];\n1450-new_variable-216-216", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=new_variable];
1462 [label="216_ if__subtractedValue > oldValue\n1462-if-217-221", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=if];
3369 [label="216_ end_if", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=end_if];
1467 [label="217_ allowed[msg.sender][_spender] = 0;\n1467-expression_statement-218-218", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
1478 [label="219_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n1478-expression_statement-220-220", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=expression_statement];
1509 [label="222_ return true;\n1509-return-223-223", method="decreaseApproval(address _spender,uint _subtractedValue)", type_label=return];
1512 [label="224_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1512-function_definition-225-233", method="bug_tmstmp40()", type_label=function_definition];
1517 [label="225_ uint pastBlockTime_tmstmp40;\n1517-new_variable-226-226", method="bug_tmstmp40()", type_label=new_variable];
1522 [label="226_ require(msg.value == 10 ether);\n1522-expression_statement-227-227", method="bug_tmstmp40()", type_label=expression_statement];
1532 [label="227_ require(now != pastBlockTime_tmstmp40);\n1532-expression_statement-228-228", method="bug_tmstmp40()", type_label=expression_statement];
1539 [label="228_ pastBlockTime_tmstmp40 = now;\n1539-expression_statement-229-229", method="bug_tmstmp40()", type_label=expression_statement];
1543 [label="229_ if_now % 15 == 0\n1543-if-230-232", method="bug_tmstmp40()", type_label=if];
3450 [label="229_ end_if", method="bug_tmstmp40()", type_label=end_if];
1550 [label="230_ msg.sender.transfer(address(this).balance);\n1550-expression_statement-231-231", method="bug_tmstmp40()", type_label=expression_statement];
1563 [label="233_ function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);		 \n        return true;\n    }\n1563-function_definition-234-238", method="approve(address spender,uint tokens)", type_label=function_definition];
1580 [label="234_ allowed[msg.sender][spender] = tokens;\n1580-expression_statement-235-235", method="approve(address spender,uint tokens)", type_label=expression_statement];
1600 [label="236_ return true;\n1600-return-237-237", method="approve(address spender,uint tokens)", type_label=return];
1603 [label="238_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1603-function_definition-239-241", method="bug_tmstmp33()", type_label=function_definition];
1612 [label="239_ return block.timestamp >= 1546300800;\n1612-return-240-240", method="bug_tmstmp33()", type_label=return];
1618 [label="241_ function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);		 \n        return true;\n    }\n1618-function_definition-242-248", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
1639 [label="242_ balances[from] = balances[from].sub(tokens);\n1639-expression_statement-243-243", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1652 [label="243_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n1652-expression_statement-244-244", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1673 [label="244_ balances[to] = balances[to].add(tokens);\n1673-expression_statement-245-245", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
1694 [label="246_ return true;\n1694-return-247-247", method="transferFrom(address from,address to,uint tokens)", type_label=return];
1697 [label="248_ address winner_tmstmp27;\n1697-new_variable-249-249", method="", type_label=new_variable];
1701 [label="249_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1701-function_definition-250-253", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1709 [label="250_ uint _vtime = block.timestamp;\n1709-new_variable-251-251", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1717 [label="251_ if_startTime + (5 * 1 days) == _vtime\n1717-if-252-253", method="play_tmstmp27(uint startTime)", type_label=if];
3624 [label="251_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1728 [label="252_ winner_tmstmp27 = msg.sender;\n1728-expression_statement-253-253", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1734 [label="253_ function allowance(address tokenOwner, address spender) public view returns (uint remaining) {		 \n        return allowed[tokenOwner][spender];\n    }\n1734-function_definition-254-256", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
1752 [label="254_ return allowed[tokenOwner][spender];\n1752-return-255-255", method="allowance(address tokenOwner,address spender)", type_label=return];
1758 [label="256_ address winner_tmstmp31;\n1758-new_variable-257-257", method="", type_label=new_variable];
1762 [label="257_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1762-function_definition-258-261", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1770 [label="258_ uint _vtime = block.timestamp;\n1770-new_variable-259-259", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1778 [label="259_ if_startTime + (5 * 1 days) == _vtime\n1778-if-260-261", method="play_tmstmp31(uint startTime)", type_label=if];
3685 [label="259_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1789 [label="260_ winner_tmstmp31 = msg.sender;\n1789-expression_statement-261-261", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1795 [label="261_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);		 \n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n1795-function_definition-262-267", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
1816 [label="262_ allowed[msg.sender][spender] = tokens;\n1816-expression_statement-263-263", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
1836 [label="264_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n1836-expression_statement-265-265", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
1856 [label="265_ return true;\n1856-return-266-266", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
1859 [label="267_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1859-function_definition-268-270", method="bug_tmstmp13()", type_label=function_definition];
1868 [label="268_ return block.timestamp >= 1546300800;\n1868-return-269-269", method="bug_tmstmp13()", type_label=return];
1874 [label="270_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n1874-function_definition-271-273", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
1885 [label="270_ onlyOwner\n1885-expression_statement-271-271", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
1893 [label="271_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n1893-return-272-272", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
1905 [label="273_ uint256 bugv_tmstmp5 = block.timestamp;\n1905-new_variable-274-274", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
567;
862;
1493;
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
186 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 213  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
202 -> 2109  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2109 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 2109  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
240 -> 248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
248 -> 261  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
248 -> 2155  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2155 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 2155  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
283 -> 288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
293 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 321  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
314 -> 2221  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2221 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
321 -> 2221  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
350 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
360 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
381 -> 388  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
381 -> 2288  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2288 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 2288  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
425 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 446  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
433 -> 2340  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2340 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 2340  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
516 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
526 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 554  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
547 -> 2454  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2454 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 2454  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
570 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
590 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 608  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
601 -> 2508  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2508 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
608 -> 2508  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
621 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 657  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
646 -> 2553  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2553 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 2553  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
663 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 724  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
713 -> 2620  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2620 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 2620  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
730 -> 744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
733 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
751 -> 761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
777 -> 785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
785 -> 796  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
785 -> 2692  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2692 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
796 -> 2692  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
802 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 856  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
843 -> 2750  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2750 -> 862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
856 -> 2750  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
876 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
891 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
908 -> 921  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
908 -> 2815  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2815 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 2815  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
932 -> 941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
941 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
952 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
967 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
975 -> 983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
991 -> 1002  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
991 -> 2898  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2898 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 2898  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1014 -> 1023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1023 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1039 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 1057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1085 -> 1098  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1085 -> 2992  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2992 -> 1104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 2992  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1104 -> 1113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1113 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1124 -> 1129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1134 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1151 -> 1155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1155 -> 1162  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1155 -> 3062  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3062 -> 1175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 3062  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1175 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1197 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1205 -> 1213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1213 -> 1224  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1213 -> 3120  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3120 -> 1230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 3120  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1230 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1287 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1290 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1300 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1317 -> 1321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 1328  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1321 -> 3228  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3228 -> 1341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 3228  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1341 -> 1357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1394 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1401 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1409 -> 1417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1417 -> 1428  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1417 -> 3324  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3324 -> 1434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1428 -> 3324  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1434 -> 1450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 1462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1462 -> 1467  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1462 -> 1478  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3369 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 3369  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1478 -> 3369  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1509 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1512 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1517 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1522 -> 1532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1532 -> 1539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1539 -> 1543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1543 -> 1550  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1543 -> 3450  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3450 -> 1563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1550 -> 3450  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1563 -> 1580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1600 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1603 -> 1612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1612 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1618 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1639 -> 1652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1652 -> 1673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1694 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1701 -> 1709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1709 -> 1717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1717 -> 1728  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1717 -> 3624  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3624 -> 1734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1728 -> 3624  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1734 -> 1752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1752 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1762 -> 1770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1770 -> 1778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1778 -> 1789  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1778 -> 3685  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3685 -> 1795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1789 -> 3685  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1795 -> 1816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1836 -> 1856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1856 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1859 -> 1868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1868 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1874 -> 1893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1893 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
