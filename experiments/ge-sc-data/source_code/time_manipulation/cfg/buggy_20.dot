digraph  {
13 [label="2_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n13-function_definition-3-5", method="bug_tmstmp1()", type_label=function_definition];
22 [label="3_ return block.timestamp >= 1546300800;\n22-return-4-4", method="bug_tmstmp1()", type_label=return];
28 [label="5_ address public owner;\n28-new_variable-6-6", method="", type_label=new_variable];
33 [label="6_ uint256 bugv_tmstmp5 = block.timestamp;\n33-new_variable-7-7", method="", type_label=new_variable];
52 [label="9_ owner = msg.sender;\n52-expression_statement-10-10", method="", type_label=expression_statement];
58 [label="11_ address winner_tmstmp19;\n58-new_variable-12-12", method="", type_label=new_variable];
62 [label="12_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n62-function_definition-13-16", method="play_tmstmp19(uint startTime)", type_label=function_definition];
70 [label="13_ uint _vtime = block.timestamp;\n70-new_variable-14-14", method="play_tmstmp19(uint startTime)", type_label=new_variable];
78 [label="14_ if_startTime + (5 * 1 days) == _vtime\n78-if-15-16", method="play_tmstmp19(uint startTime)", type_label=if];
1786 [label="14_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
89 [label="15_ winner_tmstmp19 = msg.sender;\n89-expression_statement-16-16", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
95 [label="16_ modifier onlyOwner() {\n        require(msg.sender == owner, \"only the owner can call this\");\n        _;\n    }\n95-expression_statement-17-20", method="", type_label=expression_statement];
98 [label="17_ require(msg.sender == owner, \"only the owner can call this\");\n98-expression_statement-18-18", method="", type_label=expression_statement];
110 [label="18_ _;\n110-expression_statement-19-19", method="", type_label=expression_statement];
112 [label="20_ function changeOwner(address _newOwner) external onlyOwner {\n        owner = _newOwner;\n        emit OwnerChanged(msg.sender, _newOwner);\n    }\n112-function_definition-21-24", method="changeOwner(address _newOwner)", type_label=function_definition];
119 [label="20_ onlyOwner\n119-expression_statement-21-21", method="changeOwner(address _newOwner)", type_label=expression_statement];
122 [label="21_ owner = _newOwner;\n122-expression_statement-22-22", method="changeOwner(address _newOwner)", type_label=expression_statement];
134 [label="24_ address winner_tmstmp26;\n134-new_variable-25-25", method="", type_label=new_variable];
138 [label="25_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n138-function_definition-26-28", method="play_tmstmp26(uint startTime)", type_label=function_definition];
146 [label="26_ if_startTime + (5 * 1 days) == block.timestamp\n146-if-27-28", method="play_tmstmp26(uint startTime)", type_label=if];
1854 [label="26_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
159 [label="27_ winner_tmstmp26 = msg.sender;\n159-expression_statement-28-28", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
171 [label="30_ address winner_tmstmp2;\n171-new_variable-31-31", method="", type_label=new_variable];
175 [label="31_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n175-function_definition-32-34", method="play_tmstmp2(uint startTime)", type_label=function_definition];
183 [label="32_ if_startTime + (5 * 1 days) == block.timestamp\n183-if-33-34", method="play_tmstmp2(uint startTime)", type_label=if];
1891 [label="32_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
196 [label="33_ winner_tmstmp2 = msg.sender;\n196-expression_statement-34-34", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
202 [label="34_ bool public isActive = true;\n202-new_variable-35-35", method="", type_label=new_variable];
209 [label="35_ uint256 bugv_tmstmp1 = block.timestamp;\n209-new_variable-36-36", method="", type_label=new_variable];
222 [label="37_ modifier onlyActive() {\n        require(isActive, \"contract is stopped\");\n        _;\n    }\n222-expression_statement-38-41", method="", type_label=expression_statement];
225 [label="38_ require(isActive, \"contract is stopped\");\n225-expression_statement-39-39", method="", type_label=expression_statement];
233 [label="39_ _;\n233-expression_statement-40-40", method="", type_label=expression_statement];
235 [label="41_ function setIsActive(bool _isActive) external onlyOwner {\n        if (_isActive == isActive) return;\n        isActive = _isActive;\n        emit IsActiveChanged(_isActive);\n    }\n235-function_definition-42-46", method="setIsActive(bool _isActive)", type_label=function_definition];
242 [label="41_ onlyOwner\n242-expression_statement-42-42", method="setIsActive(bool _isActive)", type_label=expression_statement];
245 [label="42_ if__isActive == isActive\n245-if-43-43", method="setIsActive(bool _isActive)", type_label=if];
1953 [label="42_ end_if", method="setIsActive(bool _isActive)", type_label=end_if];
249 [label="42_ return;\n249-return-43-43", method="setIsActive(bool _isActive)", type_label=return];
250 [label="43_ isActive = _isActive;\n250-expression_statement-44-44", method="setIsActive(bool _isActive)", type_label=expression_statement];
258 [label="46_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n258-function_definition-47-55", method="bug_tmstmp20()", type_label=function_definition];
263 [label="47_ uint pastBlockTime_tmstmp20;\n263-new_variable-48-48", method="bug_tmstmp20()", type_label=new_variable];
268 [label="48_ require(msg.value == 10 ether);\n268-expression_statement-49-49", method="bug_tmstmp20()", type_label=expression_statement];
278 [label="49_ require(now != pastBlockTime_tmstmp20);\n278-expression_statement-50-50", method="bug_tmstmp20()", type_label=expression_statement];
285 [label="50_ pastBlockTime_tmstmp20 = now;\n285-expression_statement-51-51", method="bug_tmstmp20()", type_label=expression_statement];
289 [label="51_ if_now % 15 == 0\n289-if-52-54", method="bug_tmstmp20()", type_label=if];
1997 [label="51_ end_if", method="bug_tmstmp20()", type_label=end_if];
296 [label="52_ msg.sender.transfer(address(this).balance);\n296-expression_statement-53-53", method="bug_tmstmp20()", type_label=expression_statement];
312 [label="57_ uint16 public ASSET_TYPE;\n312-new_variable-58-58", method="", type_label=new_variable];
317 [label="58_ function sendFundsToSwap(uint256 _amount)\n        public   returns(bool success);\n317-function_definition-59-60", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
332 [label="62_ uint16 public ASSET_TYPE;\n332-new_variable-63-63", method="", type_label=new_variable];
337 [label="63_ function release(\n        address _pool,\n        address payable _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    )\n        external;\n337-function_definition-64-71", method="release(address _pool,address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
360 [label="71_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n360-function_definition-72-80", method="bug_tmstmp32()", type_label=function_definition];
365 [label="72_ uint pastBlockTime_tmstmp32;\n365-new_variable-73-73", method="bug_tmstmp32()", type_label=new_variable];
370 [label="73_ require(msg.value == 10 ether);\n370-expression_statement-74-74", method="bug_tmstmp32()", type_label=expression_statement];
380 [label="74_ require(now != pastBlockTime_tmstmp32);\n380-expression_statement-75-75", method="bug_tmstmp32()", type_label=expression_statement];
387 [label="75_ pastBlockTime_tmstmp32 = now;\n387-expression_statement-76-76", method="bug_tmstmp32()", type_label=expression_statement];
391 [label="76_ if_now % 15 == 0\n391-if-77-79", method="bug_tmstmp32()", type_label=if];
2099 [label="76_ end_if", method="bug_tmstmp32()", type_label=end_if];
398 [label="77_ msg.sender.transfer(address(this).balance);\n398-expression_statement-78-78", method="bug_tmstmp32()", type_label=expression_statement];
411 [label="80_ function returnFunds(\n        address payable _pool,\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    )\n        external;\n411-function_definition-81-88", method="returnFunds(address payable _pool,address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
434 [label="88_ address winner_tmstmp38;\n434-new_variable-89-89", method="", type_label=new_variable];
438 [label="89_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n438-function_definition-90-92", method="play_tmstmp38(uint startTime)", type_label=function_definition];
446 [label="90_ if_startTime + (5 * 1 days) == block.timestamp\n446-if-91-92", method="play_tmstmp38(uint startTime)", type_label=if];
2154 [label="90_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
459 [label="91_ winner_tmstmp38 = msg.sender;\n459-expression_statement-92-92", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
477 [label="94_ uint256 constant private MAX_SWAP_AMOUNT_LIMIT = 1 << 240;\n477-new_variable-95-95", method="", type_label=new_variable];
485 [label="95_ uint16 public ASSET_TYPE;\n485-new_variable-96-96", method="", type_label=new_variable];
490 [label="96_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n490-function_definition-97-99", method="bug_tmstmp17()", type_label=function_definition];
499 [label="97_ return block.timestamp >= 1546300800;\n499-return-98-98", method="bug_tmstmp17()", type_label=return];
505 [label="99_ address payable public swapsContract;\n505-new_variable-100-100", method="", type_label=new_variable];
510 [label="100_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n510-function_definition-101-103", method="bug_tmstmp37()", type_label=function_definition];
519 [label="101_ return block.timestamp >= 1546300800;\n519-return-102-102", method="bug_tmstmp37()", type_label=return];
525 [label="103_ uint256 public minSwapAmount;\n525-new_variable-104-104", method="", type_label=new_variable];
530 [label="104_ address winner_tmstmp3;\n530-new_variable-105-105", method="", type_label=new_variable];
534 [label="105_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n534-function_definition-106-109", method="play_tmstmp3(uint startTime)", type_label=function_definition];
542 [label="106_ uint _vtime = block.timestamp;\n542-new_variable-107-107", method="play_tmstmp3(uint startTime)", type_label=new_variable];
550 [label="107_ if_startTime + (5 * 1 days) == _vtime\n550-if-108-109", method="play_tmstmp3(uint startTime)", type_label=if];
2258 [label="107_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
561 [label="108_ winner_tmstmp3 = msg.sender;\n561-expression_statement-109-109", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
567 [label="109_ uint256 public maxSwapAmount;\n567-new_variable-110-110", method="", type_label=new_variable];
572 [label="110_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n572-function_definition-111-113", method="bug_tmstmp9()", type_label=function_definition];
581 [label="111_ return block.timestamp >= 1546300800;\n581-return-112-112", method="bug_tmstmp9()", type_label=return];
587 [label="113_ bytes32 public paymentDetailsHash;\n587-new_variable-114-114", method="", type_label=new_variable];
592 [label="114_ uint256 bugv_tmstmp2 = block.timestamp;\n592-new_variable-115-115", method="", type_label=new_variable];
609 [label="116_ uint256 bugv_tmstmp3 = block.timestamp;\n609-new_variable-117-117", method="", type_label=new_variable];
626 [label="118_ uint256 bugv_tmstmp4 = block.timestamp;\n626-new_variable-119-119", method="", type_label=new_variable];
664 [label="128_ validateLimits(_minSwapAmount, _maxSwapAmount)\n664-expression_statement-129-129", method="", type_label=expression_statement];
670 [label="129_ validateSwapsContract(_swapsContract, _assetType)\n670-expression_statement-130-130", method="", type_label=expression_statement];
677 [label="131_ swapsContract = _swapsContract;\n677-expression_statement-132-132", method="", type_label=expression_statement];
681 [label="132_ paymentDetailsHash = _paymentDetailsHash;\n681-expression_statement-133-133", method="", type_label=expression_statement];
685 [label="133_ minSwapAmount = _minSwapAmount;\n685-expression_statement-134-134", method="", type_label=expression_statement];
689 [label="134_ maxSwapAmount = _maxSwapAmount;\n689-expression_statement-135-135", method="", type_label=expression_statement];
693 [label="135_ ASSET_TYPE = _assetType;\n693-expression_statement-136-136", method="", type_label=expression_statement];
697 [label="137_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n697-function_definition-138-146", method="bug_tmstmp4()", type_label=function_definition];
702 [label="138_ uint pastBlockTime_tmstmp4;\n702-new_variable-139-139", method="bug_tmstmp4()", type_label=new_variable];
707 [label="139_ require(msg.value == 10 ether);\n707-expression_statement-140-140", method="bug_tmstmp4()", type_label=expression_statement];
717 [label="140_ require(now != pastBlockTime_tmstmp4);\n717-expression_statement-141-141", method="bug_tmstmp4()", type_label=expression_statement];
724 [label="141_ pastBlockTime_tmstmp4 = now;\n724-expression_statement-142-142", method="bug_tmstmp4()", type_label=expression_statement];
728 [label="142_ if_now % 15 == 0\n728-if-143-145", method="bug_tmstmp4()", type_label=if];
2436 [label="142_ end_if", method="bug_tmstmp4()", type_label=end_if];
735 [label="143_ msg.sender.transfer(address(this).balance);\n735-expression_statement-144-144", method="bug_tmstmp4()", type_label=expression_statement];
748 [label="146_ function availableFunds() public view returns (uint256);\n748-function_definition-147-147", method="availableFunds()", type_label=function_definition];
756 [label="147_ address winner_tmstmp7;\n756-new_variable-148-148", method="", type_label=new_variable];
760 [label="148_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n760-function_definition-149-152", method="play_tmstmp7(uint startTime)", type_label=function_definition];
768 [label="149_ uint _vtime = block.timestamp;\n768-new_variable-150-150", method="play_tmstmp7(uint startTime)", type_label=new_variable];
776 [label="150_ if_startTime + (5 * 1 days) == _vtime\n776-if-151-152", method="play_tmstmp7(uint startTime)", type_label=if];
2484 [label="150_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
787 [label="151_ winner_tmstmp7 = msg.sender;\n787-expression_statement-152-152", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
793 [label="152_ function withdrawFunds(address payable _to, uint256 _amount)\n        public   returns (bool success);\n793-function_definition-153-154", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=function_definition];
809 [label="154_ address winner_tmstmp23;\n809-new_variable-155-155", method="", type_label=new_variable];
813 [label="155_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n813-function_definition-156-159", method="play_tmstmp23(uint startTime)", type_label=function_definition];
821 [label="156_ uint _vtime = block.timestamp;\n821-new_variable-157-157", method="play_tmstmp23(uint startTime)", type_label=new_variable];
829 [label="157_ if_startTime + (5 * 1 days) == _vtime\n829-if-158-159", method="play_tmstmp23(uint startTime)", type_label=if];
2537 [label="157_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
840 [label="158_ winner_tmstmp23 = msg.sender;\n840-expression_statement-159-159", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
846 [label="159_ function withdrawAllFunds(address payable _to) public onlyOwner returns (bool success) {\n        return withdrawFunds(_to, availableFunds());\n    }\n846-function_definition-160-162", method="withdrawAllFunds(address payable _to)", type_label=function_definition];
853 [label="159_ onlyOwner\n853-expression_statement-160-160", method="withdrawAllFunds(address payable _to)", type_label=expression_statement];
861 [label="160_ return withdrawFunds(_to, availableFunds());\n861-return-161-161", method="withdrawAllFunds(address payable _to)", type_label=return];
869 [label="162_ address winner_tmstmp14;\n869-new_variable-163-163", method="", type_label=new_variable];
873 [label="163_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n873-function_definition-164-166", method="play_tmstmp14(uint startTime)", type_label=function_definition];
881 [label="164_ if_startTime + (5 * 1 days) == block.timestamp\n881-if-165-166", method="play_tmstmp14(uint startTime)", type_label=if];
2589 [label="164_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
894 [label="165_ winner_tmstmp14 = msg.sender;\n894-expression_statement-166-166", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
900 [label="166_ function setLimits(\n        uint256 _minAmount,\n        uint256 _maxAmount\n    ) public onlyOwner validateLimits(_minAmount, _maxAmount) {\n        minSwapAmount = _minAmount;\n        maxSwapAmount = _maxAmount;\n        emit LimitsChanged(_minAmount, _maxAmount);\n    }\n900-function_definition-167-174", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=function_definition];
911 [label="169_ onlyOwner\n911-expression_statement-170-170", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
913 [label="169_ validateLimits(_minAmount, _maxAmount)\n913-expression_statement-170-170", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
920 [label="170_ minSwapAmount = _minAmount;\n920-expression_statement-171-171", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
924 [label="171_ maxSwapAmount = _maxAmount;\n924-expression_statement-172-172", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
934 [label="174_ address winner_tmstmp30;\n934-new_variable-175-175", method="", type_label=new_variable];
938 [label="175_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n938-function_definition-176-178", method="play_tmstmp30(uint startTime)", type_label=function_definition];
946 [label="176_ if_startTime + (5 * 1 days) == block.timestamp\n946-if-177-178", method="play_tmstmp30(uint startTime)", type_label=if];
2654 [label="176_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
959 [label="177_ winner_tmstmp30 = msg.sender;\n959-expression_statement-178-178", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
965 [label="178_ function setSwapsContract(\n        address payable _swapsContract\n    ) public onlyOwner validateSwapsContract(_swapsContract, ASSET_TYPE) {\n        address oldSwapsContract = swapsContract;\n        swapsContract = _swapsContract;\n        emit SwapsContractChanged(oldSwapsContract, _swapsContract);\n    }\n965-function_definition-179-185", method="setSwapsContract(address payable _swapsContract)", type_label=function_definition];
972 [label="180_ onlyOwner\n972-expression_statement-181-181", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
974 [label="180_ validateSwapsContract(_swapsContract, ASSET_TYPE)\n974-expression_statement-181-181", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
981 [label="181_ address oldSwapsContract = swapsContract;\n981-new_variable-182-182", method="setSwapsContract(address payable _swapsContract)", type_label=new_variable];
987 [label="182_ swapsContract = _swapsContract;\n987-expression_statement-183-183", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
997 [label="185_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n997-function_definition-186-194", method="bug_tmstmp8()", type_label=function_definition];
1002 [label="186_ uint pastBlockTime_tmstmp8;\n1002-new_variable-187-187", method="bug_tmstmp8()", type_label=new_variable];
1007 [label="187_ require(msg.value == 10 ether);\n1007-expression_statement-188-188", method="bug_tmstmp8()", type_label=expression_statement];
1017 [label="188_ require(now != pastBlockTime_tmstmp8);\n1017-expression_statement-189-189", method="bug_tmstmp8()", type_label=expression_statement];
1024 [label="189_ pastBlockTime_tmstmp8 = now;\n1024-expression_statement-190-190", method="bug_tmstmp8()", type_label=expression_statement];
1028 [label="190_ if_now % 15 == 0\n1028-if-191-193", method="bug_tmstmp8()", type_label=if];
2736 [label="190_ end_if", method="bug_tmstmp8()", type_label=end_if];
1035 [label="191_ msg.sender.transfer(address(this).balance);\n1035-expression_statement-192-192", method="bug_tmstmp8()", type_label=expression_statement];
1048 [label="194_ function sendFundsToSwap(uint256 _amount)\n        public   returns(bool success);\n1048-function_definition-195-196", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
1060 [label="196_ function releaseSwap(\n        address payable _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external onlyOwner {\n        RampInstantEscrowsPoolInterface(swapsContract).release(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n    }\n1060-function_definition-197-210", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
1079 [label="201_ onlyOwner\n1079-expression_statement-202-202", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1082 [label="202_ RampInstantEscrowsPoolInterface(swapsContract).release(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n1082-expression_statement-203-209", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1102 [label="210_ address winner_tmstmp39;\n1102-new_variable-211-211", method="", type_label=new_variable];
1106 [label="211_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1106-function_definition-212-215", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1114 [label="212_ uint _vtime = block.timestamp;\n1114-new_variable-213-213", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1122 [label="213_ if_startTime + (5 * 1 days) == _vtime\n1122-if-214-215", method="play_tmstmp39(uint startTime)", type_label=if];
2830 [label="213_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1133 [label="214_ winner_tmstmp39 = msg.sender;\n1133-expression_statement-215-215", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1139 [label="215_ function returnSwap(\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external onlyOwner {\n        RampInstantEscrowsPoolInterface(swapsContract).returnFunds(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n    }\n1139-function_definition-216-229", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
1158 [label="220_ onlyOwner\n1158-expression_statement-221-221", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1161 [label="221_ RampInstantEscrowsPoolInterface(swapsContract).returnFunds(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n1161-expression_statement-222-228", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
1181 [label="229_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1181-function_definition-230-238", method="bug_tmstmp36()", type_label=function_definition];
1186 [label="230_ uint pastBlockTime_tmstmp36;\n1186-new_variable-231-231", method="bug_tmstmp36()", type_label=new_variable];
1191 [label="231_ require(msg.value == 10 ether);\n1191-expression_statement-232-232", method="bug_tmstmp36()", type_label=expression_statement];
1201 [label="232_ require(now != pastBlockTime_tmstmp36);\n1201-expression_statement-233-233", method="bug_tmstmp36()", type_label=expression_statement];
1208 [label="233_ pastBlockTime_tmstmp36 = now;\n1208-expression_statement-234-234", method="bug_tmstmp36()", type_label=expression_statement];
1212 [label="234_ if_now % 15 == 0\n1212-if-235-237", method="bug_tmstmp36()", type_label=if];
2920 [label="234_ end_if", method="bug_tmstmp36()", type_label=end_if];
1219 [label="235_ msg.sender.transfer(address(this).balance);\n1219-expression_statement-236-236", method="bug_tmstmp36()", type_label=expression_statement];
1240 [label="241_ address winner_tmstmp35;\n1240-new_variable-242-242", method="", type_label=new_variable];
1244 [label="242_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1244-function_definition-243-246", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1252 [label="243_ uint _vtime = block.timestamp;\n1252-new_variable-244-244", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1260 [label="244_ if_startTime + (5 * 1 days) == _vtime\n1260-if-245-246", method="play_tmstmp35(uint startTime)", type_label=if];
2968 [label="244_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1271 [label="245_ winner_tmstmp35 = msg.sender;\n1271-expression_statement-246-246", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1277 [label="246_ modifier onlySwapsContract() {\n        require(msg.sender == swapsContract, \"only the swaps contract can call this\");\n        _;\n    }\n1277-expression_statement-247-250", method="", type_label=expression_statement];
1280 [label="247_ require(msg.sender == swapsContract, \"only the swaps contract can call this\");\n1280-expression_statement-248-248", method="", type_label=expression_statement];
1292 [label="248_ _;\n1292-expression_statement-249-249", method="", type_label=expression_statement];
1294 [label="250_ modifier isWithinLimits(uint256 _amount) {\n        require(_amount >= minSwapAmount && _amount <= maxSwapAmount, \"amount outside swap limits\");\n        _;\n    }\n1294-expression_statement-251-254", method="", type_label=expression_statement];
1301 [label="251_ require(_amount >= minSwapAmount && _amount <= maxSwapAmount, \"amount outside swap limits\");\n1301-expression_statement-252-252", method="", type_label=expression_statement];
1315 [label="252_ _;\n1315-expression_statement-253-253", method="", type_label=expression_statement];
1317 [label="254_ modifier validateLimits(uint256 _minAmount, uint256 _maxAmount) {\n        require(_minAmount <= _maxAmount, \"min limit over max limit\");\n        require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, \"maxAmount too high\");\n        _;\n    }\n1317-expression_statement-255-259", method="", type_label=expression_statement];
1328 [label="255_ require(_minAmount <= _maxAmount, \"min limit over max limit\");\n1328-expression_statement-256-256", method="", type_label=expression_statement];
1338 [label="256_ require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, \"maxAmount too high\");\n1338-expression_statement-257-257", method="", type_label=expression_statement];
1348 [label="257_ _;\n1348-expression_statement-258-258", method="", type_label=expression_statement];
1350 [label="259_ modifier validateSwapsContract(address payable _swapsContract, uint16 _assetType) {\n        require(_swapsContract != address(0), \"null swaps contract address\");\n        require(\n            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,\n            \"pool asset type doesn't match swap contract\"\n        );\n        _;\n    }\n1350-expression_statement-260-267", method="", type_label=expression_statement];
1361 [label="260_ require(_swapsContract != address(0), \"null swaps contract address\");\n1361-expression_statement-261-261", method="", type_label=expression_statement];
1373 [label="261_ require(\n            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,\n            \"pool asset type doesn't match swap contract\"\n        );\n1373-expression_statement-262-265", method="", type_label=expression_statement];
1389 [label="265_ _;\n1389-expression_statement-266-266", method="", type_label=expression_statement];
1397 [label="269_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1397-function_definition-270-272", method="bug_tmstmp25()", type_label=function_definition];
1406 [label="270_ return block.timestamp >= 1546300800;\n1406-return-271-271", method="bug_tmstmp25()", type_label=return];
1412 [label="272_ uint16 internal constant ETH_TYPE_ID = 1;\n1412-new_variable-273-273", method="", type_label=new_variable];
1435 [label="280_ RampInstantPool(\n            _swapsContract, _minSwapAmount, _maxSwapAmount, _paymentDetailsHash, ETH_TYPE_ID\n        )\n1435-expression_statement-281-283", method="", type_label=expression_statement];
1448 [label="284_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1448-function_definition-285-293", method="bug_tmstmp40()", type_label=function_definition];
1453 [label="285_ uint pastBlockTime_tmstmp40;\n1453-new_variable-286-286", method="bug_tmstmp40()", type_label=new_variable];
1458 [label="286_ require(msg.value == 10 ether);\n1458-expression_statement-287-287", method="bug_tmstmp40()", type_label=expression_statement];
1468 [label="287_ require(now != pastBlockTime_tmstmp40);\n1468-expression_statement-288-288", method="bug_tmstmp40()", type_label=expression_statement];
1475 [label="288_ pastBlockTime_tmstmp40 = now;\n1475-expression_statement-289-289", method="bug_tmstmp40()", type_label=expression_statement];
1479 [label="289_ if_now % 15 == 0\n1479-if-290-292", method="bug_tmstmp40()", type_label=if];
3187 [label="289_ end_if", method="bug_tmstmp40()", type_label=end_if];
1486 [label="290_ msg.sender.transfer(address(this).balance);\n1486-expression_statement-291-291", method="bug_tmstmp40()", type_label=expression_statement];
1499 [label="293_ function availableFunds() public view returns(uint256) {\n        return address(this).balance;\n    }\n1499-function_definition-294-296", method="availableFunds()", type_label=function_definition];
1508 [label="294_ return address(this).balance;\n1508-return-295-295", method="availableFunds()", type_label=return];
1514 [label="296_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1514-function_definition-297-299", method="bug_tmstmp33()", type_label=function_definition];
1523 [label="297_ return block.timestamp >= 1546300800;\n1523-return-298-298", method="bug_tmstmp33()", type_label=return];
1529 [label="299_ function withdrawFunds(\n        address payable _to,\n        uint256 _amount\n    ) public onlyOwner returns (bool success) {\n        _to.transfer(_amount);   \n        return true;\n    }\n1529-function_definition-300-306", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=function_definition];
1540 [label="302_ onlyOwner\n1540-expression_statement-303-303", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=expression_statement];
1548 [label="303_ _to.transfer(_amount);\n1548-expression_statement-304-304", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=expression_statement];
1555 [label="304_ return true;\n1555-return-305-305", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=return];
1558 [label="306_ address winner_tmstmp27;\n1558-new_variable-307-307", method="", type_label=new_variable];
1562 [label="307_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1562-function_definition-308-311", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1570 [label="308_ uint _vtime = block.timestamp;\n1570-new_variable-309-309", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1578 [label="309_ if_startTime + (5 * 1 days) == _vtime\n1578-if-310-311", method="play_tmstmp27(uint startTime)", type_label=if];
3286 [label="309_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1589 [label="310_ winner_tmstmp27 = msg.sender;\n1589-expression_statement-311-311", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1595 [label="311_ function sendFundsToSwap(\n        uint256 _amount\n    ) public onlyActive onlySwapsContract isWithinLimits(_amount) returns(bool success) {\n        swapsContract.transfer(_amount);   \n        return true;\n    }\n1595-function_definition-312-317", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
1602 [label="313_ onlyActive\n1602-expression_statement-314-314", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1604 [label="313_ onlySwapsContract\n1604-expression_statement-314-314", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1606 [label="313_ isWithinLimits(_amount)\n1606-expression_statement-314-314", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1616 [label="314_ swapsContract.transfer(_amount);\n1616-expression_statement-315-315", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1623 [label="315_ return true;\n1623-return-316-316", method="sendFundsToSwap(uint256 _amount)", type_label=return];
1626 [label="317_ address winner_tmstmp31;\n1626-new_variable-318-318", method="", type_label=new_variable];
1630 [label="318_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1630-function_definition-319-322", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1638 [label="319_ uint _vtime = block.timestamp;\n1638-new_variable-320-320", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1646 [label="320_ if_startTime + (5 * 1 days) == _vtime\n1646-if-321-322", method="play_tmstmp31(uint startTime)", type_label=if];
3354 [label="320_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1657 [label="321_ winner_tmstmp31 = msg.sender;\n1657-expression_statement-322-322", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1667 [label="323_ require(msg.data.length == 0, \"invalid pool function called\");\n1667-expression_statement-324-324", method="", type_label=expression_statement];
1681 [label="324_ if_msg.sender != swapsContract\n1681-if-325-327", method="", type_label=if];
3389 [label="324_ end_if", method="", type_label=end_if];
1698 [label="328_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1698-function_definition-329-331", method="bug_tmstmp13()", type_label=function_definition];
1707 [label="329_ return block.timestamp >= 1546300800;\n1707-return-330-330", method="bug_tmstmp13()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
165;
309;
465;
1232;
1663;
13 -> 22  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
22 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
28 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
70 -> 78  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
78 -> 89  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
78 -> 1786  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1786 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
89 -> 1786  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
98 -> 110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 159  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> 1854  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1854 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 1854  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
175 -> 183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
183 -> 196  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
183 -> 1891  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1891 -> 202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 1891  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
202 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 249  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
245 -> 1953  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1953 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 1953  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
249 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
258 -> 263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
268 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 296  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
289 -> 1997  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1997 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 1997  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
360 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
370 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
380 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 398  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
391 -> 2099  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2099 -> 411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 2099  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
438 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 459  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
446 -> 2154  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2154 -> 465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
459 -> 2154  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
477 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
499 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
510 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
525 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
534 -> 542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
542 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 561  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
550 -> 2258  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2258 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 2258  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
572 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
587 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
728 -> 735  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
728 -> 2436  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2436 -> 748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 2436  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
760 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 787  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
776 -> 2484  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2484 -> 793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 2484  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
813 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
829 -> 840  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
829 -> 2537  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2537 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 2537  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
846 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
873 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 894  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
881 -> 2589  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2589 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
894 -> 2589  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
900 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
920 -> 924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
938 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
946 -> 959  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
946 -> 2654  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2654 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 2654  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
965 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 1007  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1007 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1024 -> 1028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1028 -> 1035  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1028 -> 2736  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2736 -> 1048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 2736  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1060 -> 1082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1114 -> 1122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1122 -> 1133  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1122 -> 2830  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2830 -> 1139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 2830  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1139 -> 1161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1191 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 1219  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1212 -> 2920  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2920 -> 1232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 2920  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1244 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1252 -> 1260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1271  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1260 -> 2968  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2968 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 2968  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1277 -> 1294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1280 -> 1292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1294 -> 1317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1317 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 1338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1338 -> 1348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1361 -> 1373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1373 -> 1389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1397 -> 1406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1406 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1448 -> 1453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1453 -> 1458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1458 -> 1468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1468 -> 1475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1475 -> 1479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1479 -> 1486  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1479 -> 3187  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3187 -> 1499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 3187  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1499 -> 1508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1508 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1514 -> 1523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1523 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1529 -> 1548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1548 -> 1555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1555 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1562 -> 1570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1570 -> 1578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1578 -> 1589  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1578 -> 3286  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3286 -> 1595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1589 -> 3286  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1595 -> 1616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1604 -> 1606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1616 -> 1623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1623 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1630 -> 1638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1638 -> 1646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1646 -> 1657  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1646 -> 3354  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3354 -> 1663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1657 -> 3354  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1667 -> 1681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1681 -> 3389  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1698 -> 1707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1707 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
