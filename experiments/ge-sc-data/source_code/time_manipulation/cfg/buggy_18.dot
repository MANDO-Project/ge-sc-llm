digraph  {
13 [label="2_ function add(uint a, uint b) internal pure returns(uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n13-function_definition-3-6", method="add(uint a,uint b)", type_label=function_definition];
31 [label="3_ c = a + b;\n31-expression_statement-4-4", method="add(uint a,uint b)", type_label=expression_statement];
37 [label="4_ require(c >= a);\n37-expression_statement-5-5", method="add(uint a,uint b)", type_label=expression_statement];
44 [label="6_ function sub(uint a, uint b) internal pure returns(uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n44-function_definition-7-10", method="sub(uint a,uint b)", type_label=function_definition];
62 [label="7_ require(b <= a);\n62-expression_statement-8-8", method="sub(uint a,uint b)", type_label=expression_statement];
69 [label="8_ c = a - b;\n69-expression_statement-9-9", method="sub(uint a,uint b)", type_label=expression_statement];
75 [label="10_ function mul(uint a, uint b) internal pure returns(uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n75-function_definition-11-14", method="mul(uint a,uint b)", type_label=function_definition];
93 [label="11_ c = a * b;\n93-expression_statement-12-12", method="mul(uint a,uint b)", type_label=expression_statement];
99 [label="12_ require(a == 0 || c / a == b);\n99-expression_statement-13-13", method="mul(uint a,uint b)", type_label=expression_statement];
112 [label="14_ function div(uint a, uint b) internal pure returns(uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n112-function_definition-15-18", method="div(uint a,uint b)", type_label=function_definition];
130 [label="15_ require(b > 0);\n130-expression_statement-16-16", method="div(uint a,uint b)", type_label=expression_statement];
137 [label="16_ c = a / b;\n137-expression_statement-17-17", method="div(uint a,uint b)", type_label=expression_statement];
146 [label="20_ function limitLessThan(uint a, uint b) internal pure returns(uint c) {\n        if (a > b) return b;\n        return a;\n    }\n146-function_definition-21-24", method="limitLessThan(uint a,uint b)", type_label=function_definition];
164 [label="21_ if_a > b\n164-if-22-22", method="limitLessThan(uint a,uint b)", type_label=if];
3157 [label="21_ end_if", method="limitLessThan(uint a,uint b)", type_label=end_if];
168 [label="21_ return b;\n168-return-22-22", method="limitLessThan(uint a,uint b)", type_label=return];
170 [label="22_ return a;\n170-return-23-23", method="limitLessThan(uint a,uint b)", type_label=return];
175 [label="26_ function totalSupply() public view returns(uint);\n175-function_definition-27-27", method="totalSupply()", type_label=function_definition];
183 [label="27_ address winner_tmstmp22;\n183-new_variable-28-28", method="", type_label=new_variable];
187 [label="28_ function play_tmstmp22(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp22 = msg.sender;}}\n187-function_definition-29-31", method="play_tmstmp22(uint startTime)", type_label=function_definition];
195 [label="29_ if_startTime + (5 * 1 days) == block.timestamp\n195-if-30-31", method="play_tmstmp22(uint startTime)", type_label=if];
3188 [label="29_ end_if", method="play_tmstmp22(uint startTime)", type_label=end_if];
208 [label="30_ winner_tmstmp22 = msg.sender;\n208-expression_statement-31-31", method="play_tmstmp22(uint startTime)", type_label=expression_statement];
214 [label="31_ function balanceOf(address tokenOwner) public view returns(uint balance);\n214-function_definition-32-32", method="balanceOf(address tokenOwner)", type_label=function_definition];
227 [label="32_ function bug_tmstmp12 () public payable {\n	uint pastBlockTime_tmstmp12;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp12);  \n        pastBlockTime_tmstmp12 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n227-function_definition-33-41", method="bug_tmstmp12()", type_label=function_definition];
232 [label="33_ uint pastBlockTime_tmstmp12;\n232-new_variable-34-34", method="bug_tmstmp12()", type_label=new_variable];
237 [label="34_ require(msg.value == 10 ether);\n237-expression_statement-35-35", method="bug_tmstmp12()", type_label=expression_statement];
247 [label="35_ require(now != pastBlockTime_tmstmp12);\n247-expression_statement-36-36", method="bug_tmstmp12()", type_label=expression_statement];
254 [label="36_ pastBlockTime_tmstmp12 = now;\n254-expression_statement-37-37", method="bug_tmstmp12()", type_label=expression_statement];
258 [label="37_ if_now % 15 == 0\n258-if-38-40", method="bug_tmstmp12()", type_label=if];
3251 [label="37_ end_if", method="bug_tmstmp12()", type_label=end_if];
265 [label="38_ msg.sender.transfer(address(this).balance);\n265-expression_statement-39-39", method="bug_tmstmp12()", type_label=expression_statement];
278 [label="41_ function allowance(address tokenOwner, address spender) public view returns(uint remaining);\n278-function_definition-42-42", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
295 [label="42_ address winner_tmstmp11;\n295-new_variable-43-43", method="", type_label=new_variable];
299 [label="43_ function play_tmstmp11(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp11 = msg.sender;}}\n299-function_definition-44-47", method="play_tmstmp11(uint startTime)", type_label=function_definition];
307 [label="44_ uint _vtime = block.timestamp;\n307-new_variable-45-45", method="play_tmstmp11(uint startTime)", type_label=new_variable];
315 [label="45_ if_startTime + (5 * 1 days) == _vtime\n315-if-46-47", method="play_tmstmp11(uint startTime)", type_label=if];
3308 [label="45_ end_if", method="play_tmstmp11(uint startTime)", type_label=end_if];
326 [label="46_ winner_tmstmp11 = msg.sender;\n326-expression_statement-47-47", method="play_tmstmp11(uint startTime)", type_label=expression_statement];
332 [label="47_ function transfer(address to, uint tokens) public returns(bool success);\n332-function_definition-48-48", method="transfer(address to,uint tokens)", type_label=function_definition];
348 [label="48_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n348-function_definition-49-51", method="bug_tmstmp1()", type_label=function_definition];
357 [label="49_ return block.timestamp >= 1546300800;\n357-return-50-50", method="bug_tmstmp1()", type_label=return];
363 [label="51_ function approve(address spender, uint tokens) public returns(bool success);\n363-function_definition-52-52", method="approve(address spender,uint tokens)", type_label=function_definition];
379 [label="52_ address winner_tmstmp2;\n379-new_variable-53-53", method="", type_label=new_variable];
383 [label="53_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n383-function_definition-54-56", method="play_tmstmp2(uint startTime)", type_label=function_definition];
391 [label="54_ if_startTime + (5 * 1 days) == block.timestamp\n391-if-55-56", method="play_tmstmp2(uint startTime)", type_label=if];
3384 [label="54_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
404 [label="55_ winner_tmstmp2 = msg.sender;\n404-expression_statement-56-56", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
410 [label="56_ function transferFrom(address from, address to, uint tokens) public returns(bool success);\n410-function_definition-57-57", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
430 [label="57_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n430-function_definition-58-60", method="bug_tmstmp17()", type_label=function_definition];
439 [label="58_ return block.timestamp >= 1546300800;\n439-return-59-59", method="bug_tmstmp17()", type_label=return];
445 [label="60_ uint256 bugv_tmstmp1 = block.timestamp;\n445-new_variable-61-61", method="", type_label=new_variable];
466 [label="62_ uint256 bugv_tmstmp2 = block.timestamp;\n466-new_variable-63-63", method="", type_label=new_variable];
490 [label="66_ function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n490-function_definition-67-67", method="receiveApproval(address from,uint256 tokens,address token,bytes memory data)", type_label=function_definition];
509 [label="67_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n509-function_definition-68-70", method="bug_tmstmp37()", type_label=function_definition];
518 [label="68_ return block.timestamp >= 1546300800;\n518-return-69-69", method="bug_tmstmp37()", type_label=return];
527 [label="72_ address public owner;\n527-new_variable-73-73", method="", type_label=new_variable];
532 [label="73_ address public newOwner;\n532-new_variable-74-74", method="", type_label=new_variable];
537 [label="74_ uint256 bugv_tmstmp3 = block.timestamp;\n537-new_variable-75-75", method="", type_label=new_variable];
556 [label="77_ owner = msg.sender;\n556-expression_statement-78-78", method="", type_label=expression_statement];
562 [label="79_ address winner_tmstmp3;\n562-new_variable-80-80", method="", type_label=new_variable];
566 [label="80_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n566-function_definition-81-84", method="play_tmstmp3(uint startTime)", type_label=function_definition];
574 [label="81_ uint _vtime = block.timestamp;\n574-new_variable-82-82", method="play_tmstmp3(uint startTime)", type_label=new_variable];
582 [label="82_ if_startTime + (5 * 1 days) == _vtime\n582-if-83-84", method="play_tmstmp3(uint startTime)", type_label=if];
3575 [label="82_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
593 [label="83_ winner_tmstmp3 = msg.sender;\n593-expression_statement-84-84", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
599 [label="84_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n599-expression_statement-85-88", method="", type_label=expression_statement];
602 [label="85_ require(msg.sender == owner);\n602-expression_statement-86-86", method="", type_label=expression_statement];
611 [label="86_ _;\n611-expression_statement-87-87", method="", type_label=expression_statement];
613 [label="88_ uint256 bugv_tmstmp5 = block.timestamp;\n613-new_variable-89-89", method="", type_label=new_variable];
620 [label="89_ function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n620-function_definition-90-92", method="transferOwnership(address _newOwner)", type_label=function_definition];
627 [label="89_ onlyOwner\n627-expression_statement-90-90", method="transferOwnership(address _newOwner)", type_label=expression_statement];
630 [label="90_ newOwner = _newOwner;\n630-expression_statement-91-91", method="transferOwnership(address _newOwner)", type_label=expression_statement];
634 [label="92_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n634-function_definition-93-95", method="bug_tmstmp9()", type_label=function_definition];
643 [label="93_ return block.timestamp >= 1546300800;\n643-return-94-94", method="bug_tmstmp9()", type_label=return];
649 [label="95_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n649-function_definition-96-101", method="acceptOwnership()", type_label=function_definition];
653 [label="96_ require(msg.sender == newOwner);\n653-expression_statement-97-97", method="acceptOwnership()", type_label=expression_statement];
668 [label="98_ owner = newOwner;\n668-expression_statement-99-99", method="acceptOwnership()", type_label=expression_statement];
672 [label="99_ newOwner = address(0);\n672-expression_statement-100-100", method="acceptOwnership()", type_label=expression_statement];
678 [label="101_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n678-function_definition-102-104", method="bug_tmstmp25()", type_label=function_definition];
687 [label="102_ return block.timestamp >= 1546300800;\n687-return-103-103", method="bug_tmstmp25()", type_label=return];
712 [label="108_ string public symbol;\n712-new_variable-109-109", method="", type_label=new_variable];
717 [label="109_ string public name;\n717-new_variable-110-110", method="", type_label=new_variable];
722 [label="110_ uint8 public decimals;\n722-new_variable-111-111", method="", type_label=new_variable];
727 [label="111_ uint public _totalSupply;\n727-new_variable-112-112", method="", type_label=new_variable];
732 [label="112_ uint public latestDifficultyPeriodStarted;\n732-new_variable-113-113", method="", type_label=new_variable];
737 [label="113_ uint public epochCount;\n737-new_variable-114-114", method="", type_label=new_variable];
742 [label="114_ uint public _BLOCKS_PER_READJUSTMENT = 1024;\n742-new_variable-115-115", method="", type_label=new_variable];
748 [label="115_ uint public _MINIMUM_TARGET = 2 ** 16;\n748-new_variable-116-116", method="", type_label=new_variable];
756 [label="116_ uint public _MAXIMUM_TARGET = 2 ** 234;\n756-new_variable-117-117", method="", type_label=new_variable];
764 [label="117_ uint public miningTarget;\n764-new_variable-118-118", method="", type_label=new_variable];
769 [label="118_ bytes32 public challengeNumber;\n769-new_variable-119-119", method="", type_label=new_variable];
774 [label="119_ address winner_tmstmp18;\n774-new_variable-120-120", method="", type_label=new_variable];
778 [label="120_ function play_tmstmp18(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp18 = msg.sender;}}\n778-function_definition-121-123", method="play_tmstmp18(uint startTime)", type_label=function_definition];
786 [label="121_ if_startTime + (5 * 1 days) == block.timestamp\n786-if-122-123", method="play_tmstmp18(uint startTime)", type_label=if];
3779 [label="121_ end_if", method="play_tmstmp18(uint startTime)", type_label=end_if];
799 [label="122_ winner_tmstmp18 = msg.sender;\n799-expression_statement-123-123", method="play_tmstmp18(uint startTime)", type_label=expression_statement];
805 [label="123_ uint public rewardEra;\n805-new_variable-124-124", method="", type_label=new_variable];
810 [label="124_ function bug_tmstmp29() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n810-function_definition-125-127", method="bug_tmstmp29()", type_label=function_definition];
819 [label="125_ return block.timestamp >= 1546300800;\n819-return-126-126", method="bug_tmstmp29()", type_label=return];
825 [label="127_ uint public maxSupplyForEra;\n825-new_variable-128-128", method="", type_label=new_variable];
830 [label="128_ address winner_tmstmp6;\n830-new_variable-129-129", method="", type_label=new_variable];
834 [label="129_ function play_tmstmp6(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp6 = msg.sender;}}\n834-function_definition-130-132", method="play_tmstmp6(uint startTime)", type_label=function_definition];
842 [label="130_ if_startTime + (5 * 1 days) == block.timestamp\n842-if-131-132", method="play_tmstmp6(uint startTime)", type_label=if];
3835 [label="130_ end_if", method="play_tmstmp6(uint startTime)", type_label=end_if];
855 [label="131_ winner_tmstmp6 = msg.sender;\n855-expression_statement-132-132", method="play_tmstmp6(uint startTime)", type_label=expression_statement];
861 [label="132_ address public lastRewardTo;\n861-new_variable-133-133", method="", type_label=new_variable];
866 [label="133_ function bug_tmstmp16 () public payable {\n	uint pastBlockTime_tmstmp16;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp16);  \n        pastBlockTime_tmstmp16 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n866-function_definition-134-142", method="bug_tmstmp16()", type_label=function_definition];
871 [label="134_ uint pastBlockTime_tmstmp16;\n871-new_variable-135-135", method="bug_tmstmp16()", type_label=new_variable];
876 [label="135_ require(msg.value == 10 ether);\n876-expression_statement-136-136", method="bug_tmstmp16()", type_label=expression_statement];
886 [label="136_ require(now != pastBlockTime_tmstmp16);\n886-expression_statement-137-137", method="bug_tmstmp16()", type_label=expression_statement];
893 [label="137_ pastBlockTime_tmstmp16 = now;\n893-expression_statement-138-138", method="bug_tmstmp16()", type_label=expression_statement];
897 [label="138_ if_now % 15 == 0\n897-if-139-141", method="bug_tmstmp16()", type_label=if];
3890 [label="138_ end_if", method="bug_tmstmp16()", type_label=end_if];
904 [label="139_ msg.sender.transfer(address(this).balance);\n904-expression_statement-140-140", method="bug_tmstmp16()", type_label=expression_statement];
917 [label="142_ uint public lastRewardAmount;\n917-new_variable-143-143", method="", type_label=new_variable];
922 [label="143_ function bug_tmstmp24 () public payable {\n	uint pastBlockTime_tmstmp24;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp24);  \n        pastBlockTime_tmstmp24 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n922-function_definition-144-152", method="bug_tmstmp24()", type_label=function_definition];
927 [label="144_ uint pastBlockTime_tmstmp24;\n927-new_variable-145-145", method="bug_tmstmp24()", type_label=new_variable];
932 [label="145_ require(msg.value == 10 ether);\n932-expression_statement-146-146", method="bug_tmstmp24()", type_label=expression_statement];
942 [label="146_ require(now != pastBlockTime_tmstmp24);\n942-expression_statement-147-147", method="bug_tmstmp24()", type_label=expression_statement];
949 [label="147_ pastBlockTime_tmstmp24 = now;\n949-expression_statement-148-148", method="bug_tmstmp24()", type_label=expression_statement];
953 [label="148_ if_now % 15 == 0\n953-if-149-151", method="bug_tmstmp24()", type_label=if];
3946 [label="148_ end_if", method="bug_tmstmp24()", type_label=end_if];
960 [label="149_ msg.sender.transfer(address(this).balance);\n960-expression_statement-150-150", method="bug_tmstmp24()", type_label=expression_statement];
973 [label="152_ uint public lastRewardEthBlockNumber;\n973-new_variable-153-153", method="", type_label=new_variable];
978 [label="153_ function bug_tmstmp5() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n978-function_definition-154-156", method="bug_tmstmp5()", type_label=function_definition];
987 [label="154_ return block.timestamp >= 1546300800;\n987-return-155-155", method="bug_tmstmp5()", type_label=return];
993 [label="156_ bool locked = false;\n993-new_variable-157-157", method="", type_label=new_variable];
999 [label="157_ address winner_tmstmp15;\n999-new_variable-158-158", method="", type_label=new_variable];
1003 [label="158_ function play_tmstmp15(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp15 = msg.sender;}}\n1003-function_definition-159-162", method="play_tmstmp15(uint startTime)", type_label=function_definition];
1011 [label="159_ uint _vtime = block.timestamp;\n1011-new_variable-160-160", method="play_tmstmp15(uint startTime)", type_label=new_variable];
1019 [label="160_ if_startTime + (5 * 1 days) == _vtime\n1019-if-161-162", method="play_tmstmp15(uint startTime)", type_label=if];
4012 [label="160_ end_if", method="play_tmstmp15(uint startTime)", type_label=end_if];
1030 [label="161_ winner_tmstmp15 = msg.sender;\n1030-expression_statement-162-162", method="play_tmstmp15(uint startTime)", type_label=expression_statement];
1036 [label="162_ mapping(bytes32 => bytes32) solutionForChallenge;\n1036-new_variable-163-163", method="", type_label=new_variable];
1042 [label="163_ function bug_tmstmp28 () public payable {\n	uint pastBlockTime_tmstmp28;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp28);  \n        pastBlockTime_tmstmp28 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1042-function_definition-164-172", method="bug_tmstmp28()", type_label=function_definition];
1047 [label="164_ uint pastBlockTime_tmstmp28;\n1047-new_variable-165-165", method="bug_tmstmp28()", type_label=new_variable];
1052 [label="165_ require(msg.value == 10 ether);\n1052-expression_statement-166-166", method="bug_tmstmp28()", type_label=expression_statement];
1062 [label="166_ require(now != pastBlockTime_tmstmp28);\n1062-expression_statement-167-167", method="bug_tmstmp28()", type_label=expression_statement];
1069 [label="167_ pastBlockTime_tmstmp28 = now;\n1069-expression_statement-168-168", method="bug_tmstmp28()", type_label=expression_statement];
1073 [label="168_ if_now % 15 == 0\n1073-if-169-171", method="bug_tmstmp28()", type_label=if];
4066 [label="168_ end_if", method="bug_tmstmp28()", type_label=end_if];
1080 [label="169_ msg.sender.transfer(address(this).balance);\n1080-expression_statement-170-170", method="bug_tmstmp28()", type_label=expression_statement];
1093 [label="172_ uint public tokensMinted;\n1093-new_variable-173-173", method="", type_label=new_variable];
1098 [label="173_ address winner_tmstmp34;\n1098-new_variable-174-174", method="", type_label=new_variable];
1102 [label="174_ function play_tmstmp34(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp34 = msg.sender;}}\n1102-function_definition-175-177", method="play_tmstmp34(uint startTime)", type_label=function_definition];
1110 [label="175_ if_startTime + (5 * 1 days) == block.timestamp\n1110-if-176-177", method="play_tmstmp34(uint startTime)", type_label=if];
4103 [label="175_ end_if", method="play_tmstmp34(uint startTime)", type_label=end_if];
1123 [label="176_ winner_tmstmp34 = msg.sender;\n1123-expression_statement-177-177", method="play_tmstmp34(uint startTime)", type_label=expression_statement];
1129 [label="177_ mapping(address => uint) balances;\n1129-new_variable-178-178", method="", type_label=new_variable];
1135 [label="178_ function bug_tmstmp21() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1135-function_definition-179-181", method="bug_tmstmp21()", type_label=function_definition];
1144 [label="179_ return block.timestamp >= 1546300800;\n1144-return-180-180", method="bug_tmstmp21()", type_label=return];
1150 [label="181_ mapping(address => mapping(address => uint)) allowed;\n1150-new_variable-182-182", method="", type_label=new_variable];
1158 [label="182_ address winner_tmstmp10;\n1158-new_variable-183-183", method="", type_label=new_variable];
1162 [label="183_ function play_tmstmp10(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp10 = msg.sender;}}\n1162-function_definition-184-186", method="play_tmstmp10(uint startTime)", type_label=function_definition];
1170 [label="184_ if_startTime + (5 * 1 days) == block.timestamp\n1170-if-185-186", method="play_tmstmp10(uint startTime)", type_label=if];
4163 [label="184_ end_if", method="play_tmstmp10(uint startTime)", type_label=end_if];
1183 [label="185_ winner_tmstmp10 = msg.sender;\n1183-expression_statement-186-186", method="play_tmstmp10(uint startTime)", type_label=expression_statement];
1189 [label="186_ uint public burnPercent;\n1189-new_variable-187-187", method="", type_label=new_variable];
1194 [label="187_ uint256 bugv_tmstmp4 = block.timestamp;\n1194-new_variable-188-188", method="", type_label=new_variable];
1220 [label="189_ onlyOwner\n1220-expression_statement-190-190", method="", type_label=expression_statement];
1223 [label="190_ symbol = \"YESBUZ\";\n1223-expression_statement-191-191", method="", type_label=expression_statement];
1228 [label="191_ name = \"Yesbuzz\";\n1228-expression_statement-192-192", method="", type_label=expression_statement];
1233 [label="192_ decimals = 8;\n1233-expression_statement-193-193", method="", type_label=expression_statement];
1237 [label="193_ _totalSupply = 21000000 * 10 ** uint(decimals);\n1237-expression_statement-194-194", method="", type_label=expression_statement];
1247 [label="194_ if\n1247-if-195-195", method="", type_label=if];
4240 [label="194_ end_if", method="", type_label=end_if];
1251 [label="195_ locked = true;\n1251-expression_statement-196-196", method="", type_label=expression_statement];
1256 [label="196_ tokensMinted = 0;\n1256-expression_statement-197-197", method="", type_label=expression_statement];
1260 [label="197_ rewardEra = 0;\n1260-expression_statement-198-198", method="", type_label=expression_statement];
1264 [label="198_ maxSupplyForEra = _totalSupply.div(2);\n1264-expression_statement-199-199", method="", type_label=expression_statement];
1273 [label="199_ miningTarget = _MAXIMUM_TARGET;\n1273-expression_statement-200-200", method="", type_label=expression_statement];
1277 [label="200_ latestDifficultyPeriodStarted = block.number;\n1277-expression_statement-201-201", method="", type_label=expression_statement];
1283 [label="201_ burnPercent = 10;\n1283-expression_statement-202-202", method="", type_label=expression_statement];
1287 [label="202_ _startNewMiningEpoch();\n1287-expression_statement-203-203", method="", type_label=expression_statement];
1290 [label="204_ address winner_tmstmp19;\n1290-new_variable-205-205", method="", type_label=new_variable];
1294 [label="205_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n1294-function_definition-206-209", method="play_tmstmp19(uint startTime)", type_label=function_definition];
1302 [label="206_ uint _vtime = block.timestamp;\n1302-new_variable-207-207", method="play_tmstmp19(uint startTime)", type_label=new_variable];
1310 [label="207_ if_startTime + (5 * 1 days) == _vtime\n1310-if-208-209", method="play_tmstmp19(uint startTime)", type_label=if];
4303 [label="207_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
1321 [label="208_ winner_tmstmp19 = msg.sender;\n1321-expression_statement-209-209", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
1327 [label="209_ function mint(uint256 nonce, bytes32 challenge_digest) public returns(bool success) {\n        bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\n        if (digest != challenge_digest) revert();\n        if (uint256(digest) > miningTarget) revert();\n        bytes32 solution = solutionForChallenge[challengeNumber];\n        solutionForChallenge[challengeNumber] = digest;\n        if (solution != 0x0) revert();  \n        uint reward_amount = getMiningReward();\n        balances[msg.sender] = balances[msg.sender].add(reward_amount);\n        tokensMinted = tokensMinted.add(reward_amount);\n        assert(tokensMinted <= maxSupplyForEra);\n        lastRewardTo = msg.sender;\n        lastRewardAmount = reward_amount;\n        lastRewardEthBlockNumber = block.number;\n        _startNewMiningEpoch();\n        emit Mint(msg.sender, reward_amount, epochCount, challengeNumber);\n        return true;\n    }\n1327-function_definition-210-227", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=function_definition];
1344 [label="210_ bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\n1344-new_variable-211-211", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
1364 [label="211_ if_digest != challenge_digest\n1364-if-212-212", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
4357 [label="211_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
1370 [label="212_ if_uint256(digest) > miningTarget\n1370-if-213-213", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
4363 [label="212_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
1378 [label="213_ bytes32 solution = solutionForChallenge[challengeNumber];\n1378-new_variable-214-214", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
1386 [label="214_ solutionForChallenge[challengeNumber] = digest;\n1386-expression_statement-215-215", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1392 [label="215_ if_solution != 0x0\n1392-if-216-216", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=if];
4385 [label="215_ end_if", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=end_if];
1398 [label="216_ uint reward_amount = getMiningReward();\n1398-new_variable-217-217", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=new_variable];
1405 [label="217_ balances[msg.sender] = balances[msg.sender].add(reward_amount);\n1405-expression_statement-218-218", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1422 [label="218_ tokensMinted = tokensMinted.add(reward_amount);\n1422-expression_statement-219-219", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1431 [label="219_ assert(tokensMinted <= maxSupplyForEra);\n1431-expression_statement-220-220", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1438 [label="220_ lastRewardTo = msg.sender;\n1438-expression_statement-221-221", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1444 [label="221_ lastRewardAmount = reward_amount;\n1444-expression_statement-222-222", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1448 [label="222_ lastRewardEthBlockNumber = block.number;\n1448-expression_statement-223-223", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1454 [label="223_ _startNewMiningEpoch();\n1454-expression_statement-224-224", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=expression_statement];
1469 [label="225_ return true;\n1469-return-226-226", method="mint(uint256 nonce,bytes32 challenge_digest)", type_label=return];
1472 [label="227_ address winner_tmstmp26;\n1472-new_variable-228-228", method="", type_label=new_variable];
1476 [label="228_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n1476-function_definition-229-231", method="play_tmstmp26(uint startTime)", type_label=function_definition];
1484 [label="229_ if_startTime + (5 * 1 days) == block.timestamp\n1484-if-230-231", method="play_tmstmp26(uint startTime)", type_label=if];
4477 [label="229_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
1497 [label="230_ winner_tmstmp26 = msg.sender;\n1497-expression_statement-231-231", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
1503 [label="231_ function _startNewMiningEpoch() internal {\n        if (tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39) {\n            rewardEra = rewardEra + 1;\n        }\n        maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));\n        epochCount = epochCount.add(1);\n        if (epochCount % _BLOCKS_PER_READJUSTMENT == 0) {\n            _reAdjustDifficulty();\n        }\n        challengeNumber = blockhash(block.number - 1);\n    }\n1503-function_definition-232-242", method="_startNewMiningEpoch()", type_label=function_definition];
1507 [label="232_ if_tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39\n1507-if-233-235", method="_startNewMiningEpoch()", type_label=if];
4500 [label="232_ end_if", method="_startNewMiningEpoch()", type_label=end_if];
1522 [label="233_ rewardEra = rewardEra + 1;\n1522-expression_statement-234-234", method="_startNewMiningEpoch()", type_label=expression_statement];
1528 [label="235_ maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));\n1528-expression_statement-236-236", method="_startNewMiningEpoch()", type_label=expression_statement];
1544 [label="236_ epochCount = epochCount.add(1);\n1544-expression_statement-237-237", method="_startNewMiningEpoch()", type_label=expression_statement];
1553 [label="237_ if_epochCount % _BLOCKS_PER_READJUSTMENT == 0\n1553-if-238-240", method="_startNewMiningEpoch()", type_label=if];
4546 [label="237_ end_if", method="_startNewMiningEpoch()", type_label=end_if];
1560 [label="238_ _reAdjustDifficulty();\n1560-expression_statement-239-239", method="_startNewMiningEpoch()", type_label=expression_statement];
1563 [label="240_ challengeNumber = blockhash(block.number - 1);\n1563-expression_statement-241-241", method="_startNewMiningEpoch()", type_label=expression_statement];
1574 [label="242_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1574-function_definition-243-251", method="bug_tmstmp20()", type_label=function_definition];
1579 [label="243_ uint pastBlockTime_tmstmp20;\n1579-new_variable-244-244", method="bug_tmstmp20()", type_label=new_variable];
1584 [label="244_ require(msg.value == 10 ether);\n1584-expression_statement-245-245", method="bug_tmstmp20()", type_label=expression_statement];
1594 [label="245_ require(now != pastBlockTime_tmstmp20);\n1594-expression_statement-246-246", method="bug_tmstmp20()", type_label=expression_statement];
1601 [label="246_ pastBlockTime_tmstmp20 = now;\n1601-expression_statement-247-247", method="bug_tmstmp20()", type_label=expression_statement];
1605 [label="247_ if_now % 15 == 0\n1605-if-248-250", method="bug_tmstmp20()", type_label=if];
4598 [label="247_ end_if", method="bug_tmstmp20()", type_label=end_if];
1612 [label="248_ msg.sender.transfer(address(this).balance);\n1612-expression_statement-249-249", method="bug_tmstmp20()", type_label=expression_statement];
1625 [label="251_ function _reAdjustDifficulty() internal {\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT;  \n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60;  \n        if (ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod) {\n            uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n            uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n            miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));  \n        } else {\n            uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n            uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);  \n            miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));  \n        }\n        latestDifficultyPeriodStarted = block.number;\n        if (miningTarget < _MINIMUM_TARGET)  \n        {\n            miningTarget = _MINIMUM_TARGET;\n        }\n        if (miningTarget > _MAXIMUM_TARGET)  \n        {\n            miningTarget = _MAXIMUM_TARGET;\n        }\n    }\n1625-function_definition-252-274", method="_reAdjustDifficulty()", type_label=function_definition];
1629 [label="252_ uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n1629-new_variable-253-253", method="_reAdjustDifficulty()", type_label=new_variable];
1639 [label="253_ uint epochsMined = _BLOCKS_PER_READJUSTMENT;\n1639-new_variable-254-254", method="_reAdjustDifficulty()", type_label=new_variable];
1645 [label="254_ uint targetEthBlocksPerDiffPeriod = epochsMined * 60;\n1645-new_variable-255-255", method="_reAdjustDifficulty()", type_label=new_variable];
1653 [label="255_ if_ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod\n1653-if-256-264", method="_reAdjustDifficulty()", type_label=if];
4646 [label="255_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
1658 [label="256_ uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\n1658-new_variable-257-257", method="_reAdjustDifficulty()", type_label=new_variable];
1675 [label="257_ uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n1675-new_variable-258-258", method="_reAdjustDifficulty()", type_label=new_variable];
1691 [label="258_ miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));\n1691-expression_statement-259-259", method="_reAdjustDifficulty()", type_label=expression_statement];
1711 [label="260_ uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\n1711-new_variable-261-261", method="_reAdjustDifficulty()", type_label=new_variable];
1728 [label="261_ uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\n1728-new_variable-262-262", method="_reAdjustDifficulty()", type_label=new_variable];
1744 [label="262_ miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));\n1744-expression_statement-263-263", method="_reAdjustDifficulty()", type_label=expression_statement];
1763 [label="264_ latestDifficultyPeriodStarted = block.number;\n1763-expression_statement-265-265", method="_reAdjustDifficulty()", type_label=expression_statement];
1769 [label="265_ if_miningTarget < _MINIMUM_TARGET\n1769-if-266-269", method="_reAdjustDifficulty()", type_label=if];
4762 [label="265_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
1774 [label="267_ miningTarget = _MINIMUM_TARGET;\n1774-expression_statement-268-268", method="_reAdjustDifficulty()", type_label=expression_statement];
1778 [label="269_ if_miningTarget > _MAXIMUM_TARGET\n1778-if-270-273", method="_reAdjustDifficulty()", type_label=if];
4771 [label="269_ end_if", method="_reAdjustDifficulty()", type_label=end_if];
1783 [label="271_ miningTarget = _MAXIMUM_TARGET;\n1783-expression_statement-272-272", method="_reAdjustDifficulty()", type_label=expression_statement];
1787 [label="274_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1787-function_definition-275-283", method="bug_tmstmp32()", type_label=function_definition];
1792 [label="275_ uint pastBlockTime_tmstmp32;\n1792-new_variable-276-276", method="bug_tmstmp32()", type_label=new_variable];
1797 [label="276_ require(msg.value == 10 ether);\n1797-expression_statement-277-277", method="bug_tmstmp32()", type_label=expression_statement];
1807 [label="277_ require(now != pastBlockTime_tmstmp32);\n1807-expression_statement-278-278", method="bug_tmstmp32()", type_label=expression_statement];
1814 [label="278_ pastBlockTime_tmstmp32 = now;\n1814-expression_statement-279-279", method="bug_tmstmp32()", type_label=expression_statement];
1818 [label="279_ if_now % 15 == 0\n1818-if-280-282", method="bug_tmstmp32()", type_label=if];
4811 [label="279_ end_if", method="bug_tmstmp32()", type_label=end_if];
1825 [label="280_ msg.sender.transfer(address(this).balance);\n1825-expression_statement-281-281", method="bug_tmstmp32()", type_label=expression_statement];
1838 [label="283_ function getChallengeNumber() public view returns(bytes32) {\n        return challengeNumber;\n    }\n1838-function_definition-284-286", method="getChallengeNumber()", type_label=function_definition];
1847 [label="284_ return challengeNumber;\n1847-return-285-285", method="getChallengeNumber()", type_label=return];
1849 [label="286_ address winner_tmstmp38;\n1849-new_variable-287-287", method="", type_label=new_variable];
1853 [label="287_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n1853-function_definition-288-290", method="play_tmstmp38(uint startTime)", type_label=function_definition];
1861 [label="288_ if_startTime + (5 * 1 days) == block.timestamp\n1861-if-289-290", method="play_tmstmp38(uint startTime)", type_label=if];
4854 [label="288_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
1874 [label="289_ winner_tmstmp38 = msg.sender;\n1874-expression_statement-290-290", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
1880 [label="290_ function getMiningDifficulty() public view returns(uint) {\n        return _MAXIMUM_TARGET.div(miningTarget);\n    }\n1880-function_definition-291-293", method="getMiningDifficulty()", type_label=function_definition];
1889 [label="291_ return _MAXIMUM_TARGET.div(miningTarget);\n1889-return-292-292", method="getMiningDifficulty()", type_label=return];
1896 [label="293_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1896-function_definition-294-302", method="bug_tmstmp4()", type_label=function_definition];
1901 [label="294_ uint pastBlockTime_tmstmp4;\n1901-new_variable-295-295", method="bug_tmstmp4()", type_label=new_variable];
1906 [label="295_ require(msg.value == 10 ether);\n1906-expression_statement-296-296", method="bug_tmstmp4()", type_label=expression_statement];
1916 [label="296_ require(now != pastBlockTime_tmstmp4);\n1916-expression_statement-297-297", method="bug_tmstmp4()", type_label=expression_statement];
1923 [label="297_ pastBlockTime_tmstmp4 = now;\n1923-expression_statement-298-298", method="bug_tmstmp4()", type_label=expression_statement];
1927 [label="298_ if_now % 15 == 0\n1927-if-299-301", method="bug_tmstmp4()", type_label=if];
4920 [label="298_ end_if", method="bug_tmstmp4()", type_label=end_if];
1934 [label="299_ msg.sender.transfer(address(this).balance);\n1934-expression_statement-300-300", method="bug_tmstmp4()", type_label=expression_statement];
1947 [label="302_ function getMiningTarget() public view returns(uint) {\n        return miningTarget;\n    }\n1947-function_definition-303-305", method="getMiningTarget()", type_label=function_definition];
1956 [label="303_ return miningTarget;\n1956-return-304-304", method="getMiningTarget()", type_label=return];
1958 [label="305_ address winner_tmstmp7;\n1958-new_variable-306-306", method="", type_label=new_variable];
1962 [label="306_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n1962-function_definition-307-310", method="play_tmstmp7(uint startTime)", type_label=function_definition];
1970 [label="307_ uint _vtime = block.timestamp;\n1970-new_variable-308-308", method="play_tmstmp7(uint startTime)", type_label=new_variable];
1978 [label="308_ if_startTime + (5 * 1 days) == _vtime\n1978-if-309-310", method="play_tmstmp7(uint startTime)", type_label=if];
4971 [label="308_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
1989 [label="309_ winner_tmstmp7 = msg.sender;\n1989-expression_statement-310-310", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
1995 [label="310_ function getMiningReward() public view returns(uint) {\n        return (50 * 10 ** uint(decimals)).div(2 ** rewardEra);\n    }\n1995-function_definition-311-313", method="getMiningReward()", type_label=function_definition];
2004 [label="311_ return (50 * 10 ** uint(decimals)).div(2 ** rewardEra);\n2004-return-312-312", method="getMiningReward()", type_label=return];
2020 [label="313_ address winner_tmstmp23;\n2020-new_variable-314-314", method="", type_label=new_variable];
2024 [label="314_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n2024-function_definition-315-318", method="play_tmstmp23(uint startTime)", type_label=function_definition];
2032 [label="315_ uint _vtime = block.timestamp;\n2032-new_variable-316-316", method="play_tmstmp23(uint startTime)", type_label=new_variable];
2040 [label="316_ if_startTime + (5 * 1 days) == _vtime\n2040-if-317-318", method="play_tmstmp23(uint startTime)", type_label=if];
5033 [label="316_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
2051 [label="317_ winner_tmstmp23 = msg.sender;\n2051-expression_statement-318-318", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
2057 [label="318_ function getMintDigest(uint256 nonce, bytes32 challenge_number) public view returns(bytes32 digesttest) {\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n        return digest;\n    }\n2057-function_definition-319-322", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=function_definition];
2075 [label="319_ bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n2075-new_variable-320-320", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=new_variable];
2095 [label="320_ return digest;\n2095-return-321-321", method="getMintDigest(uint256 nonce,bytes32 challenge_number)", type_label=return];
2097 [label="322_ address winner_tmstmp14;\n2097-new_variable-323-323", method="", type_label=new_variable];
2101 [label="323_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n2101-function_definition-324-326", method="play_tmstmp14(uint startTime)", type_label=function_definition];
2109 [label="324_ if_startTime + (5 * 1 days) == block.timestamp\n2109-if-325-326", method="play_tmstmp14(uint startTime)", type_label=if];
5102 [label="324_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
2122 [label="325_ winner_tmstmp14 = msg.sender;\n2122-expression_statement-326-326", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
2128 [label="326_ function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns(bool success) {\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n        if (uint256(digest) > testTarget) revert();\n        return (digest == challenge_digest);\n    }\n2128-function_definition-327-331", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=function_definition];
2154 [label="327_ bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\n2154-new_variable-328-328", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=new_variable];
2174 [label="328_ if_uint256(digest) > testTarget\n2174-if-329-329", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=if];
5167 [label="328_ end_if", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=end_if];
2182 [label="329_ return (digest == challenge_digest);\n2182-return-330-330", method="checkMintSolution(uint256 nonce,bytes32 challenge_digest,bytes32 challenge_number,uint testTarget)", type_label=return];
2187 [label="331_ address winner_tmstmp30;\n2187-new_variable-332-332", method="", type_label=new_variable];
2191 [label="332_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n2191-function_definition-333-335", method="play_tmstmp30(uint startTime)", type_label=function_definition];
2199 [label="333_ if_startTime + (5 * 1 days) == block.timestamp\n2199-if-334-335", method="play_tmstmp30(uint startTime)", type_label=if];
5192 [label="333_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
2212 [label="334_ winner_tmstmp30 = msg.sender;\n2212-expression_statement-335-335", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
2218 [label="335_ function totalSupply() public view returns(uint) {\n        return _totalSupply - balances[address(0)];\n    }\n2218-function_definition-336-338", method="totalSupply()", type_label=function_definition];
2227 [label="336_ return _totalSupply - balances[address(0)];\n2227-return-337-337", method="totalSupply()", type_label=return];
2235 [label="338_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n2235-function_definition-339-347", method="bug_tmstmp8()", type_label=function_definition];
2240 [label="339_ uint pastBlockTime_tmstmp8;\n2240-new_variable-340-340", method="bug_tmstmp8()", type_label=new_variable];
2245 [label="340_ require(msg.value == 10 ether);\n2245-expression_statement-341-341", method="bug_tmstmp8()", type_label=expression_statement];
2255 [label="341_ require(now != pastBlockTime_tmstmp8);\n2255-expression_statement-342-342", method="bug_tmstmp8()", type_label=expression_statement];
2262 [label="342_ pastBlockTime_tmstmp8 = now;\n2262-expression_statement-343-343", method="bug_tmstmp8()", type_label=expression_statement];
2266 [label="343_ if_now % 15 == 0\n2266-if-344-346", method="bug_tmstmp8()", type_label=if];
5259 [label="343_ end_if", method="bug_tmstmp8()", type_label=end_if];
2273 [label="344_ msg.sender.transfer(address(this).balance);\n2273-expression_statement-345-345", method="bug_tmstmp8()", type_label=expression_statement];
2286 [label="347_ function balanceOf(address tokenOwner) public view returns(uint balance) {\n        return balances[tokenOwner];\n    }\n2286-function_definition-348-350", method="balanceOf(address tokenOwner)", type_label=function_definition];
2300 [label="348_ return balances[tokenOwner];\n2300-return-349-349", method="balanceOf(address tokenOwner)", type_label=return];
2304 [label="350_ address winner_tmstmp39;\n2304-new_variable-351-351", method="", type_label=new_variable];
2308 [label="351_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n2308-function_definition-352-355", method="play_tmstmp39(uint startTime)", type_label=function_definition];
2316 [label="352_ uint _vtime = block.timestamp;\n2316-new_variable-353-353", method="play_tmstmp39(uint startTime)", type_label=new_variable];
2324 [label="353_ if_startTime + (5 * 1 days) == _vtime\n2324-if-354-355", method="play_tmstmp39(uint startTime)", type_label=if];
5317 [label="353_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
2335 [label="354_ winner_tmstmp39 = msg.sender;\n2335-expression_statement-355-355", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
2341 [label="355_ function transfer(address to, uint tokens) public returns(bool success) {\n        uint toBurn = tokens.mul(burnPercent).div(1000);\n        uint toSend = tokens.sub(toBurn);\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(toSend);\n        emit Transfer(msg.sender, to, toSend);\n        balances[address(0)] = balances[address(0)].add(toBurn);\n        emit Transfer(msg.sender, address(0), toBurn);\n        return true;\n    }\n2341-function_definition-356-365", method="transfer(address to,uint tokens)", type_label=function_definition];
2358 [label="356_ uint toBurn = tokens.mul(burnPercent).div(1000);\n2358-new_variable-357-357", method="transfer(address to,uint tokens)", type_label=new_variable];
2374 [label="357_ uint toSend = tokens.sub(toBurn);\n2374-new_variable-358-358", method="transfer(address to,uint tokens)", type_label=new_variable];
2385 [label="358_ balances[msg.sender] = balances[msg.sender].sub(tokens);\n2385-expression_statement-359-359", method="transfer(address to,uint tokens)", type_label=expression_statement];
2402 [label="359_ balances[to] = balances[to].add(toSend);\n2402-expression_statement-360-360", method="transfer(address to,uint tokens)", type_label=expression_statement];
2425 [label="361_ balances[address(0)] = balances[address(0)].add(toBurn);\n2425-expression_statement-362-362", method="transfer(address to,uint tokens)", type_label=expression_statement];
2454 [label="363_ return true;\n2454-return-364-364", method="transfer(address to,uint tokens)", type_label=return];
2457 [label="365_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n2457-function_definition-366-374", method="bug_tmstmp36()", type_label=function_definition];
2462 [label="366_ uint pastBlockTime_tmstmp36;\n2462-new_variable-367-367", method="bug_tmstmp36()", type_label=new_variable];
2467 [label="367_ require(msg.value == 10 ether);\n2467-expression_statement-368-368", method="bug_tmstmp36()", type_label=expression_statement];
2477 [label="368_ require(now != pastBlockTime_tmstmp36);\n2477-expression_statement-369-369", method="bug_tmstmp36()", type_label=expression_statement];
2484 [label="369_ pastBlockTime_tmstmp36 = now;\n2484-expression_statement-370-370", method="bug_tmstmp36()", type_label=expression_statement];
2488 [label="370_ if_now % 15 == 0\n2488-if-371-373", method="bug_tmstmp36()", type_label=if];
5481 [label="370_ end_if", method="bug_tmstmp36()", type_label=end_if];
2495 [label="371_ msg.sender.transfer(address(this).balance);\n2495-expression_statement-372-372", method="bug_tmstmp36()", type_label=expression_statement];
2508 [label="374_ function approve(address spender, uint tokens) public returns(bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n2508-function_definition-375-379", method="approve(address spender,uint tokens)", type_label=function_definition];
2525 [label="375_ allowed[msg.sender][spender] = tokens;\n2525-expression_statement-376-376", method="approve(address spender,uint tokens)", type_label=expression_statement];
2545 [label="377_ return true;\n2545-return-378-378", method="approve(address spender,uint tokens)", type_label=return];
2548 [label="379_ address winner_tmstmp35;\n2548-new_variable-380-380", method="", type_label=new_variable];
2552 [label="380_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n2552-function_definition-381-384", method="play_tmstmp35(uint startTime)", type_label=function_definition];
2560 [label="381_ uint _vtime = block.timestamp;\n2560-new_variable-382-382", method="play_tmstmp35(uint startTime)", type_label=new_variable];
2568 [label="382_ if_startTime + (5 * 1 days) == _vtime\n2568-if-383-384", method="play_tmstmp35(uint startTime)", type_label=if];
5561 [label="382_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
2579 [label="383_ winner_tmstmp35 = msg.sender;\n2579-expression_statement-384-384", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
2585 [label="384_ function transferFrom(address from, address to, uint tokens) public returns(bool success) {\n        uint toBurn = tokens.mul(burnPercent).div(1000);\n        uint toSend = tokens.sub(toBurn);\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(toSend);\n        emit Transfer(from, to, toSend);\n        balances[address(0)] = balances[address(0)].add(toBurn);\n        emit Transfer(from, address(0), toBurn);\n        return true;\n    }\n2585-function_definition-385-395", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
2606 [label="385_ uint toBurn = tokens.mul(burnPercent).div(1000);\n2606-new_variable-386-386", method="transferFrom(address from,address to,uint tokens)", type_label=new_variable];
2622 [label="386_ uint toSend = tokens.sub(toBurn);\n2622-new_variable-387-387", method="transferFrom(address from,address to,uint tokens)", type_label=new_variable];
2633 [label="387_ balances[from] = balances[from].sub(tokens);\n2633-expression_statement-388-388", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2646 [label="388_ allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n2646-expression_statement-389-389", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2667 [label="389_ balances[to] = balances[to].add(toSend);\n2667-expression_statement-390-390", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2688 [label="391_ balances[address(0)] = balances[address(0)].add(toBurn);\n2688-expression_statement-392-392", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
2715 [label="393_ return true;\n2715-return-394-394", method="transferFrom(address from,address to,uint tokens)", type_label=return];
2718 [label="395_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n2718-function_definition-396-404", method="bug_tmstmp40()", type_label=function_definition];
2723 [label="396_ uint pastBlockTime_tmstmp40;\n2723-new_variable-397-397", method="bug_tmstmp40()", type_label=new_variable];
2728 [label="397_ require(msg.value == 10 ether);\n2728-expression_statement-398-398", method="bug_tmstmp40()", type_label=expression_statement];
2738 [label="398_ require(now != pastBlockTime_tmstmp40);\n2738-expression_statement-399-399", method="bug_tmstmp40()", type_label=expression_statement];
2745 [label="399_ pastBlockTime_tmstmp40 = now;\n2745-expression_statement-400-400", method="bug_tmstmp40()", type_label=expression_statement];
2749 [label="400_ if_now % 15 == 0\n2749-if-401-403", method="bug_tmstmp40()", type_label=if];
5742 [label="400_ end_if", method="bug_tmstmp40()", type_label=end_if];
2756 [label="401_ msg.sender.transfer(address(this).balance);\n2756-expression_statement-402-402", method="bug_tmstmp40()", type_label=expression_statement];
2769 [label="404_ function allowance(address tokenOwner, address spender) public view returns(uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n2769-function_definition-405-407", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
2787 [label="405_ return allowed[tokenOwner][spender];\n2787-return-406-406", method="allowance(address tokenOwner,address spender)", type_label=return];
2793 [label="407_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2793-function_definition-408-410", method="bug_tmstmp33()", type_label=function_definition];
2802 [label="408_ return block.timestamp >= 1546300800;\n2802-return-409-409", method="bug_tmstmp33()", type_label=return];
2808 [label="410_ function approveAndCall(address spender, uint tokens, bytes memory data) public returns(bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n        return true;\n    }\n2808-function_definition-411-416", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=function_definition];
2829 [label="411_ allowed[msg.sender][spender] = tokens;\n2829-expression_statement-412-412", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
2849 [label="413_ ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n2849-expression_statement-414-414", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=expression_statement];
2869 [label="414_ return true;\n2869-return-415-415", method="approveAndCall(address spender,uint tokens,bytes memory data)", type_label=return];
2872 [label="416_ address winner_tmstmp27;\n2872-new_variable-417-417", method="", type_label=new_variable];
2876 [label="417_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n2876-function_definition-418-421", method="play_tmstmp27(uint startTime)", type_label=function_definition];
2884 [label="418_ uint _vtime = block.timestamp;\n2884-new_variable-419-419", method="play_tmstmp27(uint startTime)", type_label=new_variable];
2892 [label="419_ if_startTime + (5 * 1 days) == _vtime\n2892-if-420-421", method="play_tmstmp27(uint startTime)", type_label=if];
5885 [label="419_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
2903 [label="420_ winner_tmstmp27 = msg.sender;\n2903-expression_statement-421-421", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
2915 [label="424_ address winner_tmstmp31;\n2915-new_variable-425-425", method="", type_label=new_variable];
2919 [label="425_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n2919-function_definition-426-429", method="play_tmstmp31(uint startTime)", type_label=function_definition];
2927 [label="426_ uint _vtime = block.timestamp;\n2927-new_variable-427-427", method="play_tmstmp31(uint startTime)", type_label=new_variable];
2935 [label="427_ if_startTime + (5 * 1 days) == _vtime\n2935-if-428-429", method="play_tmstmp31(uint startTime)", type_label=if];
5928 [label="427_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
2946 [label="428_ winner_tmstmp31 = msg.sender;\n2946-expression_statement-429-429", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
2952 [label="429_ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns(bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n2952-function_definition-430-432", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=function_definition];
2963 [label="429_ onlyOwner\n2963-expression_statement-430-430", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=expression_statement];
2971 [label="430_ return ERC20Interface(tokenAddress).transfer(owner, tokens);\n2971-return-431-431", method="transferAnyERC20Token(address tokenAddress,uint tokens)", type_label=return];
2983 [label="432_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2983-function_definition-433-435", method="bug_tmstmp13()", type_label=function_definition];
2992 [label="433_ return block.timestamp >= 1546300800;\n2992-return-434-434", method="bug_tmstmp13()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
2909;
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 168  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
164 -> 3157  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3157 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 3157  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
187 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 208  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
195 -> 3188  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3188 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 3188  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
227 -> 232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
232 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
254 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
258 -> 265  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
258 -> 3251  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3251 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
265 -> 3251  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
299 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 326  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
315 -> 3308  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3308 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 3308  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
348 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
383 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 404  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
391 -> 3384  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3384 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 3384  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
430 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
509 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
527 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
532 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
566 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 593  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
582 -> 3575  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3575 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 3575  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
599 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
620 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
634 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
649 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
687 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
712 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
756 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
778 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 799  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
786 -> 3779  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3779 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 3779  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
810 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
825 -> 830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
834 -> 842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
842 -> 855  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
842 -> 3835  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3835 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 3835  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
866 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
876 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 904  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
897 -> 3890  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3890 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 3890  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
922 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
953 -> 960  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
953 -> 3946  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3946 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 3946  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
978 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
993 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1011  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1011 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1030  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1019 -> 4012  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4012 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1030 -> 4012  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1042 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1047 -> 1052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1062 -> 1069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1069 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1073 -> 1080  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1073 -> 4066  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4066 -> 1093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 4066  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1093 -> 1098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1123  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1110 -> 4103  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4103 -> 1129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1123 -> 4103  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1135 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1150 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1170 -> 1183  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1170 -> 4163  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4163 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1183 -> 4163  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1189 -> 1194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1223 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1233 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 4240  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1251 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1260 -> 1264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1264 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1277 -> 1283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1294 -> 1302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1302 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1321  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1310 -> 4303  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4303 -> 1327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1321 -> 4303  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1327 -> 1344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1344 -> 1364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1364 -> 4357  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1370 -> 4363  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1378 -> 1386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1386 -> 1392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 4385  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1398 -> 1405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1405 -> 1422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1422 -> 1431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1431 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 1444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1444 -> 1448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 1454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1469 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1476 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1484 -> 1497  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1484 -> 4477  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4477 -> 1503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1497 -> 4477  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1503 -> 1507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 1522  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1507 -> 4500  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4500 -> 1528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1522 -> 4500  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1528 -> 1544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1544 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1553 -> 1560  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1553 -> 4546  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4546 -> 1563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1560 -> 4546  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1574 -> 1579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1579 -> 1584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 1601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1601 -> 1605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1605 -> 1612  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1605 -> 4598  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4598 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1612 -> 4598  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1625 -> 1629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1629 -> 1639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1639 -> 1645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1645 -> 1653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1658  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1653 -> 1711  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4646 -> 1763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1658 -> 1675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1675 -> 1691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1691 -> 4646  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1711 -> 1728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1728 -> 1744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1744 -> 4646  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1763 -> 1769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1769 -> 1774  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1769 -> 4762  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4762 -> 1778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1774 -> 4762  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1778 -> 1783  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1778 -> 4771  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4771 -> 1787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1783 -> 4771  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1787 -> 1792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1792 -> 1797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1797 -> 1807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1807 -> 1814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1814 -> 1818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1818 -> 1825  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1818 -> 4811  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4811 -> 1838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1825 -> 4811  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1838 -> 1847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1847 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1853 -> 1861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1861 -> 1874  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1861 -> 4854  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4854 -> 1880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1874 -> 4854  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1880 -> 1889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1889 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1896 -> 1901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1901 -> 1906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1906 -> 1916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1916 -> 1923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1923 -> 1927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1927 -> 1934  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1927 -> 4920  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4920 -> 1947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1934 -> 4920  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1947 -> 1956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1956 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1962 -> 1970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1970 -> 1978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1978 -> 1989  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1978 -> 4971  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4971 -> 1995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1989 -> 4971  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1995 -> 2004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2004 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2024 -> 2032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2032 -> 2040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2040 -> 2051  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2040 -> 5033  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5033 -> 2057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2051 -> 5033  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2057 -> 2075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2075 -> 2095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2095 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2101 -> 2109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2109 -> 2122  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2109 -> 5102  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5102 -> 2128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2122 -> 5102  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2128 -> 2154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2154 -> 2174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2174 -> 5167  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2182 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2191 -> 2199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2199 -> 2212  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2199 -> 5192  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5192 -> 2218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2212 -> 5192  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2218 -> 2227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2227 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2235 -> 2240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2240 -> 2245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2245 -> 2255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2255 -> 2262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2262 -> 2266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2266 -> 2273  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2266 -> 5259  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5259 -> 2286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2273 -> 5259  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2286 -> 2300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2308 -> 2316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2316 -> 2324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2324 -> 2335  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2324 -> 5317  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5317 -> 2341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2335 -> 5317  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2341 -> 2358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2358 -> 2374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2374 -> 2385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2385 -> 2402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2454 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2457 -> 2462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2462 -> 2467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2467 -> 2477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2477 -> 2484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2484 -> 2488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2488 -> 2495  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2488 -> 5481  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5481 -> 2508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2495 -> 5481  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2508 -> 2525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2545 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2552 -> 2560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2560 -> 2568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2568 -> 2579  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2568 -> 5561  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5561 -> 2585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2579 -> 5561  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2585 -> 2606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2606 -> 2622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2622 -> 2633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2633 -> 2646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2646 -> 2667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2715 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2718 -> 2723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2723 -> 2728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2728 -> 2738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2738 -> 2745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2745 -> 2749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2749 -> 2756  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2749 -> 5742  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5742 -> 2769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2756 -> 5742  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2769 -> 2787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2787 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2793 -> 2802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2802 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2808 -> 2829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2849 -> 2869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2869 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2876 -> 2884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2884 -> 2892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2892 -> 2903  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2892 -> 5885  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5885 -> 2909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2903 -> 5885  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2919 -> 2927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2927 -> 2935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2935 -> 2946  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2935 -> 5928  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5928 -> 2952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2946 -> 5928  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2952 -> 2971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2971 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2983 -> 2992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2992 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
