digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
1596 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ require(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n56-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ require(b > 0);\n73-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
80 [label="12_ uint256 c = a / b;\n80-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
88 [label="13_ return c;\n88-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
90 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n90-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
107 [label="16_ require(b <= a);\n107-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
114 [label="17_ uint256 c = a - b;\n114-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
122 [label="18_ return c;\n122-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
124 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n124-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
141 [label="21_ uint256 c = a + b;\n141-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
149 [label="22_ require(c >= a);\n149-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
156 [label="23_ return c;\n156-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
158 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n158-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
175 [label="26_ require(b != 0);\n175-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
182 [label="27_ return a % b;\n182-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
189 [label="31_ function totalSupply() external view returns (uint256);\n189-function_definition-32-32", method="totalSupply()", type_label=function_definition];
197 [label="32_ function balanceOf(address who) external view returns (uint256);\n197-function_definition-33-33", method="balanceOf(address who)", type_label=function_definition];
209 [label="33_ function transfer(address to, uint256 value) external returns (bool);\n209-function_definition-34-34", method="transfer(address to,uint256 value)", type_label=function_definition];
224 [label="34_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n224-function_definition-35-35", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
243 [label="35_ function approve(address spender, uint256 value) external returns (bool);\n243-function_definition-36-36", method="approve(address spender,uint256 value)", type_label=function_definition];
258 [label="36_ function allowance(address owner, address spender) external view returns (uint256);\n258-function_definition-37-37", method="allowance(address owner,address spender)", type_label=function_definition];
323 [label="43_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n323-function_definition-44-52", method="bug_tmstmp20()", type_label=function_definition];
328 [label="44_ uint pastBlockTime_tmstmp20;\n328-new_variable-45-45", method="bug_tmstmp20()", type_label=new_variable];
333 [label="45_ require(msg.value == 10 ether);\n333-expression_statement-46-46", method="bug_tmstmp20()", type_label=expression_statement];
343 [label="46_ require(now != pastBlockTime_tmstmp20);\n343-expression_statement-47-47", method="bug_tmstmp20()", type_label=expression_statement];
350 [label="47_ pastBlockTime_tmstmp20 = now;\n350-expression_statement-48-48", method="bug_tmstmp20()", type_label=expression_statement];
354 [label="48_ if_now % 15 == 0\n354-if-49-51", method="bug_tmstmp20()", type_label=if];
1920 [label="48_ end_if", method="bug_tmstmp20()", type_label=end_if];
361 [label="49_ msg.sender.transfer(address(this).balance);\n361-expression_statement-50-50", method="bug_tmstmp20()", type_label=expression_statement];
374 [label="52_ uint8 constant DECIMALS = 18;\n374-new_variable-53-53", method="", type_label=new_variable];
379 [label="53_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n379-function_definition-54-62", method="bug_tmstmp32()", type_label=function_definition];
384 [label="54_ uint pastBlockTime_tmstmp32;\n384-new_variable-55-55", method="bug_tmstmp32()", type_label=new_variable];
389 [label="55_ require(msg.value == 10 ether);\n389-expression_statement-56-56", method="bug_tmstmp32()", type_label=expression_statement];
399 [label="56_ require(now != pastBlockTime_tmstmp32);\n399-expression_statement-57-57", method="bug_tmstmp32()", type_label=expression_statement];
406 [label="57_ pastBlockTime_tmstmp32 = now;\n406-expression_statement-58-58", method="bug_tmstmp32()", type_label=expression_statement];
410 [label="58_ if_now % 15 == 0\n410-if-59-61", method="bug_tmstmp32()", type_label=if];
1976 [label="58_ end_if", method="bug_tmstmp32()", type_label=end_if];
417 [label="59_ msg.sender.transfer(address(this).balance);\n417-expression_statement-60-60", method="bug_tmstmp32()", type_label=expression_statement];
430 [label="62_ uint256 private _totalSupply;\n430-new_variable-63-63", method="", type_label=new_variable];
435 [label="63_ string private _name;\n435-new_variable-64-64", method="", type_label=new_variable];
440 [label="64_ string private _symbol;\n440-new_variable-65-65", method="", type_label=new_variable];
445 [label="65_ address winner_tmstmp38;\n445-new_variable-66-66", method="", type_label=new_variable];
449 [label="66_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n449-function_definition-67-69", method="play_tmstmp38(uint startTime)", type_label=function_definition];
457 [label="67_ if_startTime + (5 * 1 days) == block.timestamp\n457-if-68-69", method="play_tmstmp38(uint startTime)", type_label=if];
2023 [label="67_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
470 [label="68_ winner_tmstmp38 = msg.sender;\n470-expression_statement-69-69", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
476 [label="69_ mapping (address => uint256) private _balances;\n476-new_variable-70-70", method="", type_label=new_variable];
483 [label="70_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n483-function_definition-71-79", method="bug_tmstmp4()", type_label=function_definition];
488 [label="71_ uint pastBlockTime_tmstmp4;\n488-new_variable-72-72", method="bug_tmstmp4()", type_label=new_variable];
493 [label="72_ require(msg.value == 10 ether);\n493-expression_statement-73-73", method="bug_tmstmp4()", type_label=expression_statement];
503 [label="73_ require(now != pastBlockTime_tmstmp4);\n503-expression_statement-74-74", method="bug_tmstmp4()", type_label=expression_statement];
510 [label="74_ pastBlockTime_tmstmp4 = now;\n510-expression_statement-75-75", method="bug_tmstmp4()", type_label=expression_statement];
514 [label="75_ if_now % 15 == 0\n514-if-76-78", method="bug_tmstmp4()", type_label=if];
2080 [label="75_ end_if", method="bug_tmstmp4()", type_label=end_if];
521 [label="76_ msg.sender.transfer(address(this).balance);\n521-expression_statement-77-77", method="bug_tmstmp4()", type_label=expression_statement];
534 [label="79_ mapping (address => mapping (address => uint256)) private _allowed;\n534-new_variable-80-80", method="", type_label=new_variable];
543 [label="80_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n543-function_definition-81-83", method="totalSupply()", type_label=function_definition];
552 [label="81_ return _totalSupply;\n552-return-82-82", method="totalSupply()", type_label=return];
554 [label="83_ address winner_tmstmp14;\n554-new_variable-84-84", method="", type_label=new_variable];
558 [label="84_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n558-function_definition-85-87", method="play_tmstmp14(uint startTime)", type_label=function_definition];
566 [label="85_ if_startTime + (5 * 1 days) == block.timestamp\n566-if-86-87", method="play_tmstmp14(uint startTime)", type_label=if];
2132 [label="85_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
579 [label="86_ winner_tmstmp14 = msg.sender;\n579-expression_statement-87-87", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
585 [label="87_ function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n585-function_definition-88-90", method="balanceOf(address owner)", type_label=function_definition];
598 [label="88_ return _balances[owner];\n598-return-89-89", method="balanceOf(address owner)", type_label=return];
602 [label="90_ address winner_tmstmp30;\n602-new_variable-91-91", method="", type_label=new_variable];
606 [label="91_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n606-function_definition-92-94", method="play_tmstmp30(uint startTime)", type_label=function_definition];
614 [label="92_ if_startTime + (5 * 1 days) == block.timestamp\n614-if-93-94", method="play_tmstmp30(uint startTime)", type_label=if];
2180 [label="92_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
627 [label="93_ winner_tmstmp30 = msg.sender;\n627-expression_statement-94-94", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
633 [label="94_ function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n633-function_definition-95-98", method="transfer(address to,uint256 value)", type_label=function_definition];
649 [label="95_ _transfer(msg.sender, to, value);\n649-expression_statement-96-96", method="transfer(address to,uint256 value)", type_label=expression_statement];
660 [label="96_ return true;\n660-return-97-97", method="transfer(address to,uint256 value)", type_label=return];
663 [label="98_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n663-function_definition-99-107", method="bug_tmstmp8()", type_label=function_definition];
668 [label="99_ uint pastBlockTime_tmstmp8;\n668-new_variable-100-100", method="bug_tmstmp8()", type_label=new_variable];
673 [label="100_ require(msg.value == 10 ether);\n673-expression_statement-101-101", method="bug_tmstmp8()", type_label=expression_statement];
683 [label="101_ require(now != pastBlockTime_tmstmp8);\n683-expression_statement-102-102", method="bug_tmstmp8()", type_label=expression_statement];
690 [label="102_ pastBlockTime_tmstmp8 = now;\n690-expression_statement-103-103", method="bug_tmstmp8()", type_label=expression_statement];
694 [label="103_ if_now % 15 == 0\n694-if-104-106", method="bug_tmstmp8()", type_label=if];
2260 [label="103_ end_if", method="bug_tmstmp8()", type_label=end_if];
701 [label="104_ msg.sender.transfer(address(this).balance);\n701-expression_statement-105-105", method="bug_tmstmp8()", type_label=expression_statement];
714 [label="107_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n         _transfer(from, to, value);\n         _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n         return true;\n    }\n714-function_definition-108-112", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
734 [label="108_ _transfer(from, to, value);\n734-expression_statement-109-109", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
743 [label="109_ _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n743-expression_statement-110-110", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
765 [label="110_ return true;\n765-return-111-111", method="transferFrom(address from,address to,uint256 value)", type_label=return];
768 [label="112_ address winner_tmstmp39;\n768-new_variable-113-113", method="", type_label=new_variable];
772 [label="113_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n772-function_definition-114-117", method="play_tmstmp39(uint startTime)", type_label=function_definition];
780 [label="114_ uint _vtime = block.timestamp;\n780-new_variable-115-115", method="play_tmstmp39(uint startTime)", type_label=new_variable];
788 [label="115_ if_startTime + (5 * 1 days) == _vtime\n788-if-116-117", method="play_tmstmp39(uint startTime)", type_label=if];
2354 [label="115_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
799 [label="116_ winner_tmstmp39 = msg.sender;\n799-expression_statement-117-117", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
805 [label="117_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n805-function_definition-118-121", method="approve(address spender,uint256 value)", type_label=function_definition];
821 [label="118_ _approve(msg.sender, spender, value);\n821-expression_statement-119-119", method="approve(address spender,uint256 value)", type_label=expression_statement];
832 [label="119_ return true;\n832-return-120-120", method="approve(address spender,uint256 value)", type_label=return];
835 [label="121_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n835-function_definition-122-130", method="bug_tmstmp36()", type_label=function_definition];
840 [label="122_ uint pastBlockTime_tmstmp36;\n840-new_variable-123-123", method="bug_tmstmp36()", type_label=new_variable];
845 [label="123_ require(msg.value == 10 ether);\n845-expression_statement-124-124", method="bug_tmstmp36()", type_label=expression_statement];
855 [label="124_ require(now != pastBlockTime_tmstmp36);\n855-expression_statement-125-125", method="bug_tmstmp36()", type_label=expression_statement];
862 [label="125_ pastBlockTime_tmstmp36 = now;\n862-expression_statement-126-126", method="bug_tmstmp36()", type_label=expression_statement];
866 [label="126_ if_now % 15 == 0\n866-if-127-129", method="bug_tmstmp36()", type_label=if];
2432 [label="126_ end_if", method="bug_tmstmp36()", type_label=end_if];
873 [label="127_ msg.sender.transfer(address(this).balance);\n873-expression_statement-128-128", method="bug_tmstmp36()", type_label=expression_statement];
886 [label="130_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n886-function_definition-131-133", method="allowance(address owner,address spender)", type_label=function_definition];
903 [label="131_ return _allowed[owner][spender];\n903-return-132-132", method="allowance(address owner,address spender)", type_label=return];
909 [label="133_ address winner_tmstmp35;\n909-new_variable-134-134", method="", type_label=new_variable];
913 [label="134_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n913-function_definition-135-138", method="play_tmstmp35(uint startTime)", type_label=function_definition];
921 [label="135_ uint _vtime = block.timestamp;\n921-new_variable-136-136", method="play_tmstmp35(uint startTime)", type_label=new_variable];
929 [label="136_ if_startTime + (5 * 1 days) == _vtime\n929-if-137-138", method="play_tmstmp35(uint startTime)", type_label=if];
2495 [label="136_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
940 [label="137_ winner_tmstmp35 = msg.sender;\n940-expression_statement-138-138", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
946 [label="138_ function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n946-function_definition-139-141", method="burn(uint256 value)", type_label=function_definition];
954 [label="139_ _burn(msg.sender, value);\n954-expression_statement-140-140", method="burn(uint256 value)", type_label=expression_statement];
963 [label="141_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n963-function_definition-142-150", method="bug_tmstmp40()", type_label=function_definition];
968 [label="142_ uint pastBlockTime_tmstmp40;\n968-new_variable-143-143", method="bug_tmstmp40()", type_label=new_variable];
973 [label="143_ require(msg.value == 10 ether);\n973-expression_statement-144-144", method="bug_tmstmp40()", type_label=expression_statement];
983 [label="144_ require(now != pastBlockTime_tmstmp40);\n983-expression_statement-145-145", method="bug_tmstmp40()", type_label=expression_statement];
990 [label="145_ pastBlockTime_tmstmp40 = now;\n990-expression_statement-146-146", method="bug_tmstmp40()", type_label=expression_statement];
994 [label="146_ if_now % 15 == 0\n994-if-147-149", method="bug_tmstmp40()", type_label=if];
2560 [label="146_ end_if", method="bug_tmstmp40()", type_label=end_if];
1001 [label="147_ msg.sender.transfer(address(this).balance);\n1001-expression_statement-148-148", method="bug_tmstmp40()", type_label=expression_statement];
1014 [label="150_ function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n1014-function_definition-151-156", method="_mint(address account,uint256 value)", type_label=function_definition];
1026 [label="151_ require(account != address(0));\n1026-expression_statement-152-152", method="_mint(address account,uint256 value)", type_label=expression_statement];
1035 [label="152_ _totalSupply = _totalSupply.add(value);\n1035-expression_statement-153-153", method="_mint(address account,uint256 value)", type_label=expression_statement];
1044 [label="153_ _balances[account] = _balances[account].add(value);\n1044-expression_statement-154-154", method="_mint(address account,uint256 value)", type_label=expression_statement];
1067 [label="156_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1067-function_definition-157-159", method="bug_tmstmp33()", type_label=function_definition];
1076 [label="157_ return block.timestamp >= 1546300800;\n1076-return-158-158", method="bug_tmstmp33()", type_label=return];
1082 [label="159_ function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n1082-function_definition-160-165", method="_transfer(address from,address to,uint256 value)", type_label=function_definition];
1098 [label="160_ require(to != address(0));\n1098-expression_statement-161-161", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1107 [label="161_ _balances[from] = _balances[from].sub(value);\n1107-expression_statement-162-162", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1120 [label="162_ _balances[to] = _balances[to].add(value);\n1120-expression_statement-163-163", method="_transfer(address from,address to,uint256 value)", type_label=expression_statement];
1141 [label="165_ address winner_tmstmp27;\n1141-new_variable-166-166", method="", type_label=new_variable];
1145 [label="166_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1145-function_definition-167-170", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1153 [label="167_ uint _vtime = block.timestamp;\n1153-new_variable-168-168", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1161 [label="168_ if_startTime + (5 * 1 days) == _vtime\n1161-if-169-170", method="play_tmstmp27(uint startTime)", type_label=if];
2727 [label="168_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1172 [label="169_ winner_tmstmp27 = msg.sender;\n1172-expression_statement-170-170", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1178 [label="170_ function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n1178-function_definition-171-176", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
1194 [label="171_ require(spender != address(0));\n1194-expression_statement-172-172", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1203 [label="172_ require(owner != address(0));\n1203-expression_statement-173-173", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1212 [label="173_ _allowed[owner][spender] = value;\n1212-expression_statement-174-174", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1228 [label="176_ address winner_tmstmp31;\n1228-new_variable-177-177", method="", type_label=new_variable];
1232 [label="177_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1232-function_definition-178-181", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1240 [label="178_ uint _vtime = block.timestamp;\n1240-new_variable-179-179", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1248 [label="179_ if_startTime + (5 * 1 days) == _vtime\n1248-if-180-181", method="play_tmstmp31(uint startTime)", type_label=if];
2814 [label="179_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1259 [label="180_ winner_tmstmp31 = msg.sender;\n1259-expression_statement-181-181", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1265 [label="181_ function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n1265-function_definition-182-187", method="_burn(address account,uint256 value)", type_label=function_definition];
1277 [label="182_ require(account != address(0));\n1277-expression_statement-183-183", method="_burn(address account,uint256 value)", type_label=expression_statement];
1286 [label="183_ _totalSupply = _totalSupply.sub(value);\n1286-expression_statement-184-184", method="_burn(address account,uint256 value)", type_label=expression_statement];
1295 [label="184_ _balances[account] = _balances[account].sub(value);\n1295-expression_statement-185-185", method="_burn(address account,uint256 value)", type_label=expression_statement];
1318 [label="187_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1318-function_definition-188-190", method="bug_tmstmp13()", type_label=function_definition];
1327 [label="188_ return block.timestamp >= 1546300800;\n1327-return-189-189", method="bug_tmstmp13()", type_label=return];
1339 [label="192_ string private _name;\n1339-new_variable-193-193", method="", type_label=new_variable];
1344 [label="193_ string private _symbol;\n1344-new_variable-194-194", method="", type_label=new_variable];
1349 [label="194_ address winner_tmstmp7;\n1349-new_variable-195-195", method="", type_label=new_variable];
1353 [label="195_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n1353-function_definition-196-199", method="play_tmstmp7(uint startTime)", type_label=function_definition];
1361 [label="196_ uint _vtime = block.timestamp;\n1361-new_variable-197-197", method="play_tmstmp7(uint startTime)", type_label=new_variable];
1369 [label="197_ if_startTime + (5 * 1 days) == _vtime\n1369-if-198-199", method="play_tmstmp7(uint startTime)", type_label=if];
2935 [label="197_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
1380 [label="198_ winner_tmstmp7 = msg.sender;\n1380-expression_statement-199-199", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
1386 [label="199_ uint8 private _decimals;\n1386-new_variable-200-200", method="", type_label=new_variable];
1405 [label="201_ _name = name;\n1405-expression_statement-202-202", method="", type_label=expression_statement];
1409 [label="202_ _symbol = symbol;\n1409-expression_statement-203-203", method="", type_label=expression_statement];
1413 [label="203_ _decimals = decimals;\n1413-expression_statement-204-204", method="", type_label=expression_statement];
1417 [label="205_ uint256 bugv_tmstmp5 = block.timestamp;\n1417-new_variable-206-206", method="", type_label=new_variable];
1424 [label="206_ function name() public view returns (string memory) {\n        return _name;\n    }\n1424-function_definition-207-209", method="name()", type_label=function_definition];
1433 [label="207_ return _name;\n1433-return-208-208", method="name()", type_label=return];
1435 [label="209_ uint256 bugv_tmstmp1 = block.timestamp;\n1435-new_variable-210-210", method="", type_label=new_variable];
1442 [label="210_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n1442-function_definition-211-213", method="symbol()", type_label=function_definition];
1451 [label="211_ return _symbol;\n1451-return-212-212", method="symbol()", type_label=return];
1453 [label="213_ uint256 bugv_tmstmp2 = block.timestamp;\n1453-new_variable-214-214", method="", type_label=new_variable];
1460 [label="214_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n1460-function_definition-215-217", method="decimals()", type_label=function_definition];
1469 [label="215_ return _decimals;\n1469-return-216-216", method="decimals()", type_label=return];
1471 [label="217_ uint256 bugv_tmstmp3 = block.timestamp;\n1471-new_variable-218-218", method="", type_label=new_variable];
1487 [label="220_ address winner_tmstmp23;\n1487-new_variable-221-221", method="", type_label=new_variable];
1491 [label="221_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n1491-function_definition-222-225", method="play_tmstmp23(uint startTime)", type_label=function_definition];
1499 [label="222_ uint _vtime = block.timestamp;\n1499-new_variable-223-223", method="play_tmstmp23(uint startTime)", type_label=new_variable];
1507 [label="223_ if_startTime + (5 * 1 days) == _vtime\n1507-if-224-225", method="play_tmstmp23(uint startTime)", type_label=if];
3073 [label="223_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
1518 [label="224_ winner_tmstmp23 = msg.sender;\n1518-expression_statement-225-225", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
1524 [label="225_ uint8 public constant DECIMALS = 18;\n1524-new_variable-226-226", method="", type_label=new_variable];
1530 [label="226_ uint256 public constant INITIAL_SUPPLY = 50000000000 * (10 ** uint256(DECIMALS));\n1530-new_variable-227-227", method="", type_label=new_variable];
1544 [label="227_ ERC20Detailed(\"SaveWon\", \"SVW\", DECIMALS)\n1544-expression_statement-228-228", method="", type_label=expression_statement];
1555 [label="228_ _mint(msg.sender, INITIAL_SUPPLY);\n1555-expression_statement-229-229", method="", type_label=expression_statement];
1564 [label="230_ uint256 bugv_tmstmp4 = block.timestamp;\n1564-new_variable-231-231", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 1596  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1596 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 1596  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
90 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
124 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
156 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
158 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
323 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
328 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
354 -> 361  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
354 -> 1920  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1920 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 1920  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
379 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
389 -> 399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
399 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 417  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
410 -> 1976  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1976 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 1976  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
430 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 470  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
457 -> 2023  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2023 -> 476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 2023  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
483 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
514 -> 521  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
514 -> 2080  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2080 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 2080  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
543 -> 552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
552 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
558 -> 566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
566 -> 579  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
566 -> 2132  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2132 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 2132  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
585 -> 598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
606 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 627  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
614 -> 2180  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2180 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
627 -> 2180  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
633 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
663 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
683 -> 690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
690 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
694 -> 701  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
694 -> 2260  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2260 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 2260  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
714 -> 734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
772 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 799  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
788 -> 2354  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2354 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 2354  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
805 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
835 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 873  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
866 -> 2432  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2432 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 2432  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
886 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
903 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
913 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 940  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
929 -> 2495  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2495 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 2495  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
946 -> 954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
990 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 1001  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
994 -> 2560  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2560 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1001 -> 2560  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1014 -> 1026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1026 -> 1035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1035 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1082 -> 1098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1145 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 1161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1161 -> 1172  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1161 -> 2727  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2727 -> 1178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1172 -> 2727  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1178 -> 1194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1194 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1240 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1248 -> 1259  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1248 -> 2814  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2814 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1259 -> 2814  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1265 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1277 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1286 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1318 -> 1327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1327 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1339 -> 1344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1344 -> 1349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1353 -> 1361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1361 -> 1369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1369 -> 1380  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1369 -> 2935  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2935 -> 1386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1380 -> 2935  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1405 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1409 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1424 -> 1433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1433 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1442 -> 1451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1451 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1460 -> 1469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1469 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1491 -> 1499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1499 -> 1507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 1518  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1507 -> 3073  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3073 -> 1524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1518 -> 3073  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1524 -> 1530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
