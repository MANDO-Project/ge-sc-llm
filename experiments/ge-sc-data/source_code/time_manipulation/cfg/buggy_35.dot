digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n50-function_definition-8-12", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ require(b <= a, \"SafeMath: subtraction overflow\");\n67-expression_statement-9-9", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
77 [label="9_ uint256 c = a - b;\n77-new_variable-10-10", method="sub(uint256 a,uint256 b)", type_label=new_variable];
85 [label="10_ return c;\n85-return-11-11", method="sub(uint256 a,uint256 b)", type_label=return];
87 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n87-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
104 [label="13_ if_a == 0\n104-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
3107 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
109 [label="14_ return 0;\n109-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
111 [label="16_ uint256 c = a * b;\n111-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
119 [label="17_ require(c / a == b, \"SafeMath: multiplication overflow\");\n119-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
131 [label="18_ return c;\n131-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
133 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n133-function_definition-21-25", method="div(uint256 a,uint256 b)", type_label=function_definition];
150 [label="21_ require(b > 0, \"SafeMath: division by zero\");\n150-expression_statement-22-22", method="div(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="22_ uint256 c = a / b;\n160-new_variable-23-23", method="div(uint256 a,uint256 b)", type_label=new_variable];
168 [label="23_ return c;\n168-return-24-24", method="div(uint256 a,uint256 b)", type_label=return];
170 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n170-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
187 [label="26_ require(b != 0, \"SafeMath: modulo by zero\");\n187-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
197 [label="27_ return a % b;\n197-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
204 [label="31_ address winner_tmstmp22;\n204-new_variable-32-32", method="", type_label=new_variable];
208 [label="32_ function play_tmstmp22(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp22 = msg.sender;}}\n208-function_definition-33-35", method="play_tmstmp22(uint startTime)", type_label=function_definition];
216 [label="33_ if_startTime + (5 * 1 days) == block.timestamp\n216-if-34-35", method="play_tmstmp22(uint startTime)", type_label=if];
3219 [label="33_ end_if", method="play_tmstmp22(uint startTime)", type_label=end_if];
229 [label="34_ winner_tmstmp22 = msg.sender;\n229-expression_statement-35-35", method="play_tmstmp22(uint startTime)", type_label=expression_statement];
235 [label="35_ address public owner;\n235-new_variable-36-36", method="", type_label=new_variable];
240 [label="36_ function bug_tmstmp12 () public payable {\n	uint pastBlockTime_tmstmp12;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp12);  \n        pastBlockTime_tmstmp12 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n240-function_definition-37-45", method="bug_tmstmp12()", type_label=function_definition];
245 [label="37_ uint pastBlockTime_tmstmp12;\n245-new_variable-38-38", method="bug_tmstmp12()", type_label=new_variable];
250 [label="38_ require(msg.value == 10 ether);\n250-expression_statement-39-39", method="bug_tmstmp12()", type_label=expression_statement];
260 [label="39_ require(now != pastBlockTime_tmstmp12);\n260-expression_statement-40-40", method="bug_tmstmp12()", type_label=expression_statement];
267 [label="40_ pastBlockTime_tmstmp12 = now;\n267-expression_statement-41-41", method="bug_tmstmp12()", type_label=expression_statement];
271 [label="41_ if_now % 15 == 0\n271-if-42-44", method="bug_tmstmp12()", type_label=if];
3274 [label="41_ end_if", method="bug_tmstmp12()", type_label=end_if];
278 [label="42_ msg.sender.transfer(address(this).balance);\n278-expression_statement-43-43", method="bug_tmstmp12()", type_label=expression_statement];
291 [label="45_ address private newOwner;\n291-new_variable-46-46", method="", type_label=new_variable];
296 [label="46_ address winner_tmstmp31;\n296-new_variable-47-47", method="", type_label=new_variable];
300 [label="47_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n300-function_definition-48-51", method="play_tmstmp31(uint startTime)", type_label=function_definition];
308 [label="48_ uint _vtime = block.timestamp;\n308-new_variable-49-49", method="play_tmstmp31(uint startTime)", type_label=new_variable];
316 [label="49_ if_startTime + (5 * 1 days) == _vtime\n316-if-50-51", method="play_tmstmp31(uint startTime)", type_label=if];
3319 [label="49_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
327 [label="50_ winner_tmstmp31 = msg.sender;\n327-expression_statement-51-51", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
349 [label="53_ owner = msg.sender;\n349-expression_statement-54-54", method="", type_label=expression_statement];
355 [label="55_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n355-function_definition-56-58", method="bug_tmstmp9()", type_label=function_definition];
364 [label="56_ return block.timestamp >= 1546300800;\n364-return-57-57", method="bug_tmstmp9()", type_label=return];
370 [label="58_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n370-expression_statement-59-62", method="", type_label=expression_statement];
373 [label="59_ require(msg.sender == owner);\n373-expression_statement-60-60", method="", type_label=expression_statement];
382 [label="60_ _;\n382-expression_statement-61-61", method="", type_label=expression_statement];
384 [label="62_ function onlyOwnerTransferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n384-function_definition-63-65", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=function_definition];
391 [label="62_ onlyOwner\n391-expression_statement-63-63", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=expression_statement];
394 [label="63_ newOwner = _newOwner;\n394-expression_statement-64-64", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=expression_statement];
398 [label="65_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n398-function_definition-66-68", method="bug_tmstmp25()", type_label=function_definition];
407 [label="66_ return block.timestamp >= 1546300800;\n407-return-67-67", method="bug_tmstmp25()", type_label=return];
413 [label="68_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(now, owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n413-function_definition-69-74", method="acceptOwnership()", type_label=function_definition];
417 [label="69_ require(msg.sender == newOwner);\n417-expression_statement-70-70", method="acceptOwnership()", type_label=expression_statement];
434 [label="71_ owner = newOwner;\n434-expression_statement-72-72", method="acceptOwnership()", type_label=expression_statement];
438 [label="72_ newOwner = address(0);\n438-expression_statement-73-73", method="acceptOwnership()", type_label=expression_statement];
444 [label="74_ address winner_tmstmp19;\n444-new_variable-75-75", method="", type_label=new_variable];
448 [label="75_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n448-function_definition-76-79", method="play_tmstmp19(uint startTime)", type_label=function_definition];
456 [label="76_ uint _vtime = block.timestamp;\n456-new_variable-77-77", method="play_tmstmp19(uint startTime)", type_label=new_variable];
464 [label="77_ if_startTime + (5 * 1 days) == _vtime\n464-if-78-79", method="play_tmstmp19(uint startTime)", type_label=if];
3467 [label="77_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
475 [label="78_ winner_tmstmp19 = msg.sender;\n475-expression_statement-79-79", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
484 [label="82_ function transfer(address _to, uint256 _amount) external returns (bool);\n484-function_definition-83-83", method="transfer(address _to,uint256 _amount)", type_label=function_definition];
499 [label="83_ function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\n499-function_definition-84-84", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=function_definition];
529 [label="87_ address winner_tmstmp11;\n529-new_variable-88-88", method="", type_label=new_variable];
533 [label="88_ function play_tmstmp11(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp11 = msg.sender;}}\n533-function_definition-89-92", method="play_tmstmp11(uint startTime)", type_label=function_definition];
541 [label="89_ uint _vtime = block.timestamp;\n541-new_variable-90-90", method="play_tmstmp11(uint startTime)", type_label=new_variable];
549 [label="90_ if_startTime + (5 * 1 days) == _vtime\n549-if-91-92", method="play_tmstmp11(uint startTime)", type_label=if];
3552 [label="90_ end_if", method="play_tmstmp11(uint startTime)", type_label=end_if];
560 [label="91_ winner_tmstmp11 = msg.sender;\n560-expression_statement-92-92", method="play_tmstmp11(uint startTime)", type_label=expression_statement];
566 [label="92_ bool public safeGuard;\n566-new_variable-93-93", method="", type_label=new_variable];
571 [label="93_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n571-function_definition-94-96", method="bug_tmstmp1()", type_label=function_definition];
580 [label="94_ return block.timestamp >= 1546300800;\n580-return-95-95", method="bug_tmstmp1()", type_label=return];
586 [label="96_ address public feeAccount;\n586-new_variable-97-97", method="", type_label=new_variable];
591 [label="97_ address winner_tmstmp2;\n591-new_variable-98-98", method="", type_label=new_variable];
595 [label="98_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n595-function_definition-99-101", method="play_tmstmp2(uint startTime)", type_label=function_definition];
603 [label="99_ if_startTime + (5 * 1 days) == block.timestamp\n603-if-100-101", method="play_tmstmp2(uint startTime)", type_label=if];
3606 [label="99_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
616 [label="100_ winner_tmstmp2 = msg.sender;\n616-expression_statement-101-101", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
622 [label="101_ uint public tradingFee = 50;\n622-new_variable-102-102", method="", type_label=new_variable];
628 [label="102_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n628-function_definition-103-105", method="bug_tmstmp17()", type_label=function_definition];
637 [label="103_ return block.timestamp >= 1546300800;\n637-return-104-104", method="bug_tmstmp17()", type_label=return];
643 [label="105_ mapping (address => mapping (address => uint)) public tokens;\n643-new_variable-106-106", method="", type_label=new_variable];
652 [label="106_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n652-function_definition-107-109", method="bug_tmstmp37()", type_label=function_definition];
661 [label="107_ return block.timestamp >= 1546300800;\n661-return-108-108", method="bug_tmstmp37()", type_label=return];
667 [label="109_ mapping (address => mapping (bytes32 => bool)) public orders;\n667-new_variable-110-110", method="", type_label=new_variable];
676 [label="110_ address winner_tmstmp3;\n676-new_variable-111-111", method="", type_label=new_variable];
680 [label="111_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n680-function_definition-112-115", method="play_tmstmp3(uint startTime)", type_label=function_definition];
688 [label="112_ uint _vtime = block.timestamp;\n688-new_variable-113-113", method="play_tmstmp3(uint startTime)", type_label=new_variable];
696 [label="113_ if_startTime + (5 * 1 days) == _vtime\n696-if-114-115", method="play_tmstmp3(uint startTime)", type_label=if];
3699 [label="113_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
707 [label="114_ winner_tmstmp3 = msg.sender;\n707-expression_statement-115-115", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
713 [label="115_ mapping (address => mapping (bytes32 => uint)) public orderFills;\n713-new_variable-116-116", method="", type_label=new_variable];
722 [label="116_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n722-function_definition-117-119", method="bug_tmstmp13()", type_label=function_definition];
731 [label="117_ return block.timestamp >= 1546300800;\n731-return-118-118", method="bug_tmstmp13()", type_label=return];
771 [label="120_ uint256 bugv_tmstmp5 = block.timestamp;\n771-new_variable-121-121", method="", type_label=new_variable];
824 [label="122_ uint256 bugv_tmstmp1 = block.timestamp;\n824-new_variable-123-123", method="", type_label=new_variable];
861 [label="124_ uint256 bugv_tmstmp2 = block.timestamp;\n861-new_variable-125-125", method="", type_label=new_variable];
890 [label="126_ uint256 bugv_tmstmp3 = block.timestamp;\n890-new_variable-127-127", method="", type_label=new_variable];
919 [label="128_ uint256 bugv_tmstmp4 = block.timestamp;\n919-new_variable-129-129", method="", type_label=new_variable];
938 [label="131_ feeAccount = msg.sender;\n938-expression_statement-132-132", method="", type_label=expression_statement];
944 [label="133_ address winner_tmstmp26;\n944-new_variable-134-134", method="", type_label=new_variable];
948 [label="134_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n948-function_definition-135-137", method="play_tmstmp26(uint startTime)", type_label=function_definition];
956 [label="135_ if_startTime + (5 * 1 days) == block.timestamp\n956-if-136-137", method="play_tmstmp26(uint startTime)", type_label=if];
3959 [label="135_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
969 [label="136_ winner_tmstmp26 = msg.sender;\n969-expression_statement-137-137", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
975 [label="137_ function changeSafeguardStatus() onlyOwner public\n    {\n        if (safeGuard == false)\n        {\n            safeGuard = true;\n        }\n        else\n        {\n            safeGuard = false;    \n        }\n    }\n975-function_definition-138-148", method="changeSafeguardStatus()", type_label=function_definition];
977 [label="137_ onlyOwner\n977-expression_statement-138-138", method="changeSafeguardStatus()", type_label=expression_statement];
981 [label="139_ if_safeGuard == false\n981-if-140-147", method="changeSafeguardStatus()", type_label=if];
3984 [label="139_ end_if", method="changeSafeguardStatus()", type_label=end_if];
987 [label="141_ safeGuard = true;\n987-expression_statement-142-142", method="changeSafeguardStatus()", type_label=expression_statement];
993 [label="145_ safeGuard = false;\n993-expression_statement-146-146", method="changeSafeguardStatus()", type_label=expression_statement];
998 [label="148_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n998-function_definition-149-157", method="bug_tmstmp20()", type_label=function_definition];
1003 [label="149_ uint pastBlockTime_tmstmp20;\n1003-new_variable-150-150", method="bug_tmstmp20()", type_label=new_variable];
1008 [label="150_ require(msg.value == 10 ether);\n1008-expression_statement-151-151", method="bug_tmstmp20()", type_label=expression_statement];
1018 [label="151_ require(now != pastBlockTime_tmstmp20);\n1018-expression_statement-152-152", method="bug_tmstmp20()", type_label=expression_statement];
1025 [label="152_ pastBlockTime_tmstmp20 = now;\n1025-expression_statement-153-153", method="bug_tmstmp20()", type_label=expression_statement];
1029 [label="153_ if_now % 15 == 0\n1029-if-154-156", method="bug_tmstmp20()", type_label=if];
4032 [label="153_ end_if", method="bug_tmstmp20()", type_label=end_if];
1036 [label="154_ msg.sender.transfer(address(this).balance);\n1036-expression_statement-155-155", method="bug_tmstmp20()", type_label=expression_statement];
1049 [label="157_ function calculatePercentage(uint256 PercentOf, uint256 percentTo ) internal pure returns (uint256) \n    {\n        uint256 factor = 10000;\n        require(percentTo <= factor);\n        uint256 c = PercentOf.mul(percentTo).div(factor);\n        return c;\n    }\n1049-function_definition-158-164", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=function_definition];
1066 [label="159_ uint256 factor = 10000;\n1066-new_variable-160-160", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=new_variable];
1072 [label="160_ require(percentTo <= factor);\n1072-expression_statement-161-161", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=expression_statement];
1079 [label="161_ uint256 c = PercentOf.mul(percentTo).div(factor);\n1079-new_variable-162-162", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=new_variable];
1095 [label="162_ return c;\n1095-return-163-163", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=return];
1097 [label="164_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1097-function_definition-165-173", method="bug_tmstmp32()", type_label=function_definition];
1102 [label="165_ uint pastBlockTime_tmstmp32;\n1102-new_variable-166-166", method="bug_tmstmp32()", type_label=new_variable];
1107 [label="166_ require(msg.value == 10 ether);\n1107-expression_statement-167-167", method="bug_tmstmp32()", type_label=expression_statement];
1117 [label="167_ require(now != pastBlockTime_tmstmp32);\n1117-expression_statement-168-168", method="bug_tmstmp32()", type_label=expression_statement];
1124 [label="168_ pastBlockTime_tmstmp32 = now;\n1124-expression_statement-169-169", method="bug_tmstmp32()", type_label=expression_statement];
1128 [label="169_ if_now % 15 == 0\n1128-if-170-172", method="bug_tmstmp32()", type_label=if];
4131 [label="169_ end_if", method="bug_tmstmp32()", type_label=end_if];
1135 [label="170_ msg.sender.transfer(address(this).balance);\n1135-expression_statement-171-171", method="bug_tmstmp32()", type_label=expression_statement];
1148 [label="173_ function changeFeeAccount(address feeAccount_) public onlyOwner {\n    feeAccount = feeAccount_;\n  }\n1148-function_definition-174-176", method="changeFeeAccount(address feeAccount_)", type_label=function_definition];
1155 [label="173_ onlyOwner\n1155-expression_statement-174-174", method="changeFeeAccount(address feeAccount_)", type_label=expression_statement];
1158 [label="174_ feeAccount = feeAccount_;\n1158-expression_statement-175-175", method="changeFeeAccount(address feeAccount_)", type_label=expression_statement];
1162 [label="176_ address winner_tmstmp38;\n1162-new_variable-177-177", method="", type_label=new_variable];
1166 [label="177_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n1166-function_definition-178-180", method="play_tmstmp38(uint startTime)", type_label=function_definition];
1174 [label="178_ if_startTime + (5 * 1 days) == block.timestamp\n1174-if-179-180", method="play_tmstmp38(uint startTime)", type_label=if];
4177 [label="178_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
1187 [label="179_ winner_tmstmp38 = msg.sender;\n1187-expression_statement-180-180", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
1193 [label="180_ function changetradingFee(uint tradingFee_) public onlyOwner{\n    tradingFee = tradingFee_;\n  }\n1193-function_definition-181-183", method="changetradingFee(uint tradingFee_)", type_label=function_definition];
1200 [label="180_ onlyOwner\n1200-expression_statement-181-181", method="changetradingFee(uint tradingFee_)", type_label=expression_statement];
1203 [label="181_ tradingFee = tradingFee_;\n1203-expression_statement-182-182", method="changetradingFee(uint tradingFee_)", type_label=expression_statement];
1207 [label="183_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1207-function_definition-184-192", method="bug_tmstmp4()", type_label=function_definition];
1212 [label="184_ uint pastBlockTime_tmstmp4;\n1212-new_variable-185-185", method="bug_tmstmp4()", type_label=new_variable];
1217 [label="185_ require(msg.value == 10 ether);\n1217-expression_statement-186-186", method="bug_tmstmp4()", type_label=expression_statement];
1227 [label="186_ require(now != pastBlockTime_tmstmp4);\n1227-expression_statement-187-187", method="bug_tmstmp4()", type_label=expression_statement];
1234 [label="187_ pastBlockTime_tmstmp4 = now;\n1234-expression_statement-188-188", method="bug_tmstmp4()", type_label=expression_statement];
1238 [label="188_ if_now % 15 == 0\n1238-if-189-191", method="bug_tmstmp4()", type_label=if];
4241 [label="188_ end_if", method="bug_tmstmp4()", type_label=end_if];
1245 [label="189_ msg.sender.transfer(address(this).balance);\n1245-expression_statement-190-190", method="bug_tmstmp4()", type_label=expression_statement];
1258 [label="192_ function availableTradingFeeOwner() public view returns(uint256){\n      return tokens[address(0)][feeAccount];\n  }\n1258-function_definition-193-195", method="availableTradingFeeOwner()", type_label=function_definition];
1267 [label="193_ return tokens[address(0)][feeAccount];\n1267-return-194-194", method="availableTradingFeeOwner()", type_label=return];
1275 [label="195_ address winner_tmstmp7;\n1275-new_variable-196-196", method="", type_label=new_variable];
1279 [label="196_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n1279-function_definition-197-200", method="play_tmstmp7(uint startTime)", type_label=function_definition];
1287 [label="197_ uint _vtime = block.timestamp;\n1287-new_variable-198-198", method="play_tmstmp7(uint startTime)", type_label=new_variable];
1295 [label="198_ if_startTime + (5 * 1 days) == _vtime\n1295-if-199-200", method="play_tmstmp7(uint startTime)", type_label=if];
4298 [label="198_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
1306 [label="199_ winner_tmstmp7 = msg.sender;\n1306-expression_statement-200-200", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
1312 [label="200_ function withdrawTradingFeeOwner() public onlyOwner returns (string memory){\n      uint256 amount = availableTradingFeeOwner();\n      require (amount > 0, 'Nothing to withdraw');\n      tokens[address(0)][feeAccount] = 0;\n      msg.sender.transfer(amount);\n      emit OwnerWithdrawTradingFee(owner, amount);\n  }\n1312-function_definition-201-207", method="withdrawTradingFeeOwner()", type_label=function_definition];
1315 [label="200_ onlyOwner\n1315-expression_statement-201-201", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1322 [label="201_ uint256 amount = availableTradingFeeOwner();\n1322-new_variable-202-202", method="withdrawTradingFeeOwner()", type_label=new_variable];
1329 [label="202_ require (amount > 0, 'Nothing to withdraw');\n1329-expression_statement-203-203", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1339 [label="203_ tokens[address(0)][feeAccount] = 0;\n1339-expression_statement-204-204", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1349 [label="204_ msg.sender.transfer(amount);\n1349-expression_statement-205-205", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1364 [label="207_ address winner_tmstmp23;\n1364-new_variable-208-208", method="", type_label=new_variable];
1368 [label="208_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n1368-function_definition-209-212", method="play_tmstmp23(uint startTime)", type_label=function_definition];
1376 [label="209_ uint _vtime = block.timestamp;\n1376-new_variable-210-210", method="play_tmstmp23(uint startTime)", type_label=new_variable];
1384 [label="210_ if_startTime + (5 * 1 days) == _vtime\n1384-if-211-212", method="play_tmstmp23(uint startTime)", type_label=if];
4387 [label="210_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
1395 [label="211_ winner_tmstmp23 = msg.sender;\n1395-expression_statement-212-212", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
1401 [label="212_ function deposit() public payable {\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n    emit Deposit(now, address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\n  }\n1401-function_definition-213-216", method="deposit()", type_label=function_definition];
1406 [label="213_ tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n1406-expression_statement-214-214", method="deposit()", type_label=expression_statement];
1459 [label="216_ address winner_tmstmp14;\n1459-new_variable-217-217", method="", type_label=new_variable];
1463 [label="217_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n1463-function_definition-218-220", method="play_tmstmp14(uint startTime)", type_label=function_definition];
1471 [label="218_ if_startTime + (5 * 1 days) == block.timestamp\n1471-if-219-220", method="play_tmstmp14(uint startTime)", type_label=if];
4474 [label="218_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
1484 [label="219_ winner_tmstmp14 = msg.sender;\n1484-expression_statement-220-220", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
1490 [label="220_ function withdraw(uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    require(tokens[address(0)][msg.sender] >= amount);\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n    msg.sender.transfer(amount);\n    emit Withdraw(now, address(0), msg.sender, amount, tokens[address(0)][msg.sender]);\n  }\n1490-function_definition-221-227", method="withdraw(uint amount)", type_label=function_definition];
1498 [label="221_ require(!safeGuard,\"System Paused by Admin\");\n1498-expression_statement-222-222", method="withdraw(uint amount)", type_label=expression_statement];
1507 [label="222_ require(tokens[address(0)][msg.sender] >= amount);\n1507-expression_statement-223-223", method="withdraw(uint amount)", type_label=expression_statement];
1522 [label="223_ tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n1522-expression_statement-224-224", method="withdraw(uint amount)", type_label=expression_statement];
1547 [label="224_ msg.sender.transfer(amount);\n1547-expression_statement-225-225", method="withdraw(uint amount)", type_label=expression_statement];
1580 [label="227_ address winner_tmstmp30;\n1580-new_variable-228-228", method="", type_label=new_variable];
1584 [label="228_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n1584-function_definition-229-231", method="play_tmstmp30(uint startTime)", type_label=function_definition];
1592 [label="229_ if_startTime + (5 * 1 days) == block.timestamp\n1592-if-230-231", method="play_tmstmp30(uint startTime)", type_label=if];
4595 [label="229_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
1605 [label="230_ winner_tmstmp30 = msg.sender;\n1605-expression_statement-231-231", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
1611 [label="231_ function depositToken(address token, uint amount) public {\n    require(token!=address(0));\n    require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n    tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n    emit Deposit(now, token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n1611-function_definition-232-237", method="depositToken(address token,uint amount)", type_label=function_definition];
1623 [label="232_ require(token!=address(0));\n1623-expression_statement-233-233", method="depositToken(address token,uint amount)", type_label=expression_statement];
1632 [label="233_ require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n1632-expression_statement-234-234", method="depositToken(address token,uint amount)", type_label=expression_statement];
1653 [label="234_ tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n1653-expression_statement-235-235", method="depositToken(address token,uint amount)", type_label=expression_statement];
1694 [label="237_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1694-function_definition-238-246", method="bug_tmstmp8()", type_label=function_definition];
1699 [label="238_ uint pastBlockTime_tmstmp8;\n1699-new_variable-239-239", method="bug_tmstmp8()", type_label=new_variable];
1704 [label="239_ require(msg.value == 10 ether);\n1704-expression_statement-240-240", method="bug_tmstmp8()", type_label=expression_statement];
1714 [label="240_ require(now != pastBlockTime_tmstmp8);\n1714-expression_statement-241-241", method="bug_tmstmp8()", type_label=expression_statement];
1721 [label="241_ pastBlockTime_tmstmp8 = now;\n1721-expression_statement-242-242", method="bug_tmstmp8()", type_label=expression_statement];
1725 [label="242_ if_now % 15 == 0\n1725-if-243-245", method="bug_tmstmp8()", type_label=if];
4728 [label="242_ end_if", method="bug_tmstmp8()", type_label=end_if];
1732 [label="243_ msg.sender.transfer(address(this).balance);\n1732-expression_statement-244-244", method="bug_tmstmp8()", type_label=expression_statement];
1745 [label="246_ function withdrawToken(address token, uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    require(token!=address(0));\n    require(tokens[token][msg.sender] >= amount);\n    tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n	  ERC20Essential(token).transfer(msg.sender, amount);\n    emit Withdraw(now, token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n1745-function_definition-247-254", method="withdrawToken(address token,uint amount)", type_label=function_definition];
1757 [label="247_ require(!safeGuard,\"System Paused by Admin\");\n1757-expression_statement-248-248", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1766 [label="248_ require(token!=address(0));\n1766-expression_statement-249-249", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1775 [label="249_ require(tokens[token][msg.sender] >= amount);\n1775-expression_statement-250-250", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1788 [label="250_ tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n1788-expression_statement-251-251", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1809 [label="251_ ERC20Essential(token).transfer(msg.sender, amount);\n1809-expression_statement-252-252", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1843 [label="254_ address winner_tmstmp39;\n1843-new_variable-255-255", method="", type_label=new_variable];
1847 [label="255_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1847-function_definition-256-259", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1855 [label="256_ uint _vtime = block.timestamp;\n1855-new_variable-257-257", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1863 [label="257_ if_startTime + (5 * 1 days) == _vtime\n1863-if-258-259", method="play_tmstmp39(uint startTime)", type_label=if];
4866 [label="257_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1874 [label="258_ winner_tmstmp39 = msg.sender;\n1874-expression_statement-259-259", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1880 [label="259_ function balanceOf(address token, address user) public view returns (uint) {\n    return tokens[token][user];\n  }\n1880-function_definition-260-262", method="balanceOf(address token,address user)", type_label=function_definition];
1897 [label="260_ return tokens[token][user];\n1897-return-261-261", method="balanceOf(address token,address user)", type_label=return];
1903 [label="262_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1903-function_definition-263-271", method="bug_tmstmp36()", type_label=function_definition];
1908 [label="263_ uint pastBlockTime_tmstmp36;\n1908-new_variable-264-264", method="bug_tmstmp36()", type_label=new_variable];
1913 [label="264_ require(msg.value == 10 ether);\n1913-expression_statement-265-265", method="bug_tmstmp36()", type_label=expression_statement];
1923 [label="265_ require(now != pastBlockTime_tmstmp36);\n1923-expression_statement-266-266", method="bug_tmstmp36()", type_label=expression_statement];
1930 [label="266_ pastBlockTime_tmstmp36 = now;\n1930-expression_statement-267-267", method="bug_tmstmp36()", type_label=expression_statement];
1934 [label="267_ if_now % 15 == 0\n1934-if-268-270", method="bug_tmstmp36()", type_label=if];
4937 [label="267_ end_if", method="bug_tmstmp36()", type_label=end_if];
1941 [label="268_ msg.sender.transfer(address(this).balance);\n1941-expression_statement-269-269", method="bug_tmstmp36()", type_label=expression_statement];
1954 [label="271_ function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    orders[msg.sender][hash] = true;\n    emit Order(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\n  }\n1954-function_definition-272-276", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=function_definition];
1982 [label="272_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n1982-new_variable-273-273", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=new_variable];
2008 [label="273_ orders[msg.sender][hash] = true;\n2008-expression_statement-274-274", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=expression_statement];
2039 [label="276_ address winner_tmstmp35;\n2039-new_variable-277-277", method="", type_label=new_variable];
2043 [label="277_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n2043-function_definition-278-281", method="play_tmstmp35(uint startTime)", type_label=function_definition];
2051 [label="278_ uint _vtime = block.timestamp;\n2051-new_variable-279-279", method="play_tmstmp35(uint startTime)", type_label=new_variable];
2059 [label="279_ if_startTime + (5 * 1 days) == _vtime\n2059-if-280-281", method="play_tmstmp35(uint startTime)", type_label=if];
5062 [label="279_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
2070 [label="280_ winner_tmstmp35 = msg.sender;\n2070-expression_statement-281-281", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
2076 [label="281_ function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    require((\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n    orderFills[user][hash] = orderFills[user][hash].add(amount);\n    emit Trade(now, tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);\n  }\n2076-function_definition-282-293", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=function_definition];
2124 [label="282_ require(!safeGuard,\"System Paused by Admin\");\n2124-expression_statement-283-283", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2133 [label="283_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2133-new_variable-284-284", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=new_variable];
2159 [label="284_ require((\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n2159-expression_statement-285-289", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2213 [label="289_ tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n2213-expression_statement-290-290", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2228 [label="290_ orderFills[user][hash] = orderFills[user][hash].add(amount);\n2228-expression_statement-291-291", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
2267 [label="293_ function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) internal {\n    uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n    tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n    tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n    tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n    tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n    tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n  }\n2267-function_definition-294-301", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=function_definition];
2295 [label="294_ uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n2295-new_variable-295-295", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=new_variable];
2306 [label="295_ tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n2306-expression_statement-296-296", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2332 [label="296_ tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n2332-expression_statement-297-297", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2354 [label="297_ tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n2354-expression_statement-298-298", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2375 [label="298_ tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n2375-expression_statement-299-299", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2399 [label="299_ tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n2399-expression_statement-300-300", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
2427 [label="301_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n2427-function_definition-302-310", method="bug_tmstmp40()", type_label=function_definition];
2432 [label="302_ uint pastBlockTime_tmstmp40;\n2432-new_variable-303-303", method="bug_tmstmp40()", type_label=new_variable];
2437 [label="303_ require(msg.value == 10 ether);\n2437-expression_statement-304-304", method="bug_tmstmp40()", type_label=expression_statement];
2447 [label="304_ require(now != pastBlockTime_tmstmp40);\n2447-expression_statement-305-305", method="bug_tmstmp40()", type_label=expression_statement];
2454 [label="305_ pastBlockTime_tmstmp40 = now;\n2454-expression_statement-306-306", method="bug_tmstmp40()", type_label=expression_statement];
2458 [label="306_ if_now % 15 == 0\n2458-if-307-309", method="bug_tmstmp40()", type_label=if];
5461 [label="306_ end_if", method="bug_tmstmp40()", type_label=end_if];
2465 [label="307_ msg.sender.transfer(address(this).balance);\n2465-expression_statement-308-308", method="bug_tmstmp40()", type_label=expression_statement];
2478 [label="310_ function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public view returns(bool) {\n    if (!(\n      tokens[tokenGet][sender] >= amount &&\n      availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount\n    )) return false;\n    return true;\n  }\n2478-function_definition-311-317", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=function_definition];
2535 [label="311_ if\n2535-if-312-315", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=if];
5538 [label="311_ end_if", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=end_if];
2570 [label="314_ return false;\n2570-return-315-315", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=return];
2573 [label="315_ return true;\n2573-return-316-316", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=return];
2576 [label="317_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2576-function_definition-318-320", method="bug_tmstmp33()", type_label=function_definition];
2585 [label="318_ return block.timestamp >= 1546300800;\n2585-return-319-319", method="bug_tmstmp33()", type_label=return];
2591 [label="320_ function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    uint available1;\n    if (!(\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires\n    )) return 0;\n    available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\n    if (amountGet.sub(orderFills[user][hash])<available1) return amountGet.sub(orderFills[user][hash]);\n    return available1;\n  }\n2591-function_definition-321-331", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
2640 [label="321_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2640-new_variable-322-322", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2666 [label="322_ uint available1;\n2666-new_variable-323-323", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2671 [label="323_ if\n2671-if-324-327", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5674 [label="323_ end_if", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2710 [label="326_ return 0;\n2710-return-327-327", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2712 [label="327_ available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\n2712-expression_statement-328-328", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2727 [label="328_ if_amountGet.sub(orderFills[user][hash])<available1\n2727-if-329-329", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=if];
5730 [label="328_ end_if", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2740 [label="328_ return amountGet.sub(orderFills[user][hash]);\n2740-return-329-329", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2751 [label="329_ return available1;\n2751-return-330-330", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2753 [label="331_ function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user) public view returns(uint) {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    return orderFills[user][hash];\n  }\n2753-function_definition-332-335", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=function_definition];
2790 [label="332_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2790-new_variable-333-333", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=new_variable];
2816 [label="333_ return orderFills[user][hash];\n2816-return-334-334", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=return];
2822 [label="335_ address winner_tmstmp27;\n2822-new_variable-336-336", method="", type_label=new_variable];
2826 [label="336_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n2826-function_definition-337-340", method="play_tmstmp27(uint startTime)", type_label=function_definition];
2834 [label="337_ uint _vtime = block.timestamp;\n2834-new_variable-338-338", method="play_tmstmp27(uint startTime)", type_label=new_variable];
2842 [label="338_ if_startTime + (5 * 1 days) == _vtime\n2842-if-339-340", method="play_tmstmp27(uint startTime)", type_label=if];
5845 [label="338_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
2853 [label="339_ winner_tmstmp27 = msg.sender;\n2853-expression_statement-340-340", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
2859 [label="340_ function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == msg.sender));\n    orderFills[msg.sender][hash] = amountGet;\n    emit Cancel(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n  }\n2859-function_definition-341-347", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
2899 [label="341_ require(!safeGuard,\"System Paused by Admin\");\n2899-expression_statement-342-342", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2908 [label="342_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2908-new_variable-343-343", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2934 [label="343_ require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == msg.sender));\n2934-expression_statement-344-344", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2972 [label="344_ orderFills[msg.sender][hash] = amountGet;\n2972-expression_statement-345-345", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
333;
481;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
87 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 3107  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3107 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 3107  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
208 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 229  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
216 -> 3219  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3219 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 3219  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
240 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
260 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
271 -> 278  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
271 -> 3274  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3274 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 3274  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
291 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 327  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
316 -> 3319  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3319 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 3319  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
355 -> 364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
373 -> 382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
413 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 475  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
464 -> 3467  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3467 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
475 -> 3467  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
533 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 560  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
549 -> 3552  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3552 -> 566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 3552  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
571 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
586 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
603 -> 616  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
603 -> 3606  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3606 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
616 -> 3606  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
628 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
652 -> 661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
661 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
667 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
696 -> 707  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
696 -> 3699  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3699 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
707 -> 3699  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
722 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
948 -> 956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 969  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
956 -> 3959  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3959 -> 975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 3959  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
975 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 987  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
981 -> 993  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3984 -> 998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 3984  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
993 -> 3984  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
998 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 1018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 1025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1025 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1036  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1029 -> 4032  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4032 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 4032  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1049 -> 1066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1066 -> 1072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1072 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1079 -> 1095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1095 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1097 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1128 -> 1135  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1128 -> 4131  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4131 -> 1148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1135 -> 4131  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1148 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1174 -> 1187  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1174 -> 4177  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4177 -> 1193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1187 -> 4177  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1193 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1207 -> 1212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1212 -> 1217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1217 -> 1227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1227 -> 1234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1234 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1238 -> 1245  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1238 -> 4241  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4241 -> 1258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1245 -> 4241  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1258 -> 1267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1279 -> 1287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1287 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1306  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1295 -> 4298  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4298 -> 1312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1306 -> 4298  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1312 -> 1322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1329 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 1349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1368 -> 1376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 1384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 1395  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1384 -> 4387  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4387 -> 1401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1395 -> 4387  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1401 -> 1406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1463 -> 1471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1471 -> 1484  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1471 -> 4474  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4474 -> 1490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1484 -> 4474  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1490 -> 1498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 1507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1522 -> 1547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 1592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1592 -> 1605  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1592 -> 4595  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4595 -> 1611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1605 -> 4595  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1611 -> 1623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1623 -> 1632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1632 -> 1653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1694 -> 1699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1699 -> 1704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1704 -> 1714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1714 -> 1721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1721 -> 1725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1725 -> 1732  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1725 -> 4728  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4728 -> 1745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1732 -> 4728  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1745 -> 1757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1757 -> 1766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1766 -> 1775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1775 -> 1788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1788 -> 1809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1847 -> 1855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1855 -> 1863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1863 -> 1874  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1863 -> 4866  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4866 -> 1880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1874 -> 4866  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1880 -> 1897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1897 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1903 -> 1908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1908 -> 1913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1913 -> 1923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1923 -> 1930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1930 -> 1934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1934 -> 1941  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1934 -> 4937  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4937 -> 1954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1941 -> 4937  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1954 -> 1982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1982 -> 2008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2043 -> 2051  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2051 -> 2059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2059 -> 2070  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2059 -> 5062  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5062 -> 2076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2070 -> 5062  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2076 -> 2124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2124 -> 2133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2133 -> 2159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2159 -> 2213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2213 -> 2228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2267 -> 2295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2295 -> 2306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2306 -> 2332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2332 -> 2354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2354 -> 2375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2375 -> 2399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2427 -> 2432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2432 -> 2437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2437 -> 2447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2447 -> 2454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2454 -> 2458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2458 -> 2465  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2458 -> 5461  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5461 -> 2478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2465 -> 5461  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2478 -> 2535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2535 -> 2570  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2535 -> 5538  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5538 -> 2573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2570 -> 5538  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2570 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2573 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2576 -> 2585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2585 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2591 -> 2640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2640 -> 2666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2666 -> 2671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2671 -> 2710  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2671 -> 5674  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5674 -> 2712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2710 -> 5674  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2710 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2712 -> 2727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2727 -> 2740  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2727 -> 5730  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5730 -> 2751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2740 -> 5730  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2740 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2751 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2753 -> 2790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2790 -> 2816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2816 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2826 -> 2834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2834 -> 2842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2842 -> 2853  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2842 -> 5845  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5845 -> 2859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2853 -> 5845  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2859 -> 2899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2899 -> 2908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2908 -> 2934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2934 -> 2972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
