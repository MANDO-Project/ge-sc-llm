digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n50-function_definition-8-12", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ require(b <= a, \"SafeMath: subtraction overflow\");\n67-expression_statement-9-9", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
77 [label="9_ uint256 c = a - b;\n77-new_variable-10-10", method="sub(uint256 a,uint256 b)", type_label=new_variable];
85 [label="10_ return c;\n85-return-11-11", method="sub(uint256 a,uint256 b)", type_label=return];
87 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n87-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
104 [label="13_ if_a == 0\n104-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
1847 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
109 [label="14_ return 0;\n109-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
111 [label="16_ uint256 c = a * b;\n111-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
119 [label="17_ require(c / a == b, \"SafeMath: multiplication overflow\");\n119-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
131 [label="18_ return c;\n131-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
133 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n133-function_definition-21-25", method="div(uint256 a,uint256 b)", type_label=function_definition];
150 [label="21_ require(b > 0, \"SafeMath: division by zero\");\n150-expression_statement-22-22", method="div(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="22_ uint256 c = a / b;\n160-new_variable-23-23", method="div(uint256 a,uint256 b)", type_label=new_variable];
168 [label="23_ return c;\n168-return-24-24", method="div(uint256 a,uint256 b)", type_label=return];
170 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n170-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
187 [label="26_ require(b != 0, \"SafeMath: modulo by zero\");\n187-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
197 [label="27_ return a % b;\n197-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
204 [label="31_ function totalSupply() external view returns (uint256);\n204-function_definition-32-32", method="totalSupply()", type_label=function_definition];
212 [label="32_ function balanceOf(address account) external view returns (uint256);\n212-function_definition-33-33", method="balanceOf(address account)", type_label=function_definition];
224 [label="33_ function transfer(address recipient, uint256 amount) external returns (bool);\n224-function_definition-34-34", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
239 [label="34_ function allowance(address owner, address spender) external view returns (uint256);\n239-function_definition-35-35", method="allowance(address owner,address spender)", type_label=function_definition];
255 [label="35_ function approve(address spender, uint256 amount) external returns (bool);\n255-function_definition-36-36", method="approve(address spender,uint256 amount)", type_label=function_definition];
270 [label="36_ function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n270-function_definition-37-37", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
328 [label="42_ address winner_tmstmp19;\n328-new_variable-43-43", method="", type_label=new_variable];
332 [label="43_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n332-function_definition-44-47", method="play_tmstmp19(uint startTime)", type_label=function_definition];
340 [label="44_ uint _vtime = block.timestamp;\n340-new_variable-45-45", method="play_tmstmp19(uint startTime)", type_label=new_variable];
348 [label="45_ if_startTime + (5 * 1 days) == _vtime\n348-if-46-47", method="play_tmstmp19(uint startTime)", type_label=if];
2091 [label="45_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
359 [label="46_ winner_tmstmp19 = msg.sender;\n359-expression_statement-47-47", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
365 [label="47_ mapping (address => uint256) private _balances;\n365-new_variable-48-48", method="", type_label=new_variable];
372 [label="48_ address winner_tmstmp26;\n372-new_variable-49-49", method="", type_label=new_variable];
376 [label="49_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n376-function_definition-50-52", method="play_tmstmp26(uint startTime)", type_label=function_definition];
384 [label="50_ if_startTime + (5 * 1 days) == block.timestamp\n384-if-51-52", method="play_tmstmp26(uint startTime)", type_label=if];
2127 [label="50_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
397 [label="51_ winner_tmstmp26 = msg.sender;\n397-expression_statement-52-52", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
403 [label="52_ mapping (address => mapping (address => uint256)) private _allowances;\n403-new_variable-53-53", method="", type_label=new_variable];
412 [label="53_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n412-function_definition-54-62", method="bug_tmstmp20()", type_label=function_definition];
417 [label="54_ uint pastBlockTime_tmstmp20;\n417-new_variable-55-55", method="bug_tmstmp20()", type_label=new_variable];
422 [label="55_ require(msg.value == 10 ether);\n422-expression_statement-56-56", method="bug_tmstmp20()", type_label=expression_statement];
432 [label="56_ require(now != pastBlockTime_tmstmp20);\n432-expression_statement-57-57", method="bug_tmstmp20()", type_label=expression_statement];
439 [label="57_ pastBlockTime_tmstmp20 = now;\n439-expression_statement-58-58", method="bug_tmstmp20()", type_label=expression_statement];
443 [label="58_ if_now % 15 == 0\n443-if-59-61", method="bug_tmstmp20()", type_label=if];
2186 [label="58_ end_if", method="bug_tmstmp20()", type_label=end_if];
450 [label="59_ msg.sender.transfer(address(this).balance);\n450-expression_statement-60-60", method="bug_tmstmp20()", type_label=expression_statement];
463 [label="62_ uint256 private _totalSupply;\n463-new_variable-63-63", method="", type_label=new_variable];
468 [label="63_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n468-function_definition-64-66", method="totalSupply()", type_label=function_definition];
477 [label="64_ return _totalSupply;\n477-return-65-65", method="totalSupply()", type_label=return];
479 [label="66_ address winner_tmstmp7;\n479-new_variable-67-67", method="", type_label=new_variable];
483 [label="67_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n483-function_definition-68-71", method="play_tmstmp7(uint startTime)", type_label=function_definition];
491 [label="68_ uint _vtime = block.timestamp;\n491-new_variable-69-69", method="play_tmstmp7(uint startTime)", type_label=new_variable];
499 [label="69_ if_startTime + (5 * 1 days) == _vtime\n499-if-70-71", method="play_tmstmp7(uint startTime)", type_label=if];
2242 [label="69_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
510 [label="70_ winner_tmstmp7 = msg.sender;\n510-expression_statement-71-71", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
516 [label="71_ function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n516-function_definition-72-74", method="balanceOf(address account)", type_label=function_definition];
529 [label="72_ return _balances[account];\n529-return-73-73", method="balanceOf(address account)", type_label=return];
533 [label="74_ address winner_tmstmp23;\n533-new_variable-75-75", method="", type_label=new_variable];
537 [label="75_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n537-function_definition-76-79", method="play_tmstmp23(uint startTime)", type_label=function_definition];
545 [label="76_ uint _vtime = block.timestamp;\n545-new_variable-77-77", method="play_tmstmp23(uint startTime)", type_label=new_variable];
553 [label="77_ if_startTime + (5 * 1 days) == _vtime\n553-if-78-79", method="play_tmstmp23(uint startTime)", type_label=if];
2296 [label="77_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
564 [label="78_ winner_tmstmp23 = msg.sender;\n564-expression_statement-79-79", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
570 [label="79_ function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n570-function_definition-80-83", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
586 [label="80_ _transfer(msg.sender, recipient, amount);\n586-expression_statement-81-81", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
597 [label="81_ return true;\n597-return-82-82", method="transfer(address recipient,uint256 amount)", type_label=return];
600 [label="83_ address winner_tmstmp14;\n600-new_variable-84-84", method="", type_label=new_variable];
604 [label="84_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n604-function_definition-85-87", method="play_tmstmp14(uint startTime)", type_label=function_definition];
612 [label="85_ if_startTime + (5 * 1 days) == block.timestamp\n612-if-86-87", method="play_tmstmp14(uint startTime)", type_label=if];
2355 [label="85_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
625 [label="86_ winner_tmstmp14 = msg.sender;\n625-expression_statement-87-87", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
631 [label="87_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n631-function_definition-88-90", method="allowance(address owner,address spender)", type_label=function_definition];
648 [label="88_ return _allowances[owner][spender];\n648-return-89-89", method="allowance(address owner,address spender)", type_label=return];
654 [label="90_ address winner_tmstmp30;\n654-new_variable-91-91", method="", type_label=new_variable];
658 [label="91_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n658-function_definition-92-94", method="play_tmstmp30(uint startTime)", type_label=function_definition];
666 [label="92_ if_startTime + (5 * 1 days) == block.timestamp\n666-if-93-94", method="play_tmstmp30(uint startTime)", type_label=if];
2409 [label="92_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
679 [label="93_ winner_tmstmp30 = msg.sender;\n679-expression_statement-94-94", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
685 [label="94_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n685-function_definition-95-98", method="approve(address spender,uint256 value)", type_label=function_definition];
701 [label="95_ _approve(msg.sender, spender, value);\n701-expression_statement-96-96", method="approve(address spender,uint256 value)", type_label=expression_statement];
712 [label="96_ return true;\n712-return-97-97", method="approve(address spender,uint256 value)", type_label=return];
715 [label="98_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n715-function_definition-99-107", method="bug_tmstmp8()", type_label=function_definition];
720 [label="99_ uint pastBlockTime_tmstmp8;\n720-new_variable-100-100", method="bug_tmstmp8()", type_label=new_variable];
725 [label="100_ require(msg.value == 10 ether);\n725-expression_statement-101-101", method="bug_tmstmp8()", type_label=expression_statement];
735 [label="101_ require(now != pastBlockTime_tmstmp8);\n735-expression_statement-102-102", method="bug_tmstmp8()", type_label=expression_statement];
742 [label="102_ pastBlockTime_tmstmp8 = now;\n742-expression_statement-103-103", method="bug_tmstmp8()", type_label=expression_statement];
746 [label="103_ if_now % 15 == 0\n746-if-104-106", method="bug_tmstmp8()", type_label=if];
2489 [label="103_ end_if", method="bug_tmstmp8()", type_label=end_if];
753 [label="104_ msg.sender.transfer(address(this).balance);\n753-expression_statement-105-105", method="bug_tmstmp8()", type_label=expression_statement];
766 [label="107_ function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n766-function_definition-108-112", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
786 [label="108_ _transfer(sender, recipient, amount);\n786-expression_statement-109-109", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
795 [label="109_ _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n795-expression_statement-110-110", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
817 [label="110_ return true;\n817-return-111-111", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=return];
820 [label="112_ address winner_tmstmp39;\n820-new_variable-113-113", method="", type_label=new_variable];
824 [label="113_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n824-function_definition-114-117", method="play_tmstmp39(uint startTime)", type_label=function_definition];
832 [label="114_ uint _vtime = block.timestamp;\n832-new_variable-115-115", method="play_tmstmp39(uint startTime)", type_label=new_variable];
840 [label="115_ if_startTime + (5 * 1 days) == _vtime\n840-if-116-117", method="play_tmstmp39(uint startTime)", type_label=if];
2583 [label="115_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
851 [label="116_ winner_tmstmp39 = msg.sender;\n851-expression_statement-117-117", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
857 [label="117_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n857-function_definition-118-121", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
873 [label="118_ _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n873-expression_statement-119-119", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
895 [label="119_ return true;\n895-return-120-120", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
898 [label="121_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n898-function_definition-122-130", method="bug_tmstmp36()", type_label=function_definition];
903 [label="122_ uint pastBlockTime_tmstmp36;\n903-new_variable-123-123", method="bug_tmstmp36()", type_label=new_variable];
908 [label="123_ require(msg.value == 10 ether);\n908-expression_statement-124-124", method="bug_tmstmp36()", type_label=expression_statement];
918 [label="124_ require(now != pastBlockTime_tmstmp36);\n918-expression_statement-125-125", method="bug_tmstmp36()", type_label=expression_statement];
925 [label="125_ pastBlockTime_tmstmp36 = now;\n925-expression_statement-126-126", method="bug_tmstmp36()", type_label=expression_statement];
929 [label="126_ if_now % 15 == 0\n929-if-127-129", method="bug_tmstmp36()", type_label=if];
2672 [label="126_ end_if", method="bug_tmstmp36()", type_label=end_if];
936 [label="127_ msg.sender.transfer(address(this).balance);\n936-expression_statement-128-128", method="bug_tmstmp36()", type_label=expression_statement];
949 [label="130_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n949-function_definition-131-134", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
965 [label="131_ _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n965-expression_statement-132-132", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
987 [label="132_ return true;\n987-return-133-133", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
990 [label="134_ address winner_tmstmp35;\n990-new_variable-135-135", method="", type_label=new_variable];
994 [label="135_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n994-function_definition-136-139", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1002 [label="136_ uint _vtime = block.timestamp;\n1002-new_variable-137-137", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1010 [label="137_ if_startTime + (5 * 1 days) == _vtime\n1010-if-138-139", method="play_tmstmp35(uint startTime)", type_label=if];
2753 [label="137_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1021 [label="138_ winner_tmstmp35 = msg.sender;\n1021-expression_statement-139-139", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1027 [label="139_ function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n1027-function_definition-140-146", method="_transfer(address sender,address recipient,uint256 amount)", type_label=function_definition];
1043 [label="140_ require(sender != address(0), \"ERC20: transfer from the zero address\");\n1043-expression_statement-141-141", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1055 [label="141_ require(recipient != address(0), \"ERC20: transfer to the zero address\");\n1055-expression_statement-142-142", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1067 [label="142_ _balances[sender] = _balances[sender].sub(amount);\n1067-expression_statement-143-143", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1080 [label="143_ _balances[recipient] = _balances[recipient].add(amount);\n1080-expression_statement-144-144", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1101 [label="146_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1101-function_definition-147-155", method="bug_tmstmp40()", type_label=function_definition];
1106 [label="147_ uint pastBlockTime_tmstmp40;\n1106-new_variable-148-148", method="bug_tmstmp40()", type_label=new_variable];
1111 [label="148_ require(msg.value == 10 ether);\n1111-expression_statement-149-149", method="bug_tmstmp40()", type_label=expression_statement];
1121 [label="149_ require(now != pastBlockTime_tmstmp40);\n1121-expression_statement-150-150", method="bug_tmstmp40()", type_label=expression_statement];
1128 [label="150_ pastBlockTime_tmstmp40 = now;\n1128-expression_statement-151-151", method="bug_tmstmp40()", type_label=expression_statement];
1132 [label="151_ if_now % 15 == 0\n1132-if-152-154", method="bug_tmstmp40()", type_label=if];
2875 [label="151_ end_if", method="bug_tmstmp40()", type_label=end_if];
1139 [label="152_ msg.sender.transfer(address(this).balance);\n1139-expression_statement-153-153", method="bug_tmstmp40()", type_label=expression_statement];
1152 [label="155_ function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n1152-function_definition-156-161", method="_mint(address account,uint256 amount)", type_label=function_definition];
1164 [label="156_ require(account != address(0), \"ERC20: mint to the zero address\");\n1164-expression_statement-157-157", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1176 [label="157_ _totalSupply = _totalSupply.add(amount);\n1176-expression_statement-158-158", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1185 [label="158_ _balances[account] = _balances[account].add(amount);\n1185-expression_statement-159-159", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1208 [label="161_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1208-function_definition-162-164", method="bug_tmstmp33()", type_label=function_definition];
1217 [label="162_ return block.timestamp >= 1546300800;\n1217-return-163-163", method="bug_tmstmp33()", type_label=return];
1223 [label="164_ function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n1223-function_definition-165-170", method="_burn(address account,uint256 value)", type_label=function_definition];
1235 [label="165_ require(account != address(0), \"ERC20: burn from the zero address\");\n1235-expression_statement-166-166", method="_burn(address account,uint256 value)", type_label=expression_statement];
1247 [label="166_ _totalSupply = _totalSupply.sub(value);\n1247-expression_statement-167-167", method="_burn(address account,uint256 value)", type_label=expression_statement];
1256 [label="167_ _balances[account] = _balances[account].sub(value);\n1256-expression_statement-168-168", method="_burn(address account,uint256 value)", type_label=expression_statement];
1279 [label="170_ address winner_tmstmp27;\n1279-new_variable-171-171", method="", type_label=new_variable];
1283 [label="171_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1283-function_definition-172-175", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1291 [label="172_ uint _vtime = block.timestamp;\n1291-new_variable-173-173", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1299 [label="173_ if_startTime + (5 * 1 days) == _vtime\n1299-if-174-175", method="play_tmstmp27(uint startTime)", type_label=if];
3042 [label="173_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1310 [label="174_ winner_tmstmp27 = msg.sender;\n1310-expression_statement-175-175", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1316 [label="175_ function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n1316-function_definition-176-181", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
1332 [label="176_ require(owner != address(0), \"ERC20: approve from the zero address\");\n1332-expression_statement-177-177", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1344 [label="177_ require(spender != address(0), \"ERC20: approve to the zero address\");\n1344-expression_statement-178-178", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1356 [label="178_ _allowances[owner][spender] = value;\n1356-expression_statement-179-179", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1372 [label="181_ address winner_tmstmp31;\n1372-new_variable-182-182", method="", type_label=new_variable];
1376 [label="182_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1376-function_definition-183-186", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1384 [label="183_ uint _vtime = block.timestamp;\n1384-new_variable-184-184", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1392 [label="184_ if_startTime + (5 * 1 days) == _vtime\n1392-if-185-186", method="play_tmstmp31(uint startTime)", type_label=if];
3135 [label="184_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1403 [label="185_ winner_tmstmp31 = msg.sender;\n1403-expression_statement-186-186", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1409 [label="186_ function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n1409-function_definition-187-190", method="_burnFrom(address account,uint256 amount)", type_label=function_definition];
1421 [label="187_ _burn(account, amount);\n1421-expression_statement-188-188", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
1428 [label="188_ _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n1428-expression_statement-189-189", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
1450 [label="190_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1450-function_definition-191-193", method="bug_tmstmp13()", type_label=function_definition];
1459 [label="191_ return block.timestamp >= 1546300800;\n1459-return-192-192", method="bug_tmstmp13()", type_label=return];
1471 [label="195_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1471-function_definition-196-204", method="bug_tmstmp32()", type_label=function_definition];
1476 [label="196_ uint pastBlockTime_tmstmp32;\n1476-new_variable-197-197", method="bug_tmstmp32()", type_label=new_variable];
1481 [label="197_ require(msg.value == 10 ether);\n1481-expression_statement-198-198", method="bug_tmstmp32()", type_label=expression_statement];
1491 [label="198_ require(now != pastBlockTime_tmstmp32);\n1491-expression_statement-199-199", method="bug_tmstmp32()", type_label=expression_statement];
1498 [label="199_ pastBlockTime_tmstmp32 = now;\n1498-expression_statement-200-200", method="bug_tmstmp32()", type_label=expression_statement];
1502 [label="200_ if_now % 15 == 0\n1502-if-201-203", method="bug_tmstmp32()", type_label=if];
3245 [label="200_ end_if", method="bug_tmstmp32()", type_label=end_if];
1509 [label="201_ msg.sender.transfer(address(this).balance);\n1509-expression_statement-202-202", method="bug_tmstmp32()", type_label=expression_statement];
1522 [label="204_ string private _name;\n1522-new_variable-205-205", method="", type_label=new_variable];
1527 [label="205_ address winner_tmstmp38;\n1527-new_variable-206-206", method="", type_label=new_variable];
1531 [label="206_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n1531-function_definition-207-209", method="play_tmstmp38(uint startTime)", type_label=function_definition];
1539 [label="207_ if_startTime + (5 * 1 days) == block.timestamp\n1539-if-208-209", method="play_tmstmp38(uint startTime)", type_label=if];
3282 [label="207_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
1552 [label="208_ winner_tmstmp38 = msg.sender;\n1552-expression_statement-209-209", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
1558 [label="209_ string private _symbol;\n1558-new_variable-210-210", method="", type_label=new_variable];
1563 [label="210_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1563-function_definition-211-219", method="bug_tmstmp4()", type_label=function_definition];
1568 [label="211_ uint pastBlockTime_tmstmp4;\n1568-new_variable-212-212", method="bug_tmstmp4()", type_label=new_variable];
1573 [label="212_ require(msg.value == 10 ether);\n1573-expression_statement-213-213", method="bug_tmstmp4()", type_label=expression_statement];
1583 [label="213_ require(now != pastBlockTime_tmstmp4);\n1583-expression_statement-214-214", method="bug_tmstmp4()", type_label=expression_statement];
1590 [label="214_ pastBlockTime_tmstmp4 = now;\n1590-expression_statement-215-215", method="bug_tmstmp4()", type_label=expression_statement];
1594 [label="215_ if_now % 15 == 0\n1594-if-216-218", method="bug_tmstmp4()", type_label=if];
3337 [label="215_ end_if", method="bug_tmstmp4()", type_label=end_if];
1601 [label="216_ msg.sender.transfer(address(this).balance);\n1601-expression_statement-217-217", method="bug_tmstmp4()", type_label=expression_statement];
1614 [label="219_ uint8 private _decimals;\n1614-new_variable-220-220", method="", type_label=new_variable];
1633 [label="221_ _name = name;\n1633-expression_statement-222-222", method="", type_label=expression_statement];
1637 [label="222_ _symbol = symbol;\n1637-expression_statement-223-223", method="", type_label=expression_statement];
1641 [label="223_ _decimals = decimals;\n1641-expression_statement-224-224", method="", type_label=expression_statement];
1645 [label="225_ uint256 bugv_tmstmp5 = block.timestamp;\n1645-new_variable-226-226", method="", type_label=new_variable];
1652 [label="226_ function name() public view returns (string memory) {\n        return _name;\n    }\n1652-function_definition-227-229", method="name()", type_label=function_definition];
1661 [label="227_ return _name;\n1661-return-228-228", method="name()", type_label=return];
1663 [label="229_ uint256 bugv_tmstmp1 = block.timestamp;\n1663-new_variable-230-230", method="", type_label=new_variable];
1670 [label="230_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n1670-function_definition-231-233", method="symbol()", type_label=function_definition];
1679 [label="231_ return _symbol;\n1679-return-232-232", method="symbol()", type_label=return];
1681 [label="233_ uint256 bugv_tmstmp2 = block.timestamp;\n1681-new_variable-234-234", method="", type_label=new_variable];
1688 [label="234_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n1688-function_definition-235-237", method="decimals()", type_label=function_definition];
1697 [label="235_ return _decimals;\n1697-return-236-236", method="decimals()", type_label=return];
1699 [label="237_ uint256 bugv_tmstmp3 = block.timestamp;\n1699-new_variable-238-238", method="", type_label=new_variable];
1716 [label="240_ ERC20Detailed(\"SimpleSwap Coin\", \"SWAP\", 8)\n1716-expression_statement-241-241", method="", type_label=expression_statement];
1727 [label="241_ _mint(msg.sender, 100000000 * (10 ** 8));\n1727-expression_statement-242-242", method="", type_label=expression_statement];
1741 [label="243_ uint256 bugv_tmstmp4 = block.timestamp;\n1741-new_variable-244-244", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
87 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 1847  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1847 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 1847  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
332 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 359  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
348 -> 2091  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2091 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 2091  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
365 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
376 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 397  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
384 -> 2127  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2127 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 2127  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
412 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 450  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
443 -> 2186  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2186 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 2186  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
468 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
483 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
499 -> 510  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
499 -> 2242  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2242 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 2242  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
516 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
537 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 564  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
553 -> 2296  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2296 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 2296  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
570 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
604 -> 612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 625  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
612 -> 2355  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2355 -> 631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 2355  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
631 -> 648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
648 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
658 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 679  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
666 -> 2409  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2409 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 2409  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
685 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
715 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 753  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
746 -> 2489  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2489 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
753 -> 2489  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
766 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
817 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
824 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 851  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
840 -> 2583  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2583 -> 857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 2583  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
857 -> 873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
873 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
898 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
903 -> 908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
908 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 925  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
925 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 936  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
929 -> 2672  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2672 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
936 -> 2672  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
949 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
994 -> 1002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1002 -> 1010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1010 -> 1021  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1010 -> 2753  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2753 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 2753  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1027 -> 1043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 1080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1121 -> 1128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1128 -> 1132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 1139  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1132 -> 2875  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2875 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1139 -> 2875  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1152 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1164 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 1185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 1217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1217 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1223 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1247 -> 1256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1291 -> 1299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1299 -> 1310  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1299 -> 3042  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3042 -> 1316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 3042  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1316 -> 1332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 1344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1344 -> 1356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 1384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1384 -> 1392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1403  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1392 -> 3135  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3135 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1403 -> 3135  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1409 -> 1421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 1428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 1459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1471 -> 1476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1476 -> 1481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1481 -> 1491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1491 -> 1498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 1502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1502 -> 1509  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1502 -> 3245  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3245 -> 1522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1509 -> 3245  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1522 -> 1527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1531 -> 1539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1539 -> 1552  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1539 -> 3282  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3282 -> 1558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 3282  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1563 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 1573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1573 -> 1583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1583 -> 1590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1590 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1594 -> 1601  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1594 -> 3337  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3337 -> 1614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1601 -> 3337  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1633 -> 1637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1637 -> 1641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1652 -> 1661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1661 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1670 -> 1679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1679 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1688 -> 1697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1697 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
