digraph  {
13 [label="2_ uint256 bugv_tmstmp2 = block.timestamp;\n13-new_variable-3-3", method="", type_label=new_variable];
34 [label="4_ uint256 bugv_tmstmp3 = block.timestamp;\n34-new_variable-5-5", method="", type_label=new_variable];
55 [label="6_ uint256 bugv_tmstmp4 = block.timestamp;\n55-new_variable-7-7", method="", type_label=new_variable];
76 [label="8_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n76-function_definition-9-17", method="bug_tmstmp32()", type_label=function_definition];
81 [label="9_ uint pastBlockTime_tmstmp32;\n81-new_variable-10-10", method="bug_tmstmp32()", type_label=new_variable];
86 [label="10_ require(msg.value == 10 ether);\n86-expression_statement-11-11", method="bug_tmstmp32()", type_label=expression_statement];
96 [label="11_ require(now != pastBlockTime_tmstmp32);\n96-expression_statement-12-12", method="bug_tmstmp32()", type_label=expression_statement];
103 [label="12_ pastBlockTime_tmstmp32 = now;\n103-expression_statement-13-13", method="bug_tmstmp32()", type_label=expression_statement];
107 [label="13_ if_now % 15 == 0\n107-if-14-16", method="bug_tmstmp32()", type_label=if];
1310 [label="13_ end_if", method="bug_tmstmp32()", type_label=end_if];
114 [label="14_ msg.sender.transfer(address(this).balance);\n114-expression_statement-15-15", method="bug_tmstmp32()", type_label=expression_statement];
127 [label="17_ uint256 public totalSupply;\n127-new_variable-18-18", method="", type_label=new_variable];
132 [label="18_ address winner_tmstmp38;\n132-new_variable-19-19", method="", type_label=new_variable];
136 [label="19_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n136-function_definition-20-22", method="play_tmstmp38(uint startTime)", type_label=function_definition];
144 [label="20_ if_startTime + (5 * 1 days) == block.timestamp\n144-if-21-22", method="play_tmstmp38(uint startTime)", type_label=if];
1347 [label="20_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
157 [label="21_ winner_tmstmp38 = msg.sender;\n157-expression_statement-22-22", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
163 [label="22_ string public name;\n163-new_variable-23-23", method="", type_label=new_variable];
168 [label="23_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n168-function_definition-24-32", method="bug_tmstmp4()", type_label=function_definition];
173 [label="24_ uint pastBlockTime_tmstmp4;\n173-new_variable-25-25", method="bug_tmstmp4()", type_label=new_variable];
178 [label="25_ require(msg.value == 10 ether);\n178-expression_statement-26-26", method="bug_tmstmp4()", type_label=expression_statement];
188 [label="26_ require(now != pastBlockTime_tmstmp4);\n188-expression_statement-27-27", method="bug_tmstmp4()", type_label=expression_statement];
195 [label="27_ pastBlockTime_tmstmp4 = now;\n195-expression_statement-28-28", method="bug_tmstmp4()", type_label=expression_statement];
199 [label="28_ if_now % 15 == 0\n199-if-29-31", method="bug_tmstmp4()", type_label=if];
1402 [label="28_ end_if", method="bug_tmstmp4()", type_label=end_if];
206 [label="29_ msg.sender.transfer(address(this).balance);\n206-expression_statement-30-30", method="bug_tmstmp4()", type_label=expression_statement];
219 [label="32_ uint8 public decimals;\n219-new_variable-33-33", method="", type_label=new_variable];
224 [label="33_ address winner_tmstmp7;\n224-new_variable-34-34", method="", type_label=new_variable];
228 [label="34_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n228-function_definition-35-38", method="play_tmstmp7(uint startTime)", type_label=function_definition];
236 [label="35_ uint _vtime = block.timestamp;\n236-new_variable-36-36", method="play_tmstmp7(uint startTime)", type_label=new_variable];
244 [label="36_ if_startTime + (5 * 1 days) == _vtime\n244-if-37-38", method="play_tmstmp7(uint startTime)", type_label=if];
1447 [label="36_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
255 [label="37_ winner_tmstmp7 = msg.sender;\n255-expression_statement-38-38", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
261 [label="38_ string public symbol;\n261-new_variable-39-39", method="", type_label=new_variable];
266 [label="39_ address winner_tmstmp23;\n266-new_variable-40-40", method="", type_label=new_variable];
270 [label="40_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n270-function_definition-41-44", method="play_tmstmp23(uint startTime)", type_label=function_definition];
278 [label="41_ uint _vtime = block.timestamp;\n278-new_variable-42-42", method="play_tmstmp23(uint startTime)", type_label=new_variable];
286 [label="42_ if_startTime + (5 * 1 days) == _vtime\n286-if-43-44", method="play_tmstmp23(uint startTime)", type_label=if];
1489 [label="42_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
297 [label="43_ winner_tmstmp23 = msg.sender;\n297-expression_statement-44-44", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
303 [label="44_ address public owner;\n303-new_variable-45-45", method="", type_label=new_variable];
308 [label="45_ address winner_tmstmp14;\n308-new_variable-46-46", method="", type_label=new_variable];
312 [label="46_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n312-function_definition-47-49", method="play_tmstmp14(uint startTime)", type_label=function_definition];
320 [label="47_ if_startTime + (5 * 1 days) == block.timestamp\n320-if-48-49", method="play_tmstmp14(uint startTime)", type_label=if];
1523 [label="47_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
333 [label="48_ winner_tmstmp14 = msg.sender;\n333-expression_statement-49-49", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
339 [label="49_ mapping (address => uint256) internal balances;\n339-new_variable-50-50", method="", type_label=new_variable];
346 [label="50_ address winner_tmstmp30;\n346-new_variable-51-51", method="", type_label=new_variable];
350 [label="51_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n350-function_definition-52-54", method="play_tmstmp30(uint startTime)", type_label=function_definition];
358 [label="52_ if_startTime + (5 * 1 days) == block.timestamp\n358-if-53-54", method="play_tmstmp30(uint startTime)", type_label=if];
1561 [label="52_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
371 [label="53_ winner_tmstmp30 = msg.sender;\n371-expression_statement-54-54", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
377 [label="54_ mapping (address => mapping (address => uint256)) internal allowed;\n377-new_variable-55-55", method="", type_label=new_variable];
386 [label="55_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n386-function_definition-56-64", method="bug_tmstmp8()", type_label=function_definition];
391 [label="56_ uint pastBlockTime_tmstmp8;\n391-new_variable-57-57", method="bug_tmstmp8()", type_label=new_variable];
396 [label="57_ require(msg.value == 10 ether);\n396-expression_statement-58-58", method="bug_tmstmp8()", type_label=expression_statement];
406 [label="58_ require(now != pastBlockTime_tmstmp8);\n406-expression_statement-59-59", method="bug_tmstmp8()", type_label=expression_statement];
413 [label="59_ pastBlockTime_tmstmp8 = now;\n413-expression_statement-60-60", method="bug_tmstmp8()", type_label=expression_statement];
417 [label="60_ if_now % 15 == 0\n417-if-61-63", method="bug_tmstmp8()", type_label=if];
1620 [label="60_ end_if", method="bug_tmstmp8()", type_label=end_if];
424 [label="61_ msg.sender.transfer(address(this).balance);\n424-expression_statement-62-62", method="bug_tmstmp8()", type_label=expression_statement];
437 [label="64_ bool isTransPaused=false;\n437-new_variable-65-65", method="", type_label=new_variable];
453 [label="69_ owner=msg.sender;\n453-expression_statement-70-70", method="", type_label=expression_statement];
459 [label="70_ if__initialAmount<=0\n459-if-71-77", method="", type_label=if];
1662 [label="70_ end_if", method="", type_label=end_if];
464 [label="71_ totalSupply = 100000000000000000;\n464-expression_statement-72-72", method="", type_label=expression_statement];
468 [label="72_ balances[owner]=totalSupply;\n468-expression_statement-73-73", method="", type_label=expression_statement];
475 [label="74_ totalSupply = _initialAmount;\n475-expression_statement-75-75", method="", type_label=expression_statement];
479 [label="75_ balances[owner]=_initialAmount;\n479-expression_statement-76-76", method="", type_label=expression_statement];
485 [label="77_ if__decimalUnits<=0\n485-if-78-82", method="", type_label=if];
1688 [label="77_ end_if", method="", type_label=end_if];
490 [label="78_ decimals=2;\n490-expression_statement-79-79", method="", type_label=expression_statement];
495 [label="80_ decimals = _decimalUnits;\n495-expression_statement-81-81", method="", type_label=expression_statement];
499 [label="82_ name = \"CareerOn Chain Token\";\n499-expression_statement-83-83", method="", type_label=expression_statement];
504 [label="83_ symbol = \"COT\";\n504-expression_statement-84-84", method="", type_label=expression_statement];
509 [label="85_ address winner_tmstmp39;\n509-new_variable-86-86", method="", type_label=new_variable];
513 [label="86_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n513-function_definition-87-90", method="play_tmstmp39(uint startTime)", type_label=function_definition];
521 [label="87_ uint _vtime = block.timestamp;\n521-new_variable-88-88", method="play_tmstmp39(uint startTime)", type_label=new_variable];
529 [label="88_ if_startTime + (5 * 1 days) == _vtime\n529-if-89-90", method="play_tmstmp39(uint startTime)", type_label=if];
1732 [label="88_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
540 [label="89_ winner_tmstmp39 = msg.sender;\n540-expression_statement-90-90", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
546 [label="90_ function transfer(\n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n        balances[msg.sender] -= _value; \n        balances[_to] += _value; \n		if(msg.sender==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(msg.sender, _to, _value); \n		}\n        return true;\n    }\n546-function_definition-91-108", method="transfer(address _to,uint256 _value)", type_label=function_definition];
563 [label="94_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n563-expression_statement-95-99", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
593 [label="99_ balances[msg.sender] -= _value;\n593-expression_statement-100-100", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
601 [label="100_ balances[_to] += _value;\n601-expression_statement-101-101", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
607 [label="101_ if_msg.sender==owner\n607-if-102-106", method="transfer(address _to,uint256 _value)", type_label=if];
1810 [label="101_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
635 [label="106_ return true;\n635-return-107-107", method="transfer(address _to,uint256 _value)", type_label=return];
638 [label="108_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n638-function_definition-109-117", method="bug_tmstmp36()", type_label=function_definition];
643 [label="109_ uint pastBlockTime_tmstmp36;\n643-new_variable-110-110", method="bug_tmstmp36()", type_label=new_variable];
648 [label="110_ require(msg.value == 10 ether);\n648-expression_statement-111-111", method="bug_tmstmp36()", type_label=expression_statement];
658 [label="111_ require(now != pastBlockTime_tmstmp36);\n658-expression_statement-112-112", method="bug_tmstmp36()", type_label=expression_statement];
665 [label="112_ pastBlockTime_tmstmp36 = now;\n665-expression_statement-113-113", method="bug_tmstmp36()", type_label=expression_statement];
669 [label="113_ if_now % 15 == 0\n669-if-114-116", method="bug_tmstmp36()", type_label=if];
1872 [label="113_ end_if", method="bug_tmstmp36()", type_label=end_if];
676 [label="114_ msg.sender.transfer(address(this).balance);\n676-expression_statement-115-115", method="bug_tmstmp36()", type_label=expression_statement];
689 [label="117_ function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n        balances[_to] += _value; \n        balances[_from] -= _value;  \n        allowed[_from][msg.sender] -= _value; \n        if(_from==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(_from, _to, _value); \n		}\n        return true;\n    }\n689-function_definition-118-138", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
710 [label="122_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n710-expression_statement-123-128", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
750 [label="128_ balances[_to] += _value;\n750-expression_statement-129-129", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
756 [label="129_ balances[_from] -= _value;\n756-expression_statement-130-130", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
762 [label="130_ allowed[_from][msg.sender] -= _value;\n762-expression_statement-131-131", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
772 [label="131_ if__from==owner\n772-if-132-136", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1975 [label="131_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
796 [label="136_ return true;\n796-return-137-137", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
799 [label="138_ address winner_tmstmp35;\n799-new_variable-139-139", method="", type_label=new_variable];
803 [label="139_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n803-function_definition-140-143", method="play_tmstmp35(uint startTime)", type_label=function_definition];
811 [label="140_ uint _vtime = block.timestamp;\n811-new_variable-141-141", method="play_tmstmp35(uint startTime)", type_label=new_variable];
819 [label="141_ if_startTime + (5 * 1 days) == _vtime\n819-if-142-143", method="play_tmstmp35(uint startTime)", type_label=if];
2022 [label="141_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
830 [label="142_ winner_tmstmp35 = msg.sender;\n830-expression_statement-143-143", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
836 [label="143_ function approve(address _spender, uint256 _value) public returns (bool success) \n    { \n        assert(msg.sender!=_spender && _value>0);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n836-function_definition-144-150", method="approve(address _spender,uint256 _value)", type_label=function_definition];
853 [label="145_ assert(msg.sender!=_spender && _value>0);\n853-expression_statement-146-146", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
866 [label="146_ allowed[msg.sender][_spender] = _value;\n866-expression_statement-147-147", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
886 [label="148_ return true;\n886-return-149-149", method="approve(address _spender,uint256 _value)", type_label=return];
889 [label="150_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n889-function_definition-151-159", method="bug_tmstmp40()", type_label=function_definition];
894 [label="151_ uint pastBlockTime_tmstmp40;\n894-new_variable-152-152", method="bug_tmstmp40()", type_label=new_variable];
899 [label="152_ require(msg.value == 10 ether);\n899-expression_statement-153-153", method="bug_tmstmp40()", type_label=expression_statement];
909 [label="153_ require(now != pastBlockTime_tmstmp40);\n909-expression_statement-154-154", method="bug_tmstmp40()", type_label=expression_statement];
916 [label="154_ pastBlockTime_tmstmp40 = now;\n916-expression_statement-155-155", method="bug_tmstmp40()", type_label=expression_statement];
920 [label="155_ if_now % 15 == 0\n920-if-156-158", method="bug_tmstmp40()", type_label=if];
2123 [label="155_ end_if", method="bug_tmstmp40()", type_label=end_if];
927 [label="156_ msg.sender.transfer(address(this).balance);\n927-expression_statement-157-157", method="bug_tmstmp40()", type_label=expression_statement];
940 [label="159_ function allowance(\n        address _owner, \n        address _spender) public view returns (uint256 remaining) \n    {\n        return allowed[_owner][_spender]; \n    }\n940-function_definition-160-165", method="allowance(address _owner,address _spender)", type_label=function_definition];
958 [label="163_ return allowed[_owner][_spender];\n958-return-164-164", method="allowance(address _owner,address _spender)", type_label=return];
964 [label="165_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n964-function_definition-166-168", method="bug_tmstmp33()", type_label=function_definition];
973 [label="166_ return block.timestamp >= 1546300800;\n973-return-167-167", method="bug_tmstmp33()", type_label=return];
979 [label="168_ function balanceOf(address accountAddr) public view returns (uint256) {\n        return balances[accountAddr];\n    }\n979-function_definition-169-171", method="balanceOf(address accountAddr)", type_label=function_definition];
992 [label="169_ return balances[accountAddr];\n992-return-170-170", method="balanceOf(address accountAddr)", type_label=return];
996 [label="171_ address winner_tmstmp27;\n996-new_variable-172-172", method="", type_label=new_variable];
1000 [label="172_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1000-function_definition-173-176", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1008 [label="173_ uint _vtime = block.timestamp;\n1008-new_variable-174-174", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1016 [label="174_ if_startTime + (5 * 1 days) == _vtime\n1016-if-175-176", method="play_tmstmp27(uint startTime)", type_label=if];
2219 [label="174_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1027 [label="175_ winner_tmstmp27 = msg.sender;\n1027-expression_statement-176-176", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1033 [label="176_ function changeOwner(address newOwner) public{\n        assert(msg.sender==owner && msg.sender!=newOwner);\n        balances[newOwner]=balances[owner];\n        balances[owner]=0;\n        owner=newOwner;\n        emit OwnerChang(msg.sender,newOwner,balances[owner]); \n    }\n1033-function_definition-177-183", method="changeOwner(address newOwner)", type_label=function_definition];
1041 [label="177_ assert(msg.sender==owner && msg.sender!=newOwner);\n1041-expression_statement-178-178", method="changeOwner(address newOwner)", type_label=expression_statement];
1056 [label="178_ balances[newOwner]=balances[owner];\n1056-expression_statement-179-179", method="changeOwner(address newOwner)", type_label=expression_statement];
1064 [label="179_ balances[owner]=0;\n1064-expression_statement-180-180", method="changeOwner(address newOwner)", type_label=expression_statement];
1070 [label="180_ owner=newOwner;\n1070-expression_statement-181-181", method="changeOwner(address newOwner)", type_label=expression_statement];
1086 [label="183_ address winner_tmstmp31;\n1086-new_variable-184-184", method="", type_label=new_variable];
1090 [label="184_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1090-function_definition-185-188", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1098 [label="185_ uint _vtime = block.timestamp;\n1098-new_variable-186-186", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1106 [label="186_ if_startTime + (5 * 1 days) == _vtime\n1106-if-187-188", method="play_tmstmp31(uint startTime)", type_label=if];
2309 [label="186_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1117 [label="187_ winner_tmstmp31 = msg.sender;\n1117-expression_statement-188-188", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1123 [label="188_ function setPauseStatus(bool isPaused)public{\n        assert(msg.sender==owner);\n        isTransPaused=isPaused;\n    }\n1123-function_definition-189-192", method="setPauseStatus(bool isPaused)", type_label=function_definition];
1131 [label="189_ assert(msg.sender==owner);\n1131-expression_statement-190-190", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1140 [label="190_ isTransPaused=isPaused;\n1140-expression_statement-191-191", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
1144 [label="192_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1144-function_definition-193-195", method="bug_tmstmp13()", type_label=function_definition];
1153 [label="193_ return block.timestamp >= 1546300800;\n1153-return-194-194", method="bug_tmstmp13()", type_label=return];
1159 [label="195_ function changeContractName(string memory _newName,string memory _newSymbol) public {\n        assert(msg.sender==owner);\n        name=_newName;\n        symbol=_newSymbol;\n    }\n1159-function_definition-196-200", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=function_definition];
1171 [label="196_ assert(msg.sender==owner);\n1171-expression_statement-197-197", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1180 [label="197_ name=_newName;\n1180-expression_statement-198-198", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1184 [label="198_ symbol=_newSymbol;\n1184-expression_statement-199-199", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
1188 [label="200_ uint256 bugv_tmstmp5 = block.timestamp;\n1188-new_variable-201-201", method="", type_label=new_variable];
1201 [label="204_ uint256 bugv_tmstmp1 = block.timestamp;\n1201-new_variable-205-205", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
625;
788;
76 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 86  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
86 -> 96  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
103 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
107 -> 1310  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1310 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 1310  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
127 -> 132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 157  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
144 -> 1347  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1347 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
157 -> 1347  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
168 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 206  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
199 -> 1402  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1402 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 1402  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
219 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 255  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
244 -> 1447  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1447 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 1447  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
261 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 297  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
286 -> 1489  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1489 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
297 -> 1489  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
303 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
312 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 333  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
320 -> 1523  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1523 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 1523  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
339 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
358 -> 371  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
358 -> 1561  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1561 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 1561  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
386 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 424  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
417 -> 1620  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1620 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 1620  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
453 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
459 -> 464  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
459 -> 475  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1662 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 1662  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
475 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 1662  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
485 -> 490  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
485 -> 495  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1688 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 1688  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
495 -> 1688  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
499 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 540  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
529 -> 1732  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1732 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 1732  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
546 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
635 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
638 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 648  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
648 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 676  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
669 -> 1872  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1872 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 1872  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
689 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
756 -> 762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
762 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
796 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
803 -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
811 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 830  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
819 -> 2022  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2022 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 2022  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
836 -> 853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
853 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
889 -> 894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
894 -> 899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
899 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
916 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
920 -> 927  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
920 -> 2123  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2123 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 2123  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
940 -> 958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
958 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
964 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
979 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1000 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 1027  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1016 -> 2219  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2219 -> 1033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 2219  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1033 -> 1041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1041 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1064 -> 1070  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1117  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1106 -> 2309  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2309 -> 1123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 2309  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1123 -> 1131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1131 -> 1140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1159 -> 1171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1171 -> 1180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1180 -> 1184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 1810  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
788 -> 1975  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
