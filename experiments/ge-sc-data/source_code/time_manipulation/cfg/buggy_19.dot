digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
1824 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ assert(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n56-function_definition-11-14", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ uint256 c = a / b;\n73-new_variable-12-12", method="div(uint256 a,uint256 b)", type_label=new_variable];
81 [label="12_ return c;\n81-return-13-13", method="div(uint256 a,uint256 b)", type_label=return];
83 [label="14_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n83-function_definition-15-18", method="sub(uint256 a,uint256 b)", type_label=function_definition];
100 [label="15_ assert(b <= a);\n100-expression_statement-16-16", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
107 [label="16_ return a - b;\n107-return-17-17", method="sub(uint256 a,uint256 b)", type_label=return];
111 [label="18_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n111-function_definition-19-23", method="add(uint256 a,uint256 b)", type_label=function_definition];
128 [label="19_ uint256 c = a + b;\n128-new_variable-20-20", method="add(uint256 a,uint256 b)", type_label=new_variable];
136 [label="20_ assert(c >= a);\n136-expression_statement-21-21", method="add(uint256 a,uint256 b)", type_label=expression_statement];
143 [label="21_ return c;\n143-return-22-22", method="add(uint256 a,uint256 b)", type_label=return];
148 [label="25_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n148-function_definition-26-28", method="bug_tmstmp17()", type_label=function_definition];
157 [label="26_ return block.timestamp >= 1546300800;\n157-return-27-27", method="bug_tmstmp17()", type_label=return];
163 [label="28_ address public owner;\n163-new_variable-29-29", method="", type_label=new_variable];
170 [label="30_ owner = msg.sender;\n170-expression_statement-31-31", method="", type_label=expression_statement];
176 [label="32_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n176-function_definition-33-35", method="bug_tmstmp37()", type_label=function_definition];
185 [label="33_ return block.timestamp >= 1546300800;\n185-return-34-34", method="bug_tmstmp37()", type_label=return];
191 [label="35_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n191-expression_statement-36-39", method="", type_label=expression_statement];
194 [label="36_ require(msg.sender == owner);\n194-expression_statement-37-37", method="", type_label=expression_statement];
203 [label="37_ _;\n203-expression_statement-38-38", method="", type_label=expression_statement];
205 [label="39_ uint256 bugv_tmstmp4 = block.timestamp;\n205-new_variable-40-40", method="", type_label=new_variable];
212 [label="40_ function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n212-function_definition-41-44", method="transferOwnership(address newOwner)", type_label=function_definition];
218 [label="40_ onlyOwner\n218-expression_statement-41-41", method="transferOwnership(address newOwner)", type_label=expression_statement];
222 [label="41_ require(newOwner != address(0));\n222-expression_statement-42-42", method="transferOwnership(address newOwner)", type_label=expression_statement];
231 [label="42_ owner = newOwner;\n231-expression_statement-43-43", method="transferOwnership(address newOwner)", type_label=expression_statement];
235 [label="44_ address winner_tmstmp3;\n235-new_variable-45-45", method="", type_label=new_variable];
239 [label="45_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n239-function_definition-46-49", method="play_tmstmp3(uint startTime)", type_label=function_definition];
247 [label="46_ uint _vtime = block.timestamp;\n247-new_variable-47-47", method="play_tmstmp3(uint startTime)", type_label=new_variable];
255 [label="47_ if_startTime + (5 * 1 days) == _vtime\n255-if-48-49", method="play_tmstmp3(uint startTime)", type_label=if];
2049 [label="47_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
266 [label="48_ winner_tmstmp3 = msg.sender;\n266-expression_statement-49-49", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
282 [label="52_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n282-function_definition-53-55", method="bug_tmstmp9()", type_label=function_definition];
291 [label="53_ return block.timestamp >= 1546300800;\n291-return-54-54", method="bug_tmstmp9()", type_label=return];
297 [label="55_ function withdrawForUser(address payable _address,uint amount) onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\");\n        _address.transfer(amount);\n    }\n297-function_definition-56-59", method="withdrawForUser(address payable _address,uint amount)", type_label=function_definition];
307 [label="55_ onlyOwner\n307-expression_statement-56-56", method="withdrawForUser(address payable _address,uint amount)", type_label=expression_statement];
311 [label="56_ require(msg.sender == owner, \"only owner can use this method\");\n311-expression_statement-57-57", method="withdrawForUser(address payable _address,uint amount)", type_label=expression_statement];
323 [label="57_ _address.transfer(amount);\n323-expression_statement-58-58", method="withdrawForUser(address payable _address,uint amount)", type_label=expression_statement];
330 [label="59_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n330-function_definition-60-62", method="bug_tmstmp25()", type_label=function_definition];
339 [label="60_ return block.timestamp >= 1546300800;\n339-return-61-61", method="bug_tmstmp25()", type_label=return];
345 [label="62_ function moveBrick(uint amount) onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(amount);\n    }\n345-function_definition-63-66", method="moveBrick(uint amount)", type_label=function_definition];
351 [label="62_ onlyOwner\n351-expression_statement-63-63", method="moveBrick(uint amount)", type_label=expression_statement];
355 [label="63_ require(msg.sender == owner, \"only owner can use this method\");\n355-expression_statement-64-64", method="moveBrick(uint amount)", type_label=expression_statement];
367 [label="64_ msg.sender.transfer(amount);\n367-expression_statement-65-65", method="moveBrick(uint amount)", type_label=expression_statement];
376 [label="66_ address winner_tmstmp19;\n376-new_variable-67-67", method="", type_label=new_variable];
380 [label="67_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n380-function_definition-68-71", method="play_tmstmp19(uint startTime)", type_label=function_definition];
388 [label="68_ uint _vtime = block.timestamp;\n388-new_variable-69-69", method="play_tmstmp19(uint startTime)", type_label=new_variable];
396 [label="69_ if_startTime + (5 * 1 days) == _vtime\n396-if-70-71", method="play_tmstmp19(uint startTime)", type_label=if];
2190 [label="69_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
407 [label="70_ winner_tmstmp19 = msg.sender;\n407-expression_statement-71-71", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
413 [label="71_ function moveBrickContracts() onlyOwner public\n    {\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n413-function_definition-72-76", method="moveBrickContracts()", type_label=function_definition];
415 [label="71_ onlyOwner\n415-expression_statement-72-72", method="moveBrickContracts()", type_label=expression_statement];
419 [label="73_ require(msg.sender == owner, \"only owner can use this method\");\n419-expression_statement-74-74", method="moveBrickContracts()", type_label=expression_statement];
431 [label="74_ msg.sender.transfer(address(this).balance);\n431-expression_statement-75-75", method="moveBrickContracts()", type_label=expression_statement];
444 [label="76_ address winner_tmstmp26;\n444-new_variable-77-77", method="", type_label=new_variable];
448 [label="77_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n448-function_definition-78-80", method="play_tmstmp26(uint startTime)", type_label=function_definition];
456 [label="78_ if_startTime + (5 * 1 days) == block.timestamp\n456-if-79-80", method="play_tmstmp26(uint startTime)", type_label=if];
2250 [label="78_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
469 [label="79_ winner_tmstmp26 = msg.sender;\n469-expression_statement-80-80", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
475 [label="80_ function moveBrickClear() onlyOwner public {\n        require(msg.sender == owner, \"only owner can use this method\"); \n        selfdestruct(msg.sender);\n    }\n475-function_definition-81-84", method="moveBrickClear()", type_label=function_definition];
477 [label="80_ onlyOwner\n477-expression_statement-81-81", method="moveBrickClear()", type_label=expression_statement];
481 [label="81_ require(msg.sender == owner, \"only owner can use this method\");\n481-expression_statement-82-82", method="moveBrickClear()", type_label=expression_statement];
493 [label="82_ selfdestruct(msg.sender);\n493-expression_statement-83-83", method="moveBrickClear()", type_label=expression_statement];
500 [label="84_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n500-function_definition-85-93", method="bug_tmstmp20()", type_label=function_definition];
505 [label="85_ uint pastBlockTime_tmstmp20;\n505-new_variable-86-86", method="bug_tmstmp20()", type_label=new_variable];
510 [label="86_ require(msg.value == 10 ether);\n510-expression_statement-87-87", method="bug_tmstmp20()", type_label=expression_statement];
520 [label="87_ require(now != pastBlockTime_tmstmp20);\n520-expression_statement-88-88", method="bug_tmstmp20()", type_label=expression_statement];
527 [label="88_ pastBlockTime_tmstmp20 = now;\n527-expression_statement-89-89", method="bug_tmstmp20()", type_label=expression_statement];
531 [label="89_ if_now % 15 == 0\n531-if-90-92", method="bug_tmstmp20()", type_label=if];
2325 [label="89_ end_if", method="bug_tmstmp20()", type_label=end_if];
538 [label="90_ msg.sender.transfer(address(this).balance);\n538-expression_statement-91-91", method="bug_tmstmp20()", type_label=expression_statement];
551 [label="93_ function joinFlexible() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n551-function_definition-94-97", method="joinFlexible()", type_label=function_definition];
553 [label="93_ onlyOwner\n553-expression_statement-94-94", method="joinFlexible()", type_label=expression_statement];
557 [label="94_ require(msg.sender == owner, \"only owner can use this method\");\n557-expression_statement-95-95", method="joinFlexible()", type_label=expression_statement];
569 [label="95_ msg.sender.transfer(address(this).balance);\n569-expression_statement-96-96", method="joinFlexible()", type_label=expression_statement];
582 [label="97_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n582-function_definition-98-106", method="bug_tmstmp32()", type_label=function_definition];
587 [label="98_ uint pastBlockTime_tmstmp32;\n587-new_variable-99-99", method="bug_tmstmp32()", type_label=new_variable];
592 [label="99_ require(msg.value == 10 ether);\n592-expression_statement-100-100", method="bug_tmstmp32()", type_label=expression_statement];
602 [label="100_ require(now != pastBlockTime_tmstmp32);\n602-expression_statement-101-101", method="bug_tmstmp32()", type_label=expression_statement];
609 [label="101_ pastBlockTime_tmstmp32 = now;\n609-expression_statement-102-102", method="bug_tmstmp32()", type_label=expression_statement];
613 [label="102_ if_now % 15 == 0\n613-if-103-105", method="bug_tmstmp32()", type_label=if];
2407 [label="102_ end_if", method="bug_tmstmp32()", type_label=end_if];
620 [label="103_ msg.sender.transfer(address(this).balance);\n620-expression_statement-104-104", method="bug_tmstmp32()", type_label=expression_statement];
633 [label="106_ function joinFixed() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n633-function_definition-107-110", method="joinFixed()", type_label=function_definition];
635 [label="106_ onlyOwner\n635-expression_statement-107-107", method="joinFixed()", type_label=expression_statement];
639 [label="107_ require(msg.sender == owner, \"only owner can use this method\");\n639-expression_statement-108-108", method="joinFixed()", type_label=expression_statement];
651 [label="108_ msg.sender.transfer(address(this).balance);\n651-expression_statement-109-109", method="joinFixed()", type_label=expression_statement];
664 [label="110_ address winner_tmstmp38;\n664-new_variable-111-111", method="", type_label=new_variable];
668 [label="111_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n668-function_definition-112-114", method="play_tmstmp38(uint startTime)", type_label=function_definition];
676 [label="112_ if_startTime + (5 * 1 days) == block.timestamp\n676-if-113-114", method="play_tmstmp38(uint startTime)", type_label=if];
2470 [label="112_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
689 [label="113_ winner_tmstmp38 = msg.sender;\n689-expression_statement-114-114", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
695 [label="114_ function staticBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n695-function_definition-115-118", method="staticBonus()", type_label=function_definition];
697 [label="114_ onlyOwner\n697-expression_statement-115-115", method="staticBonus()", type_label=expression_statement];
701 [label="115_ require(msg.sender == owner, \"only owner can use this method\");\n701-expression_statement-116-116", method="staticBonus()", type_label=expression_statement];
713 [label="116_ msg.sender.transfer(address(this).balance);\n713-expression_statement-117-117", method="staticBonus()", type_label=expression_statement];
726 [label="118_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n726-function_definition-119-127", method="bug_tmstmp4()", type_label=function_definition];
731 [label="119_ uint pastBlockTime_tmstmp4;\n731-new_variable-120-120", method="bug_tmstmp4()", type_label=new_variable];
736 [label="120_ require(msg.value == 10 ether);\n736-expression_statement-121-121", method="bug_tmstmp4()", type_label=expression_statement];
746 [label="121_ require(now != pastBlockTime_tmstmp4);\n746-expression_statement-122-122", method="bug_tmstmp4()", type_label=expression_statement];
753 [label="122_ pastBlockTime_tmstmp4 = now;\n753-expression_statement-123-123", method="bug_tmstmp4()", type_label=expression_statement];
757 [label="123_ if_now % 15 == 0\n757-if-124-126", method="bug_tmstmp4()", type_label=if];
2551 [label="123_ end_if", method="bug_tmstmp4()", type_label=end_if];
764 [label="124_ msg.sender.transfer(address(this).balance);\n764-expression_statement-125-125", method="bug_tmstmp4()", type_label=expression_statement];
777 [label="127_ function activeBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n777-function_definition-128-131", method="activeBonus()", type_label=function_definition];
779 [label="127_ onlyOwner\n779-expression_statement-128-128", method="activeBonus()", type_label=expression_statement];
783 [label="128_ require(msg.sender == owner, \"only owner can use this method\");\n783-expression_statement-129-129", method="activeBonus()", type_label=expression_statement];
795 [label="129_ msg.sender.transfer(address(this).balance);\n795-expression_statement-130-130", method="activeBonus()", type_label=expression_statement];
808 [label="131_ address winner_tmstmp7;\n808-new_variable-132-132", method="", type_label=new_variable];
812 [label="132_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n812-function_definition-133-136", method="play_tmstmp7(uint startTime)", type_label=function_definition];
820 [label="133_ uint _vtime = block.timestamp;\n820-new_variable-134-134", method="play_tmstmp7(uint startTime)", type_label=new_variable];
828 [label="134_ if_startTime + (5 * 1 days) == _vtime\n828-if-135-136", method="play_tmstmp7(uint startTime)", type_label=if];
2622 [label="134_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
839 [label="135_ winner_tmstmp7 = msg.sender;\n839-expression_statement-136-136", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
845 [label="136_ function teamAddBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n845-function_definition-137-140", method="teamAddBonus()", type_label=function_definition];
847 [label="136_ onlyOwner\n847-expression_statement-137-137", method="teamAddBonus()", type_label=expression_statement];
851 [label="137_ require(msg.sender == owner, \"only owner can use this method\");\n851-expression_statement-138-138", method="teamAddBonus()", type_label=expression_statement];
863 [label="138_ msg.sender.transfer(address(this).balance);\n863-expression_statement-139-139", method="teamAddBonus()", type_label=expression_statement];
876 [label="140_ address winner_tmstmp23;\n876-new_variable-141-141", method="", type_label=new_variable];
880 [label="141_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n880-function_definition-142-145", method="play_tmstmp23(uint startTime)", type_label=function_definition];
888 [label="142_ uint _vtime = block.timestamp;\n888-new_variable-143-143", method="play_tmstmp23(uint startTime)", type_label=new_variable];
896 [label="143_ if_startTime + (5 * 1 days) == _vtime\n896-if-144-145", method="play_tmstmp23(uint startTime)", type_label=if];
2690 [label="143_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
907 [label="144_ winner_tmstmp23 = msg.sender;\n907-expression_statement-145-145", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
913 [label="145_ function staticBonusCacl() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n913-function_definition-146-149", method="staticBonusCacl()", type_label=function_definition];
915 [label="145_ onlyOwner\n915-expression_statement-146-146", method="staticBonusCacl()", type_label=expression_statement];
919 [label="146_ require(msg.sender == owner, \"only owner can use this method\");\n919-expression_statement-147-147", method="staticBonusCacl()", type_label=expression_statement];
931 [label="147_ msg.sender.transfer(address(this).balance);\n931-expression_statement-148-148", method="staticBonusCacl()", type_label=expression_statement];
944 [label="149_ address winner_tmstmp14;\n944-new_variable-150-150", method="", type_label=new_variable];
948 [label="150_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n948-function_definition-151-153", method="play_tmstmp14(uint startTime)", type_label=function_definition];
956 [label="151_ if_startTime + (5 * 1 days) == block.timestamp\n956-if-152-153", method="play_tmstmp14(uint startTime)", type_label=if];
2750 [label="151_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
969 [label="152_ winner_tmstmp14 = msg.sender;\n969-expression_statement-153-153", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
975 [label="153_ function activeBonusCacl_1() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n975-function_definition-154-157", method="activeBonusCacl_1()", type_label=function_definition];
977 [label="153_ onlyOwner\n977-expression_statement-154-154", method="activeBonusCacl_1()", type_label=expression_statement];
981 [label="154_ require(msg.sender == owner, \"only owner can use this method\");\n981-expression_statement-155-155", method="activeBonusCacl_1()", type_label=expression_statement];
993 [label="155_ msg.sender.transfer(address(this).balance);\n993-expression_statement-156-156", method="activeBonusCacl_1()", type_label=expression_statement];
1006 [label="157_ address winner_tmstmp30;\n1006-new_variable-158-158", method="", type_label=new_variable];
1010 [label="158_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n1010-function_definition-159-161", method="play_tmstmp30(uint startTime)", type_label=function_definition];
1018 [label="159_ if_startTime + (5 * 1 days) == block.timestamp\n1018-if-160-161", method="play_tmstmp30(uint startTime)", type_label=if];
2812 [label="159_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
1031 [label="160_ winner_tmstmp30 = msg.sender;\n1031-expression_statement-161-161", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
1037 [label="161_ function activeBonusCacl_2() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1037-function_definition-162-165", method="activeBonusCacl_2()", type_label=function_definition];
1039 [label="161_ onlyOwner\n1039-expression_statement-162-162", method="activeBonusCacl_2()", type_label=expression_statement];
1043 [label="162_ require(msg.sender == owner, \"only owner can use this method\");\n1043-expression_statement-163-163", method="activeBonusCacl_2()", type_label=expression_statement];
1055 [label="163_ msg.sender.transfer(address(this).balance);\n1055-expression_statement-164-164", method="activeBonusCacl_2()", type_label=expression_statement];
1068 [label="165_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1068-function_definition-166-174", method="bug_tmstmp8()", type_label=function_definition];
1073 [label="166_ uint pastBlockTime_tmstmp8;\n1073-new_variable-167-167", method="bug_tmstmp8()", type_label=new_variable];
1078 [label="167_ require(msg.value == 10 ether);\n1078-expression_statement-168-168", method="bug_tmstmp8()", type_label=expression_statement];
1088 [label="168_ require(now != pastBlockTime_tmstmp8);\n1088-expression_statement-169-169", method="bug_tmstmp8()", type_label=expression_statement];
1095 [label="169_ pastBlockTime_tmstmp8 = now;\n1095-expression_statement-170-170", method="bug_tmstmp8()", type_label=expression_statement];
1099 [label="170_ if_now % 15 == 0\n1099-if-171-173", method="bug_tmstmp8()", type_label=if];
2893 [label="170_ end_if", method="bug_tmstmp8()", type_label=end_if];
1106 [label="171_ msg.sender.transfer(address(this).balance);\n1106-expression_statement-172-172", method="bug_tmstmp8()", type_label=expression_statement];
1119 [label="174_ function activeBonusCacl_3() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1119-function_definition-175-178", method="activeBonusCacl_3()", type_label=function_definition];
1121 [label="174_ onlyOwner\n1121-expression_statement-175-175", method="activeBonusCacl_3()", type_label=expression_statement];
1125 [label="175_ require(msg.sender == owner, \"only owner can use this method\");\n1125-expression_statement-176-176", method="activeBonusCacl_3()", type_label=expression_statement];
1137 [label="176_ msg.sender.transfer(address(this).balance);\n1137-expression_statement-177-177", method="activeBonusCacl_3()", type_label=expression_statement];
1150 [label="178_ address winner_tmstmp39;\n1150-new_variable-179-179", method="", type_label=new_variable];
1154 [label="179_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1154-function_definition-180-183", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1162 [label="180_ uint _vtime = block.timestamp;\n1162-new_variable-181-181", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1170 [label="181_ if_startTime + (5 * 1 days) == _vtime\n1170-if-182-183", method="play_tmstmp39(uint startTime)", type_label=if];
2964 [label="181_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1181 [label="182_ winner_tmstmp39 = msg.sender;\n1181-expression_statement-183-183", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1187 [label="183_ function activeBonusCacl_4() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1187-function_definition-184-187", method="activeBonusCacl_4()", type_label=function_definition];
1189 [label="183_ onlyOwner\n1189-expression_statement-184-184", method="activeBonusCacl_4()", type_label=expression_statement];
1193 [label="184_ require(msg.sender == owner, \"only owner can use this method\");\n1193-expression_statement-185-185", method="activeBonusCacl_4()", type_label=expression_statement];
1205 [label="185_ msg.sender.transfer(address(this).balance);\n1205-expression_statement-186-186", method="activeBonusCacl_4()", type_label=expression_statement];
1218 [label="187_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1218-function_definition-188-196", method="bug_tmstmp36()", type_label=function_definition];
1223 [label="188_ uint pastBlockTime_tmstmp36;\n1223-new_variable-189-189", method="bug_tmstmp36()", type_label=new_variable];
1228 [label="189_ require(msg.value == 10 ether);\n1228-expression_statement-190-190", method="bug_tmstmp36()", type_label=expression_statement];
1238 [label="190_ require(now != pastBlockTime_tmstmp36);\n1238-expression_statement-191-191", method="bug_tmstmp36()", type_label=expression_statement];
1245 [label="191_ pastBlockTime_tmstmp36 = now;\n1245-expression_statement-192-192", method="bug_tmstmp36()", type_label=expression_statement];
1249 [label="192_ if_now % 15 == 0\n1249-if-193-195", method="bug_tmstmp36()", type_label=if];
3043 [label="192_ end_if", method="bug_tmstmp36()", type_label=end_if];
1256 [label="193_ msg.sender.transfer(address(this).balance);\n1256-expression_statement-194-194", method="bug_tmstmp36()", type_label=expression_statement];
1269 [label="196_ function activeBonusCacl_5() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1269-function_definition-197-200", method="activeBonusCacl_5()", type_label=function_definition];
1271 [label="196_ onlyOwner\n1271-expression_statement-197-197", method="activeBonusCacl_5()", type_label=expression_statement];
1275 [label="197_ require(msg.sender == owner, \"only owner can use this method\");\n1275-expression_statement-198-198", method="activeBonusCacl_5()", type_label=expression_statement];
1287 [label="198_ msg.sender.transfer(address(this).balance);\n1287-expression_statement-199-199", method="activeBonusCacl_5()", type_label=expression_statement];
1300 [label="200_ address winner_tmstmp35;\n1300-new_variable-201-201", method="", type_label=new_variable];
1304 [label="201_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n1304-function_definition-202-205", method="play_tmstmp35(uint startTime)", type_label=function_definition];
1312 [label="202_ uint _vtime = block.timestamp;\n1312-new_variable-203-203", method="play_tmstmp35(uint startTime)", type_label=new_variable];
1320 [label="203_ if_startTime + (5 * 1 days) == _vtime\n1320-if-204-205", method="play_tmstmp35(uint startTime)", type_label=if];
3114 [label="203_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
1331 [label="204_ winner_tmstmp35 = msg.sender;\n1331-expression_statement-205-205", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
1337 [label="205_ function activeBonusCacl_6() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1337-function_definition-206-209", method="activeBonusCacl_6()", type_label=function_definition];
1339 [label="205_ onlyOwner\n1339-expression_statement-206-206", method="activeBonusCacl_6()", type_label=expression_statement];
1343 [label="206_ require(msg.sender == owner, \"only owner can use this method\");\n1343-expression_statement-207-207", method="activeBonusCacl_6()", type_label=expression_statement];
1355 [label="207_ msg.sender.transfer(address(this).balance);\n1355-expression_statement-208-208", method="activeBonusCacl_6()", type_label=expression_statement];
1368 [label="209_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1368-function_definition-210-218", method="bug_tmstmp40()", type_label=function_definition];
1373 [label="210_ uint pastBlockTime_tmstmp40;\n1373-new_variable-211-211", method="bug_tmstmp40()", type_label=new_variable];
1378 [label="211_ require(msg.value == 10 ether);\n1378-expression_statement-212-212", method="bug_tmstmp40()", type_label=expression_statement];
1388 [label="212_ require(now != pastBlockTime_tmstmp40);\n1388-expression_statement-213-213", method="bug_tmstmp40()", type_label=expression_statement];
1395 [label="213_ pastBlockTime_tmstmp40 = now;\n1395-expression_statement-214-214", method="bug_tmstmp40()", type_label=expression_statement];
1399 [label="214_ if_now % 15 == 0\n1399-if-215-217", method="bug_tmstmp40()", type_label=if];
3193 [label="214_ end_if", method="bug_tmstmp40()", type_label=end_if];
1406 [label="215_ msg.sender.transfer(address(this).balance);\n1406-expression_statement-216-216", method="bug_tmstmp40()", type_label=expression_statement];
1419 [label="218_ function activeBonusCacl_7() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1419-function_definition-219-222", method="activeBonusCacl_7()", type_label=function_definition];
1421 [label="218_ onlyOwner\n1421-expression_statement-219-219", method="activeBonusCacl_7()", type_label=expression_statement];
1425 [label="219_ require(msg.sender == owner, \"only owner can use this method\");\n1425-expression_statement-220-220", method="activeBonusCacl_7()", type_label=expression_statement];
1437 [label="220_ msg.sender.transfer(address(this).balance);\n1437-expression_statement-221-221", method="activeBonusCacl_7()", type_label=expression_statement];
1450 [label="222_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1450-function_definition-223-225", method="bug_tmstmp33()", type_label=function_definition];
1459 [label="223_ return block.timestamp >= 1546300800;\n1459-return-224-224", method="bug_tmstmp33()", type_label=return];
1465 [label="225_ function activeBonusCacl_8() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1465-function_definition-226-229", method="activeBonusCacl_8()", type_label=function_definition];
1467 [label="225_ onlyOwner\n1467-expression_statement-226-226", method="activeBonusCacl_8()", type_label=expression_statement];
1471 [label="226_ require(msg.sender == owner, \"only owner can use this method\");\n1471-expression_statement-227-227", method="activeBonusCacl_8()", type_label=expression_statement];
1483 [label="227_ msg.sender.transfer(address(this).balance);\n1483-expression_statement-228-228", method="activeBonusCacl_8()", type_label=expression_statement];
1496 [label="229_ address winner_tmstmp27;\n1496-new_variable-230-230", method="", type_label=new_variable];
1500 [label="230_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n1500-function_definition-231-234", method="play_tmstmp27(uint startTime)", type_label=function_definition];
1508 [label="231_ uint _vtime = block.timestamp;\n1508-new_variable-232-232", method="play_tmstmp27(uint startTime)", type_label=new_variable];
1516 [label="232_ if_startTime + (5 * 1 days) == _vtime\n1516-if-233-234", method="play_tmstmp27(uint startTime)", type_label=if];
3310 [label="232_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
1527 [label="233_ winner_tmstmp27 = msg.sender;\n1527-expression_statement-234-234", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
1533 [label="234_ function activeBonusCacl_9() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1533-function_definition-235-238", method="activeBonusCacl_9()", type_label=function_definition];
1535 [label="234_ onlyOwner\n1535-expression_statement-235-235", method="activeBonusCacl_9()", type_label=expression_statement];
1539 [label="235_ require(msg.sender == owner, \"only owner can use this method\");\n1539-expression_statement-236-236", method="activeBonusCacl_9()", type_label=expression_statement];
1551 [label="236_ msg.sender.transfer(address(this).balance);\n1551-expression_statement-237-237", method="activeBonusCacl_9()", type_label=expression_statement];
1564 [label="238_ address winner_tmstmp31;\n1564-new_variable-239-239", method="", type_label=new_variable];
1568 [label="239_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n1568-function_definition-240-243", method="play_tmstmp31(uint startTime)", type_label=function_definition];
1576 [label="240_ uint _vtime = block.timestamp;\n1576-new_variable-241-241", method="play_tmstmp31(uint startTime)", type_label=new_variable];
1584 [label="241_ if_startTime + (5 * 1 days) == _vtime\n1584-if-242-243", method="play_tmstmp31(uint startTime)", type_label=if];
3378 [label="241_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
1595 [label="242_ winner_tmstmp31 = msg.sender;\n1595-expression_statement-243-243", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
1601 [label="243_ function teamAddBonusCacl() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1601-function_definition-244-247", method="teamAddBonusCacl()", type_label=function_definition];
1603 [label="243_ onlyOwner\n1603-expression_statement-244-244", method="teamAddBonusCacl()", type_label=expression_statement];
1607 [label="244_ require(msg.sender == owner, \"only owner can use this method\");\n1607-expression_statement-245-245", method="teamAddBonusCacl()", type_label=expression_statement];
1619 [label="245_ msg.sender.transfer(address(this).balance);\n1619-expression_statement-246-246", method="teamAddBonusCacl()", type_label=expression_statement];
1632 [label="247_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1632-function_definition-248-250", method="bug_tmstmp13()", type_label=function_definition];
1641 [label="248_ return block.timestamp >= 1546300800;\n1641-return-249-249", method="bug_tmstmp13()", type_label=return];
1647 [label="250_ function caclTeamPerformance() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1647-function_definition-251-254", method="caclTeamPerformance()", type_label=function_definition];
1649 [label="250_ onlyOwner\n1649-expression_statement-251-251", method="caclTeamPerformance()", type_label=expression_statement];
1653 [label="251_ require(msg.sender == owner, \"only owner can use this method\");\n1653-expression_statement-252-252", method="caclTeamPerformance()", type_label=expression_statement];
1665 [label="252_ msg.sender.transfer(address(this).balance);\n1665-expression_statement-253-253", method="caclTeamPerformance()", type_label=expression_statement];
1678 [label="254_ uint256 bugv_tmstmp5 = block.timestamp;\n1678-new_variable-255-255", method="", type_label=new_variable];
1685 [label="255_ function releaStaticBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1685-function_definition-256-259", method="releaStaticBonus()", type_label=function_definition];
1687 [label="255_ onlyOwner\n1687-expression_statement-256-256", method="releaStaticBonus()", type_label=expression_statement];
1691 [label="256_ require(msg.sender == owner, \"only owner can use this method\");\n1691-expression_statement-257-257", method="releaStaticBonus()", type_label=expression_statement];
1703 [label="257_ msg.sender.transfer(address(this).balance);\n1703-expression_statement-258-258", method="releaStaticBonus()", type_label=expression_statement];
1716 [label="259_ uint256 bugv_tmstmp1 = block.timestamp;\n1716-new_variable-260-260", method="", type_label=new_variable];
1723 [label="260_ function releaActiveBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1723-function_definition-261-264", method="releaActiveBonus()", type_label=function_definition];
1725 [label="260_ onlyOwner\n1725-expression_statement-261-261", method="releaActiveBonus()", type_label=expression_statement];
1729 [label="261_ require(msg.sender == owner, \"only owner can use this method\");\n1729-expression_statement-262-262", method="releaActiveBonus()", type_label=expression_statement];
1741 [label="262_ msg.sender.transfer(address(this).balance);\n1741-expression_statement-263-263", method="releaActiveBonus()", type_label=expression_statement];
1754 [label="264_ uint256 bugv_tmstmp2 = block.timestamp;\n1754-new_variable-265-265", method="", type_label=new_variable];
1761 [label="265_ function releaTeamAddBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1761-function_definition-266-269", method="releaTeamAddBonus()", type_label=function_definition];
1763 [label="265_ onlyOwner\n1763-expression_statement-266-266", method="releaTeamAddBonus()", type_label=expression_statement];
1767 [label="266_ require(msg.sender == owner, \"only owner can use this method\");\n1767-expression_statement-267-267", method="releaTeamAddBonus()", type_label=expression_statement];
1779 [label="267_ msg.sender.transfer(address(this).balance);\n1779-expression_statement-268-268", method="releaTeamAddBonus()", type_label=expression_statement];
1792 [label="269_ uint256 bugv_tmstmp3 = block.timestamp;\n1792-new_variable-270-270", method="", type_label=new_variable];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
272;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 1824  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1824 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 1824  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
83 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
143 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
148 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
157 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
176 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
191 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
212 -> 222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
239 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 266  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
255 -> 2049  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2049 -> 272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 2049  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
282 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
297 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
311 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
345 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
380 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
388 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
396 -> 407  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
396 -> 2190  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2190 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 2190  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
413 -> 419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 469  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
456 -> 2250  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2250 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 2250  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
475 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
481 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
527 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 538  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
531 -> 2325  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2325 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
538 -> 2325  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
551 -> 557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 620  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
613 -> 2407  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2407 -> 633  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
620 -> 2407  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
633 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
668 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 689  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
676 -> 2470  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2470 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 2470  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
695 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
726 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
753 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 764  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
757 -> 2551  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2551 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 2551  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
777 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
820 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 839  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
828 -> 2622  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2622 -> 845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
839 -> 2622  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
845 -> 851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
880 -> 888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
888 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
896 -> 907  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
896 -> 2690  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2690 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 2690  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
913 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 969  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
956 -> 2750  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2750 -> 975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 2750  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
975 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1010 -> 1018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 1031  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1018 -> 2812  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2812 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 2812  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1037 -> 1043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1073 -> 1078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1078 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1095 -> 1099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 1106  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1099 -> 2893  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2893 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 2893  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1119 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1125 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1154 -> 1162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1170 -> 1181  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1170 -> 2964  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2964 -> 1187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 2964  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1187 -> 1193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1193 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1218 -> 1223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1223 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1238 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1245 -> 1249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1249 -> 1256  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1249 -> 3043  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3043 -> 1269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 3043  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1269 -> 1275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1275 -> 1287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 1312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1312 -> 1320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1320 -> 1331  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1320 -> 3114  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3114 -> 1337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 3114  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1337 -> 1343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1343 -> 1355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1368 -> 1373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1373 -> 1378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 1388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1388 -> 1395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1395 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1406  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1399 -> 3193  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3193 -> 1419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1406 -> 3193  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1419 -> 1425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1425 -> 1437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 1459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1459 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1465 -> 1471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1471 -> 1483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1500 -> 1508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1508 -> 1516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1516 -> 1527  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1516 -> 3310  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3310 -> 1533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1527 -> 3310  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1533 -> 1539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1539 -> 1551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 1576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1576 -> 1584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 1595  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1584 -> 3378  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3378 -> 1601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1595 -> 3378  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1601 -> 1607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1632 -> 1641  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1641 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1647 -> 1653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1685 -> 1691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1691 -> 1703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1723 -> 1729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1729 -> 1741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1761 -> 1767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1767 -> 1779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
