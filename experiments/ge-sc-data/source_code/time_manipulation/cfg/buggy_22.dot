digraph  {
13 [label="2_ function bug_tmstmp21() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n13-function_definition-3-5", method="bug_tmstmp21()", type_label=function_definition];
22 [label="3_ return block.timestamp >= 1546300800;\n22-return-4-4", method="bug_tmstmp21()", type_label=return];
28 [label="5_ address public owner;\n28-new_variable-6-6", method="", type_label=new_variable];
35 [label="7_ owner = msg.sender;\n35-expression_statement-8-8", method="", type_label=expression_statement];
41 [label="9_ address winner_tmstmp3;\n41-new_variable-10-10", method="", type_label=new_variable];
45 [label="10_ function play_tmstmp3(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp3 = msg.sender;}}\n45-function_definition-11-14", method="play_tmstmp3(uint startTime)", type_label=function_definition];
53 [label="11_ uint _vtime = block.timestamp;\n53-new_variable-12-12", method="play_tmstmp3(uint startTime)", type_label=new_variable];
61 [label="12_ if_startTime + (5 * 1 days) == _vtime\n61-if-13-14", method="play_tmstmp3(uint startTime)", type_label=if];
2507 [label="12_ end_if", method="play_tmstmp3(uint startTime)", type_label=end_if];
72 [label="13_ winner_tmstmp3 = msg.sender;\n72-expression_statement-14-14", method="play_tmstmp3(uint startTime)", type_label=expression_statement];
78 [label="14_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n78-expression_statement-15-18", method="", type_label=expression_statement];
81 [label="15_ require(msg.sender == owner);\n81-expression_statement-16-16", method="", type_label=expression_statement];
90 [label="16_ _;\n90-expression_statement-17-17", method="", type_label=expression_statement];
92 [label="18_ function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n92-function_definition-19-21", method="transferOwnership(address newOwner)", type_label=function_definition];
98 [label="18_ onlyOwner\n98-expression_statement-19-19", method="transferOwnership(address newOwner)", type_label=expression_statement];
102 [label="19_ owner = newOwner;\n102-expression_statement-20-20", method="transferOwnership(address newOwner)", type_label=expression_statement];
106 [label="21_ function bug_tmstmp9() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n106-function_definition-22-24", method="bug_tmstmp9()", type_label=function_definition];
115 [label="22_ return block.timestamp >= 1546300800;\n115-return-23-23", method="bug_tmstmp9()", type_label=return];
124 [label="26_ address winner_tmstmp27;\n124-new_variable-27-27", method="", type_label=new_variable];
128 [label="27_ function play_tmstmp27(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp27 = msg.sender;}}\n128-function_definition-28-31", method="play_tmstmp27(uint startTime)", type_label=function_definition];
136 [label="28_ uint _vtime = block.timestamp;\n136-new_variable-29-29", method="play_tmstmp27(uint startTime)", type_label=new_variable];
144 [label="29_ if_startTime + (5 * 1 days) == _vtime\n144-if-30-31", method="play_tmstmp27(uint startTime)", type_label=if];
2590 [label="29_ end_if", method="play_tmstmp27(uint startTime)", type_label=end_if];
155 [label="30_ winner_tmstmp27 = msg.sender;\n155-expression_statement-31-31", method="play_tmstmp27(uint startTime)", type_label=expression_statement];
171 [label="32_ address winner_tmstmp31;\n171-new_variable-33-33", method="", type_label=new_variable];
175 [label="33_ function play_tmstmp31(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp31 = msg.sender;}}\n175-function_definition-34-37", method="play_tmstmp31(uint startTime)", type_label=function_definition];
183 [label="34_ uint _vtime = block.timestamp;\n183-new_variable-35-35", method="play_tmstmp31(uint startTime)", type_label=new_variable];
191 [label="35_ if_startTime + (5 * 1 days) == _vtime\n191-if-36-37", method="play_tmstmp31(uint startTime)", type_label=if];
2637 [label="35_ end_if", method="play_tmstmp31(uint startTime)", type_label=end_if];
202 [label="36_ winner_tmstmp31 = msg.sender;\n202-expression_statement-37-37", method="play_tmstmp31(uint startTime)", type_label=expression_statement];
226 [label="38_ function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public {\n        Token t = Token(_token);\n        require(t.transferFrom(_from, address(this), _value));\n        emit receivedTokens(_from, _value, _token, _extraData);\n    }\n226-function_definition-39-43", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=function_definition];
246 [label="39_ Token t = Token(_token);\n246-new_variable-40-40", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=new_variable];
256 [label="40_ require(t.transferFrom(_from, address(this), _value));\n256-expression_statement-41-41", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=expression_statement];
282 [label="43_ function bug_tmstmp25() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n282-function_definition-44-46", method="bug_tmstmp25()", type_label=function_definition];
291 [label="44_ return block.timestamp >= 1546300800;\n291-return-45-45", method="bug_tmstmp25()", type_label=return];
311 [label="49_ address winner_tmstmp19;\n311-new_variable-50-50", method="", type_label=new_variable];
315 [label="50_ function play_tmstmp19(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp19 = msg.sender;}}\n315-function_definition-51-54", method="play_tmstmp19(uint startTime)", type_label=function_definition];
323 [label="51_ uint _vtime = block.timestamp;\n323-new_variable-52-52", method="play_tmstmp19(uint startTime)", type_label=new_variable];
331 [label="52_ if_startTime + (5 * 1 days) == _vtime\n331-if-53-54", method="play_tmstmp19(uint startTime)", type_label=if];
2777 [label="52_ end_if", method="play_tmstmp19(uint startTime)", type_label=end_if];
342 [label="53_ winner_tmstmp19 = msg.sender;\n342-expression_statement-54-54", method="play_tmstmp19(uint startTime)", type_label=expression_statement];
351 [label="56_ function totalSupply() public view returns (uint256);\n351-function_definition-57-57", method="totalSupply()", type_label=function_definition];
359 [label="57_ address winner_tmstmp26;\n359-new_variable-58-58", method="", type_label=new_variable];
363 [label="58_ function play_tmstmp26(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp26 = msg.sender;}}\n363-function_definition-59-61", method="play_tmstmp26(uint startTime)", type_label=function_definition];
371 [label="59_ if_startTime + (5 * 1 days) == block.timestamp\n371-if-60-61", method="play_tmstmp26(uint startTime)", type_label=if];
2817 [label="59_ end_if", method="play_tmstmp26(uint startTime)", type_label=end_if];
384 [label="60_ winner_tmstmp26 = msg.sender;\n384-expression_statement-61-61", method="play_tmstmp26(uint startTime)", type_label=expression_statement];
390 [label="61_ function actualBalanceOf(address _owner) public view returns (uint256 balance);\n390-function_definition-62-62", method="actualBalanceOf(address _owner)", type_label=function_definition];
403 [label="62_ function bug_tmstmp20 () public payable {\n	uint pastBlockTime_tmstmp20;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp20);  \n        pastBlockTime_tmstmp20 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n403-function_definition-63-71", method="bug_tmstmp20()", type_label=function_definition];
408 [label="63_ uint pastBlockTime_tmstmp20;\n408-new_variable-64-64", method="bug_tmstmp20()", type_label=new_variable];
413 [label="64_ require(msg.value == 10 ether);\n413-expression_statement-65-65", method="bug_tmstmp20()", type_label=expression_statement];
423 [label="65_ require(now != pastBlockTime_tmstmp20);\n423-expression_statement-66-66", method="bug_tmstmp20()", type_label=expression_statement];
430 [label="66_ pastBlockTime_tmstmp20 = now;\n430-expression_statement-67-67", method="bug_tmstmp20()", type_label=expression_statement];
434 [label="67_ if_now % 15 == 0\n434-if-68-70", method="bug_tmstmp20()", type_label=if];
2880 [label="67_ end_if", method="bug_tmstmp20()", type_label=end_if];
441 [label="68_ msg.sender.transfer(address(this).balance);\n441-expression_statement-69-69", method="bug_tmstmp20()", type_label=expression_statement];
454 [label="71_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n454-function_definition-72-72", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
474 [label="72_ function bug_tmstmp32 () public payable {\n	uint pastBlockTime_tmstmp32;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp32);  \n        pastBlockTime_tmstmp32 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n474-function_definition-73-81", method="bug_tmstmp32()", type_label=function_definition];
479 [label="73_ uint pastBlockTime_tmstmp32;\n479-new_variable-74-74", method="bug_tmstmp32()", type_label=new_variable];
484 [label="74_ require(msg.value == 10 ether);\n484-expression_statement-75-75", method="bug_tmstmp32()", type_label=expression_statement];
494 [label="75_ require(now != pastBlockTime_tmstmp32);\n494-expression_statement-76-76", method="bug_tmstmp32()", type_label=expression_statement];
501 [label="76_ pastBlockTime_tmstmp32 = now;\n501-expression_statement-77-77", method="bug_tmstmp32()", type_label=expression_statement];
505 [label="77_ if_now % 15 == 0\n505-if-78-80", method="bug_tmstmp32()", type_label=if];
2951 [label="77_ end_if", method="bug_tmstmp32()", type_label=end_if];
512 [label="78_ msg.sender.transfer(address(this).balance);\n512-expression_statement-79-79", method="bug_tmstmp32()", type_label=expression_statement];
525 [label="81_ function renounceOwnership() public;\n525-function_definition-82-82", method="renounceOwnership()", type_label=function_definition];
528 [label="82_ address winner_tmstmp38;\n528-new_variable-83-83", method="", type_label=new_variable];
532 [label="83_ function play_tmstmp38(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp38 = msg.sender;}}\n532-function_definition-84-86", method="play_tmstmp38(uint startTime)", type_label=function_definition];
540 [label="84_ if_startTime + (5 * 1 days) == block.timestamp\n540-if-85-86", method="play_tmstmp38(uint startTime)", type_label=if];
2986 [label="84_ end_if", method="play_tmstmp38(uint startTime)", type_label=end_if];
553 [label="85_ winner_tmstmp38 = msg.sender;\n553-expression_statement-86-86", method="play_tmstmp38(uint startTime)", type_label=expression_statement];
559 [label="86_ function transferOwnership(address _newOwner) public;\n559-function_definition-87-87", method="transferOwnership(address _newOwner)", type_label=function_definition];
566 [label="87_ function bug_tmstmp4 () public payable {\n	uint pastBlockTime_tmstmp4;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp4);  \n        pastBlockTime_tmstmp4 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n566-function_definition-88-96", method="bug_tmstmp4()", type_label=function_definition];
571 [label="88_ uint pastBlockTime_tmstmp4;\n571-new_variable-89-89", method="bug_tmstmp4()", type_label=new_variable];
576 [label="89_ require(msg.value == 10 ether);\n576-expression_statement-90-90", method="bug_tmstmp4()", type_label=expression_statement];
586 [label="90_ require(now != pastBlockTime_tmstmp4);\n586-expression_statement-91-91", method="bug_tmstmp4()", type_label=expression_statement];
593 [label="91_ pastBlockTime_tmstmp4 = now;\n593-expression_statement-92-92", method="bug_tmstmp4()", type_label=expression_statement];
597 [label="92_ if_now % 15 == 0\n597-if-93-95", method="bug_tmstmp4()", type_label=if];
3043 [label="92_ end_if", method="bug_tmstmp4()", type_label=end_if];
604 [label="93_ msg.sender.transfer(address(this).balance);\n604-expression_statement-94-94", method="bug_tmstmp4()", type_label=expression_statement];
617 [label="96_ function pause() public;\n617-function_definition-97-97", method="pause()", type_label=function_definition];
620 [label="97_ address winner_tmstmp7;\n620-new_variable-98-98", method="", type_label=new_variable];
624 [label="98_ function play_tmstmp7(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp7 = msg.sender;}}\n624-function_definition-99-102", method="play_tmstmp7(uint startTime)", type_label=function_definition];
632 [label="99_ uint _vtime = block.timestamp;\n632-new_variable-100-100", method="play_tmstmp7(uint startTime)", type_label=new_variable];
640 [label="100_ if_startTime + (5 * 1 days) == _vtime\n640-if-101-102", method="play_tmstmp7(uint startTime)", type_label=if];
3086 [label="100_ end_if", method="play_tmstmp7(uint startTime)", type_label=end_if];
651 [label="101_ winner_tmstmp7 = msg.sender;\n651-expression_statement-102-102", method="play_tmstmp7(uint startTime)", type_label=expression_statement];
657 [label="102_ function unpause() public;\n657-function_definition-103-103", method="unpause()", type_label=function_definition];
660 [label="103_ address winner_tmstmp23;\n660-new_variable-104-104", method="", type_label=new_variable];
664 [label="104_ function play_tmstmp23(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp23 = msg.sender;}}\n664-function_definition-105-108", method="play_tmstmp23(uint startTime)", type_label=function_definition];
672 [label="105_ uint _vtime = block.timestamp;\n672-new_variable-106-106", method="play_tmstmp23(uint startTime)", type_label=new_variable];
680 [label="106_ if_startTime + (5 * 1 days) == _vtime\n680-if-107-108", method="play_tmstmp23(uint startTime)", type_label=if];
3126 [label="106_ end_if", method="play_tmstmp23(uint startTime)", type_label=end_if];
691 [label="107_ winner_tmstmp23 = msg.sender;\n691-expression_statement-108-108", method="play_tmstmp23(uint startTime)", type_label=expression_statement];
700 [label="110_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"Safe mul error\");\n        return c;\n    }\n700-function_definition-111-118", method="mul(uint256 a,uint256 b)", type_label=function_definition];
717 [label="111_ if_a == 0\n717-if-112-114", method="mul(uint256 a,uint256 b)", type_label=if];
3163 [label="111_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
722 [label="112_ return 0;\n722-return-113-113", method="mul(uint256 a,uint256 b)", type_label=return];
724 [label="114_ uint256 c = a * b;\n724-new_variable-115-115", method="mul(uint256 a,uint256 b)", type_label=new_variable];
732 [label="115_ require(c / a == b, \"Safe mul error\");\n732-expression_statement-116-116", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
744 [label="116_ return c;\n744-return-117-117", method="mul(uint256 a,uint256 b)", type_label=return];
746 [label="118_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"Safe div error\");\n        uint256 c = a / b;\n        return c;\n    }\n746-function_definition-119-123", method="div(uint256 a,uint256 b)", type_label=function_definition];
763 [label="119_ require(b > 0, \"Safe div error\");\n763-expression_statement-120-120", method="div(uint256 a,uint256 b)", type_label=expression_statement];
773 [label="120_ uint256 c = a / b;\n773-new_variable-121-121", method="div(uint256 a,uint256 b)", type_label=new_variable];
781 [label="121_ return c;\n781-return-122-122", method="div(uint256 a,uint256 b)", type_label=return];
783 [label="123_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"Safe sub error\");\n        uint256 c = a - b;\n        return c;\n    }\n783-function_definition-124-128", method="sub(uint256 a,uint256 b)", type_label=function_definition];
800 [label="124_ require(b <= a, \"Safe sub error\");\n800-expression_statement-125-125", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
810 [label="125_ uint256 c = a - b;\n810-new_variable-126-126", method="sub(uint256 a,uint256 b)", type_label=new_variable];
818 [label="126_ return c;\n818-return-127-127", method="sub(uint256 a,uint256 b)", type_label=return];
820 [label="128_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"Safe add error\");\n        return c;\n    }\n820-function_definition-129-133", method="add(uint256 a,uint256 b)", type_label=function_definition];
837 [label="129_ uint256 c = a + b;\n837-new_variable-130-130", method="add(uint256 a,uint256 b)", type_label=new_variable];
845 [label="130_ require(c >= a, \"Safe add error\");\n845-expression_statement-131-131", method="add(uint256 a,uint256 b)", type_label=expression_statement];
855 [label="131_ return c;\n855-return-132-132", method="add(uint256 a,uint256 b)", type_label=return];
857 [label="133_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"Safe mod error\");\n        return a % b;\n    }\n857-function_definition-134-137", method="mod(uint256 a,uint256 b)", type_label=function_definition];
874 [label="134_ require(b != 0, \"Safe mod error\");\n874-expression_statement-135-135", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
884 [label="135_ return a % b;\n884-return-136-136", method="mod(uint256 a,uint256 b)", type_label=return];
902 [label="140_ address winner_tmstmp10;\n902-new_variable-141-141", method="", type_label=new_variable];
906 [label="141_ function play_tmstmp10(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp10 = msg.sender;}}\n906-function_definition-142-144", method="play_tmstmp10(uint startTime)", type_label=function_definition];
914 [label="142_ if_startTime + (5 * 1 days) == block.timestamp\n914-if-143-144", method="play_tmstmp10(uint startTime)", type_label=if];
3360 [label="142_ end_if", method="play_tmstmp10(uint startTime)", type_label=end_if];
927 [label="143_ winner_tmstmp10 = msg.sender;\n927-expression_statement-144-144", method="play_tmstmp10(uint startTime)", type_label=expression_statement];
933 [label="144_ uint public minimumQuorum;\n933-new_variable-145-145", method="", type_label=new_variable];
938 [label="145_ address winner_tmstmp22;\n938-new_variable-146-146", method="", type_label=new_variable];
942 [label="146_ function play_tmstmp22(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp22 = msg.sender;}}\n942-function_definition-147-149", method="play_tmstmp22(uint startTime)", type_label=function_definition];
950 [label="147_ if_startTime + (5 * 1 days) == block.timestamp\n950-if-148-149", method="play_tmstmp22(uint startTime)", type_label=if];
3396 [label="147_ end_if", method="play_tmstmp22(uint startTime)", type_label=end_if];
963 [label="148_ winner_tmstmp22 = msg.sender;\n963-expression_statement-149-149", method="play_tmstmp22(uint startTime)", type_label=expression_statement];
969 [label="149_ uint public minimumTokensToVote;\n969-new_variable-150-150", method="", type_label=new_variable];
974 [label="150_ function bug_tmstmp12 () public payable {\n	uint pastBlockTime_tmstmp12;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp12);  \n        pastBlockTime_tmstmp12 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n974-function_definition-151-159", method="bug_tmstmp12()", type_label=function_definition];
979 [label="151_ uint pastBlockTime_tmstmp12;\n979-new_variable-152-152", method="bug_tmstmp12()", type_label=new_variable];
984 [label="152_ require(msg.value == 10 ether);\n984-expression_statement-153-153", method="bug_tmstmp12()", type_label=expression_statement];
994 [label="153_ require(now != pastBlockTime_tmstmp12);\n994-expression_statement-154-154", method="bug_tmstmp12()", type_label=expression_statement];
1001 [label="154_ pastBlockTime_tmstmp12 = now;\n1001-expression_statement-155-155", method="bug_tmstmp12()", type_label=expression_statement];
1005 [label="155_ if_now % 15 == 0\n1005-if-156-158", method="bug_tmstmp12()", type_label=if];
3451 [label="155_ end_if", method="bug_tmstmp12()", type_label=end_if];
1012 [label="156_ msg.sender.transfer(address(this).balance);\n1012-expression_statement-157-157", method="bug_tmstmp12()", type_label=expression_statement];
1025 [label="159_ uint public debatingPeriodInMinutes;\n1025-new_variable-160-160", method="", type_label=new_variable];
1030 [label="160_ address winner_tmstmp11;\n1030-new_variable-161-161", method="", type_label=new_variable];
1034 [label="161_ function play_tmstmp11(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp11 = msg.sender;}}\n1034-function_definition-162-165", method="play_tmstmp11(uint startTime)", type_label=function_definition];
1042 [label="162_ uint _vtime = block.timestamp;\n1042-new_variable-163-163", method="play_tmstmp11(uint startTime)", type_label=new_variable];
1050 [label="163_ if_startTime + (5 * 1 days) == _vtime\n1050-if-164-165", method="play_tmstmp11(uint startTime)", type_label=if];
3496 [label="163_ end_if", method="play_tmstmp11(uint startTime)", type_label=end_if];
1061 [label="164_ winner_tmstmp11 = msg.sender;\n1061-expression_statement-165-165", method="play_tmstmp11(uint startTime)", type_label=expression_statement];
1067 [label="165_ Proposal[] public proposals;\n1067-new_variable-166-166", method="", type_label=new_variable];
1074 [label="166_ function bug_tmstmp1() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1074-function_definition-167-169", method="bug_tmstmp1()", type_label=function_definition];
1083 [label="167_ return block.timestamp >= 1546300800;\n1083-return-168-168", method="bug_tmstmp1()", type_label=return];
1089 [label="169_ uint public numProposals;\n1089-new_variable-170-170", method="", type_label=new_variable];
1094 [label="170_ address winner_tmstmp2;\n1094-new_variable-171-171", method="", type_label=new_variable];
1098 [label="171_ function play_tmstmp2(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp2 = msg.sender;}}\n1098-function_definition-172-174", method="play_tmstmp2(uint startTime)", type_label=function_definition];
1106 [label="172_ if_startTime + (5 * 1 days) == block.timestamp\n1106-if-173-174", method="play_tmstmp2(uint startTime)", type_label=if];
3552 [label="172_ end_if", method="play_tmstmp2(uint startTime)", type_label=end_if];
1119 [label="173_ winner_tmstmp2 = msg.sender;\n1119-expression_statement-174-174", method="play_tmstmp2(uint startTime)", type_label=expression_statement];
1125 [label="174_ Token public tokenAddress;\n1125-new_variable-175-175", method="", type_label=new_variable];
1131 [label="175_ function bug_tmstmp17() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1131-function_definition-176-178", method="bug_tmstmp17()", type_label=function_definition];
1140 [label="176_ return block.timestamp >= 1546300800;\n1140-return-177-177", method="bug_tmstmp17()", type_label=return];
1146 [label="178_ address chairmanAddress;\n1146-new_variable-179-179", method="", type_label=new_variable];
1150 [label="179_ function bug_tmstmp37() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1150-function_definition-180-182", method="bug_tmstmp37()", type_label=function_definition];
1159 [label="180_ return block.timestamp >= 1546300800;\n1159-return-181-181", method="bug_tmstmp37()", type_label=return];
1165 [label="182_ bool public initialized = false;\n1165-new_variable-183-183", method="", type_label=new_variable];
1172 [label="183_ function bug_tmstmp13() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n1172-function_definition-184-186", method="bug_tmstmp13()", type_label=function_definition];
1181 [label="184_ return block.timestamp >= 1546300800;\n1181-return-185-185", method="bug_tmstmp13()", type_label=return];
1189 [label="187_ uint256 bugv_tmstmp5 = block.timestamp;\n1189-new_variable-188-188", method="", type_label=new_variable];
1214 [label="189_ uint256 bugv_tmstmp1 = block.timestamp;\n1214-new_variable-190-190", method="", type_label=new_variable];
1235 [label="191_ uint256 bugv_tmstmp2 = block.timestamp;\n1235-new_variable-192-192", method="", type_label=new_variable];
1260 [label="193_ uint256 bugv_tmstmp3 = block.timestamp;\n1260-new_variable-194-194", method="", type_label=new_variable];
1289 [label="195_ uint256 bugv_tmstmp4 = block.timestamp;\n1289-new_variable-196-196", method="", type_label=new_variable];
1310 [label="197_ struct Proposal {\n        address recipient;\n        uint amount;\n        string description;\n        bool signedByChairman;\n        uint minExecutionDate;\n        bool executed;\n        bool proposalPassed;\n        uint numberOfVotes;\n        bytes32 proposalHash;\n        Vote[] votes;\n        mapping (address => bool) voted;\n    }\n1310-expression_statement-198-210", method="Proposal()", type_label=expression_statement];
1360 [label="210_ struct Vote {\n        bool inSupport;\n        address voter;\n    }\n1360-expression_statement-211-214", method="Vote()", type_label=expression_statement];
1370 [label="214_ modifier onlyTokenholders {\n        require(tokenAddress.actualBalanceOf(msg.sender) > minimumTokensToVote);\n        _;\n    }\n1370-expression_statement-215-218", method="", type_label=expression_statement];
1373 [label="215_ require(tokenAddress.actualBalanceOf(msg.sender) > minimumTokensToVote);\n1373-expression_statement-216-216", method="", type_label=expression_statement];
1387 [label="216_ _;\n1387-expression_statement-217-217", method="", type_label=expression_statement];
1389 [label="218_ modifier onlyChairman {\n        require(msg.sender == chairmanAddress);\n        _;\n    }\n1389-expression_statement-219-222", method="", type_label=expression_statement];
1392 [label="219_ require(msg.sender == chairmanAddress);\n1392-expression_statement-220-220", method="", type_label=expression_statement];
1401 [label="220_ _;\n1401-expression_statement-221-221", method="", type_label=expression_statement];
1405 [label="224_ address winner_tmstmp14;\n1405-new_variable-225-225", method="", type_label=new_variable];
1409 [label="225_ function play_tmstmp14(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp14 = msg.sender;}}\n1409-function_definition-226-228", method="play_tmstmp14(uint startTime)", type_label=function_definition];
1417 [label="226_ if_startTime + (5 * 1 days) == block.timestamp\n1417-if-227-228", method="play_tmstmp14(uint startTime)", type_label=if];
3863 [label="226_ end_if", method="play_tmstmp14(uint startTime)", type_label=end_if];
1430 [label="227_ winner_tmstmp14 = msg.sender;\n1430-expression_statement-228-228", method="play_tmstmp14(uint startTime)", type_label=expression_statement];
1436 [label="228_ function init(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {\n        require(!initialized);\n        initialized = true;\n        changeVotingRules(_tokenAddress, _chairmanAddress, _minimumTokensToVote, _minimumPercentToPassAVote, _minutesForDebate);\n        emit Initialized();\n    }\n1436-function_definition-229-234", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=function_definition];
1459 [label="228_ onlyOwner\n1459-expression_statement-229-229", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1463 [label="229_ require(!initialized);\n1463-expression_statement-230-230", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1469 [label="230_ initialized = true;\n1469-expression_statement-231-231", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1474 [label="231_ changeVotingRules(_tokenAddress, _chairmanAddress, _minimumTokensToVote, _minimumPercentToPassAVote, _minutesForDebate);\n1474-expression_statement-232-232", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1489 [label="234_ address winner_tmstmp30;\n1489-new_variable-235-235", method="", type_label=new_variable];
1493 [label="235_ function play_tmstmp30(uint startTime) public {\n	if (startTime + (5 * 1 days) == block.timestamp){\n		winner_tmstmp30 = msg.sender;}}\n1493-function_definition-236-238", method="play_tmstmp30(uint startTime)", type_label=function_definition];
1501 [label="236_ if_startTime + (5 * 1 days) == block.timestamp\n1501-if-237-238", method="play_tmstmp30(uint startTime)", type_label=if];
3947 [label="236_ end_if", method="play_tmstmp30(uint startTime)", type_label=end_if];
1514 [label="237_ winner_tmstmp30 = msg.sender;\n1514-expression_statement-238-238", method="play_tmstmp30(uint startTime)", type_label=expression_statement];
1520 [label="238_ function changeVotingRules(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {\n        require(_chairmanAddress != address(0));\n        require(_minimumPercentToPassAVote <= 51);\n        tokenAddress = Token(_tokenAddress);\n        chairmanAddress = _chairmanAddress;\n        if (_minimumTokensToVote == 0 ) _minimumTokensToVote = 1;\n        minimumTokensToVote = _minimumTokensToVote;\n        if (_minimumPercentToPassAVote == 0 ) _minimumPercentToPassAVote = 51;\n        minimumQuorum = _minimumPercentToPassAVote;\n        debatingPeriodInMinutes = _minutesForDebate;\n        emit ChangeOfRules(_minimumTokensToVote, minimumQuorum, debatingPeriodInMinutes, address(tokenAddress), chairmanAddress);\n    }\n1520-function_definition-239-250", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=function_definition];
1543 [label="238_ onlyOwner\n1543-expression_statement-239-239", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1547 [label="239_ require(_chairmanAddress != address(0));\n1547-expression_statement-240-240", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1556 [label="240_ require(_minimumPercentToPassAVote <= 51);\n1556-expression_statement-241-241", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1563 [label="241_ tokenAddress = Token(_tokenAddress);\n1563-expression_statement-242-242", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1570 [label="242_ chairmanAddress = _chairmanAddress;\n1570-expression_statement-243-243", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1574 [label="243_ if__minimumTokensToVote == 0\n1574-if-244-244", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=if];
4020 [label="243_ end_if", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=end_if];
1578 [label="243_ _minimumTokensToVote = 1;\n1578-expression_statement-244-244", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1582 [label="244_ minimumTokensToVote = _minimumTokensToVote;\n1582-expression_statement-245-245", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1586 [label="245_ if__minimumPercentToPassAVote == 0\n1586-if-246-246", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=if];
4032 [label="245_ end_if", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=end_if];
1590 [label="245_ _minimumPercentToPassAVote = 51;\n1590-expression_statement-246-246", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1594 [label="246_ minimumQuorum = _minimumPercentToPassAVote;\n1594-expression_statement-247-247", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1598 [label="247_ debatingPeriodInMinutes = _minutesForDebate;\n1598-expression_statement-248-248", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1616 [label="250_ function bug_tmstmp8 () public payable {\n	uint pastBlockTime_tmstmp8;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp8);  \n        pastBlockTime_tmstmp8 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1616-function_definition-251-259", method="bug_tmstmp8()", type_label=function_definition];
1621 [label="251_ uint pastBlockTime_tmstmp8;\n1621-new_variable-252-252", method="bug_tmstmp8()", type_label=new_variable];
1626 [label="252_ require(msg.value == 10 ether);\n1626-expression_statement-253-253", method="bug_tmstmp8()", type_label=expression_statement];
1636 [label="253_ require(now != pastBlockTime_tmstmp8);\n1636-expression_statement-254-254", method="bug_tmstmp8()", type_label=expression_statement];
1643 [label="254_ pastBlockTime_tmstmp8 = now;\n1643-expression_statement-255-255", method="bug_tmstmp8()", type_label=expression_statement];
1647 [label="255_ if_now % 15 == 0\n1647-if-256-258", method="bug_tmstmp8()", type_label=if];
4093 [label="255_ end_if", method="bug_tmstmp8()", type_label=end_if];
1654 [label="256_ msg.sender.transfer(address(this).balance);\n1654-expression_statement-257-257", method="bug_tmstmp8()", type_label=expression_statement];
1667 [label="259_ function newProposal(\n        address destination,\n        uint weiAmount,\n        string memory transactionDescription,\n        bytes memory transactionBytecode\n    )\n        onlyTokenholders public\n        returns (uint proposalID)\n    {\n        proposalID = proposals.length++;\n        Proposal storage p = proposals[proposalID];\n        p.recipient = destination;\n        p.signedByChairman = false;\n        p.amount = weiAmount;\n        p.description = transactionDescription;\n        p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n        p.minExecutionDate = now + debatingPeriodInMinutes * 1 minutes;\n        p.executed = false;\n        p.proposalPassed = false;\n        p.numberOfVotes = 0;\n        emit ProposalAdded(proposalID, destination, weiAmount, transactionDescription);\n        numProposals = proposalID+1;\n        return proposalID;\n    }\n1667-function_definition-260-283", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=function_definition];
1685 [label="265_ onlyTokenholders\n1685-expression_statement-266-266", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1694 [label="268_ proposalID = proposals.length++;\n1694-expression_statement-269-269", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1697 [label="268_ proposals.length++\n1697-expression_statement-269-269", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1701 [label="269_ Proposal storage p = proposals[proposalID];\n1701-new_variable-270-270", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=new_variable];
1710 [label="270_ p.recipient = destination;\n1710-expression_statement-271-271", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1716 [label="271_ p.signedByChairman = false;\n1716-expression_statement-272-272", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1723 [label="272_ p.amount = weiAmount;\n1723-expression_statement-273-273", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1729 [label="273_ p.description = transactionDescription;\n1729-expression_statement-274-274", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1735 [label="274_ p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n1735-expression_statement-275-275", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1753 [label="275_ p.minExecutionDate = now + debatingPeriodInMinutes * 1 minutes;\n1753-expression_statement-276-276", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1764 [label="276_ p.executed = false;\n1764-expression_statement-277-277", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1771 [label="277_ p.proposalPassed = false;\n1771-expression_statement-278-278", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1778 [label="278_ p.numberOfVotes = 0;\n1778-expression_statement-279-279", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1794 [label="280_ numProposals = proposalID+1;\n1794-expression_statement-281-281", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1800 [label="281_ return proposalID;\n1800-return-282-282", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=return];
1802 [label="283_ address winner_tmstmp39;\n1802-new_variable-284-284", method="", type_label=new_variable];
1806 [label="284_ function play_tmstmp39(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp39 = msg.sender;}}\n1806-function_definition-285-288", method="play_tmstmp39(uint startTime)", type_label=function_definition];
1814 [label="285_ uint _vtime = block.timestamp;\n1814-new_variable-286-286", method="play_tmstmp39(uint startTime)", type_label=new_variable];
1822 [label="286_ if_startTime + (5 * 1 days) == _vtime\n1822-if-287-288", method="play_tmstmp39(uint startTime)", type_label=if];
4268 [label="286_ end_if", method="play_tmstmp39(uint startTime)", type_label=end_if];
1833 [label="287_ winner_tmstmp39 = msg.sender;\n1833-expression_statement-288-288", method="play_tmstmp39(uint startTime)", type_label=expression_statement];
1839 [label="288_ function checkProposalCode(\n        uint proposalNumber,\n        address destination,\n        uint weiAmount,\n        bytes memory transactionBytecode\n    )\n        view public\n        returns (bool codeChecksOut)\n    {\n        Proposal storage p = proposals[proposalNumber];\n        return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n    }\n1839-function_definition-289-300", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=function_definition];
1865 [label="297_ Proposal storage p = proposals[proposalNumber];\n1865-new_variable-298-298", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=new_variable];
1874 [label="298_ return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n1874-return-299-299", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=return];
1892 [label="300_ function bug_tmstmp36 () public payable {\n	uint pastBlockTime_tmstmp36;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp36);  \n        pastBlockTime_tmstmp36 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n1892-function_definition-301-309", method="bug_tmstmp36()", type_label=function_definition];
1897 [label="301_ uint pastBlockTime_tmstmp36;\n1897-new_variable-302-302", method="bug_tmstmp36()", type_label=new_variable];
1902 [label="302_ require(msg.value == 10 ether);\n1902-expression_statement-303-303", method="bug_tmstmp36()", type_label=expression_statement];
1912 [label="303_ require(now != pastBlockTime_tmstmp36);\n1912-expression_statement-304-304", method="bug_tmstmp36()", type_label=expression_statement];
1919 [label="304_ pastBlockTime_tmstmp36 = now;\n1919-expression_statement-305-305", method="bug_tmstmp36()", type_label=expression_statement];
1923 [label="305_ if_now % 15 == 0\n1923-if-306-308", method="bug_tmstmp36()", type_label=if];
4369 [label="305_ end_if", method="bug_tmstmp36()", type_label=end_if];
1930 [label="306_ msg.sender.transfer(address(this).balance);\n1930-expression_statement-307-307", method="bug_tmstmp36()", type_label=expression_statement];
1943 [label="309_ function sign(\n        uint proposalNumber,\n        bool signProposal\n    )\n        onlyTokenholders public\n        returns (uint voteID)\n    {\n        require(initialized);\n        Proposal storage p = proposals[proposalNumber];\n        require(msg.sender == chairmanAddress);\n        require(signProposal == true);\n        p.signedByChairman = signProposal;\n        emit ProposalSignedByChairman(proposalNumber,  signProposal, msg.sender);\n        return proposalNumber;\n    }\n1943-function_definition-310-324", method="sign(uint proposalNumber,bool signProposal)", type_label=function_definition];
1953 [label="313_ onlyTokenholders\n1953-expression_statement-314-314", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
1962 [label="316_ require(initialized);\n1962-expression_statement-317-317", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
1967 [label="317_ Proposal storage p = proposals[proposalNumber];\n1967-new_variable-318-318", method="sign(uint proposalNumber,bool signProposal)", type_label=new_variable];
1976 [label="318_ require(msg.sender == chairmanAddress);\n1976-expression_statement-319-319", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
1985 [label="319_ require(signProposal == true);\n1985-expression_statement-320-320", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
1993 [label="320_ p.signedByChairman = signProposal;\n1993-expression_statement-321-321", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
2009 [label="322_ return proposalNumber;\n2009-return-323-323", method="sign(uint proposalNumber,bool signProposal)", type_label=return];
2011 [label="324_ address winner_tmstmp35;\n2011-new_variable-325-325", method="", type_label=new_variable];
2015 [label="325_ function play_tmstmp35(uint startTime) public {\n	uint _vtime = block.timestamp;\n	if (startTime + (5 * 1 days) == _vtime){\n		winner_tmstmp35 = msg.sender;}}\n2015-function_definition-326-329", method="play_tmstmp35(uint startTime)", type_label=function_definition];
2023 [label="326_ uint _vtime = block.timestamp;\n2023-new_variable-327-327", method="play_tmstmp35(uint startTime)", type_label=new_variable];
2031 [label="327_ if_startTime + (5 * 1 days) == _vtime\n2031-if-328-329", method="play_tmstmp35(uint startTime)", type_label=if];
4477 [label="327_ end_if", method="play_tmstmp35(uint startTime)", type_label=end_if];
2042 [label="328_ winner_tmstmp35 = msg.sender;\n2042-expression_statement-329-329", method="play_tmstmp35(uint startTime)", type_label=expression_statement];
2048 [label="329_ function vote(\n        uint proposalNumber,\n        bool supportsProposal\n    )\n        onlyTokenholders public\n        returns (uint voteID)\n    {\n        Proposal storage p = proposals[proposalNumber];\n        require(p.voted[msg.sender] != true);\n        voteID = p.votes.length++;\n        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\n        p.voted[msg.sender] = true;\n        p.numberOfVotes = voteID +1;\n        emit Voted(proposalNumber,  supportsProposal, msg.sender);\n        return voteID;\n    }\n2048-function_definition-330-345", method="vote(uint proposalNumber,bool supportsProposal)", type_label=function_definition];
2058 [label="333_ onlyTokenholders\n2058-expression_statement-334-334", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
2067 [label="336_ Proposal storage p = proposals[proposalNumber];\n2067-new_variable-337-337", method="vote(uint proposalNumber,bool supportsProposal)", type_label=new_variable];
2076 [label="337_ require(p.voted[msg.sender] != true);\n2076-expression_statement-338-338", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
2090 [label="338_ voteID = p.votes.length++;\n2090-expression_statement-339-339", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
2093 [label="338_ p.votes.length++\n2093-expression_statement-339-339", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
2099 [label="339_ p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\n2099-expression_statement-340-340", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
2117 [label="340_ p.voted[msg.sender] = true;\n2117-expression_statement-341-341", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
2128 [label="341_ p.numberOfVotes = voteID +1;\n2128-expression_statement-342-342", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
2146 [label="343_ return voteID;\n2146-return-344-344", method="vote(uint proposalNumber,bool supportsProposal)", type_label=return];
2148 [label="345_ function bug_tmstmp40 () public payable {\n	uint pastBlockTime_tmstmp40;  \n	require(msg.value == 10 ether);  \n        require(now != pastBlockTime_tmstmp40);  \n        pastBlockTime_tmstmp40 = now;        \n        if(now % 15 == 0) {  \n            msg.sender.transfer(address(this).balance);\n        }\n    }\n2148-function_definition-346-354", method="bug_tmstmp40()", type_label=function_definition];
2153 [label="346_ uint pastBlockTime_tmstmp40;\n2153-new_variable-347-347", method="bug_tmstmp40()", type_label=new_variable];
2158 [label="347_ require(msg.value == 10 ether);\n2158-expression_statement-348-348", method="bug_tmstmp40()", type_label=expression_statement];
2168 [label="348_ require(now != pastBlockTime_tmstmp40);\n2168-expression_statement-349-349", method="bug_tmstmp40()", type_label=expression_statement];
2175 [label="349_ pastBlockTime_tmstmp40 = now;\n2175-expression_statement-350-350", method="bug_tmstmp40()", type_label=expression_statement];
2179 [label="350_ if_now % 15 == 0\n2179-if-351-353", method="bug_tmstmp40()", type_label=if];
4625 [label="350_ end_if", method="bug_tmstmp40()", type_label=end_if];
2186 [label="351_ msg.sender.transfer(address(this).balance);\n2186-expression_statement-352-352", method="bug_tmstmp40()", type_label=expression_statement];
2199 [label="354_ function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public {\n        Proposal storage p = proposals[proposalNumber];\n        require(initialized);\n        require(now > p.minExecutionDate                                              \n            && !p.executed                                                           \n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)));  \n        uint quorum = 0;\n        uint yea = 0;\n        uint nay = 0;\n        for (uint i = 0; i <  p.votes.length; ++i) {\n            Vote storage v = p.votes[i];\n            uint voteWeight = tokenAddress.actualBalanceOf(v.voter);\n            quorum += voteWeight;\n            if (v.inSupport) {\n                yea += voteWeight;\n            } else {\n                nay += voteWeight;\n            }\n        }\n        Token t = Token(tokenAddress);\n        require(quorum >= t.totalSupply().mul(minimumQuorum).div(100));  \n        if (yea > nay ) {\n            p.executed = true;\n            (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);\n            require(success);\n            p.proposalPassed = true;\n        } else {\n            p.proposalPassed = false;\n        }\n        emit ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed);\n    }\n2199-function_definition-355-385", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=function_definition];
2211 [label="355_ Proposal storage p = proposals[proposalNumber];\n2211-new_variable-356-356", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2220 [label="356_ require(initialized);\n2220-expression_statement-357-357", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2225 [label="357_ require(now > p.minExecutionDate                                              \n            && !p.executed                                                           \n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)));\n2225-expression_statement-358-360", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2261 [label="360_ uint quorum = 0;\n2261-new_variable-361-361", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2267 [label="361_ uint yea = 0;\n2267-new_variable-362-362", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2273 [label="362_ uint nay = 0;\n2273-new_variable-363-363", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2279 [label="363_ for(i <  p.votes.length;;++i)\n2279-for-364-373", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=for];
4725 [label="363_ end_loop", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_loop];
2294 [label="363_ ++i\n2294-expression_statement-364-364", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2297 [label="364_ Vote storage v = p.votes[i];\n2297-new_variable-365-365", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2308 [label="365_ uint voteWeight = tokenAddress.actualBalanceOf(v.voter);\n2308-new_variable-366-366", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2321 [label="366_ quorum += voteWeight;\n2321-expression_statement-367-367", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2325 [label="367_ if\n2325-if-368-372", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=if];
4771 [label="367_ end_if", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_if];
2330 [label="368_ yea += voteWeight;\n2330-expression_statement-369-369", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2335 [label="370_ nay += voteWeight;\n2335-expression_statement-371-371", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2339 [label="373_ Token t = Token(tokenAddress);\n2339-new_variable-374-374", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2349 [label="374_ require(quorum >= t.totalSupply().mul(minimumQuorum).div(100));\n2349-expression_statement-375-375", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2369 [label="375_ if_yea > nay\n2369-if-376-383", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=if];
4815 [label="375_ end_if", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_if];
2374 [label="376_ p.executed = true;\n2374-expression_statement-377-377", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2381 [label="377_ (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);\n2381-new_variable-378-378", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
2402 [label="378_ require(success);\n2402-expression_statement-379-379", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2407 [label="379_ p.proposalPassed = true;\n2407-expression_statement-380-380", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2415 [label="381_ p.proposalPassed = false;\n2415-expression_statement-382-382", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
2436 [label="385_ function bug_tmstmp33() view public returns (bool) {\n    return block.timestamp >= 1546300800;\n  }\n2436-function_definition-386-388", method="bug_tmstmp33()", type_label=function_definition];
2445 [label="386_ return block.timestamp >= 1546300800;\n2445-return-387-387", method="bug_tmstmp33()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
161;
208;
348;
697;
2422;
13 -> 22  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
22 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
45 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 61  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
61 -> 72  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
61 -> 2507  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2507 -> 78  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 2507  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
81 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
92 -> 102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
128 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 155  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
144 -> 2590  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2590 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 2590  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
175 -> 183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
183 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 202  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
191 -> 2637  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2637 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 2637  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
226 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
315 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 342  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
331 -> 2777  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2777 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 2777  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
363 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 384  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
371 -> 2817  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2817 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 2817  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
403 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
423 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 441  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
434 -> 2880  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2880 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 2880  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
474 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 512  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
505 -> 2951  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2951 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 2951  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
532 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 553  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
540 -> 2986  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2986 -> 559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 2986  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
566 -> 571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
576 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 604  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
597 -> 3043  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3043 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 3043  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
624 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 651  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
640 -> 3086  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3086 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 3086  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
664 -> 672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
672 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 691  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
680 -> 3126  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3126 -> 697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
691 -> 3126  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
700 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 722  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
717 -> 3163  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3163 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 3163  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
722 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
724 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
744 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
746 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
783 -> 800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
800 -> 810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
810 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
818 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
820 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
837 -> 845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
857 -> 874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
906 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 927  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
914 -> 3360  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3360 -> 933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 3360  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
933 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
950 -> 963  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
950 -> 3396  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3396 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 3396  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
974 -> 979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 1001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1001 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 1012  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1005 -> 3451  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3451 -> 1025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 3451  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1025 -> 1030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1042 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 1061  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1050 -> 3496  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3496 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 3496  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1074 -> 1083  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1083 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1089 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1119  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1106 -> 3552  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3552 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1119 -> 3552  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1131 -> 1140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1140 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1150 -> 1159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1159 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1172 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1310 -> 1360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1360 -> 1370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1370 -> 1389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1373 -> 1387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1409 -> 1417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1417 -> 1430  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1417 -> 3863  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3863 -> 1436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1430 -> 3863  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1436 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1463 -> 1469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1469 -> 1474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1493 -> 1501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1501 -> 1514  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1501 -> 3947  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3947 -> 1520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1514 -> 3947  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1520 -> 1547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1547 -> 1556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1556 -> 1563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1563 -> 1570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1570 -> 1574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1574 -> 1578  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1574 -> 4020  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4020 -> 1582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1578 -> 4020  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1582 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1586 -> 1590  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1586 -> 4032  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4032 -> 1594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1590 -> 4032  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1594 -> 1598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1616 -> 1621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1621 -> 1626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1626 -> 1636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1636 -> 1643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1643 -> 1647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1647 -> 1654  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1647 -> 4093  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4093 -> 1667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1654 -> 4093  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1667 -> 1694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1694 -> 1701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1701 -> 1710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1710 -> 1716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1716 -> 1723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1723 -> 1729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1729 -> 1735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1735 -> 1753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1753 -> 1764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1764 -> 1771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1771 -> 1778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1794 -> 1800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1800 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1806 -> 1814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1814 -> 1822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1822 -> 1833  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1822 -> 4268  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4268 -> 1839  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1833 -> 4268  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1839 -> 1865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1865 -> 1874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1874 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1892 -> 1897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1897 -> 1902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1902 -> 1912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1912 -> 1919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1919 -> 1923  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1923 -> 1930  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1923 -> 4369  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4369 -> 1943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1930 -> 4369  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1943 -> 1962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1962 -> 1967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1967 -> 1976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1976 -> 1985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1985 -> 1993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2009 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2015 -> 2023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2023 -> 2031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2031 -> 2042  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2031 -> 4477  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4477 -> 2048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2042 -> 4477  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2048 -> 2067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2067 -> 2076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2076 -> 2090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2090 -> 2099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2099 -> 2117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2117 -> 2128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2146 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2148 -> 2153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2153 -> 2158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2158 -> 2168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2168 -> 2175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2175 -> 2179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2179 -> 2186  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2179 -> 4625  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4625 -> 2199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2186 -> 4625  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2199 -> 2211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2211 -> 2220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2220 -> 2225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2225 -> 2261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2261 -> 2267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2267 -> 2273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2273 -> 2279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2279 -> 2297  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2279 -> 4725  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4725 -> 2339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2294 -> 2279  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2297 -> 2308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2308 -> 2321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2321 -> 2325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2325 -> 2330  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2325 -> 2335  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4771 -> 2294  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4771 -> 2294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
2330 -> 4771  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2335 -> 4771  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2339 -> 2349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2349 -> 2369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2369 -> 2374  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2369 -> 2415  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4815 -> 2422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2374 -> 2381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2381 -> 2402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2402 -> 2407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2407 -> 4815  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2415 -> 4815  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2436 -> 2445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2445 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
