digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n50-function_definition-8-12", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ require(b <= a, \"SafeMath: subtraction overflow\");\n67-expression_statement-9-9", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
77 [label="9_ uint256 c = a - b;\n77-new_variable-10-10", method="sub(uint256 a,uint256 b)", type_label=new_variable];
85 [label="10_ return c;\n85-return-11-11", method="sub(uint256 a,uint256 b)", type_label=return];
87 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n87-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
104 [label="13_ if_a == 0\n104-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
2571 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
109 [label="14_ return 0;\n109-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
111 [label="16_ uint256 c = a * b;\n111-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
119 [label="17_ require(c / a == b, \"SafeMath: multiplication overflow\");\n119-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
131 [label="18_ return c;\n131-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
133 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n133-function_definition-21-25", method="div(uint256 a,uint256 b)", type_label=function_definition];
150 [label="21_ require(b > 0, \"SafeMath: division by zero\");\n150-expression_statement-22-22", method="div(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="22_ uint256 c = a / b;\n160-new_variable-23-23", method="div(uint256 a,uint256 b)", type_label=new_variable];
168 [label="23_ return c;\n168-return-24-24", method="div(uint256 a,uint256 b)", type_label=return];
170 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n170-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
187 [label="26_ require(b != 0, \"SafeMath: modulo by zero\");\n187-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
197 [label="27_ return a % b;\n197-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
204 [label="31_ address public owner;\n204-new_variable-32-32", method="", type_label=new_variable];
209 [label="32_ address private newOwner;\n209-new_variable-33-33", method="", type_label=new_variable];
214 [label="33_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n214-function_definition-34-35", method="bug_unchk_send23()", type_label=function_definition];
219 [label="34_ msg.sender.transfer(1 ether);\n219-expression_statement-35-35", method="bug_unchk_send23()", type_label=expression_statement];
245 [label="37_ owner = msg.sender;\n245-expression_statement-38-38", method="", type_label=expression_statement];
251 [label="39_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n251-function_definition-40-41", method="bug_unchk_send15()", type_label=function_definition];
256 [label="40_ msg.sender.transfer(1 ether);\n256-expression_statement-41-41", method="bug_unchk_send15()", type_label=expression_statement];
266 [label="41_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n266-expression_statement-42-45", method="", type_label=expression_statement];
269 [label="42_ require(msg.sender == owner);\n269-expression_statement-43-43", method="", type_label=expression_statement];
278 [label="43_ _;\n278-expression_statement-44-44", method="", type_label=expression_statement];
280 [label="45_ function onlyOwnerTransferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n280-function_definition-46-48", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=function_definition];
287 [label="45_ onlyOwner\n287-expression_statement-46-46", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=expression_statement];
290 [label="46_ newOwner = _newOwner;\n290-expression_statement-47-47", method="onlyOwnerTransferOwnership(address _newOwner)", type_label=expression_statement];
294 [label="48_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n294-function_definition-49-50", method="bug_unchk_send28()", type_label=function_definition];
299 [label="49_ msg.sender.transfer(1 ether);\n299-expression_statement-50-50", method="bug_unchk_send28()", type_label=expression_statement];
309 [label="50_ function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(now, owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n309-function_definition-51-56", method="acceptOwnership()", type_label=function_definition];
313 [label="51_ require(msg.sender == newOwner);\n313-expression_statement-52-52", method="acceptOwnership()", type_label=expression_statement];
330 [label="53_ owner = newOwner;\n330-expression_statement-54-54", method="acceptOwnership()", type_label=expression_statement];
334 [label="54_ newOwner = address(0);\n334-expression_statement-55-55", method="acceptOwnership()", type_label=expression_statement];
340 [label="56_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n340-function_definition-57-58", method="bug_unchk_send21()", type_label=function_definition];
345 [label="57_ msg.sender.transfer(1 ether);\n345-expression_statement-58-58", method="bug_unchk_send21()", type_label=expression_statement];
358 [label="61_ function transfer(address _to, uint256 _amount) external returns (bool);\n358-function_definition-62-62", method="transfer(address _to,uint256 _amount)", type_label=function_definition];
373 [label="62_ function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\n373-function_definition-63-63", method="transferFrom(address _from,address _to,uint256 _amount)", type_label=function_definition];
403 [label="66_ function bug_unchk_send18() payable public{\n      msg.sender.transfer(1 ether);}\n403-function_definition-67-68", method="bug_unchk_send18()", type_label=function_definition];
408 [label="67_ msg.sender.transfer(1 ether);\n408-expression_statement-68-68", method="bug_unchk_send18()", type_label=expression_statement];
418 [label="68_ bool public safeGuard;\n418-new_variable-69-69", method="", type_label=new_variable];
423 [label="69_ function bug_unchk_send29() payable public{\n      msg.sender.transfer(1 ether);}\n423-function_definition-70-71", method="bug_unchk_send29()", type_label=function_definition];
428 [label="70_ msg.sender.transfer(1 ether);\n428-expression_statement-71-71", method="bug_unchk_send29()", type_label=expression_statement];
438 [label="71_ address public feeAccount;\n438-new_variable-72-72", method="", type_label=new_variable];
443 [label="72_ function bug_unchk_send6() payable public{\n      msg.sender.transfer(1 ether);}\n443-function_definition-73-74", method="bug_unchk_send6()", type_label=function_definition];
448 [label="73_ msg.sender.transfer(1 ether);\n448-expression_statement-74-74", method="bug_unchk_send6()", type_label=expression_statement];
458 [label="74_ uint public tradingFee = 50;\n458-new_variable-75-75", method="", type_label=new_variable];
464 [label="75_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n464-function_definition-76-77", method="bug_unchk_send16()", type_label=function_definition];
469 [label="76_ msg.sender.transfer(1 ether);\n469-expression_statement-77-77", method="bug_unchk_send16()", type_label=expression_statement];
479 [label="77_ mapping (address => mapping (address => uint)) public tokens;\n479-new_variable-78-78", method="", type_label=new_variable];
488 [label="78_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n488-function_definition-79-80", method="bug_unchk_send24()", type_label=function_definition];
493 [label="79_ msg.sender.transfer(1 ether);\n493-expression_statement-80-80", method="bug_unchk_send24()", type_label=expression_statement];
503 [label="80_ mapping (address => mapping (bytes32 => bool)) public orders;\n503-new_variable-81-81", method="", type_label=new_variable];
512 [label="81_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n512-function_definition-82-83", method="bug_unchk_send5()", type_label=function_definition];
517 [label="82_ msg.sender.transfer(1 ether);\n517-expression_statement-83-83", method="bug_unchk_send5()", type_label=expression_statement];
527 [label="83_ mapping (address => mapping (bytes32 => uint)) public orderFills;\n527-new_variable-84-84", method="", type_label=new_variable];
536 [label="84_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n536-function_definition-85-86", method="bug_unchk_send14()", type_label=function_definition];
541 [label="85_ msg.sender.transfer(1 ether);\n541-expression_statement-86-86", method="bug_unchk_send14()", type_label=expression_statement];
585 [label="87_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n585-function_definition-88-89", method="bug_unchk_send30()", type_label=function_definition];
590 [label="88_ msg.sender.transfer(1 ether);\n590-expression_statement-89-89", method="bug_unchk_send30()", type_label=expression_statement];
646 [label="90_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n646-function_definition-91-92", method="bug_unchk_send8()", type_label=function_definition];
651 [label="91_ msg.sender.transfer(1 ether);\n651-expression_statement-92-92", method="bug_unchk_send8()", type_label=expression_statement];
691 [label="93_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n691-function_definition-94-95", method="bug_unchk_send27()", type_label=function_definition];
696 [label="94_ msg.sender.transfer(1 ether);\n696-expression_statement-95-95", method="bug_unchk_send27()", type_label=expression_statement];
728 [label="96_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n728-function_definition-97-98", method="bug_unchk_send31()", type_label=function_definition];
733 [label="97_ msg.sender.transfer(1 ether);\n733-expression_statement-98-98", method="bug_unchk_send31()", type_label=expression_statement];
765 [label="99_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n765-function_definition-100-101", method="bug_unchk_send13()", type_label=function_definition];
770 [label="100_ msg.sender.transfer(1 ether);\n770-expression_statement-101-101", method="bug_unchk_send13()", type_label=expression_statement];
792 [label="103_ feeAccount = msg.sender;\n792-expression_statement-104-104", method="", type_label=expression_statement];
798 [label="105_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n798-function_definition-106-107", method="bug_unchk_send10()", type_label=function_definition];
803 [label="106_ msg.sender.transfer(1 ether);\n803-expression_statement-107-107", method="bug_unchk_send10()", type_label=expression_statement];
813 [label="107_ function changeSafeguardStatus() onlyOwner public\n    {\n        if (safeGuard == false)\n        {\n            safeGuard = true;\n        }\n        else\n        {\n            safeGuard = false;    \n        }\n    }\n813-function_definition-108-118", method="changeSafeguardStatus()", type_label=function_definition];
815 [label="107_ onlyOwner\n815-expression_statement-108-108", method="changeSafeguardStatus()", type_label=expression_statement];
819 [label="109_ if_safeGuard == false\n819-if-110-117", method="changeSafeguardStatus()", type_label=if];
3286 [label="109_ end_if", method="changeSafeguardStatus()", type_label=end_if];
825 [label="111_ safeGuard = true;\n825-expression_statement-112-112", method="changeSafeguardStatus()", type_label=expression_statement];
831 [label="115_ safeGuard = false;\n831-expression_statement-116-116", method="changeSafeguardStatus()", type_label=expression_statement];
836 [label="118_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n836-function_definition-119-120", method="bug_unchk_send22()", type_label=function_definition];
841 [label="119_ msg.sender.transfer(1 ether);\n841-expression_statement-120-120", method="bug_unchk_send22()", type_label=expression_statement];
851 [label="120_ function calculatePercentage(uint256 PercentOf, uint256 percentTo ) internal pure returns (uint256) \n    {\n        uint256 factor = 10000;\n        require(percentTo <= factor);\n        uint256 c = PercentOf.mul(percentTo).div(factor);\n        return c;\n    }\n851-function_definition-121-127", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=function_definition];
868 [label="122_ uint256 factor = 10000;\n868-new_variable-123-123", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=new_variable];
874 [label="123_ require(percentTo <= factor);\n874-expression_statement-124-124", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=expression_statement];
881 [label="124_ uint256 c = PercentOf.mul(percentTo).div(factor);\n881-new_variable-125-125", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=new_variable];
897 [label="125_ return c;\n897-return-126-126", method="calculatePercentage(uint256 PercentOf,uint256 percentTo)", type_label=return];
899 [label="127_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n899-function_definition-128-129", method="bug_unchk_send12()", type_label=function_definition];
904 [label="128_ msg.sender.transfer(1 ether);\n904-expression_statement-129-129", method="bug_unchk_send12()", type_label=expression_statement];
914 [label="129_ function changeFeeAccount(address feeAccount_) public onlyOwner {\n    feeAccount = feeAccount_;\n  }\n914-function_definition-130-132", method="changeFeeAccount(address feeAccount_)", type_label=function_definition];
921 [label="129_ onlyOwner\n921-expression_statement-130-130", method="changeFeeAccount(address feeAccount_)", type_label=expression_statement];
924 [label="130_ feeAccount = feeAccount_;\n924-expression_statement-131-131", method="changeFeeAccount(address feeAccount_)", type_label=expression_statement];
928 [label="132_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n928-function_definition-133-134", method="bug_unchk_send11()", type_label=function_definition];
933 [label="133_ msg.sender.transfer(1 ether);\n933-expression_statement-134-134", method="bug_unchk_send11()", type_label=expression_statement];
943 [label="134_ function changetradingFee(uint tradingFee_) public onlyOwner{\n    tradingFee = tradingFee_;\n  }\n943-function_definition-135-137", method="changetradingFee(uint tradingFee_)", type_label=function_definition];
950 [label="134_ onlyOwner\n950-expression_statement-135-135", method="changetradingFee(uint tradingFee_)", type_label=expression_statement];
953 [label="135_ tradingFee = tradingFee_;\n953-expression_statement-136-136", method="changetradingFee(uint tradingFee_)", type_label=expression_statement];
957 [label="137_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n957-function_definition-138-139", method="bug_unchk_send1()", type_label=function_definition];
962 [label="138_ msg.sender.transfer(1 ether);\n962-expression_statement-139-139", method="bug_unchk_send1()", type_label=expression_statement];
972 [label="139_ function availableTradingFeeOwner() public view returns(uint256){\n      return tokens[address(0)][feeAccount];\n  }\n972-function_definition-140-142", method="availableTradingFeeOwner()", type_label=function_definition];
981 [label="140_ return tokens[address(0)][feeAccount];\n981-return-141-141", method="availableTradingFeeOwner()", type_label=return];
989 [label="142_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n989-function_definition-143-144", method="bug_unchk_send2()", type_label=function_definition];
994 [label="143_ msg.sender.transfer(1 ether);\n994-expression_statement-144-144", method="bug_unchk_send2()", type_label=expression_statement];
1004 [label="144_ function withdrawTradingFeeOwner() public onlyOwner returns (string memory){\n      uint256 amount = availableTradingFeeOwner();\n      require (amount > 0, 'Nothing to withdraw');\n      tokens[address(0)][feeAccount] = 0;\n      msg.sender.transfer(amount);\n      emit OwnerWithdrawTradingFee(owner, amount);\n  }\n1004-function_definition-145-151", method="withdrawTradingFeeOwner()", type_label=function_definition];
1007 [label="144_ onlyOwner\n1007-expression_statement-145-145", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1014 [label="145_ uint256 amount = availableTradingFeeOwner();\n1014-new_variable-146-146", method="withdrawTradingFeeOwner()", type_label=new_variable];
1021 [label="146_ require (amount > 0, 'Nothing to withdraw');\n1021-expression_statement-147-147", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1031 [label="147_ tokens[address(0)][feeAccount] = 0;\n1031-expression_statement-148-148", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1041 [label="148_ msg.sender.transfer(amount);\n1041-expression_statement-149-149", method="withdrawTradingFeeOwner()", type_label=expression_statement];
1056 [label="151_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n1056-function_definition-152-153", method="bug_unchk_send17()", type_label=function_definition];
1061 [label="152_ msg.sender.transfer(1 ether);\n1061-expression_statement-153-153", method="bug_unchk_send17()", type_label=expression_statement];
1071 [label="153_ function deposit() public payable {\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n    emit Deposit(now, address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\n  }\n1071-function_definition-154-157", method="deposit()", type_label=function_definition];
1076 [label="154_ tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\n1076-expression_statement-155-155", method="deposit()", type_label=expression_statement];
1129 [label="157_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n1129-function_definition-158-159", method="bug_unchk_send3()", type_label=function_definition];
1134 [label="158_ msg.sender.transfer(1 ether);\n1134-expression_statement-159-159", method="bug_unchk_send3()", type_label=expression_statement];
1144 [label="159_ function withdraw(uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    require(tokens[address(0)][msg.sender] >= amount);\n    tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n    msg.sender.transfer(amount);\n    emit Withdraw(now, address(0), msg.sender, amount, tokens[address(0)][msg.sender]);\n  }\n1144-function_definition-160-166", method="withdraw(uint amount)", type_label=function_definition];
1152 [label="160_ require(!safeGuard,\"System Paused by Admin\");\n1152-expression_statement-161-161", method="withdraw(uint amount)", type_label=expression_statement];
1161 [label="161_ require(tokens[address(0)][msg.sender] >= amount);\n1161-expression_statement-162-162", method="withdraw(uint amount)", type_label=expression_statement];
1176 [label="162_ tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);\n1176-expression_statement-163-163", method="withdraw(uint amount)", type_label=expression_statement];
1201 [label="163_ msg.sender.transfer(amount);\n1201-expression_statement-164-164", method="withdraw(uint amount)", type_label=expression_statement];
1234 [label="166_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n1234-function_definition-167-168", method="bug_unchk_send9()", type_label=function_definition];
1239 [label="167_ msg.sender.transfer(1 ether);\n1239-expression_statement-168-168", method="bug_unchk_send9()", type_label=expression_statement];
1249 [label="168_ function depositToken(address token, uint amount) public {\n    require(token!=address(0));\n    require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n    tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n    emit Deposit(now, token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n1249-function_definition-169-174", method="depositToken(address token,uint amount)", type_label=function_definition];
1261 [label="169_ require(token!=address(0));\n1261-expression_statement-170-170", method="depositToken(address token,uint amount)", type_label=expression_statement];
1270 [label="170_ require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount));\n1270-expression_statement-171-171", method="depositToken(address token,uint amount)", type_label=expression_statement];
1291 [label="171_ tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);\n1291-expression_statement-172-172", method="depositToken(address token,uint amount)", type_label=expression_statement];
1332 [label="174_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n1332-function_definition-175-176", method="bug_unchk_send25()", type_label=function_definition];
1337 [label="175_ msg.sender.transfer(1 ether);\n1337-expression_statement-176-176", method="bug_unchk_send25()", type_label=expression_statement];
1347 [label="176_ function withdrawToken(address token, uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    require(token!=address(0));\n    require(tokens[token][msg.sender] >= amount);\n    tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n	  ERC20Essential(token).transfer(msg.sender, amount);\n    emit Withdraw(now, token, msg.sender, amount, tokens[token][msg.sender]);\n  }\n1347-function_definition-177-184", method="withdrawToken(address token,uint amount)", type_label=function_definition];
1359 [label="177_ require(!safeGuard,\"System Paused by Admin\");\n1359-expression_statement-178-178", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1368 [label="178_ require(token!=address(0));\n1368-expression_statement-179-179", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1377 [label="179_ require(tokens[token][msg.sender] >= amount);\n1377-expression_statement-180-180", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1390 [label="180_ tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount);\n1390-expression_statement-181-181", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1411 [label="181_ ERC20Essential(token).transfer(msg.sender, amount);\n1411-expression_statement-182-182", method="withdrawToken(address token,uint amount)", type_label=expression_statement];
1445 [label="184_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n1445-function_definition-185-186", method="bug_unchk_send19()", type_label=function_definition];
1450 [label="185_ msg.sender.transfer(1 ether);\n1450-expression_statement-186-186", method="bug_unchk_send19()", type_label=expression_statement];
1460 [label="186_ function balanceOf(address token, address user) public view returns (uint) {\n    return tokens[token][user];\n  }\n1460-function_definition-187-189", method="balanceOf(address token,address user)", type_label=function_definition];
1477 [label="187_ return tokens[token][user];\n1477-return-188-188", method="balanceOf(address token,address user)", type_label=return];
1483 [label="189_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n1483-function_definition-190-191", method="bug_unchk_send26()", type_label=function_definition];
1488 [label="190_ msg.sender.transfer(1 ether);\n1488-expression_statement-191-191", method="bug_unchk_send26()", type_label=expression_statement];
1498 [label="191_ function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    orders[msg.sender][hash] = true;\n    emit Order(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\n  }\n1498-function_definition-192-196", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=function_definition];
1526 [label="192_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n1526-new_variable-193-193", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=new_variable];
1552 [label="193_ orders[msg.sender][hash] = true;\n1552-expression_statement-194-194", method="order(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce)", type_label=expression_statement];
1583 [label="196_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n1583-function_definition-197-198", method="bug_unchk_send20()", type_label=function_definition];
1588 [label="197_ msg.sender.transfer(1 ether);\n1588-expression_statement-198-198", method="bug_unchk_send20()", type_label=expression_statement];
1598 [label="198_ function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    require((\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n    orderFills[user][hash] = orderFills[user][hash].add(amount);\n    emit Trade(now, tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);\n  }\n1598-function_definition-199-210", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=function_definition];
1646 [label="199_ require(!safeGuard,\"System Paused by Admin\");\n1646-expression_statement-200-200", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
1655 [label="200_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n1655-new_variable-201-201", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=new_variable];
1681 [label="201_ require((\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires &&\n      orderFills[user][hash].add(amount) <= amountGet\n    ));\n1681-expression_statement-202-206", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
1735 [label="206_ tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n1735-expression_statement-207-207", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
1750 [label="207_ orderFills[user][hash] = orderFills[user][hash].add(amount);\n1750-expression_statement-208-208", method="trade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount)", type_label=expression_statement];
1789 [label="210_ function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) internal {\n    uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n    tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n    tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n    tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n    tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n    tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n  }\n1789-function_definition-211-218", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=function_definition];
1817 [label="211_ uint tradingFeeXfer = calculatePercentage(amount,tradingFee);\n1817-new_variable-212-212", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=new_variable];
1828 [label="212_ tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer));\n1828-expression_statement-213-213", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
1854 [label="213_ tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer));\n1854-expression_statement-214-214", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
1876 [label="214_ tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer);\n1876-expression_statement-215-215", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
1897 [label="215_ tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet);\n1897-expression_statement-216-216", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
1921 [label="216_ tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet);\n1921-expression_statement-217-217", method="tradeBalances(address tokenGet,uint amountGet,address tokenGive,uint amountGive,address user,uint amount)", type_label=expression_statement];
1949 [label="218_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n1949-function_definition-219-220", method="bug_unchk_send32()", type_label=function_definition];
1954 [label="219_ msg.sender.transfer(1 ether);\n1954-expression_statement-220-220", method="bug_unchk_send32()", type_label=expression_statement];
1964 [label="220_ function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public view returns(bool) {\n    if (!(\n      tokens[tokenGet][sender] >= amount &&\n      availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount\n    )) return false;\n    return true;\n  }\n1964-function_definition-221-227", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=function_definition];
2021 [label="221_ if\n2021-if-222-225", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=if];
4488 [label="221_ end_if", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=end_if];
2056 [label="224_ return false;\n2056-return-225-225", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=return];
2059 [label="225_ return true;\n2059-return-226-226", method="testTrade(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s,uint amount,address sender)", type_label=return];
2062 [label="227_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n2062-function_definition-228-229", method="bug_unchk_send4()", type_label=function_definition];
2067 [label="228_ msg.sender.transfer(1 ether);\n2067-expression_statement-229-229", method="bug_unchk_send4()", type_label=expression_statement];
2077 [label="229_ function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    uint available1;\n    if (!(\n      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == user) &&\n      block.number <= expires\n    )) return 0;\n    available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\n    if (amountGet.sub(orderFills[user][hash])<available1) return amountGet.sub(orderFills[user][hash]);\n    return available1;\n  }\n2077-function_definition-230-240", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
2126 [label="230_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2126-new_variable-231-231", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2152 [label="231_ uint available1;\n2152-new_variable-232-232", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2157 [label="232_ if\n2157-if-233-236", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=if];
4624 [label="232_ end_if", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2196 [label="235_ return 0;\n2196-return-236-236", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2198 [label="236_ available1 = tokens[tokenGive][user].mul(amountGet) / amountGive;\n2198-expression_statement-237-237", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2213 [label="237_ if_amountGet.sub(orderFills[user][hash])<available1\n2213-if-238-238", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=if];
4680 [label="237_ end_if", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
2226 [label="237_ return amountGet.sub(orderFills[user][hash]);\n2226-return-238-238", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2237 [label="238_ return available1;\n2237-return-239-239", method="availableVolume(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user,uint8 v,bytes32 r,bytes32 s)", type_label=return];
2239 [label="240_ function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user) public view returns(uint) {\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    return orderFills[user][hash];\n  }\n2239-function_definition-241-244", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=function_definition];
2276 [label="241_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2276-new_variable-242-242", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=new_variable];
2302 [label="242_ return orderFills[user][hash];\n2302-return-243-243", method="amountFilled(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,address user)", type_label=return];
2308 [label="244_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n2308-function_definition-245-246", method="bug_unchk_send7()", type_label=function_definition];
2313 [label="245_ msg.sender.transfer(1 ether);\n2313-expression_statement-246-246", method="bug_unchk_send7()", type_label=expression_statement];
2323 [label="246_ function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) public {\n    require(!safeGuard,\"System Paused by Admin\");\n    bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n    require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == msg.sender));\n    orderFills[msg.sender][hash] = amountGet;\n    emit Cancel(now, tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n  }\n2323-function_definition-247-253", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
2363 [label="247_ require(!safeGuard,\"System Paused by Admin\");\n2363-expression_statement-248-248", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2372 [label="248_ bytes32 hash = keccak256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n2372-new_variable-249-249", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
2398 [label="249_ require((orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked(\"\x19Ethereum Signed Message:\n32\", hash)),v,r,s) == msg.sender));\n2398-expression_statement-250-250", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
2436 [label="250_ orderFills[msg.sender][hash] = amountGet;\n2436-expression_statement-251-251", method="cancelOrder(address tokenGet,uint amountGet,address tokenGive,uint amountGive,uint expires,uint nonce,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
87 -> 104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
104 -> 2571  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2571 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 2571  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
109 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
133 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
204 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
423 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
536 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
691 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
728 -> 733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
798 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 825  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
819 -> 831  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3286 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 3286  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
831 -> 3286  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
836 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
874 -> 881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
881 -> 897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
899 -> 904  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
981 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
989 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 1021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 1041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1152 -> 1161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1161 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1234 -> 1239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1249 -> 1261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1261 -> 1270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1270 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 1337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1347 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1359 -> 1368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1368 -> 1377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1377 -> 1390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1390 -> 1411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1445 -> 1450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1477 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1483 -> 1488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1498 -> 1526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1526 -> 1552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1583 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1598 -> 1646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1646 -> 1655  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1655 -> 1681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1681 -> 1735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1735 -> 1750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1789 -> 1817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1817 -> 1828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1828 -> 1854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1854 -> 1876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1876 -> 1897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1897 -> 1921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1949 -> 1954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1964 -> 2021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2021 -> 2056  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2021 -> 4488  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4488 -> 2059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2056 -> 4488  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2056 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2059 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2062 -> 2067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2077 -> 2126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2126 -> 2152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2152 -> 2157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2157 -> 2196  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2157 -> 4624  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4624 -> 2198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2196 -> 4624  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2196 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2198 -> 2213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2213 -> 2226  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2213 -> 4680  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4680 -> 2237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2226 -> 4680  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2226 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2237 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2239 -> 2276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2276 -> 2302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2302 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2308 -> 2313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2323 -> 2363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2363 -> 2372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2372 -> 2398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2398 -> 2436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
