digraph  {
13 [label="2_ address public owner;\n13-new_variable-3-3", method="", type_label=new_variable];
18 [label="3_ address[] public puppets;\n18-new_variable-4-4", method="", type_label=new_variable];
24 [label="4_ mapping (uint256 => address) public extra;\n24-new_variable-5-5", method="", type_label=new_variable];
31 [label="5_ address private _addy;\n31-new_variable-6-6", method="", type_label=new_variable];
36 [label="6_ uint256 private _share;\n36-new_variable-7-7", method="", type_label=new_variable];
41 [label="7_ uint256 private _count;\n41-new_variable-8-8", method="", type_label=new_variable];
48 [label="9_ owner = msg.sender;\n48-expression_statement-10-10", method="", type_label=expression_statement];
54 [label="10_ newPuppet();\n54-expression_statement-11-11", method="", type_label=expression_statement];
57 [label="11_ newPuppet();\n57-expression_statement-12-12", method="", type_label=expression_statement];
60 [label="12_ newPuppet();\n60-expression_statement-13-13", method="", type_label=expression_statement];
63 [label="13_ newPuppet();\n63-expression_statement-14-14", method="", type_label=expression_statement];
66 [label="14_ extra[0] = puppets[0];\n66-expression_statement-15-15", method="", type_label=expression_statement];
74 [label="15_ extra[1] = puppets[1];\n74-expression_statement-16-16", method="", type_label=expression_statement];
82 [label="16_ extra[2] = puppets[2];\n82-expression_statement-17-17", method="", type_label=expression_statement];
90 [label="17_ extra[3] = puppets[3];\n90-expression_statement-18-18", method="", type_label=expression_statement];
98 [label="19_ function withdraw() public{\n		require(msg.sender == owner);\n		owner.transfer(address(this).balance);\n	}\n98-function_definition-20-23", method="withdraw()", type_label=function_definition];
102 [label="20_ require(msg.sender == owner);\n102-expression_statement-21-21", method="withdraw()", type_label=expression_statement];
111 [label="21_ owner.transfer(address(this).balance);\n111-expression_statement-22-22", method="withdraw()", type_label=expression_statement];
122 [label="23_ function getPuppetCount() public constant returns(uint256 puppetCount){\n    	return puppets.length;\n  	}\n122-function_definition-24-26", method="getPuppetCount()", type_label=function_definition];
125 [label="23_ constant\n125-expression_statement-24-24", method="getPuppetCount()", type_label=expression_statement];
133 [label="24_ return puppets.length;\n133-return-25-25", method="getPuppetCount()", type_label=return];
137 [label="26_ function newPuppet() public returns(address newPuppet){\n	    require(msg.sender == owner);\n    	Puppet p = new Puppet();\n    	puppets.push(p);\n    	return p;\n  		}\n137-function_definition-27-32", method="newPuppet()", type_label=function_definition];
146 [label="27_ require(msg.sender == owner);\n146-expression_statement-28-28", method="newPuppet()", type_label=expression_statement];
155 [label="28_ Puppet p = new Puppet();\n155-new_variable-29-29", method="newPuppet()", type_label=new_variable];
166 [label="29_ puppets.push(p);\n166-expression_statement-30-30", method="newPuppet()", type_label=expression_statement];
173 [label="30_ return p;\n173-return-31-31", method="newPuppet()", type_label=return];
175 [label="32_ function setExtra(uint256 _id, address _newExtra) public {\n        require(_newExtra != address(0));\n        extra[_id] = _newExtra;\n    }\n175-function_definition-33-36", method="setExtra(uint256 _id,address _newExtra)", type_label=function_definition];
187 [label="33_ require(_newExtra != address(0));\n187-expression_statement-34-34", method="setExtra(uint256 _id,address _newExtra)", type_label=expression_statement];
196 [label="34_ extra[_id] = _newExtra;\n196-expression_statement-35-35", method="setExtra(uint256 _id,address _newExtra)", type_label=expression_statement];
202 [label="36_ function fundPuppets() public payable {\n        require(msg.sender == owner);\n    	_share = SafeMath.div(msg.value, 4);\n        extra[0].call.value(_share).gas(800000)();\n        extra[1].call.value(_share).gas(800000)();\n        extra[2].call.value(_share).gas(800000)();\n        extra[3].call.value(_share).gas(800000)();\n        }\n202-function_definition-37-44", method="fundPuppets()", type_label=function_definition];
207 [label="37_ require(msg.sender == owner);\n207-expression_statement-38-38", method="fundPuppets()", type_label=expression_statement];
216 [label="38_ _share = SafeMath.div(msg.value, 4);\n216-expression_statement-39-39", method="fundPuppets()", type_label=expression_statement];
229 [label="39_ extra[0].call.value(_share).gas(800000)();\n229-expression_statement-40-40", method="fundPuppets()", type_label=expression_statement];
246 [label="40_ extra[1].call.value(_share).gas(800000)();\n246-expression_statement-41-41", method="fundPuppets()", type_label=expression_statement];
263 [label="41_ extra[2].call.value(_share).gas(800000)();\n263-expression_statement-42-42", method="fundPuppets()", type_label=expression_statement];
280 [label="42_ extra[3].call.value(_share).gas(800000)();\n280-expression_statement-43-43", method="fundPuppets()", type_label=expression_statement];
304 [label="48_ mapping (uint256 => address) public target;\n304-new_variable-49-49", method="", type_label=new_variable];
311 [label="49_ mapping (uint256 => address) public master;\n311-new_variable-50-50", method="", type_label=new_variable];
320 [label="51_ target[0] = 0x509Cb8cB2F8ba04aE81eEC394175707Edd37e109;\n320-expression_statement-52-52", method="", type_label=expression_statement];
326 [label="52_ master[0] = 0x5C035Bb4Cb7dacbfeE076A5e61AA39a10da2E956;\n326-expression_statement-53-53", method="", type_label=expression_statement];
336 [label="55_ if\n336-if-56-58", method="", type_label=if];
850 [label="55_ end_if", method="", type_label=end_if];
345 [label="56_ target[0].call.value(msg.value).gas(600000)();\n345-expression_statement-57-57", method="", type_label=expression_statement];
364 [label="59_ function withdraw() public{\n		require(msg.sender == master[0]);\n		master[0].transfer(address(this).balance);\n	}\n364-function_definition-60-63", method="withdraw()", type_label=function_definition];
368 [label="60_ require(msg.sender == master[0]);\n368-expression_statement-61-61", method="withdraw()", type_label=expression_statement];
379 [label="61_ master[0].transfer(address(this).balance);\n379-expression_statement-62-62", method="withdraw()", type_label=expression_statement];
395 [label="65_ function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n395-function_definition-66-73", method="mul(uint256 a,uint256 b)", type_label=function_definition];
413 [label="66_ if_a == 0\n413-if-67-69", method="mul(uint256 a,uint256 b)", type_label=if];
927 [label="66_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
418 [label="67_ return 0;\n418-return-68-68", method="mul(uint256 a,uint256 b)", type_label=return];
420 [label="69_ c = a * b;\n420-expression_statement-70-70", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
426 [label="70_ assert(c / a == b);\n426-expression_statement-71-71", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
435 [label="71_ return c;\n435-return-72-72", method="mul(uint256 a,uint256 b)", type_label=return];
437 [label="73_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n437-function_definition-74-76", method="div(uint256 a,uint256 b)", type_label=function_definition];
454 [label="74_ return a / b;\n454-return-75-75", method="div(uint256 a,uint256 b)", type_label=return];
458 [label="76_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n458-function_definition-77-80", method="sub(uint256 a,uint256 b)", type_label=function_definition];
475 [label="77_ assert(b <= a);\n475-expression_statement-78-78", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
482 [label="78_ return a - b;\n482-return-79-79", method="sub(uint256 a,uint256 b)", type_label=return];
486 [label="80_ function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n486-function_definition-81-85", method="add(uint256 a,uint256 b)", type_label=function_definition];
504 [label="81_ c = a + b;\n504-expression_statement-82-82", method="add(uint256 a,uint256 b)", type_label=expression_statement];
510 [label="82_ assert(c >= a);\n510-expression_statement-83-83", method="add(uint256 a,uint256 b)", type_label=expression_statement];
517 [label="83_ return c;\n517-return-84-84", method="add(uint256 a,uint256 b)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
18 -> 24  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
24 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 41  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 57  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
57 -> 60  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 63  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
63 -> 66  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
66 -> 74  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
74 -> 82  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
102 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
133 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
137 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
175 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 345  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
336 -> 850  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
850 -> 364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 850  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
364 -> 368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 418  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
413 -> 927  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
927 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 927  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
418 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
420 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
426 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
437 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
458 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
475 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
486 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
517 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
