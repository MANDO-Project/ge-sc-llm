digraph  {
13 [label="2_ uint constant public blocksPerRound = 6800;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ uint constant public ticketPrice = 100000000000000000;\n19-new_variable-4-4", method="", type_label=new_variable];
25 [label="4_ uint constant public blockReward = 5000000000000000000;\n25-new_variable-5-5", method="", type_label=new_variable];
31 [label="5_ function getBlocksPerRound() constant returns(uint){ return blocksPerRound; }\n31-function_definition-6-6", method="getBlocksPerRound()", type_label=function_definition];
33 [label="5_ constant\n33-expression_statement-6-6", method="getBlocksPerRound()", type_label=expression_statement];
40 [label="5_ return blocksPerRound;\n40-return-6-6", method="getBlocksPerRound()", type_label=return];
42 [label="6_ function getTicketPrice() constant returns(uint){ return ticketPrice; }\n42-function_definition-7-7", method="getTicketPrice()", type_label=function_definition];
44 [label="6_ constant\n44-expression_statement-7-7", method="getTicketPrice()", type_label=expression_statement];
51 [label="6_ return ticketPrice;\n51-return-7-7", method="getTicketPrice()", type_label=return];
53 [label="7_ struct Round {\n         address[] buyers;\n         uint pot;\n         uint ticketsCount;\n         mapping(uint=>bool) isCashed;\n         mapping(address=>uint) ticketsCountByBuyer;\n     }\n53-expression_statement-8-14", method="Round()", type_label=expression_statement];
80 [label="14_ mapping(uint => Round) rounds;\n80-new_variable-15-15", method="", type_label=new_variable];
87 [label="15_ function getRoundIndex() constant returns (uint){\n         return block.number/blocksPerRound;\n     }\n87-function_definition-16-18", method="getRoundIndex()", type_label=function_definition];
89 [label="15_ constant\n89-expression_statement-16-16", method="getRoundIndex()", type_label=expression_statement];
96 [label="16_ return block.number/blocksPerRound;\n96-return-17-17", method="getRoundIndex()", type_label=return];
102 [label="18_ function getIsCashed(uint roundIndex,uint subpotIndex) constant returns (bool){\n         return rounds[roundIndex].isCashed[subpotIndex];\n     }\n102-function_definition-19-21", method="getIsCashed(uint roundIndex,uint subpotIndex)", type_label=function_definition];
112 [label="18_ constant\n112-expression_statement-19-19", method="getIsCashed(uint roundIndex,uint subpotIndex)", type_label=expression_statement];
119 [label="19_ return rounds[roundIndex].isCashed[subpotIndex];\n119-return-20-20", method="getIsCashed(uint roundIndex,uint subpotIndex)", type_label=return];
127 [label="21_ function calculateWinner(uint roundIndex, uint subpotIndex) constant returns(address){\n         var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex);\n         if(decisionBlockNumber>block.number)\n             return;\n         var decisionBlockHash = getHashOfBlock(decisionBlockNumber);\n         var winningTicketIndex = decisionBlockHash%rounds[roundIndex].ticketsCount;\n         var ticketIndex = uint256(0);\n         for(var buyerIndex = 0; buyerIndex<rounds[roundIndex].buyers.length; buyerIndex++){\n             var buyer = rounds[roundIndex].buyers[buyerIndex];\n             ticketIndex+=rounds[roundIndex].ticketsCountByBuyer[buyer];\n             if(ticketIndex>winningTicketIndex){\n                 return buyer;\n             }\n         }\n     }\n127-function_definition-22-36", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=function_definition];
137 [label="21_ constant\n137-expression_statement-22-22", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=expression_statement];
144 [label="22_ var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex);\n144-new_variable-23-23", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=new_variable];
155 [label="23_ if_decisionBlockNumber>block.number\n155-if-24-25", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=if];
792 [label="23_ end_if", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=end_if];
161 [label="24_ return;\n161-return-25-25", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=return];
162 [label="25_ var decisionBlockHash = getHashOfBlock(decisionBlockNumber);\n162-new_variable-26-26", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=new_variable];
171 [label="26_ var winningTicketIndex = decisionBlockHash%rounds[roundIndex].ticketsCount;\n171-new_variable-27-27", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=new_variable];
183 [label="27_ var ticketIndex = uint256(0);\n183-new_variable-28-28", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=new_variable];
191 [label="28_ for(buyerIndex<rounds[roundIndex].buyers.length;;buyerIndex++)\n191-for-29-35", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=for];
828 [label="28_ end_loop", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=end_loop];
208 [label="28_ buyerIndex++\n208-expression_statement-29-29", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=expression_statement];
211 [label="29_ var buyer = rounds[roundIndex].buyers[buyerIndex];\n211-new_variable-30-30", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=new_variable];
223 [label="30_ ticketIndex+=rounds[roundIndex].ticketsCountByBuyer[buyer];\n223-expression_statement-31-31", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=expression_statement];
233 [label="31_ if_ticketIndex>winningTicketIndex\n233-if-32-34", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=if];
870 [label="31_ end_if", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=end_if];
238 [label="32_ return buyer;\n238-return-33-33", method="calculateWinner(uint roundIndex,uint subpotIndex)", type_label=return];
240 [label="36_ function getDecisionBlockNumber(uint roundIndex,uint subpotIndex) constant returns (uint){\n         return ((roundIndex+1)*blocksPerRound)+subpotIndex;\n     }\n240-function_definition-37-39", method="getDecisionBlockNumber(uint roundIndex,uint subpotIndex)", type_label=function_definition];
250 [label="36_ constant\n250-expression_statement-37-37", method="getDecisionBlockNumber(uint roundIndex,uint subpotIndex)", type_label=expression_statement];
257 [label="37_ return ((roundIndex+1)*blocksPerRound)+subpotIndex;\n257-return-38-38", method="getDecisionBlockNumber(uint roundIndex,uint subpotIndex)", type_label=return];
267 [label="39_ function getSubpotsCount(uint roundIndex) constant returns(uint){\n         var subpotsCount = rounds[roundIndex].pot/blockReward;\n         if(rounds[roundIndex].pot%blockReward>0)\n             subpotsCount++;\n         return subpotsCount;\n     }\n267-function_definition-40-45", method="getSubpotsCount(uint roundIndex)", type_label=function_definition];
273 [label="39_ constant\n273-expression_statement-40-40", method="getSubpotsCount(uint roundIndex)", type_label=expression_statement];
280 [label="40_ var subpotsCount = rounds[roundIndex].pot/blockReward;\n280-new_variable-41-41", method="getSubpotsCount(uint roundIndex)", type_label=new_variable];
292 [label="41_ if_rounds[roundIndex].pot%blockReward>0\n292-if-42-43", method="getSubpotsCount(uint roundIndex)", type_label=if];
929 [label="41_ end_if", method="getSubpotsCount(uint roundIndex)", type_label=end_if];
302 [label="42_ subpotsCount++;\n302-expression_statement-43-43", method="getSubpotsCount(uint roundIndex)", type_label=expression_statement];
303 [label="42_ subpotsCount++\n303-expression_statement-43-43", method="getSubpotsCount(uint roundIndex)", type_label=expression_statement];
305 [label="43_ return subpotsCount;\n305-return-44-44", method="getSubpotsCount(uint roundIndex)", type_label=return];
307 [label="45_ function getSubpot(uint roundIndex) constant returns(uint){\n         return rounds[roundIndex].pot/getSubpotsCount(roundIndex);\n     }\n307-function_definition-46-48", method="getSubpot(uint roundIndex)", type_label=function_definition];
313 [label="45_ constant\n313-expression_statement-46-46", method="getSubpot(uint roundIndex)", type_label=expression_statement];
320 [label="46_ return rounds[roundIndex].pot/getSubpotsCount(roundIndex);\n320-return-47-47", method="getSubpot(uint roundIndex)", type_label=return];
331 [label="48_ function cash(uint roundIndex, uint subpotIndex){\n         var subpotsCount = getSubpotsCount(roundIndex);\n         if(subpotIndex>=subpotsCount)\n             return;\n         var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex);\n         if(decisionBlockNumber>block.number)\n             return;\n         if(rounds[roundIndex].isCashed[subpotIndex])\n             return;\n         var winner = calculateWinner(roundIndex,subpotIndex);\n         var subpot = getSubpot(roundIndex);\n         winner.send(subpot);\n         rounds[roundIndex].isCashed[subpotIndex] = true;\n     }\n331-function_definition-49-62", method="cash(uint roundIndex,uint subpotIndex)", type_label=function_definition];
342 [label="49_ var subpotsCount = getSubpotsCount(roundIndex);\n342-new_variable-50-50", method="cash(uint roundIndex,uint subpotIndex)", type_label=new_variable];
351 [label="50_ if_subpotIndex>=subpotsCount\n351-if-51-52", method="cash(uint roundIndex,uint subpotIndex)", type_label=if];
988 [label="50_ end_if", method="cash(uint roundIndex,uint subpotIndex)", type_label=end_if];
355 [label="51_ return;\n355-return-52-52", method="cash(uint roundIndex,uint subpotIndex)", type_label=return];
356 [label="52_ var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex);\n356-new_variable-53-53", method="cash(uint roundIndex,uint subpotIndex)", type_label=new_variable];
367 [label="53_ if_decisionBlockNumber>block.number\n367-if-54-55", method="cash(uint roundIndex,uint subpotIndex)", type_label=if];
1004 [label="53_ end_if", method="cash(uint roundIndex,uint subpotIndex)", type_label=end_if];
373 [label="54_ return;\n373-return-55-55", method="cash(uint roundIndex,uint subpotIndex)", type_label=return];
374 [label="55_ if\n374-if-56-57", method="cash(uint roundIndex,uint subpotIndex)", type_label=if];
1011 [label="55_ end_if", method="cash(uint roundIndex,uint subpotIndex)", type_label=end_if];
382 [label="56_ return;\n382-return-57-57", method="cash(uint roundIndex,uint subpotIndex)", type_label=return];
383 [label="57_ var winner = calculateWinner(roundIndex,subpotIndex);\n383-new_variable-58-58", method="cash(uint roundIndex,uint subpotIndex)", type_label=new_variable];
394 [label="58_ var subpot = getSubpot(roundIndex);\n394-new_variable-59-59", method="cash(uint roundIndex,uint subpotIndex)", type_label=new_variable];
403 [label="59_ winner.send(subpot);\n403-expression_statement-60-60", method="cash(uint roundIndex,uint subpotIndex)", type_label=expression_statement];
410 [label="60_ rounds[roundIndex].isCashed[subpotIndex] = true;\n410-expression_statement-61-61", method="cash(uint roundIndex,uint subpotIndex)", type_label=expression_statement];
421 [label="62_ function getHashOfBlock(uint blockIndex) constant returns(uint){\n         return uint(block.blockhash(blockIndex));\n     }\n421-function_definition-63-65", method="getHashOfBlock(uint blockIndex)", type_label=function_definition];
427 [label="62_ constant\n427-expression_statement-63-63", method="getHashOfBlock(uint blockIndex)", type_label=expression_statement];
434 [label="63_ return uint(block.blockhash(blockIndex));\n434-return-64-64", method="getHashOfBlock(uint blockIndex)", type_label=return];
443 [label="65_ function getBuyers(uint roundIndex,address buyer) constant returns (address[]){\n         return rounds[roundIndex].buyers;\n     }\n443-function_definition-66-68", method="getBuyers(uint roundIndex,address buyer)", type_label=function_definition];
453 [label="65_ constant\n453-expression_statement-66-66", method="getBuyers(uint roundIndex,address buyer)", type_label=expression_statement];
461 [label="66_ return rounds[roundIndex].buyers;\n461-return-67-67", method="getBuyers(uint roundIndex,address buyer)", type_label=return];
467 [label="68_ function getTicketsCountByBuyer(uint roundIndex,address buyer) constant returns (uint){\n         return rounds[roundIndex].ticketsCountByBuyer[buyer];\n     }\n467-function_definition-69-71", method="getTicketsCountByBuyer(uint roundIndex,address buyer)", type_label=function_definition];
477 [label="68_ constant\n477-expression_statement-69-69", method="getTicketsCountByBuyer(uint roundIndex,address buyer)", type_label=expression_statement];
484 [label="69_ return rounds[roundIndex].ticketsCountByBuyer[buyer];\n484-return-70-70", method="getTicketsCountByBuyer(uint roundIndex,address buyer)", type_label=return];
492 [label="71_ function getPot(uint roundIndex) constant returns(uint){\n         return rounds[roundIndex].pot;\n     }\n492-function_definition-72-74", method="getPot(uint roundIndex)", type_label=function_definition];
498 [label="71_ constant\n498-expression_statement-72-72", method="getPot(uint roundIndex)", type_label=expression_statement];
505 [label="72_ return rounds[roundIndex].pot;\n505-return-73-73", method="getPot(uint roundIndex)", type_label=return];
513 [label="75_ var roundIndex = getRoundIndex();\n513-new_variable-76-76", method="", type_label=new_variable];
520 [label="76_ var value = msg.value-(msg.value%ticketPrice);\n520-new_variable-77-77", method="", type_label=new_variable];
535 [label="77_ if_value==0\n535-if-78-78", method="", type_label=if];
1172 [label="77_ end_if", method="", type_label=end_if];
539 [label="77_ return;\n539-return-78-78", method="", type_label=return];
540 [label="78_ if_value<msg.value\n540-if-79-81", method="", type_label=if];
1177 [label="78_ end_if", method="", type_label=end_if];
547 [label="79_ msg.sender.send(msg.value-value);\n547-expression_statement-80-80", method="", type_label=expression_statement];
560 [label="81_ var ticketsCount = value/ticketPrice;\n560-new_variable-82-82", method="", type_label=new_variable];
568 [label="82_ rounds[roundIndex].ticketsCount+=ticketsCount;\n568-expression_statement-83-83", method="", type_label=expression_statement];
576 [label="83_ if_rounds[roundIndex].ticketsCountByBuyer[msg.sender]==0\n576-if-84-87", method="", type_label=if];
1213 [label="83_ end_if", method="", type_label=end_if];
589 [label="84_ var buyersLength = rounds[roundIndex].buyers.length++;\n589-new_variable-85-85", method="", type_label=new_variable];
594 [label="84_ rounds[roundIndex].buyers.length++\n594-expression_statement-85-85", method="", type_label=expression_statement];
602 [label="85_ rounds[roundIndex].buyers[buyersLength] = msg.sender;\n602-expression_statement-86-86", method="", type_label=expression_statement];
614 [label="87_ rounds[roundIndex].ticketsCountByBuyer[msg.sender]+=ticketsCount;\n614-expression_statement-88-88", method="", type_label=expression_statement];
626 [label="88_ rounds[roundIndex].ticketsCount+=ticketsCount;\n626-expression_statement-89-89", method="", type_label=expression_statement];
634 [label="89_ rounds[roundIndex].pot+=value;\n634-expression_statement-90-90", method="", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 19  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
19 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
40 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
42 -> 51  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
53 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 96  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
102 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
127 -> 144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 161  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
155 -> 792  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
792 -> 162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 792  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
161 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
162 -> 171  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
171 -> 183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
183 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 211  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
191 -> 828  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
828 -> 240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 191  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
211 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 238  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
233 -> 870  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
870 -> 208  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
870 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
238 -> 870  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
238 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
240 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
257 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
267 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 302  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
292 -> 929  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
929 -> 305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 929  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
305 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
307 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
331 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
351 -> 355  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
351 -> 988  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
988 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 988  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
355 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
356 -> 367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
367 -> 373  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
367 -> 1004  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1004 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 1004  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
373 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
374 -> 382  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
374 -> 1011  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1011 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 1011  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
382 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
383 -> 394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
394 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
443 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
467 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
492 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
513 -> 520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 539  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
535 -> 1172  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1172 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 1172  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
539 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
540 -> 547  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
540 -> 1177  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1177 -> 560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 1177  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
560 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
576 -> 589  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
576 -> 1213  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1213 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 1213  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
614 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
