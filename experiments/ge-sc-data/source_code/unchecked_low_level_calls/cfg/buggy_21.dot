digraph  {
13 [label="2_ function transfer(address to, uint256 value) public returns (bool success);\n13-function_definition-3-3", method="transfer(address to,uint256 value)", type_label=function_definition];
29 [label="3_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n29-function_definition-4-5", method="bug_unchk_send17()", type_label=function_definition];
34 [label="4_ msg.sender.transfer(1 ether);\n34-expression_statement-5-5", method="bug_unchk_send17()", type_label=expression_statement];
44 [label="5_ function transferFrom(address from, address to, uint256 value) public returns (bool success);\n44-function_definition-6-6", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
64 [label="6_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n64-function_definition-7-8", method="bug_unchk_send3()", type_label=function_definition];
69 [label="7_ msg.sender.transfer(1 ether);\n69-expression_statement-8-8", method="bug_unchk_send3()", type_label=expression_statement];
79 [label="8_ function balanceOf(address account) external view returns(uint256);\n79-function_definition-9-9", method="balanceOf(address account)", type_label=function_definition];
91 [label="9_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n91-function_definition-10-11", method="bug_unchk_send9()", type_label=function_definition];
96 [label="10_ msg.sender.transfer(1 ether);\n96-expression_statement-11-11", method="bug_unchk_send9()", type_label=expression_statement];
106 [label="11_ function allowance(address _owner, address _spender)external view returns(uint256);\n106-function_definition-12-12", method="allowance(address _owner,address _spender)", type_label=function_definition];
122 [label="12_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n122-function_definition-13-14", method="bug_unchk_send25()", type_label=function_definition];
127 [label="13_ msg.sender.transfer(1 ether);\n127-expression_statement-14-14", method="bug_unchk_send25()", type_label=expression_statement];
140 [label="16_ function mul(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        if (a == 0) {\n        return 0;}\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n140-function_definition-17-24", method="mul(uint256 a,uint256 b)", type_label=function_definition];
157 [label="18_ if_a == 0\n157-if-19-20", method="mul(uint256 a,uint256 b)", type_label=if];
2982 [label="18_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
162 [label="19_ return 0;\n162-return-20-20", method="mul(uint256 a,uint256 b)", type_label=return];
164 [label="20_ uint256 c = a * b;\n164-new_variable-21-21", method="mul(uint256 a,uint256 b)", type_label=new_variable];
172 [label="21_ assert(c / a == b);\n172-expression_statement-22-22", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
181 [label="22_ return c;\n181-return-23-23", method="mul(uint256 a,uint256 b)", type_label=return];
183 [label="24_ function div(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a / b;\n        return c;\n    }\n183-function_definition-25-29", method="div(uint256 a,uint256 b)", type_label=function_definition];
200 [label="26_ uint256 c = a / b;\n200-new_variable-27-27", method="div(uint256 a,uint256 b)", type_label=new_variable];
208 [label="27_ return c;\n208-return-28-28", method="div(uint256 a,uint256 b)", type_label=return];
210 [label="29_ function sub(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        assert(b <= a);\n        return a - b;\n    }\n210-function_definition-30-34", method="sub(uint256 a,uint256 b)", type_label=function_definition];
227 [label="31_ assert(b <= a);\n227-expression_statement-32-32", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
234 [label="32_ return a - b;\n234-return-33-33", method="sub(uint256 a,uint256 b)", type_label=return];
238 [label="34_ function add(uint256 a, uint256 b) internal pure returns (uint256) \n    {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n238-function_definition-35-40", method="add(uint256 a,uint256 b)", type_label=function_definition];
255 [label="36_ uint256 c = a + b;\n255-new_variable-37-37", method="add(uint256 a,uint256 b)", type_label=new_variable];
263 [label="37_ assert(c >= a);\n263-expression_statement-38-38", method="add(uint256 a,uint256 b)", type_label=expression_statement];
270 [label="38_ return c;\n270-return-39-39", method="add(uint256 a,uint256 b)", type_label=return];
280 [label="43_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n280-function_definition-44-45", method="bug_unchk_send13()", type_label=function_definition];
285 [label="44_ msg.sender.transfer(1 ether);\n285-expression_statement-45-45", method="bug_unchk_send13()", type_label=expression_statement];
313 [label="46_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n313-function_definition-47-48", method="bug_unchk_send5()", type_label=function_definition];
318 [label="47_ msg.sender.transfer(1 ether);\n318-expression_statement-48-48", method="bug_unchk_send5()", type_label=expression_statement];
328 [label="48_ address payable admin;\n328-new_variable-49-49", method="", type_label=new_variable];
332 [label="49_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n332-function_definition-50-51", method="bug_unchk_send15()", type_label=function_definition];
337 [label="50_ msg.sender.transfer(1 ether);\n337-expression_statement-51-51", method="bug_unchk_send15()", type_label=expression_statement];
347 [label="51_ address public feeAddress;\n347-new_variable-52-52", method="", type_label=new_variable];
352 [label="52_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n352-function_definition-53-54", method="bug_unchk_send28()", type_label=function_definition];
357 [label="53_ msg.sender.transfer(1 ether);\n357-expression_statement-54-54", method="bug_unchk_send28()", type_label=expression_statement];
367 [label="54_ bool private dexStatus;\n367-new_variable-55-55", method="", type_label=new_variable];
372 [label="55_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n372-function_definition-56-57", method="bug_unchk_send21()", type_label=function_definition];
377 [label="56_ msg.sender.transfer(1 ether);\n377-expression_statement-57-57", method="bug_unchk_send21()", type_label=expression_statement];
387 [label="57_ uint256 public tokenId=0;\n387-new_variable-58-58", method="", type_label=new_variable];
393 [label="58_ struct orders{\n        address userAddress;\n        address tokenAddress;\n        uint256 type_;\n        uint256 price;\n        uint256 total;\n        uint256 _decimal;\n        uint256 tradeTotal;\n        uint256 amount;\n        uint256 tradeAmount;\n        uint256 pairOrderID;\n        uint256 status; \n    }\n393-expression_statement-59-71", method="orders()", type_label=expression_statement];
439 [label="71_ struct tokens{\n        address tokenAddress;\n        string tokenSymbol;\n        uint256 decimals;\n        bool status;\n    }\n439-expression_statement-72-77", method="tokens()", type_label=expression_statement];
467 [label="78_ admin = _admin;\n467-expression_statement-79-79", method="", type_label=expression_statement];
471 [label="79_ feeAddress = feeAddress_;\n471-expression_statement-80-80", method="", type_label=expression_statement];
475 [label="80_ dexStatus = true;\n475-expression_statement-81-81", method="", type_label=expression_statement];
480 [label="82_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n480-function_definition-83-84", method="bug_unchk_send19()", type_label=function_definition];
485 [label="83_ msg.sender.transfer(1 ether);\n485-expression_statement-84-84", method="bug_unchk_send19()", type_label=expression_statement];
495 [label="84_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n495-function_definition-85-86", method="bug_unchk_send10()", type_label=function_definition];
500 [label="85_ msg.sender.transfer(1 ether);\n500-expression_statement-86-86", method="bug_unchk_send10()", type_label=expression_statement];
510 [label="86_ mapping(uint256=>orders) public Order;\n510-new_variable-87-87", method="", type_label=new_variable];
518 [label="87_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n518-function_definition-88-89", method="bug_unchk_send22()", type_label=function_definition];
523 [label="88_ msg.sender.transfer(1 ether);\n523-expression_statement-89-89", method="bug_unchk_send22()", type_label=expression_statement];
533 [label="89_ mapping(address=>mapping(address=>uint256))public userDetails;\n533-new_variable-90-90", method="", type_label=new_variable];
542 [label="90_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n542-function_definition-91-92", method="bug_unchk_send12()", type_label=function_definition];
547 [label="91_ msg.sender.transfer(1 ether);\n547-expression_statement-92-92", method="bug_unchk_send12()", type_label=expression_statement];
557 [label="92_ mapping(address=>mapping(address=>uint256))public feeAmount;\n557-new_variable-93-93", method="", type_label=new_variable];
566 [label="93_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n566-function_definition-94-95", method="bug_unchk_send11()", type_label=function_definition];
571 [label="94_ msg.sender.transfer(1 ether);\n571-expression_statement-95-95", method="bug_unchk_send11()", type_label=expression_statement];
581 [label="95_ mapping(address=>uint256) public withdrawfee;\n581-new_variable-96-96", method="", type_label=new_variable];
588 [label="96_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n588-function_definition-97-98", method="bug_unchk_send1()", type_label=function_definition];
593 [label="97_ msg.sender.transfer(1 ether);\n593-expression_statement-98-98", method="bug_unchk_send1()", type_label=expression_statement];
603 [label="98_ mapping(uint256=>mapping(uint256=>bool)) public orderPairStatus;\n603-new_variable-99-99", method="", type_label=new_variable];
612 [label="99_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n612-function_definition-100-101", method="bug_unchk_send2()", type_label=function_definition];
617 [label="100_ msg.sender.transfer(1 ether);\n617-expression_statement-101-101", method="bug_unchk_send2()", type_label=expression_statement];
627 [label="101_ mapping(address=>tokens) public tokendetails;\n627-new_variable-102-102", method="", type_label=new_variable];
635 [label="102_ modifier dexstatuscheck(){\n       require(dexStatus==true);\n       _;\n    }\n635-expression_statement-103-106", method="", type_label=expression_statement];
638 [label="103_ require(dexStatus==true);\n638-expression_statement-104-104", method="", type_label=expression_statement];
646 [label="104_ _;\n646-expression_statement-105-105", method="", type_label=expression_statement];
648 [label="106_ function setDexStatus(bool status_) public returns(bool){\n        require(msg.sender == admin);\n        dexStatus = status_;\n        return true;\n    }\n648-function_definition-107-111", method="setDexStatus(bool status_)", type_label=function_definition];
660 [label="107_ require(msg.sender == admin);\n660-expression_statement-108-108", method="setDexStatus(bool status_)", type_label=expression_statement];
669 [label="108_ dexStatus = status_;\n669-expression_statement-109-109", method="setDexStatus(bool status_)", type_label=expression_statement];
673 [label="109_ return true;\n673-return-110-110", method="setDexStatus(bool status_)", type_label=return];
676 [label="111_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n676-function_definition-112-113", method="bug_unchk_send26()", type_label=function_definition];
681 [label="112_ msg.sender.transfer(1 ether);\n681-expression_statement-113-113", method="bug_unchk_send26()", type_label=expression_statement];
691 [label="113_ function addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_) public returns(bool){\n        require(msg.sender == feeAddress && tokendetails[tokenAddress].status==false);\n        tokendetails[tokenAddress].tokenSymbol=tokenSymbol;\n        tokendetails[tokenAddress].decimals=decimal_;\n        tokendetails[tokenAddress].status=true;\n        return true;\n    }\n691-function_definition-114-120", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=function_definition];
711 [label="114_ require(msg.sender == feeAddress && tokendetails[tokenAddress].status==false);\n711-expression_statement-115-115", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
729 [label="115_ tokendetails[tokenAddress].tokenSymbol=tokenSymbol;\n729-expression_statement-116-116", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
737 [label="116_ tokendetails[tokenAddress].decimals=decimal_;\n737-expression_statement-117-117", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
745 [label="117_ tokendetails[tokenAddress].status=true;\n745-expression_statement-118-118", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=expression_statement];
754 [label="118_ return true;\n754-return-119-119", method="addToken(address tokenAddress,string memory tokenSymbol,uint256 decimal_)", type_label=return];
757 [label="120_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n757-function_definition-121-122", method="bug_unchk_send20()", type_label=function_definition];
762 [label="121_ msg.sender.transfer(1 ether);\n762-expression_statement-122-122", method="bug_unchk_send20()", type_label=expression_statement];
772 [label="122_ function deposit() dexstatuscheck public payable returns(bool) {\n        require(msg.value > 0);\n        userDetails[msg.sender][address(0)]=userDetails[msg.sender][address(0)].add(msg.value);\n        emit DepositandWithdraw( msg.sender, address(0),msg.value,0);\n        return true;\n    }\n772-function_definition-123-128", method="deposit()", type_label=function_definition];
774 [label="122_ dexstatuscheck\n774-expression_statement-123-123", method="deposit()", type_label=expression_statement];
783 [label="123_ require(msg.value > 0);\n783-expression_statement-124-124", method="deposit()", type_label=expression_statement];
792 [label="124_ userDetails[msg.sender][address(0)]=userDetails[msg.sender][address(0)].add(msg.value);\n792-expression_statement-125-125", method="deposit()", type_label=expression_statement];
835 [label="126_ return true;\n835-return-127-127", method="deposit()", type_label=return];
838 [label="128_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n838-function_definition-129-130", method="bug_unchk_send32()", type_label=function_definition];
843 [label="129_ msg.sender.transfer(1 ether);\n843-expression_statement-130-130", method="bug_unchk_send32()", type_label=expression_statement];
853 [label="130_ function tokenDeposit(address tokenaddr,uint256 tokenAmount) dexstatuscheck public returns(bool)\n    {\n        require(tokenAmount > 0 && tokendetails[tokenaddr].status==true);\n        require(tokenallowance(tokenaddr,msg.sender) > 0);\n        userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].add(tokenAmount);\n        Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);\n        emit DepositandWithdraw( msg.sender,tokenaddr,tokenAmount,0);\n        return true;\n    }\n853-function_definition-131-139", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=function_definition];
863 [label="130_ dexstatuscheck\n863-expression_statement-131-131", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
871 [label="132_ require(tokenAmount > 0 && tokendetails[tokenaddr].status==true);\n871-expression_statement-133-133", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
887 [label="133_ require(tokenallowance(tokenaddr,msg.sender) > 0);\n887-expression_statement-134-134", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
901 [label="134_ userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].add(tokenAmount);\n901-expression_statement-135-135", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
922 [label="135_ Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);\n922-expression_statement-136-136", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=expression_statement];
952 [label="137_ return true;\n952-return-138-138", method="tokenDeposit(address tokenaddr,uint256 tokenAmount)", type_label=return];
955 [label="139_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n955-function_definition-140-141", method="bug_unchk_send4()", type_label=function_definition];
960 [label="140_ msg.sender.transfer(1 ether);\n960-expression_statement-141-141", method="bug_unchk_send4()", type_label=expression_statement];
970 [label="141_ function withdraw(uint8 type_,address tokenaddr,uint256 amount) dexstatuscheck public returns(bool) {\n        require(type_ ==0 || type_ == 1);\n         if(type_==0){  \n         require(tokenaddr == address(0));\n         require(amount>0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)]<amount);\n         require(amount<=address(this).balance);\n                msg.sender.transfer(amount.sub(withdrawfee[address(0)]));    \n                userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount);\n                feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]);\n        }\n        else{  \n        require(tokenaddr != address(0) && tokendetails[tokenaddr].status==true);\n        require(amount>0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr]<amount);\n              Token(tokenaddr).transfer(msg.sender, (amount.sub(withdrawfee[tokenaddr])));\n              userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount);\n              feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]);\n        }\n        emit DepositandWithdraw( msg.sender,tokenaddr,amount,1);\n        return true;\n    }\n970-function_definition-142-161", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=function_definition];
984 [label="141_ dexstatuscheck\n984-expression_statement-142-142", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
992 [label="142_ require(type_ ==0 || type_ == 1);\n992-expression_statement-143-143", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1003 [label="143_ if_type_==0\n1003-if-144-158", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=if];
3828 [label="143_ end_if", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=end_if];
1008 [label="144_ require(tokenaddr == address(0));\n1008-expression_statement-145-145", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1017 [label="145_ require(amount>0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)]<amount);\n1017-expression_statement-146-146", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1044 [label="146_ require(amount<=address(this).balance);\n1044-expression_statement-147-147", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1055 [label="147_ msg.sender.transfer(amount.sub(withdrawfee[address(0)]));\n1055-expression_statement-148-148", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1073 [label="148_ userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount);\n1073-expression_statement-149-149", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1098 [label="149_ feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)]);\n1098-expression_statement-150-150", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1124 [label="152_ require(tokenaddr != address(0) && tokendetails[tokenaddr].status==true);\n1124-expression_statement-153-153", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1142 [label="153_ require(amount>0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr]<amount);\n1142-expression_statement-154-154", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1165 [label="154_ Token(tokenaddr).transfer(msg.sender, (amount.sub(withdrawfee[tokenaddr])));\n1165-expression_statement-155-155", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1187 [label="155_ userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount);\n1187-expression_statement-156-156", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1208 [label="156_ feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr]);\n1208-expression_statement-157-157", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=expression_statement];
1239 [label="159_ return true;\n1239-return-160-160", method="withdraw(uint8 type_,address tokenaddr,uint256 amount)", type_label=return];
1242 [label="161_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1242-function_definition-162-163", method="bug_unchk_send7()", type_label=function_definition];
1247 [label="162_ msg.sender.transfer(1 ether);\n1247-expression_statement-163-163", method="bug_unchk_send7()", type_label=expression_statement];
1257 [label="163_ function adminProfitWithdraw(uint8 type_,address tokenAddr)public returns(bool){  \n       require(msg.sender == admin);\n       require(type_ ==0 || type_ == 1);\n         if(type_==0){  \n            admin.transfer(feeAmount[admin][address(0)]);\n            feeAmount[admin][address(0)]=0;\n        }\n        else{  \n            require(tokenAddr != address(0)) ;\n            Token(tokenAddr).transfer(admin, feeAmount[admin][tokenAddr]);\n            feeAmount[admin][tokenAddr]=0;\n        }\n            return true;\n        }\n1257-function_definition-164-177", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=function_definition];
1273 [label="164_ require(msg.sender == admin);\n1273-expression_statement-165-165", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1282 [label="165_ require(type_ ==0 || type_ == 1);\n1282-expression_statement-166-166", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1293 [label="166_ if_type_==0\n1293-if-167-175", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=if];
4118 [label="166_ end_if", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=end_if];
1298 [label="167_ admin.transfer(feeAmount[admin][address(0)]);\n1298-expression_statement-168-168", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1311 [label="168_ feeAmount[admin][address(0)]=0;\n1311-expression_statement-169-169", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1322 [label="171_ require(tokenAddr != address(0)) ;\n1322-expression_statement-172-172", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1331 [label="172_ Token(tokenAddr).transfer(admin, feeAmount[admin][tokenAddr]);\n1331-expression_statement-173-173", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1347 [label="173_ feeAmount[admin][tokenAddr]=0;\n1347-expression_statement-174-174", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=expression_statement];
1355 [label="175_ return true;\n1355-return-176-176", method="adminProfitWithdraw(uint8 type_,address tokenAddr)", type_label=return];
1358 [label="177_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n1358-function_definition-178-179", method="bug_unchk_send23()", type_label=function_definition];
1363 [label="178_ msg.sender.transfer(1 ether);\n1363-expression_statement-179-179", method="bug_unchk_send23()", type_label=expression_statement];
1373 [label="179_ function setwithdrawfee(address[] memory addr,uint256[] memory feeamount)public returns(bool)\n        {\n          require(msg.sender==admin);\n          require(addr.length <10 && feeamount.length < 10 && addr.length==feeamount.length);\n          for(uint8 i=0;i<addr.length;i++){\n            withdrawfee[addr[i]]=feeamount[i];    \n          }\n           return true;\n        }\n1373-function_definition-180-188", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=function_definition];
1391 [label="181_ require(msg.sender==admin);\n1391-expression_statement-182-182", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1400 [label="182_ require(addr.length <10 && feeamount.length < 10 && addr.length==feeamount.length);\n1400-expression_statement-183-183", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1423 [label="183_ for(i<addr.length;;i++)\n1423-for-184-186", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=for];
4248 [label="183_ end_loop", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=end_loop];
1436 [label="183_ i++\n1436-expression_statement-184-184", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1439 [label="184_ withdrawfee[addr[i]]=feeamount[i];\n1439-expression_statement-185-185", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=expression_statement];
1449 [label="186_ return true;\n1449-return-187-187", method="setwithdrawfee(address[] memory addr,uint256[] memory feeamount)", type_label=return];
1452 [label="188_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n1452-function_definition-189-190", method="bug_unchk_send14()", type_label=function_definition];
1457 [label="189_ msg.sender.transfer(1 ether);\n1457-expression_statement-190-190", method="bug_unchk_send14()", type_label=expression_statement];
1467 [label="190_ function verify(string memory  message, uint8 v, bytes32 r, bytes32 s) private pure returns (address signer) {\n        string memory header = \"\x19Ethereum Signed Message:\n000000\";\n        uint256 lengthOffset;\n        uint256 length;\n        assembly {\n            length := mload(message)\n            lengthOffset := add(header, 57)\n        }\n        require(length <= 999999);\n        uint256 lengthLength = 0;\n        uint256 divisor = 100000; \n        while (divisor != 0) {\n            uint256 digit = length.div(divisor);\n            if (digit == 0) {\n                if (lengthLength == 0) {\n                      divisor = divisor.div(10);\n                      continue;\n                    }\n            }\n            lengthLength++;\n            length = length.sub(digit.mul(divisor));\n            divisor = divisor.div(10);\n            digit = digit.add(0x30);\n            lengthOffset++;\n            assembly {\n                mstore8(lengthOffset, digit)\n            }\n        }  \n        if (lengthLength == 0) {\n            lengthLength = 1 + 0x19 + 1;\n        } else {\n            lengthLength = lengthLength.add(1 + 0x19);\n        }\n        assembly {\n            mstore(header, lengthLength)\n        }\n        bytes32 check = keccak256(abi.encodePacked(header, message));\n        return ecrecover(check, v, r, s);\n    }\n1467-function_definition-191-229", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
1493 [label="191_ string memory header = \"\x19Ethereum Signed Message:\n000000\";\n1493-new_variable-192-192", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1500 [label="192_ uint256 lengthOffset;\n1500-new_variable-193-193", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1505 [label="193_ uint256 length;\n1505-new_variable-194-194", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1530 [label="198_ require(length <= 999999);\n1530-expression_statement-199-199", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1537 [label="199_ uint256 lengthLength = 0;\n1537-new_variable-200-200", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1543 [label="200_ uint256 divisor = 100000;\n1543-new_variable-201-201", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1549 [label="201_ while\n1549-while-202-218", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=while];
4374 [label="201_ end_loop", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_loop];
1554 [label="202_ uint256 digit = length.div(divisor);\n1554-new_variable-203-203", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1565 [label="203_ if_digit == 0\n1565-if-204-209", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
4390 [label="203_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
1570 [label="204_ if_lengthLength == 0\n1570-if-205-208", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
4395 [label="204_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
1575 [label="205_ divisor = divisor.div(10);\n1575-expression_statement-206-206", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1584 [label="206_ continue;\n1584-expression_statement-207-207", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1585 [label="209_ lengthLength++;\n1585-expression_statement-210-210", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1586 [label="209_ lengthLength++\n1586-expression_statement-210-210", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1588 [label="210_ length = length.sub(digit.mul(divisor));\n1588-expression_statement-211-211", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1602 [label="211_ divisor = divisor.div(10);\n1602-expression_statement-212-212", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1611 [label="212_ digit = digit.add(0x30);\n1611-expression_statement-213-213", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1620 [label="213_ lengthOffset++;\n1620-expression_statement-214-214", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1621 [label="213_ lengthOffset++\n1621-expression_statement-214-214", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1632 [label="218_ if_lengthLength == 0\n1632-if-219-223", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=if];
4457 [label="218_ end_if", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=end_if];
1637 [label="219_ lengthLength = 1 + 0x19 + 1;\n1637-expression_statement-220-220", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1646 [label="221_ lengthLength = lengthLength.add(1 + 0x19);\n1646-expression_statement-222-222", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
1666 [label="226_ bytes32 check = keccak256(abi.encodePacked(header, message));\n1666-new_variable-227-227", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
1682 [label="227_ return ecrecover(check, v, r, s);\n1682-return-228-228", method="verify(string memory  message,uint8 v,bytes32 r,bytes32 s)", type_label=return];
1693 [label="229_ function makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s) dexstatuscheck public returns(bool){\n      require(msg.sender == feeAddress);\n       require(verify((message),v,r,s)==traderAddresses[1]);\n      uint256 amount__;\n        uint256 orderiD = tradeDetails[0];\n        if(Order[orderiD].status==0){    \n            if(tradeDetails[6] == 0){\n                amount__ = tradeDetails[3];\n            }\n            else if(tradeDetails[6] ==1){\n                amount__ = tradeDetails[1];\n            }\n            require(amount__ > 0 && amount__ <= userDetails[traderAddresses[1]][traderAddresses[0]]);\n                Order[orderiD].userAddress = traderAddresses[1];\n                Order[orderiD].type_ = tradeDetails[6];\n                Order[orderiD].price = tradeDetails[2];\n                Order[orderiD].amount  = tradeDetails[1];\n                Order[orderiD].total  = tradeDetails[3];\n                Order[orderiD].tradeTotal  = tradeDetails[3];\n                Order[orderiD]._decimal  = tradeDetails[7];\n                Order[orderiD].tokenAddress = traderAddresses[0];       \n                userDetails[traderAddresses[1]][traderAddresses[0]]=userDetails[traderAddresses[1]][traderAddresses[0]].sub(amount__);\n                Order[orderiD].tradeAmount=tradeDetails[1];\n                Order[orderiD].status=1;\n        }\n        else if(Order[orderiD].status==1 && tradeDetails[8]==0){  \n            cancelOrder(orderiD);\n        }\n        if(Order[orderiD].status==1 && tradeDetails[1] > 0 && tradeDetails[8]>0 && Order[tradeDetails[8]].status==1 && tradeDetails[3]>0){  \n                Order[orderiD].tradeAmount =Order[orderiD].tradeAmount.sub(tradeDetails[1]);\n                Order[tradeDetails[8]].tradeAmount =Order[tradeDetails[8]].tradeAmount.sub(tradeDetails[1]);\n                if(tradeDetails[2]>0){\n                    userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[2]);\n                }\n                Order[orderiD].tradeTotal =Order[orderiD].tradeTotal.sub(((tradeDetails[1].mul(Order[orderiD].price)).div(Order[orderiD]._decimal)));\n                Order[tradeDetails[8]].tradeTotal =Order[tradeDetails[8]].tradeTotal.sub(((tradeDetails[1].mul(Order[tradeDetails[8]].price)).div(Order[tradeDetails[8]]._decimal)));\n                    if(tradeDetails[6] == 1 || tradeDetails[6]==3)\n                    {\n                        userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1]);\n                        userDetails[Order[orderiD].userAddress][traderAddresses[0]]= userDetails[Order[orderiD].userAddress][traderAddresses[0]].sub(tradeDetails[4]);    \n                        feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[4]);\n                    }\n                    else\n                    {\n                         userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1].sub(tradeDetails[4]));\n                            feeAmount[admin][Order[tradeDetails[8]].tokenAddress]= feeAmount[admin][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[4]);\n                    }\n                    if(tradeDetails[6] == 2 || tradeDetails[6]==3)\n                    {\n                        userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3]);\n                        userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]]= userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]].sub(tradeDetails[5]);\n                        feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[5]);\n                    }\n                    else\n                    {\n                         userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3].sub(tradeDetails[5]));\n                         feeAmount[admin][Order[orderiD].tokenAddress]= feeAmount[admin][Order[orderiD].tokenAddress].add(tradeDetails[5]);\n                    }\n                if(Order[tradeDetails[8]].tradeAmount==0){\n                    Order[tradeDetails[8]].status=2;    \n                }\n                if(Order[orderiD].tradeAmount==0){\n                    Order[orderiD].status=2;    \n                }\n                orderPairStatus[orderiD][tradeDetails[8]] = true;\n            }\n        return true; \n    }\n1693-function_definition-230-297", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=function_definition];
1723 [label="229_ dexstatuscheck\n1723-expression_statement-230-230", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1731 [label="230_ require(msg.sender == feeAddress);\n1731-expression_statement-231-231", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1740 [label="231_ require(verify((message),v,r,s)==traderAddresses[1]);\n1740-expression_statement-232-232", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1759 [label="232_ uint256 amount__;\n1759-new_variable-233-233", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=new_variable];
1764 [label="233_ uint256 orderiD = tradeDetails[0];\n1764-new_variable-234-234", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=new_variable];
1772 [label="234_ if_Order[orderiD].status==0\n1772-if-235-257", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
4597 [label="234_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
1781 [label="235_ if_tradeDetails[6] == 0\n1781-if-236-241", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
4606 [label="235_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
1788 [label="236_ amount__ = tradeDetails[3];\n1788-expression_statement-237-237", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1794 [label="238_ if_tradeDetails[6] ==1\n1794-if-239-241", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
1801 [label="239_ amount__ = tradeDetails[1];\n1801-expression_statement-240-240", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1807 [label="241_ require(amount__ > 0 && amount__ <= userDetails[traderAddresses[1]][traderAddresses[0]]);\n1807-expression_statement-242-242", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1826 [label="242_ Order[orderiD].userAddress = traderAddresses[1];\n1826-expression_statement-243-243", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1836 [label="243_ Order[orderiD].type_ = tradeDetails[6];\n1836-expression_statement-244-244", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1846 [label="244_ Order[orderiD].price = tradeDetails[2];\n1846-expression_statement-245-245", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1856 [label="245_ Order[orderiD].amount  = tradeDetails[1];\n1856-expression_statement-246-246", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1866 [label="246_ Order[orderiD].total  = tradeDetails[3];\n1866-expression_statement-247-247", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1876 [label="247_ Order[orderiD].tradeTotal  = tradeDetails[3];\n1876-expression_statement-248-248", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1886 [label="248_ Order[orderiD]._decimal  = tradeDetails[7];\n1886-expression_statement-249-249", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1896 [label="249_ Order[orderiD].tokenAddress = traderAddresses[0];\n1896-expression_statement-250-250", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1906 [label="250_ userDetails[traderAddresses[1]][traderAddresses[0]]=userDetails[traderAddresses[1]][traderAddresses[0]].sub(amount__);\n1906-expression_statement-251-251", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1931 [label="251_ Order[orderiD].tradeAmount=tradeDetails[1];\n1931-expression_statement-252-252", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1941 [label="252_ Order[orderiD].status=1;\n1941-expression_statement-253-253", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1949 [label="254_ if_Order[orderiD].status==1 && tradeDetails[8]==0\n1949-if-255-257", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
1964 [label="255_ cancelOrder(orderiD);\n1964-expression_statement-256-256", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
1969 [label="257_ if_Order[orderiD].status==1 && tradeDetails[1] > 0 && tradeDetails[8]>0 && Order[tradeDetails[8]].status==1 && tradeDetails[3]>0\n1969-if-258-295", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
4794 [label="257_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2006 [label="258_ Order[orderiD].tradeAmount =Order[orderiD].tradeAmount.sub(tradeDetails[1]);\n2006-expression_statement-259-259", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2025 [label="259_ Order[tradeDetails[8]].tradeAmount =Order[tradeDetails[8]].tradeAmount.sub(tradeDetails[1]);\n2025-expression_statement-260-260", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2048 [label="260_ if_tradeDetails[2]>0\n2048-if-261-263", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
4873 [label="260_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2055 [label="261_ userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[2]);\n2055-expression_statement-262-262", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2090 [label="263_ Order[orderiD].tradeTotal =Order[orderiD].tradeTotal.sub(((tradeDetails[1].mul(Order[orderiD].price)).div(Order[orderiD]._decimal)));\n2090-expression_statement-264-264", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2129 [label="264_ Order[tradeDetails[8]].tradeTotal =Order[tradeDetails[8]].tradeTotal.sub(((tradeDetails[1].mul(Order[tradeDetails[8]].price)).div(Order[tradeDetails[8]]._decimal)));\n2129-expression_statement-265-265", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2176 [label="265_ if_tradeDetails[6] == 1 || tradeDetails[6]==3\n2176-if-266-276", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5001 [label="265_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2189 [label="267_ userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1]);\n2189-expression_statement-268-268", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2228 [label="268_ userDetails[Order[orderiD].userAddress][traderAddresses[0]]= userDetails[Order[orderiD].userAddress][traderAddresses[0]].sub(tradeDetails[4]);\n2228-expression_statement-269-269", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2259 [label="269_ feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[4]);\n2259-expression_statement-270-270", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2283 [label="273_ userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress]=userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1].sub(tradeDetails[4]));\n2283-expression_statement-274-274", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2329 [label="274_ feeAmount[admin][Order[tradeDetails[8]].tokenAddress]= feeAmount[admin][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[4]);\n2329-expression_statement-275-275", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2360 [label="276_ if_tradeDetails[6] == 2 || tradeDetails[6]==3\n2360-if-277-287", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5185 [label="276_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2373 [label="278_ userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3]);\n2373-expression_statement-279-279", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2412 [label="279_ userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]]= userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]].sub(tradeDetails[5]);\n2412-expression_statement-280-280", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2447 [label="280_ feeAmount[admin][traderAddresses[0]]= feeAmount[admin][traderAddresses[0]].add(tradeDetails[5]);\n2447-expression_statement-281-281", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2471 [label="284_ userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress]=userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3].sub(tradeDetails[5]));\n2471-expression_statement-285-285", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2517 [label="285_ feeAmount[admin][Order[orderiD].tokenAddress]= feeAmount[admin][Order[orderiD].tokenAddress].add(tradeDetails[5]);\n2517-expression_statement-286-286", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2544 [label="287_ if_Order[tradeDetails[8]].tradeAmount==0\n2544-if-288-290", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5369 [label="287_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2555 [label="288_ Order[tradeDetails[8]].status=2;\n2555-expression_statement-289-289", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2565 [label="290_ if_Order[orderiD].tradeAmount==0\n2565-if-291-293", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=if];
5390 [label="290_ end_if", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=end_if];
2574 [label="291_ Order[orderiD].status=2;\n2574-expression_statement-292-292", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2582 [label="293_ orderPairStatus[orderiD][tradeDetails[8]] = true;\n2582-expression_statement-294-294", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=expression_statement];
2593 [label="295_ return true;\n2593-return-296-296", method="makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)", type_label=return];
2596 [label="297_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n2596-function_definition-298-299", method="bug_unchk_send30()", type_label=function_definition];
2601 [label="298_ msg.sender.transfer(1 ether);\n2601-expression_statement-299-299", method="bug_unchk_send30()", type_label=expression_statement];
2611 [label="299_ function cancelOrder(uint256 orderid)internal returns(bool){\n        if(Order[orderid].status==1){\n            if(Order[orderid].type_ == 0){\n            userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeTotal);        \n            }\n            else{\n                userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeAmount);\n            }\n            Order[orderid].status=3;     \n        }\n        return true;\n}\n2611-function_definition-300-311", method="cancelOrder(uint256 orderid)", type_label=function_definition];
2623 [label="300_ if_Order[orderid].status==1\n2623-if-301-309", method="cancelOrder(uint256 orderid)", type_label=if];
5448 [label="300_ end_if", method="cancelOrder(uint256 orderid)", type_label=end_if];
2632 [label="301_ if_Order[orderid].type_ == 0\n2632-if-302-307", method="cancelOrder(uint256 orderid)", type_label=if];
5457 [label="301_ end_if", method="cancelOrder(uint256 orderid)", type_label=end_if];
2641 [label="302_ userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeTotal);\n2641-expression_statement-303-303", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
2679 [label="305_ userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress]=userDetails[ Order[orderid].userAddress][Order[orderid].tokenAddress].add(Order[orderid].tradeAmount);\n2679-expression_statement-306-306", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
2716 [label="307_ Order[orderid].status=3;\n2716-expression_statement-308-308", method="cancelOrder(uint256 orderid)", type_label=expression_statement];
2724 [label="309_ return true;\n2724-return-310-310", method="cancelOrder(uint256 orderid)", type_label=return];
2727 [label="311_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n2727-function_definition-312-313", method="bug_unchk_send8()", type_label=function_definition];
2732 [label="312_ msg.sender.transfer(1 ether);\n2732-expression_statement-313-313", method="bug_unchk_send8()", type_label=expression_statement];
2742 [label="313_ function viewTokenBalance(address tokenAddr,address baladdr)public view returns(uint256){\n        return Token(tokenAddr).balanceOf(baladdr);\n    }\n2742-function_definition-314-316", method="viewTokenBalance(address tokenAddr,address baladdr)", type_label=function_definition];
2759 [label="314_ return Token(tokenAddr).balanceOf(baladdr);\n2759-return-315-315", method="viewTokenBalance(address tokenAddr,address baladdr)", type_label=return];
2769 [label="316_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n2769-function_definition-317-318", method="bug_unchk_send27()", type_label=function_definition];
2774 [label="317_ msg.sender.transfer(1 ether);\n2774-expression_statement-318-318", method="bug_unchk_send27()", type_label=expression_statement];
2784 [label="318_ function tokenallowance(address tokenAddr,address owner) public view returns(uint256){\n        return Token(tokenAddr).allowance(owner,address(this));\n    }\n2784-function_definition-319-321", method="tokenallowance(address tokenAddr,address owner)", type_label=function_definition];
2801 [label="319_ return Token(tokenAddr).allowance(owner,address(this));\n2801-return-320-320", method="tokenallowance(address tokenAddr,address owner)", type_label=return];
2815 [label="321_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n2815-function_definition-322-323", method="bug_unchk_send31()", type_label=function_definition];
2820 [label="322_ msg.sender.transfer(1 ether);\n2820-expression_statement-323-323", method="bug_unchk_send31()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1227;
1657;
29 -> 34  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
91 -> 96  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
157 -> 162  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
157 -> 2982  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2982 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 2982  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
162 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
164 -> 172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
183 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
210 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
234 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
238 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
280 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
332 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
372 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
542 -> 547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
566 -> 571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
627 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
648 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
676 -> 681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
691 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
711 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
737 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
754 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
757 -> 762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
838 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
853 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
887 -> 901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
955 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1008  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1003 -> 1124  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3828 -> 1227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1073 -> 1098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 3828  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1124 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1187 -> 1208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 3828  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1239 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1242 -> 1247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1257 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1282 -> 1293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1293 -> 1298  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1293 -> 1322  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4118 -> 1355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1298 -> 1311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 4118  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1322 -> 1331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1347 -> 4118  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1355 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1358 -> 1363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1373 -> 1391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1391 -> 1400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1400 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 1439  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1423 -> 4248  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4248 -> 1449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1436 -> 1423  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1439 -> 1436  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1449 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1452 -> 1457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1467 -> 1493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1493 -> 1500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1500 -> 1505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1530 -> 1537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1537 -> 1543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1543 -> 1549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1549 -> 1554  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1549 -> 4374  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4374 -> 1632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1554 -> 1565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1565 -> 1570  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1565 -> 4390  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1570 -> 1575  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1570 -> 4395  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1575 -> 1584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 1549  [color=red, controlflow_type=jump_next, edge_type=CFG_edge, key=0, label=jump_next];
1585 -> 1588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1588 -> 1602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1611 -> 1620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1632 -> 1637  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1632 -> 1646  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4457 -> 1657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1637 -> 4457  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1646 -> 4457  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1666 -> 1682  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1682 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1693 -> 1731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1731 -> 1740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1740 -> 1759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1759 -> 1764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1764 -> 1772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1772 -> 1781  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1772 -> 1949  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4597 -> 1969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1781 -> 1788  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1781 -> 1794  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4606 -> 1807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1788 -> 4606  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1794 -> 1801  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1794 -> 4606  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1801 -> 4606  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1807 -> 1826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1826 -> 1836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1836 -> 1846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1846 -> 1856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1856 -> 1866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1866 -> 1876  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1876 -> 1886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1886 -> 1896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1896 -> 1906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1906 -> 1931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1931 -> 1941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1941 -> 4597  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1949 -> 1964  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1949 -> 4597  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1964 -> 4597  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1969 -> 2006  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1969 -> 4794  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4794 -> 2593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2006 -> 2025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2025 -> 2048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2048 -> 2055  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2048 -> 4873  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4873 -> 2090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2055 -> 4873  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2090 -> 2129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2129 -> 2176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2176 -> 2189  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2176 -> 2283  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5001 -> 2360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2189 -> 2228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2228 -> 2259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2259 -> 5001  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2283 -> 2329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2329 -> 5001  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2360 -> 2373  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2360 -> 2471  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5185 -> 2544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2373 -> 2412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2412 -> 2447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2447 -> 5185  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2471 -> 2517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2517 -> 5185  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2544 -> 2555  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2544 -> 5369  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5369 -> 2565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2555 -> 5369  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2565 -> 2574  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2565 -> 5390  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5390 -> 2582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2574 -> 5390  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2582 -> 4794  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2593 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2596 -> 2601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2611 -> 2623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2623 -> 2632  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2623 -> 5448  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5448 -> 2724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2632 -> 2641  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2632 -> 2679  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5457 -> 2716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2641 -> 5457  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2679 -> 5457  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2716 -> 5448  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2724 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2727 -> 2732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2742 -> 2759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2759 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2769 -> 2774  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2784 -> 2801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2801 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2815 -> 2820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
