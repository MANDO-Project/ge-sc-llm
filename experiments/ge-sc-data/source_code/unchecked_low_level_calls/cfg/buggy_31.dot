digraph  {
13 [label="2_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n13-function_definition-3-3", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
35 [label="5_ function signer() external view returns (address _signer);\n35-function_definition-6-6", method="signer()", type_label=function_definition];
47 [label="8_ function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        if (signature.length != 65) {\n            return (address(0));\n        }\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return address(0);\n        }\n        if (v != 27 && v != 28) {\n            return address(0);\n        }\n        return ecrecover(hash, v, r, s);\n    }\n47-function_definition-9-28", method="recover(bytes32 hash,bytes memory signature)", type_label=function_definition];
64 [label="9_ if_signature.length != 65\n64-if-10-12", method="recover(bytes32 hash,bytes memory signature)", type_label=if];
804 [label="9_ end_if", method="recover(bytes32 hash,bytes memory signature)", type_label=end_if];
71 [label="10_ return (address(0));\n71-return-11-11", method="recover(bytes32 hash,bytes memory signature)", type_label=return];
76 [label="12_ bytes32 r;\n76-new_variable-13-13", method="recover(bytes32 hash,bytes memory signature)", type_label=new_variable];
81 [label="13_ bytes32 s;\n81-new_variable-14-14", method="recover(bytes32 hash,bytes memory signature)", type_label=new_variable];
86 [label="14_ uint8 v;\n86-new_variable-15-15", method="recover(bytes32 hash,bytes memory signature)", type_label=new_variable];
131 [label="20_ if_uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n131-if-21-23", method="recover(bytes32 hash,bytes memory signature)", type_label=if];
871 [label="20_ end_if", method="recover(bytes32 hash,bytes memory signature)", type_label=end_if];
138 [label="21_ return address(0);\n138-return-22-22", method="recover(bytes32 hash,bytes memory signature)", type_label=return];
142 [label="23_ if_v != 27 && v != 28\n142-if-24-26", method="recover(bytes32 hash,bytes memory signature)", type_label=if];
882 [label="23_ end_if", method="recover(bytes32 hash,bytes memory signature)", type_label=end_if];
151 [label="24_ return address(0);\n151-return-25-25", method="recover(bytes32 hash,bytes memory signature)", type_label=return];
155 [label="26_ return ecrecover(hash, v, r, s);\n155-return-27-27", method="recover(bytes32 hash,bytes memory signature)", type_label=return];
169 [label="30_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n169-function_definition-31-32", method="bug_unchk_send9()", type_label=function_definition];
174 [label="31_ msg.sender.transfer(1 ether);\n174-expression_statement-32-32", method="bug_unchk_send9()", type_label=expression_statement];
184 [label="32_ address private _owner;\n184-new_variable-33-33", method="", type_label=new_variable];
189 [label="33_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n189-function_definition-34-35", method="bug_unchk_send31()", type_label=function_definition];
194 [label="34_ msg.sender.transfer(1 ether);\n194-expression_statement-35-35", method="bug_unchk_send31()", type_label=expression_statement];
216 [label="37_ _owner = msg.sender;\n216-expression_statement-38-38", method="", type_label=expression_statement];
230 [label="40_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n230-function_definition-41-42", method="bug_unchk_send20()", type_label=function_definition];
235 [label="41_ msg.sender.transfer(1 ether);\n235-expression_statement-42-42", method="bug_unchk_send20()", type_label=expression_statement];
245 [label="42_ function owner() public view returns (address) {\n        return _owner;\n    }\n245-function_definition-43-45", method="owner()", type_label=function_definition];
254 [label="43_ return _owner;\n254-return-44-44", method="owner()", type_label=return];
256 [label="45_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n256-function_definition-46-47", method="bug_unchk_send32()", type_label=function_definition];
261 [label="46_ msg.sender.transfer(1 ether);\n261-expression_statement-47-47", method="bug_unchk_send32()", type_label=expression_statement];
271 [label="47_ modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n271-expression_statement-48-51", method="", type_label=expression_statement];
274 [label="48_ require(isOwner(), \"Ownable: caller is not the owner\");\n274-expression_statement-49-49", method="", type_label=expression_statement];
283 [label="49_ _;\n283-expression_statement-50-50", method="", type_label=expression_statement];
285 [label="51_ function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n285-function_definition-52-54", method="isOwner()", type_label=function_definition];
294 [label="52_ return msg.sender == _owner;\n294-return-53-53", method="isOwner()", type_label=return];
300 [label="54_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n300-function_definition-55-56", method="bug_unchk_send4()", type_label=function_definition];
305 [label="55_ msg.sender.transfer(1 ether);\n305-expression_statement-56-56", method="bug_unchk_send4()", type_label=expression_statement];
315 [label="56_ function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n315-function_definition-57-59", method="transferOwnership(address newOwner)", type_label=function_definition];
322 [label="56_ onlyOwner\n322-expression_statement-57-57", method="transferOwnership(address newOwner)", type_label=expression_statement];
325 [label="57_ _transferOwnership(newOwner);\n325-expression_statement-58-58", method="transferOwnership(address newOwner)", type_label=expression_statement];
330 [label="59_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n330-function_definition-60-61", method="bug_unchk_send7()", type_label=function_definition];
335 [label="60_ msg.sender.transfer(1 ether);\n335-expression_statement-61-61", method="bug_unchk_send7()", type_label=expression_statement];
345 [label="61_ function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n345-function_definition-62-66", method="_transferOwnership(address newOwner)", type_label=function_definition];
353 [label="62_ require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n353-expression_statement-63-63", method="_transferOwnership(address newOwner)", type_label=expression_statement];
371 [label="64_ _owner = newOwner;\n371-expression_statement-65-65", method="_transferOwnership(address newOwner)", type_label=expression_statement];
375 [label="66_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n375-function_definition-67-68", method="bug_unchk_send23()", type_label=function_definition];
380 [label="67_ msg.sender.transfer(1 ether);\n380-expression_statement-68-68", method="bug_unchk_send23()", type_label=expression_statement];
393 [label="70_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n393-function_definition-71-72", method="bug_unchk_send25()", type_label=function_definition];
398 [label="71_ msg.sender.transfer(1 ether);\n398-expression_statement-72-72", method="bug_unchk_send25()", type_label=expression_statement];
408 [label="72_ uint256 private _guardCounter;\n408-new_variable-73-73", method="", type_label=new_variable];
415 [label="74_ _guardCounter = 1;\n415-expression_statement-75-75", method="", type_label=expression_statement];
419 [label="76_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n419-function_definition-77-78", method="bug_unchk_send14()", type_label=function_definition];
424 [label="77_ msg.sender.transfer(1 ether);\n424-expression_statement-78-78", method="bug_unchk_send14()", type_label=expression_statement];
434 [label="78_ modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n434-expression_statement-79-84", method="", type_label=expression_statement];
437 [label="79_ _guardCounter += 1;\n437-expression_statement-80-80", method="", type_label=expression_statement];
441 [label="80_ uint256 localCounter = _guardCounter;\n441-new_variable-81-81", method="", type_label=new_variable];
447 [label="81_ _;\n447-expression_statement-82-82", method="", type_label=expression_statement];
449 [label="82_ require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n449-expression_statement-83-83", method="", type_label=expression_statement];
468 [label="86_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n468-function_definition-87-88", method="bug_unchk_send19()", type_label=function_definition];
473 [label="87_ msg.sender.transfer(1 ether);\n473-expression_statement-88-88", method="bug_unchk_send19()", type_label=expression_statement];
483 [label="88_ IERC20 public token;\n483-new_variable-89-89", method="", type_label=new_variable];
489 [label="89_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n489-function_definition-90-91", method="bug_unchk_send26()", type_label=function_definition];
494 [label="90_ msg.sender.transfer(1 ether);\n494-expression_statement-91-91", method="bug_unchk_send26()", type_label=expression_statement];
504 [label="91_ address public relayer;\n504-new_variable-92-92", method="", type_label=new_variable];
509 [label="92_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n509-function_definition-93-94", method="bug_unchk_send13()", type_label=function_definition];
514 [label="93_ msg.sender.transfer(1 ether);\n514-expression_statement-94-94", method="bug_unchk_send13()", type_label=expression_statement];
544 [label="96_ relayer = _relayer;\n544-expression_statement-97-97", method="", type_label=expression_statement];
548 [label="97_ token = IERC20(_tokenAddress);\n548-expression_statement-98-98", method="", type_label=expression_statement];
555 [label="99_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n555-function_definition-100-101", method="bug_unchk_send30()", type_label=function_definition];
560 [label="100_ msg.sender.transfer(1 ether);\n560-expression_statement-101-101", method="bug_unchk_send30()", type_label=expression_statement];
570 [label="101_ function execute(\n        address _to, \n        uint256 _value, \n        uint256 _fee, \n        bytes calldata _signature\n    ) nonReentrant external {\n        require(tx.origin == relayer, \"Invalid transaction origin\");\n        Marmo marmo = Marmo(msg.sender);\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                _to,\n                _value,\n                _fee\n            )\n        );\n        require(marmo.signer() == ECDSA.recover(hash, _signature), \"Invalid signature\");\n        require(token.transferFrom(msg.sender, _to, _value));\n        require(token.transferFrom(msg.sender, relayer, _fee));\n    }\n570-function_definition-102-120", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=function_definition];
588 [label="106_ nonReentrant\n588-expression_statement-107-107", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
592 [label="107_ require(tx.origin == relayer, \"Invalid transaction origin\");\n592-expression_statement-108-108", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
604 [label="108_ Marmo marmo = Marmo(msg.sender);\n604-new_variable-109-109", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=new_variable];
616 [label="109_ bytes32 hash = keccak256(\n            abi.encodePacked(\n                _to,\n                _value,\n                _fee\n            )\n        );\n616-new_variable-110-116", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=new_variable];
634 [label="116_ require(marmo.signer() == ECDSA.recover(hash, _signature), \"Invalid signature\");\n634-expression_statement-117-117", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
654 [label="117_ require(token.transferFrom(msg.sender, _to, _value));\n654-expression_statement-118-118", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
670 [label="118_ require(token.transferFrom(msg.sender, relayer, _fee));\n670-expression_statement-119-119", method="execute(address _to,uint256 _value,uint256 _fee,bytes calldata _signature)", type_label=expression_statement];
686 [label="120_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n686-function_definition-121-122", method="bug_unchk_send8()", type_label=function_definition];
691 [label="121_ msg.sender.transfer(1 ether);\n691-expression_statement-122-122", method="bug_unchk_send8()", type_label=expression_statement];
701 [label="122_ function setRelayer(address _newRelayer) onlyOwner external {\n        require(_newRelayer != address(0));\n        emit NewRelayer(relayer, _newRelayer);\n        relayer = _newRelayer;\n    }\n701-function_definition-123-127", method="setRelayer(address _newRelayer)", type_label=function_definition];
707 [label="122_ onlyOwner\n707-expression_statement-123-123", method="setRelayer(address _newRelayer)", type_label=expression_statement];
711 [label="123_ require(_newRelayer != address(0));\n711-expression_statement-124-124", method="setRelayer(address _newRelayer)", type_label=expression_statement];
726 [label="125_ relayer = _newRelayer;\n726-expression_statement-126-126", method="setRelayer(address _newRelayer)", type_label=expression_statement];
730 [label="127_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n730-function_definition-128-129", method="bug_unchk_send27()", type_label=function_definition];
735 [label="128_ msg.sender.transfer(1 ether);\n735-expression_statement-129-129", method="bug_unchk_send27()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
47 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 71  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
64 -> 804  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
804 -> 76  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
71 -> 804  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
71 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
76 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 86  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 138  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
131 -> 871  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
871 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 871  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
138 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
142 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
142 -> 882  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
882 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 882  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
169 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
254 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
256 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
274 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
300 -> 305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
509 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
616 -> 634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
634 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
730 -> 735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
