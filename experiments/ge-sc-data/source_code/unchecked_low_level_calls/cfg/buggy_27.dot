digraph  {
13 [label="2_ function totalSupply() external view returns (uint256);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function balanceOf(address who) external view returns (uint256);\n21-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
33 [label="4_ function allowance(address owner, address spender) external view returns (uint256);\n33-function_definition-5-5", method="allowance(address owner,address spender)", type_label=function_definition];
49 [label="5_ function transfer(address to, uint256 value) external returns (bool);\n49-function_definition-6-6", method="transfer(address to,uint256 value)", type_label=function_definition];
64 [label="6_ function approve(address spender, uint256 value) external returns (bool);\n64-function_definition-7-7", method="approve(address spender,uint256 value)", type_label=function_definition];
79 [label="7_ function transferFrom(address from, address to, uint256 value) external returns (bool);\n79-function_definition-8-8", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
129 [label="12_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n129-function_definition-13-20", method="mul(uint256 a,uint256 b)", type_label=function_definition];
146 [label="13_ if_a == 0\n146-if-14-16", method="mul(uint256 a,uint256 b)", type_label=if];
2338 [label="13_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
151 [label="14_ return 0;\n151-return-15-15", method="mul(uint256 a,uint256 b)", type_label=return];
153 [label="16_ uint256 c = a * b;\n153-new_variable-17-17", method="mul(uint256 a,uint256 b)", type_label=new_variable];
161 [label="17_ assert(c / a == b);\n161-expression_statement-18-18", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
170 [label="18_ return c;\n170-return-19-19", method="mul(uint256 a,uint256 b)", type_label=return];
172 [label="20_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n172-function_definition-21-24", method="div(uint256 a,uint256 b)", type_label=function_definition];
189 [label="21_ uint256 c = a / b;\n189-new_variable-22-22", method="div(uint256 a,uint256 b)", type_label=new_variable];
197 [label="22_ return c;\n197-return-23-23", method="div(uint256 a,uint256 b)", type_label=return];
199 [label="24_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n199-function_definition-25-28", method="sub(uint256 a,uint256 b)", type_label=function_definition];
216 [label="25_ assert(b <= a);\n216-expression_statement-26-26", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
223 [label="26_ return a - b;\n223-return-27-27", method="sub(uint256 a,uint256 b)", type_label=return];
227 [label="28_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n227-function_definition-29-33", method="add(uint256 a,uint256 b)", type_label=function_definition];
244 [label="29_ uint256 c = a + b;\n244-new_variable-30-30", method="add(uint256 a,uint256 b)", type_label=new_variable];
252 [label="30_ assert(c >= a);\n252-expression_statement-31-31", method="add(uint256 a,uint256 b)", type_label=expression_statement];
259 [label="31_ return c;\n259-return-32-32", method="add(uint256 a,uint256 b)", type_label=return];
261 [label="33_ function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n    uint256 c = add(a,m);\n    uint256 d = sub(c,1);\n    return mul(div(d,m),m);\n  }\n261-function_definition-34-38", method="ceil(uint256 a,uint256 m)", type_label=function_definition];
278 [label="34_ uint256 c = add(a,m);\n278-new_variable-35-35", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
289 [label="35_ uint256 d = sub(c,1);\n289-new_variable-36-36", method="ceil(uint256 a,uint256 m)", type_label=new_variable];
300 [label="36_ return mul(div(d,m),m);\n300-return-37-37", method="ceil(uint256 a,uint256 m)", type_label=return];
315 [label="40_ address public owner;\n315-new_variable-41-41", method="", type_label=new_variable];
320 [label="41_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n320-function_definition-42-43", method="bug_unchk_send30()", type_label=function_definition];
325 [label="42_ msg.sender.transfer(1 ether);\n325-expression_statement-43-43", method="bug_unchk_send30()", type_label=expression_statement];
347 [label="45_ owner = msg.sender;\n347-expression_statement-46-46", method="", type_label=expression_statement];
353 [label="47_ function bug_unchk_send18() payable public{\n      msg.sender.transfer(1 ether);}\n353-function_definition-48-49", method="bug_unchk_send18()", type_label=function_definition];
358 [label="48_ msg.sender.transfer(1 ether);\n358-expression_statement-49-49", method="bug_unchk_send18()", type_label=expression_statement];
368 [label="49_ modifier onlyOwner() {\n      require(msg.sender == owner);\n      _;\n    }\n368-expression_statement-50-53", method="", type_label=expression_statement];
371 [label="50_ require(msg.sender == owner);\n371-expression_statement-51-51", method="", type_label=expression_statement];
380 [label="51_ _;\n380-expression_statement-52-52", method="", type_label=expression_statement];
382 [label="53_ function transferOwnership(address newOwner) public onlyOwner {\n      require(newOwner != address(0));\n      emit OwnershipTransferred(owner, newOwner);\n      owner = newOwner;\n    }\n382-function_definition-54-58", method="transferOwnership(address newOwner)", type_label=function_definition];
389 [label="53_ onlyOwner\n389-expression_statement-54-54", method="transferOwnership(address newOwner)", type_label=expression_statement];
392 [label="54_ require(newOwner != address(0));\n392-expression_statement-55-55", method="transferOwnership(address newOwner)", type_label=expression_statement];
407 [label="56_ owner = newOwner;\n407-expression_statement-57-57", method="transferOwnership(address newOwner)", type_label=expression_statement];
411 [label="58_ function bug_unchk_send29() payable public{\n      msg.sender.transfer(1 ether);}\n411-function_definition-59-60", method="bug_unchk_send29()", type_label=function_definition];
416 [label="59_ msg.sender.transfer(1 ether);\n416-expression_statement-60-60", method="bug_unchk_send29()", type_label=expression_statement];
432 [label="62_ string private _name;\n432-new_variable-63-63", method="", type_label=new_variable];
437 [label="63_ string private _symbol;\n437-new_variable-64-64", method="", type_label=new_variable];
442 [label="64_ uint8 private _decimals;\n442-new_variable-65-65", method="", type_label=new_variable];
461 [label="66_ _name = name;\n461-expression_statement-67-67", method="", type_label=expression_statement];
465 [label="67_ _symbol = symbol;\n465-expression_statement-68-68", method="", type_label=expression_statement];
469 [label="68_ _decimals = decimals;\n469-expression_statement-69-69", method="", type_label=expression_statement];
473 [label="70_ function bug_unchk_send6() payable public{\n      msg.sender.transfer(1 ether);}\n473-function_definition-71-72", method="bug_unchk_send6()", type_label=function_definition];
478 [label="71_ msg.sender.transfer(1 ether);\n478-expression_statement-72-72", method="bug_unchk_send6()", type_label=expression_statement];
488 [label="72_ function name() public view returns(string memory) {\n    return _name;\n  }\n488-function_definition-73-75", method="name()", type_label=function_definition];
497 [label="73_ return _name;\n497-return-74-74", method="name()", type_label=return];
499 [label="75_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n499-function_definition-76-77", method="bug_unchk_send16()", type_label=function_definition];
504 [label="76_ msg.sender.transfer(1 ether);\n504-expression_statement-77-77", method="bug_unchk_send16()", type_label=expression_statement];
514 [label="77_ function symbol() public view returns(string memory) {\n    return _symbol;\n  }\n514-function_definition-78-80", method="symbol()", type_label=function_definition];
523 [label="78_ return _symbol;\n523-return-79-79", method="symbol()", type_label=return];
525 [label="80_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n525-function_definition-81-82", method="bug_unchk_send24()", type_label=function_definition];
530 [label="81_ msg.sender.transfer(1 ether);\n530-expression_statement-82-82", method="bug_unchk_send24()", type_label=expression_statement];
540 [label="82_ function decimals() public view returns(uint8) {\n    return _decimals;\n  }\n540-function_definition-83-85", method="decimals()", type_label=function_definition];
549 [label="83_ return _decimals;\n549-return-84-84", method="decimals()", type_label=return];
551 [label="85_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n551-function_definition-86-87", method="bug_unchk_send5()", type_label=function_definition];
556 [label="86_ msg.sender.transfer(1 ether);\n556-expression_statement-87-87", method="bug_unchk_send5()", type_label=expression_statement];
580 [label="90_ mapping (address => uint256) private _balances;\n580-new_variable-91-91", method="", type_label=new_variable];
587 [label="91_ mapping (address => mapping (address => uint256)) private _allowed;\n587-new_variable-92-92", method="", type_label=new_variable];
596 [label="92_ string constant tokenName = \"Dan Pan Coin\";\n596-new_variable-93-93", method="", type_label=new_variable];
602 [label="93_ string constant tokenSymbol = \"DPC\";\n602-new_variable-94-94", method="", type_label=new_variable];
608 [label="94_ uint8  constant tokenDecimals = 2;\n608-new_variable-95-95", method="", type_label=new_variable];
613 [label="95_ uint256 _totalSupply = 10000000000;\n613-new_variable-96-96", method="", type_label=new_variable];
618 [label="96_ uint256 public basePercent = 100;\n618-new_variable-97-97", method="", type_label=new_variable];
624 [label="97_ uint256 public dpPercent = 5;\n624-new_variable-98-98", method="", type_label=new_variable];
630 [label="98_ address public DanPanAddress = msg.sender;\n630-new_variable-99-99", method="", type_label=new_variable];
638 [label="99_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n638-function_definition-100-101", method="bug_unchk_send8()", type_label=function_definition];
643 [label="100_ msg.sender.transfer(1 ether);\n643-expression_statement-101-101", method="bug_unchk_send8()", type_label=expression_statement];
663 [label="102_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n663-function_definition-103-104", method="bug_unchk_send27()", type_label=function_definition];
668 [label="103_ msg.sender.transfer(1 ether);\n668-expression_statement-104-104", method="bug_unchk_send27()", type_label=expression_statement];
688 [label="105_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n688-function_definition-106-107", method="bug_unchk_send31()", type_label=function_definition];
693 [label="106_ msg.sender.transfer(1 ether);\n693-expression_statement-107-107", method="bug_unchk_send31()", type_label=expression_statement];
713 [label="108_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n713-function_definition-109-110", method="bug_unchk_send13()", type_label=function_definition];
718 [label="109_ msg.sender.transfer(1 ether);\n718-expression_statement-110-110", method="bug_unchk_send13()", type_label=expression_statement];
738 [label="111_ mapping(address => bool) public whitelistFrom;\n738-new_variable-112-112", method="", type_label=new_variable];
745 [label="112_ mapping(address => bool) public whitelistTo;\n745-new_variable-113-113", method="", type_label=new_variable];
753 [label="113_ ERC20Detailed(tokenName, tokenSymbol, tokenDecimals)\n753-expression_statement-114-114", method="", type_label=expression_statement];
762 [label="114_ _mint(msg.sender, _totalSupply);\n762-expression_statement-115-115", method="", type_label=expression_statement];
771 [label="116_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n771-function_definition-117-118", method="bug_unchk_send15()", type_label=function_definition];
776 [label="117_ msg.sender.transfer(1 ether);\n776-expression_statement-118-118", method="bug_unchk_send15()", type_label=expression_statement];
786 [label="118_ function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n786-function_definition-119-121", method="totalSupply()", type_label=function_definition];
795 [label="119_ return _totalSupply;\n795-return-120-120", method="totalSupply()", type_label=return];
797 [label="121_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n797-function_definition-122-123", method="bug_unchk_send28()", type_label=function_definition];
802 [label="122_ msg.sender.transfer(1 ether);\n802-expression_statement-123-123", method="bug_unchk_send28()", type_label=expression_statement];
812 [label="123_ function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n812-function_definition-124-126", method="balanceOf(address owner)", type_label=function_definition];
825 [label="124_ return _balances[owner];\n825-return-125-125", method="balanceOf(address owner)", type_label=return];
829 [label="126_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n829-function_definition-127-128", method="bug_unchk_send21()", type_label=function_definition];
834 [label="127_ msg.sender.transfer(1 ether);\n834-expression_statement-128-128", method="bug_unchk_send21()", type_label=expression_statement];
844 [label="128_ function allowance(address owner, address spender) public view returns (uint256) {\n    return _allowed[owner][spender];\n  }\n844-function_definition-129-131", method="allowance(address owner,address spender)", type_label=function_definition];
861 [label="129_ return _allowed[owner][spender];\n861-return-130-130", method="allowance(address owner,address spender)", type_label=return];
867 [label="131_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n867-function_definition-132-133", method="bug_unchk_send10()", type_label=function_definition];
872 [label="132_ msg.sender.transfer(1 ether);\n872-expression_statement-133-133", method="bug_unchk_send10()", type_label=expression_statement];
882 [label="133_ function findOnePercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 onePercent = roundValue.mul(basePercent).div(10000);\n    return onePercent;\n  }\n882-function_definition-134-138", method="findOnePercent(uint256 value)", type_label=function_definition];
895 [label="134_ uint256 roundValue = value.ceil(basePercent);\n895-new_variable-135-135", method="findOnePercent(uint256 value)", type_label=new_variable];
906 [label="135_ uint256 onePercent = roundValue.mul(basePercent).div(10000);\n906-new_variable-136-136", method="findOnePercent(uint256 value)", type_label=new_variable];
922 [label="136_ return onePercent;\n922-return-137-137", method="findOnePercent(uint256 value)", type_label=return];
924 [label="138_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n924-function_definition-139-140", method="bug_unchk_send22()", type_label=function_definition];
929 [label="139_ msg.sender.transfer(1 ether);\n929-expression_statement-140-140", method="bug_unchk_send22()", type_label=expression_statement];
939 [label="140_ function findDPPercent(uint256 value) public view returns (uint256)  {\n    uint256 roundValue = value.ceil(basePercent);\n    uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);\n    return DPPercent;\n  }\n939-function_definition-141-145", method="findDPPercent(uint256 value)", type_label=function_definition];
952 [label="141_ uint256 roundValue = value.ceil(basePercent);\n952-new_variable-142-142", method="findDPPercent(uint256 value)", type_label=new_variable];
963 [label="142_ uint256 DPPercent = roundValue.mul(basePercent).div(10000).mul(dpPercent);\n963-new_variable-143-143", method="findDPPercent(uint256 value)", type_label=new_variable];
984 [label="143_ return DPPercent;\n984-return-144-144", method="findDPPercent(uint256 value)", type_label=return];
986 [label="145_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n986-function_definition-146-147", method="bug_unchk_send12()", type_label=function_definition];
991 [label="146_ msg.sender.transfer(1 ether);\n991-expression_statement-147-147", method="bug_unchk_send12()", type_label=expression_statement];
1001 [label="147_ function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n        if (value == 0) {\n            emit Transfer(msg.sender, to, 0);\n            return true;\n        }\n        uint256 tokensToTransfer = value;\n        uint256 tokensToBurn = 0;\n        uint256 tokensToDanPan = 0;\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        if (!_isWhitelisted(msg.sender, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(msg.sender, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n            emit Transfer(msg.sender, DanPanAddress, tokensToDanPan);\n        }\n        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n        emit Transfer(msg.sender, to, tokensToTransfer);\n    return true;\n  }\n1001-function_definition-148-172", method="transfer(address to,uint256 value)", type_label=function_definition];
1017 [label="148_ require(value <= _balances[msg.sender]);\n1017-expression_statement-149-149", method="transfer(address to,uint256 value)", type_label=expression_statement];
1028 [label="149_ require(to != address(0));\n1028-expression_statement-150-150", method="transfer(address to,uint256 value)", type_label=expression_statement];
1037 [label="150_ if_value == 0\n1037-if-151-154", method="transfer(address to,uint256 value)", type_label=if];
3229 [label="150_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1052 [label="152_ return true;\n1052-return-153-153", method="transfer(address to,uint256 value)", type_label=return];
1055 [label="154_ uint256 tokensToTransfer = value;\n1055-new_variable-155-155", method="transfer(address to,uint256 value)", type_label=new_variable];
1061 [label="155_ uint256 tokensToBurn = 0;\n1061-new_variable-156-156", method="transfer(address to,uint256 value)", type_label=new_variable];
1067 [label="156_ uint256 tokensToDanPan = 0;\n1067-new_variable-157-157", method="transfer(address to,uint256 value)", type_label=new_variable];
1073 [label="157_ _balances[msg.sender] = _balances[msg.sender].sub(value);\n1073-expression_statement-158-158", method="transfer(address to,uint256 value)", type_label=expression_statement];
1090 [label="158_ if\n1090-if-159-167", method="transfer(address to,uint256 value)", type_label=if];
3282 [label="158_ end_if", method="transfer(address to,uint256 value)", type_label=end_if];
1101 [label="159_ tokensToBurn = findOnePercent(value);\n1101-expression_statement-160-160", method="transfer(address to,uint256 value)", type_label=expression_statement];
1108 [label="160_ tokensToDanPan = findDPPercent(value);\n1108-expression_statement-161-161", method="transfer(address to,uint256 value)", type_label=expression_statement];
1115 [label="161_ tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n1115-expression_statement-162-162", method="transfer(address to,uint256 value)", type_label=expression_statement];
1129 [label="162_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1129-expression_statement-163-163", method="transfer(address to,uint256 value)", type_label=expression_statement];
1150 [label="164_ _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n1150-expression_statement-165-165", method="transfer(address to,uint256 value)", type_label=expression_statement];
1173 [label="167_ assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n1173-expression_statement-168-168", method="transfer(address to,uint256 value)", type_label=expression_statement];
1190 [label="168_ _balances[to] = _balances[to].add(tokensToTransfer);\n1190-expression_statement-169-169", method="transfer(address to,uint256 value)", type_label=expression_statement];
1213 [label="170_ return true;\n1213-return-171-171", method="transfer(address to,uint256 value)", type_label=return];
1216 [label="172_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n1216-function_definition-173-174", method="bug_unchk_send11()", type_label=function_definition];
1221 [label="173_ msg.sender.transfer(1 ether);\n1221-expression_statement-174-174", method="bug_unchk_send11()", type_label=expression_statement];
1231 [label="174_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n1231-function_definition-175-179", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
1245 [label="175_ for(i < receivers.length;;i++)\n1245-for-176-178", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
3437 [label="175_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
1258 [label="175_ i++\n1258-expression_statement-176-176", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1261 [label="176_ transfer(receivers[i], amounts[i]);\n1261-expression_statement-177-177", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1272 [label="179_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n1272-function_definition-180-181", method="bug_unchk_send1()", type_label=function_definition];
1277 [label="180_ msg.sender.transfer(1 ether);\n1277-expression_statement-181-181", method="bug_unchk_send1()", type_label=expression_statement];
1287 [label="181_ function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n1287-function_definition-182-187", method="approve(address spender,uint256 value)", type_label=function_definition];
1303 [label="182_ require(spender != address(0));\n1303-expression_statement-183-183", method="approve(address spender,uint256 value)", type_label=expression_statement];
1312 [label="183_ _allowed[msg.sender][spender] = value;\n1312-expression_statement-184-184", method="approve(address spender,uint256 value)", type_label=expression_statement];
1332 [label="185_ return true;\n1332-return-186-186", method="approve(address spender,uint256 value)", type_label=return];
1335 [label="187_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n1335-function_definition-188-189", method="bug_unchk_send2()", type_label=function_definition];
1340 [label="188_ msg.sender.transfer(1 ether);\n1340-expression_statement-189-189", method="bug_unchk_send2()", type_label=expression_statement];
1350 [label="189_ function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n        if (value == 0) {\n            emit Transfer(from, to, 0);\n            return true;\n        }\n        uint256 tokensToTransfer = value;\n        uint256 tokensToBurn = 0;\n        uint256 tokensToDanPan = 0;\n        _balances[from] = _balances[from].sub(value);\n        if (!_isWhitelisted(from, to)) {\n              tokensToBurn = findOnePercent(value);\n              tokensToDanPan = findDPPercent(value);\n             tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n            _totalSupply = _totalSupply.sub(tokensToBurn);\n            emit Transfer(from, address(0), tokensToBurn);\n            _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n           emit Transfer(from, DanPanAddress, tokensToDanPan);\n        }\n        assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n	_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, tokensToTransfer);\n    return true;\n  }\n1350-function_definition-190-216", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
1370 [label="190_ require(value <= _balances[from]);\n1370-expression_statement-191-191", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1379 [label="191_ require(value <= _allowed[from][msg.sender]);\n1379-expression_statement-192-192", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1392 [label="192_ require(to != address(0));\n1392-expression_statement-193-193", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1401 [label="193_ if_value == 0\n1401-if-194-197", method="transferFrom(address from,address to,uint256 value)", type_label=if];
3593 [label="193_ end_if", method="transferFrom(address from,address to,uint256 value)", type_label=end_if];
1414 [label="195_ return true;\n1414-return-196-196", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1417 [label="197_ uint256 tokensToTransfer = value;\n1417-new_variable-198-198", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1423 [label="198_ uint256 tokensToBurn = 0;\n1423-new_variable-199-199", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1429 [label="199_ uint256 tokensToDanPan = 0;\n1429-new_variable-200-200", method="transferFrom(address from,address to,uint256 value)", type_label=new_variable];
1435 [label="200_ _balances[from] = _balances[from].sub(value);\n1435-expression_statement-201-201", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1448 [label="201_ if\n1448-if-202-210", method="transferFrom(address from,address to,uint256 value)", type_label=if];
3640 [label="201_ end_if", method="transferFrom(address from,address to,uint256 value)", type_label=end_if];
1457 [label="202_ tokensToBurn = findOnePercent(value);\n1457-expression_statement-203-203", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1464 [label="203_ tokensToDanPan = findDPPercent(value);\n1464-expression_statement-204-204", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1471 [label="204_ tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan);\n1471-expression_statement-205-205", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1485 [label="205_ _totalSupply = _totalSupply.sub(tokensToBurn);\n1485-expression_statement-206-206", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1504 [label="207_ _balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan);\n1504-expression_statement-208-208", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1525 [label="210_ assert(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value);\n1525-expression_statement-211-211", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1542 [label="211_ _balances[to] = _balances[to].add(tokensToTransfer);\n1542-expression_statement-212-212", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1555 [label="212_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n1555-expression_statement-213-213", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
1584 [label="214_ return true;\n1584-return-215-215", method="transferFrom(address from,address to,uint256 value)", type_label=return];
1587 [label="216_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n1587-function_definition-217-218", method="bug_unchk_send17()", type_label=function_definition];
1592 [label="217_ msg.sender.transfer(1 ether);\n1592-expression_statement-218-218", method="bug_unchk_send17()", type_label=expression_statement];
1602 [label="218_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n1602-function_definition-219-224", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
1618 [label="219_ require(spender != address(0));\n1618-expression_statement-220-220", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1627 [label="220_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n1627-expression_statement-221-221", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1665 [label="222_ return true;\n1665-return-223-223", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
1668 [label="224_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n1668-function_definition-225-226", method="bug_unchk_send3()", type_label=function_definition];
1673 [label="225_ msg.sender.transfer(1 ether);\n1673-expression_statement-226-226", method="bug_unchk_send3()", type_label=expression_statement];
1683 [label="226_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    require(spender != address(0));\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n1683-function_definition-227-232", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
1699 [label="227_ require(spender != address(0));\n1699-expression_statement-228-228", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1708 [label="228_ _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n1708-expression_statement-229-229", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1746 [label="230_ return true;\n1746-return-231-231", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
1749 [label="232_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n1749-function_definition-233-234", method="bug_unchk_send9()", type_label=function_definition];
1754 [label="233_ msg.sender.transfer(1 ether);\n1754-expression_statement-234-234", method="bug_unchk_send9()", type_label=expression_statement];
1764 [label="234_ function _mint(address account, uint256 amount) internal {\n    require(amount != 0);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n1764-function_definition-235-239", method="_mint(address account,uint256 amount)", type_label=function_definition];
1776 [label="235_ require(amount != 0);\n1776-expression_statement-236-236", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1783 [label="236_ _balances[account] = _balances[account].add(amount);\n1783-expression_statement-237-237", method="_mint(address account,uint256 amount)", type_label=expression_statement];
1806 [label="239_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n1806-function_definition-240-241", method="bug_unchk_send25()", type_label=function_definition];
1811 [label="240_ msg.sender.transfer(1 ether);\n1811-expression_statement-241-241", method="bug_unchk_send25()", type_label=expression_statement];
1821 [label="241_ function burn(uint256 amount) external {\n    _burn(msg.sender, amount);\n  }\n1821-function_definition-242-244", method="burn(uint256 amount)", type_label=function_definition];
1829 [label="242_ _burn(msg.sender, amount);\n1829-expression_statement-243-243", method="burn(uint256 amount)", type_label=expression_statement];
1838 [label="244_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n1838-function_definition-245-246", method="bug_unchk_send19()", type_label=function_definition];
1843 [label="245_ msg.sender.transfer(1 ether);\n1843-expression_statement-246-246", method="bug_unchk_send19()", type_label=expression_statement];
1853 [label="246_ function _burn(address account, uint256 amount) internal {\n    require(amount != 0);\n    require(amount <= _balances[account]);\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n1853-function_definition-247-253", method="_burn(address account,uint256 amount)", type_label=function_definition];
1865 [label="247_ require(amount != 0);\n1865-expression_statement-248-248", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1872 [label="248_ require(amount <= _balances[account]);\n1872-expression_statement-249-249", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1881 [label="249_ _totalSupply = _totalSupply.sub(amount);\n1881-expression_statement-250-250", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1890 [label="250_ _balances[account] = _balances[account].sub(amount);\n1890-expression_statement-251-251", method="_burn(address account,uint256 amount)", type_label=expression_statement];
1913 [label="253_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n1913-function_definition-254-255", method="bug_unchk_send26()", type_label=function_definition];
1918 [label="254_ msg.sender.transfer(1 ether);\n1918-expression_statement-255-255", method="bug_unchk_send26()", type_label=expression_statement];
1928 [label="255_ function burnFrom(address account, uint256 amount) external {\n    require(amount <= _allowed[account][msg.sender]);\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n    _burn(account, amount);\n  }\n1928-function_definition-256-260", method="burnFrom(address account,uint256 amount)", type_label=function_definition];
1940 [label="256_ require(amount <= _allowed[account][msg.sender]);\n1940-expression_statement-257-257", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
1953 [label="257_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n1953-expression_statement-258-258", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
1974 [label="258_ _burn(account, amount);\n1974-expression_statement-259-259", method="burnFrom(address account,uint256 amount)", type_label=expression_statement];
1981 [label="260_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n1981-function_definition-261-262", method="bug_unchk_send20()", type_label=function_definition];
1986 [label="261_ msg.sender.transfer(1 ether);\n1986-expression_statement-262-262", method="bug_unchk_send20()", type_label=expression_statement];
1996 [label="262_ function NewDanPanAddress(address newDanPanaddress) external onlyOwner {\n    require(newDanPanaddress != address(0));\n      emit DanPanAddressChanged(DanPanAddress, newDanPanaddress);\n      DanPanAddress = newDanPanaddress;\n  }\n1996-function_definition-263-267", method="NewDanPanAddress(address newDanPanaddress)", type_label=function_definition];
2003 [label="262_ onlyOwner\n2003-expression_statement-263-263", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2006 [label="263_ require(newDanPanaddress != address(0));\n2006-expression_statement-264-264", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2021 [label="265_ DanPanAddress = newDanPanaddress;\n2021-expression_statement-266-266", method="NewDanPanAddress(address newDanPanaddress)", type_label=expression_statement];
2025 [label="267_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n2025-function_definition-268-269", method="bug_unchk_send32()", type_label=function_definition];
2030 [label="268_ msg.sender.transfer(1 ether);\n2030-expression_statement-269-269", method="bug_unchk_send32()", type_label=expression_statement];
2040 [label="269_ function NewDanPanPercent(uint256 newDanPanpercent) external onlyOwner {\n      emit DanPanPercentChanged(dpPercent, newDanPanpercent);\n      dpPercent = newDanPanpercent;\n  }\n2040-function_definition-270-273", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=function_definition];
2047 [label="269_ onlyOwner\n2047-expression_statement-270-270", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=expression_statement];
2056 [label="271_ dpPercent = newDanPanpercent;\n2056-expression_statement-272-272", method="NewDanPanPercent(uint256 newDanPanpercent)", type_label=expression_statement];
2060 [label="273_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n2060-function_definition-274-275", method="bug_unchk_send4()", type_label=function_definition];
2065 [label="274_ msg.sender.transfer(1 ether);\n2065-expression_statement-275-275", method="bug_unchk_send4()", type_label=expression_statement];
2075 [label="275_ function _isWhitelisted(address _from, address _to) internal view returns (bool) {\n        return whitelistFrom[_from]||whitelistTo[_to];\n}\n2075-function_definition-276-278", method="_isWhitelisted(address _from,address _to)", type_label=function_definition];
2092 [label="276_ return whitelistFrom[_from]||whitelistTo[_to];\n2092-return-277-277", method="_isWhitelisted(address _from,address _to)", type_label=return];
2100 [label="278_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n2100-function_definition-279-280", method="bug_unchk_send7()", type_label=function_definition];
2105 [label="279_ msg.sender.transfer(1 ether);\n2105-expression_statement-280-280", method="bug_unchk_send7()", type_label=expression_statement];
2115 [label="280_ function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner {\n        emit WhitelistTo(_addr, _whitelisted);\n        whitelistTo[_addr] = _whitelisted;\n    }\n2115-function_definition-281-284", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=function_definition];
2126 [label="280_ onlyOwner\n2126-expression_statement-281-281", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=expression_statement];
2135 [label="282_ whitelistTo[_addr] = _whitelisted;\n2135-expression_statement-283-283", method="setWhitelistedTo(address _addr,bool _whitelisted)", type_label=expression_statement];
2141 [label="284_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n2141-function_definition-285-286", method="bug_unchk_send23()", type_label=function_definition];
2146 [label="285_ msg.sender.transfer(1 ether);\n2146-expression_statement-286-286", method="bug_unchk_send23()", type_label=expression_statement];
2156 [label="286_ function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner {\n        emit WhitelistFrom(_addr, _whitelisted);\n        whitelistFrom[_addr] = _whitelisted;\n}\n2156-function_definition-287-290", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=function_definition];
2167 [label="286_ onlyOwner\n2167-expression_statement-287-287", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=expression_statement];
2176 [label="288_ whitelistFrom[_addr] = _whitelisted;\n2176-expression_statement-289-289", method="setWhitelistedFrom(address _addr,bool _whitelisted)", type_label=expression_statement];
2182 [label="290_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n2182-function_definition-291-292", method="bug_unchk_send14()", type_label=function_definition];
2187 [label="291_ msg.sender.transfer(1 ether);\n2187-expression_statement-292-292", method="bug_unchk_send14()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
129 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
146 -> 2338  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2338 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 2338  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
151 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
153 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
172 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
189 -> 197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
199 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
227 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
261 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
320 -> 325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
499 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
514 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
525 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
551 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
608 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
624 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
738 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
771 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
797 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
829 -> 834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
867 -> 872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
895 -> 906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
906 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
924 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
986 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1001 -> 1017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1028 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 3229  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3229 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 3229  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1052 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1055 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 1067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1067 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1073 -> 1090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1101  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1090 -> 3282  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1101 -> 1108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1108 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1115 -> 1129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1173 -> 1190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1213 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1216 -> 1221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1245 -> 1261  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1245 -> 3437  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3437 -> 1272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1258 -> 1245  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1261 -> 1258  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1272 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1287 -> 1303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1303 -> 1312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1335 -> 1340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 1370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1370 -> 1379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1379 -> 1392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1401 -> 3593  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3593 -> 1417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1414 -> 3593  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1414 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1417 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 1429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1429 -> 1435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1435 -> 1448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 1457  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1448 -> 3640  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1457 -> 1464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1464 -> 1471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1471 -> 1485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1525 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 1555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1584 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1587 -> 1592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1602 -> 1618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1618 -> 1627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1665 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1668 -> 1673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1683 -> 1699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1699 -> 1708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1746 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1749 -> 1754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1764 -> 1776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1776 -> 1783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1806 -> 1811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1821 -> 1829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1838 -> 1843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1853 -> 1865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1865 -> 1872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1872 -> 1881  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1881 -> 1890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1913 -> 1918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1928 -> 1940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1940 -> 1953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1953 -> 1974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1981 -> 1986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1996 -> 2006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2025 -> 2030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2040 -> 2056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2060 -> 2065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2075 -> 2092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2092 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2100 -> 2105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2115 -> 2135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2141 -> 2146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2156 -> 2176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2182 -> 2187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
