digraph  {
13 [label="2_ function totalSupply() public view returns (uint);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
21 [label="3_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n21-function_definition-4-5", method="bug_unchk_send21()", type_label=function_definition];
26 [label="4_ msg.sender.transfer(1 ether);\n26-expression_statement-5-5", method="bug_unchk_send21()", type_label=expression_statement];
36 [label="5_ function balanceOf(address tokenOwner) public view returns (uint balance);\n36-function_definition-6-6", method="balanceOf(address tokenOwner)", type_label=function_definition];
49 [label="6_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n49-function_definition-7-8", method="bug_unchk_send10()", type_label=function_definition];
54 [label="7_ msg.sender.transfer(1 ether);\n54-expression_statement-8-8", method="bug_unchk_send10()", type_label=expression_statement];
64 [label="8_ function transfer(address to, uint tokens) public returns (bool success);\n64-function_definition-9-9", method="transfer(address to,uint tokens)", type_label=function_definition];
80 [label="9_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n80-function_definition-10-11", method="bug_unchk_send22()", type_label=function_definition];
85 [label="10_ msg.sender.transfer(1 ether);\n85-expression_statement-11-11", method="bug_unchk_send22()", type_label=expression_statement];
95 [label="11_ function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n95-function_definition-12-12", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
112 [label="12_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n112-function_definition-13-14", method="bug_unchk_send12()", type_label=function_definition];
117 [label="13_ msg.sender.transfer(1 ether);\n117-expression_statement-14-14", method="bug_unchk_send12()", type_label=expression_statement];
127 [label="14_ function approve(address spender, uint tokens) public returns (bool success);\n127-function_definition-15-15", method="approve(address spender,uint tokens)", type_label=function_definition];
143 [label="15_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n143-function_definition-16-17", method="bug_unchk_send11()", type_label=function_definition];
148 [label="16_ msg.sender.transfer(1 ether);\n148-expression_statement-17-17", method="bug_unchk_send11()", type_label=expression_statement];
158 [label="17_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n158-function_definition-18-18", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
178 [label="18_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n178-function_definition-19-20", method="bug_unchk_send1()", type_label=function_definition];
183 [label="19_ msg.sender.transfer(1 ether);\n183-expression_statement-20-20", method="bug_unchk_send1()", type_label=expression_statement];
227 [label="24_ string public name = \"Acunar\";\n227-new_variable-25-25", method="", type_label=new_variable];
234 [label="25_ string public symbol = \"ACN\";\n234-new_variable-26-26", method="", type_label=new_variable];
241 [label="26_ uint public decimals = 0;\n241-new_variable-27-27", method="", type_label=new_variable];
247 [label="27_ uint public supply;\n247-new_variable-28-28", method="", type_label=new_variable];
252 [label="28_ address public founder;\n252-new_variable-29-29", method="", type_label=new_variable];
257 [label="29_ mapping(address => uint) public balances;\n257-new_variable-30-30", method="", type_label=new_variable];
264 [label="30_ mapping(address => mapping(address => uint)) allowed;\n264-new_variable-31-31", method="", type_label=new_variable];
302 [label="34_ supply = 200000000;\n302-expression_statement-35-35", method="", type_label=expression_statement];
306 [label="35_ founder = msg.sender;\n306-expression_statement-36-36", method="", type_label=expression_statement];
312 [label="36_ balances[founder] = supply;\n312-expression_statement-37-37", method="", type_label=expression_statement];
318 [label="38_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n318-function_definition-39-40", method="bug_unchk_send2()", type_label=function_definition];
323 [label="39_ msg.sender.transfer(1 ether);\n323-expression_statement-40-40", method="bug_unchk_send2()", type_label=expression_statement];
333 [label="40_ function allowance(address tokenOwner, address spender) view public returns(uint){\n        return allowed[tokenOwner][spender];\n    }\n333-function_definition-41-43", method="allowance(address tokenOwner,address spender)", type_label=function_definition];
350 [label="41_ return allowed[tokenOwner][spender];\n350-return-42-42", method="allowance(address tokenOwner,address spender)", type_label=return];
356 [label="43_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n356-function_definition-44-45", method="bug_unchk_send17()", type_label=function_definition];
361 [label="44_ msg.sender.transfer(1 ether);\n361-expression_statement-45-45", method="bug_unchk_send17()", type_label=expression_statement];
371 [label="45_ function approve(address spender, uint tokens) public returns(bool){\n        require(balances[msg.sender] >= tokens);\n        require(tokens > 0);\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n371-function_definition-46-52", method="approve(address spender,uint tokens)", type_label=function_definition];
387 [label="46_ require(balances[msg.sender] >= tokens);\n387-expression_statement-47-47", method="approve(address spender,uint tokens)", type_label=expression_statement];
398 [label="47_ require(tokens > 0);\n398-expression_statement-48-48", method="approve(address spender,uint tokens)", type_label=expression_statement];
405 [label="48_ allowed[msg.sender][spender] = tokens;\n405-expression_statement-49-49", method="approve(address spender,uint tokens)", type_label=expression_statement];
425 [label="50_ return true;\n425-return-51-51", method="approve(address spender,uint tokens)", type_label=return];
428 [label="52_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n428-function_definition-53-54", method="bug_unchk_send3()", type_label=function_definition];
433 [label="53_ msg.sender.transfer(1 ether);\n433-expression_statement-54-54", method="bug_unchk_send3()", type_label=expression_statement];
443 [label="54_ function transferFrom(address from, address to, uint tokens) public returns(bool){\n        require(allowed[from][to] >= tokens);\n        require(balances[from] >= tokens);\n        balances[from] -= tokens;\n        balances[to] += tokens;\n        allowed[from][to] -= tokens;\n        return true;\n    }\n443-function_definition-55-62", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
463 [label="55_ require(allowed[from][to] >= tokens);\n463-expression_statement-56-56", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
474 [label="56_ require(balances[from] >= tokens);\n474-expression_statement-57-57", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
483 [label="57_ balances[from] -= tokens;\n483-expression_statement-58-58", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
489 [label="58_ balances[to] += tokens;\n489-expression_statement-59-59", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
495 [label="59_ allowed[from][to] -= tokens;\n495-expression_statement-60-60", method="transferFrom(address from,address to,uint tokens)", type_label=expression_statement];
503 [label="60_ return true;\n503-return-61-61", method="transferFrom(address from,address to,uint tokens)", type_label=return];
506 [label="62_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n506-function_definition-63-64", method="bug_unchk_send9()", type_label=function_definition];
511 [label="63_ msg.sender.transfer(1 ether);\n511-expression_statement-64-64", method="bug_unchk_send9()", type_label=expression_statement];
521 [label="64_ function totalSupply() public view returns (uint){\n        return supply;\n    }\n521-function_definition-65-67", method="totalSupply()", type_label=function_definition];
530 [label="65_ return supply;\n530-return-66-66", method="totalSupply()", type_label=return];
532 [label="67_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n532-function_definition-68-69", method="bug_unchk_send25()", type_label=function_definition];
537 [label="68_ msg.sender.transfer(1 ether);\n537-expression_statement-69-69", method="bug_unchk_send25()", type_label=expression_statement];
547 [label="69_ function balanceOf(address tokenOwner) public view returns (uint balance){\n         return balances[tokenOwner];\n     }\n547-function_definition-70-72", method="balanceOf(address tokenOwner)", type_label=function_definition];
561 [label="70_ return balances[tokenOwner];\n561-return-71-71", method="balanceOf(address tokenOwner)", type_label=return];
565 [label="72_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n565-function_definition-73-74", method="bug_unchk_send19()", type_label=function_definition];
570 [label="73_ msg.sender.transfer(1 ether);\n570-expression_statement-74-74", method="bug_unchk_send19()", type_label=expression_statement];
580 [label="74_ function transfer(address to, uint tokens) public returns (bool success){\n         require(balances[msg.sender] >= tokens && tokens > 0);\n         balances[to] += tokens;\n         balances[msg.sender] -= tokens;\n         emit Transfer(msg.sender, to, tokens);\n         return true;\n     }\n580-function_definition-75-81", method="transfer(address to,uint tokens)", type_label=function_definition];
597 [label="75_ require(balances[msg.sender] >= tokens && tokens > 0);\n597-expression_statement-76-76", method="transfer(address to,uint tokens)", type_label=expression_statement];
612 [label="76_ balances[to] += tokens;\n612-expression_statement-77-77", method="transfer(address to,uint tokens)", type_label=expression_statement];
618 [label="77_ balances[msg.sender] -= tokens;\n618-expression_statement-78-78", method="transfer(address to,uint tokens)", type_label=expression_statement];
636 [label="79_ return true;\n636-return-80-80", method="transfer(address to,uint tokens)", type_label=return];
639 [label="81_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n639-function_definition-82-83", method="bug_unchk_send26()", type_label=function_definition];
644 [label="82_ msg.sender.transfer(1 ether);\n644-expression_statement-83-83", method="bug_unchk_send26()", type_label=expression_statement];
660 [label="85_ address public admin;\n660-new_variable-86-86", method="", type_label=new_variable];
665 [label="86_ function bug_unchk_send18() payable public{\n      msg.sender.transfer(1 ether);}\n665-function_definition-87-88", method="bug_unchk_send18()", type_label=function_definition];
670 [label="87_ msg.sender.transfer(1 ether);\n670-expression_statement-88-88", method="bug_unchk_send18()", type_label=expression_statement];
680 [label="88_ address payable public deposit;\n680-new_variable-89-89", method="", type_label=new_variable];
685 [label="89_ function bug_unchk_send29() payable public{\n      msg.sender.transfer(1 ether);}\n685-function_definition-90-91", method="bug_unchk_send29()", type_label=function_definition];
690 [label="90_ msg.sender.transfer(1 ether);\n690-expression_statement-91-91", method="bug_unchk_send29()", type_label=expression_statement];
700 [label="91_ uint tokenPrice = 0.0001 ether;\n700-new_variable-92-92", method="", type_label=new_variable];
706 [label="92_ function bug_unchk_send6() payable public{\n      msg.sender.transfer(1 ether);}\n706-function_definition-93-94", method="bug_unchk_send6()", type_label=function_definition];
711 [label="93_ msg.sender.transfer(1 ether);\n711-expression_statement-94-94", method="bug_unchk_send6()", type_label=expression_statement];
721 [label="94_ uint public hardCap =21000 ether;\n721-new_variable-95-95", method="", type_label=new_variable];
728 [label="95_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n728-function_definition-96-97", method="bug_unchk_send16()", type_label=function_definition];
733 [label="96_ msg.sender.transfer(1 ether);\n733-expression_statement-97-97", method="bug_unchk_send16()", type_label=expression_statement];
743 [label="97_ uint public raisedAmount;\n743-new_variable-98-98", method="", type_label=new_variable];
748 [label="98_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n748-function_definition-99-100", method="bug_unchk_send24()", type_label=function_definition];
753 [label="99_ msg.sender.transfer(1 ether);\n753-expression_statement-100-100", method="bug_unchk_send24()", type_label=expression_statement];
763 [label="100_ uint public saleStart = now;\n763-new_variable-101-101", method="", type_label=new_variable];
769 [label="101_ uint public saleEnd = now + 14515200;\n769-new_variable-102-102", method="", type_label=new_variable];
777 [label="102_ uint public coinTradeStart = saleEnd + 15120000;\n777-new_variable-103-103", method="", type_label=new_variable];
785 [label="103_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n785-function_definition-104-105", method="bug_unchk_send5()", type_label=function_definition];
790 [label="104_ msg.sender.transfer(1 ether);\n790-expression_statement-105-105", method="bug_unchk_send5()", type_label=expression_statement];
800 [label="105_ uint public maxInvestment = 30 ether;\n800-new_variable-106-106", method="", type_label=new_variable];
807 [label="106_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n807-function_definition-107-108", method="bug_unchk_send15()", type_label=function_definition];
812 [label="107_ msg.sender.transfer(1 ether);\n812-expression_statement-108-108", method="bug_unchk_send15()", type_label=expression_statement];
822 [label="108_ uint public minInvestment = 0.1 ether;\n822-new_variable-109-109", method="", type_label=new_variable];
835 [label="110_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n835-function_definition-111-112", method="bug_unchk_send28()", type_label=function_definition];
840 [label="111_ msg.sender.transfer(1 ether);\n840-expression_statement-112-112", method="bug_unchk_send28()", type_label=expression_statement];
850 [label="112_ State public ieoState;\n850-new_variable-113-113", method="", type_label=new_variable];
856 [label="113_ modifier onlyAdmin(){\n        require(msg.sender == admin);\n        _;\n    }\n856-expression_statement-114-117", method="", type_label=expression_statement];
859 [label="114_ require(msg.sender == admin);\n859-expression_statement-115-115", method="", type_label=expression_statement];
868 [label="115_ _;\n868-expression_statement-116-116", method="", type_label=expression_statement];
870 [label="117_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n870-function_definition-118-119", method="bug_unchk_send13()", type_label=function_definition];
875 [label="118_ msg.sender.transfer(1 ether);\n875-expression_statement-119-119", method="bug_unchk_send13()", type_label=expression_statement];
905 [label="121_ deposit = _deposit;\n905-expression_statement-122-122", method="", type_label=expression_statement];
909 [label="122_ admin = msg.sender;\n909-expression_statement-123-123", method="", type_label=expression_statement];
915 [label="123_ ieoState = State.beforeStart;\n915-expression_statement-124-124", method="", type_label=expression_statement];
921 [label="125_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n921-function_definition-126-127", method="bug_unchk_send20()", type_label=function_definition];
926 [label="126_ msg.sender.transfer(1 ether);\n926-expression_statement-127-127", method="bug_unchk_send20()", type_label=expression_statement];
936 [label="127_ function halt() public onlyAdmin{\n        ieoState = State.halted;\n    }\n936-function_definition-128-130", method="halt()", type_label=function_definition];
939 [label="127_ onlyAdmin\n939-expression_statement-128-128", method="halt()", type_label=expression_statement];
942 [label="128_ ieoState = State.halted;\n942-expression_statement-129-129", method="halt()", type_label=expression_statement];
948 [label="130_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n948-function_definition-131-132", method="bug_unchk_send32()", type_label=function_definition];
953 [label="131_ msg.sender.transfer(1 ether);\n953-expression_statement-132-132", method="bug_unchk_send32()", type_label=expression_statement];
963 [label="132_ function unhalt() public onlyAdmin{\n        ieoState = State.running;\n    }\n963-function_definition-133-135", method="unhalt()", type_label=function_definition];
966 [label="132_ onlyAdmin\n966-expression_statement-133-133", method="unhalt()", type_label=expression_statement];
969 [label="133_ ieoState = State.running;\n969-expression_statement-134-134", method="unhalt()", type_label=expression_statement];
975 [label="135_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n975-function_definition-136-137", method="bug_unchk_send4()", type_label=function_definition];
980 [label="136_ msg.sender.transfer(1 ether);\n980-expression_statement-137-137", method="bug_unchk_send4()", type_label=expression_statement];
990 [label="137_ function changeDepositAddress(address payable newDeposit) public onlyAdmin{\n        deposit = newDeposit;\n    }\n990-function_definition-138-140", method="changeDepositAddress(address payable newDeposit)", type_label=function_definition];
997 [label="137_ onlyAdmin\n997-expression_statement-138-138", method="changeDepositAddress(address payable newDeposit)", type_label=expression_statement];
1000 [label="138_ deposit = newDeposit;\n1000-expression_statement-139-139", method="changeDepositAddress(address payable newDeposit)", type_label=expression_statement];
1004 [label="140_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1004-function_definition-141-142", method="bug_unchk_send7()", type_label=function_definition];
1009 [label="141_ msg.sender.transfer(1 ether);\n1009-expression_statement-142-142", method="bug_unchk_send7()", type_label=expression_statement];
1019 [label="142_ function getCurrentState() public view returns(State){\n        if(ieoState == State.halted){\n            return State.halted;\n        }else if(block.timestamp < saleStart){\n            return State.beforeStart;\n        }else if(block.timestamp >= saleStart && block.timestamp <= saleEnd){\n            return State.running;\n        }else{\n            return State.afterEnd;\n        }\n    }\n1019-function_definition-143-153", method="getCurrentState()", type_label=function_definition];
1029 [label="143_ if_ieoState == State.halted\n1029-if-144-152", method="getCurrentState()", type_label=if];
2399 [label="143_ end_if", method="getCurrentState()", type_label=end_if];
1036 [label="144_ return State.halted;\n1036-return-145-145", method="getCurrentState()", type_label=return];
1040 [label="145_ if_block.timestamp < saleStart\n1040-if-146-152", method="getCurrentState()", type_label=if];
1047 [label="146_ return State.beforeStart;\n1047-return-147-147", method="getCurrentState()", type_label=return];
1051 [label="147_ if_block.timestamp >= saleStart && block.timestamp <= saleEnd\n1051-if-148-152", method="getCurrentState()", type_label=if];
1064 [label="148_ return State.running;\n1064-return-149-149", method="getCurrentState()", type_label=return];
1069 [label="150_ return State.afterEnd;\n1069-return-151-151", method="getCurrentState()", type_label=return];
1073 [label="153_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n1073-function_definition-154-155", method="bug_unchk_send23()", type_label=function_definition];
1078 [label="154_ msg.sender.transfer(1 ether);\n1078-expression_statement-155-155", method="bug_unchk_send23()", type_label=expression_statement];
1088 [label="155_ function invest() payable public returns(bool){\n        ieoState = getCurrentState();\n        require(ieoState == State.running);\n        require(msg.value >= minInvestment && msg.value <= maxInvestment);\n        uint tokens = msg.value / tokenPrice;\n        require(raisedAmount + msg.value <= hardCap);\n        raisedAmount += msg.value;\n        balances[msg.sender] += tokens;\n        balances[founder] -= tokens;\n        deposit.transfer(msg.value); \n        emit Invest(msg.sender, msg.value, tokens);\n        return true;\n    }\n1088-function_definition-156-168", method="invest()", type_label=function_definition];
1097 [label="156_ ieoState = getCurrentState();\n1097-expression_statement-157-157", method="invest()", type_label=expression_statement];
1102 [label="157_ require(ieoState == State.running);\n1102-expression_statement-158-158", method="invest()", type_label=expression_statement];
1111 [label="158_ require(msg.value >= minInvestment && msg.value <= maxInvestment);\n1111-expression_statement-159-159", method="invest()", type_label=expression_statement];
1126 [label="159_ uint tokens = msg.value / tokenPrice;\n1126-new_variable-160-160", method="invest()", type_label=new_variable];
1136 [label="160_ require(raisedAmount + msg.value <= hardCap);\n1136-expression_statement-161-161", method="invest()", type_label=expression_statement];
1147 [label="161_ raisedAmount += msg.value;\n1147-expression_statement-162-162", method="invest()", type_label=expression_statement];
1153 [label="162_ balances[msg.sender] += tokens;\n1153-expression_statement-163-163", method="invest()", type_label=expression_statement];
1161 [label="163_ balances[founder] -= tokens;\n1161-expression_statement-164-164", method="invest()", type_label=expression_statement];
1167 [label="164_ deposit.transfer(msg.value);\n1167-expression_statement-165-165", method="invest()", type_label=expression_statement];
1188 [label="166_ return true;\n1188-return-167-167", method="invest()", type_label=return];
1191 [label="168_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n1191-function_definition-169-170", method="bug_unchk_send14()", type_label=function_definition];
1196 [label="169_ msg.sender.transfer(1 ether);\n1196-expression_statement-170-170", method="bug_unchk_send14()", type_label=expression_statement];
1210 [label="171_ invest();\n1210-expression_statement-172-172", method="", type_label=expression_statement];
1213 [label="173_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n1213-function_definition-174-175", method="bug_unchk_send30()", type_label=function_definition];
1218 [label="174_ msg.sender.transfer(1 ether);\n1218-expression_statement-175-175", method="bug_unchk_send30()", type_label=expression_statement];
1228 [label="175_ function burn() public returns(bool){\n        ieoState = getCurrentState();\n        require(ieoState == State.afterEnd);\n        balances[founder] = 0;\n    }\n1228-function_definition-176-180", method="burn()", type_label=function_definition];
1236 [label="176_ ieoState = getCurrentState();\n1236-expression_statement-177-177", method="burn()", type_label=expression_statement];
1241 [label="177_ require(ieoState == State.afterEnd);\n1241-expression_statement-178-178", method="burn()", type_label=expression_statement];
1250 [label="178_ balances[founder] = 0;\n1250-expression_statement-179-179", method="burn()", type_label=expression_statement];
1256 [label="180_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n1256-function_definition-181-182", method="bug_unchk_send8()", type_label=function_definition];
1261 [label="181_ msg.sender.transfer(1 ether);\n1261-expression_statement-182-182", method="bug_unchk_send8()", type_label=expression_statement];
1271 [label="182_ function transfer(address to, uint value) public returns(bool){\n        require(block.timestamp > coinTradeStart);\n        super.transfer(to, value);\n    }\n1271-function_definition-183-186", method="transfer(address to,uint value)", type_label=function_definition];
1287 [label="183_ require(block.timestamp > coinTradeStart);\n1287-expression_statement-184-184", method="transfer(address to,uint value)", type_label=expression_statement];
1296 [label="184_ super.transfer(to, value);\n1296-expression_statement-185-185", method="transfer(address to,uint value)", type_label=expression_statement];
1305 [label="186_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n1305-function_definition-187-188", method="bug_unchk_send27()", type_label=function_definition];
1310 [label="187_ msg.sender.transfer(1 ether);\n1310-expression_statement-188-188", method="bug_unchk_send27()", type_label=expression_statement];
1320 [label="188_ function transferFrom(address _from, address _to, uint _value) public returns(bool){\n        require(block.timestamp > coinTradeStart);\n        super.transferFrom(_from, _to, _value);\n    }\n1320-function_definition-189-192", method="transferFrom(address _from,address _to,uint _value)", type_label=function_definition];
1340 [label="189_ require(block.timestamp > coinTradeStart);\n1340-expression_statement-190-190", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
1349 [label="190_ super.transferFrom(_from, _to, _value);\n1349-expression_statement-191-191", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
1360 [label="192_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n1360-function_definition-193-194", method="bug_unchk_send31()", type_label=function_definition];
1365 [label="193_ msg.sender.transfer(1 ether);\n1365-expression_statement-194-194", method="bug_unchk_send31()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
21 -> 26  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
49 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
143 -> 148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
234 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
257 -> 264  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
356 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
398 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
428 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
506 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
530 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
532 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
565 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
639 -> 644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
685 -> 690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
706 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
728 -> 733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
785 -> 790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 856  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
859 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
870 -> 875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
909 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
921 -> 926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
936 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
963 -> 969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
975 -> 980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
990 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1004 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1036  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1029 -> 1040  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2399 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1036 -> 2399  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1036 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1040 -> 1047  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1040 -> 1051  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1047 -> 2399  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1047 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1051 -> 1064  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1051 -> 1069  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1064 -> 2399  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1064 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1069 -> 2399  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1069 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1073 -> 1078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1102 -> 1111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1126 -> 1136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1136 -> 1147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1147 -> 1153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1153 -> 1161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1161 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1188 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1191 -> 1196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1213 -> 1218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 1241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1241 -> 1250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 1287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1287 -> 1296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1305 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1320 -> 1340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1340 -> 1349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1360 -> 1365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
