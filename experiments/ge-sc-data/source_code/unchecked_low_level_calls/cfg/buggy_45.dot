digraph  {
13 [label="2_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n13-function_definition-3-4", method="bug_unchk_send7()", type_label=function_definition];
18 [label="3_ msg.sender.transfer(1 ether);\n18-expression_statement-4-4", method="bug_unchk_send7()", type_label=expression_statement];
34 [label="5_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n34-function_definition-6-7", method="bug_unchk_send23()", type_label=function_definition];
39 [label="6_ msg.sender.transfer(1 ether);\n39-expression_statement-7-7", method="bug_unchk_send23()", type_label=expression_statement];
55 [label="8_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n55-function_definition-9-10", method="bug_unchk_send14()", type_label=function_definition];
60 [label="9_ msg.sender.transfer(1 ether);\n60-expression_statement-10-10", method="bug_unchk_send14()", type_label=expression_statement];
72 [label="11_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n72-function_definition-12-13", method="bug_unchk_send30()", type_label=function_definition];
77 [label="12_ msg.sender.transfer(1 ether);\n77-expression_statement-13-13", method="bug_unchk_send30()", type_label=expression_statement];
93 [label="14_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n93-function_definition-15-16", method="bug_unchk_send8()", type_label=function_definition];
98 [label="15_ msg.sender.transfer(1 ether);\n98-expression_statement-16-16", method="bug_unchk_send8()", type_label=expression_statement];
114 [label="17_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n114-function_definition-18-19", method="bug_unchk_send27()", type_label=function_definition];
119 [label="18_ msg.sender.transfer(1 ether);\n119-expression_statement-19-19", method="bug_unchk_send27()", type_label=expression_statement];
139 [label="20_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n139-function_definition-21-22", method="bug_unchk_send31()", type_label=function_definition];
144 [label="21_ msg.sender.transfer(1 ether);\n144-expression_statement-22-22", method="bug_unchk_send31()", type_label=expression_statement];
164 [label="23_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n164-function_definition-24-25", method="bug_unchk_send13()", type_label=function_definition];
169 [label="24_ msg.sender.transfer(1 ether);\n169-expression_statement-25-25", method="bug_unchk_send13()", type_label=expression_statement];
198 [label="34_ struct Guess {\n        mapping (address => PaidStatus) players;\n        uint guesses_number;\n    }\n198-expression_statement-35-38", method="Guess()", type_label=expression_statement];
211 [label="38_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n211-function_definition-39-40", method="bug_unchk_send24()", type_label=function_definition];
216 [label="39_ msg.sender.transfer(1 ether);\n216-expression_statement-40-40", method="bug_unchk_send24()", type_label=expression_statement];
226 [label="40_ address payable public owner;\n226-new_variable-41-41", method="", type_label=new_variable];
231 [label="41_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n231-function_definition-42-43", method="bug_unchk_send5()", type_label=function_definition];
236 [label="42_ msg.sender.transfer(1 ether);\n236-expression_statement-43-43", method="bug_unchk_send5()", type_label=expression_statement];
246 [label="43_ address public oracle;\n246-new_variable-44-44", method="", type_label=new_variable];
251 [label="44_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n251-function_definition-45-46", method="bug_unchk_send15()", type_label=function_definition];
256 [label="45_ msg.sender.transfer(1 ether);\n256-expression_statement-46-46", method="bug_unchk_send15()", type_label=expression_statement];
266 [label="46_ State public state;\n266-new_variable-47-47", method="", type_label=new_variable];
272 [label="47_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n272-function_definition-48-49", method="bug_unchk_send28()", type_label=function_definition];
277 [label="48_ msg.sender.transfer(1 ether);\n277-expression_statement-49-49", method="bug_unchk_send28()", type_label=expression_statement];
287 [label="49_ mapping (uint => Guess) public guesses;\n287-new_variable-50-50", method="", type_label=new_variable];
295 [label="50_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n295-function_definition-51-52", method="bug_unchk_send21()", type_label=function_definition];
300 [label="51_ msg.sender.transfer(1 ether);\n300-expression_statement-52-52", method="bug_unchk_send21()", type_label=expression_statement];
310 [label="52_ uint256 public bet;\n310-new_variable-53-53", method="", type_label=new_variable];
315 [label="53_ uint256 splitJackpot;\n315-new_variable-54-54", method="", type_label=new_variable];
319 [label="54_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n319-function_definition-55-56", method="bug_unchk_send10()", type_label=function_definition];
324 [label="55_ msg.sender.transfer(1 ether);\n324-expression_statement-56-56", method="bug_unchk_send10()", type_label=expression_statement];
334 [label="56_ uint public result;\n334-new_variable-57-57", method="", type_label=new_variable];
339 [label="57_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n339-function_definition-58-59", method="bug_unchk_send22()", type_label=function_definition];
344 [label="58_ msg.sender.transfer(1 ether);\n344-expression_statement-59-59", method="bug_unchk_send22()", type_label=expression_statement];
354 [label="59_ uint256 public initialPrice;\n354-new_variable-60-60", method="", type_label=new_variable];
359 [label="60_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n359-function_definition-61-62", method="bug_unchk_send12()", type_label=function_definition];
364 [label="61_ msg.sender.transfer(1 ether);\n364-expression_statement-62-62", method="bug_unchk_send12()", type_label=expression_statement];
374 [label="62_ uint256 public finalPrice;\n374-new_variable-63-63", method="", type_label=new_variable];
379 [label="63_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n379-function_definition-64-65", method="bug_unchk_send11()", type_label=function_definition];
384 [label="64_ msg.sender.transfer(1 ether);\n384-expression_statement-65-65", method="bug_unchk_send11()", type_label=expression_statement];
394 [label="65_ uint constant UP = 1;\n394-new_variable-66-66", method="", type_label=new_variable];
399 [label="66_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n399-function_definition-67-68", method="bug_unchk_send1()", type_label=function_definition];
404 [label="67_ msg.sender.transfer(1 ether);\n404-expression_statement-68-68", method="bug_unchk_send1()", type_label=expression_statement];
414 [label="68_ uint constant DOWN = 0;\n414-new_variable-69-69", method="", type_label=new_variable];
419 [label="69_ modifier byPlayer(){\n        require(msg.sender != oracle);\n        _;\n    }\n419-expression_statement-70-73", method="", type_label=expression_statement];
422 [label="70_ require(msg.sender != oracle);\n422-expression_statement-71-71", method="", type_label=expression_statement];
431 [label="71_ _;\n431-expression_statement-72-72", method="", type_label=expression_statement];
433 [label="73_ modifier byOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n433-expression_statement-74-77", method="", type_label=expression_statement];
436 [label="74_ require(msg.sender == owner);\n436-expression_statement-75-75", method="", type_label=expression_statement];
445 [label="75_ _;\n445-expression_statement-76-76", method="", type_label=expression_statement];
447 [label="77_ modifier byOracle(){\n        require(msg.sender == oracle);\n        _;\n    }\n447-expression_statement-78-81", method="", type_label=expression_statement];
450 [label="78_ require(msg.sender == oracle);\n450-expression_statement-79-79", method="", type_label=expression_statement];
459 [label="79_ _;\n459-expression_statement-80-80", method="", type_label=expression_statement];
461 [label="81_ modifier inState(State expected) {\n        require(state == expected);\n        _;\n    }\n461-expression_statement-82-85", method="", type_label=expression_statement];
469 [label="82_ require(state == expected);\n469-expression_statement-83-83", method="", type_label=expression_statement];
476 [label="83_ _;\n476-expression_statement-84-84", method="", type_label=expression_statement];
484 [label="86_ require(_bet > 0);\n484-expression_statement-87-87", method="", type_label=expression_statement];
491 [label="87_ owner = msg.sender;\n491-expression_statement-88-88", method="", type_label=expression_statement];
497 [label="88_ state = State.SETUP;\n497-expression_statement-89-89", method="", type_label=expression_statement];
503 [label="89_ bet = _bet;\n503-expression_statement-90-90", method="", type_label=expression_statement];
511 [label="92_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n511-function_definition-93-94", method="bug_unchk_send2()", type_label=function_definition];
516 [label="93_ msg.sender.transfer(1 ether);\n516-expression_statement-94-94", method="bug_unchk_send2()", type_label=expression_statement];
526 [label="94_ function setOracle(address _oracle) public payable byOwner inState(State.SETUP) {\n        oracle = _oracle;\n        emit OracleSet(oracle);\n    }\n526-function_definition-95-98", method="setOracle(address _oracle)", type_label=function_definition];
534 [label="94_ byOwner\n534-expression_statement-95-95", method="setOracle(address _oracle)", type_label=expression_statement];
536 [label="94_ inState(State.SETUP)\n536-expression_statement-95-95", method="setOracle(address _oracle)", type_label=expression_statement];
543 [label="95_ oracle = _oracle;\n543-expression_statement-96-96", method="setOracle(address _oracle)", type_label=expression_statement];
551 [label="98_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n551-function_definition-99-100", method="bug_unchk_send17()", type_label=function_definition];
556 [label="99_ msg.sender.transfer(1 ether);\n556-expression_statement-100-100", method="bug_unchk_send17()", type_label=expression_statement];
566 [label="100_ function setInitialPrice(uint256 _value) public payable byOracle inState(State.SETUP) {\n        initialPrice = _value;\n        state = State.OPEN;\n        emit GameOpened(initialPrice);\n    }\n566-function_definition-101-105", method="setInitialPrice(uint256 _value)", type_label=function_definition];
574 [label="100_ byOracle\n574-expression_statement-101-101", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
576 [label="100_ inState(State.SETUP)\n576-expression_statement-101-101", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
583 [label="101_ initialPrice = _value;\n583-expression_statement-102-102", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
587 [label="102_ state = State.OPEN;\n587-expression_statement-103-103", method="setInitialPrice(uint256 _value)", type_label=expression_statement];
597 [label="105_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n597-function_definition-106-107", method="bug_unchk_send3()", type_label=function_definition];
602 [label="106_ msg.sender.transfer(1 ether);\n602-expression_statement-107-107", method="bug_unchk_send3()", type_label=expression_statement];
612 [label="107_ function closeGame() public byOwner inState(State.OPEN){\n        state = State.CLOSED;\n        emit GameClosed();\n    }\n612-function_definition-108-111", method="closeGame()", type_label=function_definition];
615 [label="107_ byOwner\n615-expression_statement-108-108", method="closeGame()", type_label=expression_statement];
617 [label="107_ inState(State.OPEN)\n617-expression_statement-108-108", method="closeGame()", type_label=expression_statement];
624 [label="108_ state = State.CLOSED;\n624-expression_statement-109-109", method="closeGame()", type_label=expression_statement];
632 [label="111_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n632-function_definition-112-113", method="bug_unchk_send9()", type_label=function_definition];
637 [label="112_ msg.sender.transfer(1 ether);\n637-expression_statement-113-113", method="bug_unchk_send9()", type_label=expression_statement];
647 [label="113_ function betUp() public payable byPlayer inState(State.OPEN){\n        require(msg.value == (bet*0.001 ether));\n        guesses[UP].guesses_number++;\n        guesses[UP].players[msg.sender] = PaidStatus.NOT_PAID;\n        emit PlayerBet(msg.sender, UP);\n    }\n647-function_definition-114-119", method="betUp()", type_label=function_definition];
651 [label="113_ byPlayer\n651-expression_statement-114-114", method="betUp()", type_label=expression_statement];
653 [label="113_ inState(State.OPEN)\n653-expression_statement-114-114", method="betUp()", type_label=expression_statement];
660 [label="114_ require(msg.value == (bet*0.001 ether));\n660-expression_statement-115-115", method="betUp()", type_label=expression_statement];
673 [label="115_ guesses[UP].guesses_number++;\n673-expression_statement-116-116", method="betUp()", type_label=expression_statement];
674 [label="115_ guesses[UP].guesses_number++\n674-expression_statement-116-116", method="betUp()", type_label=expression_statement];
680 [label="116_ guesses[UP].players[msg.sender] = PaidStatus.NOT_PAID;\n680-expression_statement-117-117", method="betUp()", type_label=expression_statement];
702 [label="119_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n702-function_definition-120-121", method="bug_unchk_send25()", type_label=function_definition];
707 [label="120_ msg.sender.transfer(1 ether);\n707-expression_statement-121-121", method="bug_unchk_send25()", type_label=expression_statement];
717 [label="121_ function betDown() public payable byPlayer inState(State.OPEN){\n        require(msg.value == (bet*0.001 ether));\n        guesses[DOWN].guesses_number++;\n        guesses[DOWN].players[msg.sender] = PaidStatus.NOT_PAID;\n        emit PlayerBet(msg.sender, DOWN);\n    }\n717-function_definition-122-127", method="betDown()", type_label=function_definition];
721 [label="121_ byPlayer\n721-expression_statement-122-122", method="betDown()", type_label=expression_statement];
723 [label="121_ inState(State.OPEN)\n723-expression_statement-122-122", method="betDown()", type_label=expression_statement];
730 [label="122_ require(msg.value == (bet*0.001 ether));\n730-expression_statement-123-123", method="betDown()", type_label=expression_statement];
743 [label="123_ guesses[DOWN].guesses_number++;\n743-expression_statement-124-124", method="betDown()", type_label=expression_statement];
744 [label="123_ guesses[DOWN].guesses_number++\n744-expression_statement-124-124", method="betDown()", type_label=expression_statement];
750 [label="124_ guesses[DOWN].players[msg.sender] = PaidStatus.NOT_PAID;\n750-expression_statement-125-125", method="betDown()", type_label=expression_statement];
772 [label="127_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n772-function_definition-128-129", method="bug_unchk_send19()", type_label=function_definition];
777 [label="128_ msg.sender.transfer(1 ether);\n777-expression_statement-129-129", method="bug_unchk_send19()", type_label=expression_statement];
787 [label="129_ function setFinalPrice(uint256 _value) public payable byOracle inState(State.CLOSED) {\n        finalPrice = _value;\n        emit FinalPriceSet(finalPrice);\n        if(finalPrice > initialPrice){\n            result = UP;\n        }else{\n            result = DOWN;\n        }\n        if(guesses[result].guesses_number > 0){\n            state = State.PLAYERS_WIN;\n            splitJackpot = getBalance()/guesses[result].guesses_number;\n            emit PlayersWin(result, splitJackpot);\n        }else{\n            state = State.OWNER_WIN;\n            emit OwnerWins(owner);\n        }\n    }\n787-function_definition-130-146", method="setFinalPrice(uint256 _value)", type_label=function_definition];
795 [label="129_ byOracle\n795-expression_statement-130-130", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
797 [label="129_ inState(State.CLOSED)\n797-expression_statement-130-130", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
804 [label="130_ finalPrice = _value;\n804-expression_statement-131-131", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
812 [label="132_ if_finalPrice > initialPrice\n812-if-133-137", method="setFinalPrice(uint256 _value)", type_label=if];
1820 [label="132_ end_if", method="setFinalPrice(uint256 _value)", type_label=end_if];
817 [label="133_ result = UP;\n817-expression_statement-134-134", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
822 [label="135_ result = DOWN;\n822-expression_statement-136-136", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
826 [label="137_ if_guesses[result].guesses_number > 0\n826-if-138-145", method="setFinalPrice(uint256 _value)", type_label=if];
1834 [label="137_ end_if", method="setFinalPrice(uint256 _value)", type_label=end_if];
835 [label="138_ state = State.PLAYERS_WIN;\n835-expression_statement-139-139", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
841 [label="139_ splitJackpot = getBalance()/guesses[result].guesses_number;\n841-expression_statement-140-140", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
859 [label="142_ state = State.OWNER_WIN;\n859-expression_statement-143-143", method="setFinalPrice(uint256 _value)", type_label=expression_statement];
869 [label="146_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n869-function_definition-147-148", method="bug_unchk_send26()", type_label=function_definition];
874 [label="147_ msg.sender.transfer(1 ether);\n874-expression_statement-148-148", method="bug_unchk_send26()", type_label=expression_statement];
884 [label="148_ function collectOwnerWinnings() public byOwner inState(State.OWNER_WIN){\n        selfdestruct(owner);\n    }\n884-function_definition-149-151", method="collectOwnerWinnings()", type_label=function_definition];
887 [label="148_ byOwner\n887-expression_statement-149-149", method="collectOwnerWinnings()", type_label=expression_statement];
889 [label="148_ inState(State.OWNER_WIN)\n889-expression_statement-149-149", method="collectOwnerWinnings()", type_label=expression_statement];
896 [label="149_ selfdestruct(owner);\n896-expression_statement-150-150", method="collectOwnerWinnings()", type_label=expression_statement];
901 [label="151_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n901-function_definition-152-153", method="bug_unchk_send20()", type_label=function_definition];
906 [label="152_ msg.sender.transfer(1 ether);\n906-expression_statement-153-153", method="bug_unchk_send20()", type_label=expression_statement];
916 [label="153_ function collectPlayerWinnings() public byPlayer inState(State.PLAYERS_WIN){\n        if(guesses[result].players[msg.sender] == PaidStatus.NOT_PAID){\n            guesses[result].players[msg.sender] = PaidStatus.PAID;\n            msg.sender.transfer(splitJackpot);\n        } else revert();\n    }\n916-function_definition-154-159", method="collectPlayerWinnings()", type_label=function_definition];
919 [label="153_ byPlayer\n919-expression_statement-154-154", method="collectPlayerWinnings()", type_label=expression_statement];
921 [label="153_ inState(State.PLAYERS_WIN)\n921-expression_statement-154-154", method="collectPlayerWinnings()", type_label=expression_statement];
928 [label="154_ if_guesses[result].players[msg.sender] == PaidStatus.NOT_PAID\n928-if-155-158", method="collectPlayerWinnings()", type_label=if];
1936 [label="154_ end_if", method="collectPlayerWinnings()", type_label=end_if];
943 [label="155_ guesses[result].players[msg.sender] = PaidStatus.PAID;\n943-expression_statement-156-156", method="collectPlayerWinnings()", type_label=expression_statement];
957 [label="156_ msg.sender.transfer(splitJackpot);\n957-expression_statement-157-157", method="collectPlayerWinnings()", type_label=expression_statement];
968 [label="159_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n968-function_definition-160-161", method="bug_unchk_send32()", type_label=function_definition];
973 [label="160_ msg.sender.transfer(1 ether);\n973-expression_statement-161-161", method="bug_unchk_send32()", type_label=expression_statement];
983 [label="161_ function getBalance() private view returns (uint256){\n        return address(this).balance;\n    }\n983-function_definition-162-164", method="getBalance()", type_label=function_definition];
992 [label="162_ return address(this).balance;\n992-return-163-163", method="getBalance()", type_label=return];
998 [label="164_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n998-function_definition-165-166", method="bug_unchk_send4()", type_label=function_definition];
1003 [label="165_ msg.sender.transfer(1 ether);\n1003-expression_statement-166-166", method="bug_unchk_send4()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
865;
967;
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 60  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
272 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
310 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
399 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
526 -> 543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
534 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
566 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
717 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
721 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
730 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
743 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 817  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
812 -> 822  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1820 -> 826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
817 -> 1820  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
822 -> 1820  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
826 -> 835  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
826 -> 859  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
835 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
884 -> 896  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
887 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
916 -> 928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 943  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
928 -> 943  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=1, label=neg_next];
1936 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 1936  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
968 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
998 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 1834  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
967 -> 1936  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
