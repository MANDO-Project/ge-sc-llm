digraph  {
13 [label="2_ address payable public owner;\n13-new_variable-3-3", method="", type_label=new_variable];
18 [label="3_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n18-function_definition-4-5", method="bug_unchk_send27()", type_label=function_definition];
23 [label="4_ msg.sender.transfer(1 ether);\n23-expression_statement-5-5", method="bug_unchk_send27()", type_label=expression_statement];
45 [label="7_ owner = msg.sender;\n45-expression_statement-8-8", method="", type_label=expression_statement];
51 [label="9_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n51-function_definition-10-11", method="bug_unchk_send28()", type_label=function_definition];
56 [label="10_ msg.sender.transfer(1 ether);\n56-expression_statement-11-11", method="bug_unchk_send28()", type_label=expression_statement];
66 [label="11_ modifier onlyOwner {\n       require(msg.sender == owner);\n       _;\n   }\n66-expression_statement-12-15", method="", type_label=expression_statement];
69 [label="12_ require(msg.sender == owner);\n69-expression_statement-13-13", method="", type_label=expression_statement];
78 [label="13_ _;\n78-expression_statement-14-14", method="", type_label=expression_statement];
80 [label="15_ function transferOwnership(address payable _newOwner) public onlyOwner {\n       owner = _newOwner;\n   }\n80-function_definition-16-18", method="transferOwnership(address payable _newOwner)", type_label=function_definition];
87 [label="15_ onlyOwner\n87-expression_statement-16-16", method="transferOwnership(address payable _newOwner)", type_label=expression_statement];
90 [label="16_ owner = _newOwner;\n90-expression_statement-17-17", method="transferOwnership(address payable _newOwner)", type_label=expression_statement];
94 [label="18_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n94-function_definition-19-20", method="bug_unchk_send21()", type_label=function_definition];
99 [label="19_ msg.sender.transfer(1 ether);\n99-expression_statement-20-20", method="bug_unchk_send21()", type_label=expression_statement];
112 [label="22_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n112-function_definition-23-27", method="add(uint256 a,uint256 b)", type_label=function_definition];
129 [label="23_ uint256 c = a + b;\n129-new_variable-24-24", method="add(uint256 a,uint256 b)", type_label=new_variable];
137 [label="24_ require(c >= a, \"SafeMath: addition overflow\");\n137-expression_statement-25-25", method="add(uint256 a,uint256 b)", type_label=expression_statement];
147 [label="25_ return c;\n147-return-26-26", method="add(uint256 a,uint256 b)", type_label=return];
149 [label="27_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n149-function_definition-28-32", method="sub(uint256 a,uint256 b)", type_label=function_definition];
166 [label="28_ require(b <= a, \"SafeMath: subtraction overflow\");\n166-expression_statement-29-29", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
176 [label="29_ uint256 c = a - b;\n176-new_variable-30-30", method="sub(uint256 a,uint256 b)", type_label=new_variable];
184 [label="30_ return c;\n184-return-31-31", method="sub(uint256 a,uint256 b)", type_label=return];
186 [label="32_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n186-function_definition-33-40", method="mul(uint256 a,uint256 b)", type_label=function_definition];
203 [label="33_ if_a == 0\n203-if-34-36", method="mul(uint256 a,uint256 b)", type_label=if];
1922 [label="33_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
208 [label="34_ return 0;\n208-return-35-35", method="mul(uint256 a,uint256 b)", type_label=return];
210 [label="36_ uint256 c = a * b;\n210-new_variable-37-37", method="mul(uint256 a,uint256 b)", type_label=new_variable];
218 [label="37_ require(c / a == b, \"SafeMath: multiplication overflow\");\n218-expression_statement-38-38", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
230 [label="38_ return c;\n230-return-39-39", method="mul(uint256 a,uint256 b)", type_label=return];
232 [label="40_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n232-function_definition-41-45", method="div(uint256 a,uint256 b)", type_label=function_definition];
249 [label="41_ require(b > 0, \"SafeMath: division by zero\");\n249-expression_statement-42-42", method="div(uint256 a,uint256 b)", type_label=expression_statement];
259 [label="42_ uint256 c = a / b;\n259-new_variable-43-43", method="div(uint256 a,uint256 b)", type_label=new_variable];
267 [label="43_ return c;\n267-return-44-44", method="div(uint256 a,uint256 b)", type_label=return];
269 [label="45_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n269-function_definition-46-49", method="mod(uint256 a,uint256 b)", type_label=function_definition];
286 [label="46_ require(b != 0, \"SafeMath: modulo by zero\");\n286-expression_statement-47-47", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
296 [label="47_ return a % b;\n296-return-48-48", method="mod(uint256 a,uint256 b)", type_label=return];
311 [label="52_ mapping (address => transferMapping) private _balances;\n311-new_variable-53-53", method="", type_label=new_variable];
319 [label="53_ mapping (address => mapping (address => uint256)) private _allowances;\n319-new_variable-54-54", method="", type_label=new_variable];
328 [label="54_ uint256 private _totalSupply;\n328-new_variable-55-55", method="", type_label=new_variable];
333 [label="55_ function bug_unchk_send18() payable public{\n      msg.sender.transfer(1 ether);}\n333-function_definition-56-57", method="bug_unchk_send18()", type_label=function_definition];
338 [label="56_ msg.sender.transfer(1 ether);\n338-expression_statement-57-57", method="bug_unchk_send18()", type_label=expression_statement];
348 [label="57_ uint256 public _maxTotalSupply;\n348-new_variable-58-58", method="", type_label=new_variable];
353 [label="58_ function bug_unchk_send29() payable public{\n      msg.sender.transfer(1 ether);}\n353-function_definition-59-60", method="bug_unchk_send29()", type_label=function_definition];
358 [label="59_ msg.sender.transfer(1 ether);\n358-expression_statement-60-60", method="bug_unchk_send29()", type_label=expression_statement];
368 [label="60_ string private _name = \"Lollypop\";\n368-new_variable-61-61", method="", type_label=new_variable];
375 [label="61_ function bug_unchk_send6() payable public{\n      msg.sender.transfer(1 ether);}\n375-function_definition-62-63", method="bug_unchk_send6()", type_label=function_definition];
380 [label="62_ msg.sender.transfer(1 ether);\n380-expression_statement-63-63", method="bug_unchk_send6()", type_label=expression_statement];
390 [label="63_ string private _symbol = \"Lolly\";\n390-new_variable-64-64", method="", type_label=new_variable];
397 [label="64_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n397-function_definition-65-66", method="bug_unchk_send16()", type_label=function_definition];
402 [label="65_ msg.sender.transfer(1 ether);\n402-expression_statement-66-66", method="bug_unchk_send16()", type_label=expression_statement];
412 [label="66_ uint8 private _decimals= 18;\n412-new_variable-67-67", method="", type_label=new_variable];
418 [label="67_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n418-function_definition-68-69", method="bug_unchk_send24()", type_label=function_definition];
423 [label="68_ msg.sender.transfer(1 ether);\n423-expression_statement-69-69", method="bug_unchk_send24()", type_label=expression_statement];
433 [label="69_ uint256 public maxAgeOfToken = 365 days;\n433-new_variable-70-70", method="", type_label=new_variable];
440 [label="70_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n440-function_definition-71-72", method="bug_unchk_send5()", type_label=function_definition];
445 [label="71_ msg.sender.transfer(1 ether);\n445-expression_statement-72-72", method="bug_unchk_send5()", type_label=expression_statement];
455 [label="72_ uint256  public minAgeOfToken = 1 days;\n455-new_variable-73-73", method="", type_label=new_variable];
462 [label="73_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n462-function_definition-74-75", method="bug_unchk_send15()", type_label=function_definition];
467 [label="74_ msg.sender.transfer(1 ether);\n467-expression_statement-75-75", method="bug_unchk_send15()", type_label=expression_statement];
477 [label="75_ uint256 public perDayBonus = 100;\n477-new_variable-76-76", method="", type_label=new_variable];
483 [label="76_ struct  transferMapping{\n        uint256 amount;\n        uint256 time;\n    }\n483-expression_statement-77-80", method="transferMapping()", type_label=expression_statement];
495 [label="81_ _maxTotalSupply = 1000000000 * 10 ** 18;\n495-expression_statement-82-82", method="", type_label=expression_statement];
503 [label="82_ _totalSupply =  2000000 * 10 ** 18;\n503-expression_statement-83-83", method="", type_label=expression_statement];
511 [label="83_ _balances[msg.sender].amount = _totalSupply;\n511-expression_statement-84-84", method="", type_label=expression_statement];
521 [label="84_ _balances[msg.sender].time = now;\n521-expression_statement-85-85", method="", type_label=expression_statement];
531 [label="86_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n531-function_definition-87-88", method="bug_unchk_send10()", type_label=function_definition];
536 [label="87_ msg.sender.transfer(1 ether);\n536-expression_statement-88-88", method="bug_unchk_send10()", type_label=expression_statement];
546 [label="88_ function calculateBonus(uint256 timeElasped , uint256 amount) public view  returns(uint256){\n        uint256 totalDays = timeElasped.div(minAgeOfToken);\n        if(totalDays > maxAgeOfToken){\n            totalDays = maxAgeOfToken;\n        }\n        uint256 totalBonus = (totalDays *  amount).div(perDayBonus);\n        return totalBonus;\n    }\n546-function_definition-89-96", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=function_definition];
563 [label="89_ uint256 totalDays = timeElasped.div(minAgeOfToken);\n563-new_variable-90-90", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=new_variable];
574 [label="90_ if_totalDays > maxAgeOfToken\n574-if-91-93", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=if];
2293 [label="90_ end_if", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=end_if];
579 [label="91_ totalDays = maxAgeOfToken;\n579-expression_statement-92-92", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=expression_statement];
583 [label="93_ uint256 totalBonus = (totalDays *  amount).div(perDayBonus);\n583-new_variable-94-94", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=new_variable];
597 [label="94_ return totalBonus;\n597-return-95-95", method="calculateBonus(uint256 timeElasped,uint256 amount)", type_label=return];
599 [label="96_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n599-function_definition-97-98", method="bug_unchk_send22()", type_label=function_definition];
604 [label="97_ msg.sender.transfer(1 ether);\n604-expression_statement-98-98", method="bug_unchk_send22()", type_label=expression_statement];
614 [label="98_ function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        uint256 senderTimeElasped = now - (_balances[sender].time);\n        uint256 recipientTimeElasped = now - (_balances[recipient].time);\n        if(senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)){\n            uint256 bonus = calculateBonus(senderTimeElasped , balanceOf(sender));\n            mint(sender , bonus);\n        }\n        if(recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient){\n             uint256 bonus = calculateBonus(recipientTimeElasped , balanceOf(recipient));\n             mint(recipient , bonus);\n        }\n        _balances[sender].amount = _balances[sender].amount.sub(amount);\n        _balances[recipient].amount = _balances[recipient].amount.add(amount);\n        _balances[sender].time = now;\n        _balances[recipient].time = now;\n        emit Transfer(sender, recipient, amount);\n    }\n614-function_definition-99-117", method="_transfer(address sender,address recipient,uint256 amount)", type_label=function_definition];
630 [label="99_ require(sender != address(0), \"ERC20: transfer from the zero address\");\n630-expression_statement-100-100", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
642 [label="100_ require(recipient != address(0), \"ERC20: transfer to the zero address\");\n642-expression_statement-101-101", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
654 [label="101_ uint256 senderTimeElasped = now - (_balances[sender].time);\n654-new_variable-102-102", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
667 [label="102_ uint256 recipientTimeElasped = now - (_balances[recipient].time);\n667-new_variable-103-103", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
680 [label="103_ if_senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)\n680-if-104-107", method="_transfer(address sender,address recipient,uint256 amount)", type_label=if];
2399 [label="103_ end_if", method="_transfer(address sender,address recipient,uint256 amount)", type_label=end_if];
690 [label="104_ uint256 bonus = calculateBonus(senderTimeElasped , balanceOf(sender));\n690-new_variable-105-105", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
704 [label="105_ mint(sender , bonus);\n704-expression_statement-106-106", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
711 [label="107_ if_recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender!= recipient\n711-if-108-111", method="_transfer(address sender,address recipient,uint256 amount)", type_label=if];
2430 [label="107_ end_if", method="_transfer(address sender,address recipient,uint256 amount)", type_label=end_if];
725 [label="108_ uint256 bonus = calculateBonus(recipientTimeElasped , balanceOf(recipient));\n725-new_variable-109-109", method="_transfer(address sender,address recipient,uint256 amount)", type_label=new_variable];
739 [label="109_ mint(recipient , bonus);\n739-expression_statement-110-110", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
746 [label="111_ _balances[sender].amount = _balances[sender].amount.sub(amount);\n746-expression_statement-112-112", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
763 [label="112_ _balances[recipient].amount = _balances[recipient].amount.add(amount);\n763-expression_statement-113-113", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
780 [label="113_ _balances[sender].time = now;\n780-expression_statement-114-114", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
788 [label="114_ _balances[recipient].time = now;\n788-expression_statement-115-115", method="_transfer(address sender,address recipient,uint256 amount)", type_label=expression_statement];
804 [label="117_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n804-function_definition-118-119", method="bug_unchk_send12()", type_label=function_definition];
809 [label="118_ msg.sender.transfer(1 ether);\n809-expression_statement-119-119", method="bug_unchk_send12()", type_label=expression_statement];
819 [label="119_ function name() public view returns (string memory) {\n        return _name;\n    }\n819-function_definition-120-122", method="name()", type_label=function_definition];
828 [label="120_ return _name;\n828-return-121-121", method="name()", type_label=return];
830 [label="122_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n830-function_definition-123-124", method="bug_unchk_send11()", type_label=function_definition];
835 [label="123_ msg.sender.transfer(1 ether);\n835-expression_statement-124-124", method="bug_unchk_send11()", type_label=expression_statement];
845 [label="124_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n845-function_definition-125-127", method="symbol()", type_label=function_definition];
854 [label="125_ return _symbol;\n854-return-126-126", method="symbol()", type_label=return];
856 [label="127_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n856-function_definition-128-129", method="bug_unchk_send1()", type_label=function_definition];
861 [label="128_ msg.sender.transfer(1 ether);\n861-expression_statement-129-129", method="bug_unchk_send1()", type_label=expression_statement];
871 [label="129_ function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n871-function_definition-130-132", method="decimals()", type_label=function_definition];
880 [label="130_ return _decimals;\n880-return-131-131", method="decimals()", type_label=return];
882 [label="132_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n882-function_definition-133-134", method="bug_unchk_send2()", type_label=function_definition];
887 [label="133_ msg.sender.transfer(1 ether);\n887-expression_statement-134-134", method="bug_unchk_send2()", type_label=expression_statement];
897 [label="134_ modifier onlyLollypopAndOwner {\n        require(msg.sender == address(this) || msg.sender == owner);\n        _;\n    }\n897-expression_statement-135-138", method="", type_label=expression_statement];
900 [label="135_ require(msg.sender == address(this) || msg.sender == owner);\n900-expression_statement-136-136", method="", type_label=expression_statement];
917 [label="136_ _;\n917-expression_statement-137-137", method="", type_label=expression_statement];
919 [label="138_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n919-function_definition-139-140", method="bug_unchk_send31()", type_label=function_definition];
924 [label="139_ msg.sender.transfer(1 ether);\n924-expression_statement-140-140", method="bug_unchk_send31()", type_label=expression_statement];
948 [label="141_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n948-function_definition-142-143", method="bug_unchk_send13()", type_label=function_definition];
953 [label="142_ msg.sender.transfer(1 ether);\n953-expression_statement-143-143", method="bug_unchk_send13()", type_label=expression_statement];
977 [label="144_ function mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account].amount = _balances[account].amount.add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n977-function_definition-145-150", method="mint(address account,uint256 amount)", type_label=function_definition];
989 [label="145_ require(account != address(0), \"ERC20: mint to the zero address\");\n989-expression_statement-146-146", method="mint(address account,uint256 amount)", type_label=expression_statement];
1001 [label="146_ _totalSupply = _totalSupply.add(amount);\n1001-expression_statement-147-147", method="mint(address account,uint256 amount)", type_label=expression_statement];
1010 [label="147_ _balances[account].amount = _balances[account].amount.add(amount);\n1010-expression_statement-148-148", method="mint(address account,uint256 amount)", type_label=expression_statement];
1037 [label="150_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n1037-function_definition-151-152", method="bug_unchk_send17()", type_label=function_definition];
1042 [label="151_ msg.sender.transfer(1 ether);\n1042-expression_statement-152-152", method="bug_unchk_send17()", type_label=expression_statement];
1052 [label="152_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1052-function_definition-153-155", method="totalSupply()", type_label=function_definition];
1061 [label="153_ return _totalSupply;\n1061-return-154-154", method="totalSupply()", type_label=return];
1063 [label="155_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n1063-function_definition-156-157", method="bug_unchk_send3()", type_label=function_definition];
1068 [label="156_ msg.sender.transfer(1 ether);\n1068-expression_statement-157-157", method="bug_unchk_send3()", type_label=expression_statement];
1078 [label="157_ function balanceOf(address account) public view returns (uint256) {\n        return _balances[account].amount;\n    }\n1078-function_definition-158-160", method="balanceOf(address account)", type_label=function_definition];
1091 [label="158_ return _balances[account].amount;\n1091-return-159-159", method="balanceOf(address account)", type_label=return];
1097 [label="160_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n1097-function_definition-161-162", method="bug_unchk_send9()", type_label=function_definition];
1102 [label="161_ msg.sender.transfer(1 ether);\n1102-expression_statement-162-162", method="bug_unchk_send9()", type_label=expression_statement];
1112 [label="162_ function timeOf(address account) public view returns (uint256) {\n        return _balances[account].time;\n    }\n1112-function_definition-163-165", method="timeOf(address account)", type_label=function_definition];
1125 [label="163_ return _balances[account].time;\n1125-return-164-164", method="timeOf(address account)", type_label=return];
1131 [label="165_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n1131-function_definition-166-167", method="bug_unchk_send25()", type_label=function_definition];
1136 [label="166_ msg.sender.transfer(1 ether);\n1136-expression_statement-167-167", method="bug_unchk_send25()", type_label=expression_statement];
1146 [label="167_ function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n1146-function_definition-168-171", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
1162 [label="168_ _transfer(msg.sender, recipient, amount);\n1162-expression_statement-169-169", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1173 [label="169_ return true;\n1173-return-170-170", method="transfer(address recipient,uint256 amount)", type_label=return];
1176 [label="171_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n1176-function_definition-172-173", method="bug_unchk_send19()", type_label=function_definition];
1181 [label="172_ msg.sender.transfer(1 ether);\n1181-expression_statement-173-173", method="bug_unchk_send19()", type_label=expression_statement];
1191 [label="173_ function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n    require(receivers.length == amounts.length);\n    for (uint256 i = 0; i < receivers.length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n1191-function_definition-174-179", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=function_definition];
1205 [label="174_ require(receivers.length == amounts.length);\n1205-expression_statement-175-175", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1216 [label="175_ for(i < receivers.length;;i++)\n1216-for-176-178", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=for];
2935 [label="175_ end_loop", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=end_loop];
1229 [label="175_ i++\n1229-expression_statement-176-176", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1232 [label="176_ transfer(receivers[i], amounts[i]);\n1232-expression_statement-177-177", method="multiTransfer(address[] memory receivers,uint256[] memory amounts)", type_label=expression_statement];
1243 [label="179_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n1243-function_definition-180-181", method="bug_unchk_send26()", type_label=function_definition];
1248 [label="180_ msg.sender.transfer(1 ether);\n1248-expression_statement-181-181", method="bug_unchk_send26()", type_label=expression_statement];
1258 [label="181_ function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n1258-function_definition-182-184", method="allowance(address owner,address spender)", type_label=function_definition];
1275 [label="182_ return _allowances[owner][spender];\n1275-return-183-183", method="allowance(address owner,address spender)", type_label=return];
1281 [label="184_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n1281-function_definition-185-186", method="bug_unchk_send20()", type_label=function_definition];
1286 [label="185_ msg.sender.transfer(1 ether);\n1286-expression_statement-186-186", method="bug_unchk_send20()", type_label=expression_statement];
1296 [label="186_ function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n1296-function_definition-187-190", method="approve(address spender,uint256 value)", type_label=function_definition];
1312 [label="187_ _approve(msg.sender, spender, value);\n1312-expression_statement-188-188", method="approve(address spender,uint256 value)", type_label=expression_statement];
1323 [label="188_ return true;\n1323-return-189-189", method="approve(address spender,uint256 value)", type_label=return];
1326 [label="190_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n1326-function_definition-191-192", method="bug_unchk_send32()", type_label=function_definition];
1331 [label="191_ msg.sender.transfer(1 ether);\n1331-expression_statement-192-192", method="bug_unchk_send32()", type_label=expression_statement];
1341 [label="192_ function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n1341-function_definition-193-197", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
1361 [label="193_ _transfer(sender, recipient, amount);\n1361-expression_statement-194-194", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1370 [label="194_ _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n1370-expression_statement-195-195", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=expression_statement];
1392 [label="195_ return true;\n1392-return-196-196", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=return];
1395 [label="197_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n1395-function_definition-198-199", method="bug_unchk_send4()", type_label=function_definition];
1400 [label="198_ msg.sender.transfer(1 ether);\n1400-expression_statement-199-199", method="bug_unchk_send4()", type_label=expression_statement];
1410 [label="199_ function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n1410-function_definition-200-203", method="increaseAllowance(address spender,uint256 addedValue)", type_label=function_definition];
1426 [label="200_ _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n1426-expression_statement-201-201", method="increaseAllowance(address spender,uint256 addedValue)", type_label=expression_statement];
1448 [label="201_ return true;\n1448-return-202-202", method="increaseAllowance(address spender,uint256 addedValue)", type_label=return];
1451 [label="203_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1451-function_definition-204-205", method="bug_unchk_send7()", type_label=function_definition];
1456 [label="204_ msg.sender.transfer(1 ether);\n1456-expression_statement-205-205", method="bug_unchk_send7()", type_label=expression_statement];
1466 [label="205_ function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n1466-function_definition-206-209", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=function_definition];
1482 [label="206_ _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n1482-expression_statement-207-207", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=expression_statement];
1504 [label="207_ return true;\n1504-return-208-208", method="decreaseAllowance(address spender,uint256 subtractedValue)", type_label=return];
1507 [label="209_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n1507-function_definition-210-211", method="bug_unchk_send23()", type_label=function_definition];
1512 [label="210_ msg.sender.transfer(1 ether);\n1512-expression_statement-211-211", method="bug_unchk_send23()", type_label=expression_statement];
1522 [label="211_ function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account].amount = _balances[account].amount.sub(value);\n        emit Transfer(account, address(0), value);\n    }\n1522-function_definition-212-217", method="_burn(address account,uint256 value)", type_label=function_definition];
1534 [label="212_ require(account != address(0), \"ERC20: burn from the zero address\");\n1534-expression_statement-213-213", method="_burn(address account,uint256 value)", type_label=expression_statement];
1546 [label="213_ _totalSupply = _totalSupply.sub(value);\n1546-expression_statement-214-214", method="_burn(address account,uint256 value)", type_label=expression_statement];
1555 [label="214_ _balances[account].amount = _balances[account].amount.sub(value);\n1555-expression_statement-215-215", method="_burn(address account,uint256 value)", type_label=expression_statement];
1582 [label="217_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n1582-function_definition-218-219", method="bug_unchk_send14()", type_label=function_definition];
1587 [label="218_ msg.sender.transfer(1 ether);\n1587-expression_statement-219-219", method="bug_unchk_send14()", type_label=expression_statement];
1597 [label="219_ function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n1597-function_definition-220-225", method="_approve(address owner,address spender,uint256 value)", type_label=function_definition];
1613 [label="220_ require(owner != address(0), \"ERC20: approve from the zero address\");\n1613-expression_statement-221-221", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1625 [label="221_ require(spender != address(0), \"ERC20: approve to the zero address\");\n1625-expression_statement-222-222", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1637 [label="222_ _allowances[owner][spender] = value;\n1637-expression_statement-223-223", method="_approve(address owner,address spender,uint256 value)", type_label=expression_statement];
1653 [label="225_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n1653-function_definition-226-227", method="bug_unchk_send30()", type_label=function_definition];
1658 [label="226_ msg.sender.transfer(1 ether);\n1658-expression_statement-227-227", method="bug_unchk_send30()", type_label=expression_statement];
1668 [label="227_ function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n1668-function_definition-228-231", method="_burnFrom(address account,uint256 amount)", type_label=function_definition];
1680 [label="228_ _burn(account, amount);\n1680-expression_statement-229-229", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
1687 [label="229_ _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n1687-expression_statement-230-230", method="_burnFrom(address account,uint256 amount)", type_label=expression_statement];
1709 [label="231_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n1709-function_definition-232-233", method="bug_unchk_send8()", type_label=function_definition];
1714 [label="232_ msg.sender.transfer(1 ether);\n1714-expression_statement-233-233", method="bug_unchk_send8()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
18 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 56  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 78  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
137 -> 147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
147 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
149 -> 166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
166 -> 176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
176 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
186 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 208  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
203 -> 1922  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1922 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
208 -> 1922  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
208 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
210 -> 218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
218 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
232 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 267  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
269 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
311 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
375 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
563 -> 574  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
574 -> 579  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
574 -> 2293  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2293 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 2293  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
583 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
599 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
667 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 690  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
680 -> 2399  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2399 -> 711  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
690 -> 704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 2399  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
711 -> 725  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
711 -> 2430  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2430 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 2430  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
746 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
804 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
830 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
856 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
880 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
882 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
977 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
989 -> 1001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1001 -> 1010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1037 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1063 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1078 -> 1091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1091 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1097 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1125 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1131 -> 1136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1146 -> 1162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1162 -> 1173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1173 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1176 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1191 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1205 -> 1216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1216 -> 1232  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1216 -> 2935  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2935 -> 1243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1229 -> 1216  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1232 -> 1229  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1243 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1258 -> 1275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1275 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1281 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1296 -> 1312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1312 -> 1323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1323 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1326 -> 1331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1341 -> 1361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1361 -> 1370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1370 -> 1392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1395 -> 1400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1410 -> 1426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1426 -> 1448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1448 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1451 -> 1456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1466 -> 1482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1482 -> 1504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1507 -> 1512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1522 -> 1534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1534 -> 1546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1546 -> 1555  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1582 -> 1587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1597 -> 1613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1613 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 1637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1653 -> 1658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1668 -> 1680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1680 -> 1687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1709 -> 1714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
