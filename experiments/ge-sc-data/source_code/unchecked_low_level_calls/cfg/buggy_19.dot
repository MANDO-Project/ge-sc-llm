digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
1393 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ assert(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n56-function_definition-11-14", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ uint256 c = a / b;\n73-new_variable-12-12", method="div(uint256 a,uint256 b)", type_label=new_variable];
81 [label="12_ return c;\n81-return-13-13", method="div(uint256 a,uint256 b)", type_label=return];
83 [label="14_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n83-function_definition-15-18", method="sub(uint256 a,uint256 b)", type_label=function_definition];
100 [label="15_ assert(b <= a);\n100-expression_statement-16-16", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
107 [label="16_ return a - b;\n107-return-17-17", method="sub(uint256 a,uint256 b)", type_label=return];
111 [label="18_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n111-function_definition-19-23", method="add(uint256 a,uint256 b)", type_label=function_definition];
128 [label="19_ uint256 c = a + b;\n128-new_variable-20-20", method="add(uint256 a,uint256 b)", type_label=new_variable];
136 [label="20_ assert(c >= a);\n136-expression_statement-21-21", method="add(uint256 a,uint256 b)", type_label=expression_statement];
143 [label="21_ return c;\n143-return-22-22", method="add(uint256 a,uint256 b)", type_label=return];
148 [label="25_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n148-function_definition-26-27", method="bug_unchk_send24()", type_label=function_definition];
153 [label="26_ msg.sender.transfer(1 ether);\n153-expression_statement-27-27", method="bug_unchk_send24()", type_label=expression_statement];
163 [label="27_ address public owner;\n163-new_variable-28-28", method="", type_label=new_variable];
170 [label="29_ owner = msg.sender;\n170-expression_statement-30-30", method="", type_label=expression_statement];
176 [label="31_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n176-function_definition-32-33", method="bug_unchk_send5()", type_label=function_definition];
181 [label="32_ msg.sender.transfer(1 ether);\n181-expression_statement-33-33", method="bug_unchk_send5()", type_label=expression_statement];
191 [label="33_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n191-expression_statement-34-37", method="", type_label=expression_statement];
194 [label="34_ require(msg.sender == owner);\n194-expression_statement-35-35", method="", type_label=expression_statement];
203 [label="35_ _;\n203-expression_statement-36-36", method="", type_label=expression_statement];
205 [label="37_ function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n205-function_definition-38-41", method="transferOwnership(address newOwner)", type_label=function_definition];
211 [label="37_ onlyOwner\n211-expression_statement-38-38", method="transferOwnership(address newOwner)", type_label=expression_statement];
215 [label="38_ require(newOwner != address(0));\n215-expression_statement-39-39", method="transferOwnership(address newOwner)", type_label=expression_statement];
224 [label="39_ owner = newOwner;\n224-expression_statement-40-40", method="transferOwnership(address newOwner)", type_label=expression_statement];
228 [label="41_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n228-function_definition-42-43", method="bug_unchk_send15()", type_label=function_definition];
233 [label="42_ msg.sender.transfer(1 ether);\n233-expression_statement-43-43", method="bug_unchk_send15()", type_label=expression_statement];
253 [label="46_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n253-function_definition-47-48", method="bug_unchk_send28()", type_label=function_definition];
258 [label="47_ msg.sender.transfer(1 ether);\n258-expression_statement-48-48", method="bug_unchk_send28()", type_label=expression_statement];
268 [label="48_ function withdrawForUser(address payable _address,uint amount) onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\");\n        _address.transfer(amount);\n    }\n268-function_definition-49-52", method="withdrawForUser(address payable _address,uint amount)", type_label=function_definition];
278 [label="48_ onlyOwner\n278-expression_statement-49-49", method="withdrawForUser(address payable _address,uint amount)", type_label=expression_statement];
282 [label="49_ require(msg.sender == owner, \"only owner can use this method\");\n282-expression_statement-50-50", method="withdrawForUser(address payable _address,uint amount)", type_label=expression_statement];
294 [label="50_ _address.transfer(amount);\n294-expression_statement-51-51", method="withdrawForUser(address payable _address,uint amount)", type_label=expression_statement];
301 [label="52_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n301-function_definition-53-54", method="bug_unchk_send21()", type_label=function_definition];
306 [label="53_ msg.sender.transfer(1 ether);\n306-expression_statement-54-54", method="bug_unchk_send21()", type_label=expression_statement];
316 [label="54_ function moveBrick(uint amount) onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(amount);\n    }\n316-function_definition-55-58", method="moveBrick(uint amount)", type_label=function_definition];
322 [label="54_ onlyOwner\n322-expression_statement-55-55", method="moveBrick(uint amount)", type_label=expression_statement];
326 [label="55_ require(msg.sender == owner, \"only owner can use this method\");\n326-expression_statement-56-56", method="moveBrick(uint amount)", type_label=expression_statement];
338 [label="56_ msg.sender.transfer(amount);\n338-expression_statement-57-57", method="moveBrick(uint amount)", type_label=expression_statement];
347 [label="58_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n347-function_definition-59-60", method="bug_unchk_send10()", type_label=function_definition];
352 [label="59_ msg.sender.transfer(1 ether);\n352-expression_statement-60-60", method="bug_unchk_send10()", type_label=expression_statement];
362 [label="60_ function moveBrickContracts() onlyOwner public\n    {\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n362-function_definition-61-65", method="moveBrickContracts()", type_label=function_definition];
364 [label="60_ onlyOwner\n364-expression_statement-61-61", method="moveBrickContracts()", type_label=expression_statement];
368 [label="62_ require(msg.sender == owner, \"only owner can use this method\");\n368-expression_statement-63-63", method="moveBrickContracts()", type_label=expression_statement];
380 [label="63_ msg.sender.transfer(address(this).balance);\n380-expression_statement-64-64", method="moveBrickContracts()", type_label=expression_statement];
393 [label="65_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n393-function_definition-66-67", method="bug_unchk_send22()", type_label=function_definition];
398 [label="66_ msg.sender.transfer(1 ether);\n398-expression_statement-67-67", method="bug_unchk_send22()", type_label=expression_statement];
408 [label="67_ function moveBrickClear() onlyOwner public {\n        require(msg.sender == owner, \"only owner can use this method\"); \n        selfdestruct(msg.sender);\n    }\n408-function_definition-68-71", method="moveBrickClear()", type_label=function_definition];
410 [label="67_ onlyOwner\n410-expression_statement-68-68", method="moveBrickClear()", type_label=expression_statement];
414 [label="68_ require(msg.sender == owner, \"only owner can use this method\");\n414-expression_statement-69-69", method="moveBrickClear()", type_label=expression_statement];
426 [label="69_ selfdestruct(msg.sender);\n426-expression_statement-70-70", method="moveBrickClear()", type_label=expression_statement];
433 [label="71_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n433-function_definition-72-73", method="bug_unchk_send12()", type_label=function_definition];
438 [label="72_ msg.sender.transfer(1 ether);\n438-expression_statement-73-73", method="bug_unchk_send12()", type_label=expression_statement];
448 [label="73_ function joinFlexible() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n448-function_definition-74-77", method="joinFlexible()", type_label=function_definition];
450 [label="73_ onlyOwner\n450-expression_statement-74-74", method="joinFlexible()", type_label=expression_statement];
454 [label="74_ require(msg.sender == owner, \"only owner can use this method\");\n454-expression_statement-75-75", method="joinFlexible()", type_label=expression_statement];
466 [label="75_ msg.sender.transfer(address(this).balance);\n466-expression_statement-76-76", method="joinFlexible()", type_label=expression_statement];
479 [label="77_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n479-function_definition-78-79", method="bug_unchk_send11()", type_label=function_definition];
484 [label="78_ msg.sender.transfer(1 ether);\n484-expression_statement-79-79", method="bug_unchk_send11()", type_label=expression_statement];
494 [label="79_ function joinFixed() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n494-function_definition-80-83", method="joinFixed()", type_label=function_definition];
496 [label="79_ onlyOwner\n496-expression_statement-80-80", method="joinFixed()", type_label=expression_statement];
500 [label="80_ require(msg.sender == owner, \"only owner can use this method\");\n500-expression_statement-81-81", method="joinFixed()", type_label=expression_statement];
512 [label="81_ msg.sender.transfer(address(this).balance);\n512-expression_statement-82-82", method="joinFixed()", type_label=expression_statement];
525 [label="83_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n525-function_definition-84-85", method="bug_unchk_send1()", type_label=function_definition];
530 [label="84_ msg.sender.transfer(1 ether);\n530-expression_statement-85-85", method="bug_unchk_send1()", type_label=expression_statement];
540 [label="85_ function staticBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n540-function_definition-86-89", method="staticBonus()", type_label=function_definition];
542 [label="85_ onlyOwner\n542-expression_statement-86-86", method="staticBonus()", type_label=expression_statement];
546 [label="86_ require(msg.sender == owner, \"only owner can use this method\");\n546-expression_statement-87-87", method="staticBonus()", type_label=expression_statement];
558 [label="87_ msg.sender.transfer(address(this).balance);\n558-expression_statement-88-88", method="staticBonus()", type_label=expression_statement];
571 [label="89_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n571-function_definition-90-91", method="bug_unchk_send2()", type_label=function_definition];
576 [label="90_ msg.sender.transfer(1 ether);\n576-expression_statement-91-91", method="bug_unchk_send2()", type_label=expression_statement];
586 [label="91_ function activeBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n586-function_definition-92-95", method="activeBonus()", type_label=function_definition];
588 [label="91_ onlyOwner\n588-expression_statement-92-92", method="activeBonus()", type_label=expression_statement];
592 [label="92_ require(msg.sender == owner, \"only owner can use this method\");\n592-expression_statement-93-93", method="activeBonus()", type_label=expression_statement];
604 [label="93_ msg.sender.transfer(address(this).balance);\n604-expression_statement-94-94", method="activeBonus()", type_label=expression_statement];
617 [label="95_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n617-function_definition-96-97", method="bug_unchk_send17()", type_label=function_definition];
622 [label="96_ msg.sender.transfer(1 ether);\n622-expression_statement-97-97", method="bug_unchk_send17()", type_label=expression_statement];
632 [label="97_ function teamAddBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n632-function_definition-98-101", method="teamAddBonus()", type_label=function_definition];
634 [label="97_ onlyOwner\n634-expression_statement-98-98", method="teamAddBonus()", type_label=expression_statement];
638 [label="98_ require(msg.sender == owner, \"only owner can use this method\");\n638-expression_statement-99-99", method="teamAddBonus()", type_label=expression_statement];
650 [label="99_ msg.sender.transfer(address(this).balance);\n650-expression_statement-100-100", method="teamAddBonus()", type_label=expression_statement];
663 [label="101_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n663-function_definition-102-103", method="bug_unchk_send3()", type_label=function_definition];
668 [label="102_ msg.sender.transfer(1 ether);\n668-expression_statement-103-103", method="bug_unchk_send3()", type_label=expression_statement];
678 [label="103_ function staticBonusCacl() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n678-function_definition-104-107", method="staticBonusCacl()", type_label=function_definition];
680 [label="103_ onlyOwner\n680-expression_statement-104-104", method="staticBonusCacl()", type_label=expression_statement];
684 [label="104_ require(msg.sender == owner, \"only owner can use this method\");\n684-expression_statement-105-105", method="staticBonusCacl()", type_label=expression_statement];
696 [label="105_ msg.sender.transfer(address(this).balance);\n696-expression_statement-106-106", method="staticBonusCacl()", type_label=expression_statement];
709 [label="107_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n709-function_definition-108-109", method="bug_unchk_send9()", type_label=function_definition];
714 [label="108_ msg.sender.transfer(1 ether);\n714-expression_statement-109-109", method="bug_unchk_send9()", type_label=expression_statement];
724 [label="109_ function activeBonusCacl_1() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n724-function_definition-110-113", method="activeBonusCacl_1()", type_label=function_definition];
726 [label="109_ onlyOwner\n726-expression_statement-110-110", method="activeBonusCacl_1()", type_label=expression_statement];
730 [label="110_ require(msg.sender == owner, \"only owner can use this method\");\n730-expression_statement-111-111", method="activeBonusCacl_1()", type_label=expression_statement];
742 [label="111_ msg.sender.transfer(address(this).balance);\n742-expression_statement-112-112", method="activeBonusCacl_1()", type_label=expression_statement];
755 [label="113_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n755-function_definition-114-115", method="bug_unchk_send25()", type_label=function_definition];
760 [label="114_ msg.sender.transfer(1 ether);\n760-expression_statement-115-115", method="bug_unchk_send25()", type_label=expression_statement];
770 [label="115_ function activeBonusCacl_2() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n770-function_definition-116-119", method="activeBonusCacl_2()", type_label=function_definition];
772 [label="115_ onlyOwner\n772-expression_statement-116-116", method="activeBonusCacl_2()", type_label=expression_statement];
776 [label="116_ require(msg.sender == owner, \"only owner can use this method\");\n776-expression_statement-117-117", method="activeBonusCacl_2()", type_label=expression_statement];
788 [label="117_ msg.sender.transfer(address(this).balance);\n788-expression_statement-118-118", method="activeBonusCacl_2()", type_label=expression_statement];
801 [label="119_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n801-function_definition-120-121", method="bug_unchk_send19()", type_label=function_definition];
806 [label="120_ msg.sender.transfer(1 ether);\n806-expression_statement-121-121", method="bug_unchk_send19()", type_label=expression_statement];
816 [label="121_ function activeBonusCacl_3() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n816-function_definition-122-125", method="activeBonusCacl_3()", type_label=function_definition];
818 [label="121_ onlyOwner\n818-expression_statement-122-122", method="activeBonusCacl_3()", type_label=expression_statement];
822 [label="122_ require(msg.sender == owner, \"only owner can use this method\");\n822-expression_statement-123-123", method="activeBonusCacl_3()", type_label=expression_statement];
834 [label="123_ msg.sender.transfer(address(this).balance);\n834-expression_statement-124-124", method="activeBonusCacl_3()", type_label=expression_statement];
847 [label="125_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n847-function_definition-126-127", method="bug_unchk_send26()", type_label=function_definition];
852 [label="126_ msg.sender.transfer(1 ether);\n852-expression_statement-127-127", method="bug_unchk_send26()", type_label=expression_statement];
862 [label="127_ function activeBonusCacl_4() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n862-function_definition-128-131", method="activeBonusCacl_4()", type_label=function_definition];
864 [label="127_ onlyOwner\n864-expression_statement-128-128", method="activeBonusCacl_4()", type_label=expression_statement];
868 [label="128_ require(msg.sender == owner, \"only owner can use this method\");\n868-expression_statement-129-129", method="activeBonusCacl_4()", type_label=expression_statement];
880 [label="129_ msg.sender.transfer(address(this).balance);\n880-expression_statement-130-130", method="activeBonusCacl_4()", type_label=expression_statement];
893 [label="131_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n893-function_definition-132-133", method="bug_unchk_send20()", type_label=function_definition];
898 [label="132_ msg.sender.transfer(1 ether);\n898-expression_statement-133-133", method="bug_unchk_send20()", type_label=expression_statement];
908 [label="133_ function activeBonusCacl_5() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n908-function_definition-134-137", method="activeBonusCacl_5()", type_label=function_definition];
910 [label="133_ onlyOwner\n910-expression_statement-134-134", method="activeBonusCacl_5()", type_label=expression_statement];
914 [label="134_ require(msg.sender == owner, \"only owner can use this method\");\n914-expression_statement-135-135", method="activeBonusCacl_5()", type_label=expression_statement];
926 [label="135_ msg.sender.transfer(address(this).balance);\n926-expression_statement-136-136", method="activeBonusCacl_5()", type_label=expression_statement];
939 [label="137_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n939-function_definition-138-139", method="bug_unchk_send32()", type_label=function_definition];
944 [label="138_ msg.sender.transfer(1 ether);\n944-expression_statement-139-139", method="bug_unchk_send32()", type_label=expression_statement];
954 [label="139_ function activeBonusCacl_6() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n954-function_definition-140-143", method="activeBonusCacl_6()", type_label=function_definition];
956 [label="139_ onlyOwner\n956-expression_statement-140-140", method="activeBonusCacl_6()", type_label=expression_statement];
960 [label="140_ require(msg.sender == owner, \"only owner can use this method\");\n960-expression_statement-141-141", method="activeBonusCacl_6()", type_label=expression_statement];
972 [label="141_ msg.sender.transfer(address(this).balance);\n972-expression_statement-142-142", method="activeBonusCacl_6()", type_label=expression_statement];
985 [label="143_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n985-function_definition-144-145", method="bug_unchk_send4()", type_label=function_definition];
990 [label="144_ msg.sender.transfer(1 ether);\n990-expression_statement-145-145", method="bug_unchk_send4()", type_label=expression_statement];
1000 [label="145_ function activeBonusCacl_7() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1000-function_definition-146-149", method="activeBonusCacl_7()", type_label=function_definition];
1002 [label="145_ onlyOwner\n1002-expression_statement-146-146", method="activeBonusCacl_7()", type_label=expression_statement];
1006 [label="146_ require(msg.sender == owner, \"only owner can use this method\");\n1006-expression_statement-147-147", method="activeBonusCacl_7()", type_label=expression_statement];
1018 [label="147_ msg.sender.transfer(address(this).balance);\n1018-expression_statement-148-148", method="activeBonusCacl_7()", type_label=expression_statement];
1031 [label="149_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1031-function_definition-150-151", method="bug_unchk_send7()", type_label=function_definition];
1036 [label="150_ msg.sender.transfer(1 ether);\n1036-expression_statement-151-151", method="bug_unchk_send7()", type_label=expression_statement];
1046 [label="151_ function activeBonusCacl_8() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1046-function_definition-152-155", method="activeBonusCacl_8()", type_label=function_definition];
1048 [label="151_ onlyOwner\n1048-expression_statement-152-152", method="activeBonusCacl_8()", type_label=expression_statement];
1052 [label="152_ require(msg.sender == owner, \"only owner can use this method\");\n1052-expression_statement-153-153", method="activeBonusCacl_8()", type_label=expression_statement];
1064 [label="153_ msg.sender.transfer(address(this).balance);\n1064-expression_statement-154-154", method="activeBonusCacl_8()", type_label=expression_statement];
1077 [label="155_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n1077-function_definition-156-157", method="bug_unchk_send23()", type_label=function_definition];
1082 [label="156_ msg.sender.transfer(1 ether);\n1082-expression_statement-157-157", method="bug_unchk_send23()", type_label=expression_statement];
1092 [label="157_ function activeBonusCacl_9() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1092-function_definition-158-161", method="activeBonusCacl_9()", type_label=function_definition];
1094 [label="157_ onlyOwner\n1094-expression_statement-158-158", method="activeBonusCacl_9()", type_label=expression_statement];
1098 [label="158_ require(msg.sender == owner, \"only owner can use this method\");\n1098-expression_statement-159-159", method="activeBonusCacl_9()", type_label=expression_statement];
1110 [label="159_ msg.sender.transfer(address(this).balance);\n1110-expression_statement-160-160", method="activeBonusCacl_9()", type_label=expression_statement];
1123 [label="161_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n1123-function_definition-162-163", method="bug_unchk_send14()", type_label=function_definition];
1128 [label="162_ msg.sender.transfer(1 ether);\n1128-expression_statement-163-163", method="bug_unchk_send14()", type_label=expression_statement];
1138 [label="163_ function teamAddBonusCacl() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1138-function_definition-164-167", method="teamAddBonusCacl()", type_label=function_definition];
1140 [label="163_ onlyOwner\n1140-expression_statement-164-164", method="teamAddBonusCacl()", type_label=expression_statement];
1144 [label="164_ require(msg.sender == owner, \"only owner can use this method\");\n1144-expression_statement-165-165", method="teamAddBonusCacl()", type_label=expression_statement];
1156 [label="165_ msg.sender.transfer(address(this).balance);\n1156-expression_statement-166-166", method="teamAddBonusCacl()", type_label=expression_statement];
1169 [label="167_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n1169-function_definition-168-169", method="bug_unchk_send30()", type_label=function_definition];
1174 [label="168_ msg.sender.transfer(1 ether);\n1174-expression_statement-169-169", method="bug_unchk_send30()", type_label=expression_statement];
1184 [label="169_ function caclTeamPerformance() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1184-function_definition-170-173", method="caclTeamPerformance()", type_label=function_definition];
1186 [label="169_ onlyOwner\n1186-expression_statement-170-170", method="caclTeamPerformance()", type_label=expression_statement];
1190 [label="170_ require(msg.sender == owner, \"only owner can use this method\");\n1190-expression_statement-171-171", method="caclTeamPerformance()", type_label=expression_statement];
1202 [label="171_ msg.sender.transfer(address(this).balance);\n1202-expression_statement-172-172", method="caclTeamPerformance()", type_label=expression_statement];
1215 [label="173_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n1215-function_definition-174-175", method="bug_unchk_send8()", type_label=function_definition];
1220 [label="174_ msg.sender.transfer(1 ether);\n1220-expression_statement-175-175", method="bug_unchk_send8()", type_label=expression_statement];
1230 [label="175_ function releaStaticBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1230-function_definition-176-179", method="releaStaticBonus()", type_label=function_definition];
1232 [label="175_ onlyOwner\n1232-expression_statement-176-176", method="releaStaticBonus()", type_label=expression_statement];
1236 [label="176_ require(msg.sender == owner, \"only owner can use this method\");\n1236-expression_statement-177-177", method="releaStaticBonus()", type_label=expression_statement];
1248 [label="177_ msg.sender.transfer(address(this).balance);\n1248-expression_statement-178-178", method="releaStaticBonus()", type_label=expression_statement];
1261 [label="179_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n1261-function_definition-180-181", method="bug_unchk_send27()", type_label=function_definition];
1266 [label="180_ msg.sender.transfer(1 ether);\n1266-expression_statement-181-181", method="bug_unchk_send27()", type_label=expression_statement];
1276 [label="181_ function releaActiveBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1276-function_definition-182-185", method="releaActiveBonus()", type_label=function_definition];
1278 [label="181_ onlyOwner\n1278-expression_statement-182-182", method="releaActiveBonus()", type_label=expression_statement];
1282 [label="182_ require(msg.sender == owner, \"only owner can use this method\");\n1282-expression_statement-183-183", method="releaActiveBonus()", type_label=expression_statement];
1294 [label="183_ msg.sender.transfer(address(this).balance);\n1294-expression_statement-184-184", method="releaActiveBonus()", type_label=expression_statement];
1307 [label="185_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n1307-function_definition-186-187", method="bug_unchk_send31()", type_label=function_definition];
1312 [label="186_ msg.sender.transfer(1 ether);\n1312-expression_statement-187-187", method="bug_unchk_send31()", type_label=expression_statement];
1322 [label="187_ function releaTeamAddBonus() onlyOwner public{\n        require(msg.sender == owner, \"only owner can use this method\"); \n        msg.sender.transfer(address(this).balance);\n    }\n1322-function_definition-188-191", method="releaTeamAddBonus()", type_label=function_definition];
1324 [label="187_ onlyOwner\n1324-expression_statement-188-188", method="releaTeamAddBonus()", type_label=expression_statement];
1328 [label="188_ require(msg.sender == owner, \"only owner can use this method\");\n1328-expression_statement-189-189", method="releaTeamAddBonus()", type_label=expression_statement];
1340 [label="189_ msg.sender.transfer(address(this).balance);\n1340-expression_statement-190-190", method="releaTeamAddBonus()", type_label=expression_statement];
1353 [label="191_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n1353-function_definition-192-193", method="bug_unchk_send13()", type_label=function_definition];
1358 [label="192_ msg.sender.transfer(1 ether);\n1358-expression_statement-193-193", method="bug_unchk_send13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 1393  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1393 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 1393  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
83 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
143 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
148 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
176 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
268 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
301 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
326 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
347 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
362 -> 368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
500 -> 512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
586 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
730 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
755 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
770 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
801 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
893 -> 898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
908 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
954 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 1018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1046 -> 1052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 1064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 1082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1092 -> 1098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1123 -> 1128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1169 -> 1174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1184 -> 1190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1190 -> 1202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 1220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1230 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1261 -> 1266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1276 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1282 -> 1294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1307 -> 1312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 1340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1353 -> 1358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
