digraph  {
13 [label="2_ function transferFrom(address from, address to, uint tokens) public returns (bool success);\n13-function_definition-3-3", method="transferFrom(address from,address to,uint tokens)", type_label=function_definition];
33 [label="3_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n33-function_definition-4-5", method="bug_unchk_send19()", type_label=function_definition];
38 [label="4_ msg.sender.transfer(1 ether);\n38-expression_statement-5-5", method="bug_unchk_send19()", type_label=expression_statement];
51 [label="7_ function allowance(address owner, address spender) external view returns (uint256);\n51-function_definition-8-8", method="allowance(address owner,address spender)", type_label=function_definition];
67 [label="8_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n67-function_definition-9-10", method="bug_unchk_send26()", type_label=function_definition];
72 [label="9_ msg.sender.transfer(1 ether);\n72-expression_statement-10-10", method="bug_unchk_send26()", type_label=expression_statement];
82 [label="10_ function balanceOf(address account) external view returns (uint256);\n82-function_definition-11-11", method="balanceOf(address account)", type_label=function_definition];
94 [label="11_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n94-function_definition-12-13", method="bug_unchk_send20()", type_label=function_definition];
99 [label="12_ msg.sender.transfer(1 ether);\n99-expression_statement-13-13", method="bug_unchk_send20()", type_label=expression_statement];
121 [label="16_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n121-function_definition-17-21", method="add(uint256 a,uint256 b)", type_label=function_definition];
138 [label="17_ uint256 c = a + b;\n138-new_variable-18-18", method="add(uint256 a,uint256 b)", type_label=new_variable];
146 [label="18_ require(c >= a, \"SafeMath: addition overflow\");\n146-expression_statement-19-19", method="add(uint256 a,uint256 b)", type_label=expression_statement];
156 [label="19_ return c;\n156-return-20-20", method="add(uint256 a,uint256 b)", type_label=return];
158 [label="21_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n158-function_definition-22-26", method="sub(uint256 a,uint256 b)", type_label=function_definition];
175 [label="22_ require(b <= a, \"SafeMath: subtraction overflow\");\n175-expression_statement-23-23", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
185 [label="23_ uint256 c = a - b;\n185-new_variable-24-24", method="sub(uint256 a,uint256 b)", type_label=new_variable];
193 [label="24_ return c;\n193-return-25-25", method="sub(uint256 a,uint256 b)", type_label=return];
195 [label="26_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n195-function_definition-27-34", method="mul(uint256 a,uint256 b)", type_label=function_definition];
212 [label="27_ if_a == 0\n212-if-28-30", method="mul(uint256 a,uint256 b)", type_label=if];
1399 [label="27_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
217 [label="28_ return 0;\n217-return-29-29", method="mul(uint256 a,uint256 b)", type_label=return];
219 [label="30_ uint256 c = a * b;\n219-new_variable-31-31", method="mul(uint256 a,uint256 b)", type_label=new_variable];
227 [label="31_ require(c / a == b, \"SafeMath: multiplication overflow\");\n227-expression_statement-32-32", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
239 [label="32_ return c;\n239-return-33-33", method="mul(uint256 a,uint256 b)", type_label=return];
241 [label="34_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n241-function_definition-35-39", method="div(uint256 a,uint256 b)", type_label=function_definition];
258 [label="35_ require(b > 0, \"SafeMath: division by zero\");\n258-expression_statement-36-36", method="div(uint256 a,uint256 b)", type_label=expression_statement];
268 [label="36_ uint256 c = a / b;\n268-new_variable-37-37", method="div(uint256 a,uint256 b)", type_label=new_variable];
276 [label="37_ return c;\n276-return-38-38", method="div(uint256 a,uint256 b)", type_label=return];
278 [label="39_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n278-function_definition-40-43", method="mod(uint256 a,uint256 b)", type_label=function_definition];
295 [label="40_ require(b != 0, \"SafeMath: modulo by zero\");\n295-expression_statement-41-41", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
305 [label="41_ return a % b;\n305-return-42-42", method="mod(uint256 a,uint256 b)", type_label=return];
317 [label="46_ RaffleToken constant public raffleContract = RaffleToken(0x0C8cDC16973E88FAb31DD0FCB844DdF0e1056dE2);\n317-new_variable-47-47", method="", type_label=new_variable];
327 [label="47_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n327-function_definition-48-49", method="bug_unchk_send1()", type_label=function_definition];
332 [label="48_ msg.sender.transfer(1 ether);\n332-expression_statement-49-49", method="bug_unchk_send1()", type_label=expression_statement];
342 [label="49_ bool public paused;\n342-new_variable-50-50", method="", type_label=new_variable];
347 [label="50_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n347-function_definition-51-52", method="bug_unchk_send2()", type_label=function_definition];
352 [label="51_ msg.sender.transfer(1 ether);\n352-expression_statement-52-52", method="bug_unchk_send2()", type_label=expression_statement];
362 [label="52_ address payable public owner;\n362-new_variable-53-53", method="", type_label=new_variable];
367 [label="53_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n367-function_definition-54-55", method="bug_unchk_send17()", type_label=function_definition];
372 [label="54_ msg.sender.transfer(1 ether);\n372-expression_statement-55-55", method="bug_unchk_send17()", type_label=expression_statement];
382 [label="55_ uint256 public nextListingId;\n382-new_variable-56-56", method="", type_label=new_variable];
387 [label="56_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n387-function_definition-57-58", method="bug_unchk_send3()", type_label=function_definition];
392 [label="57_ msg.sender.transfer(1 ether);\n392-expression_statement-58-58", method="bug_unchk_send3()", type_label=expression_statement];
402 [label="58_ mapping (uint256 => Listing) public listingsById;\n402-new_variable-59-59", method="", type_label=new_variable];
410 [label="59_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n410-function_definition-60-61", method="bug_unchk_send9()", type_label=function_definition];
415 [label="60_ msg.sender.transfer(1 ether);\n415-expression_statement-61-61", method="bug_unchk_send9()", type_label=expression_statement];
425 [label="61_ mapping (uint256 => Purchase) public purchasesById;\n425-new_variable-62-62", method="", type_label=new_variable];
433 [label="62_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n433-function_definition-63-64", method="bug_unchk_send25()", type_label=function_definition];
438 [label="63_ msg.sender.transfer(1 ether);\n438-expression_statement-64-64", method="bug_unchk_send25()", type_label=expression_statement];
448 [label="64_ uint256 public nextPurchaseId;\n448-new_variable-65-65", method="", type_label=new_variable];
453 [label="65_ struct Listing {\n        uint256 pricePerToken;\n        uint256 initialAmount;\n        uint256 amountLeft;\n        address payable seller;\n        bool active;\n    }\n453-expression_statement-66-72", method="Listing()", type_label=expression_statement];
475 [label="72_ struct Purchase {\n        uint256 totalAmount;\n        uint256 totalAmountPayed;\n        uint256 timestamp;\n    }\n475-expression_statement-73-77", method="Purchase()", type_label=expression_statement];
489 [label="77_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n489-function_definition-78-79", method="bug_unchk_send27()", type_label=function_definition];
494 [label="78_ msg.sender.transfer(1 ether);\n494-expression_statement-79-79", method="bug_unchk_send27()", type_label=expression_statement];
522 [label="80_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n522-function_definition-81-82", method="bug_unchk_send31()", type_label=function_definition];
527 [label="81_ msg.sender.transfer(1 ether);\n527-expression_statement-82-82", method="bug_unchk_send31()", type_label=expression_statement];
543 [label="83_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n543-function_definition-84-85", method="bug_unchk_send13()", type_label=function_definition];
548 [label="84_ msg.sender.transfer(1 ether);\n548-expression_statement-85-85", method="bug_unchk_send13()", type_label=expression_statement];
576 [label="86_ modifier onlyContractOwner {\n        require(msg.sender == owner, \"Function called by non-owner.\");\n        _;\n    }\n576-expression_statement-87-90", method="", type_label=expression_statement];
579 [label="87_ require(msg.sender == owner, \"Function called by non-owner.\");\n579-expression_statement-88-88", method="", type_label=expression_statement];
591 [label="88_ _;\n591-expression_statement-89-89", method="", type_label=expression_statement];
593 [label="90_ modifier onlyUnpaused {\n        require(paused == false, \"Exchange is paused.\");\n        _;\n    }\n593-expression_statement-91-94", method="", type_label=expression_statement];
596 [label="91_ require(paused == false, \"Exchange is paused.\");\n596-expression_statement-92-92", method="", type_label=expression_statement];
607 [label="92_ _;\n607-expression_statement-93-93", method="", type_label=expression_statement];
611 [label="95_ owner = msg.sender;\n611-expression_statement-96-96", method="", type_label=expression_statement];
617 [label="96_ nextListingId = 916;\n617-expression_statement-97-97", method="", type_label=expression_statement];
621 [label="97_ nextPurchaseId = 344;\n621-expression_statement-98-98", method="", type_label=expression_statement];
625 [label="99_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n625-function_definition-100-101", method="bug_unchk_send32()", type_label=function_definition];
630 [label="100_ msg.sender.transfer(1 ether);\n630-expression_statement-101-101", method="bug_unchk_send32()", type_label=expression_statement];
640 [label="101_ function buyRaffle(uint256[] calldata amounts, uint256[] calldata listingIds) payable external onlyUnpaused {\n        require(amounts.length == listingIds.length, \"You have to provide amounts for every single listing!\");\n        uint256 totalAmount;\n        uint256 totalAmountPayed;\n        for (uint256 i = 0; i < listingIds.length; i++) {\n            uint256 id = listingIds[i];\n            uint256 amount = amounts[i];\n            Listing storage listing = listingsById[id];\n            require(listing.active, \"Listing is not active anymore!\");\n            listing.amountLeft = listing.amountLeft.sub(amount);\n            require(listing.amountLeft >= 0, \"Amount left needs to be higher than 0.\");\n            if(listing.amountLeft == 0) { listing.active = false; }\n            uint256 amountToPay = listing.pricePerToken * amount;\n            listing.seller.transfer(amountToPay);\n            totalAmountPayed = totalAmountPayed.add(amountToPay);\n            totalAmount = totalAmount.add(amount);\n            require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');\n        }\n        require(totalAmountPayed <= msg.value, 'Overpayed!');\n        uint256 id = nextPurchaseId++;\n        Purchase storage purchase = purchasesById[id];\n        purchase.totalAmount = totalAmount;\n        purchase.totalAmountPayed = totalAmountPayed;\n        purchase.timestamp = now;\n        emit Purchased(id, totalAmount, totalAmountPayed, now);\n    }\n640-function_definition-102-127", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=function_definition];
654 [label="101_ onlyUnpaused\n654-expression_statement-102-102", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
657 [label="102_ require(amounts.length == listingIds.length, \"You have to provide amounts for every single listing!\");\n657-expression_statement-103-103", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
671 [label="103_ uint256 totalAmount;\n671-new_variable-104-104", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
676 [label="104_ uint256 totalAmountPayed;\n676-new_variable-105-105", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
681 [label="105_ for(i < listingIds.length;;i++)\n681-for-106-119", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=for];
1868 [label="105_ end_loop", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=end_loop];
694 [label="105_ i++\n694-expression_statement-106-106", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
697 [label="106_ uint256 id = listingIds[i];\n697-new_variable-107-107", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
705 [label="107_ uint256 amount = amounts[i];\n705-new_variable-108-108", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
713 [label="108_ Listing storage listing = listingsById[id];\n713-new_variable-109-109", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
722 [label="109_ require(listing.active, \"Listing is not active anymore!\");\n722-expression_statement-110-110", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
732 [label="110_ listing.amountLeft = listing.amountLeft.sub(amount);\n732-expression_statement-111-111", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
745 [label="111_ require(listing.amountLeft >= 0, \"Amount left needs to be higher than 0.\");\n745-expression_statement-112-112", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
757 [label="112_ if_listing.amountLeft == 0\n757-if-113-113", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=if];
1944 [label="112_ end_if", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=end_if];
764 [label="112_ listing.active = false;\n764-expression_statement-113-113", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
771 [label="113_ uint256 amountToPay = listing.pricePerToken * amount;\n771-new_variable-114-114", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
781 [label="114_ listing.seller.transfer(amountToPay);\n781-expression_statement-115-115", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
790 [label="115_ totalAmountPayed = totalAmountPayed.add(amountToPay);\n790-expression_statement-116-116", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
799 [label="116_ totalAmount = totalAmount.add(amount);\n799-expression_statement-117-117", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
808 [label="117_ require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');\n808-expression_statement-118-118", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
829 [label="119_ require(totalAmountPayed <= msg.value, 'Overpayed!');\n829-expression_statement-120-120", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
841 [label="120_ uint256 id = nextPurchaseId++;\n841-new_variable-121-121", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
846 [label="120_ nextPurchaseId++\n846-expression_statement-121-121", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
848 [label="121_ Purchase storage purchase = purchasesById[id];\n848-new_variable-122-122", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=new_variable];
857 [label="122_ purchase.totalAmount = totalAmount;\n857-expression_statement-123-123", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
863 [label="123_ purchase.totalAmountPayed = totalAmountPayed;\n863-expression_statement-124-124", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
869 [label="124_ purchase.timestamp = now;\n869-expression_statement-125-125", method="buyRaffle(uint256[] calldata amounts,uint256[] calldata listingIds)", type_label=expression_statement];
885 [label="127_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n885-function_definition-128-129", method="bug_unchk_send4()", type_label=function_definition];
890 [label="128_ msg.sender.transfer(1 ether);\n890-expression_statement-129-129", method="bug_unchk_send4()", type_label=expression_statement];
900 [label="129_ function addListing(uint256 initialAmount, uint256 pricePerToken) external onlyUnpaused {\n        require(raffleContract.balanceOf(msg.sender) >= initialAmount, \"Amount to sell is higher than balance!\");\n        require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, \"Allowance is to small (increase allowance)!\");\n        uint256 id = nextListingId++;\n        Listing storage listing = listingsById[id];\n        listing.initialAmount = initialAmount;\n        listing.amountLeft = initialAmount;\n        listing.pricePerToken = pricePerToken;\n        listing.seller = msg.sender;\n        listing.active = true;\n        emit Listed(id, listing.pricePerToken, listing.initialAmount, listing.seller);\n    }\n900-function_definition-130-141", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=function_definition];
911 [label="129_ onlyUnpaused\n911-expression_statement-130-130", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
914 [label="130_ require(raffleContract.balanceOf(msg.sender) >= initialAmount, \"Amount to sell is higher than balance!\");\n914-expression_statement-131-131", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
931 [label="131_ require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, \"Allowance is to small (increase allowance)!\");\n931-expression_statement-132-132", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
952 [label="132_ uint256 id = nextListingId++;\n952-new_variable-133-133", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=new_variable];
957 [label="132_ nextListingId++\n957-expression_statement-133-133", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
959 [label="133_ Listing storage listing = listingsById[id];\n959-new_variable-134-134", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=new_variable];
968 [label="134_ listing.initialAmount = initialAmount;\n968-expression_statement-135-135", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
974 [label="135_ listing.amountLeft = initialAmount;\n974-expression_statement-136-136", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
980 [label="136_ listing.pricePerToken = pricePerToken;\n980-expression_statement-137-137", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
986 [label="137_ listing.seller = msg.sender;\n986-expression_statement-138-138", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
994 [label="138_ listing.active = true;\n994-expression_statement-139-139", method="addListing(uint256 initialAmount,uint256 pricePerToken)", type_label=expression_statement];
1017 [label="141_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1017-function_definition-142-143", method="bug_unchk_send7()", type_label=function_definition];
1022 [label="142_ msg.sender.transfer(1 ether);\n1022-expression_statement-143-143", method="bug_unchk_send7()", type_label=expression_statement];
1032 [label="143_ function cancelListing(uint256 id) external {\n        Listing storage listing = listingsById[id];\n        require(listing.active, \"This listing was turned inactive already!\");\n        require(listing.seller == msg.sender || owner == msg.sender, \"Only the listing owner or the contract owner can cancel the listing!\");\n        listing.active = false;\n        emit Canceled(id);\n    }\n1032-function_definition-144-150", method="cancelListing(uint256 id)", type_label=function_definition];
1040 [label="144_ Listing storage listing = listingsById[id];\n1040-new_variable-145-145", method="cancelListing(uint256 id)", type_label=new_variable];
1049 [label="145_ require(listing.active, \"This listing was turned inactive already!\");\n1049-expression_statement-146-146", method="cancelListing(uint256 id)", type_label=expression_statement];
1059 [label="146_ require(listing.seller == msg.sender || owner == msg.sender, \"Only the listing owner or the contract owner can cancel the listing!\");\n1059-expression_statement-147-147", method="cancelListing(uint256 id)", type_label=expression_statement];
1079 [label="147_ listing.active = false;\n1079-expression_statement-148-148", method="cancelListing(uint256 id)", type_label=expression_statement];
1090 [label="150_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n1090-function_definition-151-152", method="bug_unchk_send23()", type_label=function_definition];
1095 [label="151_ msg.sender.transfer(1 ether);\n1095-expression_statement-152-152", method="bug_unchk_send23()", type_label=expression_statement];
1105 [label="152_ function setPaused(bool value) external onlyContractOwner {\n        paused = value;\n    }\n1105-function_definition-153-155", method="setPaused(bool value)", type_label=function_definition];
1112 [label="152_ onlyContractOwner\n1112-expression_statement-153-153", method="setPaused(bool value)", type_label=expression_statement];
1115 [label="153_ paused = value;\n1115-expression_statement-154-154", method="setPaused(bool value)", type_label=expression_statement];
1119 [label="155_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n1119-function_definition-156-157", method="bug_unchk_send14()", type_label=function_definition];
1124 [label="156_ msg.sender.transfer(1 ether);\n1124-expression_statement-157-157", method="bug_unchk_send14()", type_label=expression_statement];
1134 [label="157_ function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {\n        owner.transfer(withdrawAmount);\n    }\n1134-function_definition-158-160", method="withdrawFunds(uint256 withdrawAmount)", type_label=function_definition];
1141 [label="157_ onlyContractOwner\n1141-expression_statement-158-158", method="withdrawFunds(uint256 withdrawAmount)", type_label=expression_statement];
1144 [label="158_ owner.transfer(withdrawAmount);\n1144-expression_statement-159-159", method="withdrawFunds(uint256 withdrawAmount)", type_label=expression_statement];
1151 [label="160_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n1151-function_definition-161-162", method="bug_unchk_send30()", type_label=function_definition];
1156 [label="161_ msg.sender.transfer(1 ether);\n1156-expression_statement-162-162", method="bug_unchk_send30()", type_label=expression_statement];
1166 [label="162_ function kill() external onlyContractOwner {\n        selfdestruct(owner);\n    }\n1166-function_definition-163-165", method="kill()", type_label=function_definition];
1169 [label="162_ onlyContractOwner\n1169-expression_statement-163-163", method="kill()", type_label=expression_statement];
1172 [label="163_ selfdestruct(owner);\n1172-expression_statement-164-164", method="kill()", type_label=expression_statement];
1177 [label="165_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n1177-function_definition-166-167", method="bug_unchk_send8()", type_label=function_definition];
1182 [label="166_ msg.sender.transfer(1 ether);\n1182-expression_statement-167-167", method="bug_unchk_send8()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
33 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
156 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
158 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
195 -> 212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
212 -> 217  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
212 -> 1399  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1399 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
217 -> 1399  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
217 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
219 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
239 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
241 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
258 -> 268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
268 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
276 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
278 -> 295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
305 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
327 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
347 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
367 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 475  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
576 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 621  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
625 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
640 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
676 -> 681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 697  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
681 -> 1868  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1868 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
694 -> 681  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
697 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
722 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 764  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
757 -> 1944  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1944 -> 771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
764 -> 1944  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
771 -> 781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
781 -> 790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
790 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 694  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
829 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
848 -> 857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 863  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
863 -> 869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
931 -> 952  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
952 -> 959  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
974 -> 980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
980 -> 986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1032 -> 1040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1040 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1059 -> 1079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1095  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1105 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1119 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1134 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1151 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1172  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1177 -> 1182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
