digraph  {
13 [label="2_ function Owned() {\n        owner = msg.sender;\n    }\n13-function_definition-3-5", method="Owned()", type_label=function_definition];
16 [label="3_ owner = msg.sender;\n16-expression_statement-4-4", method="Owned()", type_label=expression_statement];
22 [label="5_ address public owner;\n22-new_variable-6-6", method="", type_label=new_variable];
27 [label="6_ modifier onlyOwner { if (msg.sender == owner) _; }\n27-expression_statement-7-7", method="", type_label=expression_statement];
30 [label="6_ if_msg.sender == owner\n30-if-7-7", method="", type_label=if];
463 [label="6_ end_if", method="", type_label=end_if];
36 [label="6_ _;\n36-expression_statement-7-7", method="", type_label=expression_statement];
38 [label="7_ function changeOwner(address _newOwner) onlyOwner {\n        owner = _newOwner;\n    }\n38-function_definition-8-10", method="changeOwner(address _newOwner)", type_label=function_definition];
44 [label="7_ onlyOwner\n44-expression_statement-8-8", method="changeOwner(address _newOwner)", type_label=expression_statement];
47 [label="8_ owner = _newOwner;\n47-expression_statement-9-9", method="changeOwner(address _newOwner)", type_label=expression_statement];
51 [label="10_ function execute(address _dst, uint _value, bytes _data) onlyOwner {\n        _dst.call.value(_value)(_data);\n    }\n51-function_definition-11-13", method="execute(address _dst,uint _value,bytes _data)", type_label=function_definition];
65 [label="10_ onlyOwner\n65-expression_statement-11-11", method="execute(address _dst,uint _value,bytes _data)", type_label=expression_statement];
68 [label="11_ _dst.call.value(_value)(_data);\n68-expression_statement-12-12", method="execute(address _dst,uint _value,bytes _data)", type_label=expression_statement];
83 [label="15_ function transfer(address, uint) returns(bool);\n83-function_definition-16-16", method="transfer(address,uint)", type_label=function_definition];
95 [label="16_ function balanceOf(address) constant returns (uint);\n95-function_definition-17-17", method="balanceOf(address)", type_label=function_definition];
100 [label="16_ constant\n100-expression_statement-17-17", method="balanceOf(address)", type_label=expression_statement];
112 [label="19_ Token public token;\n112-new_variable-20-20", method="", type_label=new_variable];
118 [label="20_ uint public totalToDistribute;\n118-new_variable-21-21", method="", type_label=new_variable];
123 [label="21_ uint public next;\n123-new_variable-22-22", method="", type_label=new_variable];
128 [label="22_ struct Transfer {\n        address addr;\n        uint amount;\n    }\n128-expression_statement-23-26", method="Transfer()", type_label=expression_statement];
138 [label="26_ Transfer[] public transfers;\n138-new_variable-27-27", method="", type_label=new_variable];
145 [label="27_ function TokenSender(address _token) {\n        token = Token(_token);\n    }\n145-function_definition-28-30", method="TokenSender(address _token)", type_label=function_definition];
152 [label="28_ token = Token(_token);\n152-expression_statement-29-29", method="TokenSender(address _token)", type_label=expression_statement];
159 [label="30_ uint constant D160 = 0x0010000000000000000000000000000000000000000;\n159-new_variable-31-31", method="", type_label=new_variable];
164 [label="31_ function fill(uint[] data) onlyOwner {\n        if (next>0) throw;\n        uint acc;\n        uint offset = transfers.length;\n        transfers.length = transfers.length + data.length;\n        for (uint i = 0; i < data.length; i++ ) {\n            address addr = address( data[i] & (D160-1) );\n            uint amount = data[i] / D160;\n            transfers[offset + i].addr = addr;\n            transfers[offset + i].amount = amount;\n            acc += amount;\n        }\n        totalToDistribute += acc;\n    }\n164-function_definition-32-45", method="fill(uint[] data)", type_label=function_definition];
171 [label="31_ onlyOwner\n171-expression_statement-32-32", method="fill(uint[] data)", type_label=expression_statement];
174 [label="32_ if_next>0\n174-if-33-33", method="fill(uint[] data)", type_label=if];
607 [label="32_ end_if", method="fill(uint[] data)", type_label=end_if];
178 [label="32_ throw;\n178-expression_statement-33-33", method="fill(uint[] data)", type_label=expression_statement];
180 [label="33_ uint acc;\n180-new_variable-34-34", method="fill(uint[] data)", type_label=new_variable];
185 [label="34_ uint offset = transfers.length;\n185-new_variable-35-35", method="fill(uint[] data)", type_label=new_variable];
193 [label="35_ transfers.length = transfers.length + data.length;\n193-expression_statement-36-36", method="fill(uint[] data)", type_label=expression_statement];
205 [label="36_ for(i < data.length;;i++)\n205-for-37-43", method="fill(uint[] data)", type_label=for];
638 [label="36_ end_loop", method="fill(uint[] data)", type_label=end_loop];
218 [label="36_ i++\n218-expression_statement-37-37", method="fill(uint[] data)", type_label=expression_statement];
221 [label="37_ address addr = address( data[i] & (D160-1) );\n221-new_variable-38-38", method="fill(uint[] data)", type_label=new_variable];
236 [label="38_ uint amount = data[i] / D160;\n236-new_variable-39-39", method="fill(uint[] data)", type_label=new_variable];
246 [label="39_ transfers[offset + i].addr = addr;\n246-expression_statement-40-40", method="fill(uint[] data)", type_label=expression_statement];
256 [label="40_ transfers[offset + i].amount = amount;\n256-expression_statement-41-41", method="fill(uint[] data)", type_label=expression_statement];
266 [label="41_ acc += amount;\n266-expression_statement-42-42", method="fill(uint[] data)", type_label=expression_statement];
270 [label="43_ totalToDistribute += acc;\n270-expression_statement-44-44", method="fill(uint[] data)", type_label=expression_statement];
274 [label="45_ function run() onlyOwner {\n        if (transfers.length == 0) return;\n        uint mNext = next;\n        next = transfers.length;\n        if ((mNext == 0 ) && ( token.balanceOf(this) != totalToDistribute)) throw;\n        while ((mNext<transfers.length) && ( gas() > 150000 )) {\n            uint amount = transfers[mNext].amount;\n            address addr = transfers[mNext].addr;\n            if (amount > 0) {\n                if (!token.transfer(addr, transfers[mNext].amount)) throw;\n            }\n            mNext ++;\n        }\n        next = mNext;\n    }\n274-function_definition-46-60", method="run()", type_label=function_definition];
276 [label="45_ onlyOwner\n276-expression_statement-46-46", method="run()", type_label=expression_statement];
279 [label="46_ if_transfers.length == 0\n279-if-47-47", method="run()", type_label=if];
712 [label="46_ end_if", method="run()", type_label=end_if];
285 [label="46_ return;\n285-return-47-47", method="run()", type_label=return];
286 [label="47_ uint mNext = next;\n286-new_variable-48-48", method="run()", type_label=new_variable];
292 [label="48_ next = transfers.length;\n292-expression_statement-49-49", method="run()", type_label=expression_statement];
298 [label="49_ if_(mNext == 0 ) && ( token.balanceOf(this) != totalToDistribute)\n298-if-50-50", method="run()", type_label=if];
731 [label="49_ end_if", method="run()", type_label=end_if];
313 [label="49_ throw;\n313-expression_statement-50-50", method="run()", type_label=expression_statement];
315 [label="50_ while\n315-while-51-58", method="run()", type_label=while];
748 [label="50_ end_loop", method="run()", type_label=end_loop];
329 [label="51_ uint amount = transfers[mNext].amount;\n329-new_variable-52-52", method="run()", type_label=new_variable];
339 [label="52_ address addr = transfers[mNext].addr;\n339-new_variable-53-53", method="run()", type_label=new_variable];
349 [label="53_ if_amount > 0\n349-if-54-56", method="run()", type_label=if];
782 [label="53_ end_if", method="run()", type_label=end_if];
354 [label="54_ if\n354-if-55-55", method="run()", type_label=if];
787 [label="54_ end_if", method="run()", type_label=end_if];
368 [label="54_ throw;\n368-expression_statement-55-55", method="run()", type_label=expression_statement];
370 [label="56_ mNext ++;\n370-expression_statement-57-57", method="run()", type_label=expression_statement];
371 [label="56_ mNext ++\n371-expression_statement-57-57", method="run()", type_label=expression_statement];
373 [label="58_ next = mNext;\n373-expression_statement-59-59", method="run()", type_label=expression_statement];
377 [label="60_ function hasTerminated() constant returns (bool) {\n        if (transfers.length == 0) return false;\n        if (next < transfers.length) return false;\n        return true;\n    }\n377-function_definition-61-65", method="hasTerminated()", type_label=function_definition];
379 [label="60_ constant\n379-expression_statement-61-61", method="hasTerminated()", type_label=expression_statement];
386 [label="61_ if_transfers.length == 0\n386-if-62-62", method="hasTerminated()", type_label=if];
819 [label="61_ end_if", method="hasTerminated()", type_label=end_if];
392 [label="61_ return false;\n392-return-62-62", method="hasTerminated()", type_label=return];
395 [label="62_ if_next < transfers.length\n395-if-63-63", method="hasTerminated()", type_label=if];
828 [label="62_ end_if", method="hasTerminated()", type_label=end_if];
401 [label="62_ return false;\n401-return-63-63", method="hasTerminated()", type_label=return];
404 [label="63_ return true;\n404-return-64-64", method="hasTerminated()", type_label=return];
407 [label="65_ function nTransfers() constant returns (uint) {\n        return transfers.length;\n    }\n407-function_definition-66-68", method="nTransfers()", type_label=function_definition];
409 [label="65_ constant\n409-expression_statement-66-66", method="nTransfers()", type_label=expression_statement];
416 [label="66_ return transfers.length;\n416-return-67-67", method="nTransfers()", type_label=return];
420 [label="68_ function gas() internal constant returns (uint _gas) {\n        assembly {\n            _gas:= gas\n        }\n    }\n420-function_definition-69-73", method="gas()", type_label=function_definition];
423 [label="68_ constant\n423-expression_statement-69-69", method="gas()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 16  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
22 -> 27  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 36  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 463  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
463 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 463  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
38 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
51 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
118 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
145 -> 152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 178  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
174 -> 607  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
607 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 607  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
180 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 221  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
205 -> 638  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
638 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
218 -> 205  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
221 -> 236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
236 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
256 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 218  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
274 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 285  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
279 -> 712  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
712 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 712  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
285 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
286 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 313  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
298 -> 731  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
731 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 731  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
315 -> 329  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
315 -> 748  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
748 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 354  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
349 -> 782  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
354 -> 368  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
354 -> 787  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
787 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 787  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
370 -> 315  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
377 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 392  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
386 -> 819  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
819 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 819  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
392 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
395 -> 401  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
395 -> 828  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
828 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 828  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
401 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
404 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
407 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
416 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
