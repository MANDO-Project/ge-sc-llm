digraph  {
13 [label="2_ address public c = 0xF85A2E95FA30d005F629cBe6c6d2887D979ffF2A;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ address public owner = 0x788c45dd60ae4dbe5055b5ac02384d5dc84677b0;\n19-new_variable-4-4", method="", type_label=new_variable];
25 [label="4_ address public owner2 = 0x0C6561edad2017c01579Fd346a58197ea01A0Cf3;\n25-new_variable-5-5", method="", type_label=new_variable];
31 [label="5_ uint public active = 1;\n31-new_variable-6-6", method="", type_label=new_variable];
37 [label="6_ uint public token_price = 10**18*1/1000;\n37-new_variable-7-7", method="", type_label=new_variable];
52 [label="8_ tokens_buy();\n52-expression_statement-9-9", method="", type_label=expression_statement];
55 [label="10_ function tokens_buy() payable returns (bool) {         \n        require(active > 0);\n        require(msg.value >= token_price);        \n        uint tokens_buy = msg.value*10**18/token_price;\n        require(tokens_buy > 0);\n        if(!c.call(bytes4(sha3(\"transferFrom(address,address,uint256)\")),owner, msg.sender,tokens_buy)){\n        	return false;\n        }\n        uint sum2 = msg.value * 3 / 10;           \n        owner2.send(sum2);\n        return true;\n      }\n55-function_definition-11-22", method="tokens_buy()", type_label=function_definition];
63 [label="11_ require(active > 0);\n63-expression_statement-12-12", method="tokens_buy()", type_label=expression_statement];
70 [label="12_ require(msg.value >= token_price);\n70-expression_statement-13-13", method="tokens_buy()", type_label=expression_statement];
79 [label="13_ uint tokens_buy = msg.value*10**18/token_price;\n79-new_variable-14-14", method="tokens_buy()", type_label=new_variable];
93 [label="14_ require(tokens_buy > 0);\n93-expression_statement-15-15", method="tokens_buy()", type_label=expression_statement];
100 [label="15_ if\n100-if-16-18", method="tokens_buy()", type_label=if];
342 [label="15_ end_if", method="tokens_buy()", type_label=end_if];
123 [label="16_ return false;\n123-return-17-17", method="tokens_buy()", type_label=return];
126 [label="18_ uint sum2 = msg.value * 3 / 10;\n126-new_variable-19-19", method="tokens_buy()", type_label=new_variable];
138 [label="19_ owner2.send(sum2);\n138-expression_statement-20-20", method="tokens_buy()", type_label=expression_statement];
145 [label="20_ return true;\n145-return-21-21", method="tokens_buy()", type_label=return];
148 [label="22_ function withdraw(uint256 _amount) onlyOwner returns (bool result) {\n          uint256 balance;\n          balance = this.balance;\n          if(_amount > 0) balance = _amount;\n          owner.send(balance);\n          return true;\n      }\n148-function_definition-23-29", method="withdraw(uint256 _amount)", type_label=function_definition];
154 [label="22_ onlyOwner\n154-expression_statement-23-23", method="withdraw(uint256 _amount)", type_label=expression_statement];
162 [label="23_ uint256 balance;\n162-new_variable-24-24", method="withdraw(uint256 _amount)", type_label=new_variable];
167 [label="24_ balance = this.balance;\n167-expression_statement-25-25", method="withdraw(uint256 _amount)", type_label=expression_statement];
173 [label="25_ if__amount > 0\n173-if-26-26", method="withdraw(uint256 _amount)", type_label=if];
415 [label="25_ end_if", method="withdraw(uint256 _amount)", type_label=end_if];
177 [label="25_ balance = _amount;\n177-expression_statement-26-26", method="withdraw(uint256 _amount)", type_label=expression_statement];
181 [label="26_ owner.send(balance);\n181-expression_statement-27-27", method="withdraw(uint256 _amount)", type_label=expression_statement];
188 [label="27_ return true;\n188-return-28-28", method="withdraw(uint256 _amount)", type_label=return];
191 [label="29_ function change_token_price(uint256 _token_price) onlyOwner returns (bool result) {\n        token_price = _token_price;\n        return true;\n      }\n191-function_definition-30-33", method="change_token_price(uint256 _token_price)", type_label=function_definition];
197 [label="29_ onlyOwner\n197-expression_statement-30-30", method="change_token_price(uint256 _token_price)", type_label=expression_statement];
205 [label="30_ token_price = _token_price;\n205-expression_statement-31-31", method="change_token_price(uint256 _token_price)", type_label=expression_statement];
209 [label="31_ return true;\n209-return-32-32", method="change_token_price(uint256 _token_price)", type_label=return];
212 [label="33_ function change_active(uint256 _active) onlyOwner returns (bool result) {\n        active = _active;\n        return true;\n      }\n212-function_definition-34-37", method="change_active(uint256 _active)", type_label=function_definition];
218 [label="33_ onlyOwner\n218-expression_statement-34-34", method="change_active(uint256 _active)", type_label=expression_statement];
226 [label="34_ active = _active;\n226-expression_statement-35-35", method="change_active(uint256 _active)", type_label=expression_statement];
230 [label="35_ return true;\n230-return-36-36", method="change_active(uint256 _active)", type_label=return];
233 [label="37_ modifier onlyOwner() {\n        if (msg.sender != owner) {\n            throw;\n        }\n        _;\n    }\n233-expression_statement-38-43", method="", type_label=expression_statement];
236 [label="38_ if_msg.sender != owner\n236-if-39-41", method="", type_label=if];
478 [label="38_ end_if", method="", type_label=end_if];
243 [label="39_ throw;\n243-expression_statement-40-40", method="", type_label=expression_statement];
245 [label="41_ _;\n245-expression_statement-42-42", method="", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 19  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
19 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 63  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
63 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
70 -> 79  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 123  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
100 -> 342  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
342 -> 126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 342  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
123 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
126 -> 138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
145 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
148 -> 162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
167 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 177  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
173 -> 415  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
415 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 415  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
181 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
191 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
209 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
212 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
236 -> 243  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
236 -> 478  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
478 -> 245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
243 -> 478  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
