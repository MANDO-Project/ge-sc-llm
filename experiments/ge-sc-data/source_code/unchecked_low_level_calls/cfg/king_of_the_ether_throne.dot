digraph  {
13 [label="2_ struct Monarch {\n        address etherAddress;\n        string name;\n        uint claimPrice;\n        uint coronationTimestamp;\n    }\n13-expression_statement-3-8", method="Monarch()", type_label=expression_statement];
31 [label="8_ address wizardAddress;\n31-new_variable-9-9", method="", type_label=new_variable];
35 [label="9_ modifier onlywizard { if (msg.sender == wizardAddress) _; }\n35-expression_statement-10-10", method="", type_label=expression_statement];
38 [label="9_ if_msg.sender == wizardAddress\n38-if-10-10", method="", type_label=if];
478 [label="9_ end_if", method="", type_label=end_if];
44 [label="9_ _;\n44-expression_statement-10-10", method="", type_label=expression_statement];
46 [label="10_ uint constant startingClaimPrice = 100 finney;\n46-new_variable-11-11", method="", type_label=new_variable];
52 [label="11_ uint constant claimPriceAdjustNum = 3;\n52-new_variable-12-12", method="", type_label=new_variable];
57 [label="12_ uint constant claimPriceAdjustDen = 2;\n57-new_variable-13-13", method="", type_label=new_variable];
62 [label="13_ uint constant wizardCommissionFractionNum = 1;\n62-new_variable-14-14", method="", type_label=new_variable];
67 [label="14_ uint constant wizardCommissionFractionDen = 100;\n67-new_variable-15-15", method="", type_label=new_variable];
72 [label="15_ uint public currentClaimPrice;\n72-new_variable-16-16", method="", type_label=new_variable];
77 [label="16_ Monarch public currentMonarch;\n77-new_variable-17-17", method="", type_label=new_variable];
83 [label="17_ Monarch[] public pastMonarchs;\n83-new_variable-18-18", method="", type_label=new_variable];
90 [label="18_ function KingOfTheEtherThrone() {\n        wizardAddress = msg.sender;\n        currentClaimPrice = startingClaimPrice;\n        currentMonarch = Monarch(\n            wizardAddress,\n            \"[Vacant]\",\n            0,\n            block.timestamp\n        );\n    }\n90-function_definition-19-28", method="KingOfTheEtherThrone()", type_label=function_definition];
93 [label="19_ wizardAddress = msg.sender;\n93-expression_statement-20-20", method="KingOfTheEtherThrone()", type_label=expression_statement];
99 [label="20_ currentClaimPrice = startingClaimPrice;\n99-expression_statement-21-21", method="KingOfTheEtherThrone()", type_label=expression_statement];
103 [label="21_ currentMonarch = Monarch(\n            wizardAddress,\n            \"[Vacant]\",\n            0,\n            block.timestamp\n        );\n103-expression_statement-22-27", method="KingOfTheEtherThrone()", type_label=expression_statement];
119 [label="28_ function numberOfMonarchs() constant returns (uint n) {\n        return pastMonarchs.length;\n    }\n119-function_definition-29-31", method="numberOfMonarchs()", type_label=function_definition];
121 [label="28_ constant\n121-expression_statement-29-29", method="numberOfMonarchs()", type_label=expression_statement];
129 [label="29_ return pastMonarchs.length;\n129-return-30-30", method="numberOfMonarchs()", type_label=return];
149 [label="37_ claimThrone(string(msg.data));\n149-expression_statement-38-38", method="", type_label=expression_statement];
158 [label="39_ function claimThrone(string name) {\n        uint valuePaid = msg.value;\n        if (valuePaid < currentClaimPrice) {\n            msg.sender.send(valuePaid);\n            return;\n        }\n        if (valuePaid > currentClaimPrice) {\n            uint excessPaid = valuePaid - currentClaimPrice;\n            msg.sender.send(excessPaid);\n            valuePaid = valuePaid - excessPaid;\n        }\n        uint wizardCommission = (valuePaid * wizardCommissionFractionNum) / wizardCommissionFractionDen;\n        uint compensation = valuePaid - wizardCommission;\n        if (currentMonarch.etherAddress != wizardAddress) {\n            currentMonarch.etherAddress.send(compensation);\n        } else {\n        }\n        pastMonarchs.push(currentMonarch);\n        currentMonarch = Monarch(\n            msg.sender,\n            name,\n            valuePaid,\n            block.timestamp\n        );\n        uint rawNewClaimPrice = currentClaimPrice * claimPriceAdjustNum / claimPriceAdjustDen;\n        if (rawNewClaimPrice < 10 finney) {\n            currentClaimPrice = rawNewClaimPrice;\n        } else if (rawNewClaimPrice < 100 finney) {\n            currentClaimPrice = 100 szabo * (rawNewClaimPrice / 100 szabo);\n        } else if (rawNewClaimPrice < 1 ether) {\n            currentClaimPrice = 1 finney * (rawNewClaimPrice / 1 finney);\n        } else if (rawNewClaimPrice < 10 ether) {\n            currentClaimPrice = 10 finney * (rawNewClaimPrice / 10 finney);\n        } else if (rawNewClaimPrice < 100 ether) {\n            currentClaimPrice = 100 finney * (rawNewClaimPrice / 100 finney);\n        } else if (rawNewClaimPrice < 1000 ether) {\n            currentClaimPrice = 1 ether * (rawNewClaimPrice / 1 ether);\n        } else if (rawNewClaimPrice < 10000 ether) {\n            currentClaimPrice = 10 ether * (rawNewClaimPrice / 10 ether);\n        } else {\n            currentClaimPrice = rawNewClaimPrice;\n        }\n        ThroneClaimed(currentMonarch.etherAddress, currentMonarch.name, currentClaimPrice);\n    }\n158-function_definition-40-83", method="claimThrone(string name)", type_label=function_definition];
165 [label="40_ uint valuePaid = msg.value;\n165-new_variable-41-41", method="claimThrone(string name)", type_label=new_variable];
173 [label="41_ if_valuePaid < currentClaimPrice\n173-if-42-45", method="claimThrone(string name)", type_label=if];
613 [label="41_ end_if", method="claimThrone(string name)", type_label=end_if];
178 [label="42_ msg.sender.send(valuePaid);\n178-expression_statement-43-43", method="claimThrone(string name)", type_label=expression_statement];
187 [label="43_ return;\n187-return-44-44", method="claimThrone(string name)", type_label=return];
188 [label="45_ if_valuePaid > currentClaimPrice\n188-if-46-50", method="claimThrone(string name)", type_label=if];
628 [label="45_ end_if", method="claimThrone(string name)", type_label=end_if];
193 [label="46_ uint excessPaid = valuePaid - currentClaimPrice;\n193-new_variable-47-47", method="claimThrone(string name)", type_label=new_variable];
201 [label="47_ msg.sender.send(excessPaid);\n201-expression_statement-48-48", method="claimThrone(string name)", type_label=expression_statement];
210 [label="48_ valuePaid = valuePaid - excessPaid;\n210-expression_statement-49-49", method="claimThrone(string name)", type_label=expression_statement];
216 [label="50_ uint wizardCommission = (valuePaid * wizardCommissionFractionNum) / wizardCommissionFractionDen;\n216-new_variable-51-51", method="claimThrone(string name)", type_label=new_variable];
227 [label="51_ uint compensation = valuePaid - wizardCommission;\n227-new_variable-52-52", method="claimThrone(string name)", type_label=new_variable];
235 [label="52_ if_currentMonarch.etherAddress != wizardAddress\n235-if-53-56", method="claimThrone(string name)", type_label=if];
675 [label="52_ end_if", method="claimThrone(string name)", type_label=end_if];
242 [label="53_ currentMonarch.etherAddress.send(compensation);\n242-expression_statement-54-54", method="claimThrone(string name)", type_label=expression_statement];
252 [label="56_ pastMonarchs.push(currentMonarch);\n252-expression_statement-57-57", method="claimThrone(string name)", type_label=expression_statement];
259 [label="57_ currentMonarch = Monarch(\n            msg.sender,\n            name,\n            valuePaid,\n            block.timestamp\n        );\n259-expression_statement-58-63", method="claimThrone(string name)", type_label=expression_statement];
276 [label="63_ uint rawNewClaimPrice = currentClaimPrice * claimPriceAdjustNum / claimPriceAdjustDen;\n276-new_variable-64-64", method="claimThrone(string name)", type_label=new_variable];
286 [label="64_ if_rawNewClaimPrice < 10 finney\n286-if-65-81", method="claimThrone(string name)", type_label=if];
726 [label="64_ end_if", method="claimThrone(string name)", type_label=end_if];
292 [label="65_ currentClaimPrice = rawNewClaimPrice;\n292-expression_statement-66-66", method="claimThrone(string name)", type_label=expression_statement];
296 [label="66_ if_rawNewClaimPrice < 100 finney\n296-if-67-81", method="claimThrone(string name)", type_label=if];
302 [label="67_ currentClaimPrice = 100 szabo * (rawNewClaimPrice / 100 szabo);\n302-expression_statement-68-68", method="claimThrone(string name)", type_label=expression_statement];
313 [label="68_ if_rawNewClaimPrice < 1 ether\n313-if-69-81", method="claimThrone(string name)", type_label=if];
319 [label="69_ currentClaimPrice = 1 finney * (rawNewClaimPrice / 1 finney);\n319-expression_statement-70-70", method="claimThrone(string name)", type_label=expression_statement];
330 [label="70_ if_rawNewClaimPrice < 10 ether\n330-if-71-81", method="claimThrone(string name)", type_label=if];
336 [label="71_ currentClaimPrice = 10 finney * (rawNewClaimPrice / 10 finney);\n336-expression_statement-72-72", method="claimThrone(string name)", type_label=expression_statement];
347 [label="72_ if_rawNewClaimPrice < 100 ether\n347-if-73-81", method="claimThrone(string name)", type_label=if];
353 [label="73_ currentClaimPrice = 100 finney * (rawNewClaimPrice / 100 finney);\n353-expression_statement-74-74", method="claimThrone(string name)", type_label=expression_statement];
364 [label="74_ if_rawNewClaimPrice < 1000 ether\n364-if-75-81", method="claimThrone(string name)", type_label=if];
370 [label="75_ currentClaimPrice = 1 ether * (rawNewClaimPrice / 1 ether);\n370-expression_statement-76-76", method="claimThrone(string name)", type_label=expression_statement];
381 [label="76_ if_rawNewClaimPrice < 10000 ether\n381-if-77-81", method="claimThrone(string name)", type_label=if];
387 [label="77_ currentClaimPrice = 10 ether * (rawNewClaimPrice / 10 ether);\n387-expression_statement-78-78", method="claimThrone(string name)", type_label=expression_statement];
399 [label="79_ currentClaimPrice = rawNewClaimPrice;\n399-expression_statement-80-80", method="claimThrone(string name)", type_label=expression_statement];
403 [label="81_ ThroneClaimed(currentMonarch.etherAddress, currentMonarch.name, currentClaimPrice);\n403-expression_statement-82-82", method="claimThrone(string name)", type_label=expression_statement];
416 [label="83_ function sweepCommission(uint amount) onlywizard {\n        wizardAddress.send(amount);\n    }\n416-function_definition-84-86", method="sweepCommission(uint amount)", type_label=function_definition];
422 [label="83_ onlywizard\n422-expression_statement-84-84", method="sweepCommission(uint amount)", type_label=expression_statement];
425 [label="84_ wizardAddress.send(amount);\n425-expression_statement-85-85", method="sweepCommission(uint amount)", type_label=expression_statement];
432 [label="86_ function transferOwnership(address newOwner) onlywizard {\n        wizardAddress = newOwner;\n    }\n432-function_definition-87-89", method="transferOwnership(address newOwner)", type_label=function_definition];
438 [label="86_ onlywizard\n438-expression_statement-87-87", method="transferOwnership(address newOwner)", type_label=expression_statement];
441 [label="87_ wizardAddress = newOwner;\n441-expression_statement-88-88", method="transferOwnership(address newOwner)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
251;
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
31 -> 35  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 46  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 44  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
38 -> 478  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
478 -> 46  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 478  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
46 -> 52  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
52 -> 57  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
57 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 83  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
158 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 178  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
173 -> 613  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
613 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 613  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
187 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
188 -> 193  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
188 -> 628  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
628 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
193 -> 201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 628  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
216 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
235 -> 242  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
675 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 675  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
252 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
276 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 292  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
286 -> 296  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
726 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 726  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
296 -> 302  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
296 -> 313  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
302 -> 726  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
313 -> 319  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
313 -> 330  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
319 -> 726  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
330 -> 336  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
330 -> 347  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
336 -> 726  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
347 -> 353  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
347 -> 364  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
353 -> 726  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
364 -> 370  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
364 -> 381  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
370 -> 726  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
381 -> 387  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
381 -> 399  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
387 -> 726  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
399 -> 726  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
416 -> 425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 675  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
