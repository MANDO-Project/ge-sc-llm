digraph  {
13 [label="2_ function transfer(address from,address caddress,address[] _tos,uint[] v)public returns (bool){\n        require(_tos.length > 0);\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for(uint i=0;i<_tos.length;i++){\n            caddress.call(id,from,_tos[i],v[i]);\n        }\n        return true;\n    }\n13-function_definition-3-10", method="transfer(address from,address caddress,address[] _tos,uint[] v)", type_label=function_definition];
39 [label="3_ require(_tos.length > 0);\n39-expression_statement-4-4", method="transfer(address from,address caddress,address[] _tos,uint[] v)", type_label=expression_statement];
48 [label="4_ bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n48-new_variable-5-5", method="transfer(address from,address caddress,address[] _tos,uint[] v)", type_label=new_variable];
60 [label="5_ for(i<_tos.length;;i++)\n60-for-6-8", method="transfer(address from,address caddress,address[] _tos,uint[] v)", type_label=for];
151 [label="5_ end_loop", method="transfer(address from,address caddress,address[] _tos,uint[] v)", type_label=end_loop];
73 [label="5_ i++\n73-expression_statement-6-6", method="transfer(address from,address caddress,address[] _tos,uint[] v)", type_label=expression_statement];
76 [label="6_ caddress.call(id,from,_tos[i],v[i]);\n76-expression_statement-7-7", method="transfer(address from,address caddress,address[] _tos,uint[] v)", type_label=expression_statement];
93 [label="8_ return true;\n93-return-9-9", method="transfer(address from,address caddress,address[] _tos,uint[] v)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
39 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 60  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 76  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
60 -> 151  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
151 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 60  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
76 -> 73  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
93 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
