digraph  {
15 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n15-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
32 [label="3_ if_a == 0\n32-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
1679 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
37 [label="4_ return 0;\n37-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
39 [label="6_ uint256 c = a * b;\n39-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
47 [label="7_ require(c / a == b);\n47-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
56 [label="8_ return c;\n56-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
58 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n58-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
75 [label="11_ require(b > 0);\n75-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
82 [label="12_ uint256 c = a / b;\n82-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
90 [label="13_ return c;\n90-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
92 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n92-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
109 [label="16_ require(b <= a);\n109-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
116 [label="17_ uint256 c = a - b;\n116-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
124 [label="18_ return c;\n124-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
126 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n126-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
143 [label="21_ uint256 c = a + b;\n143-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
151 [label="22_ require(c >= a);\n151-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
158 [label="23_ return c;\n158-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
160 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n160-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
177 [label="26_ require(b != 0);\n177-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
184 [label="27_ return a % b;\n184-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
188 [label="29_ function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n188-function_definition-30-32", method="max(uint256 a,uint256 b)", type_label=function_definition];
205 [label="30_ return a >= b ? a : b;\n205-return-31-31", method="max(uint256 a,uint256 b)", type_label=return];
212 [label="32_ function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n212-function_definition-33-35", method="min(uint256 a,uint256 b)", type_label=function_definition];
229 [label="33_ return a < b ? a : b;\n229-return-34-34", method="min(uint256 a,uint256 b)", type_label=return];
236 [label="35_ function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n236-function_definition-36-38", method="average(uint256 a,uint256 b)", type_label=function_definition];
253 [label="36_ return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n253-return-37-37", method="average(uint256 a,uint256 b)", type_label=return];
278 [label="40_ function totalSupply() public view returns (uint256);\n278-function_definition-41-41", method="totalSupply()", type_label=function_definition];
286 [label="41_ function bug_unchk_send6() payable public{\n      msg.sender.transfer(1 ether);}\n286-function_definition-42-43", method="bug_unchk_send6()", type_label=function_definition];
291 [label="42_ msg.sender.transfer(1 ether);\n291-expression_statement-43-43", method="bug_unchk_send6()", type_label=expression_statement];
301 [label="43_ function balanceOf(address _owner) public view returns (uint256);\n301-function_definition-44-44", method="balanceOf(address _owner)", type_label=function_definition];
313 [label="44_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n313-function_definition-45-46", method="bug_unchk_send16()", type_label=function_definition];
318 [label="45_ msg.sender.transfer(1 ether);\n318-expression_statement-46-46", method="bug_unchk_send16()", type_label=expression_statement];
328 [label="46_ function transfer(address _to, uint256 _value) public returns (bool);\n328-function_definition-47-47", method="transfer(address _to,uint256 _value)", type_label=function_definition];
343 [label="47_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n343-function_definition-48-49", method="bug_unchk_send24()", type_label=function_definition];
348 [label="48_ msg.sender.transfer(1 ether);\n348-expression_statement-49-49", method="bug_unchk_send24()", type_label=expression_statement];
358 [label="49_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n358-function_definition-50-50", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
377 [label="50_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n377-function_definition-51-52", method="bug_unchk_send5()", type_label=function_definition];
382 [label="51_ msg.sender.transfer(1 ether);\n382-expression_statement-52-52", method="bug_unchk_send5()", type_label=expression_statement];
392 [label="52_ function approve(address _spender, uint256 _value) public returns (bool);\n392-function_definition-53-53", method="approve(address _spender,uint256 _value)", type_label=function_definition];
407 [label="53_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n407-function_definition-54-55", method="bug_unchk_send15()", type_label=function_definition];
412 [label="54_ msg.sender.transfer(1 ether);\n412-expression_statement-55-55", method="bug_unchk_send15()", type_label=expression_statement];
422 [label="55_ function allowance(address _owner, address _spender) public view returns (uint256);\n422-function_definition-56-56", method="allowance(address _owner,address _spender)", type_label=function_definition];
438 [label="56_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n438-function_definition-57-58", method="bug_unchk_send28()", type_label=function_definition];
443 [label="57_ msg.sender.transfer(1 ether);\n443-expression_statement-58-58", method="bug_unchk_send28()", type_label=expression_statement];
453 [label="58_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n453-function_definition-59-60", method="bug_unchk_send27()", type_label=function_definition];
458 [label="59_ msg.sender.transfer(1 ether);\n458-expression_statement-60-60", method="bug_unchk_send27()", type_label=expression_statement];
482 [label="61_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n482-function_definition-62-63", method="bug_unchk_send31()", type_label=function_definition];
487 [label="62_ msg.sender.transfer(1 ether);\n487-expression_statement-63-63", method="bug_unchk_send31()", type_label=expression_statement];
514 [label="66_ function tokenFallback(address _from, uint _value, bytes memory _data) public;\n514-function_definition-67-67", method="tokenFallback(address _from,uint _value,bytes memory _data)", type_label=function_definition];
529 [label="67_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n529-function_definition-68-69", method="bug_unchk_send21()", type_label=function_definition];
534 [label="68_ msg.sender.transfer(1 ether);\n534-expression_statement-69-69", method="bug_unchk_send21()", type_label=expression_statement];
547 [label="71_ function balanceOf(address who) public view returns (uint);\n547-function_definition-72-72", method="balanceOf(address who)", type_label=function_definition];
559 [label="72_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n559-function_definition-73-74", method="bug_unchk_send10()", type_label=function_definition];
564 [label="73_ msg.sender.transfer(1 ether);\n564-expression_statement-74-74", method="bug_unchk_send10()", type_label=expression_statement];
574 [label="74_ function transfer(address to, uint value) public returns (bool);\n574-function_definition-75-75", method="transfer(address to,uint value)", type_label=function_definition];
589 [label="75_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n589-function_definition-76-77", method="bug_unchk_send22()", type_label=function_definition];
594 [label="76_ msg.sender.transfer(1 ether);\n594-expression_statement-77-77", method="bug_unchk_send22()", type_label=expression_statement];
604 [label="77_ function transfer(address to, uint value, bytes memory data) public returns (bool);\n604-function_definition-78-78", method="transfer(address to,uint value,bytes memory data)", type_label=function_definition];
623 [label="78_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n623-function_definition-79-80", method="bug_unchk_send12()", type_label=function_definition];
628 [label="79_ msg.sender.transfer(1 ether);\n628-expression_statement-80-80", method="bug_unchk_send12()", type_label=expression_statement];
638 [label="80_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n638-function_definition-81-82", method="bug_unchk_send13()", type_label=function_definition];
643 [label="81_ msg.sender.transfer(1 ether);\n643-expression_statement-82-82", method="bug_unchk_send13()", type_label=expression_statement];
678 [label="86_ mapping(address => uint256) balances;\n678-new_variable-87-87", method="", type_label=new_variable];
684 [label="87_ function transfer(address _to, uint _value) public returns (bool) {\n        uint codeLength;\n        bytes memory empty;\n        assembly {\n            codeLength := extcodesize(_to)\n        }\n        require(_value > 0);\n        require(balances[msg.sender] >= _value);\n        require(balances[_to] + _value > 0);\n        require(msg.sender != _to);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if (codeLength > 0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, empty);\n            return false;\n        }\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n684-function_definition-88-107", method="transfer(address _to,uint _value)", type_label=function_definition];
700 [label="88_ uint codeLength;\n700-new_variable-89-89", method="transfer(address _to,uint _value)", type_label=new_variable];
705 [label="89_ bytes memory empty;\n705-new_variable-90-90", method="transfer(address _to,uint _value)", type_label=new_variable];
720 [label="93_ require(_value > 0);\n720-expression_statement-94-94", method="transfer(address _to,uint _value)", type_label=expression_statement];
727 [label="94_ require(balances[msg.sender] >= _value);\n727-expression_statement-95-95", method="transfer(address _to,uint _value)", type_label=expression_statement];
738 [label="95_ require(balances[_to] + _value > 0);\n738-expression_statement-96-96", method="transfer(address _to,uint _value)", type_label=expression_statement];
749 [label="96_ require(msg.sender != _to);\n749-expression_statement-97-97", method="transfer(address _to,uint _value)", type_label=expression_statement];
758 [label="97_ balances[msg.sender] = balances[msg.sender].sub(_value);\n758-expression_statement-98-98", method="transfer(address _to,uint _value)", type_label=expression_statement];
775 [label="98_ balances[_to] = balances[_to].add(_value);\n775-expression_statement-99-99", method="transfer(address _to,uint _value)", type_label=expression_statement];
788 [label="99_ if_codeLength > 0\n788-if-100-104", method="transfer(address _to,uint _value)", type_label=if];
2435 [label="99_ end_if", method="transfer(address _to,uint _value)", type_label=end_if];
793 [label="100_ ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n793-new_variable-101-101", method="transfer(address _to,uint _value)", type_label=new_variable];
803 [label="101_ receiver.tokenFallback(msg.sender, _value, empty);\n803-expression_statement-102-102", method="transfer(address _to,uint _value)", type_label=expression_statement];
816 [label="102_ return false;\n816-return-103-103", method="transfer(address _to,uint _value)", type_label=return];
829 [label="105_ return true;\n829-return-106-106", method="transfer(address _to,uint _value)", type_label=return];
832 [label="107_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n832-function_definition-108-109", method="bug_unchk_send11()", type_label=function_definition];
837 [label="108_ msg.sender.transfer(1 ether);\n837-expression_statement-109-109", method="bug_unchk_send11()", type_label=expression_statement];
847 [label="109_ function transfer(address _to, uint _value, bytes memory _data) public returns (bool) {\n        uint codeLength;\n        assembly {\n            codeLength := extcodesize(_to)\n        }\n        require(_value > 0);\n        require(balances[msg.sender] >= _value);\n        require(balances[_to] + _value > 0);\n        require(msg.sender != _to);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        if (codeLength > 0) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n            return false;\n        }\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n847-function_definition-110-128", method="transfer(address _to,uint _value,bytes memory _data)", type_label=function_definition];
867 [label="110_ uint codeLength;\n867-new_variable-111-111", method="transfer(address _to,uint _value,bytes memory _data)", type_label=new_variable];
882 [label="114_ require(_value > 0);\n882-expression_statement-115-115", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
889 [label="115_ require(balances[msg.sender] >= _value);\n889-expression_statement-116-116", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
900 [label="116_ require(balances[_to] + _value > 0);\n900-expression_statement-117-117", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
911 [label="117_ require(msg.sender != _to);\n911-expression_statement-118-118", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
920 [label="118_ balances[msg.sender] = balances[msg.sender].sub(_value);\n920-expression_statement-119-119", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
937 [label="119_ balances[_to] = balances[_to].add(_value);\n937-expression_statement-120-120", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
950 [label="120_ if_codeLength > 0\n950-if-121-125", method="transfer(address _to,uint _value,bytes memory _data)", type_label=if];
2597 [label="120_ end_if", method="transfer(address _to,uint _value,bytes memory _data)", type_label=end_if];
955 [label="121_ ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n955-new_variable-122-122", method="transfer(address _to,uint _value,bytes memory _data)", type_label=new_variable];
965 [label="122_ receiver.tokenFallback(msg.sender, _value, _data);\n965-expression_statement-123-123", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
978 [label="123_ return false;\n978-return-124-124", method="transfer(address _to,uint _value,bytes memory _data)", type_label=return];
991 [label="126_ return true;\n991-return-127-127", method="transfer(address _to,uint _value,bytes memory _data)", type_label=return];
994 [label="128_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n994-function_definition-129-130", method="bug_unchk_send1()", type_label=function_definition];
999 [label="129_ msg.sender.transfer(1 ether);\n999-expression_statement-130-130", method="bug_unchk_send1()", type_label=expression_statement];
1009 [label="130_ function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n1009-function_definition-131-133", method="balanceOf(address _owner)", type_label=function_definition];
1022 [label="131_ return balances[_owner];\n1022-return-132-132", method="balanceOf(address _owner)", type_label=return];
1026 [label="133_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n1026-function_definition-134-135", method="bug_unchk_send2()", type_label=function_definition];
1031 [label="134_ msg.sender.transfer(1 ether);\n1031-expression_statement-135-135", method="bug_unchk_send2()", type_label=expression_statement];
1044 [label="137_ address public owner;\n1044-new_variable-138-138", method="", type_label=new_variable];
1051 [label="139_ owner = msg.sender;\n1051-expression_statement-140-140", method="", type_label=expression_statement];
1057 [label="140_ owner = 0x800A4B210B920020bE22668d28afd7ddef5c6243\n;\n1057-expression_statement-141-142", method="", type_label=expression_statement];
1061 [label="143_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n1061-function_definition-144-145", method="bug_unchk_send17()", type_label=function_definition];
1066 [label="144_ msg.sender.transfer(1 ether);\n1066-expression_statement-145-145", method="bug_unchk_send17()", type_label=expression_statement];
1076 [label="145_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n1076-expression_statement-146-149", method="", type_label=expression_statement];
1079 [label="146_ require(msg.sender == owner);\n1079-expression_statement-147-147", method="", type_label=expression_statement];
1088 [label="147_ _;\n1088-expression_statement-148-148", method="", type_label=expression_statement];
1099 [label="151_ string public constant name = \"Grand Coin\";\n1099-new_variable-152-152", method="", type_label=new_variable];
1106 [label="152_ string public constant symbol = \"GRAND\";\n1106-new_variable-153-153", method="", type_label=new_variable];
1113 [label="153_ uint8 public constant decimals = 18;\n1113-new_variable-154-154", method="", type_label=new_variable];
1119 [label="154_ uint256 public tokenRemained = 2 * (10 ** 9) * (10 ** uint(decimals));\n1119-new_variable-155-155", method="", type_label=new_variable];
1137 [label="155_ uint256 public totalSupply = 2 * (10 ** 9) * (10 ** uint(decimals));\n1137-new_variable-156-156", method="", type_label=new_variable];
1155 [label="156_ function bug_unchk_send18() payable public{\n      msg.sender.transfer(1 ether);}\n1155-function_definition-157-158", method="bug_unchk_send18()", type_label=function_definition];
1160 [label="157_ msg.sender.transfer(1 ether);\n1160-expression_statement-158-158", method="bug_unchk_send18()", type_label=expression_statement];
1170 [label="158_ bool public pause = false;\n1170-new_variable-159-159", method="", type_label=new_variable];
1177 [label="159_ function bug_unchk_send29() payable public{\n      msg.sender.transfer(1 ether);}\n1177-function_definition-160-161", method="bug_unchk_send29()", type_label=function_definition];
1182 [label="160_ msg.sender.transfer(1 ether);\n1182-expression_statement-161-161", method="bug_unchk_send29()", type_label=expression_statement];
1192 [label="161_ mapping(address => bool) lockAddresses;\n1192-new_variable-162-162", method="", type_label=new_variable];
1200 [label="163_ balances[0x96F7F180C6B53e9313Dc26589739FDC8200a699f] = totalSupply;\n1200-expression_statement-164-164", method="", type_label=expression_statement];
1206 [label="165_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n1206-function_definition-166-167", method="bug_unchk_send3()", type_label=function_definition];
1211 [label="166_ msg.sender.transfer(1 ether);\n1211-expression_statement-167-167", method="bug_unchk_send3()", type_label=expression_statement];
1221 [label="167_ function changeOwner(address _new) public onlyOwner {\n    	require(_new != address(0));\n        owner = _new;\n    }\n1221-function_definition-168-171", method="changeOwner(address _new)", type_label=function_definition];
1228 [label="167_ onlyOwner\n1228-expression_statement-168-168", method="changeOwner(address _new)", type_label=expression_statement];
1231 [label="168_ require(_new != address(0));\n1231-expression_statement-169-169", method="changeOwner(address _new)", type_label=expression_statement];
1240 [label="169_ owner = _new;\n1240-expression_statement-170-170", method="changeOwner(address _new)", type_label=expression_statement];
1244 [label="171_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n1244-function_definition-172-173", method="bug_unchk_send9()", type_label=function_definition];
1249 [label="172_ msg.sender.transfer(1 ether);\n1249-expression_statement-173-173", method="bug_unchk_send9()", type_label=expression_statement];
1259 [label="173_ function pauseContract() public onlyOwner {\n        pause = true;\n    }\n1259-function_definition-174-176", method="pauseContract()", type_label=function_definition];
1262 [label="173_ onlyOwner\n1262-expression_statement-174-174", method="pauseContract()", type_label=expression_statement];
1265 [label="174_ pause = true;\n1265-expression_statement-175-175", method="pauseContract()", type_label=expression_statement];
1270 [label="176_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n1270-function_definition-177-178", method="bug_unchk_send25()", type_label=function_definition];
1275 [label="177_ msg.sender.transfer(1 ether);\n1275-expression_statement-178-178", method="bug_unchk_send25()", type_label=expression_statement];
1285 [label="178_ function resumeContract() public onlyOwner {\n        pause = false;\n    }\n1285-function_definition-179-181", method="resumeContract()", type_label=function_definition];
1288 [label="178_ onlyOwner\n1288-expression_statement-179-179", method="resumeContract()", type_label=expression_statement];
1291 [label="179_ pause = false;\n1291-expression_statement-180-180", method="resumeContract()", type_label=expression_statement];
1296 [label="181_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n1296-function_definition-182-183", method="bug_unchk_send19()", type_label=function_definition];
1301 [label="182_ msg.sender.transfer(1 ether);\n1301-expression_statement-183-183", method="bug_unchk_send19()", type_label=expression_statement];
1311 [label="183_ function is_contract_paused() public view returns (bool) {\n        return pause;\n    }\n1311-function_definition-184-186", method="is_contract_paused()", type_label=function_definition];
1320 [label="184_ return pause;\n1320-return-185-185", method="is_contract_paused()", type_label=return];
1322 [label="186_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n1322-function_definition-187-188", method="bug_unchk_send26()", type_label=function_definition];
1327 [label="187_ msg.sender.transfer(1 ether);\n1327-expression_statement-188-188", method="bug_unchk_send26()", type_label=expression_statement];
1337 [label="188_ function lock(address _addr) public onlyOwner {\n        lockAddresses[_addr] = true;\n    }\n1337-function_definition-189-191", method="lock(address _addr)", type_label=function_definition];
1344 [label="188_ onlyOwner\n1344-expression_statement-189-189", method="lock(address _addr)", type_label=expression_statement];
1347 [label="189_ lockAddresses[_addr] = true;\n1347-expression_statement-190-190", method="lock(address _addr)", type_label=expression_statement];
1354 [label="191_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n1354-function_definition-192-193", method="bug_unchk_send20()", type_label=function_definition];
1359 [label="192_ msg.sender.transfer(1 ether);\n1359-expression_statement-193-193", method="bug_unchk_send20()", type_label=expression_statement];
1369 [label="193_ function unlock(address _addr) public onlyOwner {\n        lockAddresses[_addr] = false;\n    }\n1369-function_definition-194-196", method="unlock(address _addr)", type_label=function_definition];
1376 [label="193_ onlyOwner\n1376-expression_statement-194-194", method="unlock(address _addr)", type_label=expression_statement];
1379 [label="194_ lockAddresses[_addr] = false;\n1379-expression_statement-195-195", method="unlock(address _addr)", type_label=expression_statement];
1386 [label="196_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n1386-function_definition-197-198", method="bug_unchk_send32()", type_label=function_definition];
1391 [label="197_ msg.sender.transfer(1 ether);\n1391-expression_statement-198-198", method="bug_unchk_send32()", type_label=expression_statement];
1401 [label="198_ function am_I_locked(address _addr) public view returns (bool) {\n        return lockAddresses[_addr];\n    }\n1401-function_definition-199-201", method="am_I_locked(address _addr)", type_label=function_definition];
1414 [label="199_ return lockAddresses[_addr];\n1414-return-200-200", method="am_I_locked(address _addr)", type_label=return];
1418 [label="201_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n1418-function_definition-202-203", method="bug_unchk_send4()", type_label=function_definition];
1423 [label="202_ msg.sender.transfer(1 ether);\n1423-expression_statement-203-203", method="bug_unchk_send4()", type_label=expression_statement];
1437 [label="204_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1437-function_definition-205-206", method="bug_unchk_send7()", type_label=function_definition];
1442 [label="205_ msg.sender.transfer(1 ether);\n1442-expression_statement-206-206", method="bug_unchk_send7()", type_label=expression_statement];
1452 [label="206_ function getETH(uint256 _amount) public onlyOwner {\n        msg.sender.transfer(_amount);\n    }\n1452-function_definition-207-209", method="getETH(uint256 _amount)", type_label=function_definition];
1459 [label="206_ onlyOwner\n1459-expression_statement-207-207", method="getETH(uint256 _amount)", type_label=expression_statement];
1462 [label="207_ msg.sender.transfer(_amount);\n1462-expression_statement-208-208", method="getETH(uint256 _amount)", type_label=expression_statement];
1471 [label="209_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n1471-function_definition-210-211", method="bug_unchk_send23()", type_label=function_definition];
1476 [label="210_ msg.sender.transfer(1 ether);\n1476-expression_statement-211-211", method="bug_unchk_send23()", type_label=expression_statement];
1486 [label="211_ modifier transferable(address _addr) {\n        require(!pause);\n        require(!lockAddresses[_addr]);\n        _;\n    }\n1486-expression_statement-212-216", method="", type_label=expression_statement];
1493 [label="212_ require(!pause);\n1493-expression_statement-213-213", method="", type_label=expression_statement];
1499 [label="213_ require(!lockAddresses[_addr]);\n1499-expression_statement-214-214", method="", type_label=expression_statement];
1507 [label="214_ _;\n1507-expression_statement-215-215", method="", type_label=expression_statement];
1509 [label="216_ function transfer(address _to, uint _value, bytes memory _data) public transferable(msg.sender) returns (bool) {\n        return super.transfer(_to, _value, _data);\n    }\n1509-function_definition-217-219", method="transfer(address _to,uint _value,bytes memory _data)", type_label=function_definition];
1524 [label="216_ transferable(msg.sender)\n1524-expression_statement-217-217", method="transfer(address _to,uint _value,bytes memory _data)", type_label=expression_statement];
1535 [label="217_ return super.transfer(_to, _value, _data);\n1535-return-218-218", method="transfer(address _to,uint _value,bytes memory _data)", type_label=return];
1546 [label="219_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n1546-function_definition-220-221", method="bug_unchk_send14()", type_label=function_definition];
1551 [label="220_ msg.sender.transfer(1 ether);\n1551-expression_statement-221-221", method="bug_unchk_send14()", type_label=expression_statement];
1561 [label="221_ function transfer(address _to, uint _value) public transferable(msg.sender) returns (bool) {\n        return super.transfer(_to, _value);\n    }\n1561-function_definition-222-224", method="transfer(address _to,uint _value)", type_label=function_definition];
1572 [label="221_ transferable(msg.sender)\n1572-expression_statement-222-222", method="transfer(address _to,uint _value)", type_label=expression_statement];
1583 [label="222_ return super.transfer(_to, _value);\n1583-return-223-223", method="transfer(address _to,uint _value)", type_label=return];
1592 [label="224_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n1592-function_definition-225-226", method="bug_unchk_send30()", type_label=function_definition];
1597 [label="225_ msg.sender.transfer(1 ether);\n1597-expression_statement-226-226", method="bug_unchk_send30()", type_label=expression_statement];
1607 [label="226_ function transferAnyERC20Token(address _tokenAddress, uint256 _value) public onlyOwner returns (bool) {\n        return ERC20(_tokenAddress).transfer(owner, _value);\n    }\n1607-function_definition-227-229", method="transferAnyERC20Token(address _tokenAddress,uint256 _value)", type_label=function_definition];
1618 [label="226_ onlyOwner\n1618-expression_statement-227-227", method="transferAnyERC20Token(address _tokenAddress,uint256 _value)", type_label=expression_statement];
1625 [label="227_ return ERC20(_tokenAddress).transfer(owner, _value);\n1625-return-228-228", method="transferAnyERC20Token(address _tokenAddress,uint256 _value)", type_label=return];
1637 [label="229_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n1637-function_definition-230-231", method="bug_unchk_send8()", type_label=function_definition];
1642 [label="230_ msg.sender.transfer(1 ether);\n1642-expression_statement-231-231", method="bug_unchk_send8()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
819;
981;
15 -> 32  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
32 -> 37  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
32 -> 1679  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1679 -> 39  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 1679  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
37 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
39 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
47 -> 56  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
56 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
58 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 82  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
92 -> 109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
116 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
126 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
143 -> 151  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
151 -> 158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
160 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
188 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
212 -> 229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
229 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
236 -> 253  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
253 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
286 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
438 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
589 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
623 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
720 -> 727  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
738 -> 749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 775  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
775 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 793  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
788 -> 2435  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2435 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
793 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 2435  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
816 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
829 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
832 -> 837  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
889 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
920 -> 937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
937 -> 950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
950 -> 955  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
950 -> 2597  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2597 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 2597  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
978 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
991 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
994 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1022 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1026 -> 1031  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1051 -> 1057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1061 -> 1066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1079 -> 1088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1106 -> 1113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1113 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1119 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1155 -> 1160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1177 -> 1182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1206 -> 1211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1221 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 1249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1259 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1270 -> 1275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1285 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1296 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1311 -> 1320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1320 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1322 -> 1327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1337 -> 1347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1354 -> 1359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1369 -> 1379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1386 -> 1391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1401 -> 1414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1414 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1418 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1437 -> 1442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1452 -> 1462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1471 -> 1476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1493 -> 1499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1499 -> 1507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1509 -> 1535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1535 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1546 -> 1551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1561 -> 1583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1583 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1592 -> 1597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1637 -> 1642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
