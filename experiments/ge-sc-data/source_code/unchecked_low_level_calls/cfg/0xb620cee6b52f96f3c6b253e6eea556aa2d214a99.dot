digraph  {
13 [label="2_ address public winner = 0x0;\n13-new_variable-3-3", method="", type_label=new_variable];
19 [label="3_ address public owner;\n19-new_variable-4-4", method="", type_label=new_variable];
24 [label="4_ address public firstTarget = 0x461ec7309F187dd4650EE6b4D25D93c922d7D56b;\n24-new_variable-5-5", method="", type_label=new_variable];
30 [label="5_ address public secondTarget = 0x1C3E062c77f09fC61550703bDd1D59842C22c766;\n30-new_variable-6-6", method="", type_label=new_variable];
36 [label="6_ address[] public players;\n36-new_variable-7-7", method="", type_label=new_variable];
42 [label="7_ mapping(address=>bool) approvedPlayers;\n42-new_variable-8-8", method="", type_label=new_variable];
48 [label="8_ uint256 public secret;\n48-new_variable-9-9", method="", type_label=new_variable];
53 [label="9_ uint256[] public seed = [951828771,158769871220];\n53-new_variable-10-10", method="", type_label=new_variable];
62 [label="10_ uint256[] public balance;\n62-new_variable-11-11", method="", type_label=new_variable];
68 [label="11_ function DranMe() public payable{\n	owner = msg.sender;\n}\n68-function_definition-12-14", method="DranMe()", type_label=function_definition];
73 [label="12_ owner = msg.sender;\n73-expression_statement-13-13", method="DranMe()", type_label=expression_statement];
79 [label="14_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n}\n79-expression_statement-15-18", method="", type_label=expression_statement];
82 [label="15_ require(msg.sender == owner);\n82-expression_statement-16-16", method="", type_label=expression_statement];
91 [label="16_ _;\n91-expression_statement-17-17", method="", type_label=expression_statement];
93 [label="18_ modifier onlyWinner() {\n    require(msg.sender == winner);\n    _;\n}\n93-expression_statement-19-22", method="", type_label=expression_statement];
96 [label="19_ require(msg.sender == winner);\n96-expression_statement-20-20", method="", type_label=expression_statement];
105 [label="20_ _;\n105-expression_statement-21-21", method="", type_label=expression_statement];
107 [label="22_ modifier onlyPlayers() {\n    require(approvedPlayers[msg.sender]);\n    _;\n}\n107-expression_statement-23-26", method="", type_label=expression_statement];
110 [label="23_ require(approvedPlayers[msg.sender]);\n110-expression_statement-24-24", method="", type_label=expression_statement];
119 [label="24_ _;\n119-expression_statement-25-25", method="", type_label=expression_statement];
121 [label="26_ function getLength() public constant returns(uint256) {\n	return seed.length;\n}\n121-function_definition-27-29", method="getLength()", type_label=function_definition];
124 [label="26_ constant\n124-expression_statement-27-27", method="getLength()", type_label=expression_statement];
131 [label="27_ return seed.length;\n131-return-28-28", method="getLength()", type_label=return];
135 [label="29_ function setSecret(uint256 _secret) public payable onlyOwner{\n	secret = _secret;\n}\n135-function_definition-30-32", method="setSecret(uint256 _secret)", type_label=function_definition];
143 [label="29_ onlyOwner\n143-expression_statement-30-30", method="setSecret(uint256 _secret)", type_label=expression_statement];
146 [label="30_ secret = _secret;\n146-expression_statement-31-31", method="setSecret(uint256 _secret)", type_label=expression_statement];
150 [label="32_ function getPlayerCount() public constant returns(uint256) {\n	return players.length;\n}\n150-function_definition-33-35", method="getPlayerCount()", type_label=function_definition];
153 [label="32_ constant\n153-expression_statement-33-33", method="getPlayerCount()", type_label=expression_statement];
160 [label="33_ return players.length;\n160-return-34-34", method="getPlayerCount()", type_label=return];
164 [label="35_ function getPrize() public constant returns(uint256) {\n	return address(this).balance;\n}\n164-function_definition-36-38", method="getPrize()", type_label=function_definition];
167 [label="35_ constant\n167-expression_statement-36-36", method="getPrize()", type_label=expression_statement];
174 [label="36_ return address(this).balance;\n174-return-37-37", method="getPrize()", type_label=return];
180 [label="38_ function becomePlayer() public payable{\n	require(msg.value >= 0.02 ether);\n	players.push(msg.sender);\n	approvedPlayers[msg.sender]=true;\n}\n180-function_definition-39-43", method="becomePlayer()", type_label=function_definition];
185 [label="39_ require(msg.value >= 0.02 ether);\n185-expression_statement-40-40", method="becomePlayer()", type_label=expression_statement];
195 [label="40_ players.push(msg.sender);\n195-expression_statement-41-41", method="becomePlayer()", type_label=expression_statement];
204 [label="41_ approvedPlayers[msg.sender]=true;\n204-expression_statement-42-42", method="becomePlayer()", type_label=expression_statement];
213 [label="43_ function manipulateSecret() public payable onlyPlayers{\n	require (msg.value >= 0.01 ether);\n	if(msg.sender!=owner || unlockSecret()){\n	    uint256 amount = 0;\n        msg.sender.transfer(amount);\n	}\n}\n213-function_definition-44-50", method="manipulateSecret()", type_label=function_definition];
217 [label="43_ onlyPlayers\n217-expression_statement-44-44", method="manipulateSecret()", type_label=expression_statement];
220 [label="44_ require (msg.value >= 0.01 ether);\n220-expression_statement-45-45", method="manipulateSecret()", type_label=expression_statement];
230 [label="45_ if\n230-if-46-49", method="manipulateSecret()", type_label=if];
745 [label="45_ end_if", method="manipulateSecret()", type_label=end_if];
240 [label="46_ uint256 amount = 0;\n240-new_variable-47-47", method="manipulateSecret()", type_label=new_variable];
246 [label="47_ msg.sender.transfer(amount);\n246-expression_statement-48-48", method="manipulateSecret()", type_label=expression_statement];
255 [label="50_ function unlockSecret() private returns(bool){\n    bytes32 hash = keccak256(blockhash(block.number-1));\n    uint256 secret = uint256(hash);\n        if(secret%5==0){\n            winner = msg.sender;\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n255-function_definition-51-61", method="unlockSecret()", type_label=function_definition];
263 [label="51_ bytes32 hash = keccak256(blockhash(block.number-1));\n263-new_variable-52-52", method="unlockSecret()", type_label=new_variable];
279 [label="52_ uint256 secret = uint256(hash);\n279-new_variable-53-53", method="unlockSecret()", type_label=new_variable];
287 [label="53_ if_secret%5==0\n287-if-54-60", method="unlockSecret()", type_label=if];
802 [label="53_ end_if", method="unlockSecret()", type_label=end_if];
294 [label="54_ winner = msg.sender;\n294-expression_statement-55-55", method="unlockSecret()", type_label=expression_statement];
300 [label="55_ return true;\n300-return-56-56", method="unlockSecret()", type_label=return];
304 [label="58_ return false;\n304-return-59-59", method="unlockSecret()", type_label=return];
307 [label="61_ function callFirstTarget () public payable onlyPlayers {\n	require (msg.value >= 0.005 ether);\n	firstTarget.call.value(msg.value)();\n}\n307-function_definition-62-65", method="callFirstTarget()", type_label=function_definition];
311 [label="61_ onlyPlayers\n311-expression_statement-62-62", method="callFirstTarget()", type_label=expression_statement];
314 [label="62_ require (msg.value >= 0.005 ether);\n314-expression_statement-63-63", method="callFirstTarget()", type_label=expression_statement];
324 [label="63_ firstTarget.call.value(msg.value)();\n324-expression_statement-64-64", method="callFirstTarget()", type_label=expression_statement];
336 [label="65_ function callSecondTarget () public payable onlyPlayers {\n	require (msg.value >= 0.005 ether);\n	secondTarget.call.value(msg.value)();\n}\n336-function_definition-66-69", method="callSecondTarget()", type_label=function_definition];
340 [label="65_ onlyPlayers\n340-expression_statement-66-66", method="callSecondTarget()", type_label=expression_statement];
343 [label="66_ require (msg.value >= 0.005 ether);\n343-expression_statement-67-67", method="callSecondTarget()", type_label=expression_statement];
353 [label="67_ secondTarget.call.value(msg.value)();\n353-expression_statement-68-68", method="callSecondTarget()", type_label=expression_statement];
365 [label="69_ function setSeed (uint256 _index, uint256 _value) public payable onlyPlayers {\n	seed[_index] = _value;\n}\n365-function_definition-70-72", method="setSeed(uint256 _index,uint256 _value)", type_label=function_definition];
377 [label="69_ onlyPlayers\n377-expression_statement-70-70", method="setSeed(uint256 _index,uint256 _value)", type_label=expression_statement];
380 [label="70_ seed[_index] = _value;\n380-expression_statement-71-71", method="setSeed(uint256 _index,uint256 _value)", type_label=expression_statement];
386 [label="72_ function addSeed (uint256 _add) public payable onlyPlayers {\n	seed.length = _add;\n}\n386-function_definition-73-75", method="addSeed(uint256 _add)", type_label=function_definition];
394 [label="72_ onlyPlayers\n394-expression_statement-73-73", method="addSeed(uint256 _add)", type_label=expression_statement];
397 [label="73_ seed.length = _add;\n397-expression_statement-74-74", method="addSeed(uint256 _add)", type_label=expression_statement];
403 [label="75_ function guessSeed (uint256 _seed) public payable onlyPlayers returns(uint256) {\n	return (_seed / (seed[0]*seed[1]));\n	if((_seed / (seed[0]*seed[1])) == secret) {\n		owner = winner;\n	}\n}\n403-function_definition-76-81", method="guessSeed(uint256 _seed)", type_label=function_definition];
411 [label="75_ onlyPlayers\n411-expression_statement-76-76", method="guessSeed(uint256 _seed)", type_label=expression_statement];
418 [label="76_ return (_seed / (seed[0]*seed[1]));\n418-return-77-77", method="guessSeed(uint256 _seed)", type_label=return];
430 [label="77_ if_(_seed / (seed[0]*seed[1])) == secret\n430-if-78-80", method="guessSeed(uint256 _seed)", type_label=if];
945 [label="77_ end_if", method="guessSeed(uint256 _seed)", type_label=end_if];
445 [label="78_ owner = winner;\n445-expression_statement-79-79", method="guessSeed(uint256 _seed)", type_label=expression_statement];
449 [label="81_ function checkSecret () public payable onlyPlayers returns(bool) {\n    require(msg.value >= 0.01 ether);\n    if(msg.value == secret){\n        return true;\n    }\n}\n449-function_definition-82-87", method="checkSecret()", type_label=function_definition];
453 [label="81_ onlyPlayers\n453-expression_statement-82-82", method="checkSecret()", type_label=expression_statement];
460 [label="82_ require(msg.value >= 0.01 ether);\n460-expression_statement-83-83", method="checkSecret()", type_label=expression_statement];
470 [label="83_ if_msg.value == secret\n470-if-84-86", method="checkSecret()", type_label=if];
985 [label="83_ end_if", method="checkSecret()", type_label=end_if];
477 [label="84_ return true;\n477-return-85-85", method="checkSecret()", type_label=return];
480 [label="87_ function winPrize() public payable onlyOwner {\n	owner.call.value(1 wei)();\n}\n480-function_definition-88-90", method="winPrize()", type_label=function_definition];
484 [label="87_ onlyOwner\n484-expression_statement-88-88", method="winPrize()", type_label=expression_statement];
487 [label="88_ owner.call.value(1 wei)();\n487-expression_statement-89-89", method="winPrize()", type_label=expression_statement];
498 [label="90_ function claimPrize() public payable onlyWinner {\n	winner.transfer(address(this).balance);\n}\n498-function_definition-91-93", method="claimPrize()", type_label=function_definition];
502 [label="90_ onlyWinner\n502-expression_statement-91-91", method="claimPrize()", type_label=expression_statement];
505 [label="91_ winner.transfer(address(this).balance);\n505-expression_statement-92-92", method="claimPrize()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 19  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
19 -> 24  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
24 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 42  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 93  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
82 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
93 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
110 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
131 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
135 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
164 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
180 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 240  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
230 -> 745  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
745 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
240 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 745  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
255 -> 263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 294  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
287 -> 304  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
802 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
294 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 802  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
300 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
304 -> 802  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
304 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
307 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
430 -> 445  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
430 -> 945  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
945 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 945  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
449 -> 460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 477  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
470 -> 985  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
985 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 985  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
477 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
480 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
