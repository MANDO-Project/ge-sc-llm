digraph  {
13 [label="2_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    require(c / a == b);\n    return c;\n  }\n13-function_definition-3-10", method="mul(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", method="mul(uint256 a,uint256 b)", type_label=if];
1558 [label="3_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", method="mul(uint256 a,uint256 b)", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", method="mul(uint256 a,uint256 b)", type_label=new_variable];
45 [label="7_ require(c / a == b);\n45-expression_statement-8-8", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", method="mul(uint256 a,uint256 b)", type_label=return];
56 [label="10_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0);\n    uint256 c = a / b;\n    return c;\n  }\n56-function_definition-11-15", method="div(uint256 a,uint256 b)", type_label=function_definition];
73 [label="11_ require(b > 0);\n73-expression_statement-12-12", method="div(uint256 a,uint256 b)", type_label=expression_statement];
80 [label="12_ uint256 c = a / b;\n80-new_variable-13-13", method="div(uint256 a,uint256 b)", type_label=new_variable];
88 [label="13_ return c;\n88-return-14-14", method="div(uint256 a,uint256 b)", type_label=return];
90 [label="15_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n90-function_definition-16-20", method="sub(uint256 a,uint256 b)", type_label=function_definition];
107 [label="16_ require(b <= a);\n107-expression_statement-17-17", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
114 [label="17_ uint256 c = a - b;\n114-new_variable-18-18", method="sub(uint256 a,uint256 b)", type_label=new_variable];
122 [label="18_ return c;\n122-return-19-19", method="sub(uint256 a,uint256 b)", type_label=return];
124 [label="20_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a && c >= b);\n    return c;\n  }\n124-function_definition-21-25", method="add(uint256 a,uint256 b)", type_label=function_definition];
141 [label="21_ uint256 c = a + b;\n141-new_variable-22-22", method="add(uint256 a,uint256 b)", type_label=new_variable];
149 [label="22_ require(c >= a && c >= b);\n149-expression_statement-23-23", method="add(uint256 a,uint256 b)", type_label=expression_statement];
160 [label="23_ return c;\n160-return-24-24", method="add(uint256 a,uint256 b)", type_label=return];
162 [label="25_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n162-function_definition-26-29", method="mod(uint256 a,uint256 b)", type_label=function_definition];
179 [label="26_ require(b != 0);\n179-expression_statement-27-27", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
186 [label="27_ return a % b;\n186-return-28-28", method="mod(uint256 a,uint256 b)", type_label=return];
190 [label="29_ function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n190-function_definition-30-32", method="max256(uint256 a,uint256 b)", type_label=function_definition];
207 [label="30_ return a >= b ? a : b;\n207-return-31-31", method="max256(uint256 a,uint256 b)", type_label=return];
214 [label="32_ function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n214-function_definition-33-35", method="min256(uint256 a,uint256 b)", type_label=function_definition];
231 [label="33_ return a < b ? a : b;\n231-return-34-34", method="min256(uint256 a,uint256 b)", type_label=return];
241 [label="37_ function bug_unchk_send6() payable public{\n      msg.sender.transfer(1 ether);}\n241-function_definition-38-39", method="bug_unchk_send6()", type_label=function_definition];
246 [label="38_ msg.sender.transfer(1 ether);\n246-expression_statement-39-39", method="bug_unchk_send6()", type_label=expression_statement];
256 [label="39_ address public owner;\n256-new_variable-40-40", method="", type_label=new_variable];
263 [label="41_ owner = msg.sender;\n263-expression_statement-42-42", method="", type_label=expression_statement];
269 [label="43_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n269-function_definition-44-45", method="bug_unchk_send17()", type_label=function_definition];
274 [label="44_ msg.sender.transfer(1 ether);\n274-expression_statement-45-45", method="bug_unchk_send17()", type_label=expression_statement];
284 [label="45_ modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n284-expression_statement-46-49", method="", type_label=expression_statement];
287 [label="46_ require(msg.sender == owner);\n287-expression_statement-47-47", method="", type_label=expression_statement];
296 [label="47_ _;\n296-expression_statement-48-48", method="", type_label=expression_statement];
298 [label="49_ function transferOwnership(address newOwner) onlyOwner public {\n    owner = newOwner;\n  }\n298-function_definition-50-52", method="transferOwnership(address newOwner)", type_label=function_definition];
304 [label="49_ onlyOwner\n304-expression_statement-50-50", method="transferOwnership(address newOwner)", type_label=expression_statement];
308 [label="50_ owner = newOwner;\n308-expression_statement-51-51", method="transferOwnership(address newOwner)", type_label=expression_statement];
312 [label="52_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n312-function_definition-53-54", method="bug_unchk_send3()", type_label=function_definition];
317 [label="53_ msg.sender.transfer(1 ether);\n317-expression_statement-54-54", method="bug_unchk_send3()", type_label=expression_statement];
330 [label="56_ function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n330-function_definition-57-57", method="receiveApproval(address _from,uint256 _value,address _token,bytes calldata _extraData)", type_label=function_definition];
357 [label="60_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n357-function_definition-61-62", method="bug_unchk_send16()", type_label=function_definition];
362 [label="61_ msg.sender.transfer(1 ether);\n362-expression_statement-62-62", method="bug_unchk_send16()", type_label=expression_statement];
372 [label="62_ string public name;\n372-new_variable-63-63", method="", type_label=new_variable];
377 [label="63_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n377-function_definition-64-65", method="bug_unchk_send24()", type_label=function_definition];
382 [label="64_ msg.sender.transfer(1 ether);\n382-expression_statement-65-65", method="bug_unchk_send24()", type_label=expression_statement];
392 [label="65_ string public symbol;\n392-new_variable-66-66", method="", type_label=new_variable];
397 [label="66_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n397-function_definition-67-68", method="bug_unchk_send5()", type_label=function_definition];
402 [label="67_ msg.sender.transfer(1 ether);\n402-expression_statement-68-68", method="bug_unchk_send5()", type_label=expression_statement];
412 [label="68_ uint8 public decimals;\n412-new_variable-69-69", method="", type_label=new_variable];
417 [label="69_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n417-function_definition-70-71", method="bug_unchk_send15()", type_label=function_definition];
422 [label="70_ msg.sender.transfer(1 ether);\n422-expression_statement-71-71", method="bug_unchk_send15()", type_label=expression_statement];
432 [label="71_ uint256 public totalSupply;\n432-new_variable-72-72", method="", type_label=new_variable];
437 [label="72_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n437-function_definition-73-74", method="bug_unchk_send28()", type_label=function_definition];
442 [label="73_ msg.sender.transfer(1 ether);\n442-expression_statement-74-74", method="bug_unchk_send28()", type_label=expression_statement];
452 [label="74_ mapping (address => uint256) public balanceOf;\n452-new_variable-75-75", method="", type_label=new_variable];
459 [label="75_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n459-function_definition-76-77", method="bug_unchk_send21()", type_label=function_definition];
464 [label="76_ msg.sender.transfer(1 ether);\n464-expression_statement-77-77", method="bug_unchk_send21()", type_label=expression_statement];
474 [label="77_ mapping (address => mapping (address => uint256)) public allowance;\n474-new_variable-78-78", method="", type_label=new_variable];
483 [label="78_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n483-function_definition-79-80", method="bug_unchk_send27()", type_label=function_definition];
488 [label="79_ msg.sender.transfer(1 ether);\n488-expression_statement-80-80", method="bug_unchk_send27()", type_label=expression_statement];
512 [label="81_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n512-function_definition-82-83", method="bug_unchk_send31()", type_label=function_definition];
517 [label="82_ msg.sender.transfer(1 ether);\n517-expression_statement-83-83", method="bug_unchk_send31()", type_label=expression_statement];
541 [label="84_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n541-function_definition-85-86", method="bug_unchk_send13()", type_label=function_definition];
546 [label="85_ msg.sender.transfer(1 ether);\n546-expression_statement-86-86", method="bug_unchk_send13()", type_label=expression_statement];
580 [label="88_ decimals = dec;\n580-expression_statement-89-89", method="", type_label=expression_statement];
584 [label="89_ name = tokenName;\n584-expression_statement-90-90", method="", type_label=expression_statement];
588 [label="90_ symbol = tokenSymbol;\n588-expression_statement-91-91", method="", type_label=expression_statement];
592 [label="92_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n592-function_definition-93-94", method="bug_unchk_send9()", type_label=function_definition];
597 [label="93_ msg.sender.transfer(1 ether);\n597-expression_statement-94-94", method="bug_unchk_send9()", type_label=expression_statement];
607 [label="94_ function _transfer(address _from, address _to, uint _value) internal {\n    require(_to != address(0x0));\n    balanceOf[_from] = balanceOf[_from].sub(_value);\n    balanceOf[_to] = balanceOf[_to].add(_value);\n    emit Transfer(_from, _to, _value);\n  }\n607-function_definition-95-100", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
623 [label="95_ require(_to != address(0x0));\n623-expression_statement-96-96", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
632 [label="96_ balanceOf[_from] = balanceOf[_from].sub(_value);\n632-expression_statement-97-97", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
645 [label="97_ balanceOf[_to] = balanceOf[_to].add(_value);\n645-expression_statement-98-98", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
666 [label="100_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n666-function_definition-101-102", method="bug_unchk_send25()", type_label=function_definition];
671 [label="101_ msg.sender.transfer(1 ether);\n671-expression_statement-102-102", method="bug_unchk_send25()", type_label=expression_statement];
681 [label="102_ function transfer(address _to, uint256 _value) public returns (bool success) {\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n681-function_definition-103-106", method="transfer(address _to,uint256 _value)", type_label=function_definition];
698 [label="103_ _transfer(msg.sender, _to, _value);\n698-expression_statement-104-104", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
709 [label="104_ return true;\n709-return-105-105", method="transfer(address _to,uint256 _value)", type_label=return];
712 [label="106_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n712-function_definition-107-108", method="bug_unchk_send19()", type_label=function_definition];
717 [label="107_ msg.sender.transfer(1 ether);\n717-expression_statement-108-108", method="bug_unchk_send19()", type_label=expression_statement];
727 [label="108_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n		_transfer(_from, _to, _value);\n		return true;\n  }\n727-function_definition-109-113", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
748 [label="109_ allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n748-expression_statement-110-110", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
769 [label="110_ _transfer(_from, _to, _value);\n769-expression_statement-111-111", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
778 [label="111_ return true;\n778-return-112-112", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
781 [label="113_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n781-function_definition-114-115", method="bug_unchk_send26()", type_label=function_definition];
786 [label="114_ msg.sender.transfer(1 ether);\n786-expression_statement-115-115", method="bug_unchk_send26()", type_label=expression_statement];
796 [label="115_ function approve(address _spender, uint256 _value) public returns (bool success) {\n    allowance[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n796-function_definition-116-120", method="approve(address _spender,uint256 _value)", type_label=function_definition];
813 [label="116_ allowance[msg.sender][_spender] = _value;\n813-expression_statement-117-117", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
833 [label="118_ return true;\n833-return-119-119", method="approve(address _spender,uint256 _value)", type_label=return];
836 [label="120_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n836-function_definition-121-122", method="bug_unchk_send20()", type_label=function_definition];
841 [label="121_ msg.sender.transfer(1 ether);\n841-expression_statement-122-122", method="bug_unchk_send20()", type_label=expression_statement];
851 [label="122_ function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n    tokenRecipient spender = tokenRecipient(_spender);\n    if (approve(_spender, _value)) {\n      spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n      return true;\n    }\n  }\n851-function_definition-123-129", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=function_definition];
872 [label="123_ tokenRecipient spender = tokenRecipient(_spender);\n872-new_variable-124-124", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=new_variable];
882 [label="124_ if\n882-if-125-128", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=if];
2410 [label="124_ end_if", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=end_if];
890 [label="125_ spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n890-expression_statement-126-126", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=expression_statement];
907 [label="126_ return true;\n907-return-127-127", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=return];
910 [label="129_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n910-function_definition-130-131", method="bug_unchk_send32()", type_label=function_definition];
915 [label="130_ msg.sender.transfer(1 ether);\n915-expression_statement-131-131", method="bug_unchk_send32()", type_label=expression_statement];
934 [label="133_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n934-function_definition-134-135", method="bug_unchk_send10()", type_label=function_definition];
939 [label="134_ msg.sender.transfer(1 ether);\n939-expression_statement-135-135", method="bug_unchk_send10()", type_label=expression_statement];
949 [label="135_ string _tokenName = \"AZ FundChain\";\n949-new_variable-136-136", method="", type_label=new_variable];
955 [label="135_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n955-function_definition-136-137", method="bug_unchk_send22()", type_label=function_definition];
960 [label="136_ msg.sender.transfer(1 ether);\n960-expression_statement-137-137", method="bug_unchk_send22()", type_label=expression_statement];
970 [label="137_ string _tokenSymbol = \"AZT\";\n970-new_variable-138-138", method="", type_label=new_variable];
976 [label="138_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n976-function_definition-139-140", method="bug_unchk_send12()", type_label=function_definition];
981 [label="139_ msg.sender.transfer(1 ether);\n981-expression_statement-140-140", method="bug_unchk_send12()", type_label=expression_statement];
991 [label="140_ uint8 _decimals = 18;\n991-new_variable-141-141", method="", type_label=new_variable];
996 [label="141_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n996-function_definition-142-143", method="bug_unchk_send11()", type_label=function_definition];
1001 [label="142_ msg.sender.transfer(1 ether);\n1001-expression_statement-143-143", method="bug_unchk_send11()", type_label=expression_statement];
1011 [label="143_ address[] public frozenAddresses;\n1011-new_variable-144-144", method="", type_label=new_variable];
1017 [label="144_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n1017-function_definition-145-146", method="bug_unchk_send1()", type_label=function_definition];
1022 [label="145_ msg.sender.transfer(1 ether);\n1022-expression_statement-146-146", method="bug_unchk_send1()", type_label=expression_statement];
1032 [label="146_ bool public tokenFrozen;\n1032-new_variable-147-147", method="", type_label=new_variable];
1037 [label="147_ struct frozenWallet {\n    bool isFrozen;  \n    uint256 rewardedAmount;  \n    uint256 frozenAmount;  \n    uint256 frozenTime;  \n  }\n1037-expression_statement-148-153", method="frozenWallet()", type_label=expression_statement];
1055 [label="153_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n1055-function_definition-154-155", method="bug_unchk_send2()", type_label=function_definition];
1060 [label="154_ msg.sender.transfer(1 ether);\n1060-expression_statement-155-155", method="bug_unchk_send2()", type_label=expression_statement];
1070 [label="155_ mapping (address => frozenWallet) public frozenWallets;\n1070-new_variable-156-156", method="", type_label=new_variable];
1079 [label="156_ TokenERC20(_tokenName, _tokenSymbol, _decimals)\n1079-expression_statement-157-157", method="", type_label=expression_statement];
1088 [label="157_ frozenAddresses.push(address(0x9fd50776F133751E8Ae6abE1Be124638Bb917E05));\n1088-expression_statement-158-158", method="", type_label=expression_statement];
1097 [label="158_ frozenWallets[frozenAddresses[0]] = frozenWallet({\n      isFrozen: true,\n      rewardedAmount: 30000000 * 10 ** uint256(decimals),\n      frozenAmount: 0 * 10 ** uint256(decimals),\n      frozenTime: now + 1 * 1 hours  \n    });\n1097-expression_statement-159-164", method="", type_label=expression_statement];
1137 [label="164_ for(i < frozenAddresses.length;;i++)\n1137-for-165-168", method="", type_label=for];
2665 [label="164_ end_loop", method="", type_label=end_loop];
1150 [label="164_ i++\n1150-expression_statement-165-165", method="", type_label=expression_statement];
1153 [label="165_ balanceOf[frozenAddresses[i]] = frozenWallets[frozenAddresses[i]].rewardedAmount;\n1153-expression_statement-166-166", method="", type_label=expression_statement];
1167 [label="166_ totalSupply = totalSupply.add(frozenWallets[frozenAddresses[i]].rewardedAmount);\n1167-expression_statement-167-167", method="", type_label=expression_statement];
1182 [label="169_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n1182-function_definition-170-171", method="bug_unchk_send4()", type_label=function_definition];
1187 [label="170_ msg.sender.transfer(1 ether);\n1187-expression_statement-171-171", method="bug_unchk_send4()", type_label=expression_statement];
1197 [label="171_ function _transfer(address _from, address _to, uint _value) internal {\n    require(_to != address(0x0));\n    require(checkFrozenWallet(_from, _value));\n    balanceOf[_from] = balanceOf[_from].sub(_value);      \n    balanceOf[_to] = balanceOf[_to].add(_value);     \n    emit Transfer(_from, _to, _value);\n  }\n1197-function_definition-172-178", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
1213 [label="172_ require(_to != address(0x0));\n1213-expression_statement-173-173", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1222 [label="173_ require(checkFrozenWallet(_from, _value));\n1222-expression_statement-174-174", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1232 [label="174_ balanceOf[_from] = balanceOf[_from].sub(_value);\n1232-expression_statement-175-175", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1245 [label="175_ balanceOf[_to] = balanceOf[_to].add(_value);\n1245-expression_statement-176-176", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1266 [label="178_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1266-function_definition-179-180", method="bug_unchk_send7()", type_label=function_definition];
1271 [label="179_ msg.sender.transfer(1 ether);\n1271-expression_statement-180-180", method="bug_unchk_send7()", type_label=expression_statement];
1281 [label="180_ function checkFrozenWallet(address _from, uint _value) public view returns (bool) {\n    return(\n      _from==owner || \n      (!tokenFrozen && \n      (!frozenWallets[_from].isFrozen || \n       now>=frozenWallets[_from].frozenTime || \n       balanceOf[_from].sub(_value)>=frozenWallets[_from].frozenAmount))\n    );\n  }\n1281-function_definition-181-189", method="checkFrozenWallet(address _from,uint _value)", type_label=function_definition];
1298 [label="181_ return(\n      _from==owner || \n      (!tokenFrozen && \n      (!frozenWallets[_from].isFrozen || \n       now>=frozenWallets[_from].frozenTime || \n       balanceOf[_from].sub(_value)>=frozenWallets[_from].frozenAmount))\n    );\n1298-return-182-188", method="checkFrozenWallet(address _from,uint _value)", type_label=return];
1338 [label="189_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n1338-function_definition-190-191", method="bug_unchk_send23()", type_label=function_definition];
1343 [label="190_ msg.sender.transfer(1 ether);\n1343-expression_statement-191-191", method="bug_unchk_send23()", type_label=expression_statement];
1353 [label="191_ function burn(uint256 _value) onlyOwner public returns (bool success) {\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);    \n    totalSupply = totalSupply.sub(_value);                       \n    emit Burn(msg.sender, _value);\n    return true;\n  }\n1353-function_definition-192-197", method="burn(uint256 _value)", type_label=function_definition];
1359 [label="191_ onlyOwner\n1359-expression_statement-192-192", method="burn(uint256 _value)", type_label=expression_statement];
1368 [label="192_ balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n1368-expression_statement-193-193", method="burn(uint256 _value)", type_label=expression_statement];
1385 [label="193_ totalSupply = totalSupply.sub(_value);\n1385-expression_statement-194-194", method="burn(uint256 _value)", type_label=expression_statement];
1402 [label="195_ return true;\n1402-return-196-196", method="burn(uint256 _value)", type_label=return];
1405 [label="197_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n1405-function_definition-198-199", method="bug_unchk_send14()", type_label=function_definition];
1410 [label="198_ msg.sender.transfer(1 ether);\n1410-expression_statement-199-199", method="bug_unchk_send14()", type_label=expression_statement];
1420 [label="199_ function burnFrom(address _from, uint256 _value) public returns (bool success) {\n    balanceOf[_from] = balanceOf[_from].sub(_value);                           \n    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);    \n    totalSupply = totalSupply.sub(_value);                               \n    emit Burn(_from, _value);\n    return true;\n  }\n1420-function_definition-200-206", method="burnFrom(address _from,uint256 _value)", type_label=function_definition];
1437 [label="200_ balanceOf[_from] = balanceOf[_from].sub(_value);\n1437-expression_statement-201-201", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1450 [label="201_ allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n1450-expression_statement-202-202", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1471 [label="202_ totalSupply = totalSupply.sub(_value);\n1471-expression_statement-203-203", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1486 [label="204_ return true;\n1486-return-205-205", method="burnFrom(address _from,uint256 _value)", type_label=return];
1489 [label="206_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n1489-function_definition-207-208", method="bug_unchk_send30()", type_label=function_definition];
1494 [label="207_ msg.sender.transfer(1 ether);\n1494-expression_statement-208-208", method="bug_unchk_send30()", type_label=expression_statement];
1504 [label="208_ function freezeToken(bool freeze) onlyOwner public {\n    tokenFrozen = freeze;\n  }\n1504-function_definition-209-211", method="freezeToken(bool freeze)", type_label=function_definition];
1510 [label="208_ onlyOwner\n1510-expression_statement-209-209", method="freezeToken(bool freeze)", type_label=expression_statement];
1514 [label="209_ tokenFrozen = freeze;\n1514-expression_statement-210-210", method="freezeToken(bool freeze)", type_label=expression_statement];
1518 [label="211_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n1518-function_definition-212-213", method="bug_unchk_send8()", type_label=function_definition];
1523 [label="212_ msg.sender.transfer(1 ether);\n1523-expression_statement-213-213", method="bug_unchk_send8()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 1558  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1558 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 1558  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
90 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
124 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
162 -> 179  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
190 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
214 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
241 -> 246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
312 -> 317  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 362  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 422  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
459 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
623 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
698 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
712 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
727 -> 748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
778 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
781 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
796 -> 813  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
836 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
851 -> 872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
872 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 890  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
882 -> 2410  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2410 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
890 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
907 -> 2410  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
907 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
910 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
934 -> 939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
996 -> 1001  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1032 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1088 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 1137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1137 -> 1153  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1137 -> 2665  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2665 -> 1182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1150 -> 1137  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1153 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 1150  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1182 -> 1187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 1213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1213 -> 1222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1222 -> 1232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1232 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1266 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1281 -> 1298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1298 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1338 -> 1343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1353 -> 1368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1368 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1405 -> 1410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1420 -> 1437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1437 -> 1450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1450 -> 1471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1486 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1489 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 1514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1518 -> 1523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
