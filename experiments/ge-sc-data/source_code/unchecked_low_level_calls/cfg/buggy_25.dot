digraph  {
13 [label="2_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n13-function_definition-3-4", method="bug_unchk_send12()", type_label=function_definition];
18 [label="3_ msg.sender.transfer(1 ether);\n18-expression_statement-4-4", method="bug_unchk_send12()", type_label=expression_statement];
28 [label="4_ address payable public owner;\n28-new_variable-5-5", method="", type_label=new_variable];
33 [label="5_ struct GameInfo {\n    uint256 timestamp;\n    uint32 odd_homeTeam;\n    uint32 odd_drawTeam; \n    uint32 odd_awayTeam;\n    uint32 odd_over;\n    uint32 odd_under;\n    uint32 odd_homeTeamAndDraw;\n    uint32 odd_homeAndAwayTeam;\n    uint32 odd_awayTeamAndDraw;\n    uint8  open_status;\n    bool   isDone;\n  }\n33-expression_statement-6-18", method="GameInfo()", type_label=expression_statement];
79 [label="18_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n79-function_definition-19-20", method="bug_unchk_send11()", type_label=function_definition];
84 [label="19_ msg.sender.transfer(1 ether);\n84-expression_statement-20-20", method="bug_unchk_send11()", type_label=expression_statement];
94 [label="20_ mapping(uint64 => GameInfo) public gameList;\n94-new_variable-21-21", method="", type_label=new_variable];
102 [label="21_ struct BetFixture {\n    address payable player;\n    uint256 stake;\n    uint32  odd;\n    uint16  selectedTeam;\n  }\n102-expression_statement-22-27", method="BetFixture()", type_label=expression_statement];
120 [label="27_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n120-function_definition-28-29", method="bug_unchk_send1()", type_label=function_definition];
125 [label="28_ msg.sender.transfer(1 ether);\n125-expression_statement-29-29", method="bug_unchk_send1()", type_label=expression_statement];
135 [label="29_ mapping(uint64 => BetFixture[]) public betList;\n135-new_variable-30-30", method="", type_label=new_variable];
144 [label="30_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n144-function_definition-31-32", method="bug_unchk_send23()", type_label=function_definition];
149 [label="31_ msg.sender.transfer(1 ether);\n149-expression_statement-32-32", method="bug_unchk_send23()", type_label=expression_statement];
165 [label="33_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n165-function_definition-34-35", method="bug_unchk_send14()", type_label=function_definition];
170 [label="34_ msg.sender.transfer(1 ether);\n170-expression_statement-35-35", method="bug_unchk_send14()", type_label=expression_statement];
190 [label="36_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n190-function_definition-37-38", method="bug_unchk_send30()", type_label=function_definition];
195 [label="37_ msg.sender.transfer(1 ether);\n195-expression_statement-38-38", method="bug_unchk_send30()", type_label=expression_statement];
215 [label="39_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n215-function_definition-40-41", method="bug_unchk_send8()", type_label=function_definition];
220 [label="40_ msg.sender.transfer(1 ether);\n220-expression_statement-41-41", method="bug_unchk_send8()", type_label=expression_statement];
252 [label="42_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n252-function_definition-43-44", method="bug_unchk_send27()", type_label=function_definition];
257 [label="43_ msg.sender.transfer(1 ether);\n257-expression_statement-44-44", method="bug_unchk_send27()", type_label=expression_statement];
313 [label="45_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n313-function_definition-46-47", method="bug_unchk_send31()", type_label=function_definition];
318 [label="46_ msg.sender.transfer(1 ether);\n318-expression_statement-47-47", method="bug_unchk_send31()", type_label=expression_statement];
366 [label="48_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n366-function_definition-49-50", method="bug_unchk_send13()", type_label=function_definition];
371 [label="49_ msg.sender.transfer(1 ether);\n371-expression_statement-50-50", method="bug_unchk_send13()", type_label=expression_statement];
397 [label="52_ owner   = msg.sender;\n397-expression_statement-53-53", method="", type_label=expression_statement];
403 [label="54_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n403-function_definition-55-56", method="bug_unchk_send2()", type_label=function_definition];
408 [label="55_ msg.sender.transfer(1 ether);\n408-expression_statement-56-56", method="bug_unchk_send2()", type_label=expression_statement];
418 [label="56_ function setOpenStatus(uint64 _fixtureId, uint8 _open_status) external onlyOwner {\n    gameList[_fixtureId].open_status = _open_status;\n  }\n418-function_definition-57-59", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=function_definition];
429 [label="56_ onlyOwner\n429-expression_statement-57-57", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=expression_statement];
432 [label="57_ gameList[_fixtureId].open_status = _open_status;\n432-expression_statement-58-58", method="setOpenStatus(uint64 _fixtureId,uint8 _open_status)", type_label=expression_statement];
440 [label="59_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n440-function_definition-60-61", method="bug_unchk_send17()", type_label=function_definition];
445 [label="60_ msg.sender.transfer(1 ether);\n445-expression_statement-61-61", method="bug_unchk_send17()", type_label=expression_statement];
455 [label="61_ function changeOdd (uint64 _fixtureId, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw ) external onlyOwner {\n    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n    gameList[_fixtureId].odd_over            = _odd_over;\n    gameList[_fixtureId].odd_under           = _odd_under;\n    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n    emit ChangeOdd (_fixtureId, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw);\n  }\n455-function_definition-62-72", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=function_definition];
494 [label="61_ onlyOwner\n494-expression_statement-62-62", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
497 [label="62_ gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n497-expression_statement-63-63", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
505 [label="63_ gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n505-expression_statement-64-64", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
513 [label="64_ gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n513-expression_statement-65-65", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
521 [label="65_ gameList[_fixtureId].odd_over            = _odd_over;\n521-expression_statement-66-66", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
529 [label="66_ gameList[_fixtureId].odd_under           = _odd_under;\n529-expression_statement-67-67", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
537 [label="67_ gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n537-expression_statement-68-68", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
545 [label="68_ gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n545-expression_statement-69-69", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
553 [label="69_ gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n553-expression_statement-70-70", method="changeOdd(uint64 _fixtureId,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw)", type_label=expression_statement];
581 [label="72_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n581-function_definition-73-74", method="bug_unchk_send3()", type_label=function_definition];
586 [label="73_ msg.sender.transfer(1 ether);\n586-expression_statement-74-74", method="bug_unchk_send3()", type_label=expression_statement];
596 [label="74_ function setGameInfo (uint64 _fixtureId, uint256 _timestamp, uint32 _odd_homeTeam, uint32 _odd_drawTeam, uint32 _odd_awayTeam, uint32 _odd_over, uint32 _odd_under, uint32 _odd_homeTeamAndDraw, uint32 _odd_homeAndAwayTeam , uint32 _odd_awayTeamAndDraw, uint8 _open_status ) external onlyOwner {\n    gameList[_fixtureId].timestamp           = _timestamp;\n    gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n    gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n    gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n    gameList[_fixtureId].odd_over            = _odd_over;\n    gameList[_fixtureId].odd_under           = _odd_under;\n    gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n    gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n    gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n    gameList[_fixtureId].open_status         = _open_status;\n    gameList[_fixtureId].isDone              = false;\n    emit SetGame(_fixtureId, _timestamp, _odd_homeTeam, _odd_drawTeam, _odd_awayTeam, _odd_over, _odd_under, _odd_homeTeamAndDraw, _odd_homeAndAwayTeam , _odd_awayTeamAndDraw, _open_status);\n  }\n596-function_definition-75-88", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=function_definition];
643 [label="74_ onlyOwner\n643-expression_statement-75-75", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
646 [label="75_ gameList[_fixtureId].timestamp           = _timestamp;\n646-expression_statement-76-76", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
654 [label="76_ gameList[_fixtureId].odd_homeTeam        = _odd_homeTeam;\n654-expression_statement-77-77", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
662 [label="77_ gameList[_fixtureId].odd_drawTeam        = _odd_drawTeam;\n662-expression_statement-78-78", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
670 [label="78_ gameList[_fixtureId].odd_awayTeam        = _odd_awayTeam;\n670-expression_statement-79-79", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
678 [label="79_ gameList[_fixtureId].odd_over            = _odd_over;\n678-expression_statement-80-80", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
686 [label="80_ gameList[_fixtureId].odd_under           = _odd_under;\n686-expression_statement-81-81", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
694 [label="81_ gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw;\n694-expression_statement-82-82", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
702 [label="82_ gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam;\n702-expression_statement-83-83", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
710 [label="83_ gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw;\n710-expression_statement-84-84", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
718 [label="84_ gameList[_fixtureId].open_status         = _open_status;\n718-expression_statement-85-85", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
726 [label="85_ gameList[_fixtureId].isDone              = false;\n726-expression_statement-86-86", method="setGameInfo(uint64 _fixtureId,uint256 _timestamp,uint32 _odd_homeTeam,uint32 _odd_drawTeam,uint32 _odd_awayTeam,uint32 _odd_over,uint32 _odd_under,uint32 _odd_homeTeamAndDraw,uint32 _odd_homeAndAwayTeam,uint32 _odd_awayTeamAndDraw,uint8 _open_status)", type_label=expression_statement];
759 [label="88_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n759-function_definition-89-90", method="bug_unchk_send9()", type_label=function_definition];
764 [label="89_ msg.sender.transfer(1 ether);\n764-expression_statement-90-90", method="bug_unchk_send9()", type_label=expression_statement];
774 [label="90_ function placeBet(uint64 _fixtureId, uint16 _selectedTeam, uint32 _odd) external payable  {\n    uint stake = msg.value;\n    require(stake >= .001 ether);\n    require(_odd != 0 );\n    if (_selectedTeam == 1 ) {\n      require(gameList[_fixtureId].odd_homeTeam == _odd);\n    } else if ( _selectedTeam == 2) {\n      require(gameList[_fixtureId].odd_drawTeam == _odd);\n    } else if ( _selectedTeam == 3) {\n      require(gameList[_fixtureId].odd_awayTeam == _odd);\n    } else if ( _selectedTeam == 4) {\n      require(gameList[_fixtureId].odd_over == _odd);\n    } else if ( _selectedTeam == 5) {\n      require(gameList[_fixtureId].odd_under == _odd);\n    } else if ( _selectedTeam == 6) {\n      require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);\n    } else if ( _selectedTeam == 7) {\n      require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);\n    } else if ( _selectedTeam == 8) {\n      require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);\n    } else {\n      revert();\n    }\n    require(gameList[_fixtureId].open_status == 3);\n    require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );\n    betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));\n    emit NewStake(msg.sender, _fixtureId, _selectedTeam, stake, _odd );\n  }\n774-function_definition-91-118", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=function_definition];
791 [label="91_ uint stake = msg.value;\n791-new_variable-92-92", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=new_variable];
799 [label="92_ require(stake >= .001 ether);\n799-expression_statement-93-93", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
807 [label="93_ require(_odd != 0 );\n807-expression_statement-94-94", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
814 [label="94_ if__selectedTeam == 1\n814-if-95-113", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
2270 [label="94_ end_if", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=end_if];
819 [label="95_ require(gameList[_fixtureId].odd_homeTeam == _odd);\n819-expression_statement-96-96", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
830 [label="96_ if__selectedTeam == 2\n830-if-97-113", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
835 [label="97_ require(gameList[_fixtureId].odd_drawTeam == _odd);\n835-expression_statement-98-98", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
846 [label="98_ if__selectedTeam == 3\n846-if-99-113", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
851 [label="99_ require(gameList[_fixtureId].odd_awayTeam == _odd);\n851-expression_statement-100-100", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
862 [label="100_ if__selectedTeam == 4\n862-if-101-113", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
867 [label="101_ require(gameList[_fixtureId].odd_over == _odd);\n867-expression_statement-102-102", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
878 [label="102_ if__selectedTeam == 5\n878-if-103-113", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
883 [label="103_ require(gameList[_fixtureId].odd_under == _odd);\n883-expression_statement-104-104", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
894 [label="104_ if__selectedTeam == 6\n894-if-105-113", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
899 [label="105_ require(gameList[_fixtureId].odd_homeTeamAndDraw == _odd);\n899-expression_statement-106-106", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
910 [label="106_ if__selectedTeam == 7\n910-if-107-113", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
915 [label="107_ require(gameList[_fixtureId].odd_homeAndAwayTeam == _odd);\n915-expression_statement-108-108", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
926 [label="108_ if__selectedTeam == 8\n926-if-109-113", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=if];
931 [label="109_ require(gameList[_fixtureId].odd_awayTeamAndDraw == _odd);\n931-expression_statement-110-110", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
945 [label="113_ require(gameList[_fixtureId].open_status == 3);\n945-expression_statement-114-114", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
956 [label="114_ require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) );\n956-expression_statement-115-115", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
971 [label="115_ betList[_fixtureId].push(BetFixture( msg.sender, stake,  _odd, _selectedTeam));\n971-expression_statement-116-116", method="placeBet(uint64 _fixtureId,uint16 _selectedTeam,uint32 _odd)", type_label=expression_statement];
1005 [label="118_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n1005-function_definition-119-120", method="bug_unchk_send25()", type_label=function_definition];
1010 [label="119_ msg.sender.transfer(1 ether);\n1010-expression_statement-120-120", method="bug_unchk_send25()", type_label=expression_statement];
1020 [label="120_ function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable {\n    require(gameList[_fixtureId].open_status == 3);\n    require(gameList[_fixtureId].isDone == false);\n    require(betList[_fixtureId][0].player != address(0) );\n    for (uint i= 0 ; i < betList[_fixtureId].length; i++){\n      uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;\n      uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;\n      if ( (selectedTeam == 1 && _homeDrawAway == 1) \n        || (selectedTeam == 2 && _homeDrawAway == 2) \n        || (selectedTeam == 3 && _homeDrawAway == 3) \n        || (selectedTeam == 4 && _overUnder == 1) \n        || (selectedTeam == 5 && _overUnder == 2) \n        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )\n        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )\n        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) ) \n        ){ \n        betList[_fixtureId][i].player.transfer(returnEth);\n      }\n    }\n    gameList[_fixtureId].open_status = 5;\n    gameList[_fixtureId].isDone = true;  \n    emit GivePrizeMoney( _fixtureId,  _homeDrawAway,  _overUnder);\n  }\n1020-function_definition-121-143", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=function_definition];
1035 [label="120_ onlyOwner\n1035-expression_statement-121-121", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1039 [label="121_ require(gameList[_fixtureId].open_status == 3);\n1039-expression_statement-122-122", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1050 [label="122_ require(gameList[_fixtureId].isDone == false);\n1050-expression_statement-123-123", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1062 [label="123_ require(betList[_fixtureId][0].player != address(0) );\n1062-expression_statement-124-124", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1077 [label="124_ for(i < betList[_fixtureId].length;;i++)\n1077-for-125-139", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=for];
2533 [label="124_ end_loop", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=end_loop];
1092 [label="124_ i++\n1092-expression_statement-125-125", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1095 [label="125_ uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;\n1095-new_variable-126-126", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=new_variable];
1107 [label="126_ uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;\n1107-new_variable-127-127", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=new_variable];
1130 [label="127_ if_(selectedTeam == 1 && _homeDrawAway == 1) \n        || (selectedTeam == 2 && _homeDrawAway == 2) \n        || (selectedTeam == 3 && _homeDrawAway == 3) \n        || (selectedTeam == 4 && _overUnder == 1) \n        || (selectedTeam == 5 && _overUnder == 2) \n        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )\n        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )\n        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) )\n1130-if-128-138", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=if];
2586 [label="127_ end_if", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=end_if];
1218 [label="136_ betList[_fixtureId][i].player.transfer(returnEth);\n1218-expression_statement-137-137", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1231 [label="139_ gameList[_fixtureId].open_status = 5;\n1231-expression_statement-140-140", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1239 [label="140_ gameList[_fixtureId].isDone = true;\n1239-expression_statement-141-141", method="givePrizeMoney(uint64 _fixtureId,uint8 _homeDrawAway,uint8 _overUnder)", type_label=expression_statement];
1256 [label="143_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n1256-function_definition-144-145", method="bug_unchk_send19()", type_label=function_definition];
1261 [label="144_ msg.sender.transfer(1 ether);\n1261-expression_statement-145-145", method="bug_unchk_send19()", type_label=expression_statement];
1271 [label="145_ modifier onlyOwner {\n    require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n    _;\n  }\n1271-expression_statement-146-149", method="", type_label=expression_statement];
1274 [label="146_ require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n1274-expression_statement-147-147", method="", type_label=expression_statement];
1286 [label="147_ _;\n1286-expression_statement-148-148", method="", type_label=expression_statement];
1288 [label="149_ function getBalance() external view returns(uint){\n    return address(this).balance;\n  }\n1288-function_definition-150-152", method="getBalance()", type_label=function_definition];
1297 [label="150_ return address(this).balance;\n1297-return-151-151", method="getBalance()", type_label=return];
1303 [label="152_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n1303-function_definition-153-154", method="bug_unchk_send26()", type_label=function_definition];
1308 [label="153_ msg.sender.transfer(1 ether);\n1308-expression_statement-154-154", method="bug_unchk_send26()", type_label=expression_statement];
1318 [label="154_ function deposit(uint256 _eth) external payable{\n    emit Deposit(msg.sender, _eth);\n  }\n1318-function_definition-155-157", method="deposit(uint256 _eth)", type_label=function_definition];
1335 [label="157_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n1335-function_definition-158-159", method="bug_unchk_send20()", type_label=function_definition];
1340 [label="158_ msg.sender.transfer(1 ether);\n1340-expression_statement-159-159", method="bug_unchk_send20()", type_label=expression_statement];
1350 [label="159_ function changeOwner(address payable _newOwner ) external onlyOwner {\n    owner = _newOwner;\n  }\n1350-function_definition-160-162", method="changeOwner(address payable _newOwner)", type_label=function_definition];
1357 [label="159_ onlyOwner\n1357-expression_statement-160-160", method="changeOwner(address payable _newOwner)", type_label=expression_statement];
1360 [label="160_ owner = _newOwner;\n1360-expression_statement-161-161", method="changeOwner(address payable _newOwner)", type_label=expression_statement];
1364 [label="162_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n1364-function_definition-163-164", method="bug_unchk_send32()", type_label=function_definition];
1369 [label="163_ msg.sender.transfer(1 ether);\n1369-expression_statement-164-164", method="bug_unchk_send32()", type_label=expression_statement];
1383 [label="165_ owner.transfer(msg.value);\n1383-expression_statement-166-166", method="", type_label=expression_statement];
1392 [label="167_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n1392-function_definition-168-169", method="bug_unchk_send4()", type_label=function_definition];
1397 [label="168_ msg.sender.transfer(1 ether);\n1397-expression_statement-169-169", method="bug_unchk_send4()", type_label=expression_statement];
1407 [label="169_ function withdraw(uint256 _amount) external payable onlyOwner {\n    require(_amount > 0 && _amount <= address(this).balance );\n    owner.transfer(_amount);\n    emit Withdraw(owner, _amount);\n  }\n1407-function_definition-170-174", method="withdraw(uint256 _amount)", type_label=function_definition];
1415 [label="169_ onlyOwner\n1415-expression_statement-170-170", method="withdraw(uint256 _amount)", type_label=expression_statement];
1418 [label="170_ require(_amount > 0 && _amount <= address(this).balance );\n1418-expression_statement-171-171", method="withdraw(uint256 _amount)", type_label=expression_statement];
1433 [label="171_ owner.transfer(_amount);\n1433-expression_statement-172-172", method="withdraw(uint256 _amount)", type_label=expression_statement];
1446 [label="174_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1446-function_definition-175-176", method="bug_unchk_send7()", type_label=function_definition];
1451 [label="175_ msg.sender.transfer(1 ether);\n1451-expression_statement-176-176", method="bug_unchk_send7()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
943;
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
28 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
190 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
366 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
521 -> 529  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
646 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
662 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
694 -> 702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
774 -> 791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
791 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
814 -> 819  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
814 -> 830  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2270 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 2270  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
830 -> 835  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
830 -> 846  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
835 -> 2270  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
846 -> 851  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
846 -> 862  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
851 -> 2270  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
862 -> 867  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
862 -> 878  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
867 -> 2270  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
878 -> 883  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
878 -> 894  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
883 -> 2270  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
894 -> 899  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
894 -> 910  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
899 -> 2270  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
910 -> 915  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
910 -> 926  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
915 -> 2270  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
926 -> 931  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
931 -> 2270  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
945 -> 956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
956 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 1010  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1020 -> 1039  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1039 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 1062  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1062 -> 1077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1077 -> 1095  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1077 -> 2533  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2533 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1092 -> 1077  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1095 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1130 -> 1218  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1130 -> 2586  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2586 -> 1092  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2586 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
1218 -> 2586  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1231 -> 1239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1256 -> 1261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1274 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1288 -> 1297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1303 -> 1308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1335 -> 1340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 1360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1364 -> 1369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1407 -> 1418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1418 -> 1433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1446 -> 1451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 2270  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
