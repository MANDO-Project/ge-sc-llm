digraph  {
13 [label="2_ function bug_unchk_send29() payable public{\n      msg.sender.transfer(1 ether);}\n13-function_definition-3-4", method="bug_unchk_send29()", type_label=function_definition];
18 [label="3_ msg.sender.transfer(1 ether);\n18-expression_statement-4-4", method="bug_unchk_send29()", type_label=expression_statement];
28 [label="4_ address public owner;\n28-new_variable-5-5", method="", type_label=new_variable];
33 [label="5_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n33-function_definition-6-7", method="bug_unchk_send30()", type_label=function_definition];
38 [label="6_ msg.sender.transfer(1 ether);\n38-expression_statement-7-7", method="bug_unchk_send30()", type_label=expression_statement];
60 [label="9_ owner = msg.sender;\n60-expression_statement-10-10", method="", type_label=expression_statement];
66 [label="11_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n66-function_definition-12-13", method="bug_unchk_send21()", type_label=function_definition];
71 [label="12_ msg.sender.transfer(1 ether);\n71-expression_statement-13-13", method="bug_unchk_send21()", type_label=expression_statement];
81 [label="13_ modifier onlyOwner() {\n        require(msg.sender == owner, \"only the owner can call this\");\n        _;\n    }\n81-expression_statement-14-17", method="", type_label=expression_statement];
84 [label="14_ require(msg.sender == owner, \"only the owner can call this\");\n84-expression_statement-15-15", method="", type_label=expression_statement];
96 [label="15_ _;\n96-expression_statement-16-16", method="", type_label=expression_statement];
98 [label="17_ function changeOwner(address _newOwner) external onlyOwner {\n        owner = _newOwner;\n        emit OwnerChanged(msg.sender, _newOwner);\n    }\n98-function_definition-18-21", method="changeOwner(address _newOwner)", type_label=function_definition];
105 [label="17_ onlyOwner\n105-expression_statement-18-18", method="changeOwner(address _newOwner)", type_label=expression_statement];
108 [label="18_ owner = _newOwner;\n108-expression_statement-19-19", method="changeOwner(address _newOwner)", type_label=expression_statement];
120 [label="21_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n120-function_definition-22-23", method="bug_unchk_send10()", type_label=function_definition];
125 [label="22_ msg.sender.transfer(1 ether);\n125-expression_statement-23-23", method="bug_unchk_send10()", type_label=expression_statement];
141 [label="25_ function bug_unchk_send6() payable public{\n      msg.sender.transfer(1 ether);}\n141-function_definition-26-27", method="bug_unchk_send6()", type_label=function_definition];
146 [label="26_ msg.sender.transfer(1 ether);\n146-expression_statement-27-27", method="bug_unchk_send6()", type_label=expression_statement];
156 [label="27_ bool public isActive = true;\n156-new_variable-28-28", method="", type_label=new_variable];
163 [label="28_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n163-function_definition-29-30", method="bug_unchk_send8()", type_label=function_definition];
168 [label="29_ msg.sender.transfer(1 ether);\n168-expression_statement-30-30", method="bug_unchk_send8()", type_label=expression_statement];
184 [label="31_ modifier onlyActive() {\n        require(isActive, \"contract is stopped\");\n        _;\n    }\n184-expression_statement-32-35", method="", type_label=expression_statement];
187 [label="32_ require(isActive, \"contract is stopped\");\n187-expression_statement-33-33", method="", type_label=expression_statement];
195 [label="33_ _;\n195-expression_statement-34-34", method="", type_label=expression_statement];
197 [label="35_ function setIsActive(bool _isActive) external onlyOwner {\n        if (_isActive == isActive) return;\n        isActive = _isActive;\n        emit IsActiveChanged(_isActive);\n    }\n197-function_definition-36-40", method="setIsActive(bool _isActive)", type_label=function_definition];
204 [label="35_ onlyOwner\n204-expression_statement-36-36", method="setIsActive(bool _isActive)", type_label=expression_statement];
207 [label="36_ if__isActive == isActive\n207-if-37-37", method="setIsActive(bool _isActive)", type_label=if];
1483 [label="36_ end_if", method="setIsActive(bool _isActive)", type_label=end_if];
211 [label="36_ return;\n211-return-37-37", method="setIsActive(bool _isActive)", type_label=return];
212 [label="37_ isActive = _isActive;\n212-expression_statement-38-38", method="setIsActive(bool _isActive)", type_label=expression_statement];
220 [label="40_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n220-function_definition-41-42", method="bug_unchk_send22()", type_label=function_definition];
225 [label="41_ msg.sender.transfer(1 ether);\n225-expression_statement-42-42", method="bug_unchk_send22()", type_label=expression_statement];
238 [label="44_ uint16 public ASSET_TYPE;\n238-new_variable-45-45", method="", type_label=new_variable];
243 [label="45_ function sendFundsToSwap(uint256 _amount)\n        public   returns(bool success);\n243-function_definition-46-47", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
258 [label="49_ uint16 public ASSET_TYPE;\n258-new_variable-50-50", method="", type_label=new_variable];
263 [label="50_ function release(\n        address _pool,\n        address payable _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    )\n        external;\n263-function_definition-51-58", method="release(address _pool,address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
286 [label="58_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n286-function_definition-59-60", method="bug_unchk_send12()", type_label=function_definition];
291 [label="59_ msg.sender.transfer(1 ether);\n291-expression_statement-60-60", method="bug_unchk_send12()", type_label=expression_statement];
301 [label="60_ function returnFunds(\n        address payable _pool,\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    )\n        external;\n301-function_definition-61-68", method="returnFunds(address payable _pool,address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
324 [label="68_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n324-function_definition-69-70", method="bug_unchk_send11()", type_label=function_definition];
329 [label="69_ msg.sender.transfer(1 ether);\n329-expression_statement-70-70", method="bug_unchk_send11()", type_label=expression_statement];
351 [label="72_ uint256 constant private MAX_SWAP_AMOUNT_LIMIT = 1 << 240;\n351-new_variable-73-73", method="", type_label=new_variable];
359 [label="73_ uint16 public ASSET_TYPE;\n359-new_variable-74-74", method="", type_label=new_variable];
364 [label="74_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n364-function_definition-75-76", method="bug_unchk_send16()", type_label=function_definition];
369 [label="75_ msg.sender.transfer(1 ether);\n369-expression_statement-76-76", method="bug_unchk_send16()", type_label=expression_statement];
379 [label="76_ address payable public swapsContract;\n379-new_variable-77-77", method="", type_label=new_variable];
384 [label="77_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n384-function_definition-78-79", method="bug_unchk_send24()", type_label=function_definition];
389 [label="78_ msg.sender.transfer(1 ether);\n389-expression_statement-79-79", method="bug_unchk_send24()", type_label=expression_statement];
399 [label="79_ uint256 public minSwapAmount;\n399-new_variable-80-80", method="", type_label=new_variable];
404 [label="80_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n404-function_definition-81-82", method="bug_unchk_send5()", type_label=function_definition];
409 [label="81_ msg.sender.transfer(1 ether);\n409-expression_statement-82-82", method="bug_unchk_send5()", type_label=expression_statement];
419 [label="82_ uint256 public maxSwapAmount;\n419-new_variable-83-83", method="", type_label=new_variable];
424 [label="83_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n424-function_definition-84-85", method="bug_unchk_send15()", type_label=function_definition];
429 [label="84_ msg.sender.transfer(1 ether);\n429-expression_statement-85-85", method="bug_unchk_send15()", type_label=expression_statement];
439 [label="85_ bytes32 public paymentDetailsHash;\n439-new_variable-86-86", method="", type_label=new_variable];
444 [label="86_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n444-function_definition-87-88", method="bug_unchk_send27()", type_label=function_definition];
449 [label="87_ msg.sender.transfer(1 ether);\n449-expression_statement-88-88", method="bug_unchk_send27()", type_label=expression_statement];
469 [label="89_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n469-function_definition-90-91", method="bug_unchk_send31()", type_label=function_definition];
474 [label="90_ msg.sender.transfer(1 ether);\n474-expression_statement-91-91", method="bug_unchk_send31()", type_label=expression_statement];
494 [label="92_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n494-function_definition-93-94", method="bug_unchk_send13()", type_label=function_definition];
499 [label="93_ msg.sender.transfer(1 ether);\n499-expression_statement-94-94", method="bug_unchk_send13()", type_label=expression_statement];
540 [label="103_ validateLimits(_minSwapAmount, _maxSwapAmount)\n540-expression_statement-104-104", method="", type_label=expression_statement];
546 [label="104_ validateSwapsContract(_swapsContract, _assetType)\n546-expression_statement-105-105", method="", type_label=expression_statement];
553 [label="106_ swapsContract = _swapsContract;\n553-expression_statement-107-107", method="", type_label=expression_statement];
557 [label="107_ paymentDetailsHash = _paymentDetailsHash;\n557-expression_statement-108-108", method="", type_label=expression_statement];
561 [label="108_ minSwapAmount = _minSwapAmount;\n561-expression_statement-109-109", method="", type_label=expression_statement];
565 [label="109_ maxSwapAmount = _maxSwapAmount;\n565-expression_statement-110-110", method="", type_label=expression_statement];
569 [label="110_ ASSET_TYPE = _assetType;\n569-expression_statement-111-111", method="", type_label=expression_statement];
573 [label="112_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n573-function_definition-113-114", method="bug_unchk_send1()", type_label=function_definition];
578 [label="113_ msg.sender.transfer(1 ether);\n578-expression_statement-114-114", method="bug_unchk_send1()", type_label=expression_statement];
588 [label="114_ function availableFunds() public view returns (uint256);\n588-function_definition-115-115", method="availableFunds()", type_label=function_definition];
596 [label="115_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n596-function_definition-116-117", method="bug_unchk_send2()", type_label=function_definition];
601 [label="116_ msg.sender.transfer(1 ether);\n601-expression_statement-117-117", method="bug_unchk_send2()", type_label=expression_statement];
611 [label="117_ function withdrawFunds(address payable _to, uint256 _amount)\n        public   returns (bool success);\n611-function_definition-118-119", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=function_definition];
627 [label="119_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n627-function_definition-120-121", method="bug_unchk_send17()", type_label=function_definition];
632 [label="120_ msg.sender.transfer(1 ether);\n632-expression_statement-121-121", method="bug_unchk_send17()", type_label=expression_statement];
642 [label="121_ function withdrawAllFunds(address payable _to) public onlyOwner returns (bool success) {\n        return withdrawFunds(_to, availableFunds());\n    }\n642-function_definition-122-124", method="withdrawAllFunds(address payable _to)", type_label=function_definition];
649 [label="121_ onlyOwner\n649-expression_statement-122-122", method="withdrawAllFunds(address payable _to)", type_label=expression_statement];
657 [label="122_ return withdrawFunds(_to, availableFunds());\n657-return-123-123", method="withdrawAllFunds(address payable _to)", type_label=return];
665 [label="124_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n665-function_definition-125-126", method="bug_unchk_send3()", type_label=function_definition];
670 [label="125_ msg.sender.transfer(1 ether);\n670-expression_statement-126-126", method="bug_unchk_send3()", type_label=expression_statement];
680 [label="126_ function setLimits(\n        uint256 _minAmount,\n        uint256 _maxAmount\n    ) public onlyOwner validateLimits(_minAmount, _maxAmount) {\n        minSwapAmount = _minAmount;\n        maxSwapAmount = _maxAmount;\n        emit LimitsChanged(_minAmount, _maxAmount);\n    }\n680-function_definition-127-134", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=function_definition];
691 [label="129_ onlyOwner\n691-expression_statement-130-130", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
693 [label="129_ validateLimits(_minAmount, _maxAmount)\n693-expression_statement-130-130", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
700 [label="130_ minSwapAmount = _minAmount;\n700-expression_statement-131-131", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
704 [label="131_ maxSwapAmount = _maxAmount;\n704-expression_statement-132-132", method="setLimits(uint256 _minAmount,uint256 _maxAmount)", type_label=expression_statement];
714 [label="134_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n714-function_definition-135-136", method="bug_unchk_send9()", type_label=function_definition];
719 [label="135_ msg.sender.transfer(1 ether);\n719-expression_statement-136-136", method="bug_unchk_send9()", type_label=expression_statement];
729 [label="136_ function setSwapsContract(\n        address payable _swapsContract\n    ) public onlyOwner validateSwapsContract(_swapsContract, ASSET_TYPE) {\n        address oldSwapsContract = swapsContract;\n        swapsContract = _swapsContract;\n        emit SwapsContractChanged(oldSwapsContract, _swapsContract);\n    }\n729-function_definition-137-143", method="setSwapsContract(address payable _swapsContract)", type_label=function_definition];
736 [label="138_ onlyOwner\n736-expression_statement-139-139", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
738 [label="138_ validateSwapsContract(_swapsContract, ASSET_TYPE)\n738-expression_statement-139-139", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
745 [label="139_ address oldSwapsContract = swapsContract;\n745-new_variable-140-140", method="setSwapsContract(address payable _swapsContract)", type_label=new_variable];
751 [label="140_ swapsContract = _swapsContract;\n751-expression_statement-141-141", method="setSwapsContract(address payable _swapsContract)", type_label=expression_statement];
761 [label="143_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n761-function_definition-144-145", method="bug_unchk_send25()", type_label=function_definition];
766 [label="144_ msg.sender.transfer(1 ether);\n766-expression_statement-145-145", method="bug_unchk_send25()", type_label=expression_statement];
776 [label="145_ function sendFundsToSwap(uint256 _amount)\n        public   returns(bool success);\n776-function_definition-146-147", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
788 [label="147_ function releaseSwap(\n        address payable _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external onlyOwner {\n        RampInstantEscrowsPoolInterface(swapsContract).release(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n    }\n788-function_definition-148-161", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
807 [label="152_ onlyOwner\n807-expression_statement-153-153", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
810 [label="153_ RampInstantEscrowsPoolInterface(swapsContract).release(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n810-expression_statement-154-160", method="releaseSwap(address payable _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
830 [label="161_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n830-function_definition-162-163", method="bug_unchk_send19()", type_label=function_definition];
835 [label="162_ msg.sender.transfer(1 ether);\n835-expression_statement-163-163", method="bug_unchk_send19()", type_label=expression_statement];
845 [label="163_ function returnSwap(\n        address _receiver,\n        address _oracle,\n        bytes calldata _assetData,\n        bytes32 _paymentDetailsHash\n    ) external onlyOwner {\n        RampInstantEscrowsPoolInterface(swapsContract).returnFunds(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n    }\n845-function_definition-164-177", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=function_definition];
864 [label="168_ onlyOwner\n864-expression_statement-169-169", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
867 [label="169_ RampInstantEscrowsPoolInterface(swapsContract).returnFunds(\n            address(this),\n            _receiver,\n            _oracle,\n            _assetData,\n            _paymentDetailsHash\n        );\n867-expression_statement-170-176", method="returnSwap(address _receiver,address _oracle,bytes calldata _assetData,bytes32 _paymentDetailsHash)", type_label=expression_statement];
887 [label="177_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n887-function_definition-178-179", method="bug_unchk_send26()", type_label=function_definition];
892 [label="178_ msg.sender.transfer(1 ether);\n892-expression_statement-179-179", method="bug_unchk_send26()", type_label=expression_statement];
910 [label="182_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n910-function_definition-183-184", method="bug_unchk_send20()", type_label=function_definition];
915 [label="183_ msg.sender.transfer(1 ether);\n915-expression_statement-184-184", method="bug_unchk_send20()", type_label=expression_statement];
925 [label="184_ modifier onlySwapsContract() {\n        require(msg.sender == swapsContract, \"only the swaps contract can call this\");\n        _;\n    }\n925-expression_statement-185-188", method="", type_label=expression_statement];
928 [label="185_ require(msg.sender == swapsContract, \"only the swaps contract can call this\");\n928-expression_statement-186-186", method="", type_label=expression_statement];
940 [label="186_ _;\n940-expression_statement-187-187", method="", type_label=expression_statement];
942 [label="188_ modifier isWithinLimits(uint256 _amount) {\n        require(_amount >= minSwapAmount && _amount <= maxSwapAmount, \"amount outside swap limits\");\n        _;\n    }\n942-expression_statement-189-192", method="", type_label=expression_statement];
949 [label="189_ require(_amount >= minSwapAmount && _amount <= maxSwapAmount, \"amount outside swap limits\");\n949-expression_statement-190-190", method="", type_label=expression_statement];
963 [label="190_ _;\n963-expression_statement-191-191", method="", type_label=expression_statement];
965 [label="192_ modifier validateLimits(uint256 _minAmount, uint256 _maxAmount) {\n        require(_minAmount <= _maxAmount, \"min limit over max limit\");\n        require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, \"maxAmount too high\");\n        _;\n    }\n965-expression_statement-193-197", method="", type_label=expression_statement];
976 [label="193_ require(_minAmount <= _maxAmount, \"min limit over max limit\");\n976-expression_statement-194-194", method="", type_label=expression_statement];
986 [label="194_ require(_maxAmount <= MAX_SWAP_AMOUNT_LIMIT, \"maxAmount too high\");\n986-expression_statement-195-195", method="", type_label=expression_statement];
996 [label="195_ _;\n996-expression_statement-196-196", method="", type_label=expression_statement];
998 [label="197_ modifier validateSwapsContract(address payable _swapsContract, uint16 _assetType) {\n        require(_swapsContract != address(0), \"null swaps contract address\");\n        require(\n            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,\n            \"pool asset type doesn't match swap contract\"\n        );\n        _;\n    }\n998-expression_statement-198-205", method="", type_label=expression_statement];
1009 [label="198_ require(_swapsContract != address(0), \"null swaps contract address\");\n1009-expression_statement-199-199", method="", type_label=expression_statement];
1021 [label="199_ require(\n            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,\n            \"pool asset type doesn't match swap contract\"\n        );\n1021-expression_statement-200-203", method="", type_label=expression_statement];
1037 [label="203_ _;\n1037-expression_statement-204-204", method="", type_label=expression_statement];
1045 [label="207_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n1045-function_definition-208-209", method="bug_unchk_send28()", type_label=function_definition];
1050 [label="208_ msg.sender.transfer(1 ether);\n1050-expression_statement-209-209", method="bug_unchk_send28()", type_label=expression_statement];
1060 [label="209_ uint16 internal constant ETH_TYPE_ID = 1;\n1060-new_variable-210-210", method="", type_label=new_variable];
1083 [label="217_ RampInstantPool(\n            _swapsContract, _minSwapAmount, _maxSwapAmount, _paymentDetailsHash, ETH_TYPE_ID\n        )\n1083-expression_statement-218-220", method="", type_label=expression_statement];
1096 [label="221_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n1096-function_definition-222-223", method="bug_unchk_send32()", type_label=function_definition];
1101 [label="222_ msg.sender.transfer(1 ether);\n1101-expression_statement-223-223", method="bug_unchk_send32()", type_label=expression_statement];
1111 [label="223_ function availableFunds() public view returns(uint256) {\n        return address(this).balance;\n    }\n1111-function_definition-224-226", method="availableFunds()", type_label=function_definition];
1120 [label="224_ return address(this).balance;\n1120-return-225-225", method="availableFunds()", type_label=return];
1126 [label="226_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n1126-function_definition-227-228", method="bug_unchk_send4()", type_label=function_definition];
1131 [label="227_ msg.sender.transfer(1 ether);\n1131-expression_statement-228-228", method="bug_unchk_send4()", type_label=expression_statement];
1141 [label="228_ function withdrawFunds(\n        address payable _to,\n        uint256 _amount\n    ) public onlyOwner returns (bool success) {\n        _to.transfer(_amount);   \n        return true;\n    }\n1141-function_definition-229-235", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=function_definition];
1152 [label="231_ onlyOwner\n1152-expression_statement-232-232", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=expression_statement];
1160 [label="232_ _to.transfer(_amount);\n1160-expression_statement-233-233", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=expression_statement];
1167 [label="233_ return true;\n1167-return-234-234", method="withdrawFunds(address payable _to,uint256 _amount)", type_label=return];
1170 [label="235_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1170-function_definition-236-237", method="bug_unchk_send7()", type_label=function_definition];
1175 [label="236_ msg.sender.transfer(1 ether);\n1175-expression_statement-237-237", method="bug_unchk_send7()", type_label=expression_statement];
1185 [label="237_ function sendFundsToSwap(\n        uint256 _amount\n    ) public onlyActive onlySwapsContract isWithinLimits(_amount) returns(bool success) {\n        swapsContract.transfer(_amount);   \n        return true;\n    }\n1185-function_definition-238-243", method="sendFundsToSwap(uint256 _amount)", type_label=function_definition];
1192 [label="239_ onlyActive\n1192-expression_statement-240-240", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1194 [label="239_ onlySwapsContract\n1194-expression_statement-240-240", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1196 [label="239_ isWithinLimits(_amount)\n1196-expression_statement-240-240", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1206 [label="240_ swapsContract.transfer(_amount);\n1206-expression_statement-241-241", method="sendFundsToSwap(uint256 _amount)", type_label=expression_statement];
1213 [label="241_ return true;\n1213-return-242-242", method="sendFundsToSwap(uint256 _amount)", type_label=return];
1216 [label="243_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n1216-function_definition-244-245", method="bug_unchk_send23()", type_label=function_definition];
1221 [label="244_ msg.sender.transfer(1 ether);\n1221-expression_statement-245-245", method="bug_unchk_send23()", type_label=expression_statement];
1235 [label="246_ require(msg.data.length == 0, \"invalid pool function called\");\n1235-expression_statement-247-247", method="", type_label=expression_statement];
1249 [label="247_ if_msg.sender != swapsContract\n1249-if-248-250", method="", type_label=if];
2525 [label="247_ end_if", method="", type_label=end_if];
1266 [label="251_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n1266-function_definition-252-253", method="bug_unchk_send14()", type_label=function_definition];
1271 [label="252_ msg.sender.transfer(1 ether);\n1271-expression_statement-253-253", method="bug_unchk_send14()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
66 -> 71  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
84 -> 96  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 211  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
207 -> 1483  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1483 -> 212  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 1483  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
211 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
220 -> 225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
324 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
351 -> 359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
553 -> 557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
627 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
665 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
691 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
700 -> 704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
714 -> 719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
761 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 810  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
887 -> 892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 915  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
925 -> 942  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
928 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
942 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
965 -> 998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
986 -> 996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 1021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1045 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1111 -> 1120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1120 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1126 -> 1131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1141 -> 1160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1170 -> 1175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1185 -> 1206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 1194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1194 -> 1196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1206 -> 1213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1213 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1216 -> 1221  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 1249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1249 -> 2525  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1266 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
