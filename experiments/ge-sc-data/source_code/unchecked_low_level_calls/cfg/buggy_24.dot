digraph  {
13 [label="2_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n13-function_definition-3-7", method="add(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ uint256 c = a + b;\n30-new_variable-4-4", method="add(uint256 a,uint256 b)", type_label=new_variable];
38 [label="4_ require(c >= a, \"SafeMath: addition overflow\");\n38-expression_statement-5-5", method="add(uint256 a,uint256 b)", type_label=expression_statement];
48 [label="5_ return c;\n48-return-6-6", method="add(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n50-function_definition-8-10", method="sub(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ return sub(a, b, \"SafeMath: subtraction overflow\");\n67-return-9-9", method="sub(uint256 a,uint256 b)", type_label=return];
77 [label="10_ function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n77-function_definition-11-15", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
98 [label="11_ require(b <= a, errorMessage);\n98-expression_statement-12-12", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
107 [label="12_ uint256 c = a - b;\n107-new_variable-13-13", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=new_variable];
115 [label="13_ return c;\n115-return-14-14", method="sub(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
117 [label="15_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n117-function_definition-16-23", method="mul(uint256 a,uint256 b)", type_label=function_definition];
134 [label="16_ if_a == 0\n134-if-17-19", method="mul(uint256 a,uint256 b)", type_label=if];
4332 [label="16_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
139 [label="17_ return 0;\n139-return-18-18", method="mul(uint256 a,uint256 b)", type_label=return];
141 [label="19_ uint256 c = a * b;\n141-new_variable-20-20", method="mul(uint256 a,uint256 b)", type_label=new_variable];
149 [label="20_ require(c / a == b, \"SafeMath: multiplication overflow\");\n149-expression_statement-21-21", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
161 [label="21_ return c;\n161-return-22-22", method="mul(uint256 a,uint256 b)", type_label=return];
163 [label="23_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n163-function_definition-24-26", method="div(uint256 a,uint256 b)", type_label=function_definition];
180 [label="24_ return div(a, b, \"SafeMath: division by zero\");\n180-return-25-25", method="div(uint256 a,uint256 b)", type_label=return];
190 [label="26_ function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n190-function_definition-27-31", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
211 [label="27_ require(b > 0, errorMessage);\n211-expression_statement-28-28", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
220 [label="28_ uint256 c = a / b;\n220-new_variable-29-29", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=new_variable];
228 [label="29_ return c;\n228-return-30-30", method="div(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
230 [label="31_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n230-function_definition-32-34", method="mod(uint256 a,uint256 b)", type_label=function_definition];
247 [label="32_ return mod(a, b, \"SafeMath: modulo by zero\");\n247-return-33-33", method="mod(uint256 a,uint256 b)", type_label=return];
257 [label="34_ function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n257-function_definition-35-38", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=function_definition];
278 [label="35_ require(b != 0, errorMessage);\n278-expression_statement-36-36", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=expression_statement];
287 [label="36_ return a % b;\n287-return-37-37", method="mod(uint256 a,uint256 b,string memory errorMessage)", type_label=return];
303 [label="42_ struct User {\n        uint256 totalInvestCount;\n        uint256 totalInvestAmount;\n        uint256 totalStaticCommissionWithdrawAmount;\n        uint256 totalDynamicCommissionWithdrawAmount;\n        uint256 totalWithdrawAmount;\n        uint256 downlineCount;\n        uint256 nodeCount;\n        uint256 totalDownlineInvestAmount;\n        uint256 currentInvestTime;\n        uint256 currentInvestAmount;\n        uint256 currentInvestCycle;\n        uint256 currentlevel;\n        uint256 currentStaticCommissionRatio;\n        uint256 currentStaticCommissionWithdrawAmount;\n        uint256 staticCommissionBalance;\n        uint256 dynamicCommissionBalance;\n        uint256 calcDynamicCommissionAmount;\n        address sponsorAddress;\n    }\n303-expression_statement-43-62", method="User()", type_label=expression_statement];
377 [label="62_ struct InvestRecord {\n        uint256 time;\n        uint256 amount;\n        uint256 cycle;\n    }\n377-expression_statement-63-67", method="InvestRecord()", type_label=expression_statement];
391 [label="67_ struct CommissionRecord {\n        uint256 time;\n        uint256 amount;\n    }\n391-expression_statement-68-71", method="CommissionRecord()", type_label=expression_statement];
401 [label="71_ uint256 private constant ONE_ETH = 1 ether;\n401-new_variable-72-72", method="", type_label=new_variable];
408 [label="72_ uint256 private constant ONE_DAY = 1 days;\n408-new_variable-73-73", method="", type_label=new_variable];
415 [label="73_ address private constant GENESIS_USER_ADDRESS = 0xe00d13D53Ba180EAD5F4838BD56b15629026A8C9;\n415-new_variable-74-74", method="", type_label=new_variable];
421 [label="74_ address private constant ENGINEER_ADDRESS = 0xddf0bB01f81059CCdB3D5bF5b1C7Bd540aDDFEac;\n421-new_variable-75-75", method="", type_label=new_variable];
427 [label="75_ bool private initialized = false;\n427-new_variable-76-76", method="", type_label=new_variable];
434 [label="76_ address public owner;\n434-new_variable-77-77", method="", type_label=new_variable];
439 [label="77_ uint256 public totalInvestCount;\n439-new_variable-78-78", method="", type_label=new_variable];
444 [label="78_ uint256 public totalInvestAmount;\n444-new_variable-79-79", method="", type_label=new_variable];
449 [label="79_ uint256 public totalStaticCommissionWithdrawAmount;\n449-new_variable-80-80", method="", type_label=new_variable];
454 [label="80_ uint256 public totalDynamicCommissionWithdrawAmount;\n454-new_variable-81-81", method="", type_label=new_variable];
459 [label="81_ uint256 public totalWithdrawAmount;\n459-new_variable-82-82", method="", type_label=new_variable];
464 [label="82_ uint256 public totalUserCount;\n464-new_variable-83-83", method="", type_label=new_variable];
469 [label="83_ uint256 public engineerFunds;\n469-new_variable-84-84", method="", type_label=new_variable];
474 [label="84_ uint256 public engineerWithdrawAmount;\n474-new_variable-85-85", method="", type_label=new_variable];
479 [label="85_ uint256 public operatorFunds;\n479-new_variable-86-86", method="", type_label=new_variable];
484 [label="86_ uint256 public operatorWithdrawAmount;\n484-new_variable-87-87", method="", type_label=new_variable];
489 [label="87_ function bug_unchk_send18() payable public{\n      msg.sender.transfer(1 ether);}\n489-function_definition-88-89", method="bug_unchk_send18()", type_label=function_definition];
494 [label="88_ msg.sender.transfer(1 ether);\n494-expression_statement-89-89", method="bug_unchk_send18()", type_label=expression_statement];
504 [label="89_ mapping (address => User) private userMapping;\n504-new_variable-90-90", method="", type_label=new_variable];
512 [label="90_ function bug_unchk_send29() payable public{\n      msg.sender.transfer(1 ether);}\n512-function_definition-91-92", method="bug_unchk_send29()", type_label=function_definition];
517 [label="91_ msg.sender.transfer(1 ether);\n517-expression_statement-92-92", method="bug_unchk_send29()", type_label=expression_statement];
527 [label="92_ mapping (uint256 => address) private addressMapping;\n527-new_variable-93-93", method="", type_label=new_variable];
534 [label="93_ function bug_unchk_send6() payable public{\n      msg.sender.transfer(1 ether);}\n534-function_definition-94-95", method="bug_unchk_send6()", type_label=function_definition];
539 [label="94_ msg.sender.transfer(1 ether);\n539-expression_statement-95-95", method="bug_unchk_send6()", type_label=expression_statement];
549 [label="95_ mapping (address => InvestRecord[9]) private investRecordMapping;\n549-new_variable-96-96", method="", type_label=new_variable];
559 [label="96_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n559-function_definition-97-98", method="bug_unchk_send16()", type_label=function_definition];
564 [label="97_ msg.sender.transfer(1 ether);\n564-expression_statement-98-98", method="bug_unchk_send16()", type_label=expression_statement];
574 [label="98_ mapping (address => CommissionRecord[9]) private staticCommissionRecordMapping;\n574-new_variable-99-99", method="", type_label=new_variable];
584 [label="99_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n584-function_definition-100-101", method="bug_unchk_send24()", type_label=function_definition];
589 [label="100_ msg.sender.transfer(1 ether);\n589-expression_statement-101-101", method="bug_unchk_send24()", type_label=expression_statement];
599 [label="101_ mapping (address => CommissionRecord[9]) private dynamicCommissionRecordMapping;\n599-new_variable-102-102", method="", type_label=new_variable];
609 [label="102_ function initialize() public {\n        require(!initialized, \"already initialized\");\n        owner = msg.sender;\n        userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n        initialized = true;\n    }\n609-function_definition-103-108", method="initialize()", type_label=function_definition];
613 [label="103_ require(!initialized, \"already initialized\");\n613-expression_statement-104-104", method="initialize()", type_label=expression_statement];
622 [label="104_ owner = msg.sender;\n622-expression_statement-105-105", method="initialize()", type_label=expression_statement];
628 [label="105_ userMapping[GENESIS_USER_ADDRESS] = User(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0));\n628-expression_statement-106-106", method="initialize()", type_label=expression_statement];
673 [label="106_ initialized = true;\n673-expression_statement-107-107", method="initialize()", type_label=expression_statement];
678 [label="108_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n678-function_definition-109-110", method="bug_unchk_send5()", type_label=function_definition];
683 [label="109_ msg.sender.transfer(1 ether);\n683-expression_statement-110-110", method="bug_unchk_send5()", type_label=expression_statement];
695 [label="111_ initialize();\n695-expression_statement-112-112", method="", type_label=expression_statement];
698 [label="113_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n698-function_definition-114-115", method="bug_unchk_send15()", type_label=function_definition];
703 [label="114_ msg.sender.transfer(1 ether);\n703-expression_statement-115-115", method="bug_unchk_send15()", type_label=expression_statement];
713 [label="115_ modifier onlyOwner() {\n        require(msg.sender == owner, \"onlyOwner\");\n        _;\n    }\n713-expression_statement-116-119", method="", type_label=expression_statement];
716 [label="116_ require(msg.sender == owner, \"onlyOwner\");\n716-expression_statement-117-117", method="", type_label=expression_statement];
728 [label="117_ _;\n728-expression_statement-118-118", method="", type_label=expression_statement];
730 [label="119_ modifier onlyEngineer() {\n        require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n        _;\n    }\n730-expression_statement-120-123", method="", type_label=expression_statement];
733 [label="120_ require(msg.sender == ENGINEER_ADDRESS, \"onlyEngineer\");\n733-expression_statement-121-121", method="", type_label=expression_statement];
745 [label="121_ _;\n745-expression_statement-122-122", method="", type_label=expression_statement];
747 [label="123_ function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n        owner = newOwner;\n    }\n747-function_definition-124-127", method="transferOwnership(address newOwner)", type_label=function_definition];
754 [label="123_ onlyOwner\n754-expression_statement-124-124", method="transferOwnership(address newOwner)", type_label=expression_statement];
757 [label="124_ require(newOwner != address(0), \"cannot transfer ownership to address zero\");\n757-expression_statement-125-125", method="transferOwnership(address newOwner)", type_label=expression_statement];
769 [label="125_ owner = newOwner;\n769-expression_statement-126-126", method="transferOwnership(address newOwner)", type_label=expression_statement];
773 [label="127_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n773-function_definition-128-129", method="bug_unchk_send28()", type_label=function_definition];
778 [label="128_ msg.sender.transfer(1 ether);\n778-expression_statement-129-129", method="bug_unchk_send28()", type_label=expression_statement];
788 [label="129_ function getLevelByInvestAmount(uint256 investAmount) private pure returns (uint256 level) {\n        if (investAmount >= ONE_ETH.mul(11)) {\n            level = 3;\n        } else if (investAmount >= ONE_ETH.mul(6)) {\n            level = 2;\n        } else {\n            level = 1;\n        }\n    }\n788-function_definition-130-138", method="getLevelByInvestAmount(uint256 investAmount)", type_label=function_definition];
802 [label="130_ if\n802-if-131-137", method="getLevelByInvestAmount(uint256 investAmount)", type_label=if];
5000 [label="130_ end_if", method="getLevelByInvestAmount(uint256 investAmount)", type_label=end_if];
812 [label="131_ level = 3;\n812-expression_statement-132-132", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
816 [label="132_ if\n816-if-133-137", method="getLevelByInvestAmount(uint256 investAmount)", type_label=if];
826 [label="133_ level = 2;\n826-expression_statement-134-134", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
831 [label="135_ level = 1;\n831-expression_statement-136-136", method="getLevelByInvestAmount(uint256 investAmount)", type_label=expression_statement];
835 [label="138_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n835-function_definition-139-140", method="bug_unchk_send21()", type_label=function_definition];
840 [label="139_ msg.sender.transfer(1 ether);\n840-expression_statement-140-140", method="bug_unchk_send21()", type_label=expression_statement];
850 [label="140_ function isInvestExpired(User memory user) private view returns (bool expired) {\n        expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n    }\n850-function_definition-141-143", method="isInvestExpired(User memory user)", type_label=function_definition];
865 [label="141_ expired = (user.currentInvestTime.add(user.currentInvestCycle.mul(ONE_DAY)) < now);\n865-expression_statement-142-142", method="isInvestExpired(User memory user)", type_label=expression_statement];
886 [label="143_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n886-function_definition-144-145", method="bug_unchk_send10()", type_label=function_definition];
891 [label="144_ msg.sender.transfer(1 ether);\n891-expression_statement-145-145", method="bug_unchk_send10()", type_label=expression_statement];
901 [label="145_ function getAbortInvestAmount(User memory user) private view returns (uint256 amount) {\n        uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n        require(commissionDays >= 3, \"Invest time must >= 3days\");\n        uint256 lossRatio = 15;\n        if (commissionDays >= 60) {\n            lossRatio = 5;\n        } else if (commissionDays >= 30) {\n            lossRatio = 10;\n        }\n        amount = user.currentInvestAmount;\n        amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n    }\n901-function_definition-146-157", method="getAbortInvestAmount(User memory user)", type_label=function_definition];
916 [label="146_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n916-new_variable-147-147", method="getAbortInvestAmount(User memory user)", type_label=new_variable];
934 [label="147_ require(commissionDays >= 3, \"Invest time must >= 3days\");\n934-expression_statement-148-148", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
944 [label="148_ uint256 lossRatio = 15;\n944-new_variable-149-149", method="getAbortInvestAmount(User memory user)", type_label=new_variable];
950 [label="149_ if_commissionDays >= 60\n950-if-150-154", method="getAbortInvestAmount(User memory user)", type_label=if];
5148 [label="149_ end_if", method="getAbortInvestAmount(User memory user)", type_label=end_if];
955 [label="150_ lossRatio = 5;\n955-expression_statement-151-151", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
959 [label="151_ if_commissionDays >= 30\n959-if-152-154", method="getAbortInvestAmount(User memory user)", type_label=if];
964 [label="152_ lossRatio = 10;\n964-expression_statement-153-153", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
968 [label="154_ amount = user.currentInvestAmount;\n968-expression_statement-155-155", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
974 [label="155_ amount = amount.sub(user.currentInvestAmount.mul(lossRatio).div(100));\n974-expression_statement-156-156", method="getAbortInvestAmount(User memory user)", type_label=expression_statement];
995 [label="157_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n995-function_definition-158-159", method="bug_unchk_send22()", type_label=function_definition];
1000 [label="158_ msg.sender.transfer(1 ether);\n1000-expression_statement-159-159", method="bug_unchk_send22()", type_label=expression_statement];
1010 [label="159_ function getStaticCommissionRatio(uint256 level, uint256 investCycle) private pure returns (uint256 ratio) {\n        if (level == 1) {\n            if (investCycle == 30) {\n                ratio = 7;\n            } else if(investCycle == 60) {\n                ratio = 8;\n            } else {\n                ratio = 9;\n            }\n        } else if (level == 2) {\n            if (investCycle == 30) {\n                ratio = 8;\n            } else if(investCycle == 60) {\n                ratio = 9;\n            } else {\n                ratio = 10;\n            }\n        } else {\n            if (investCycle == 30) {\n                ratio = 11;\n            } else if(investCycle == 60) {\n                ratio = 12;\n            } else {\n                ratio = 13;\n            }\n        }\n    }\n1010-function_definition-160-186", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=function_definition];
1028 [label="160_ if_level == 1\n1028-if-161-185", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
5226 [label="160_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1033 [label="161_ if_investCycle == 30\n1033-if-162-168", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
5231 [label="161_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1038 [label="162_ ratio = 7;\n1038-expression_statement-163-163", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1042 [label="163_ if_investCycle == 60\n1042-if-164-168", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1047 [label="164_ ratio = 8;\n1047-expression_statement-165-165", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1052 [label="166_ ratio = 9;\n1052-expression_statement-167-167", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1056 [label="168_ if_level == 2\n1056-if-169-185", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1061 [label="169_ if_investCycle == 30\n1061-if-170-176", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
5259 [label="169_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1066 [label="170_ ratio = 8;\n1066-expression_statement-171-171", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1070 [label="171_ if_investCycle == 60\n1070-if-172-176", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1075 [label="172_ ratio = 9;\n1075-expression_statement-173-173", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1080 [label="174_ ratio = 10;\n1080-expression_statement-175-175", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1085 [label="177_ if_investCycle == 30\n1085-if-178-184", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
5283 [label="177_ end_if", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=end_if];
1090 [label="178_ ratio = 11;\n1090-expression_statement-179-179", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1094 [label="179_ if_investCycle == 60\n1094-if-180-184", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=if];
1099 [label="180_ ratio = 12;\n1099-expression_statement-181-181", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1104 [label="182_ ratio = 13;\n1104-expression_statement-183-183", method="getStaticCommissionRatio(uint256 level,uint256 investCycle)", type_label=expression_statement];
1108 [label="186_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n1108-function_definition-187-188", method="bug_unchk_send12()", type_label=function_definition];
1113 [label="187_ msg.sender.transfer(1 ether);\n1113-expression_statement-188-188", method="bug_unchk_send12()", type_label=expression_statement];
1123 [label="188_ function getDynamicCommissionRatio(User memory user, uint256 depth) private pure returns (uint256 ratio) {\n        if (user.currentlevel == 1) {\n            if (depth == 1) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else if (user.currentlevel == 2) {\n            if (depth == 1) {\n                ratio = 70;\n            } else if (depth == 2) {\n                ratio = 50;\n            } else {\n                ratio = 0;\n            }\n        } else {\n            if (depth == 1) {\n                ratio = 100;\n            } else if (depth == 2) {\n                ratio = 70;\n            } else if (depth == 3) {\n                ratio = 50;\n            } else if (depth >= 4 && depth <= 10) {\n                ratio = 10;\n            } else if (depth >= 11 && depth <= 20) {\n                ratio = 5;\n            } else {\n                ratio = 1;\n            }\n        }\n    }\n1123-function_definition-189-219", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=function_definition];
1142 [label="189_ if_user.currentlevel == 1\n1142-if-190-218", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
5340 [label="189_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1149 [label="190_ if_depth == 1\n1149-if-191-195", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
5347 [label="190_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1154 [label="191_ ratio = 50;\n1154-expression_statement-192-192", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1159 [label="193_ ratio = 0;\n1159-expression_statement-194-194", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1163 [label="195_ if_user.currentlevel == 2\n1163-if-196-218", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1170 [label="196_ if_depth == 1\n1170-if-197-203", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
5368 [label="196_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1175 [label="197_ ratio = 70;\n1175-expression_statement-198-198", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1179 [label="198_ if_depth == 2\n1179-if-199-203", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1184 [label="199_ ratio = 50;\n1184-expression_statement-200-200", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1189 [label="201_ ratio = 0;\n1189-expression_statement-202-202", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1194 [label="204_ if_depth == 1\n1194-if-205-217", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
5392 [label="204_ end_if", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=end_if];
1199 [label="205_ ratio = 100;\n1199-expression_statement-206-206", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1203 [label="206_ if_depth == 2\n1203-if-207-217", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1208 [label="207_ ratio = 70;\n1208-expression_statement-208-208", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1212 [label="208_ if_depth == 3\n1212-if-209-217", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1217 [label="209_ ratio = 50;\n1217-expression_statement-210-210", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1221 [label="210_ if_depth >= 4 && depth <= 10\n1221-if-211-217", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1230 [label="211_ ratio = 10;\n1230-expression_statement-212-212", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1234 [label="212_ if_depth >= 11 && depth <= 20\n1234-if-213-217", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=if];
1243 [label="213_ ratio = 5;\n1243-expression_statement-214-214", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1248 [label="215_ ratio = 1;\n1248-expression_statement-216-216", method="getDynamicCommissionRatio(User memory user,uint256 depth)", type_label=expression_statement];
1252 [label="219_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n1252-function_definition-220-221", method="bug_unchk_send11()", type_label=function_definition];
1257 [label="220_ msg.sender.transfer(1 ether);\n1257-expression_statement-221-221", method="bug_unchk_send11()", type_label=expression_statement];
1267 [label="221_ function getAvaliableStaticCommissionAmount(User memory user) private view returns (uint256 amount) {\n        if (user.currentInvestAmount == 0) {\n            amount = 0;\n        } else {\n            uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n            if (commissionDays > user.currentInvestCycle) {\n                commissionDays = user.currentInvestCycle;\n            }\n            amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n            amount = amount.div(1000);\n            amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n        }\n    }\n1267-function_definition-222-234", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=function_definition];
1282 [label="222_ if_user.currentInvestAmount == 0\n1282-if-223-233", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=if];
5480 [label="222_ end_if", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=end_if];
1289 [label="223_ amount = 0;\n1289-expression_statement-224-224", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1294 [label="225_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n1294-new_variable-226-226", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=new_variable];
1312 [label="226_ if_commissionDays > user.currentInvestCycle\n1312-if-227-229", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=if];
5510 [label="226_ end_if", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=end_if];
1319 [label="227_ commissionDays = user.currentInvestCycle;\n1319-expression_statement-228-228", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1325 [label="229_ amount = user.currentInvestAmount.mul(user.currentStaticCommissionRatio).mul(commissionDays);\n1325-expression_statement-230-230", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1343 [label="230_ amount = amount.div(1000);\n1343-expression_statement-231-231", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1352 [label="231_ amount = amount.sub(user.currentStaticCommissionWithdrawAmount);\n1352-expression_statement-232-232", method="getAvaliableStaticCommissionAmount(User memory user)", type_label=expression_statement];
1363 [label="234_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n1363-function_definition-235-236", method="bug_unchk_send1()", type_label=function_definition];
1368 [label="235_ msg.sender.transfer(1 ether);\n1368-expression_statement-236-236", method="bug_unchk_send1()", type_label=expression_statement];
1378 [label="236_ function addInvestRecord(address userAddress, uint256 time, uint256 amount, uint256 cycle) private {\n        InvestRecord[9] storage records = investRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            InvestRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = InvestRecord(time, amount, cycle);\n    }\n1378-function_definition-237-244", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=function_definition];
1398 [label="237_ InvestRecord[9] storage records = investRecordMapping[userAddress];\n1398-new_variable-238-238", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=new_variable];
1409 [label="238_ for(i > 0;;--i)\n1409-for-239-242", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=for];
5607 [label="238_ end_loop", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=end_loop];
1420 [label="238_ --i\n1420-expression_statement-239-239", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
1423 [label="239_ InvestRecord memory prevRecord = records[i - 1];\n1423-new_variable-240-240", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=new_variable];
1434 [label="240_ records[i] = prevRecord;\n1434-expression_statement-241-241", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
1440 [label="242_ records[0] = InvestRecord(time, amount, cycle);\n1440-expression_statement-243-243", method="addInvestRecord(address userAddress,uint256 time,uint256 amount,uint256 cycle)", type_label=expression_statement];
1453 [label="244_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n1453-function_definition-245-246", method="bug_unchk_send2()", type_label=function_definition];
1458 [label="245_ msg.sender.transfer(1 ether);\n1458-expression_statement-246-246", method="bug_unchk_send2()", type_label=expression_statement];
1468 [label="246_ function addStaticCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }\n1468-function_definition-247-254", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=function_definition];
1484 [label="247_ CommissionRecord[9] storage records = staticCommissionRecordMapping[userAddress];\n1484-new_variable-248-248", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
1495 [label="248_ for(i > 0;;--i)\n1495-for-249-252", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=for];
5693 [label="248_ end_loop", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=end_loop];
1506 [label="248_ --i\n1506-expression_statement-249-249", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
1509 [label="249_ CommissionRecord memory prevRecord = records[i - 1];\n1509-new_variable-250-250", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
1520 [label="250_ records[i] = prevRecord;\n1520-expression_statement-251-251", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
1526 [label="252_ records[0] = CommissionRecord(time, amount);\n1526-expression_statement-253-253", method="addStaticCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
1537 [label="254_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n1537-function_definition-255-256", method="bug_unchk_send17()", type_label=function_definition];
1542 [label="255_ msg.sender.transfer(1 ether);\n1542-expression_statement-256-256", method="bug_unchk_send17()", type_label=expression_statement];
1552 [label="256_ function addDynamicCommissionRecord(address userAddress, uint256 time, uint256 amount) private {\n        CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n        for (uint256 i = 8; i > 0; --i) {\n            CommissionRecord memory prevRecord = records[i - 1];\n            records[i] = prevRecord;\n        }\n        records[0] = CommissionRecord(time, amount);\n    }\n1552-function_definition-257-264", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=function_definition];
1568 [label="257_ CommissionRecord[9] storage records = dynamicCommissionRecordMapping[userAddress];\n1568-new_variable-258-258", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
1579 [label="258_ for(i > 0;;--i)\n1579-for-259-262", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=for];
5777 [label="258_ end_loop", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=end_loop];
1590 [label="258_ --i\n1590-expression_statement-259-259", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
1593 [label="259_ CommissionRecord memory prevRecord = records[i - 1];\n1593-new_variable-260-260", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=new_variable];
1604 [label="260_ records[i] = prevRecord;\n1604-expression_statement-261-261", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
1610 [label="262_ records[0] = CommissionRecord(time, amount);\n1610-expression_statement-263-263", method="addDynamicCommissionRecord(address userAddress,uint256 time,uint256 amount)", type_label=expression_statement];
1621 [label="264_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n1621-function_definition-265-266", method="bug_unchk_send3()", type_label=function_definition];
1626 [label="265_ msg.sender.transfer(1 ether);\n1626-expression_statement-266-266", method="bug_unchk_send3()", type_label=expression_statement];
1636 [label="266_ function invest(address sponsorAddress, uint256 investCycle) external payable {\n        User storage sponsor = userMapping[sponsorAddress];\n        require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n        require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n        uint256 investAmount = msg.value.div(ONE_ETH);\n        investAmount = investAmount.mul(ONE_ETH);\n        require(investAmount == msg.value, \"Invest amount is not integer\");\n        require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n        User memory user = userMapping[msg.sender];\n        uint256 level = getLevelByInvestAmount(investAmount);\n        if (user.totalInvestCount > 0) {\n            require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n            require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n            require(user.currentInvestTime == 0, \"Invalid state\");\n            require(user.currentInvestCycle == 0, \"Invalid state\");\n            require(user.currentlevel == 0, \"Invalid state\");\n            require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n            require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n            user.totalInvestCount = user.totalInvestCount.add(1);\n            user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n            user.currentInvestTime = now;\n            user.currentInvestAmount = investAmount;\n            user.currentInvestCycle = investCycle;\n            user.currentlevel = level;\n            user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n            userMapping[msg.sender] = user;\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        } else {\n            userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n            addressMapping[totalUserCount] = msg.sender;\n            totalUserCount = totalUserCount.add(1);\n            address addressWalker = sponsorAddress;\n            while (addressWalker != GENESIS_USER_ADDRESS) {\n                sponsor = userMapping[addressWalker];\n                sponsor.downlineCount = sponsor.downlineCount.add(1);\n                if (addressWalker == sponsorAddress) {\n                    sponsor.nodeCount = sponsor.nodeCount.add(1);\n                }\n                sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n                addressWalker = sponsor.sponsorAddress;\n            }\n        }\n        addInvestRecord(msg.sender, now, investAmount, investCycle);\n        totalInvestCount = totalInvestCount.add(1);\n        totalInvestAmount = totalInvestAmount.add(investAmount);\n        engineerFunds = engineerFunds.add(investAmount.div(50));\n        operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n    }\n1636-function_definition-267-322", method="invest(address sponsorAddress,uint256 investCycle)", type_label=function_definition];
1649 [label="267_ User storage sponsor = userMapping[sponsorAddress];\n1649-new_variable-268-268", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
1658 [label="268_ require(sponsor.totalInvestCount > 0, \"Invalid sponsor address\");\n1658-expression_statement-269-269", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1670 [label="269_ require(investCycle == 30 || investCycle == 60 || investCycle == 90, \"Invalid invest cycle\");\n1670-expression_statement-270-270", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1688 [label="270_ uint256 investAmount = msg.value.div(ONE_ETH);\n1688-new_variable-271-271", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
1701 [label="271_ investAmount = investAmount.mul(ONE_ETH);\n1701-expression_statement-272-272", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1710 [label="272_ require(investAmount == msg.value, \"Invest amount is not integer\");\n1710-expression_statement-273-273", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1722 [label="273_ require(investAmount >= ONE_ETH.mul(1) && investAmount <= ONE_ETH.mul(15), \"Invalid invest amount\");\n1722-expression_statement-274-274", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1746 [label="274_ User memory user = userMapping[msg.sender];\n1746-new_variable-275-275", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
1757 [label="275_ uint256 level = getLevelByInvestAmount(investAmount);\n1757-new_variable-276-276", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
1766 [label="276_ if_user.totalInvestCount > 0\n1766-if-277-316", method="invest(address sponsorAddress,uint256 investCycle)", type_label=if];
5964 [label="276_ end_if", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_if];
1773 [label="277_ require(user.sponsorAddress == sponsorAddress, \"sponsor address is inconsistent\");\n1773-expression_statement-278-278", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1785 [label="278_ require(user.currentInvestAmount == 0, \"Dumplicate invest\");\n1785-expression_statement-279-279", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1797 [label="279_ require(user.currentInvestTime == 0, \"Invalid state\");\n1797-expression_statement-280-280", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1809 [label="280_ require(user.currentInvestCycle == 0, \"Invalid state\");\n1809-expression_statement-281-281", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1821 [label="281_ require(user.currentlevel == 0, \"Invalid state\");\n1821-expression_statement-282-282", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1833 [label="282_ require(user.currentStaticCommissionRatio == 0, \"Invalid state\");\n1833-expression_statement-283-283", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1845 [label="283_ require(user.currentStaticCommissionWithdrawAmount == 0, \"Invalid state\");\n1845-expression_statement-284-284", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1857 [label="284_ user.totalInvestCount = user.totalInvestCount.add(1);\n1857-expression_statement-285-285", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1870 [label="285_ user.totalInvestAmount = user.totalInvestAmount.add(investAmount);\n1870-expression_statement-286-286", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1883 [label="286_ user.currentInvestTime = now;\n1883-expression_statement-287-287", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1889 [label="287_ user.currentInvestAmount = investAmount;\n1889-expression_statement-288-288", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1895 [label="288_ user.currentInvestCycle = investCycle;\n1895-expression_statement-289-289", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1901 [label="289_ user.currentlevel = level;\n1901-expression_statement-290-290", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1907 [label="290_ user.currentStaticCommissionRatio = getStaticCommissionRatio(level, investCycle);\n1907-expression_statement-291-291", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1918 [label="291_ userMapping[msg.sender] = user;\n1918-expression_statement-292-292", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1926 [label="292_ address addressWalker = sponsorAddress;\n1926-new_variable-293-293", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
1932 [label="293_ while\n1932-while-294-298", method="invest(address sponsorAddress,uint256 investCycle)", type_label=while];
6130 [label="293_ end_loop", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_loop];
1937 [label="294_ sponsor = userMapping[addressWalker];\n1937-expression_statement-295-295", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1943 [label="295_ sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n1943-expression_statement-296-296", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1956 [label="296_ addressWalker = sponsor.sponsorAddress;\n1956-expression_statement-297-297", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
1963 [label="299_ userMapping[msg.sender] = User(1, investAmount, 0, 0, 0, 1, 0, investAmount,\n                                           now, investAmount, investCycle, level,\n                                           getStaticCommissionRatio(level, investCycle),\n                                           0, 0, 0, 0, sponsorAddress);\n1963-expression_statement-300-303", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2013 [label="303_ addressMapping[totalUserCount] = msg.sender;\n2013-expression_statement-304-304", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2021 [label="304_ totalUserCount = totalUserCount.add(1);\n2021-expression_statement-305-305", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2030 [label="305_ address addressWalker = sponsorAddress;\n2030-new_variable-306-306", method="invest(address sponsorAddress,uint256 investCycle)", type_label=new_variable];
2036 [label="306_ while\n2036-while-307-315", method="invest(address sponsorAddress,uint256 investCycle)", type_label=while];
6234 [label="306_ end_loop", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_loop];
2041 [label="307_ sponsor = userMapping[addressWalker];\n2041-expression_statement-308-308", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2047 [label="308_ sponsor.downlineCount = sponsor.downlineCount.add(1);\n2047-expression_statement-309-309", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2060 [label="309_ if_addressWalker == sponsorAddress\n2060-if-310-312", method="invest(address sponsorAddress,uint256 investCycle)", type_label=if];
6258 [label="309_ end_if", method="invest(address sponsorAddress,uint256 investCycle)", type_label=end_if];
2065 [label="310_ sponsor.nodeCount = sponsor.nodeCount.add(1);\n2065-expression_statement-311-311", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2078 [label="312_ sponsor.totalDownlineInvestAmount = sponsor.totalDownlineInvestAmount.add(investAmount);\n2078-expression_statement-313-313", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2091 [label="313_ addressWalker = sponsor.sponsorAddress;\n2091-expression_statement-314-314", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2097 [label="316_ addInvestRecord(msg.sender, now, investAmount, investCycle);\n2097-expression_statement-317-317", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2110 [label="317_ totalInvestCount = totalInvestCount.add(1);\n2110-expression_statement-318-318", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2119 [label="318_ totalInvestAmount = totalInvestAmount.add(investAmount);\n2119-expression_statement-319-319", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2128 [label="319_ engineerFunds = engineerFunds.add(investAmount.div(50));\n2128-expression_statement-320-320", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2142 [label="320_ operatorFunds = operatorFunds.add(investAmount.mul(3).div(100));\n2142-expression_statement-321-321", method="invest(address sponsorAddress,uint256 investCycle)", type_label=expression_statement];
2161 [label="322_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n2161-function_definition-323-324", method="bug_unchk_send9()", type_label=function_definition];
2166 [label="323_ msg.sender.transfer(1 ether);\n2166-expression_statement-324-324", method="bug_unchk_send9()", type_label=expression_statement];
2176 [label="324_ function userWithdraw() external {\n        User storage user = userMapping[msg.sender];\n        if (user.currentInvestAmount > 0) {\n            uint256 avaliableIA = user.currentInvestAmount;\n            if (!isInvestExpired(user)) {\n                avaliableIA = getAbortInvestAmount(user);\n            }\n            uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n            user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n            user.currentInvestTime = 0;\n            user.currentInvestAmount = 0;\n            user.currentInvestCycle = 0;\n            user.currentlevel = 0;\n            user.currentStaticCommissionRatio = 0;\n            user.currentStaticCommissionWithdrawAmount = 0;\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n            msg.sender.transfer(avaliableIA);\n        }\n    }\n2176-function_definition-325-344", method="userWithdraw()", type_label=function_definition];
2180 [label="325_ User storage user = userMapping[msg.sender];\n2180-new_variable-326-326", method="userWithdraw()", type_label=new_variable];
2191 [label="326_ if_user.currentInvestAmount > 0\n2191-if-327-343", method="userWithdraw()", type_label=if];
6389 [label="326_ end_if", method="userWithdraw()", type_label=end_if];
2198 [label="327_ uint256 avaliableIA = user.currentInvestAmount;\n2198-new_variable-328-328", method="userWithdraw()", type_label=new_variable];
2206 [label="328_ if\n2206-if-329-331", method="userWithdraw()", type_label=if];
6404 [label="328_ end_if", method="userWithdraw()", type_label=end_if];
2213 [label="329_ avaliableIA = getAbortInvestAmount(user);\n2213-expression_statement-330-330", method="userWithdraw()", type_label=expression_statement];
2220 [label="331_ uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n2220-new_variable-332-332", method="userWithdraw()", type_label=new_variable];
2229 [label="332_ user.staticCommissionBalance = user.staticCommissionBalance.add(avaliableSCA);\n2229-expression_statement-333-333", method="userWithdraw()", type_label=expression_statement];
2242 [label="333_ user.currentInvestTime = 0;\n2242-expression_statement-334-334", method="userWithdraw()", type_label=expression_statement];
2248 [label="334_ user.currentInvestAmount = 0;\n2248-expression_statement-335-335", method="userWithdraw()", type_label=expression_statement];
2254 [label="335_ user.currentInvestCycle = 0;\n2254-expression_statement-336-336", method="userWithdraw()", type_label=expression_statement];
2260 [label="336_ user.currentlevel = 0;\n2260-expression_statement-337-337", method="userWithdraw()", type_label=expression_statement];
2266 [label="337_ user.currentStaticCommissionRatio = 0;\n2266-expression_statement-338-338", method="userWithdraw()", type_label=expression_statement];
2272 [label="338_ user.currentStaticCommissionWithdrawAmount = 0;\n2272-expression_statement-339-339", method="userWithdraw()", type_label=expression_statement];
2278 [label="339_ user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableIA);\n2278-expression_statement-340-340", method="userWithdraw()", type_label=expression_statement];
2291 [label="340_ totalWithdrawAmount = totalWithdrawAmount.add(avaliableIA);\n2291-expression_statement-341-341", method="userWithdraw()", type_label=expression_statement];
2300 [label="341_ msg.sender.transfer(avaliableIA);\n2300-expression_statement-342-342", method="userWithdraw()", type_label=expression_statement];
2309 [label="344_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n2309-function_definition-345-346", method="bug_unchk_send25()", type_label=function_definition];
2314 [label="345_ msg.sender.transfer(1 ether);\n2314-expression_statement-346-346", method="bug_unchk_send25()", type_label=expression_statement];
2324 [label="346_ function userWithdrawCommission() external {\n        User storage user = userMapping[msg.sender];\n        uint256 avaliableDCB = user.dynamicCommissionBalance;\n        uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n        uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n        uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n        if (avaliableWithdrawAmount >= ONE_ETH.div(10)) {\n            user.staticCommissionBalance = 0;\n            user.dynamicCommissionBalance = 0;\n            user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n            user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n            totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n            totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n            totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n            if (avaliableSCB > 0) {\n                addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n            }\n            msg.sender.transfer(avaliableWithdrawAmount);\n        }\n    }\n2324-function_definition-347-368", method="userWithdrawCommission()", type_label=function_definition];
2328 [label="347_ User storage user = userMapping[msg.sender];\n2328-new_variable-348-348", method="userWithdrawCommission()", type_label=new_variable];
2339 [label="348_ uint256 avaliableDCB = user.dynamicCommissionBalance;\n2339-new_variable-349-349", method="userWithdrawCommission()", type_label=new_variable];
2347 [label="349_ uint256 avaliableSCA = getAvaliableStaticCommissionAmount(user);\n2347-new_variable-350-350", method="userWithdrawCommission()", type_label=new_variable];
2356 [label="350_ uint256 avaliableSCB = user.staticCommissionBalance.add(avaliableSCA);\n2356-new_variable-351-351", method="userWithdrawCommission()", type_label=new_variable];
2369 [label="351_ uint256 avaliableWithdrawAmount = avaliableDCB.add(avaliableSCB);\n2369-new_variable-352-352", method="userWithdrawCommission()", type_label=new_variable];
2380 [label="352_ if\n2380-if-353-367", method="userWithdrawCommission()", type_label=if];
6578 [label="352_ end_if", method="userWithdrawCommission()", type_label=end_if];
2390 [label="353_ user.staticCommissionBalance = 0;\n2390-expression_statement-354-354", method="userWithdrawCommission()", type_label=expression_statement];
2396 [label="354_ user.dynamicCommissionBalance = 0;\n2396-expression_statement-355-355", method="userWithdrawCommission()", type_label=expression_statement];
2402 [label="355_ user.currentStaticCommissionWithdrawAmount = user.currentStaticCommissionWithdrawAmount.add(avaliableSCA);\n2402-expression_statement-356-356", method="userWithdrawCommission()", type_label=expression_statement];
2415 [label="356_ user.totalStaticCommissionWithdrawAmount = user.totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n2415-expression_statement-357-357", method="userWithdrawCommission()", type_label=expression_statement];
2428 [label="357_ user.totalDynamicCommissionWithdrawAmount = user.totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n2428-expression_statement-358-358", method="userWithdrawCommission()", type_label=expression_statement];
2441 [label="358_ user.totalWithdrawAmount = user.totalWithdrawAmount.add(avaliableWithdrawAmount);\n2441-expression_statement-359-359", method="userWithdrawCommission()", type_label=expression_statement];
2454 [label="359_ totalStaticCommissionWithdrawAmount = totalStaticCommissionWithdrawAmount.add(avaliableSCB);\n2454-expression_statement-360-360", method="userWithdrawCommission()", type_label=expression_statement];
2463 [label="360_ totalDynamicCommissionWithdrawAmount = totalDynamicCommissionWithdrawAmount.add(avaliableDCB);\n2463-expression_statement-361-361", method="userWithdrawCommission()", type_label=expression_statement];
2472 [label="361_ totalWithdrawAmount = totalWithdrawAmount.add(avaliableWithdrawAmount);\n2472-expression_statement-362-362", method="userWithdrawCommission()", type_label=expression_statement];
2481 [label="362_ if_avaliableSCB > 0\n2481-if-363-365", method="userWithdrawCommission()", type_label=if];
6679 [label="362_ end_if", method="userWithdrawCommission()", type_label=end_if];
2486 [label="363_ addStaticCommissionRecord(msg.sender, now, avaliableSCB);\n2486-expression_statement-364-364", method="userWithdrawCommission()", type_label=expression_statement];
2497 [label="365_ msg.sender.transfer(avaliableWithdrawAmount);\n2497-expression_statement-366-366", method="userWithdrawCommission()", type_label=expression_statement];
2506 [label="368_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n2506-function_definition-369-370", method="bug_unchk_send19()", type_label=function_definition];
2511 [label="369_ msg.sender.transfer(1 ether);\n2511-expression_statement-370-370", method="bug_unchk_send19()", type_label=expression_statement];
2521 [label="370_ function engineerWithdraw() external onlyEngineer {\n        uint256 avaliableAmount = engineerFunds;\n        if (avaliableAmount > 0) {\n            engineerFunds = 0;\n            engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }\n2521-function_definition-371-378", method="engineerWithdraw()", type_label=function_definition];
2524 [label="370_ onlyEngineer\n2524-expression_statement-371-371", method="engineerWithdraw()", type_label=expression_statement];
2527 [label="371_ uint256 avaliableAmount = engineerFunds;\n2527-new_variable-372-372", method="engineerWithdraw()", type_label=new_variable];
2533 [label="372_ if_avaliableAmount > 0\n2533-if-373-377", method="engineerWithdraw()", type_label=if];
6731 [label="372_ end_if", method="engineerWithdraw()", type_label=end_if];
2538 [label="373_ engineerFunds = 0;\n2538-expression_statement-374-374", method="engineerWithdraw()", type_label=expression_statement];
2542 [label="374_ engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount);\n2542-expression_statement-375-375", method="engineerWithdraw()", type_label=expression_statement];
2551 [label="375_ msg.sender.transfer(avaliableAmount);\n2551-expression_statement-376-376", method="engineerWithdraw()", type_label=expression_statement];
2560 [label="378_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n2560-function_definition-379-380", method="bug_unchk_send26()", type_label=function_definition];
2565 [label="379_ msg.sender.transfer(1 ether);\n2565-expression_statement-380-380", method="bug_unchk_send26()", type_label=expression_statement];
2575 [label="380_ function operatorWithdraw() external onlyOwner {\n        uint256 avaliableAmount = operatorFunds;\n        if (avaliableAmount > 0) {\n            operatorFunds = 0;\n            operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n            msg.sender.transfer(avaliableAmount);\n        }\n    }\n2575-function_definition-381-388", method="operatorWithdraw()", type_label=function_definition];
2578 [label="380_ onlyOwner\n2578-expression_statement-381-381", method="operatorWithdraw()", type_label=expression_statement];
2581 [label="381_ uint256 avaliableAmount = operatorFunds;\n2581-new_variable-382-382", method="operatorWithdraw()", type_label=new_variable];
2587 [label="382_ if_avaliableAmount > 0\n2587-if-383-387", method="operatorWithdraw()", type_label=if];
6785 [label="382_ end_if", method="operatorWithdraw()", type_label=end_if];
2592 [label="383_ operatorFunds = 0;\n2592-expression_statement-384-384", method="operatorWithdraw()", type_label=expression_statement];
2596 [label="384_ operatorWithdrawAmount = operatorWithdrawAmount.add(avaliableAmount);\n2596-expression_statement-385-385", method="operatorWithdraw()", type_label=expression_statement];
2605 [label="385_ msg.sender.transfer(avaliableAmount);\n2605-expression_statement-386-386", method="operatorWithdraw()", type_label=expression_statement];
2614 [label="388_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n2614-function_definition-389-390", method="bug_unchk_send20()", type_label=function_definition];
2619 [label="389_ msg.sender.transfer(1 ether);\n2619-expression_statement-390-390", method="bug_unchk_send20()", type_label=expression_statement];
2629 [label="390_ function getSummary() public view returns (uint256[11] memory) {\n        return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n    }\n2629-function_definition-391-399", method="getSummary()", type_label=function_definition];
2640 [label="391_ return ([address(this).balance, totalInvestCount, totalInvestAmount,\n                 totalStaticCommissionWithdrawAmount,\n                 totalDynamicCommissionWithdrawAmount,\n                 totalWithdrawAmount,\n                 totalUserCount,\n                 engineerFunds, engineerWithdrawAmount,\n                 operatorFunds, operatorWithdrawAmount]);\n2640-return-392-398", method="getSummary()", type_label=return];
2658 [label="399_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n2658-function_definition-400-401", method="bug_unchk_send32()", type_label=function_definition];
2663 [label="400_ msg.sender.transfer(1 ether);\n2663-expression_statement-401-401", method="bug_unchk_send32()", type_label=expression_statement];
2673 [label="401_ function getUserByAddress(address userAddress) public view returns(uint256[16] memory,\n                                                                       address) {\n        User memory user = userMapping[userAddress];\n        return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n    }\n2673-function_definition-402-418", method="getUserByAddress(address userAddress)", type_label=function_definition];
2691 [label="403_ User memory user = userMapping[userAddress];\n2691-new_variable-404-404", method="getUserByAddress(address userAddress)", type_label=new_variable];
2700 [label="404_ return ([user.totalInvestCount, user.totalInvestAmount,\n                 user.totalStaticCommissionWithdrawAmount,\n                 user.totalDynamicCommissionWithdrawAmount,\n                 user.totalWithdrawAmount,\n                 user.downlineCount, user.nodeCount,\n                 user.totalDownlineInvestAmount,\n                 user.currentInvestTime, user.currentInvestAmount,\n                 user.currentInvestCycle, user.currentlevel,\n                 user.currentStaticCommissionRatio,\n                 user.staticCommissionBalance.add(getAvaliableStaticCommissionAmount(user)),\n                 user.dynamicCommissionBalance,\n                 user.calcDynamicCommissionAmount],\n                user.sponsorAddress);\n2700-return-405-417", method="getUserByAddress(address userAddress)", type_label=return];
2762 [label="418_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n2762-function_definition-419-420", method="bug_unchk_send4()", type_label=function_definition];
2767 [label="419_ msg.sender.transfer(1 ether);\n2767-expression_statement-420-420", method="bug_unchk_send4()", type_label=expression_statement];
2777 [label="420_ function getUserByIndex(uint256 index) external view onlyOwner returns(uint256[16] memory,\n                                                                           address) {\n        return getUserByAddress(addressMapping[index]);\n    }\n2777-function_definition-421-424", method="getUserByIndex(uint256 index)", type_label=function_definition];
2785 [label="420_ onlyOwner\n2785-expression_statement-421-421", method="getUserByIndex(uint256 index)", type_label=expression_statement];
2797 [label="422_ return getUserByAddress(addressMapping[index]);\n2797-return-423-423", method="getUserByIndex(uint256 index)", type_label=return];
2804 [label="424_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n2804-function_definition-425-426", method="bug_unchk_send7()", type_label=function_definition];
2809 [label="425_ msg.sender.transfer(1 ether);\n2809-expression_statement-426-426", method="bug_unchk_send7()", type_label=expression_statement];
2819 [label="426_ function getInvestRecords(address userAddress) external view returns(uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory,\n                                                                         uint256[3] memory) {\n        InvestRecord[9] memory records = investRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n    }\n2819-function_definition-427-446", method="getInvestRecords(address userAddress)", type_label=function_definition];
2874 [label="435_ InvestRecord[9] memory records = investRecordMapping[userAddress];\n2874-new_variable-436-436", method="getInvestRecords(address userAddress)", type_label=new_variable];
2885 [label="436_ return ([records[0].time, records[0].amount, records[0].cycle],\n                [records[1].time, records[1].amount, records[1].cycle],\n                [records[2].time, records[2].amount, records[2].cycle],\n                [records[3].time, records[3].amount, records[3].cycle],\n                [records[4].time, records[4].amount, records[4].cycle],\n                [records[5].time, records[5].amount, records[5].cycle],\n                [records[6].time, records[6].amount, records[6].cycle],\n                [records[7].time, records[7].amount, records[7].cycle],\n                [records[8].time, records[8].amount, records[8].cycle]);\n2885-return-437-445", method="getInvestRecords(address userAddress)", type_label=return];
3031 [label="446_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n3031-function_definition-447-448", method="bug_unchk_send23()", type_label=function_definition];
3036 [label="447_ msg.sender.transfer(1 ether);\n3036-expression_statement-448-448", method="bug_unchk_send23()", type_label=expression_statement];
3046 [label="448_ function getStaticCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory,\n                                                                                   uint256[2] memory) {\n        CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }\n3046-function_definition-449-468", method="getStaticCommissionRecords(address userAddress)", type_label=function_definition];
3101 [label="457_ CommissionRecord[9] memory records = staticCommissionRecordMapping[userAddress];\n3101-new_variable-458-458", method="getStaticCommissionRecords(address userAddress)", type_label=new_variable];
3112 [label="458_ return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n3112-return-459-467", method="getStaticCommissionRecords(address userAddress)", type_label=return];
3213 [label="468_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n3213-function_definition-469-470", method="bug_unchk_send14()", type_label=function_definition];
3218 [label="469_ msg.sender.transfer(1 ether);\n3218-expression_statement-470-470", method="bug_unchk_send14()", type_label=expression_statement];
3228 [label="470_ function getDynamicCommissionRecords(address userAddress) external view returns(uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory,\n                                                                                    uint256[2] memory) {\n        CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n        return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n    }\n3228-function_definition-471-490", method="getDynamicCommissionRecords(address userAddress)", type_label=function_definition];
3283 [label="479_ CommissionRecord[9] memory records = dynamicCommissionRecordMapping[userAddress];\n3283-new_variable-480-480", method="getDynamicCommissionRecords(address userAddress)", type_label=new_variable];
3294 [label="480_ return ([records[0].time, records[0].amount],\n                [records[1].time, records[1].amount],\n                [records[2].time, records[2].amount],\n                [records[3].time, records[3].amount],\n                [records[4].time, records[4].amount],\n                [records[5].time, records[5].amount],\n                [records[6].time, records[6].amount],\n                [records[7].time, records[7].amount],\n                [records[8].time, records[8].amount]);\n3294-return-481-489", method="getDynamicCommissionRecords(address userAddress)", type_label=return];
3395 [label="490_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n3395-function_definition-491-492", method="bug_unchk_send30()", type_label=function_definition];
3400 [label="491_ msg.sender.transfer(1 ether);\n3400-expression_statement-492-492", method="bug_unchk_send30()", type_label=expression_statement];
3410 [label="492_ function calcDynamicCommission() external onlyOwner {\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n        for (uint256 i = 0; i < totalUserCount; ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }\n3410-function_definition-493-540", method="calcDynamicCommission()", type_label=function_definition];
3413 [label="492_ onlyOwner\n3413-expression_statement-493-493", method="calcDynamicCommission()", type_label=expression_statement];
3416 [label="493_ for(i < totalUserCount;;++i)\n3416-for-494-497", method="calcDynamicCommission()", type_label=for];
7614 [label="493_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
3427 [label="493_ ++i\n3427-expression_statement-494-494", method="calcDynamicCommission()", type_label=expression_statement];
3430 [label="494_ User storage user = userMapping[addressMapping[i]];\n3430-new_variable-495-495", method="calcDynamicCommission()", type_label=new_variable];
3441 [label="495_ user.calcDynamicCommissionAmount = 0;\n3441-expression_statement-496-496", method="calcDynamicCommission()", type_label=expression_statement];
3447 [label="497_ for(i < totalUserCount;;++i)\n3447-for-498-531", method="calcDynamicCommission()", type_label=for];
7645 [label="497_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
3458 [label="497_ ++i\n3458-expression_statement-498-498", method="calcDynamicCommission()", type_label=expression_statement];
3461 [label="498_ User memory user = userMapping[addressMapping[i]];\n3461-new_variable-499-499", method="calcDynamicCommission()", type_label=new_variable];
3472 [label="499_ if_user.currentInvestAmount > 0\n3472-if-500-530", method="calcDynamicCommission()", type_label=if];
7670 [label="499_ end_if", method="calcDynamicCommission()", type_label=end_if];
3479 [label="500_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n3479-new_variable-501-501", method="calcDynamicCommission()", type_label=new_variable];
3497 [label="501_ if_commissionDays >= 1 && commissionDays <= user.currentInvestCycle\n3497-if-502-529", method="calcDynamicCommission()", type_label=if];
7695 [label="501_ end_if", method="calcDynamicCommission()", type_label=end_if];
3508 [label="502_ uint256 depth = 1;\n3508-new_variable-503-503", method="calcDynamicCommission()", type_label=new_variable];
3514 [label="503_ address addressWalker = user.sponsorAddress;\n3514-new_variable-504-504", method="calcDynamicCommission()", type_label=new_variable];
3522 [label="504_ while\n3522-while-505-528", method="calcDynamicCommission()", type_label=while];
7720 [label="504_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
3527 [label="505_ User storage sponsor = userMapping[addressWalker];\n3527-new_variable-506-506", method="calcDynamicCommission()", type_label=new_variable];
3536 [label="506_ if_sponsor.currentInvestAmount > 0\n3536-if-507-525", method="calcDynamicCommission()", type_label=if];
7734 [label="506_ end_if", method="calcDynamicCommission()", type_label=end_if];
3543 [label="507_ uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n3543-new_variable-508-508", method="calcDynamicCommission()", type_label=new_variable];
3554 [label="508_ if_dynamicCommissionRatio > 0\n3554-if-509-524", method="calcDynamicCommission()", type_label=if];
7752 [label="508_ end_if", method="calcDynamicCommission()", type_label=end_if];
3559 [label="509_ uint256 dynamicCA = sponsor.currentInvestAmount;\n3559-new_variable-510-510", method="calcDynamicCommission()", type_label=new_variable];
3567 [label="510_ if_dynamicCA > user.currentInvestAmount\n3567-if-511-513", method="calcDynamicCommission()", type_label=if];
7765 [label="510_ end_if", method="calcDynamicCommission()", type_label=end_if];
3574 [label="511_ dynamicCA = user.currentInvestAmount;\n3574-expression_statement-512-512", method="calcDynamicCommission()", type_label=expression_statement];
3580 [label="513_ dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n3580-expression_statement-514-514", method="calcDynamicCommission()", type_label=expression_statement];
3591 [label="514_ dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n3591-expression_statement-515-515", method="calcDynamicCommission()", type_label=expression_statement];
3600 [label="515_ if_sponsor.currentlevel == 1\n3600-if-516-522", method="calcDynamicCommission()", type_label=if];
7798 [label="515_ end_if", method="calcDynamicCommission()", type_label=end_if];
3607 [label="516_ dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n3607-expression_statement-517-517", method="calcDynamicCommission()", type_label=expression_statement];
3625 [label="517_ if_sponsor.currentlevel == 2\n3625-if-518-522", method="calcDynamicCommission()", type_label=if];
3632 [label="518_ dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n3632-expression_statement-519-519", method="calcDynamicCommission()", type_label=expression_statement];
3651 [label="520_ dynamicCA = dynamicCA.div(1000 * 100);\n3651-expression_statement-521-521", method="calcDynamicCommission()", type_label=expression_statement];
3662 [label="522_ sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n3662-expression_statement-523-523", method="calcDynamicCommission()", type_label=expression_statement];
3675 [label="525_ addressWalker = sponsor.sponsorAddress;\n3675-expression_statement-526-526", method="calcDynamicCommission()", type_label=expression_statement];
3681 [label="526_ depth = depth.add(1);\n3681-expression_statement-527-527", method="calcDynamicCommission()", type_label=expression_statement];
3690 [label="531_ for(i < totalUserCount;;++i)\n3690-for-532-539", method="calcDynamicCommission()", type_label=for];
7888 [label="531_ end_loop", method="calcDynamicCommission()", type_label=end_loop];
3701 [label="531_ ++i\n3701-expression_statement-532-532", method="calcDynamicCommission()", type_label=expression_statement];
3704 [label="532_ address userAddress = addressMapping[i];\n3704-new_variable-533-533", method="calcDynamicCommission()", type_label=new_variable];
3712 [label="533_ User storage user = userMapping[userAddress];\n3712-new_variable-534-534", method="calcDynamicCommission()", type_label=new_variable];
3721 [label="534_ if_user.calcDynamicCommissionAmount > 0\n3721-if-535-538", method="calcDynamicCommission()", type_label=if];
7919 [label="534_ end_if", method="calcDynamicCommission()", type_label=end_if];
3728 [label="535_ user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n3728-expression_statement-536-536", method="calcDynamicCommission()", type_label=expression_statement];
3743 [label="536_ addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n3743-expression_statement-537-537", method="calcDynamicCommission()", type_label=expression_statement];
3754 [label="540_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n3754-function_definition-541-542", method="bug_unchk_send8()", type_label=function_definition];
3759 [label="541_ msg.sender.transfer(1 ether);\n3759-expression_statement-542-542", method="bug_unchk_send8()", type_label=expression_statement];
3769 [label="542_ function calcDynamicCommissionBegin(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User storage user = userMapping[addressMapping[i]];\n            user.calcDynamicCommissionAmount = 0;\n        }\n    }\n3769-function_definition-543-548", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=function_definition];
3780 [label="542_ onlyOwner\n3780-expression_statement-543-543", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
3783 [label="543_ for(i < (index + length);;++i)\n3783-for-544-547", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=for];
7981 [label="543_ end_loop", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=end_loop];
3797 [label="543_ ++i\n3797-expression_statement-544-544", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
3800 [label="544_ User storage user = userMapping[addressMapping[i]];\n3800-new_variable-545-545", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=new_variable];
3811 [label="545_ user.calcDynamicCommissionAmount = 0;\n3811-expression_statement-546-546", method="calcDynamicCommissionBegin(uint256 index,uint256 length)", type_label=expression_statement];
3817 [label="548_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n3817-function_definition-549-550", method="bug_unchk_send27()", type_label=function_definition];
3822 [label="549_ msg.sender.transfer(1 ether);\n3822-expression_statement-550-550", method="bug_unchk_send27()", type_label=expression_statement];
3832 [label="550_ function calcDynamicCommissionRange(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            User memory user = userMapping[addressMapping[i]];\n            if (user.currentInvestAmount > 0) {\n                uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n                if (commissionDays >= 1 && commissionDays <= user.currentInvestCycle) {\n                    uint256 depth = 1;\n                    address addressWalker = user.sponsorAddress;\n                    while (addressWalker != GENESIS_USER_ADDRESS) {\n                        User storage sponsor = userMapping[addressWalker];\n                        if (sponsor.currentInvestAmount > 0) {\n                            uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n                            if (dynamicCommissionRatio > 0) {\n                                uint256 dynamicCA = sponsor.currentInvestAmount;\n                                if (dynamicCA > user.currentInvestAmount) {\n                                    dynamicCA = user.currentInvestAmount;\n                                }\n                                dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n                                dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n                                if (sponsor.currentlevel == 1) {\n                                    dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n                                } else if (sponsor.currentlevel == 2) {\n                                    dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n                                } else {\n                                    dynamicCA = dynamicCA.div(1000 * 100);\n                                }\n                                sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n                            }\n                        }\n                        addressWalker = sponsor.sponsorAddress;\n                        depth = depth.add(1);\n                    }\n                }\n            }\n        }\n    }\n3832-function_definition-551-586", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=function_definition];
3843 [label="550_ onlyOwner\n3843-expression_statement-551-551", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
3846 [label="551_ for(i < (index + length);;++i)\n3846-for-552-585", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=for];
8044 [label="551_ end_loop", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_loop];
3860 [label="551_ ++i\n3860-expression_statement-552-552", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
3863 [label="552_ User memory user = userMapping[addressMapping[i]];\n3863-new_variable-553-553", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
3874 [label="553_ if_user.currentInvestAmount > 0\n3874-if-554-584", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
8072 [label="553_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
3881 [label="554_ uint256 commissionDays = now.sub(user.currentInvestTime).div(ONE_DAY);\n3881-new_variable-555-555", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
3899 [label="555_ if_commissionDays >= 1 && commissionDays <= user.currentInvestCycle\n3899-if-556-583", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
8097 [label="555_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
3910 [label="556_ uint256 depth = 1;\n3910-new_variable-557-557", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
3916 [label="557_ address addressWalker = user.sponsorAddress;\n3916-new_variable-558-558", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
3924 [label="558_ while\n3924-while-559-582", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=while];
8122 [label="558_ end_loop", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_loop];
3929 [label="559_ User storage sponsor = userMapping[addressWalker];\n3929-new_variable-560-560", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
3938 [label="560_ if_sponsor.currentInvestAmount > 0\n3938-if-561-579", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
8136 [label="560_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
3945 [label="561_ uint256 dynamicCommissionRatio = getDynamicCommissionRatio(sponsor, depth);\n3945-new_variable-562-562", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
3956 [label="562_ if_dynamicCommissionRatio > 0\n3956-if-563-578", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
8154 [label="562_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
3961 [label="563_ uint256 dynamicCA = sponsor.currentInvestAmount;\n3961-new_variable-564-564", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=new_variable];
3969 [label="564_ if_dynamicCA > user.currentInvestAmount\n3969-if-565-567", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
8167 [label="564_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
3976 [label="565_ dynamicCA = user.currentInvestAmount;\n3976-expression_statement-566-566", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
3982 [label="567_ dynamicCA = dynamicCA.mul(user.currentStaticCommissionRatio);\n3982-expression_statement-568-568", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
3993 [label="568_ dynamicCA = dynamicCA.mul(dynamicCommissionRatio);\n3993-expression_statement-569-569", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4002 [label="569_ if_sponsor.currentlevel == 1\n4002-if-570-576", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
8200 [label="569_ end_if", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=end_if];
4009 [label="570_ dynamicCA = dynamicCA.mul(3).div(1000 * 100 * 10);\n4009-expression_statement-571-571", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4027 [label="571_ if_sponsor.currentlevel == 2\n4027-if-572-576", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=if];
4034 [label="572_ dynamicCA = dynamicCA.mul(6).div(1000 * 100 * 10);\n4034-expression_statement-573-573", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4053 [label="574_ dynamicCA = dynamicCA.div(1000 * 100);\n4053-expression_statement-575-575", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4064 [label="576_ sponsor.calcDynamicCommissionAmount = sponsor.calcDynamicCommissionAmount.add(dynamicCA);\n4064-expression_statement-577-577", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4077 [label="579_ addressWalker = sponsor.sponsorAddress;\n4077-expression_statement-580-580", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4083 [label="580_ depth = depth.add(1);\n4083-expression_statement-581-581", method="calcDynamicCommissionRange(uint256 index,uint256 length)", type_label=expression_statement];
4092 [label="586_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n4092-function_definition-587-588", method="bug_unchk_send31()", type_label=function_definition];
4097 [label="587_ msg.sender.transfer(1 ether);\n4097-expression_statement-588-588", method="bug_unchk_send31()", type_label=expression_statement];
4107 [label="588_ function calcDynamicCommissionEnd(uint256 index, uint256 length) external onlyOwner {\n        for (uint256 i = index; i < (index + length); ++i) {\n            address userAddress = addressMapping[i];\n            User storage user = userMapping[userAddress];\n            if (user.calcDynamicCommissionAmount > 0) {\n                user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n                addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n            }\n        }\n    }\n4107-function_definition-589-598", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=function_definition];
4118 [label="588_ onlyOwner\n4118-expression_statement-589-589", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
4121 [label="589_ for(i < (index + length);;++i)\n4121-for-590-597", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=for];
8319 [label="589_ end_loop", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=end_loop];
4135 [label="589_ ++i\n4135-expression_statement-590-590", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
4138 [label="590_ address userAddress = addressMapping[i];\n4138-new_variable-591-591", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=new_variable];
4146 [label="591_ User storage user = userMapping[userAddress];\n4146-new_variable-592-592", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=new_variable];
4155 [label="592_ if_user.calcDynamicCommissionAmount > 0\n4155-if-593-596", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=if];
8353 [label="592_ end_if", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=end_if];
4162 [label="593_ user.dynamicCommissionBalance = user.dynamicCommissionBalance.add(user.calcDynamicCommissionAmount);\n4162-expression_statement-594-594", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
4177 [label="594_ addDynamicCommissionRecord(userAddress, now, user.calcDynamicCommissionAmount);\n4177-expression_statement-595-595", method="calcDynamicCommissionEnd(uint256 index,uint256 length)", type_label=expression_statement];
4188 [label="598_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n4188-function_definition-599-600", method="bug_unchk_send13()", type_label=function_definition];
4193 [label="599_ msg.sender.transfer(1 ether);\n4193-expression_statement-600-600", method="bug_unchk_send13()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
77 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
98 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
115 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
117 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 139  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
134 -> 4332  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4332 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
139 -> 4332  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
139 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
161 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
163 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
190 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
228 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
230 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
257 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
303 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
421 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
439 -> 444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
459 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
534 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
628 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
678 -> 683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
698 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
716 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
733 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 812  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
802 -> 816  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5000 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 5000  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
816 -> 826  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
816 -> 831  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
826 -> 5000  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
831 -> 5000  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
835 -> 840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
886 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
916 -> 934  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
934 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
950 -> 955  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
950 -> 959  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5148 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 5148  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
959 -> 964  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
959 -> 5148  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
964 -> 5148  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
968 -> 974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
995 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1010 -> 1028  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1028 -> 1033  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1028 -> 1056  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1033 -> 1038  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1033 -> 1042  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5231 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 5231  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1042 -> 1047  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1042 -> 1052  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1047 -> 5231  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1052 -> 5231  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1056 -> 1061  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1056 -> 1085  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1061 -> 5226  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1061 -> 1066  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1061 -> 1070  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5259 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1066 -> 5259  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1070 -> 1075  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1070 -> 1080  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1075 -> 5259  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1080 -> 5259  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1085 -> 5226  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1085 -> 1090  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1085 -> 1094  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5283 -> 1108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 5283  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1094 -> 1099  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1094 -> 1104  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1099 -> 5283  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1104 -> 5283  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1108 -> 1113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1123 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1149  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1142 -> 1163  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1149 -> 1154  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1149 -> 1159  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5347 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1154 -> 5347  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1159 -> 5347  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1163 -> 1170  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1163 -> 1194  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1170 -> 5340  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1170 -> 1175  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1170 -> 1179  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5368 -> 1194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1175 -> 5368  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1179 -> 1184  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1179 -> 1189  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1184 -> 5368  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1189 -> 5368  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1194 -> 5340  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1194 -> 1199  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1194 -> 1203  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5392 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 5392  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1203 -> 1208  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1203 -> 1212  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1208 -> 5392  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1212 -> 1217  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1212 -> 1221  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1217 -> 5392  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1221 -> 1230  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1221 -> 1234  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1230 -> 5392  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1234 -> 1243  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1234 -> 1248  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1243 -> 5392  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1248 -> 5392  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1252 -> 1257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1267 -> 1282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1282 -> 1289  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1282 -> 1294  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5480 -> 1363  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1289 -> 5480  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1294 -> 1312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1312 -> 1319  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1312 -> 5510  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5510 -> 1325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1319 -> 5510  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1325 -> 1343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1343 -> 1352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1352 -> 5480  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1363 -> 1368  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 1398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1398 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1409 -> 1423  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1409 -> 5607  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5607 -> 1440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1420 -> 1409  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1423 -> 1434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1434 -> 1420  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1453 -> 1458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1468 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1484 -> 1495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1495 -> 1509  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1495 -> 5693  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5693 -> 1526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1506 -> 1495  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1509 -> 1520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1520 -> 1506  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1537 -> 1542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1552 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1568 -> 1579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1579 -> 1593  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1579 -> 5777  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5777 -> 1610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1590 -> 1579  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1593 -> 1604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1604 -> 1590  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1621 -> 1626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1636 -> 1649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1649 -> 1658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1658 -> 1670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1670 -> 1688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1688 -> 1701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1701 -> 1710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1710 -> 1722  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1722 -> 1746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1746 -> 1757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1757 -> 1766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1766 -> 1773  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1766 -> 1963  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1773 -> 1785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1785 -> 1797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1797 -> 1809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1809 -> 1821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1821 -> 1833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1833 -> 1845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1845 -> 1857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1857 -> 1870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1870 -> 1883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1883 -> 1889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1889 -> 1895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1895 -> 1901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1901 -> 1907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1907 -> 1918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1918 -> 1926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1926 -> 1932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1932 -> 1937  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1932 -> 6130  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6130 -> 1963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1937 -> 1943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1943 -> 1956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1956 -> 1932  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1963 -> 2013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2013 -> 2021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2021 -> 2030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2030 -> 2036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2036 -> 5964  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2036 -> 2041  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2036 -> 6234  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6234 -> 2097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2041 -> 2047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2047 -> 2060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2060 -> 2065  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2060 -> 6258  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6258 -> 2078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2065 -> 6258  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2078 -> 2091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2091 -> 2036  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2097 -> 2110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2110 -> 2119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2119 -> 2128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2128 -> 2142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2161 -> 2166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2176 -> 2180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2180 -> 2191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2191 -> 2198  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2191 -> 6389  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6389 -> 2309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2198 -> 2206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2206 -> 2213  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2206 -> 6404  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6404 -> 2220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2213 -> 6404  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2220 -> 2229  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2229 -> 2242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2242 -> 2248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2248 -> 2254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2254 -> 2260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2260 -> 2266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2266 -> 2272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2272 -> 2278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2278 -> 2291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2291 -> 2300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2300 -> 6389  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2309 -> 2314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2324 -> 2328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2328 -> 2339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2339 -> 2347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2347 -> 2356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2356 -> 2369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2369 -> 2380  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2380 -> 2390  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2380 -> 6578  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6578 -> 2506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2390 -> 2396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2396 -> 2402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2402 -> 2415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2415 -> 2428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2428 -> 2441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2441 -> 2454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2454 -> 2463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2463 -> 2472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2472 -> 2481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2481 -> 2486  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2481 -> 6679  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6679 -> 2497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2486 -> 6679  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2497 -> 6578  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2506 -> 2511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2521 -> 2527  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2527 -> 2533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2533 -> 2538  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2533 -> 6731  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6731 -> 2560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2538 -> 2542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2542 -> 2551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2551 -> 6731  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2560 -> 2565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2575 -> 2581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2581 -> 2587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2587 -> 2592  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2587 -> 6785  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6785 -> 2614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2592 -> 2596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2596 -> 2605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2605 -> 6785  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2614 -> 2619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2629 -> 2640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2640 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2658 -> 2663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2673 -> 2691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2691 -> 2700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2700 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2762 -> 2767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2777 -> 2797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2797 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2804 -> 2809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2819 -> 2874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2874 -> 2885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2885 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3031 -> 3036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3046 -> 3101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3101 -> 3112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3112 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3213 -> 3218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3228 -> 3283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3283 -> 3294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3294 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3395 -> 3400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3410 -> 3416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3416 -> 3430  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3416 -> 7614  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7614 -> 3447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3427 -> 3416  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3430 -> 3441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3441 -> 3427  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3447 -> 3461  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3447 -> 7645  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7645 -> 3690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3458 -> 3447  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3461 -> 3472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3472 -> 3479  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3472 -> 7670  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7670 -> 3458  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3479 -> 3497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3497 -> 3508  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3497 -> 7695  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3508 -> 3514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3514 -> 3522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3522 -> 3527  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3522 -> 7720  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7720 -> 3458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3527 -> 3536  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3536 -> 3543  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3536 -> 7734  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3543 -> 3554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3554 -> 3559  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3554 -> 7752  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7752 -> 3675  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3559 -> 3567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3567 -> 3574  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3567 -> 7765  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7765 -> 3580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3574 -> 7765  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3580 -> 3591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3591 -> 3600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3600 -> 3607  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3600 -> 3625  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7798 -> 3662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3607 -> 7798  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3625 -> 3632  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3625 -> 3651  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3632 -> 7798  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3651 -> 7798  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3662 -> 7752  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3675 -> 3681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3681 -> 3522  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3690 -> 3704  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3690 -> 7888  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7888 -> 3754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3701 -> 3690  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3704 -> 3712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3712 -> 3721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3721 -> 3728  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3721 -> 7919  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7919 -> 3701  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
7919 -> 3701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
3728 -> 3743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3743 -> 7919  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3754 -> 3759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3769 -> 3783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3783 -> 3800  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3783 -> 7981  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7981 -> 3817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3797 -> 3783  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3800 -> 3811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3811 -> 3797  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3817 -> 3822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3832 -> 3846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3846 -> 3863  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3846 -> 8044  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8044 -> 4092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3860 -> 3846  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3863 -> 3874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3874 -> 3881  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3874 -> 8072  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8072 -> 3860  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3881 -> 3899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3899 -> 3910  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3899 -> 8097  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3910 -> 3916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3916 -> 3924  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3924 -> 3929  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3924 -> 8122  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8122 -> 3860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3929 -> 3938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3938 -> 3945  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3938 -> 8136  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3945 -> 3956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3956 -> 3961  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3956 -> 8154  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8154 -> 4077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3961 -> 3969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3969 -> 3976  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3969 -> 8167  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8167 -> 3982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3976 -> 8167  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3982 -> 3993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3993 -> 4002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4002 -> 4009  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4002 -> 4027  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8200 -> 4064  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4009 -> 8200  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4027 -> 4034  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4027 -> 4053  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4034 -> 8200  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4053 -> 8200  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4064 -> 8154  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4077 -> 4083  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4083 -> 3924  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4092 -> 4097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4107 -> 4121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4121 -> 4138  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4121 -> 8319  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8319 -> 4188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4135 -> 4121  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
4138 -> 4146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4146 -> 4155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4155 -> 4162  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4155 -> 8353  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8353 -> 4135  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
8353 -> 4135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
4162 -> 4177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4177 -> 8353  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4188 -> 4193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
