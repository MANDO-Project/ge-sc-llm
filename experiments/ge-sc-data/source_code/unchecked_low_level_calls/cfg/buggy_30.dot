digraph  {
13 [label="2_ function name() external view returns (string memory);\n13-function_definition-3-3", method="name()", type_label=function_definition];
21 [label="3_ function symbol() external view returns (string memory);\n21-function_definition-4-4", method="symbol()", type_label=function_definition];
29 [label="4_ function granularity() external view returns (uint256);\n29-function_definition-5-5", method="granularity()", type_label=function_definition];
37 [label="5_ function totalSupply() external view returns (uint256);\n37-function_definition-6-6", method="totalSupply()", type_label=function_definition];
45 [label="6_ function balanceOf(address owner) external view returns (uint256);\n45-function_definition-7-7", method="balanceOf(address owner)", type_label=function_definition];
57 [label="7_ function send(address recipient, uint256 amount, bytes calldata data) external;\n57-function_definition-8-8", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=function_definition];
72 [label="8_ function burn(uint256 amount, bytes calldata data) external;\n72-function_definition-9-9", method="burn(uint256 amount,bytes calldata data)", type_label=function_definition];
83 [label="9_ function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n83-function_definition-10-10", method="isOperatorFor(address operator,address tokenHolder)", type_label=function_definition];
99 [label="10_ function authorizeOperator(address operator) external;\n99-function_definition-11-11", method="authorizeOperator(address operator)", type_label=function_definition];
106 [label="11_ function revokeOperator(address operator) external;\n106-function_definition-12-12", method="revokeOperator(address operator)", type_label=function_definition];
113 [label="12_ function defaultOperators() external view returns (address[] memory);\n113-function_definition-13-13", method="defaultOperators()", type_label=function_definition];
122 [label="13_ function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n122-function_definition-14-20", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
145 [label="20_ function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n145-function_definition-21-26", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
257 [label="40_ function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n257-function_definition-41-48", method="tokensReceived(address operator,address from,address to,uint amount,bytes calldata userData,bytes calldata operatorData)", type_label=function_definition];
287 [label="50_ function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n287-function_definition-51-58", method="tokensToSend(address operator,address from,address to,uint amount,bytes calldata userData,bytes calldata operatorData)", type_label=function_definition];
317 [label="60_ function totalSupply() external view returns (uint256);\n317-function_definition-61-61", method="totalSupply()", type_label=function_definition];
325 [label="61_ function balanceOf(address account) external view returns (uint256);\n325-function_definition-62-62", method="balanceOf(address account)", type_label=function_definition];
337 [label="62_ function transfer(address recipient, uint256 amount) external returns (bool);\n337-function_definition-63-63", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
352 [label="63_ function allowance(address owner, address spender) external view returns (uint256);\n352-function_definition-64-64", method="allowance(address owner,address spender)", type_label=function_definition];
368 [label="64_ function approve(address spender, uint256 amount) external returns (bool);\n368-function_definition-65-65", method="approve(address spender,uint256 amount)", type_label=function_definition];
383 [label="65_ function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n383-function_definition-66-66", method="transferFrom(address sender,address recipient,uint256 amount)", type_label=function_definition];
433 [label="70_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n433-function_definition-71-75", method="add(uint256 a,uint256 b)", type_label=function_definition];
450 [label="71_ uint256 c = a + b;\n450-new_variable-72-72", method="add(uint256 a,uint256 b)", type_label=new_variable];
458 [label="72_ require(c >= a, \"SafeMath: addition overflow\");\n458-expression_statement-73-73", method="add(uint256 a,uint256 b)", type_label=expression_statement];
468 [label="73_ return c;\n468-return-74-74", method="add(uint256 a,uint256 b)", type_label=return];
470 [label="75_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n470-function_definition-76-80", method="sub(uint256 a,uint256 b)", type_label=function_definition];
487 [label="76_ require(b <= a, \"SafeMath: subtraction overflow\");\n487-expression_statement-77-77", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
497 [label="77_ uint256 c = a - b;\n497-new_variable-78-78", method="sub(uint256 a,uint256 b)", type_label=new_variable];
505 [label="78_ return c;\n505-return-79-79", method="sub(uint256 a,uint256 b)", type_label=return];
507 [label="80_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n507-function_definition-81-88", method="mul(uint256 a,uint256 b)", type_label=function_definition];
524 [label="81_ if_a == 0\n524-if-82-84", method="mul(uint256 a,uint256 b)", type_label=if];
3849 [label="81_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
529 [label="82_ return 0;\n529-return-83-83", method="mul(uint256 a,uint256 b)", type_label=return];
531 [label="84_ uint256 c = a * b;\n531-new_variable-85-85", method="mul(uint256 a,uint256 b)", type_label=new_variable];
539 [label="85_ require(c / a == b, \"SafeMath: multiplication overflow\");\n539-expression_statement-86-86", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
551 [label="86_ return c;\n551-return-87-87", method="mul(uint256 a,uint256 b)", type_label=return];
553 [label="88_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        return c;\n    }\n553-function_definition-89-93", method="div(uint256 a,uint256 b)", type_label=function_definition];
570 [label="89_ require(b > 0, \"SafeMath: division by zero\");\n570-expression_statement-90-90", method="div(uint256 a,uint256 b)", type_label=expression_statement];
580 [label="90_ uint256 c = a / b;\n580-new_variable-91-91", method="div(uint256 a,uint256 b)", type_label=new_variable];
588 [label="91_ return c;\n588-return-92-92", method="div(uint256 a,uint256 b)", type_label=return];
590 [label="93_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n590-function_definition-94-97", method="mod(uint256 a,uint256 b)", type_label=function_definition];
607 [label="94_ require(b != 0, \"SafeMath: modulo by zero\");\n607-expression_statement-95-95", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
617 [label="95_ return a % b;\n617-return-96-96", method="mod(uint256 a,uint256 b)", type_label=return];
624 [label="99_ function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n624-function_definition-100-104", method="isContract(address account)", type_label=function_definition];
637 [label="100_ uint256 size;\n637-new_variable-101-101", method="isContract(address account)", type_label=new_variable];
652 [label="102_ return size > 0;\n652-return-103-103", method="isContract(address account)", type_label=return];
659 [label="106_ function setManager(address account, address newManager) external;\n659-function_definition-107-107", method="setManager(address account,address newManager)", type_label=function_definition];
670 [label="107_ function getManager(address account) external view returns (address);\n670-function_definition-108-108", method="getManager(address account)", type_label=function_definition];
682 [label="108_ function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n682-function_definition-109-109", method="setInterfaceImplementer(address account,bytes32 interfaceHash,address implementer)", type_label=function_definition];
697 [label="109_ function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n697-function_definition-110-110", method="getInterfaceImplementer(address account,bytes32 interfaceHash)", type_label=function_definition];
713 [label="110_ function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n713-function_definition-111-111", method="interfaceHash(string calldata interfaceName)", type_label=function_definition];
725 [label="111_ function updateERC165Cache(address account, bytes4 interfaceId) external;\n725-function_definition-112-112", method="updateERC165Cache(address account,bytes4 interfaceId)", type_label=function_definition];
736 [label="112_ function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n736-function_definition-113-113", method="implementsERC165Interface(address account,bytes4 interfaceId)", type_label=function_definition];
752 [label="113_ function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n752-function_definition-114-114", method="implementsERC165InterfaceNoCache(address account,bytes4 interfaceId)", type_label=function_definition];
811 [label="120_ IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n811-new_variable-121-121", method="", type_label=new_variable];
821 [label="121_ mapping(address => uint256) private _balances;\n821-new_variable-122-122", method="", type_label=new_variable];
828 [label="122_ uint256 private _totalSupply;\n828-new_variable-123-123", method="", type_label=new_variable];
833 [label="123_ string private _name;\n833-new_variable-124-124", method="", type_label=new_variable];
838 [label="124_ string private _symbol;\n838-new_variable-125-125", method="", type_label=new_variable];
843 [label="125_ bytes32 constant private TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n843-new_variable-126-127", method="", type_label=new_variable];
849 [label="127_ bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n849-new_variable-128-129", method="", type_label=new_variable];
855 [label="129_ address[] private _defaultOperatorsArray;\n855-new_variable-130-130", method="", type_label=new_variable];
861 [label="130_ mapping(address => bool) private _defaultOperators;\n861-new_variable-131-131", method="", type_label=new_variable];
868 [label="131_ mapping(address => mapping(address => bool)) private _operators;\n868-new_variable-132-132", method="", type_label=new_variable];
877 [label="132_ mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n877-new_variable-133-133", method="", type_label=new_variable];
886 [label="133_ mapping (address => mapping (address => uint256)) private _allowances;\n886-new_variable-134-134", method="", type_label=new_variable];
910 [label="139_ _name = name;\n910-expression_statement-140-140", method="", type_label=expression_statement];
914 [label="140_ _symbol = symbol;\n914-expression_statement-141-141", method="", type_label=expression_statement];
918 [label="141_ _defaultOperatorsArray = defaultOperators;\n918-expression_statement-142-142", method="", type_label=expression_statement];
922 [label="142_ for(i < _defaultOperatorsArray.length;;i++)\n922-for-143-145", method="", type_label=for];
4247 [label="142_ end_loop", method="", type_label=end_loop];
935 [label="142_ i++\n935-expression_statement-143-143", method="", type_label=expression_statement];
938 [label="143_ _defaultOperators[_defaultOperatorsArray[i]] = true;\n938-expression_statement-144-144", method="", type_label=expression_statement];
947 [label="145_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n947-expression_statement-146-146", method="", type_label=expression_statement];
966 [label="146_ _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n966-expression_statement-147-147", method="", type_label=expression_statement];
985 [label="148_ function name() public view returns (string memory) {\n        return _name;\n    }\n985-function_definition-149-151", method="name()", type_label=function_definition];
994 [label="149_ return _name;\n994-return-150-150", method="name()", type_label=return];
996 [label="151_ function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n996-function_definition-152-154", method="symbol()", type_label=function_definition];
1005 [label="152_ return _symbol;\n1005-return-153-153", method="symbol()", type_label=return];
1007 [label="154_ function decimals() public pure returns (uint8) {\n        return 18;\n    }\n1007-function_definition-155-157", method="decimals()", type_label=function_definition];
1016 [label="155_ return 18;\n1016-return-156-156", method="decimals()", type_label=return];
1018 [label="157_ function granularity() public view returns (uint256) {\n        return 1;\n    }\n1018-function_definition-158-160", method="granularity()", type_label=function_definition];
1027 [label="158_ return 1;\n1027-return-159-159", method="granularity()", type_label=return];
1029 [label="160_ function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n1029-function_definition-161-163", method="totalSupply()", type_label=function_definition];
1038 [label="161_ return _totalSupply;\n1038-return-162-162", method="totalSupply()", type_label=return];
1040 [label="163_ function balanceOf(address tokenHolder) public view returns (uint256) {\n        return _balances[tokenHolder];\n    }\n1040-function_definition-164-166", method="balanceOf(address tokenHolder)", type_label=function_definition];
1053 [label="164_ return _balances[tokenHolder];\n1053-return-165-165", method="balanceOf(address tokenHolder)", type_label=return];
1057 [label="166_ function send(address recipient, uint256 amount, bytes calldata data) external {\n        _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n    }\n1057-function_definition-167-169", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=function_definition];
1073 [label="167_ _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n1073-expression_statement-168-168", method="send(address recipient,uint256 amount,bytes calldata data)", type_label=expression_statement];
1096 [label="169_ function transfer(address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        address from = msg.sender;\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n        _move(from, from, recipient, amount, \"\", \"\");\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n1096-function_definition-170-177", method="transfer(address recipient,uint256 amount)", type_label=function_definition];
1112 [label="170_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n1112-expression_statement-171-171", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1124 [label="171_ address from = msg.sender;\n1124-new_variable-172-172", method="transfer(address recipient,uint256 amount)", type_label=new_variable];
1132 [label="172_ _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n1132-expression_statement-173-173", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1149 [label="173_ _move(from, from, recipient, amount, \"\", \"\");\n1149-expression_statement-174-174", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1166 [label="174_ _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n1166-expression_statement-175-175", method="transfer(address recipient,uint256 amount)", type_label=expression_statement];
1186 [label="175_ return true;\n1186-return-176-176", method="transfer(address recipient,uint256 amount)", type_label=return];
1189 [label="177_ function burn(uint256 amount, bytes calldata data) external {\n        _burn(msg.sender, msg.sender, amount, data, \"\");\n    }\n1189-function_definition-178-180", method="burn(uint256 amount,bytes calldata data)", type_label=function_definition];
1201 [label="178_ _burn(msg.sender, msg.sender, amount, data, \"\");\n1201-expression_statement-179-179", method="burn(uint256 amount,bytes calldata data)", type_label=expression_statement];
1219 [label="180_ function isOperatorFor(\n        address operator,\n        address tokenHolder\n    ) public view returns (bool) {\n        return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n    }\n1219-function_definition-181-188", method="isOperatorFor(address operator,address tokenHolder)", type_label=function_definition];
1236 [label="184_ return operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n1236-return-185-187", method="isOperatorFor(address operator,address tokenHolder)", type_label=return];
1258 [label="188_ function authorizeOperator(address operator) external {\n        require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n        if (_defaultOperators[operator]) {\n            delete _revokedDefaultOperators[msg.sender][operator];\n        } else {\n            _operators[msg.sender][operator] = true;\n        }\n        emit AuthorizedOperator(operator, msg.sender);\n    }\n1258-function_definition-189-197", method="authorizeOperator(address operator)", type_label=function_definition];
1266 [label="189_ require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n1266-expression_statement-190-190", method="authorizeOperator(address operator)", type_label=expression_statement];
1278 [label="190_ if\n1278-if-191-195", method="authorizeOperator(address operator)", type_label=if];
4603 [label="190_ end_if", method="authorizeOperator(address operator)", type_label=end_if];
1283 [label="191_ delete _revokedDefaultOperators[msg.sender][operator];\n1283-expression_statement-192-192", method="authorizeOperator(address operator)", type_label=expression_statement];
1293 [label="193_ _operators[msg.sender][operator] = true;\n1293-expression_statement-194-194", method="authorizeOperator(address operator)", type_label=expression_statement];
1312 [label="197_ function revokeOperator(address operator) external {\n        require(operator != msg.sender, \"ERC777: revoking self as operator\");\n        if (_defaultOperators[operator]) {\n            _revokedDefaultOperators[msg.sender][operator] = true;\n        } else {\n            delete _operators[msg.sender][operator];\n        }\n        emit RevokedOperator(operator, msg.sender);\n    }\n1312-function_definition-198-206", method="revokeOperator(address operator)", type_label=function_definition];
1320 [label="198_ require(operator != msg.sender, \"ERC777: revoking self as operator\");\n1320-expression_statement-199-199", method="revokeOperator(address operator)", type_label=expression_statement];
1332 [label="199_ if\n1332-if-200-204", method="revokeOperator(address operator)", type_label=if];
4657 [label="199_ end_if", method="revokeOperator(address operator)", type_label=end_if];
1337 [label="200_ _revokedDefaultOperators[msg.sender][operator] = true;\n1337-expression_statement-201-201", method="revokeOperator(address operator)", type_label=expression_statement];
1349 [label="202_ delete _operators[msg.sender][operator];\n1349-expression_statement-203-203", method="revokeOperator(address operator)", type_label=expression_statement];
1366 [label="206_ function defaultOperators() public view returns (address[] memory) {\n        return _defaultOperatorsArray;\n    }\n1366-function_definition-207-209", method="defaultOperators()", type_label=function_definition];
1376 [label="207_ return _defaultOperatorsArray;\n1376-return-208-208", method="defaultOperators()", type_label=return];
1378 [label="209_ function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    )\n    external\n    {\n        require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n        _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n    }\n1378-function_definition-210-221", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
1402 [label="218_ require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n1402-expression_statement-219-219", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1417 [label="219_ _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n1417-expression_statement-220-220", method="operatorSend(address sender,address recipient,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1437 [label="221_ function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external {\n        require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n        _burn(msg.sender, account, amount, data, operatorData);\n    }\n1437-function_definition-222-225", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=function_definition];
1457 [label="222_ require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n1457-expression_statement-223-223", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1472 [label="223_ _burn(msg.sender, account, amount, data, operatorData);\n1472-expression_statement-224-224", method="operatorBurn(address account,uint256 amount,bytes calldata data,bytes calldata operatorData)", type_label=expression_statement];
1487 [label="225_ function allowance(address holder, address spender) public view returns (uint256) {\n        return _allowances[holder][spender];\n    }\n1487-function_definition-226-228", method="allowance(address holder,address spender)", type_label=function_definition];
1504 [label="226_ return _allowances[holder][spender];\n1504-return-227-227", method="allowance(address holder,address spender)", type_label=return];
1510 [label="228_ function approve(address spender, uint256 value) external returns (bool) {\n        address holder = msg.sender;\n        _approve(holder, spender, value);\n        return true;\n    }\n1510-function_definition-229-233", method="approve(address spender,uint256 value)", type_label=function_definition];
1526 [label="229_ address holder = msg.sender;\n1526-new_variable-230-230", method="approve(address spender,uint256 value)", type_label=new_variable];
1534 [label="230_ _approve(holder, spender, value);\n1534-expression_statement-231-231", method="approve(address spender,uint256 value)", type_label=expression_statement];
1543 [label="231_ return true;\n1543-return-232-232", method="approve(address spender,uint256 value)", type_label=return];
1546 [label="233_ function transferFrom(address holder, address recipient, uint256 amount) external returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\n        address spender = msg.sender;\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n        _move(spender, holder, recipient, amount, \"\", \"\");\n        _approve(holder, spender, _allowances[holder][spender].sub(amount));\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n        return true;\n    }\n1546-function_definition-234-243", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=function_definition];
1566 [label="234_ require(recipient != address(0), \"ERC777: transfer to the zero address\");\n1566-expression_statement-235-235", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1578 [label="235_ require(holder != address(0), \"ERC777: transfer from the zero address\");\n1578-expression_statement-236-236", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1590 [label="236_ address spender = msg.sender;\n1590-new_variable-237-237", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=new_variable];
1598 [label="237_ _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n1598-expression_statement-238-238", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1615 [label="238_ _move(spender, holder, recipient, amount, \"\", \"\");\n1615-expression_statement-239-239", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1632 [label="239_ _approve(holder, spender, _allowances[holder][spender].sub(amount));\n1632-expression_statement-240-240", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1650 [label="240_ _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n1650-expression_statement-241-241", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=expression_statement];
1670 [label="241_ return true;\n1670-return-242-242", method="transferFrom(address holder,address recipient,uint256 amount)", type_label=return];
1673 [label="243_ function bug_unchk_send18() payable public{\n      msg.sender.transfer(1 ether);}\n1673-function_definition-244-245", method="bug_unchk_send18()", type_label=function_definition];
1678 [label="244_ msg.sender.transfer(1 ether);\n1678-expression_statement-245-245", method="bug_unchk_send18()", type_label=expression_statement];
1688 [label="245_ function _mint(\n        address operator,\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n    internal\n    {\n        require(account != address(0), \"ERC777: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n1688-function_definition-246-261", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
1712 [label="254_ require(account != address(0), \"ERC777: mint to the zero address\");\n1712-expression_statement-255-255", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
1724 [label="255_ _totalSupply = _totalSupply.add(amount);\n1724-expression_statement-256-256", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
1733 [label="256_ _balances[account] = _balances[account].add(amount);\n1733-expression_statement-257-257", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
1746 [label="257_ _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n1746-expression_statement-258-258", method="_mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
1788 [label="261_ function bug_unchk_send29() payable public{\n      msg.sender.transfer(1 ether);}\n1788-function_definition-262-263", method="bug_unchk_send29()", type_label=function_definition];
1793 [label="262_ msg.sender.transfer(1 ether);\n1793-expression_statement-263-263", method="bug_unchk_send29()", type_label=expression_statement];
1803 [label="263_ function _send(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        require(from != address(0), \"ERC777: send from the zero address\");\n        require(to != address(0), \"ERC777: send to the zero address\");\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n        _move(operator, from, to, amount, userData, operatorData);\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n1803-function_definition-264-280", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=function_definition];
1835 [label="274_ require(from != address(0), \"ERC777: send from the zero address\");\n1835-expression_statement-275-275", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
1847 [label="275_ require(to != address(0), \"ERC777: send to the zero address\");\n1847-expression_statement-276-276", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
1859 [label="276_ _callTokensToSend(operator, from, to, amount, userData, operatorData);\n1859-expression_statement-277-277", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
1874 [label="277_ _move(operator, from, to, amount, userData, operatorData);\n1874-expression_statement-278-278", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
1889 [label="278_ _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n1889-expression_statement-279-279", method="_send(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
1906 [label="280_ function bug_unchk_send6() payable public{\n      msg.sender.transfer(1 ether);}\n1906-function_definition-281-282", method="bug_unchk_send6()", type_label=function_definition];
1911 [label="281_ msg.sender.transfer(1 ether);\n1911-expression_statement-282-282", method="bug_unchk_send6()", type_label=expression_statement];
1921 [label="282_ function _burn(\n        address operator,\n        address from,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    )\n        private\n    {\n        require(from != address(0), \"ERC777: burn from the zero address\");\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[from] = _balances[from].sub(amount);\n        emit Burned(operator, from, amount, data, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n1921-function_definition-283-298", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=function_definition];
1945 [label="291_ require(from != address(0), \"ERC777: burn from the zero address\");\n1945-expression_statement-292-292", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
1957 [label="292_ _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n1957-expression_statement-293-293", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
1974 [label="293_ _totalSupply = _totalSupply.sub(amount);\n1974-expression_statement-294-294", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
1983 [label="294_ _balances[from] = _balances[from].sub(amount);\n1983-expression_statement-295-295", method="_burn(address operator,address from,uint256 amount,bytes memory data,bytes memory operatorData)", type_label=expression_statement];
2018 [label="298_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n2018-function_definition-299-300", method="bug_unchk_send16()", type_label=function_definition];
2023 [label="299_ msg.sender.transfer(1 ether);\n2023-expression_statement-300-300", method="bug_unchk_send16()", type_label=expression_statement];
2033 [label="300_ function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount);\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n2033-function_definition-301-315", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2061 [label="310_ _balances[from] = _balances[from].sub(amount);\n2061-expression_statement-311-311", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2074 [label="311_ _balances[to] = _balances[to].add(amount);\n2074-expression_statement-312-312", method="_move(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2109 [label="315_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n2109-function_definition-316-317", method="bug_unchk_send24()", type_label=function_definition];
2114 [label="316_ msg.sender.transfer(1 ether);\n2114-expression_statement-317-317", method="bug_unchk_send24()", type_label=expression_statement];
2124 [label="317_ function _approve(address holder, address spender, uint256 value) private {\n        require(spender != address(0), \"ERC777: approve to the zero address\");\n        _allowances[holder][spender] = value;\n        emit Approval(holder, spender, value);\n    }\n2124-function_definition-318-322", method="_approve(address holder,address spender,uint256 value)", type_label=function_definition];
2140 [label="318_ require(spender != address(0), \"ERC777: approve to the zero address\");\n2140-expression_statement-319-319", method="_approve(address holder,address spender,uint256 value)", type_label=expression_statement];
2152 [label="319_ _allowances[holder][spender] = value;\n2152-expression_statement-320-320", method="_approve(address holder,address spender,uint256 value)", type_label=expression_statement];
2168 [label="322_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n2168-function_definition-323-324", method="bug_unchk_send5()", type_label=function_definition];
2173 [label="323_ msg.sender.transfer(1 ether);\n2173-expression_statement-324-324", method="bug_unchk_send5()", type_label=expression_statement];
2183 [label="324_ function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n2183-function_definition-325-339", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
2211 [label="334_ address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n2211-new_variable-335-335", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=new_variable];
2224 [label="335_ if_implementer != address(0)\n2224-if-336-338", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=if];
5549 [label="335_ end_if", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=end_if];
2231 [label="336_ IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n2231-expression_statement-337-337", method="_callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
2251 [label="339_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n2251-function_definition-340-341", method="bug_unchk_send15()", type_label=function_definition];
2256 [label="340_ msg.sender.transfer(1 ether);\n2256-expression_statement-341-341", method="bug_unchk_send15()", type_label=expression_statement];
2266 [label="341_ function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n        }\n    }\n2266-function_definition-342-359", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=function_definition];
2298 [label="352_ address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n2298-new_variable-353-353", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=new_variable];
2311 [label="353_ if_implementer != address(0)\n2311-if-354-358", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=if];
5636 [label="353_ end_if", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=end_if];
2318 [label="354_ IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n2318-expression_statement-355-355", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2338 [label="355_ if\n2338-if-356-358", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=if];
2341 [label="356_ require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n2341-expression_statement-357-357", method="_callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck)", type_label=expression_statement];
2353 [label="359_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n2353-function_definition-360-361", method="bug_unchk_send28()", type_label=function_definition];
2358 [label="360_ msg.sender.transfer(1 ether);\n2358-expression_statement-361-361", method="bug_unchk_send28()", type_label=expression_statement];
2371 [label="363_ struct Role {\n        mapping (address => bool) bearer;\n    }\n2371-expression_statement-364-366", method="Role()", type_label=expression_statement];
2379 [label="366_ function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n2379-function_definition-367-370", method="add(Role storage role,address account)", type_label=function_definition];
2392 [label="367_ require(!has(role, account), \"Roles: account already has role\");\n2392-expression_statement-368-368", method="add(Role storage role,address account)", type_label=expression_statement];
2406 [label="368_ role.bearer[account] = true;\n2406-expression_statement-369-369", method="add(Role storage role,address account)", type_label=expression_statement];
2415 [label="370_ function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n2415-function_definition-371-374", method="remove(Role storage role,address account)", type_label=function_definition];
2428 [label="371_ require(has(role, account), \"Roles: account does not have role\");\n2428-expression_statement-372-372", method="remove(Role storage role,address account)", type_label=expression_statement];
2441 [label="372_ role.bearer[account] = false;\n2441-expression_statement-373-373", method="remove(Role storage role,address account)", type_label=expression_statement];
2450 [label="374_ function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n2450-function_definition-375-378", method="has(Role storage role,address account)", type_label=function_definition];
2468 [label="375_ require(account != address(0), \"Roles: account is the zero address\");\n2468-expression_statement-376-376", method="has(Role storage role,address account)", type_label=expression_statement];
2480 [label="376_ return role.bearer[account];\n2480-return-377-377", method="has(Role storage role,address account)", type_label=return];
2496 [label="381_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n2496-function_definition-382-383", method="bug_unchk_send14()", type_label=function_definition];
2501 [label="382_ msg.sender.transfer(1 ether);\n2501-expression_statement-383-383", method="bug_unchk_send14()", type_label=expression_statement];
2517 [label="384_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n2517-function_definition-385-386", method="bug_unchk_send30()", type_label=function_definition];
2522 [label="385_ msg.sender.transfer(1 ether);\n2522-expression_statement-386-386", method="bug_unchk_send30()", type_label=expression_statement];
2538 [label="387_ Roles.Role private _minters;\n2538-new_variable-388-388", method="", type_label=new_variable];
2547 [label="389_ _addMinter(msg.sender);\n2547-expression_statement-390-390", method="", type_label=expression_statement];
2554 [label="391_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n2554-function_definition-392-393", method="bug_unchk_send21()", type_label=function_definition];
2559 [label="392_ msg.sender.transfer(1 ether);\n2559-expression_statement-393-393", method="bug_unchk_send21()", type_label=expression_statement];
2569 [label="393_ modifier onlyMinter() {\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n2569-expression_statement-394-397", method="", type_label=expression_statement];
2572 [label="394_ require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n2572-expression_statement-395-395", method="", type_label=expression_statement];
2585 [label="395_ _;\n2585-expression_statement-396-396", method="", type_label=expression_statement];
2587 [label="397_ function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n2587-function_definition-398-400", method="isMinter(address account)", type_label=function_definition];
2600 [label="398_ return _minters.has(account);\n2600-return-399-399", method="isMinter(address account)", type_label=return];
2607 [label="400_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n2607-function_definition-401-402", method="bug_unchk_send10()", type_label=function_definition];
2612 [label="401_ msg.sender.transfer(1 ether);\n2612-expression_statement-402-402", method="bug_unchk_send10()", type_label=expression_statement];
2622 [label="402_ function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n2622-function_definition-403-405", method="addMinter(address account)", type_label=function_definition];
2629 [label="402_ onlyMinter\n2629-expression_statement-403-403", method="addMinter(address account)", type_label=expression_statement];
2632 [label="403_ _addMinter(account);\n2632-expression_statement-404-404", method="addMinter(address account)", type_label=expression_statement];
2637 [label="405_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n2637-function_definition-406-407", method="bug_unchk_send22()", type_label=function_definition];
2642 [label="406_ msg.sender.transfer(1 ether);\n2642-expression_statement-407-407", method="bug_unchk_send22()", type_label=expression_statement];
2652 [label="407_ function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n2652-function_definition-408-410", method="renounceMinter()", type_label=function_definition];
2656 [label="408_ _removeMinter(msg.sender);\n2656-expression_statement-409-409", method="renounceMinter()", type_label=expression_statement];
2663 [label="410_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n2663-function_definition-411-412", method="bug_unchk_send12()", type_label=function_definition];
2668 [label="411_ msg.sender.transfer(1 ether);\n2668-expression_statement-412-412", method="bug_unchk_send12()", type_label=expression_statement];
2678 [label="412_ function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n2678-function_definition-413-416", method="_addMinter(address account)", type_label=function_definition];
2686 [label="413_ _minters.add(account);\n2686-expression_statement-414-414", method="_addMinter(address account)", type_label=expression_statement];
2697 [label="416_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n2697-function_definition-417-418", method="bug_unchk_send11()", type_label=function_definition];
2702 [label="417_ msg.sender.transfer(1 ether);\n2702-expression_statement-418-418", method="bug_unchk_send11()", type_label=expression_statement];
2712 [label="418_ function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n2712-function_definition-419-422", method="_removeMinter(address account)", type_label=function_definition];
2720 [label="419_ _minters.remove(account);\n2720-expression_statement-420-420", method="_removeMinter(address account)", type_label=expression_statement];
2731 [label="422_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n2731-function_definition-423-424", method="bug_unchk_send1()", type_label=function_definition];
2736 [label="423_ msg.sender.transfer(1 ether);\n2736-expression_statement-424-424", method="bug_unchk_send1()", type_label=expression_statement];
2756 [label="427_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n2756-function_definition-428-429", method="bug_unchk_send8()", type_label=function_definition];
2761 [label="428_ msg.sender.transfer(1 ether);\n2761-expression_statement-429-429", method="bug_unchk_send8()", type_label=expression_statement];
2777 [label="430_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n2777-function_definition-431-432", method="bug_unchk_send27()", type_label=function_definition];
2782 [label="431_ msg.sender.transfer(1 ether);\n2782-expression_statement-432-432", method="bug_unchk_send27()", type_label=expression_statement];
2798 [label="433_ Roles.Role private _pausers;\n2798-new_variable-434-434", method="", type_label=new_variable];
2807 [label="435_ _addPauser(msg.sender);\n2807-expression_statement-436-436", method="", type_label=expression_statement];
2814 [label="437_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n2814-function_definition-438-439", method="bug_unchk_send2()", type_label=function_definition];
2819 [label="438_ msg.sender.transfer(1 ether);\n2819-expression_statement-439-439", method="bug_unchk_send2()", type_label=expression_statement];
2829 [label="439_ modifier onlyPauser() {\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n2829-expression_statement-440-443", method="", type_label=expression_statement];
2832 [label="440_ require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n2832-expression_statement-441-441", method="", type_label=expression_statement];
2845 [label="441_ _;\n2845-expression_statement-442-442", method="", type_label=expression_statement];
2847 [label="443_ function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n2847-function_definition-444-446", method="isPauser(address account)", type_label=function_definition];
2860 [label="444_ return _pausers.has(account);\n2860-return-445-445", method="isPauser(address account)", type_label=return];
2867 [label="446_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n2867-function_definition-447-448", method="bug_unchk_send17()", type_label=function_definition];
2872 [label="447_ msg.sender.transfer(1 ether);\n2872-expression_statement-448-448", method="bug_unchk_send17()", type_label=expression_statement];
2882 [label="448_ function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n2882-function_definition-449-451", method="addPauser(address account)", type_label=function_definition];
2889 [label="448_ onlyPauser\n2889-expression_statement-449-449", method="addPauser(address account)", type_label=expression_statement];
2892 [label="449_ _addPauser(account);\n2892-expression_statement-450-450", method="addPauser(address account)", type_label=expression_statement];
2897 [label="451_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n2897-function_definition-452-453", method="bug_unchk_send3()", type_label=function_definition];
2902 [label="452_ msg.sender.transfer(1 ether);\n2902-expression_statement-453-453", method="bug_unchk_send3()", type_label=expression_statement];
2912 [label="453_ function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n2912-function_definition-454-456", method="renouncePauser()", type_label=function_definition];
2916 [label="454_ _removePauser(msg.sender);\n2916-expression_statement-455-455", method="renouncePauser()", type_label=expression_statement];
2923 [label="456_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n2923-function_definition-457-458", method="bug_unchk_send9()", type_label=function_definition];
2928 [label="457_ msg.sender.transfer(1 ether);\n2928-expression_statement-458-458", method="bug_unchk_send9()", type_label=expression_statement];
2938 [label="458_ function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n2938-function_definition-459-462", method="_addPauser(address account)", type_label=function_definition];
2946 [label="459_ _pausers.add(account);\n2946-expression_statement-460-460", method="_addPauser(address account)", type_label=expression_statement];
2957 [label="462_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n2957-function_definition-463-464", method="bug_unchk_send25()", type_label=function_definition];
2962 [label="463_ msg.sender.transfer(1 ether);\n2962-expression_statement-464-464", method="bug_unchk_send25()", type_label=expression_statement];
2972 [label="464_ function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n2972-function_definition-465-468", method="_removePauser(address account)", type_label=function_definition];
2980 [label="465_ _pausers.remove(account);\n2980-expression_statement-466-466", method="_removePauser(address account)", type_label=expression_statement];
2991 [label="468_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n2991-function_definition-469-470", method="bug_unchk_send19()", type_label=function_definition];
2996 [label="469_ msg.sender.transfer(1 ether);\n2996-expression_statement-470-470", method="bug_unchk_send19()", type_label=expression_statement];
3012 [label="472_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n3012-function_definition-473-474", method="bug_unchk_send31()", type_label=function_definition];
3017 [label="473_ msg.sender.transfer(1 ether);\n3017-expression_statement-474-474", method="bug_unchk_send31()", type_label=expression_statement];
3033 [label="475_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n3033-function_definition-476-477", method="bug_unchk_send13()", type_label=function_definition];
3038 [label="476_ msg.sender.transfer(1 ether);\n3038-expression_statement-477-477", method="bug_unchk_send13()", type_label=expression_statement];
3054 [label="478_ bool private _paused;\n3054-new_variable-479-479", method="", type_label=new_variable];
3061 [label="480_ _paused = false;\n3061-expression_statement-481-481", method="", type_label=expression_statement];
3066 [label="482_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n3066-function_definition-483-484", method="bug_unchk_send26()", type_label=function_definition];
3071 [label="483_ msg.sender.transfer(1 ether);\n3071-expression_statement-484-484", method="bug_unchk_send26()", type_label=expression_statement];
3081 [label="484_ function paused() public view returns (bool) {\n        return _paused;\n    }\n3081-function_definition-485-487", method="paused()", type_label=function_definition];
3090 [label="485_ return _paused;\n3090-return-486-486", method="paused()", type_label=return];
3092 [label="487_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n3092-function_definition-488-489", method="bug_unchk_send20()", type_label=function_definition];
3097 [label="488_ msg.sender.transfer(1 ether);\n3097-expression_statement-489-489", method="bug_unchk_send20()", type_label=expression_statement];
3107 [label="489_ modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n3107-expression_statement-490-493", method="", type_label=expression_statement];
3110 [label="490_ require(!_paused, \"Pausable: paused\");\n3110-expression_statement-491-491", method="", type_label=expression_statement];
3119 [label="491_ _;\n3119-expression_statement-492-492", method="", type_label=expression_statement];
3121 [label="493_ modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n3121-expression_statement-494-497", method="", type_label=expression_statement];
3124 [label="494_ require(_paused, \"Pausable: not paused\");\n3124-expression_statement-495-495", method="", type_label=expression_statement];
3132 [label="495_ _;\n3132-expression_statement-496-496", method="", type_label=expression_statement];
3134 [label="497_ function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n3134-function_definition-498-501", method="pause()", type_label=function_definition];
3137 [label="497_ onlyPauser\n3137-expression_statement-498-498", method="pause()", type_label=expression_statement];
3139 [label="497_ whenNotPaused\n3139-expression_statement-498-498", method="pause()", type_label=expression_statement];
3142 [label="498_ _paused = true;\n3142-expression_statement-499-499", method="pause()", type_label=expression_statement];
3153 [label="501_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n3153-function_definition-502-503", method="bug_unchk_send32()", type_label=function_definition];
3158 [label="502_ msg.sender.transfer(1 ether);\n3158-expression_statement-503-503", method="bug_unchk_send32()", type_label=expression_statement];
3168 [label="503_ function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n3168-function_definition-504-507", method="unpause()", type_label=function_definition];
3171 [label="503_ onlyPauser\n3171-expression_statement-504-504", method="unpause()", type_label=expression_statement];
3173 [label="503_ whenPaused\n3173-expression_statement-504-504", method="unpause()", type_label=expression_statement];
3176 [label="504_ _paused = false;\n3176-expression_statement-505-505", method="unpause()", type_label=expression_statement];
3187 [label="507_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n3187-function_definition-508-509", method="bug_unchk_send4()", type_label=function_definition];
3192 [label="508_ msg.sender.transfer(1 ether);\n3192-expression_statement-509-509", method="bug_unchk_send4()", type_label=expression_statement];
3224 [label="515_ ERC777(\"SKYBIT\", \"SKYBIT\", defaultOperators)\n3224-expression_statement-516-516", method="", type_label=expression_statement];
3235 [label="517_ _mint(msg.sender, msg.sender, initialSupply, \"\", \"\");\n3235-expression_statement-518-518", method="", type_label=expression_statement];
3254 [label="519_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n3254-function_definition-520-521", method="bug_unchk_send7()", type_label=function_definition];
3259 [label="520_ msg.sender.transfer(1 ether);\n3259-expression_statement-521-521", method="bug_unchk_send7()", type_label=expression_statement];
3269 [label="521_ function mint(address operator, address account, uint256 amount, bytes memory userData, bytes memory operatorData) public onlyMinter returns (bool) {\n        _mint(operator, account, amount, userData, operatorData);\n        return true;\n    }\n3269-function_definition-522-525", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=function_definition];
3292 [label="521_ onlyMinter\n3292-expression_statement-522-522", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
3299 [label="522_ _mint(operator, account, amount, userData, operatorData);\n3299-expression_statement-523-523", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=expression_statement];
3312 [label="523_ return true;\n3312-return-524-524", method="mint(address operator,address account,uint256 amount,bytes memory userData,bytes memory operatorData)", type_label=return];
3315 [label="525_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n3315-function_definition-526-527", method="bug_unchk_send23()", type_label=function_definition];
3320 [label="526_ msg.sender.transfer(1 ether);\n3320-expression_statement-527-527", method="bug_unchk_send23()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1304;
1358;
433 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
450 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
470 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
507 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 529  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
524 -> 3849  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3849 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
529 -> 3849  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
529 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
531 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
539 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
553 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 588  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
590 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
624 -> 637  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
811 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 843  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
843 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
849 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 914  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
914 -> 918  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
918 -> 922  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
922 -> 938  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
922 -> 4247  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4247 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 922  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
938 -> 935  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
947 -> 966  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
996 -> 1005  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1005 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1007 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1018 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1029 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1040 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1053 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1057 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1112 -> 1124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1124 -> 1132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1132 -> 1149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1149 -> 1166  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1189 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1219 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1258 -> 1266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1266 -> 1278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1278 -> 1283  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1278 -> 1293  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4603 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 4603  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1293 -> 4603  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1312 -> 1320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1320 -> 1332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 1337  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1332 -> 1349  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4657 -> 1358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1337 -> 4657  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1349 -> 4657  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1366 -> 1376  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1378 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 1417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1437 -> 1457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1457 -> 1472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1487 -> 1504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1504 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1510 -> 1526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1526 -> 1534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1534 -> 1543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1543 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1546 -> 1566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1566 -> 1578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1578 -> 1590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1590 -> 1598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1598 -> 1615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1615 -> 1632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1632 -> 1650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1650 -> 1670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1670 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1673 -> 1678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1688 -> 1712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1712 -> 1724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1724 -> 1733  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1733 -> 1746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1788 -> 1793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1803 -> 1835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1835 -> 1847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1847 -> 1859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1859 -> 1874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1874 -> 1889  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1906 -> 1911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1921 -> 1945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1945 -> 1957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1957 -> 1974  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1974 -> 1983  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2018 -> 2023  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2033 -> 2061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2061 -> 2074  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2109 -> 2114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2124 -> 2140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2140 -> 2152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2168 -> 2173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2183 -> 2211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2211 -> 2224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2224 -> 2231  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2224 -> 5549  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5549 -> 2251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2231 -> 5549  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2251 -> 2256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2266 -> 2298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2298 -> 2311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2311 -> 2318  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2311 -> 2338  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5636 -> 2353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2318 -> 5636  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2338 -> 2341  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2338 -> 5636  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2341 -> 5636  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2353 -> 2358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2379 -> 2392  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2392 -> 2406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2415 -> 2428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2428 -> 2441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2450 -> 2468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2468 -> 2480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2480 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2496 -> 2501  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2517 -> 2522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2554 -> 2559  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2572 -> 2585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2587 -> 2600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2600 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2607 -> 2612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2622 -> 2632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2637 -> 2642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2652 -> 2656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2663 -> 2668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2678 -> 2686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2697 -> 2702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2712 -> 2720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2731 -> 2736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2756 -> 2761  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2777 -> 2782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2814 -> 2819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2832 -> 2845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2847 -> 2860  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2860 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2867 -> 2872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2882 -> 2892  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2897 -> 2902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2912 -> 2916  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2923 -> 2928  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2938 -> 2946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2957 -> 2962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2972 -> 2980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2991 -> 2996  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3012 -> 3017  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3033 -> 3038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3066 -> 3071  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3081 -> 3090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3090 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3092 -> 3097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3107 -> 3121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3110 -> 3119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3124 -> 3132  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3134 -> 3142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3137 -> 3139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3153 -> 3158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3168 -> 3176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3171 -> 3173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3187 -> 3192  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3254 -> 3259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3269 -> 3299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3299 -> 3312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3312 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3315 -> 3320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
