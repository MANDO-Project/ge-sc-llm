digraph  {
13 [label="2_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n13-function_definition-3-7", method="sub(uint256 a,uint256 b)", type_label=function_definition];
30 [label="3_ require(b <= a, \"SafeMath: subtraction overflow\");\n30-expression_statement-4-4", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
40 [label="4_ uint256 c = a - b;\n40-new_variable-5-5", method="sub(uint256 a,uint256 b)", type_label=new_variable];
48 [label="5_ return c;\n48-return-6-6", method="sub(uint256 a,uint256 b)", type_label=return];
50 [label="7_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n50-function_definition-8-12", method="add(uint256 a,uint256 b)", type_label=function_definition];
67 [label="8_ uint256 c = a + b;\n67-new_variable-9-9", method="add(uint256 a,uint256 b)", type_label=new_variable];
75 [label="9_ require(c >= a, \"SafeMath: addition overflow\");\n75-expression_statement-10-10", method="add(uint256 a,uint256 b)", type_label=expression_statement];
85 [label="10_ return c;\n85-return-11-11", method="add(uint256 a,uint256 b)", type_label=return];
90 [label="14_ function balanceOf(address _owner) public view returns (uint256 value);\n90-function_definition-15-15", method="balanceOf(address _owner)", type_label=function_definition];
103 [label="15_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n103-function_definition-16-17", method="bug_unchk_send25()", type_label=function_definition];
108 [label="16_ msg.sender.transfer(1 ether);\n108-expression_statement-17-17", method="bug_unchk_send25()", type_label=expression_statement];
118 [label="17_ function transfer(address _to, uint256 _value) public returns (bool success);\n118-function_definition-18-18", method="transfer(address _to,uint256 _value)", type_label=function_definition];
134 [label="18_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n134-function_definition-19-20", method="bug_unchk_send19()", type_label=function_definition];
139 [label="19_ msg.sender.transfer(1 ether);\n139-expression_statement-20-20", method="bug_unchk_send19()", type_label=expression_statement];
149 [label="20_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n149-function_definition-21-21", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
169 [label="21_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n169-function_definition-22-23", method="bug_unchk_send26()", type_label=function_definition];
174 [label="22_ msg.sender.transfer(1 ether);\n174-expression_statement-23-23", method="bug_unchk_send26()", type_label=expression_statement];
184 [label="23_ function approve(address _spender, uint256 _value) public returns (bool success);\n184-function_definition-24-24", method="approve(address _spender,uint256 _value)", type_label=function_definition];
200 [label="24_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n200-function_definition-25-26", method="bug_unchk_send20()", type_label=function_definition];
205 [label="25_ msg.sender.transfer(1 ether);\n205-expression_statement-26-26", method="bug_unchk_send20()", type_label=expression_statement];
215 [label="26_ function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n215-function_definition-27-27", method="allowance(address _owner,address _spender)", type_label=function_definition];
232 [label="27_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n232-function_definition-28-29", method="bug_unchk_send32()", type_label=function_definition];
237 [label="28_ msg.sender.transfer(1 ether);\n237-expression_statement-29-29", method="bug_unchk_send32()", type_label=expression_statement];
258 [label="32_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n258-function_definition-33-34", method="bug_unchk_send12()", type_label=function_definition];
263 [label="33_ msg.sender.transfer(1 ether);\n263-expression_statement-34-34", method="bug_unchk_send12()", type_label=expression_statement];
273 [label="34_ uint256 public totalSupply;\n273-new_variable-35-35", method="", type_label=new_variable];
278 [label="35_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n278-function_definition-36-37", method="bug_unchk_send11()", type_label=function_definition];
283 [label="36_ msg.sender.transfer(1 ether);\n283-expression_statement-37-37", method="bug_unchk_send11()", type_label=expression_statement];
293 [label="37_ mapping (address => uint256) balances;\n293-new_variable-38-38", method="", type_label=new_variable];
299 [label="38_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n299-function_definition-39-40", method="bug_unchk_send1()", type_label=function_definition];
304 [label="39_ msg.sender.transfer(1 ether);\n304-expression_statement-40-40", method="bug_unchk_send1()", type_label=expression_statement];
314 [label="40_ mapping (address => mapping (address => uint256)) allowed;\n314-new_variable-41-41", method="", type_label=new_variable];
322 [label="41_ function balanceOf(address _owner) public view returns (uint256 value) {\n        return balances[_owner];\n    }\n322-function_definition-42-44", method="balanceOf(address _owner)", type_label=function_definition];
336 [label="42_ return balances[_owner];\n336-return-43-43", method="balanceOf(address _owner)", type_label=return];
340 [label="44_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n340-function_definition-45-46", method="bug_unchk_send4()", type_label=function_definition];
345 [label="45_ msg.sender.transfer(1 ether);\n345-expression_statement-46-46", method="bug_unchk_send4()", type_label=expression_statement];
355 [label="46_ function transfer(address _to, uint256 _value) public returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n355-function_definition-47-52", method="transfer(address _to,uint256 _value)", type_label=function_definition];
372 [label="47_ balances[msg.sender] = balances[msg.sender].sub(_value);\n372-expression_statement-48-48", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
389 [label="48_ balances[_to] = balances[_to].add(_value);\n389-expression_statement-49-49", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
412 [label="50_ return true;\n412-return-51-51", method="transfer(address _to,uint256 _value)", type_label=return];
415 [label="52_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n415-function_definition-53-54", method="bug_unchk_send7()", type_label=function_definition];
420 [label="53_ msg.sender.transfer(1 ether);\n420-expression_statement-54-54", method="bug_unchk_send7()", type_label=expression_statement];
430 [label="54_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n430-function_definition-55-61", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
451 [label="55_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n451-expression_statement-56-56", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
472 [label="56_ balances[_from] = balances[_from].sub(_value);\n472-expression_statement-57-57", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
485 [label="57_ balances[_to] = balances[_to].add(_value);\n485-expression_statement-58-58", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
506 [label="59_ return true;\n506-return-60-60", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
509 [label="61_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n509-function_definition-62-63", method="bug_unchk_send23()", type_label=function_definition];
514 [label="62_ msg.sender.transfer(1 ether);\n514-expression_statement-63-63", method="bug_unchk_send23()", type_label=expression_statement];
524 [label="63_ function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n524-function_definition-64-68", method="approve(address _spender,uint256 _value)", type_label=function_definition];
541 [label="64_ allowed[msg.sender][_spender] = _value;\n541-expression_statement-65-65", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
561 [label="66_ return true;\n561-return-67-67", method="approve(address _spender,uint256 _value)", type_label=return];
564 [label="68_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n564-function_definition-69-70", method="bug_unchk_send14()", type_label=function_definition];
569 [label="69_ msg.sender.transfer(1 ether);\n569-expression_statement-70-70", method="bug_unchk_send14()", type_label=expression_statement];
579 [label="70_ function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n579-function_definition-71-73", method="allowance(address _owner,address _spender)", type_label=function_definition];
597 [label="71_ return allowed[_owner][_spender];\n597-return-72-72", method="allowance(address _owner,address _spender)", type_label=return];
603 [label="73_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n603-function_definition-74-75", method="bug_unchk_send30()", type_label=function_definition];
608 [label="74_ msg.sender.transfer(1 ether);\n608-expression_statement-75-75", method="bug_unchk_send30()", type_label=expression_statement];
618 [label="75_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n618-function_definition-76-77", method="bug_unchk_send31()", type_label=function_definition];
623 [label="76_ msg.sender.transfer(1 ether);\n623-expression_statement-77-77", method="bug_unchk_send31()", type_label=expression_statement];
647 [label="78_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n647-function_definition-79-80", method="bug_unchk_send13()", type_label=function_definition];
652 [label="79_ msg.sender.transfer(1 ether);\n652-expression_statement-80-80", method="bug_unchk_send13()", type_label=expression_statement];
682 [label="83_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n682-function_definition-84-85", method="bug_unchk_send2()", type_label=function_definition];
687 [label="84_ msg.sender.transfer(1 ether);\n687-expression_statement-85-85", method="bug_unchk_send2()", type_label=expression_statement];
697 [label="85_ string public name = 'Electronic Gram';\n697-new_variable-86-86", method="", type_label=new_variable];
704 [label="86_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n704-function_definition-87-88", method="bug_unchk_send17()", type_label=function_definition];
709 [label="87_ msg.sender.transfer(1 ether);\n709-expression_statement-88-88", method="bug_unchk_send17()", type_label=expression_statement];
719 [label="88_ uint8 public decimals = 3;\n719-new_variable-89-89", method="", type_label=new_variable];
725 [label="89_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n725-function_definition-90-91", method="bug_unchk_send3()", type_label=function_definition];
730 [label="90_ msg.sender.transfer(1 ether);\n730-expression_statement-91-91", method="bug_unchk_send3()", type_label=expression_statement];
740 [label="91_ string public symbol = 'eGram';\n740-new_variable-92-92", method="", type_label=new_variable];
747 [label="92_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n747-function_definition-93-94", method="bug_unchk_send9()", type_label=function_definition];
752 [label="93_ msg.sender.transfer(1 ether);\n752-expression_statement-94-94", method="bug_unchk_send9()", type_label=expression_statement];
762 [label="94_ string public version = '2';\n762-new_variable-95-95", method="", type_label=new_variable];
771 [label="96_ address initialOwner = 0xac775cD446889ac167da466692449ece5439fc12;\n771-new_variable-97-97", method="", type_label=new_variable];
777 [label="97_ totalSupply = 180000000 * (10**uint256(decimals));\n777-expression_statement-98-98", method="", type_label=expression_statement];
788 [label="98_ balances[initialOwner] = totalSupply;\n788-expression_statement-99-99", method="", type_label=expression_statement];
806 [label="101_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n806-function_definition-102-103", method="bug_unchk_send8()", type_label=function_definition];
811 [label="102_ msg.sender.transfer(1 ether);\n811-expression_statement-103-103", method="bug_unchk_send8()", type_label=expression_statement];
826 [label="106_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n826-function_definition-107-108", method="bug_unchk_send27()", type_label=function_definition];
831 [label="107_ msg.sender.transfer(1 ether);\n831-expression_statement-108-108", method="bug_unchk_send27()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
40 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
50 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
103 -> 108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
232 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
258 -> 263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
340 -> 345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
372 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
415 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 485  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
506 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
509 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
564 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
603 -> 608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 652  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
682 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
704 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
725 -> 730  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
747 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
771 -> 777  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
777 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 811  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
826 -> 831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
