digraph  {
13 [label="2_ function totalSupply() constant returns (uint supply);\n13-function_definition-3-3", method="totalSupply()", type_label=function_definition];
15 [label="2_ constant\n15-expression_statement-3-3", method="totalSupply()", type_label=expression_statement];
22 [label="3_ function balanceOf( address who ) constant returns (uint value);\n22-function_definition-4-4", method="balanceOf(address who)", type_label=function_definition];
28 [label="3_ constant\n28-expression_statement-4-4", method="balanceOf(address who)", type_label=expression_statement];
35 [label="4_ function allowance( address owner, address spender ) constant returns (uint _allowance);\n35-function_definition-5-5", method="allowance(address owner,address spender)", type_label=function_definition];
45 [label="4_ constant\n45-expression_statement-5-5", method="allowance(address owner,address spender)", type_label=expression_statement];
52 [label="5_ function transfer( address to, uint value) returns (bool ok);\n52-function_definition-6-6", method="transfer(address to,uint value)", type_label=function_definition];
67 [label="6_ function transferFrom( address from, address to, uint value) returns (bool ok);\n67-function_definition-7-7", method="transferFrom(address from,address to,uint value)", type_label=function_definition];
86 [label="7_ function approve( address spender, uint value ) returns (bool ok);\n86-function_definition-8-8", method="approve(address spender,uint value)", type_label=function_definition];
132 [label="12_ address public owner;\n132-new_variable-13-13", method="", type_label=new_variable];
137 [label="13_ function Ownable() {\n    owner = msg.sender;\n  }\n137-function_definition-14-16", method="Ownable()", type_label=function_definition];
140 [label="14_ owner = msg.sender;\n140-expression_statement-15-15", method="Ownable()", type_label=expression_statement];
146 [label="16_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n146-expression_statement-17-20", method="", type_label=expression_statement];
149 [label="17_ require(msg.sender == owner);\n149-expression_statement-18-18", method="", type_label=expression_statement];
158 [label="18_ _;\n158-expression_statement-19-19", method="", type_label=expression_statement];
160 [label="20_ function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n160-function_definition-21-25", method="transferOwnership(address newOwner)", type_label=function_definition];
166 [label="20_ onlyOwner\n166-expression_statement-21-21", method="transferOwnership(address newOwner)", type_label=expression_statement];
169 [label="21_ if_newOwner != address(0)\n169-if-22-24", method="transferOwnership(address newOwner)", type_label=if];
6979 [label="21_ end_if", method="transferOwnership(address newOwner)", type_label=end_if];
176 [label="22_ owner = newOwner;\n176-expression_statement-23-23", method="transferOwnership(address newOwner)", type_label=expression_statement];
183 [label="27_ function totalSupply() public view returns (uint256 total);\n183-function_definition-28-28", method="totalSupply()", type_label=function_definition];
192 [label="28_ function balanceOf(address _owner) public view returns (uint256 balance);\n192-function_definition-29-29", method="balanceOf(address _owner)", type_label=function_definition];
205 [label="29_ function ownerOf(uint256 _tokenId) external view returns (address owner);\n205-function_definition-30-30", method="ownerOf(uint256 _tokenId)", type_label=function_definition];
218 [label="30_ function approve(address _to, uint256 _tokenId) external;\n218-function_definition-31-31", method="approve(address _to,uint256 _tokenId)", type_label=function_definition];
229 [label="31_ function transfer(address _to, uint256 _tokenId) external;\n229-function_definition-32-32", method="transfer(address _to,uint256 _tokenId)", type_label=function_definition];
240 [label="32_ function transferFrom(address _from, address _to, uint256 _tokenId) external;\n240-function_definition-33-33", method="transferFrom(address _from,address _to,uint256 _tokenId)", type_label=function_definition];
283 [label="35_ function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n283-function_definition-36-36", method="supportsInterface(bytes4 _interfaceID)", type_label=function_definition];
298 [label="38_ function isGeneScience() public pure returns (bool);\n298-function_definition-39-39", method="isGeneScience()", type_label=function_definition];
306 [label="39_ function mixGenes(uint256[2] genes1, uint256[2] genes2,uint256 g1,uint256 g2, uint256 targetBlock) public returns (uint256[2]);\n306-function_definition-40-40", method="mixGenes(uint256[2] genes1,uint256[2] genes2,uint256 g1,uint256 g2,uint256 targetBlock)", type_label=function_definition];
339 [label="40_ function getPureFromGene(uint256[2] gene) public view returns(uint256);\n339-function_definition-41-41", method="getPureFromGene(uint256[2] gene)", type_label=function_definition];
353 [label="41_ function getSex(uint256[2] gene) public view returns(uint256);\n353-function_definition-42-42", method="getSex(uint256[2] gene)", type_label=function_definition];
367 [label="42_ function getWizzType(uint256[2] gene) public view returns(uint256);\n367-function_definition-43-43", method="getWizzType(uint256[2] gene)", type_label=function_definition];
381 [label="43_ function clearWizzType(uint256[2] _gene) public returns(uint256[2]);\n381-function_definition-44-44", method="clearWizzType(uint256[2] _gene)", type_label=function_definition];
405 [label="47_ address public ceoAddress;\n405-new_variable-48-48", method="", type_label=new_variable];
410 [label="48_ address public cfoAddress;\n410-new_variable-49-49", method="", type_label=new_variable];
415 [label="49_ address public cooAddress;\n415-new_variable-50-50", method="", type_label=new_variable];
420 [label="50_ bool public paused = false;\n420-new_variable-51-51", method="", type_label=new_variable];
427 [label="51_ modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n427-expression_statement-52-55", method="", type_label=expression_statement];
430 [label="52_ require(msg.sender == ceoAddress);\n430-expression_statement-53-53", method="", type_label=expression_statement];
439 [label="53_ _;\n439-expression_statement-54-54", method="", type_label=expression_statement];
441 [label="55_ modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n441-expression_statement-56-59", method="", type_label=expression_statement];
444 [label="56_ require(msg.sender == cfoAddress);\n444-expression_statement-57-57", method="", type_label=expression_statement];
453 [label="57_ _;\n453-expression_statement-58-58", method="", type_label=expression_statement];
455 [label="59_ modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }\n455-expression_statement-60-63", method="", type_label=expression_statement];
458 [label="60_ require(msg.sender == cooAddress);\n458-expression_statement-61-61", method="", type_label=expression_statement];
467 [label="61_ _;\n467-expression_statement-62-62", method="", type_label=expression_statement];
469 [label="63_ modifier onlyCLevel() {\n        require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress\n        );\n        _;\n    }\n469-expression_statement-64-71", method="", type_label=expression_statement];
472 [label="64_ require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress\n        );\n472-expression_statement-65-69", method="", type_label=expression_statement];
493 [label="69_ _;\n493-expression_statement-70-70", method="", type_label=expression_statement];
495 [label="71_ function setCEO(address _newCEO) external onlyCEO {\n        require(_newCEO != address(0));\n        ceoAddress = _newCEO;\n    }\n495-function_definition-72-75", method="setCEO(address _newCEO)", type_label=function_definition];
502 [label="71_ onlyCEO\n502-expression_statement-72-72", method="setCEO(address _newCEO)", type_label=expression_statement];
505 [label="72_ require(_newCEO != address(0));\n505-expression_statement-73-73", method="setCEO(address _newCEO)", type_label=expression_statement];
514 [label="73_ ceoAddress = _newCEO;\n514-expression_statement-74-74", method="setCEO(address _newCEO)", type_label=expression_statement];
518 [label="75_ function setCFO(address _newCFO) external onlyCEO {\n        require(_newCFO != address(0));\n        cfoAddress = _newCFO;\n    }\n518-function_definition-76-79", method="setCFO(address _newCFO)", type_label=function_definition];
525 [label="75_ onlyCEO\n525-expression_statement-76-76", method="setCFO(address _newCFO)", type_label=expression_statement];
528 [label="76_ require(_newCFO != address(0));\n528-expression_statement-77-77", method="setCFO(address _newCFO)", type_label=expression_statement];
537 [label="77_ cfoAddress = _newCFO;\n537-expression_statement-78-78", method="setCFO(address _newCFO)", type_label=expression_statement];
541 [label="79_ function setCOO(address _newCOO) external onlyCEO {\n        require(_newCOO != address(0));\n        cooAddress = _newCOO;\n    }\n541-function_definition-80-83", method="setCOO(address _newCOO)", type_label=function_definition];
548 [label="79_ onlyCEO\n548-expression_statement-80-80", method="setCOO(address _newCOO)", type_label=expression_statement];
551 [label="80_ require(_newCOO != address(0));\n551-expression_statement-81-81", method="setCOO(address _newCOO)", type_label=expression_statement];
560 [label="81_ cooAddress = _newCOO;\n560-expression_statement-82-82", method="setCOO(address _newCOO)", type_label=expression_statement];
564 [label="83_ modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n564-expression_statement-84-87", method="", type_label=expression_statement];
567 [label="84_ require(!paused);\n567-expression_statement-85-85", method="", type_label=expression_statement];
573 [label="85_ _;\n573-expression_statement-86-86", method="", type_label=expression_statement];
575 [label="87_ modifier whenPaused {\n        require(paused);\n        _;\n    }\n575-expression_statement-88-91", method="", type_label=expression_statement];
578 [label="88_ require(paused);\n578-expression_statement-89-89", method="", type_label=expression_statement];
583 [label="89_ _;\n583-expression_statement-90-90", method="", type_label=expression_statement];
585 [label="91_ function pause() external onlyCLevel whenNotPaused {\n        paused = true;\n    }\n585-function_definition-92-94", method="pause()", type_label=function_definition];
588 [label="91_ onlyCLevel\n588-expression_statement-92-92", method="pause()", type_label=expression_statement];
590 [label="91_ whenNotPaused\n590-expression_statement-92-92", method="pause()", type_label=expression_statement];
593 [label="92_ paused = true;\n593-expression_statement-93-93", method="pause()", type_label=expression_statement];
598 [label="94_ function unpause() public onlyCEO whenPaused {\n        paused = false;\n    }\n598-function_definition-95-97", method="unpause()", type_label=function_definition];
601 [label="94_ onlyCEO\n601-expression_statement-95-95", method="unpause()", type_label=expression_statement];
603 [label="94_ whenPaused\n603-expression_statement-95-95", method="unpause()", type_label=expression_statement];
606 [label="95_ paused = false;\n606-expression_statement-96-96", method="unpause()", type_label=expression_statement];
617 [label="99_ uint256 public constant GEN0_TOTAL_COUNT = 16200;\n617-new_variable-100-100", method="", type_label=new_variable];
623 [label="100_ uint256 public gen0CreatedCount;\n623-new_variable-101-101", method="", type_label=new_variable];
666 [label="103_ struct Panda {\n        uint256[2] genes;\n        uint64 birthTime;\n        uint64 cooldownEndBlock;\n        uint32 matronId;\n        uint32 sireId;\n        uint32 siringWithId;\n        uint16 cooldownIndex;\n        uint16 generation;\n    }\n666-expression_statement-104-113", method="Panda()", type_label=expression_statement];
702 [label="113_ uint32[9] public cooldowns = [\n        uint32(5 minutes),\n        uint32(30 minutes),\n        uint32(2 hours),\n        uint32(4 hours),    \n        uint32(8 hours),\n        uint32(24 hours),\n        uint32(48 hours),\n        uint32(72 hours),\n        uint32(7 days)\n    ];\n702-new_variable-114-124", method="", type_label=new_variable];
746 [label="124_ uint256 public secondsPerBlock = 15;\n746-new_variable-125-125", method="", type_label=new_variable];
752 [label="125_ Panda[] pandas;\n752-new_variable-126-126", method="", type_label=new_variable];
758 [label="126_ mapping (uint256 => address) public pandaIndexToOwner;\n758-new_variable-127-127", method="", type_label=new_variable];
765 [label="127_ mapping (address => uint256) ownershipTokenCount;\n765-new_variable-128-128", method="", type_label=new_variable];
771 [label="128_ mapping (uint256 => address) public pandaIndexToApproved;\n771-new_variable-129-129", method="", type_label=new_variable];
778 [label="129_ mapping (uint256 => address) public sireAllowedToAddress;\n778-new_variable-130-130", method="", type_label=new_variable];
785 [label="130_ SaleClockAuction public saleAuction;\n785-new_variable-131-131", method="", type_label=new_variable];
791 [label="131_ SiringClockAuction public siringAuction;\n791-new_variable-132-132", method="", type_label=new_variable];
797 [label="132_ GeneScienceInterface public geneScience;\n797-new_variable-133-133", method="", type_label=new_variable];
803 [label="133_ SaleClockAuctionERC20 public saleAuctionERC20;\n803-new_variable-134-134", method="", type_label=new_variable];
809 [label="134_ mapping (uint256 => uint256) public wizzPandaQuota;\n809-new_variable-135-135", method="", type_label=new_variable];
816 [label="135_ mapping (uint256 => uint256) public wizzPandaCount;\n816-new_variable-136-136", method="", type_label=new_variable];
823 [label="136_ function getWizzPandaQuotaOf(uint256 _tp) view external returns(uint256) {\n        return wizzPandaQuota[_tp];\n    }\n823-function_definition-137-139", method="getWizzPandaQuotaOf(uint256 _tp)", type_label=function_definition];
836 [label="137_ return wizzPandaQuota[_tp];\n836-return-138-138", method="getWizzPandaQuotaOf(uint256 _tp)", type_label=return];
840 [label="139_ function getWizzPandaCountOf(uint256 _tp) view external returns(uint256) {\n        return wizzPandaCount[_tp];\n    }\n840-function_definition-140-142", method="getWizzPandaCountOf(uint256 _tp)", type_label=function_definition];
853 [label="140_ return wizzPandaCount[_tp];\n853-return-141-141", method="getWizzPandaCountOf(uint256 _tp)", type_label=return];
857 [label="142_ function setTotalWizzPandaOf(uint256 _tp,uint256 _total) external onlyCLevel {\n        require (wizzPandaQuota[_tp]==0);\n        require (_total==uint256(uint32(_total)));\n        wizzPandaQuota[_tp] = _total;\n    }\n857-function_definition-143-147", method="setTotalWizzPandaOf(uint256 _tp,uint256 _total)", type_label=function_definition];
868 [label="142_ onlyCLevel\n868-expression_statement-143-143", method="setTotalWizzPandaOf(uint256 _tp,uint256 _total)", type_label=expression_statement];
871 [label="143_ require (wizzPandaQuota[_tp]==0);\n871-expression_statement-144-144", method="setTotalWizzPandaOf(uint256 _tp,uint256 _total)", type_label=expression_statement];
880 [label="144_ require (_total==uint256(uint32(_total)));\n880-expression_statement-145-145", method="setTotalWizzPandaOf(uint256 _tp,uint256 _total)", type_label=expression_statement];
891 [label="145_ wizzPandaQuota[_tp] = _total;\n891-expression_statement-146-146", method="setTotalWizzPandaOf(uint256 _tp,uint256 _total)", type_label=expression_statement];
897 [label="147_ function getWizzTypeOf(uint256 _id) view external returns(uint256) {\n        Panda memory _p = pandas[_id];\n        return geneScience.getWizzType(_p.genes);\n    }\n897-function_definition-148-151", method="getWizzTypeOf(uint256 _id)", type_label=function_definition];
910 [label="148_ Panda memory _p = pandas[_id];\n910-new_variable-149-149", method="getWizzTypeOf(uint256 _id)", type_label=new_variable];
919 [label="149_ return geneScience.getWizzType(_p.genes);\n919-return-150-150", method="getWizzTypeOf(uint256 _id)", type_label=return];
928 [label="151_ function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        ownershipTokenCount[_to]++;\n        pandaIndexToOwner[_tokenId] = _to;\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n            delete sireAllowedToAddress[_tokenId];\n            delete pandaIndexToApproved[_tokenId];\n        }\n        Transfer(_from, _to, _tokenId);\n    }\n928-function_definition-152-161", method="_transfer(address _from,address _to,uint256 _tokenId)", type_label=function_definition];
944 [label="152_ ownershipTokenCount[_to]++;\n944-expression_statement-153-153", method="_transfer(address _from,address _to,uint256 _tokenId)", type_label=expression_statement];
945 [label="152_ ownershipTokenCount[_to]++\n945-expression_statement-153-153", method="_transfer(address _from,address _to,uint256 _tokenId)", type_label=expression_statement];
949 [label="153_ pandaIndexToOwner[_tokenId] = _to;\n949-expression_statement-154-154", method="_transfer(address _from,address _to,uint256 _tokenId)", type_label=expression_statement];
955 [label="154_ if__from != address(0)\n955-if-155-159", method="_transfer(address _from,address _to,uint256 _tokenId)", type_label=if];
7765 [label="154_ end_if", method="_transfer(address _from,address _to,uint256 _tokenId)", type_label=end_if];
962 [label="155_ ownershipTokenCount[_from]--;\n962-expression_statement-156-156", method="_transfer(address _from,address _to,uint256 _tokenId)", type_label=expression_statement];
963 [label="155_ ownershipTokenCount[_from]--\n963-expression_statement-156-156", method="_transfer(address _from,address _to,uint256 _tokenId)", type_label=expression_statement];
967 [label="156_ delete sireAllowedToAddress[_tokenId];\n967-expression_statement-157-157", method="_transfer(address _from,address _to,uint256 _tokenId)", type_label=expression_statement];
972 [label="157_ delete pandaIndexToApproved[_tokenId];\n972-expression_statement-158-158", method="_transfer(address _from,address _to,uint256 _tokenId)", type_label=expression_statement];
977 [label="159_ Transfer(_from, _to, _tokenId);\n977-expression_statement-160-160", method="_transfer(address _from,address _to,uint256 _tokenId)", type_label=expression_statement];
986 [label="161_ function _createPanda(\n        uint256 _matronId,\n        uint256 _sireId,\n        uint256 _generation,\n        uint256[2] _genes,\n        address _owner\n    )\n        internal\n        returns (uint)\n    {\n        require(_matronId == uint256(uint32(_matronId)));\n        require(_sireId == uint256(uint32(_sireId)));\n        require(_generation == uint256(uint16(_generation)));\n        uint16 cooldownIndex = 0;\n        if (pandas.length>0){\n            uint16 pureDegree = uint16(geneScience.getPureFromGene(_genes));\n            if (pureDegree==0) {\n                pureDegree = 1;\n            }\n            cooldownIndex = 1000/pureDegree;\n            if (cooldownIndex%10 < 5){\n                cooldownIndex = cooldownIndex/10;\n            }else{\n                cooldownIndex = cooldownIndex/10 + 1;\n            }\n            cooldownIndex = cooldownIndex - 1;\n            if (cooldownIndex > 8) {\n                cooldownIndex = 8;\n            }\n            uint256 _tp = geneScience.getWizzType(_genes);\n            if (_tp>0 && wizzPandaQuota[_tp]<=wizzPandaCount[_tp]) {\n                _genes = geneScience.clearWizzType(_genes);\n                _tp = 0;\n            }\n            if (_tp == 1){\n                cooldownIndex = 5;\n            }\n            if (_tp>0){\n                wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1;\n            }\n            if (_generation <= 1 && _tp != 1){\n                require(gen0CreatedCount<GEN0_TOTAL_COUNT);\n                gen0CreatedCount++;\n            }\n        }\n        Panda memory _panda = Panda({\n            genes: _genes,\n            birthTime: uint64(now),\n            cooldownEndBlock: 0,\n            matronId: uint32(_matronId),\n            sireId: uint32(_sireId),\n            siringWithId: 0,\n            cooldownIndex: cooldownIndex,\n            generation: uint16(_generation)\n        });\n        uint256 newKittenId = pandas.push(_panda) - 1;\n        require(newKittenId == uint256(uint32(newKittenId)));\n        Birth(\n            _owner,\n            newKittenId,\n            uint256(_panda.matronId),\n            uint256(_panda.sireId),\n            _panda.genes\n        );\n        _transfer(0, _owner, newKittenId);\n        return newKittenId;\n    }\n986-function_definition-162-228", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=function_definition];
1016 [label="171_ require(_matronId == uint256(uint32(_matronId)));\n1016-expression_statement-172-172", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1027 [label="172_ require(_sireId == uint256(uint32(_sireId)));\n1027-expression_statement-173-173", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1038 [label="173_ require(_generation == uint256(uint16(_generation)));\n1038-expression_statement-174-174", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1049 [label="174_ uint16 cooldownIndex = 0;\n1049-new_variable-175-175", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=new_variable];
1055 [label="175_ if_pandas.length>0\n1055-if-176-206", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=if];
7865 [label="175_ end_if", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=end_if];
1062 [label="176_ uint16 pureDegree = uint16(geneScience.getPureFromGene(_genes));\n1062-new_variable-177-177", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=new_variable];
1075 [label="177_ if_pureDegree==0\n1075-if-178-180", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=if];
7885 [label="177_ end_if", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=end_if];
1080 [label="178_ pureDegree = 1;\n1080-expression_statement-179-179", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1084 [label="180_ cooldownIndex = 1000/pureDegree;\n1084-expression_statement-181-181", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1090 [label="181_ if_cooldownIndex%10 < 5\n1090-if-182-186", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=if];
7900 [label="181_ end_if", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=end_if];
1097 [label="182_ cooldownIndex = cooldownIndex/10;\n1097-expression_statement-183-183", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1104 [label="184_ cooldownIndex = cooldownIndex/10 + 1;\n1104-expression_statement-185-185", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1112 [label="186_ cooldownIndex = cooldownIndex - 1;\n1112-expression_statement-187-187", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1118 [label="187_ if_cooldownIndex > 8\n1118-if-188-190", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=if];
7928 [label="187_ end_if", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=end_if];
1123 [label="188_ cooldownIndex = 8;\n1123-expression_statement-189-189", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1127 [label="190_ uint256 _tp = geneScience.getWizzType(_genes);\n1127-new_variable-191-191", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=new_variable];
1138 [label="191_ if\n1138-if-192-195", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=if];
7948 [label="191_ end_if", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=end_if];
1151 [label="192_ _genes = geneScience.clearWizzType(_genes);\n1151-expression_statement-193-193", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1160 [label="193_ _tp = 0;\n1160-expression_statement-194-194", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1164 [label="195_ if__tp == 1\n1164-if-196-198", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=if];
7974 [label="195_ end_if", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=end_if];
1169 [label="196_ cooldownIndex = 5;\n1169-expression_statement-197-197", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1173 [label="198_ if__tp>0\n1173-if-199-201", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=if];
7983 [label="198_ end_if", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=end_if];
1178 [label="199_ wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1;\n1178-expression_statement-200-200", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1188 [label="201_ if__generation <= 1 && _tp != 1\n1188-if-202-205", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=if];
7998 [label="201_ end_if", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=end_if];
1197 [label="202_ require(gen0CreatedCount<GEN0_TOTAL_COUNT);\n1197-expression_statement-203-203", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1204 [label="203_ gen0CreatedCount++;\n1204-expression_statement-204-204", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1205 [label="203_ gen0CreatedCount++\n1205-expression_statement-204-204", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1207 [label="206_ Panda memory _panda = Panda({\n            genes: _genes,\n            birthTime: uint64(now),\n            cooldownEndBlock: 0,\n            matronId: uint32(_matronId),\n            sireId: uint32(_sireId),\n            siringWithId: 0,\n            cooldownIndex: cooldownIndex,\n            generation: uint16(_generation)\n        });\n1207-new_variable-207-216", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=new_variable];
1248 [label="216_ uint256 newKittenId = pandas.push(_panda) - 1;\n1248-new_variable-217-217", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=new_variable];
1261 [label="217_ require(newKittenId == uint256(uint32(newKittenId)));\n1261-expression_statement-218-218", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1272 [label="218_ Birth(\n            _owner,\n            newKittenId,\n            uint256(_panda.matronId),\n            uint256(_panda.sireId),\n            _panda.genes\n        );\n1272-expression_statement-219-225", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1295 [label="225_ _transfer(0, _owner, newKittenId);\n1295-expression_statement-226-226", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=expression_statement];
1304 [label="226_ return newKittenId;\n1304-return-227-227", method="_createPanda(uint256 _matronId,uint256 _sireId,uint256 _generation,uint256[2] _genes,address _owner)", type_label=return];
1306 [label="228_ function setSecondsPerBlock(uint256 secs) external onlyCLevel {\n        require(secs < cooldowns[0]);\n        secondsPerBlock = secs;\n    }\n1306-function_definition-229-232", method="setSecondsPerBlock(uint256 secs)", type_label=function_definition];
1313 [label="228_ onlyCLevel\n1313-expression_statement-229-229", method="setSecondsPerBlock(uint256 secs)", type_label=expression_statement];
1316 [label="229_ require(secs < cooldowns[0]);\n1316-expression_statement-230-230", method="setSecondsPerBlock(uint256 secs)", type_label=expression_statement];
1325 [label="230_ secondsPerBlock = secs;\n1325-expression_statement-231-231", method="setSecondsPerBlock(uint256 secs)", type_label=expression_statement];
1332 [label="234_ function getMetadata(uint256 _tokenId, string) public view returns (bytes32[4] buffer, uint256 count) {\n        if (_tokenId == 1) {\n            buffer[0] = \"Hello World! :D\";\n            count = 15;\n        } else if (_tokenId == 2) {\n            buffer[0] = \"I would definitely choose a medi\";\n            buffer[1] = \"um length string.\";\n            count = 49;\n        } else if (_tokenId == 3) {\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\n            buffer[2] = \" tristique vestibulum id, libero\";\n            buffer[3] = \" suscipit varius sapien aliquam.\";\n            count = 128;\n        }\n    }\n1332-function_definition-235-250", method="getMetadata(uint256 _tokenId,string)", type_label=function_definition];
1355 [label="235_ if__tokenId == 1\n1355-if-236-249", method="getMetadata(uint256 _tokenId,string)", type_label=if];
8165 [label="235_ end_if", method="getMetadata(uint256 _tokenId,string)", type_label=end_if];
1360 [label="236_ buffer[0] = \"Hello World! :D\";\n1360-expression_statement-237-237", method="getMetadata(uint256 _tokenId,string)", type_label=expression_statement];
1367 [label="237_ count = 15;\n1367-expression_statement-238-238", method="getMetadata(uint256 _tokenId,string)", type_label=expression_statement];
1371 [label="238_ if__tokenId == 2\n1371-if-239-249", method="getMetadata(uint256 _tokenId,string)", type_label=if];
1376 [label="239_ buffer[0] = \"I would definitely choose a medi\";\n1376-expression_statement-240-240", method="getMetadata(uint256 _tokenId,string)", type_label=expression_statement];
1383 [label="240_ buffer[1] = \"um length string.\";\n1383-expression_statement-241-241", method="getMetadata(uint256 _tokenId,string)", type_label=expression_statement];
1390 [label="241_ count = 49;\n1390-expression_statement-242-242", method="getMetadata(uint256 _tokenId,string)", type_label=expression_statement];
1394 [label="242_ if__tokenId == 3\n1394-if-243-249", method="getMetadata(uint256 _tokenId,string)", type_label=if];
1399 [label="243_ buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\n1399-expression_statement-244-244", method="getMetadata(uint256 _tokenId,string)", type_label=expression_statement];
1406 [label="244_ buffer[1] = \"st accumsan dapibus augue lorem,\";\n1406-expression_statement-245-245", method="getMetadata(uint256 _tokenId,string)", type_label=expression_statement];
1413 [label="245_ buffer[2] = \" tristique vestibulum id, libero\";\n1413-expression_statement-246-246", method="getMetadata(uint256 _tokenId,string)", type_label=expression_statement];
1420 [label="246_ buffer[3] = \" suscipit varius sapien aliquam.\";\n1420-expression_statement-247-247", method="getMetadata(uint256 _tokenId,string)", type_label=expression_statement];
1427 [label="247_ count = 128;\n1427-expression_statement-248-248", method="getMetadata(uint256 _tokenId,string)", type_label=expression_statement];
1440 [label="252_ string public constant name = \"PandaEarth\";\n1440-new_variable-253-253", method="", type_label=new_variable];
1447 [label="253_ string public constant symbol = \"PE\";\n1447-new_variable-254-254", method="", type_label=new_variable];
1454 [label="254_ bytes4 constant InterfaceSignature_ERC165 =\n        bytes4(keccak256('supportsInterface(bytes4)'));\n1454-new_variable-255-256", method="", type_label=new_variable];
1465 [label="256_ bytes4 constant InterfaceSignature_ERC721 =\n        bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)')) ^\n        bytes4(keccak256('approve(address,uint256)')) ^\n        bytes4(keccak256('transfer(address,uint256)')) ^\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n        bytes4(keccak256('tokensOfOwner(address)')) ^\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\n1465-new_variable-257-267", method="", type_label=new_variable];
1548 [label="267_ function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n    {\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n    }\n1548-function_definition-268-271", method="supportsInterface(bytes4 _interfaceID)", type_label=function_definition];
1561 [label="269_ return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n1561-return-270-270", method="supportsInterface(bytes4 _interfaceID)", type_label=return];
1572 [label="271_ function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return pandaIndexToOwner[_tokenId] == _claimant;\n    }\n1572-function_definition-272-274", method="_owns(address _claimant,uint256 _tokenId)", type_label=function_definition];
1589 [label="272_ return pandaIndexToOwner[_tokenId] == _claimant;\n1589-return-273-273", method="_owns(address _claimant,uint256 _tokenId)", type_label=return];
1595 [label="274_ function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return pandaIndexToApproved[_tokenId] == _claimant;\n    }\n1595-function_definition-275-277", method="_approvedFor(address _claimant,uint256 _tokenId)", type_label=function_definition];
1612 [label="275_ return pandaIndexToApproved[_tokenId] == _claimant;\n1612-return-276-276", method="_approvedFor(address _claimant,uint256 _tokenId)", type_label=return];
1618 [label="277_ function _approve(uint256 _tokenId, address _approved) internal {\n        pandaIndexToApproved[_tokenId] = _approved;\n    }\n1618-function_definition-278-280", method="_approve(uint256 _tokenId,address _approved)", type_label=function_definition];
1630 [label="278_ pandaIndexToApproved[_tokenId] = _approved;\n1630-expression_statement-279-279", method="_approve(uint256 _tokenId,address _approved)", type_label=expression_statement];
1636 [label="280_ function balanceOf(address _owner) public view returns (uint256 count) {\n        return ownershipTokenCount[_owner];\n    }\n1636-function_definition-281-283", method="balanceOf(address _owner)", type_label=function_definition];
1650 [label="281_ return ownershipTokenCount[_owner];\n1650-return-282-282", method="balanceOf(address _owner)", type_label=return];
1654 [label="283_ function transfer(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        require(_to != address(0));\n        require(_to != address(this));\n        require(_to != address(saleAuction));\n        require(_to != address(siringAuction));\n        require(_owns(msg.sender, _tokenId));\n        _transfer(msg.sender, _to, _tokenId);\n    }\n1654-function_definition-284-297", method="transfer(address _to,uint256 _tokenId)", type_label=function_definition];
1665 [label="288_ whenNotPaused\n1665-expression_statement-289-289", method="transfer(address _to,uint256 _tokenId)", type_label=expression_statement];
1668 [label="290_ require(_to != address(0));\n1668-expression_statement-291-291", method="transfer(address _to,uint256 _tokenId)", type_label=expression_statement];
1677 [label="291_ require(_to != address(this));\n1677-expression_statement-292-292", method="transfer(address _to,uint256 _tokenId)", type_label=expression_statement];
1686 [label="292_ require(_to != address(saleAuction));\n1686-expression_statement-293-293", method="transfer(address _to,uint256 _tokenId)", type_label=expression_statement];
1695 [label="293_ require(_to != address(siringAuction));\n1695-expression_statement-294-294", method="transfer(address _to,uint256 _tokenId)", type_label=expression_statement];
1704 [label="294_ require(_owns(msg.sender, _tokenId));\n1704-expression_statement-295-295", method="transfer(address _to,uint256 _tokenId)", type_label=expression_statement];
1716 [label="295_ _transfer(msg.sender, _to, _tokenId);\n1716-expression_statement-296-296", method="transfer(address _to,uint256 _tokenId)", type_label=expression_statement];
1727 [label="297_ function approve(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _tokenId));\n        _approve(_tokenId, _to);\n        Approval(msg.sender, _to, _tokenId);\n    }\n1727-function_definition-298-308", method="approve(address _to,uint256 _tokenId)", type_label=function_definition];
1738 [label="302_ whenNotPaused\n1738-expression_statement-303-303", method="approve(address _to,uint256 _tokenId)", type_label=expression_statement];
1741 [label="304_ require(_owns(msg.sender, _tokenId));\n1741-expression_statement-305-305", method="approve(address _to,uint256 _tokenId)", type_label=expression_statement];
1753 [label="305_ _approve(_tokenId, _to);\n1753-expression_statement-306-306", method="approve(address _to,uint256 _tokenId)", type_label=expression_statement];
1760 [label="306_ Approval(msg.sender, _to, _tokenId);\n1760-expression_statement-307-307", method="approve(address _to,uint256 _tokenId)", type_label=expression_statement];
1771 [label="308_ function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        require(_to != address(0));\n        require(_to != address(this));\n        require(_approvedFor(msg.sender, _tokenId));\n        require(_owns(_from, _tokenId));\n        _transfer(_from, _to, _tokenId);\n    }\n1771-function_definition-309-322", method="transferFrom(address _from,address _to,uint256 _tokenId)", type_label=function_definition];
1786 [label="314_ whenNotPaused\n1786-expression_statement-315-315", method="transferFrom(address _from,address _to,uint256 _tokenId)", type_label=expression_statement];
1789 [label="316_ require(_to != address(0));\n1789-expression_statement-317-317", method="transferFrom(address _from,address _to,uint256 _tokenId)", type_label=expression_statement];
1798 [label="317_ require(_to != address(this));\n1798-expression_statement-318-318", method="transferFrom(address _from,address _to,uint256 _tokenId)", type_label=expression_statement];
1807 [label="318_ require(_approvedFor(msg.sender, _tokenId));\n1807-expression_statement-319-319", method="transferFrom(address _from,address _to,uint256 _tokenId)", type_label=expression_statement];
1819 [label="319_ require(_owns(_from, _tokenId));\n1819-expression_statement-320-320", method="transferFrom(address _from,address _to,uint256 _tokenId)", type_label=expression_statement];
1829 [label="320_ _transfer(_from, _to, _tokenId);\n1829-expression_statement-321-321", method="transferFrom(address _from,address _to,uint256 _tokenId)", type_label=expression_statement];
1838 [label="322_ function totalSupply() public view returns (uint) {\n        return pandas.length - 1;\n    }\n1838-function_definition-323-325", method="totalSupply()", type_label=function_definition];
1847 [label="323_ return pandas.length - 1;\n1847-return-324-324", method="totalSupply()", type_label=return];
1853 [label="325_ function ownerOf(uint256 _tokenId)\n        external\n        view\n        returns (address owner)\n    {\n        owner = pandaIndexToOwner[_tokenId];\n        require(owner != address(0));\n    }\n1853-function_definition-326-333", method="ownerOf(uint256 _tokenId)", type_label=function_definition];
1867 [label="330_ owner = pandaIndexToOwner[_tokenId];\n1867-expression_statement-331-331", method="ownerOf(uint256 _tokenId)", type_label=expression_statement];
1873 [label="331_ require(owner != address(0));\n1873-expression_statement-332-332", method="ownerOf(uint256 _tokenId)", type_label=expression_statement];
1882 [label="333_ function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n        uint256 tokenCount = balanceOf(_owner);\n        if (tokenCount == 0) {\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalCats = totalSupply();\n            uint256 resultIndex = 0;\n            uint256 catId;\n            for (catId = 1; catId <= totalCats; catId++) {\n                if (pandaIndexToOwner[catId] == _owner) {\n                    result[resultIndex] = catId;\n                    resultIndex++;\n                }\n            }\n            return result;\n        }\n    }\n1882-function_definition-334-351", method="tokensOfOwner(address _owner)", type_label=function_definition];
1897 [label="334_ uint256 tokenCount = balanceOf(_owner);\n1897-new_variable-335-335", method="tokensOfOwner(address _owner)", type_label=new_variable];
1906 [label="335_ if_tokenCount == 0\n1906-if-336-350", method="tokensOfOwner(address _owner)", type_label=if];
8716 [label="335_ end_if", method="tokensOfOwner(address _owner)", type_label=end_if];
1911 [label="336_ return new uint256[](0);\n1911-return-337-337", method="tokensOfOwner(address _owner)", type_label=return];
1920 [label="338_ uint256[] memory result = new uint256[](tokenCount);\n1920-new_variable-339-339", method="tokensOfOwner(address _owner)", type_label=new_variable];
1933 [label="339_ uint256 totalCats = totalSupply();\n1933-new_variable-340-340", method="tokensOfOwner(address _owner)", type_label=new_variable];
1940 [label="340_ uint256 resultIndex = 0;\n1940-new_variable-341-341", method="tokensOfOwner(address _owner)", type_label=new_variable];
1946 [label="341_ uint256 catId;\n1946-new_variable-342-342", method="tokensOfOwner(address _owner)", type_label=new_variable];
1951 [label="342_ for(catId <= totalCats;;catId++)\n1951-for-343-348", method="tokensOfOwner(address _owner)", type_label=for];
8761 [label="342_ end_loop", method="tokensOfOwner(address _owner)", type_label=end_loop];
1960 [label="342_ catId++\n1960-expression_statement-343-343", method="tokensOfOwner(address _owner)", type_label=expression_statement];
1963 [label="343_ if_pandaIndexToOwner[catId] == _owner\n1963-if-344-347", method="tokensOfOwner(address _owner)", type_label=if];
8773 [label="343_ end_if", method="tokensOfOwner(address _owner)", type_label=end_if];
1970 [label="344_ result[resultIndex] = catId;\n1970-expression_statement-345-345", method="tokensOfOwner(address _owner)", type_label=expression_statement];
1976 [label="345_ resultIndex++;\n1976-expression_statement-346-346", method="tokensOfOwner(address _owner)", type_label=expression_statement];
1977 [label="345_ resultIndex++\n1977-expression_statement-346-346", method="tokensOfOwner(address _owner)", type_label=expression_statement];
1979 [label="348_ return result;\n1979-return-349-349", method="tokensOfOwner(address _owner)", type_label=return];
1981 [label="351_ function _memcpy(uint _dest, uint _src, uint _len) private view {\n        for(; _len >= 32; _len -= 32) {\n            assembly {\n                mstore(_dest, mload(_src))\n            }\n            _dest += 32;\n            _src += 32;\n        }\n        uint256 mask = 256 ** (32 - _len) - 1;\n        assembly {\n            let srcpart := and(mload(_src), not(mask))\n            let destpart := and(mload(_dest), mask)\n            mstore(_dest, or(destpart, srcpart))\n        }\n    }\n1981-function_definition-352-366", method="_memcpy(uint _dest,uint _src,uint _len)", type_label=function_definition];
1998 [label="352_ for(_len >= 32;;_len -= 32)\n1998-for-353-359", method="_memcpy(uint _dest,uint _src,uint _len)", type_label=for];
8808 [label="352_ end_loop", method="_memcpy(uint _dest,uint _src,uint _len)", type_label=end_loop];
2018 [label="356_ _dest += 32;\n2018-expression_statement-357-357", method="_memcpy(uint _dest,uint _src,uint _len)", type_label=expression_statement];
2022 [label="357_ _src += 32;\n2022-expression_statement-358-358", method="_memcpy(uint _dest,uint _src,uint _len)", type_label=expression_statement];
2026 [label="359_ uint256 mask = 256 ** (32 - _len) - 1;\n2026-new_variable-360-360", method="_memcpy(uint _dest,uint _src,uint _len)", type_label=new_variable];
2081 [label="366_ function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {\n        var outputString = new string(_stringLength);\n        uint256 outputPtr;\n        uint256 bytesPtr;\n        assembly {\n            outputPtr := add(outputString, 32)\n            bytesPtr := _rawBytes\n        }\n        _memcpy(outputPtr, bytesPtr, _stringLength);\n        return outputString;\n    }\n2081-function_definition-367-377", method="_toString(bytes32[4] _rawBytes,uint256 _stringLength)", type_label=function_definition];
2100 [label="367_ var outputString = new string(_stringLength);\n2100-new_variable-368-368", method="_toString(bytes32[4] _rawBytes,uint256 _stringLength)", type_label=new_variable];
2111 [label="368_ uint256 outputPtr;\n2111-new_variable-369-369", method="_toString(bytes32[4] _rawBytes,uint256 _stringLength)", type_label=new_variable];
2116 [label="369_ uint256 bytesPtr;\n2116-new_variable-370-370", method="_toString(bytes32[4] _rawBytes,uint256 _stringLength)", type_label=new_variable];
2139 [label="374_ _memcpy(outputPtr, bytesPtr, _stringLength);\n2139-expression_statement-375-375", method="_toString(bytes32[4] _rawBytes,uint256 _stringLength)", type_label=expression_statement];
2148 [label="375_ return outputString;\n2148-return-376-376", method="_toString(bytes32[4] _rawBytes,uint256 _stringLength)", type_label=return];
2156 [label="379_ uint256 public constant GENSIS_TOTAL_COUNT = 100;\n2156-new_variable-380-380", method="", type_label=new_variable];
2194 [label="382_ uint256 public autoBirthFee = 2 finney;\n2194-new_variable-383-383", method="", type_label=new_variable];
2201 [label="383_ uint256 public pregnantPandas;\n2201-new_variable-384-384", method="", type_label=new_variable];
2206 [label="384_ mapping(uint256 => address) childOwner;\n2206-new_variable-385-385", method="", type_label=new_variable];
2212 [label="385_ function setGeneScienceAddress(address _address) external onlyCEO {\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\n        require(candidateContract.isGeneScience());\n        geneScience = candidateContract;\n    }\n2212-function_definition-386-390", method="setGeneScienceAddress(address _address)", type_label=function_definition];
2219 [label="385_ onlyCEO\n2219-expression_statement-386-386", method="setGeneScienceAddress(address _address)", type_label=expression_statement];
2222 [label="386_ GeneScienceInterface candidateContract = GeneScienceInterface(_address);\n2222-new_variable-387-387", method="setGeneScienceAddress(address _address)", type_label=new_variable];
2232 [label="387_ require(candidateContract.isGeneScience());\n2232-expression_statement-388-388", method="setGeneScienceAddress(address _address)", type_label=expression_statement];
2240 [label="388_ geneScience = candidateContract;\n2240-expression_statement-389-389", method="setGeneScienceAddress(address _address)", type_label=expression_statement];
2244 [label="390_ function _isReadyToBreed(Panda _kit) internal view returns(bool) {\n        return (_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number));\n    }\n2244-function_definition-391-393", method="_isReadyToBreed(Panda _kit)", type_label=function_definition];
2258 [label="391_ return (_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number));\n2258-return-392-392", method="_isReadyToBreed(Panda _kit)", type_label=return];
2276 [label="393_ function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns(bool) {\n        address matronOwner = pandaIndexToOwner[_matronId];\n        address sireOwner = pandaIndexToOwner[_sireId];\n        return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);\n    }\n2276-function_definition-394-398", method="_isSiringPermitted(uint256 _sireId,uint256 _matronId)", type_label=function_definition];
2293 [label="394_ address matronOwner = pandaIndexToOwner[_matronId];\n2293-new_variable-395-395", method="_isSiringPermitted(uint256 _sireId,uint256 _matronId)", type_label=new_variable];
2301 [label="395_ address sireOwner = pandaIndexToOwner[_sireId];\n2301-new_variable-396-396", method="_isSiringPermitted(uint256 _sireId,uint256 _matronId)", type_label=new_variable];
2309 [label="396_ return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);\n2309-return-397-397", method="_isSiringPermitted(uint256 _sireId,uint256 _matronId)", type_label=return];
2320 [label="398_ function _triggerCooldown(Panda storage _kitten) internal {\n        _kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex] / secondsPerBlock) + block.number);\n        if (_kitten.cooldownIndex < 8 && geneScience.getWizzType(_kitten.genes) != 1) {\n            _kitten.cooldownIndex += 1;\n        }\n    }\n2320-function_definition-399-404", method="_triggerCooldown(Panda storage _kitten)", type_label=function_definition];
2329 [label="399_ _kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex] / secondsPerBlock) + block.number);\n2329-expression_statement-400-400", method="_triggerCooldown(Panda storage _kitten)", type_label=expression_statement];
2348 [label="400_ if__kitten.cooldownIndex < 8 && geneScience.getWizzType(_kitten.genes) != 1\n2348-if-401-403", method="_triggerCooldown(Panda storage _kitten)", type_label=if];
9158 [label="400_ end_if", method="_triggerCooldown(Panda storage _kitten)", type_label=end_if];
2366 [label="401_ _kitten.cooldownIndex += 1;\n2366-expression_statement-402-402", method="_triggerCooldown(Panda storage _kitten)", type_label=expression_statement];
2372 [label="404_ function approveSiring(address _addr, uint256 _sireId)\n    external\n    whenNotPaused {\n        require(_owns(msg.sender, _sireId));\n        sireAllowedToAddress[_sireId] = _addr;\n    }\n2372-function_definition-405-410", method="approveSiring(address _addr,uint256 _sireId)", type_label=function_definition];
2383 [label="406_ whenNotPaused\n2383-expression_statement-407-407", method="approveSiring(address _addr,uint256 _sireId)", type_label=expression_statement];
2386 [label="407_ require(_owns(msg.sender, _sireId));\n2386-expression_statement-408-408", method="approveSiring(address _addr,uint256 _sireId)", type_label=expression_statement];
2398 [label="408_ sireAllowedToAddress[_sireId] = _addr;\n2398-expression_statement-409-409", method="approveSiring(address _addr,uint256 _sireId)", type_label=expression_statement];
2404 [label="410_ function setAutoBirthFee(uint256 val) external onlyCOO {\n        autoBirthFee = val;\n    }\n2404-function_definition-411-413", method="setAutoBirthFee(uint256 val)", type_label=function_definition];
2411 [label="410_ onlyCOO\n2411-expression_statement-411-411", method="setAutoBirthFee(uint256 val)", type_label=expression_statement];
2414 [label="411_ autoBirthFee = val;\n2414-expression_statement-412-412", method="setAutoBirthFee(uint256 val)", type_label=expression_statement];
2418 [label="413_ function _isReadyToGiveBirth(Panda _matron) private view returns(bool) {\n        return (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number));\n    }\n2418-function_definition-414-416", method="_isReadyToGiveBirth(Panda _matron)", type_label=function_definition];
2432 [label="414_ return (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number));\n2432-return-415-415", method="_isReadyToGiveBirth(Panda _matron)", type_label=return];
2450 [label="416_ function isReadyToBreed(uint256 _pandaId)\n    public\n    view\n    returns(bool) {\n        require(_pandaId > 0);\n        Panda storage kit = pandas[_pandaId];\n        return _isReadyToBreed(kit);\n    }\n2450-function_definition-417-424", method="isReadyToBreed(uint256 _pandaId)", type_label=function_definition];
2463 [label="420_ require(_pandaId > 0);\n2463-expression_statement-421-421", method="isReadyToBreed(uint256 _pandaId)", type_label=expression_statement];
2470 [label="421_ Panda storage kit = pandas[_pandaId];\n2470-new_variable-422-422", method="isReadyToBreed(uint256 _pandaId)", type_label=new_variable];
2479 [label="422_ return _isReadyToBreed(kit);\n2479-return-423-423", method="isReadyToBreed(uint256 _pandaId)", type_label=return];
2484 [label="424_ function isPregnant(uint256 _pandaId)\n    public\n    view\n    returns(bool) {\n        require(_pandaId > 0);\n        return pandas[_pandaId].siringWithId != 0;\n    }\n2484-function_definition-425-431", method="isPregnant(uint256 _pandaId)", type_label=function_definition];
2497 [label="428_ require(_pandaId > 0);\n2497-expression_statement-429-429", method="isPregnant(uint256 _pandaId)", type_label=expression_statement];
2504 [label="429_ return pandas[_pandaId].siringWithId != 0;\n2504-return-430-430", method="isPregnant(uint256 _pandaId)", type_label=return];
2512 [label="431_ function _isValidMatingPair(\n        Panda storage _matron,\n        uint256 _matronId,\n        Panda storage _sire,\n        uint256 _sireId\n    )\n    private\n    view\n    returns(bool) {\n        if (_matronId == _sireId) {\n            return false;\n        }\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\n            return false;\n        }\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\n            return false;\n        }\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\n            return true;\n        }\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\n            return false;\n        }\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\n            return false;\n        }\n        if (geneScience.getSex(_matron.genes) + geneScience.getSex(_sire.genes) != 1) {\n            return false;\n        }\n        return true;\n    }\n2512-function_definition-432-463", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=function_definition];
2539 [label="440_ if__matronId == _sireId\n2539-if-441-443", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=if];
9349 [label="440_ end_if", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=end_if];
2544 [label="441_ return false;\n2544-return-442-442", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=return];
2547 [label="443_ if__matron.matronId == _sireId || _matron.sireId == _sireId\n2547-if-444-446", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=if];
9357 [label="443_ end_if", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=end_if];
2560 [label="444_ return false;\n2560-return-445-445", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=return];
2563 [label="446_ if__sire.matronId == _matronId || _sire.sireId == _matronId\n2563-if-447-449", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=if];
9373 [label="446_ end_if", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=end_if];
2576 [label="447_ return false;\n2576-return-448-448", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=return];
2579 [label="449_ if__sire.matronId == 0 || _matron.matronId == 0\n2579-if-450-452", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=if];
9389 [label="449_ end_if", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=end_if];
2592 [label="450_ return true;\n2592-return-451-451", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=return];
2595 [label="452_ if__sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId\n2595-if-453-455", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=if];
9405 [label="452_ end_if", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=end_if];
2612 [label="453_ return false;\n2612-return-454-454", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=return];
2615 [label="455_ if__sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId\n2615-if-456-458", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=if];
9425 [label="455_ end_if", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=end_if];
2632 [label="456_ return false;\n2632-return-457-457", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=return];
2635 [label="458_ if_geneScience.getSex(_matron.genes) + geneScience.getSex(_sire.genes) != 1\n2635-if-459-461", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=if];
9445 [label="458_ end_if", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=end_if];
2656 [label="459_ return false;\n2656-return-460-460", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=return];
2659 [label="461_ return true;\n2659-return-462-462", method="_isValidMatingPair(Panda storage _matron,uint256 _matronId,Panda storage _sire,uint256 _sireId)", type_label=return];
2662 [label="463_ function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\n    internal\n    view\n    returns(bool) {\n        Panda storage matron = pandas[_matronId];\n        Panda storage sire = pandas[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\n    }\n2662-function_definition-464-471", method="_canBreedWithViaAuction(uint256 _matronId,uint256 _sireId)", type_label=function_definition];
2679 [label="467_ Panda storage matron = pandas[_matronId];\n2679-new_variable-468-468", method="_canBreedWithViaAuction(uint256 _matronId,uint256 _sireId)", type_label=new_variable];
2688 [label="468_ Panda storage sire = pandas[_sireId];\n2688-new_variable-469-469", method="_canBreedWithViaAuction(uint256 _matronId,uint256 _sireId)", type_label=new_variable];
2697 [label="469_ return _isValidMatingPair(matron, _matronId, sire, _sireId);\n2697-return-470-470", method="_canBreedWithViaAuction(uint256 _matronId,uint256 _sireId)", type_label=return];
2708 [label="471_ function canBreedWith(uint256 _matronId, uint256 _sireId)\n    external\n    view\n    returns(bool) {\n        require(_matronId > 0);\n        require(_sireId > 0);\n        Panda storage matron = pandas[_matronId];\n        Panda storage sire = pandas[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\n            _isSiringPermitted(_sireId, _matronId);\n    }\n2708-function_definition-472-482", method="canBreedWith(uint256 _matronId,uint256 _sireId)", type_label=function_definition];
2725 [label="475_ require(_matronId > 0);\n2725-expression_statement-476-476", method="canBreedWith(uint256 _matronId,uint256 _sireId)", type_label=expression_statement];
2732 [label="476_ require(_sireId > 0);\n2732-expression_statement-477-477", method="canBreedWith(uint256 _matronId,uint256 _sireId)", type_label=expression_statement];
2739 [label="477_ Panda storage matron = pandas[_matronId];\n2739-new_variable-478-478", method="canBreedWith(uint256 _matronId,uint256 _sireId)", type_label=new_variable];
2748 [label="478_ Panda storage sire = pandas[_sireId];\n2748-new_variable-479-479", method="canBreedWith(uint256 _matronId,uint256 _sireId)", type_label=new_variable];
2757 [label="479_ return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\n            _isSiringPermitted(_sireId, _matronId);\n2757-return-480-481", method="canBreedWith(uint256 _matronId,uint256 _sireId)", type_label=return];
2775 [label="482_ function _exchangeMatronSireId(uint256 _matronId, uint256 _sireId) internal returns(uint256, uint256) {\n        if (geneScience.getSex(pandas[_matronId].genes) == 1) {\n            return (_sireId, _matronId);\n        } else {\n            return (_matronId, _sireId);\n        }\n    }\n2775-function_definition-483-489", method="_exchangeMatronSireId(uint256 _matronId,uint256 _sireId)", type_label=function_definition];
2794 [label="483_ if_geneScience.getSex(pandas[_matronId].genes) == 1\n2794-if-484-488", method="_exchangeMatronSireId(uint256 _matronId,uint256 _sireId)", type_label=if];
9604 [label="483_ end_if", method="_exchangeMatronSireId(uint256 _matronId,uint256 _sireId)", type_label=end_if];
2808 [label="484_ return (_sireId, _matronId);\n2808-return-485-485", method="_exchangeMatronSireId(uint256 _matronId,uint256 _sireId)", type_label=return];
2813 [label="486_ return (_matronId, _sireId);\n2813-return-487-487", method="_exchangeMatronSireId(uint256 _matronId,uint256 _sireId)", type_label=return];
2817 [label="489_ function _breedWith(uint256 _matronId, uint256 _sireId, address _owner) internal {\n        (_matronId, _sireId) = _exchangeMatronSireId(_matronId, _sireId);\n        Panda storage sire = pandas[_sireId];\n        Panda storage matron = pandas[_matronId];\n        matron.siringWithId = uint32(_sireId);\n        _triggerCooldown(sire);\n        _triggerCooldown(matron);\n        delete sireAllowedToAddress[_matronId];\n        delete sireAllowedToAddress[_sireId];\n        pregnantPandas++;\n        childOwner[_matronId] = _owner;\n        Pregnant(pandaIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock);\n    }\n2817-function_definition-490-502", method="_breedWith(uint256 _matronId,uint256 _sireId,address _owner)", type_label=function_definition];
2833 [label="490_ (_matronId, _sireId) = _exchangeMatronSireId(_matronId, _sireId);\n2833-expression_statement-491-491", method="_breedWith(uint256 _matronId,uint256 _sireId,address _owner)", type_label=expression_statement];
2844 [label="491_ Panda storage sire = pandas[_sireId];\n2844-new_variable-492-492", method="_breedWith(uint256 _matronId,uint256 _sireId,address _owner)", type_label=new_variable];
2853 [label="492_ Panda storage matron = pandas[_matronId];\n2853-new_variable-493-493", method="_breedWith(uint256 _matronId,uint256 _sireId,address _owner)", type_label=new_variable];
2862 [label="493_ matron.siringWithId = uint32(_sireId);\n2862-expression_statement-494-494", method="_breedWith(uint256 _matronId,uint256 _sireId,address _owner)", type_label=expression_statement];
2870 [label="494_ _triggerCooldown(sire);\n2870-expression_statement-495-495", method="_breedWith(uint256 _matronId,uint256 _sireId,address _owner)", type_label=expression_statement];
2875 [label="495_ _triggerCooldown(matron);\n2875-expression_statement-496-496", method="_breedWith(uint256 _matronId,uint256 _sireId,address _owner)", type_label=expression_statement];
2880 [label="496_ delete sireAllowedToAddress[_matronId];\n2880-expression_statement-497-497", method="_breedWith(uint256 _matronId,uint256 _sireId,address _owner)", type_label=expression_statement];
2885 [label="497_ delete sireAllowedToAddress[_sireId];\n2885-expression_statement-498-498", method="_breedWith(uint256 _matronId,uint256 _sireId,address _owner)", type_label=expression_statement];
2890 [label="498_ pregnantPandas++;\n2890-expression_statement-499-499", method="_breedWith(uint256 _matronId,uint256 _sireId,address _owner)", type_label=expression_statement];
2891 [label="498_ pregnantPandas++\n2891-expression_statement-499-499", method="_breedWith(uint256 _matronId,uint256 _sireId,address _owner)", type_label=expression_statement];
2893 [label="499_ childOwner[_matronId] = _owner;\n2893-expression_statement-500-500", method="_breedWith(uint256 _matronId,uint256 _sireId,address _owner)", type_label=expression_statement];
2899 [label="500_ Pregnant(pandaIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock);\n2899-expression_statement-501-501", method="_breedWith(uint256 _matronId,uint256 _sireId,address _owner)", type_label=expression_statement];
2914 [label="502_ function breedWithAuto(uint256 _matronId, uint256 _sireId)\n    external\n    payable\n    whenNotPaused {\n        require(msg.value >= autoBirthFee);\n        require(_owns(msg.sender, _matronId));\n        require(_isSiringPermitted(_sireId, _matronId));\n        Panda storage matron = pandas[_matronId];\n        require(_isReadyToBreed(matron));\n        Panda storage sire = pandas[_sireId];\n        require(_isReadyToBreed(sire));\n        require(_isValidMatingPair(\n            matron,\n            _matronId,\n            sire,\n            _sireId\n        ));\n        _breedWith(_matronId, _sireId, msg.sender);\n    }\n2914-function_definition-503-521", method="breedWithAuto(uint256 _matronId,uint256 _sireId)", type_label=function_definition];
2926 [label="505_ whenNotPaused\n2926-expression_statement-506-506", method="breedWithAuto(uint256 _matronId,uint256 _sireId)", type_label=expression_statement];
2929 [label="506_ require(msg.value >= autoBirthFee);\n2929-expression_statement-507-507", method="breedWithAuto(uint256 _matronId,uint256 _sireId)", type_label=expression_statement];
2938 [label="507_ require(_owns(msg.sender, _matronId));\n2938-expression_statement-508-508", method="breedWithAuto(uint256 _matronId,uint256 _sireId)", type_label=expression_statement];
2950 [label="508_ require(_isSiringPermitted(_sireId, _matronId));\n2950-expression_statement-509-509", method="breedWithAuto(uint256 _matronId,uint256 _sireId)", type_label=expression_statement];
2960 [label="509_ Panda storage matron = pandas[_matronId];\n2960-new_variable-510-510", method="breedWithAuto(uint256 _matronId,uint256 _sireId)", type_label=new_variable];
2969 [label="510_ require(_isReadyToBreed(matron));\n2969-expression_statement-511-511", method="breedWithAuto(uint256 _matronId,uint256 _sireId)", type_label=expression_statement];
2977 [label="511_ Panda storage sire = pandas[_sireId];\n2977-new_variable-512-512", method="breedWithAuto(uint256 _matronId,uint256 _sireId)", type_label=new_variable];
2986 [label="512_ require(_isReadyToBreed(sire));\n2986-expression_statement-513-513", method="breedWithAuto(uint256 _matronId,uint256 _sireId)", type_label=expression_statement];
2994 [label="513_ require(_isValidMatingPair(\n            matron,\n            _matronId,\n            sire,\n            _sireId\n        ));\n2994-expression_statement-514-519", method="breedWithAuto(uint256 _matronId,uint256 _sireId)", type_label=expression_statement];
3008 [label="519_ _breedWith(_matronId, _sireId, msg.sender);\n3008-expression_statement-520-520", method="breedWithAuto(uint256 _matronId,uint256 _sireId)", type_label=expression_statement];
3019 [label="521_ function giveBirth(uint256 _matronId, uint256[2] _childGenes, uint256[2] _factors)\n    external\n    whenNotPaused\n    onlyCLevel\n    returns(uint256) {\n        Panda storage matron = pandas[_matronId];\n        require(matron.birthTime != 0);\n        require(_isReadyToGiveBirth(matron));\n        uint256 sireId = matron.siringWithId;\n        Panda storage sire = pandas[sireId];\n        uint16 parentGen = matron.generation;\n        if (sire.generation > matron.generation) {\n            parentGen = sire.generation;\n        }\n        uint256[2] memory childGenes = _childGenes;\n        uint256 kittenId = 0;\n        uint256 probability = (geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)) / 2 + _factors[0];\n        if (probability >= (parentGen + 1) * _factors[1]) {\n            probability = probability - (parentGen + 1) * _factors[1];\n        } else {\n            probability = 0;\n        }\n        if (parentGen == 0 && gen0CreatedCount == GEN0_TOTAL_COUNT) {\n            probability = 0;\n        }\n        if (uint256(keccak256(block.blockhash(block.number - 2), now)) % 100 < probability) {\n            address owner = childOwner[_matronId];\n            kittenId = _createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n        } else {\n            Abortion(pandaIndexToOwner[_matronId], _matronId, sireId);\n        }\n        delete matron.siringWithId;\n        pregnantPandas--;\n        msg.sender.send(autoBirthFee);\n        delete childOwner[_matronId];\n        return kittenId;\n    }\n3019-function_definition-522-558", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=function_definition];
3038 [label="523_ whenNotPaused\n3038-expression_statement-524-524", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3040 [label="524_ onlyCLevel\n3040-expression_statement-525-525", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3047 [label="526_ Panda storage matron = pandas[_matronId];\n3047-new_variable-527-527", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=new_variable];
3056 [label="527_ require(matron.birthTime != 0);\n3056-expression_statement-528-528", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3065 [label="528_ require(_isReadyToGiveBirth(matron));\n3065-expression_statement-529-529", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3073 [label="529_ uint256 sireId = matron.siringWithId;\n3073-new_variable-530-530", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=new_variable];
3081 [label="530_ Panda storage sire = pandas[sireId];\n3081-new_variable-531-531", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=new_variable];
3090 [label="531_ uint16 parentGen = matron.generation;\n3090-new_variable-532-532", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=new_variable];
3098 [label="532_ if_sire.generation > matron.generation\n3098-if-533-535", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=if];
9908 [label="532_ end_if", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=end_if];
3107 [label="533_ parentGen = sire.generation;\n3107-expression_statement-534-534", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3113 [label="535_ uint256[2] memory childGenes = _childGenes;\n3113-new_variable-536-536", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=new_variable];
3121 [label="536_ uint256 kittenId = 0;\n3121-new_variable-537-537", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=new_variable];
3127 [label="537_ uint256 probability = (geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)) / 2 + _factors[0];\n3127-new_variable-538-538", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=new_variable];
3156 [label="538_ if\n3156-if-539-543", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=if];
9966 [label="538_ end_if", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=end_if];
3168 [label="539_ probability = probability - (parentGen + 1) * _factors[1];\n3168-expression_statement-540-540", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3182 [label="541_ probability = 0;\n3182-expression_statement-542-542", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3186 [label="543_ if_parentGen == 0 && gen0CreatedCount == GEN0_TOTAL_COUNT\n3186-if-544-546", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=if];
9996 [label="543_ end_if", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=end_if];
3195 [label="544_ probability = 0;\n3195-expression_statement-545-545", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3199 [label="546_ if_uint256(keccak256(block.blockhash(block.number - 2), now)) % 100 < probability\n3199-if-547-552", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=if];
10009 [label="546_ end_if", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=end_if];
3222 [label="547_ address owner = childOwner[_matronId];\n3222-new_variable-548-548", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=new_variable];
3230 [label="548_ kittenId = _createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n3230-expression_statement-549-549", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3250 [label="550_ Abortion(pandaIndexToOwner[_matronId], _matronId, sireId);\n3250-expression_statement-551-551", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3261 [label="552_ delete matron.siringWithId;\n3261-expression_statement-553-553", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3266 [label="553_ pregnantPandas--;\n3266-expression_statement-554-554", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3267 [label="553_ pregnantPandas--\n3267-expression_statement-554-554", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3269 [label="554_ msg.sender.send(autoBirthFee);\n3269-expression_statement-555-555", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3278 [label="555_ delete childOwner[_matronId];\n3278-expression_statement-556-556", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=expression_statement];
3283 [label="556_ return kittenId;\n3283-return-557-557", method="giveBirth(uint256 _matronId,uint256[2] _childGenes,uint256[2] _factors)", type_label=return];
3288 [label="560_ struct Auction {\n        address seller;\n        uint128 startingPrice;\n        uint128 endingPrice;\n        uint64 duration;\n        uint64 startedAt;\n        uint64 isGen0;\n    }\n3288-expression_statement-561-568", method="Auction()", type_label=expression_statement];
3314 [label="568_ ERC721 public nonFungibleContract;\n3314-new_variable-569-569", method="", type_label=new_variable];
3320 [label="569_ uint256 public ownerCut;\n3320-new_variable-570-570", method="", type_label=new_variable];
3325 [label="570_ mapping (uint256 => Auction) tokenIdToAuction;\n3325-new_variable-571-571", method="", type_label=new_variable];
3370 [label="574_ function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\n    }\n3370-function_definition-575-577", method="_owns(address _claimant,uint256 _tokenId)", type_label=function_definition];
3387 [label="575_ return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\n3387-return-576-576", method="_owns(address _claimant,uint256 _tokenId)", type_label=return];
3397 [label="577_ function _escrow(address _owner, uint256 _tokenId) internal {\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\n    }\n3397-function_definition-578-580", method="_escrow(address _owner,uint256 _tokenId)", type_label=function_definition];
3409 [label="578_ nonFungibleContract.transferFrom(_owner, this, _tokenId);\n3409-expression_statement-579-579", method="_escrow(address _owner,uint256 _tokenId)", type_label=expression_statement];
3420 [label="580_ function _transfer(address _receiver, uint256 _tokenId) internal {\n        nonFungibleContract.transfer(_receiver, _tokenId);\n    }\n3420-function_definition-581-583", method="_transfer(address _receiver,uint256 _tokenId)", type_label=function_definition];
3432 [label="581_ nonFungibleContract.transfer(_receiver, _tokenId);\n3432-expression_statement-582-582", method="_transfer(address _receiver,uint256 _tokenId)", type_label=expression_statement];
3441 [label="583_ function _addAuction(uint256 _tokenId, Auction _auction) internal {\n        require(_auction.duration >= 1 minutes);\n        tokenIdToAuction[_tokenId] = _auction;\n        AuctionCreated(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration)\n        );\n    }\n3441-function_definition-584-593", method="_addAuction(uint256 _tokenId,Auction _auction)", type_label=function_definition];
3454 [label="584_ require(_auction.duration >= 1 minutes);\n3454-expression_statement-585-585", method="_addAuction(uint256 _tokenId,Auction _auction)", type_label=expression_statement];
3464 [label="585_ tokenIdToAuction[_tokenId] = _auction;\n3464-expression_statement-586-586", method="_addAuction(uint256 _tokenId,Auction _auction)", type_label=expression_statement];
3470 [label="586_ AuctionCreated(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration)\n        );\n3470-expression_statement-587-592", method="_addAuction(uint256 _tokenId,Auction _auction)", type_label=expression_statement];
3495 [label="593_ function _cancelAuction(uint256 _tokenId, address _seller) internal {\n        _removeAuction(_tokenId);\n        _transfer(_seller, _tokenId);\n        AuctionCancelled(_tokenId);\n    }\n3495-function_definition-594-598", method="_cancelAuction(uint256 _tokenId,address _seller)", type_label=function_definition];
3507 [label="594_ _removeAuction(_tokenId);\n3507-expression_statement-595-595", method="_cancelAuction(uint256 _tokenId,address _seller)", type_label=expression_statement];
3512 [label="595_ _transfer(_seller, _tokenId);\n3512-expression_statement-596-596", method="_cancelAuction(uint256 _tokenId,address _seller)", type_label=expression_statement];
3519 [label="596_ AuctionCancelled(_tokenId);\n3519-expression_statement-597-597", method="_cancelAuction(uint256 _tokenId,address _seller)", type_label=expression_statement];
3524 [label="598_ function _bid(uint256 _tokenId, uint256 _bidAmount)\n        internal\n        returns (uint256)\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n        address seller = auction.seller;\n        _removeAuction(_tokenId);\n        if (price > 0) {\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n            seller.transfer(sellerProceeds);\n        }\n        uint256 bidExcess = _bidAmount - price;\n        msg.sender.transfer(bidExcess);\n        AuctionSuccessful(_tokenId, price, msg.sender);\n        return price;\n    }\n3524-function_definition-599-618", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=function_definition];
3540 [label="602_ Auction storage auction = tokenIdToAuction[_tokenId];\n3540-new_variable-603-603", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=new_variable];
3549 [label="603_ require(_isOnAuction(auction));\n3549-expression_statement-604-604", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=expression_statement];
3557 [label="604_ uint256 price = _currentPrice(auction);\n3557-new_variable-605-605", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=new_variable];
3566 [label="605_ require(_bidAmount >= price);\n3566-expression_statement-606-606", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=expression_statement];
3573 [label="606_ address seller = auction.seller;\n3573-new_variable-607-607", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=new_variable];
3581 [label="607_ _removeAuction(_tokenId);\n3581-expression_statement-608-608", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=expression_statement];
3586 [label="608_ if_price > 0\n3586-if-609-613", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=if];
10396 [label="608_ end_if", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=end_if];
3591 [label="609_ uint256 auctioneerCut = _computeCut(price);\n3591-new_variable-610-610", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=new_variable];
3600 [label="610_ uint256 sellerProceeds = price - auctioneerCut;\n3600-new_variable-611-611", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=new_variable];
3608 [label="611_ seller.transfer(sellerProceeds);\n3608-expression_statement-612-612", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=expression_statement];
3615 [label="613_ uint256 bidExcess = _bidAmount - price;\n3615-new_variable-614-614", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=new_variable];
3623 [label="614_ msg.sender.transfer(bidExcess);\n3623-expression_statement-615-615", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=expression_statement];
3632 [label="615_ AuctionSuccessful(_tokenId, price, msg.sender);\n3632-expression_statement-616-616", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=expression_statement];
3643 [label="616_ return price;\n3643-return-617-617", method="_bid(uint256 _tokenId,uint256 _bidAmount)", type_label=return];
3645 [label="618_ function _removeAuction(uint256 _tokenId) internal {\n        delete tokenIdToAuction[_tokenId];\n    }\n3645-function_definition-619-621", method="_removeAuction(uint256 _tokenId)", type_label=function_definition];
3653 [label="619_ delete tokenIdToAuction[_tokenId];\n3653-expression_statement-620-620", method="_removeAuction(uint256 _tokenId)", type_label=expression_statement];
3658 [label="621_ function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n        return (_auction.startedAt > 0);\n    }\n3658-function_definition-622-624", method="_isOnAuction(Auction storage _auction)", type_label=function_definition];
3672 [label="622_ return (_auction.startedAt > 0);\n3672-return-623-623", method="_isOnAuction(Auction storage _auction)", type_label=return];
3679 [label="624_ function _currentPrice(Auction storage _auction)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 secondsPassed = 0;\n        if (now > _auction.startedAt) {\n            secondsPassed = now - _auction.startedAt;\n        }\n        return _computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        );\n    }\n3679-function_definition-625-640", method="_currentPrice(Auction storage _auction)", type_label=function_definition];
3693 [label="629_ uint256 secondsPassed = 0;\n3693-new_variable-630-630", method="_currentPrice(Auction storage _auction)", type_label=new_variable];
3699 [label="630_ if_now > _auction.startedAt\n3699-if-631-633", method="_currentPrice(Auction storage _auction)", type_label=if];
10509 [label="630_ end_if", method="_currentPrice(Auction storage _auction)", type_label=end_if];
3706 [label="631_ secondsPassed = now - _auction.startedAt;\n3706-expression_statement-632-632", method="_currentPrice(Auction storage _auction)", type_label=expression_statement];
3714 [label="633_ return _computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        );\n3714-return-634-639", method="_currentPrice(Auction storage _auction)", type_label=return];
3731 [label="640_ function _computeCurrentPrice(\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        uint256 _secondsPassed\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        if (_secondsPassed >= _duration) {\n            return _endingPrice;\n        } else {\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n            return uint256(currentPrice);\n        }\n    }\n3731-function_definition-641-659", method="_computeCurrentPrice(uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,uint256 _secondsPassed)", type_label=function_definition];
3756 [label="650_ if__secondsPassed >= _duration\n3756-if-651-658", method="_computeCurrentPrice(uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,uint256 _secondsPassed)", type_label=if];
10566 [label="650_ end_if", method="_computeCurrentPrice(uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,uint256 _secondsPassed)", type_label=end_if];
3761 [label="651_ return _endingPrice;\n3761-return-652-652", method="_computeCurrentPrice(uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,uint256 _secondsPassed)", type_label=return];
3764 [label="653_ int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n3764-new_variable-654-654", method="_computeCurrentPrice(uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,uint256 _secondsPassed)", type_label=new_variable];
3776 [label="654_ int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n3776-new_variable-655-655", method="_computeCurrentPrice(uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,uint256 _secondsPassed)", type_label=new_variable];
3790 [label="655_ int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n3790-new_variable-656-656", method="_computeCurrentPrice(uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,uint256 _secondsPassed)", type_label=new_variable];
3800 [label="656_ return uint256(currentPrice);\n3800-return-657-657", method="_computeCurrentPrice(uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,uint256 _secondsPassed)", type_label=return];
3804 [label="659_ function _computeCut(uint256 _price) internal view returns (uint256) {\n        return _price * ownerCut / 10000;\n    }\n3804-function_definition-660-662", method="_computeCut(uint256 _price)", type_label=function_definition];
3817 [label="660_ return _price * ownerCut / 10000;\n3817-return-661-661", method="_computeCut(uint256 _price)", type_label=return];
3833 [label="666_ bool public paused = false;\n3833-new_variable-667-667", method="", type_label=new_variable];
3840 [label="667_ modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n3840-expression_statement-668-671", method="", type_label=expression_statement];
3843 [label="668_ require(!paused);\n3843-expression_statement-669-669", method="", type_label=expression_statement];
3849 [label="669_ _;\n3849-expression_statement-670-670", method="", type_label=expression_statement];
3851 [label="671_ modifier whenPaused {\n    require(paused);\n    _;\n  }\n3851-expression_statement-672-675", method="", type_label=expression_statement];
3854 [label="672_ require(paused);\n3854-expression_statement-673-673", method="", type_label=expression_statement];
3859 [label="673_ _;\n3859-expression_statement-674-674", method="", type_label=expression_statement];
3861 [label="675_ function pause() onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    Pause();\n    return true;\n  }\n3861-function_definition-676-680", method="pause()", type_label=function_definition];
3863 [label="675_ onlyOwner\n3863-expression_statement-676-676", method="pause()", type_label=expression_statement];
3865 [label="675_ whenNotPaused\n3865-expression_statement-676-676", method="pause()", type_label=expression_statement];
3872 [label="676_ paused = true;\n3872-expression_statement-677-677", method="pause()", type_label=expression_statement];
3877 [label="677_ Pause();\n3877-expression_statement-678-678", method="pause()", type_label=expression_statement];
3880 [label="678_ return true;\n3880-return-679-679", method="pause()", type_label=return];
3883 [label="680_ function unpause() onlyOwner whenPaused returns (bool) {\n    paused = false;\n    Unpause();\n    return true;\n  }\n3883-function_definition-681-685", method="unpause()", type_label=function_definition];
3885 [label="680_ onlyOwner\n3885-expression_statement-681-681", method="unpause()", type_label=expression_statement];
3887 [label="680_ whenPaused\n3887-expression_statement-681-681", method="unpause()", type_label=expression_statement];
3894 [label="681_ paused = false;\n3894-expression_statement-682-682", method="unpause()", type_label=expression_statement];
3899 [label="682_ Unpause();\n3899-expression_statement-683-683", method="unpause()", type_label=expression_statement];
3902 [label="683_ return true;\n3902-return-684-684", method="unpause()", type_label=return];
3914 [label="687_ bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\n3914-new_variable-688-688", method="", type_label=new_variable];
3921 [label="688_ function ClockAuction(address _nftAddress, uint256 _cut) public {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n        ERC721 candidateContract = ERC721(_nftAddress);\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\n        nonFungibleContract = candidateContract;\n    }\n3921-function_definition-689-695", method="ClockAuction(address _nftAddress,uint256 _cut)", type_label=function_definition];
3933 [label="689_ require(_cut <= 10000);\n3933-expression_statement-690-690", method="ClockAuction(address _nftAddress,uint256 _cut)", type_label=expression_statement];
3940 [label="690_ ownerCut = _cut;\n3940-expression_statement-691-691", method="ClockAuction(address _nftAddress,uint256 _cut)", type_label=expression_statement];
3944 [label="691_ ERC721 candidateContract = ERC721(_nftAddress);\n3944-new_variable-692-692", method="ClockAuction(address _nftAddress,uint256 _cut)", type_label=new_variable];
3954 [label="692_ require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\n3954-expression_statement-693-693", method="ClockAuction(address _nftAddress,uint256 _cut)", type_label=expression_statement];
3964 [label="693_ nonFungibleContract = candidateContract;\n3964-expression_statement-694-694", method="ClockAuction(address _nftAddress,uint256 _cut)", type_label=expression_statement];
3968 [label="695_ function withdrawBalance() external {\n        address nftAddress = address(nonFungibleContract);\n        require(\n            msg.sender == owner ||\n            msg.sender == nftAddress\n        );\n        bool res = nftAddress.send(this.balance);\n    }\n3968-function_definition-696-703", method="withdrawBalance()", type_label=function_definition];
3972 [label="696_ address nftAddress = address(nonFungibleContract);\n3972-new_variable-697-697", method="withdrawBalance()", type_label=new_variable];
3980 [label="697_ require(\n            msg.sender == owner ||\n            msg.sender == nftAddress\n        );\n3980-expression_statement-698-701", method="withdrawBalance()", type_label=expression_statement];
3995 [label="701_ bool res = nftAddress.send(this.balance);\n3995-new_variable-702-702", method="withdrawBalance()", type_label=new_variable];
4008 [label="703_ function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n        whenNotPaused\n    {\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n        require(_owns(msg.sender, _tokenId));\n        _escrow(msg.sender, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }\n4008-function_definition-704-728", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=function_definition];
4031 [label="711_ whenNotPaused\n4031-expression_statement-712-712", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4034 [label="713_ require(_startingPrice == uint256(uint128(_startingPrice)));\n4034-expression_statement-714-714", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4045 [label="714_ require(_endingPrice == uint256(uint128(_endingPrice)));\n4045-expression_statement-715-715", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4056 [label="715_ require(_duration == uint256(uint64(_duration)));\n4056-expression_statement-716-716", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4067 [label="716_ require(_owns(msg.sender, _tokenId));\n4067-expression_statement-717-717", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4079 [label="717_ _escrow(msg.sender, _tokenId);\n4079-expression_statement-718-718", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4088 [label="718_ Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n4088-new_variable-719-726", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=new_variable];
4116 [label="726_ _addAuction(_tokenId, auction);\n4116-expression_statement-727-727", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4123 [label="728_ function bid(uint256 _tokenId)\n        external\n        payable\n        whenNotPaused\n    {\n        _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n    }\n4123-function_definition-729-736", method="bid(uint256 _tokenId)", type_label=function_definition];
4131 [label="731_ whenNotPaused\n4131-expression_statement-732-732", method="bid(uint256 _tokenId)", type_label=expression_statement];
4134 [label="733_ _bid(_tokenId, msg.value);\n4134-expression_statement-734-734", method="bid(uint256 _tokenId)", type_label=expression_statement];
4143 [label="734_ _transfer(msg.sender, _tokenId);\n4143-expression_statement-735-735", method="bid(uint256 _tokenId)", type_label=expression_statement];
4152 [label="736_ function cancelAuction(uint256 _tokenId)\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n    }\n4152-function_definition-737-745", method="cancelAuction(uint256 _tokenId)", type_label=function_definition];
4160 [label="739_ Auction storage auction = tokenIdToAuction[_tokenId];\n4160-new_variable-740-740", method="cancelAuction(uint256 _tokenId)", type_label=new_variable];
4169 [label="740_ require(_isOnAuction(auction));\n4169-expression_statement-741-741", method="cancelAuction(uint256 _tokenId)", type_label=expression_statement];
4177 [label="741_ address seller = auction.seller;\n4177-new_variable-742-742", method="cancelAuction(uint256 _tokenId)", type_label=new_variable];
4185 [label="742_ require(msg.sender == seller);\n4185-expression_statement-743-743", method="cancelAuction(uint256 _tokenId)", type_label=expression_statement];
4194 [label="743_ _cancelAuction(_tokenId, seller);\n4194-expression_statement-744-744", method="cancelAuction(uint256 _tokenId)", type_label=expression_statement];
4201 [label="745_ function cancelAuctionWhenPaused(uint256 _tokenId)\n        whenPaused\n        onlyOwner\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        _cancelAuction(_tokenId, auction.seller);\n    }\n4201-function_definition-746-754", method="cancelAuctionWhenPaused(uint256 _tokenId)", type_label=function_definition];
4207 [label="746_ whenPaused\n4207-expression_statement-747-747", method="cancelAuctionWhenPaused(uint256 _tokenId)", type_label=expression_statement];
4209 [label="747_ onlyOwner\n4209-expression_statement-748-748", method="cancelAuctionWhenPaused(uint256 _tokenId)", type_label=expression_statement];
4213 [label="750_ Auction storage auction = tokenIdToAuction[_tokenId];\n4213-new_variable-751-751", method="cancelAuctionWhenPaused(uint256 _tokenId)", type_label=new_variable];
4222 [label="751_ require(_isOnAuction(auction));\n4222-expression_statement-752-752", method="cancelAuctionWhenPaused(uint256 _tokenId)", type_label=expression_statement];
4230 [label="752_ _cancelAuction(_tokenId, auction.seller);\n4230-expression_statement-753-753", method="cancelAuctionWhenPaused(uint256 _tokenId)", type_label=expression_statement];
4239 [label="754_ function getAuction(uint256 _tokenId)\n        external\n        view\n        returns\n    (\n        address seller,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        uint256 startedAt\n    ) {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return (\n            auction.seller,\n            auction.startingPrice,\n            auction.endingPrice,\n            auction.duration,\n            auction.startedAt\n        );\n    }\n4239-function_definition-755-775", method="getAuction(uint256 _tokenId)", type_label=function_definition];
4269 [label="765_ Auction storage auction = tokenIdToAuction[_tokenId];\n4269-new_variable-766-766", method="getAuction(uint256 _tokenId)", type_label=new_variable];
4278 [label="766_ require(_isOnAuction(auction));\n4278-expression_statement-767-767", method="getAuction(uint256 _tokenId)", type_label=expression_statement];
4286 [label="767_ return (\n            auction.seller,\n            auction.startingPrice,\n            auction.endingPrice,\n            auction.duration,\n            auction.startedAt\n        );\n4286-return-768-774", method="getAuction(uint256 _tokenId)", type_label=return];
4303 [label="775_ function getCurrentPrice(uint256 _tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }\n4303-function_definition-776-784", method="getCurrentPrice(uint256 _tokenId)", type_label=function_definition];
4316 [label="780_ Auction storage auction = tokenIdToAuction[_tokenId];\n4316-new_variable-781-781", method="getCurrentPrice(uint256 _tokenId)", type_label=new_variable];
4325 [label="781_ require(_isOnAuction(auction));\n4325-expression_statement-782-782", method="getCurrentPrice(uint256 _tokenId)", type_label=expression_statement];
4333 [label="782_ return _currentPrice(auction);\n4333-return-783-783", method="getCurrentPrice(uint256 _tokenId)", type_label=return];
4344 [label="786_ bool public isSiringClockAuction = true;\n4344-new_variable-787-787", method="", type_label=new_variable];
4351 [label="787_ function SiringClockAuction(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {}\n4351-function_definition-788-789", method="SiringClockAuction(address _nftAddr,uint256 _cut)", type_label=function_definition];
4362 [label="788_ ClockAuction(_nftAddr, _cut)\n4362-expression_statement-789-789", method="SiringClockAuction(address _nftAddr,uint256 _cut)", type_label=expression_statement];
4369 [label="789_ function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }\n4369-function_definition-790-813", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=function_definition];
4393 [label="798_ require(_startingPrice == uint256(uint128(_startingPrice)));\n4393-expression_statement-799-799", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4404 [label="799_ require(_endingPrice == uint256(uint128(_endingPrice)));\n4404-expression_statement-800-800", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4415 [label="800_ require(_duration == uint256(uint64(_duration)));\n4415-expression_statement-801-801", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4426 [label="801_ require(msg.sender == address(nonFungibleContract));\n4426-expression_statement-802-802", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4437 [label="802_ _escrow(_seller, _tokenId);\n4437-expression_statement-803-803", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4444 [label="803_ Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n4444-new_variable-804-811", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=new_variable];
4472 [label="811_ _addAuction(_tokenId, auction);\n4472-expression_statement-812-812", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4479 [label="813_ function bid(uint256 _tokenId)\n        external\n        payable\n    {\n        require(msg.sender == address(nonFungibleContract));\n        address seller = tokenIdToAuction[_tokenId].seller;\n        _bid(_tokenId, msg.value);\n        _transfer(seller, _tokenId);\n    }\n4479-function_definition-814-822", method="bid(uint256 _tokenId)", type_label=function_definition];
4488 [label="817_ require(msg.sender == address(nonFungibleContract));\n4488-expression_statement-818-818", method="bid(uint256 _tokenId)", type_label=expression_statement];
4499 [label="818_ address seller = tokenIdToAuction[_tokenId].seller;\n4499-new_variable-819-819", method="bid(uint256 _tokenId)", type_label=new_variable];
4509 [label="819_ _bid(_tokenId, msg.value);\n4509-expression_statement-820-820", method="bid(uint256 _tokenId)", type_label=expression_statement];
4518 [label="820_ _transfer(seller, _tokenId);\n4518-expression_statement-821-821", method="bid(uint256 _tokenId)", type_label=expression_statement];
4531 [label="824_ bool public isSaleClockAuction = true;\n4531-new_variable-825-825", method="", type_label=new_variable];
4538 [label="825_ uint256 public gen0SaleCount;\n4538-new_variable-826-826", method="", type_label=new_variable];
4543 [label="826_ uint256[5] public lastGen0SalePrices;\n4543-new_variable-827-827", method="", type_label=new_variable];
4550 [label="827_ uint256 public constant SurpriseValue = 10 finney;\n4550-new_variable-828-828", method="", type_label=new_variable];
4557 [label="828_ uint256[] CommonPanda;\n4557-new_variable-829-829", method="", type_label=new_variable];
4562 [label="829_ uint256[] RarePanda;\n4562-new_variable-830-830", method="", type_label=new_variable];
4567 [label="830_ uint256   CommonPandaIndex;\n4567-new_variable-831-831", method="", type_label=new_variable];
4571 [label="831_ uint256   RarePandaIndex;\n4571-new_variable-832-832", method="", type_label=new_variable];
4575 [label="832_ function SaleClockAuction(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {\n            CommonPandaIndex = 1;\n            RarePandaIndex   = 1;\n    }\n4575-function_definition-833-837", method="SaleClockAuction(address _nftAddr,uint256 _cut)", type_label=function_definition];
4586 [label="833_ ClockAuction(_nftAddr, _cut)\n4586-expression_statement-834-834", method="SaleClockAuction(address _nftAddr,uint256 _cut)", type_label=expression_statement];
4593 [label="834_ CommonPandaIndex = 1;\n4593-expression_statement-835-835", method="SaleClockAuction(address _nftAddr,uint256 _cut)", type_label=expression_statement];
4597 [label="835_ RarePandaIndex   = 1;\n4597-expression_statement-836-836", method="SaleClockAuction(address _nftAddr,uint256 _cut)", type_label=expression_statement];
4601 [label="837_ function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }\n4601-function_definition-838-861", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=function_definition];
4625 [label="846_ require(_startingPrice == uint256(uint128(_startingPrice)));\n4625-expression_statement-847-847", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4636 [label="847_ require(_endingPrice == uint256(uint128(_endingPrice)));\n4636-expression_statement-848-848", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4647 [label="848_ require(_duration == uint256(uint64(_duration)));\n4647-expression_statement-849-849", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4658 [label="849_ require(msg.sender == address(nonFungibleContract));\n4658-expression_statement-850-850", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4669 [label="850_ _escrow(_seller, _tokenId);\n4669-expression_statement-851-851", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4676 [label="851_ Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n4676-new_variable-852-859", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=new_variable];
4704 [label="859_ _addAuction(_tokenId, auction);\n4704-expression_statement-860-860", method="createAuction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4711 [label="861_ function createGen0Auction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            1\n        );\n        _addAuction(_tokenId, auction);\n    }\n4711-function_definition-862-885", method="createGen0Auction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=function_definition];
4735 [label="870_ require(_startingPrice == uint256(uint128(_startingPrice)));\n4735-expression_statement-871-871", method="createGen0Auction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4746 [label="871_ require(_endingPrice == uint256(uint128(_endingPrice)));\n4746-expression_statement-872-872", method="createGen0Auction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4757 [label="872_ require(_duration == uint256(uint64(_duration)));\n4757-expression_statement-873-873", method="createGen0Auction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4768 [label="873_ require(msg.sender == address(nonFungibleContract));\n4768-expression_statement-874-874", method="createGen0Auction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4779 [label="874_ _escrow(_seller, _tokenId);\n4779-expression_statement-875-875", method="createGen0Auction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4786 [label="875_ Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            1\n        );\n4786-new_variable-876-883", method="createGen0Auction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=new_variable];
4814 [label="883_ _addAuction(_tokenId, auction);\n4814-expression_statement-884-884", method="createGen0Auction(uint256 _tokenId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
4821 [label="885_ function bid(uint256 _tokenId)\n        external\n        payable\n    {\n        uint64 isGen0 = tokenIdToAuction[_tokenId].isGen0;\n        uint256 price = _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n        if (isGen0 == 1) {\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\n            gen0SaleCount++;\n        }\n    }\n4821-function_definition-886-897", method="bid(uint256 _tokenId)", type_label=function_definition];
4830 [label="889_ uint64 isGen0 = tokenIdToAuction[_tokenId].isGen0;\n4830-new_variable-890-890", method="bid(uint256 _tokenId)", type_label=new_variable];
4840 [label="890_ uint256 price = _bid(_tokenId, msg.value);\n4840-new_variable-891-891", method="bid(uint256 _tokenId)", type_label=new_variable];
4853 [label="891_ _transfer(msg.sender, _tokenId);\n4853-expression_statement-892-892", method="bid(uint256 _tokenId)", type_label=expression_statement];
4862 [label="892_ if_isGen0 == 1\n4862-if-893-896", method="bid(uint256 _tokenId)", type_label=if];
11672 [label="892_ end_if", method="bid(uint256 _tokenId)", type_label=end_if];
4867 [label="893_ lastGen0SalePrices[gen0SaleCount % 5] = price;\n4867-expression_statement-894-894", method="bid(uint256 _tokenId)", type_label=expression_statement];
4875 [label="894_ gen0SaleCount++;\n4875-expression_statement-895-895", method="bid(uint256 _tokenId)", type_label=expression_statement];
4876 [label="894_ gen0SaleCount++\n4876-expression_statement-895-895", method="bid(uint256 _tokenId)", type_label=expression_statement];
4878 [label="897_ function createPanda(uint256 _tokenId,uint256 _type)\n        external\n    {\n        require(msg.sender == address(nonFungibleContract));\n        if (_type == 0) {\n            CommonPanda.push(_tokenId);\n        }else {\n            RarePanda.push(_tokenId);\n        }\n    }\n4878-function_definition-898-907", method="createPanda(uint256 _tokenId,uint256 _type)", type_label=function_definition];
4890 [label="900_ require(msg.sender == address(nonFungibleContract));\n4890-expression_statement-901-901", method="createPanda(uint256 _tokenId,uint256 _type)", type_label=expression_statement];
4901 [label="901_ if__type == 0\n4901-if-902-906", method="createPanda(uint256 _tokenId,uint256 _type)", type_label=if];
11711 [label="901_ end_if", method="createPanda(uint256 _tokenId,uint256 _type)", type_label=end_if];
4906 [label="902_ CommonPanda.push(_tokenId);\n4906-expression_statement-903-903", method="createPanda(uint256 _tokenId,uint256 _type)", type_label=expression_statement];
4914 [label="904_ RarePanda.push(_tokenId);\n4914-expression_statement-905-905", method="createPanda(uint256 _tokenId,uint256 _type)", type_label=expression_statement];
4921 [label="907_ function surprisePanda()\n        external\n        payable\n    {\n        bytes32 bHash = keccak256(block.blockhash(block.number),block.blockhash(block.number-1));\n        uint256 PandaIndex;\n        if (bHash[25] > 0xC8) {\n            require(uint256(RarePanda.length) >= RarePandaIndex);\n            PandaIndex = RarePandaIndex;\n            RarePandaIndex ++;\n        } else{\n            require(uint256(CommonPanda.length) >= CommonPandaIndex);\n            PandaIndex = CommonPandaIndex;\n            CommonPandaIndex ++;\n        }\n        _transfer(msg.sender,PandaIndex);\n    }\n4921-function_definition-908-924", method="surprisePanda()", type_label=function_definition];
4926 [label="911_ bytes32 bHash = keccak256(block.blockhash(block.number),block.blockhash(block.number-1));\n4926-new_variable-912-912", method="surprisePanda()", type_label=new_variable];
4953 [label="912_ uint256 PandaIndex;\n4953-new_variable-913-913", method="surprisePanda()", type_label=new_variable];
4958 [label="913_ if_bHash[25] > 0xC8\n4958-if-914-922", method="surprisePanda()", type_label=if];
11768 [label="913_ end_if", method="surprisePanda()", type_label=end_if];
4965 [label="914_ require(uint256(RarePanda.length) >= RarePandaIndex);\n4965-expression_statement-915-915", method="surprisePanda()", type_label=expression_statement];
4976 [label="915_ PandaIndex = RarePandaIndex;\n4976-expression_statement-916-916", method="surprisePanda()", type_label=expression_statement];
4980 [label="916_ RarePandaIndex ++;\n4980-expression_statement-917-917", method="surprisePanda()", type_label=expression_statement];
4981 [label="916_ RarePandaIndex ++\n4981-expression_statement-917-917", method="surprisePanda()", type_label=expression_statement];
4984 [label="918_ require(uint256(CommonPanda.length) >= CommonPandaIndex);\n4984-expression_statement-919-919", method="surprisePanda()", type_label=expression_statement];
4995 [label="919_ PandaIndex = CommonPandaIndex;\n4995-expression_statement-920-920", method="surprisePanda()", type_label=expression_statement];
4999 [label="920_ CommonPandaIndex ++;\n4999-expression_statement-921-921", method="surprisePanda()", type_label=expression_statement];
5000 [label="920_ CommonPandaIndex ++\n5000-expression_statement-921-921", method="surprisePanda()", type_label=expression_statement];
5002 [label="922_ _transfer(msg.sender,PandaIndex);\n5002-expression_statement-923-923", method="surprisePanda()", type_label=expression_statement];
5011 [label="924_ function packageCount() external view returns(uint256 common,uint256 surprise) {\n        common   = CommonPanda.length + 1 - CommonPandaIndex;\n        surprise = RarePanda.length + 1 - RarePandaIndex;\n    }\n5011-function_definition-925-928", method="packageCount()", type_label=function_definition];
5025 [label="925_ common   = CommonPanda.length + 1 - CommonPandaIndex;\n5025-expression_statement-926-926", method="packageCount()", type_label=expression_statement];
5035 [label="926_ surprise = RarePanda.length + 1 - RarePandaIndex;\n5035-expression_statement-927-927", method="packageCount()", type_label=expression_statement];
5045 [label="928_ function averageGen0SalePrice() external view returns (uint256) {\n        uint256 sum = 0;\n        for (uint256 i = 0; i < 5; i++) {\n            sum += lastGen0SalePrices[i];\n        }\n        return sum / 5;\n    }\n5045-function_definition-929-935", method="averageGen0SalePrice()", type_label=function_definition];
5054 [label="929_ uint256 sum = 0;\n5054-new_variable-930-930", method="averageGen0SalePrice()", type_label=new_variable];
5060 [label="930_ for(i < 5;;i++)\n5060-for-931-933", method="averageGen0SalePrice()", type_label=for];
11870 [label="930_ end_loop", method="averageGen0SalePrice()", type_label=end_loop];
5071 [label="930_ i++\n5071-expression_statement-931-931", method="averageGen0SalePrice()", type_label=expression_statement];
5074 [label="931_ sum += lastGen0SalePrices[i];\n5074-expression_statement-932-932", method="averageGen0SalePrice()", type_label=expression_statement];
5080 [label="933_ return sum / 5;\n5080-return-934-934", method="averageGen0SalePrice()", type_label=return];
5112 [label="938_ bool public isSaleClockAuctionERC20 = true;\n5112-new_variable-939-939", method="", type_label=new_variable];
5119 [label="939_ mapping (uint256 => address) public tokenIdToErc20Address;\n5119-new_variable-940-940", method="", type_label=new_variable];
5126 [label="940_ mapping (address => uint256) public erc20ContractsSwitcher;\n5126-new_variable-941-941", method="", type_label=new_variable];
5133 [label="941_ mapping (address => uint256) public balances;\n5133-new_variable-942-942", method="", type_label=new_variable];
5140 [label="942_ function SaleClockAuctionERC20(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {}\n5140-function_definition-943-944", method="SaleClockAuctionERC20(address _nftAddr,uint256 _cut)", type_label=function_definition];
5151 [label="943_ ClockAuction(_nftAddr, _cut)\n5151-expression_statement-944-944", method="SaleClockAuctionERC20(address _nftAddr,uint256 _cut)", type_label=expression_statement];
5158 [label="944_ function erc20ContractSwitch(address _erc20address, uint256 _onoff) external{\n        require (msg.sender == address(nonFungibleContract));\n        require (_erc20address != address(0));\n        erc20ContractsSwitcher[_erc20address] = _onoff;\n    }\n5158-function_definition-945-949", method="erc20ContractSwitch(address _erc20address,uint256 _onoff)", type_label=function_definition];
5170 [label="945_ require (msg.sender == address(nonFungibleContract));\n5170-expression_statement-946-946", method="erc20ContractSwitch(address _erc20address,uint256 _onoff)", type_label=expression_statement];
5181 [label="946_ require (_erc20address != address(0));\n5181-expression_statement-947-947", method="erc20ContractSwitch(address _erc20address,uint256 _onoff)", type_label=expression_statement];
5190 [label="947_ erc20ContractsSwitcher[_erc20address] = _onoff;\n5190-expression_statement-948-948", method="erc20ContractSwitch(address _erc20address,uint256 _onoff)", type_label=expression_statement];
5196 [label="949_ function createAuction(\n        uint256 _tokenId,\n        address _erc20Address,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n        require(msg.sender == address(nonFungibleContract));\n        require (erc20ContractsSwitcher[_erc20Address] > 0);\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuctionERC20(_tokenId, auction, _erc20Address);\n        tokenIdToErc20Address[_tokenId] = _erc20Address;\n    }\n5196-function_definition-950-976", method="createAuction(uint256 _tokenId,address _erc20Address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=function_definition];
5224 [label="959_ require(_startingPrice == uint256(uint128(_startingPrice)));\n5224-expression_statement-960-960", method="createAuction(uint256 _tokenId,address _erc20Address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
5235 [label="960_ require(_endingPrice == uint256(uint128(_endingPrice)));\n5235-expression_statement-961-961", method="createAuction(uint256 _tokenId,address _erc20Address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
5246 [label="961_ require(_duration == uint256(uint64(_duration)));\n5246-expression_statement-962-962", method="createAuction(uint256 _tokenId,address _erc20Address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
5257 [label="962_ require(msg.sender == address(nonFungibleContract));\n5257-expression_statement-963-963", method="createAuction(uint256 _tokenId,address _erc20Address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
5268 [label="963_ require (erc20ContractsSwitcher[_erc20Address] > 0);\n5268-expression_statement-964-964", method="createAuction(uint256 _tokenId,address _erc20Address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
5277 [label="964_ _escrow(_seller, _tokenId);\n5277-expression_statement-965-965", method="createAuction(uint256 _tokenId,address _erc20Address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
5284 [label="965_ Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n5284-new_variable-966-973", method="createAuction(uint256 _tokenId,address _erc20Address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=new_variable];
5312 [label="973_ _addAuctionERC20(_tokenId, auction, _erc20Address);\n5312-expression_statement-974-974", method="createAuction(uint256 _tokenId,address _erc20Address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
5321 [label="974_ tokenIdToErc20Address[_tokenId] = _erc20Address;\n5321-expression_statement-975-975", method="createAuction(uint256 _tokenId,address _erc20Address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)", type_label=expression_statement];
5327 [label="976_ function _addAuctionERC20(uint256 _tokenId, Auction _auction, address _erc20address) internal {\n        require(_auction.duration >= 1 minutes);\n        tokenIdToAuction[_tokenId] = _auction;\n        AuctionERC20Created(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration),\n            _erc20address\n        );\n    }\n5327-function_definition-977-987", method="_addAuctionERC20(uint256 _tokenId,Auction _auction,address _erc20address)", type_label=function_definition];
5344 [label="977_ require(_auction.duration >= 1 minutes);\n5344-expression_statement-978-978", method="_addAuctionERC20(uint256 _tokenId,Auction _auction,address _erc20address)", type_label=expression_statement];
5354 [label="978_ tokenIdToAuction[_tokenId] = _auction;\n5354-expression_statement-979-979", method="_addAuctionERC20(uint256 _tokenId,Auction _auction,address _erc20address)", type_label=expression_statement];
5360 [label="979_ AuctionERC20Created(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration),\n            _erc20address\n        );\n5360-expression_statement-980-986", method="_addAuctionERC20(uint256 _tokenId,Auction _auction,address _erc20address)", type_label=expression_statement];
5387 [label="987_ function bid(uint256 _tokenId)\n        external\n        payable{\n    }\n5387-function_definition-988-991", method="bid(uint256 _tokenId)", type_label=function_definition];
5396 [label="991_ function bidERC20(uint256 _tokenId,uint256 _amount)\n        external\n    {\n        address seller = tokenIdToAuction[_tokenId].seller;\n        address _erc20address = tokenIdToErc20Address[_tokenId];\n        require (_erc20address != address(0));\n        uint256 price = _bidERC20(_erc20address,msg.sender,_tokenId, _amount);\n        _transfer(msg.sender, _tokenId);\n        delete tokenIdToErc20Address[_tokenId];\n    }\n5396-function_definition-992-1001", method="bidERC20(uint256 _tokenId,uint256 _amount)", type_label=function_definition];
5408 [label="994_ address seller = tokenIdToAuction[_tokenId].seller;\n5408-new_variable-995-995", method="bidERC20(uint256 _tokenId,uint256 _amount)", type_label=new_variable];
5418 [label="995_ address _erc20address = tokenIdToErc20Address[_tokenId];\n5418-new_variable-996-996", method="bidERC20(uint256 _tokenId,uint256 _amount)", type_label=new_variable];
5426 [label="996_ require (_erc20address != address(0));\n5426-expression_statement-997-997", method="bidERC20(uint256 _tokenId,uint256 _amount)", type_label=expression_statement];
5435 [label="997_ uint256 price = _bidERC20(_erc20address,msg.sender,_tokenId, _amount);\n5435-new_variable-998-998", method="bidERC20(uint256 _tokenId,uint256 _amount)", type_label=new_variable];
5452 [label="998_ _transfer(msg.sender, _tokenId);\n5452-expression_statement-999-999", method="bidERC20(uint256 _tokenId,uint256 _amount)", type_label=expression_statement];
5461 [label="999_ delete tokenIdToErc20Address[_tokenId];\n5461-expression_statement-1000-1000", method="bidERC20(uint256 _tokenId,uint256 _amount)", type_label=expression_statement];
5466 [label="1001_ function cancelAuction(uint256 _tokenId)\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n        delete tokenIdToErc20Address[_tokenId];\n    }\n5466-function_definition-1002-1011", method="cancelAuction(uint256 _tokenId)", type_label=function_definition];
5474 [label="1004_ Auction storage auction = tokenIdToAuction[_tokenId];\n5474-new_variable-1005-1005", method="cancelAuction(uint256 _tokenId)", type_label=new_variable];
5483 [label="1005_ require(_isOnAuction(auction));\n5483-expression_statement-1006-1006", method="cancelAuction(uint256 _tokenId)", type_label=expression_statement];
5491 [label="1006_ address seller = auction.seller;\n5491-new_variable-1007-1007", method="cancelAuction(uint256 _tokenId)", type_label=new_variable];
5499 [label="1007_ require(msg.sender == seller);\n5499-expression_statement-1008-1008", method="cancelAuction(uint256 _tokenId)", type_label=expression_statement];
5508 [label="1008_ _cancelAuction(_tokenId, seller);\n5508-expression_statement-1009-1009", method="cancelAuction(uint256 _tokenId)", type_label=expression_statement];
5515 [label="1009_ delete tokenIdToErc20Address[_tokenId];\n5515-expression_statement-1010-1010", method="cancelAuction(uint256 _tokenId)", type_label=expression_statement];
5520 [label="1011_ function withdrawERC20Balance(address _erc20Address, address _to) external returns(bool res)  {\n        require (balances[_erc20Address] > 0);\n        require(msg.sender == address(nonFungibleContract));\n        ERC20(_erc20Address).transfer(_to, balances[_erc20Address]);\n    }\n5520-function_definition-1012-1016", method="withdrawERC20Balance(address _erc20Address,address _to)", type_label=function_definition];
5537 [label="1012_ require (balances[_erc20Address] > 0);\n5537-expression_statement-1013-1013", method="withdrawERC20Balance(address _erc20Address,address _to)", type_label=expression_statement];
5546 [label="1013_ require(msg.sender == address(nonFungibleContract));\n5546-expression_statement-1014-1014", method="withdrawERC20Balance(address _erc20Address,address _to)", type_label=expression_statement];
5557 [label="1014_ ERC20(_erc20Address).transfer(_to, balances[_erc20Address]);\n5557-expression_statement-1015-1015", method="withdrawERC20Balance(address _erc20Address,address _to)", type_label=expression_statement];
5571 [label="1016_ function _bidERC20(address _erc20Address,address _buyerAddress, uint256 _tokenId, uint256 _bidAmount)\n        internal\n        returns (uint256)\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        require (_erc20Address != address(0) && _erc20Address == tokenIdToErc20Address[_tokenId]);\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n        address seller = auction.seller;\n        _removeAuction(_tokenId);\n        if (price > 0) {\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n            require(ERC20(_erc20Address).transferFrom(_buyerAddress,seller,sellerProceeds));\n            if (auctioneerCut > 0){\n                require(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut));\n                balances[_erc20Address] += auctioneerCut;\n            }\n        }\n        AuctionSuccessful(_tokenId, price, msg.sender);\n        return price;\n    }\n5571-function_definition-1017-1039", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=function_definition];
5595 [label="1020_ Auction storage auction = tokenIdToAuction[_tokenId];\n5595-new_variable-1021-1021", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=new_variable];
5604 [label="1021_ require(_isOnAuction(auction));\n5604-expression_statement-1022-1022", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=expression_statement];
5612 [label="1022_ require (_erc20Address != address(0) && _erc20Address == tokenIdToErc20Address[_tokenId]);\n5612-expression_statement-1023-1023", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=expression_statement];
5627 [label="1023_ uint256 price = _currentPrice(auction);\n5627-new_variable-1024-1024", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=new_variable];
5636 [label="1024_ require(_bidAmount >= price);\n5636-expression_statement-1025-1025", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=expression_statement];
5643 [label="1025_ address seller = auction.seller;\n5643-new_variable-1026-1026", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=new_variable];
5651 [label="1026_ _removeAuction(_tokenId);\n5651-expression_statement-1027-1027", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=expression_statement];
5656 [label="1027_ if_price > 0\n5656-if-1028-1036", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=if];
12466 [label="1027_ end_if", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=end_if];
5661 [label="1028_ uint256 auctioneerCut = _computeCut(price);\n5661-new_variable-1029-1029", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=new_variable];
5670 [label="1029_ uint256 sellerProceeds = price - auctioneerCut;\n5670-new_variable-1030-1030", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=new_variable];
5678 [label="1030_ require(ERC20(_erc20Address).transferFrom(_buyerAddress,seller,sellerProceeds));\n5678-expression_statement-1031-1031", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=expression_statement];
5695 [label="1031_ if_auctioneerCut > 0\n5695-if-1032-1035", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=if];
12505 [label="1031_ end_if", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=end_if];
5700 [label="1032_ require(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut));\n5700-expression_statement-1033-1033", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=expression_statement];
5719 [label="1033_ balances[_erc20Address] += auctioneerCut;\n5719-expression_statement-1034-1034", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=expression_statement];
5725 [label="1036_ AuctionSuccessful(_tokenId, price, msg.sender);\n5725-expression_statement-1037-1037", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=expression_statement];
5736 [label="1037_ return price;\n5736-return-1038-1038", method="_bidERC20(address _erc20Address,address _buyerAddress,uint256 _tokenId,uint256 _bidAmount)", type_label=return];
5744 [label="1041_ function setSaleAuctionAddress(address _address) external onlyCEO {\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\n        require(candidateContract.isSaleClockAuction());\n        saleAuction = candidateContract;\n    }\n5744-function_definition-1042-1046", method="setSaleAuctionAddress(address _address)", type_label=function_definition];
5751 [label="1041_ onlyCEO\n5751-expression_statement-1042-1042", method="setSaleAuctionAddress(address _address)", type_label=expression_statement];
5754 [label="1042_ SaleClockAuction candidateContract = SaleClockAuction(_address);\n5754-new_variable-1043-1043", method="setSaleAuctionAddress(address _address)", type_label=new_variable];
5764 [label="1043_ require(candidateContract.isSaleClockAuction());\n5764-expression_statement-1044-1044", method="setSaleAuctionAddress(address _address)", type_label=expression_statement];
5772 [label="1044_ saleAuction = candidateContract;\n5772-expression_statement-1045-1045", method="setSaleAuctionAddress(address _address)", type_label=expression_statement];
5776 [label="1046_ function setSaleAuctionERC20Address(address _address) external onlyCEO {\n        SaleClockAuctionERC20 candidateContract = SaleClockAuctionERC20(_address);\n        require(candidateContract.isSaleClockAuctionERC20());\n        saleAuctionERC20 = candidateContract;\n    }\n5776-function_definition-1047-1051", method="setSaleAuctionERC20Address(address _address)", type_label=function_definition];
5783 [label="1046_ onlyCEO\n5783-expression_statement-1047-1047", method="setSaleAuctionERC20Address(address _address)", type_label=expression_statement];
5786 [label="1047_ SaleClockAuctionERC20 candidateContract = SaleClockAuctionERC20(_address);\n5786-new_variable-1048-1048", method="setSaleAuctionERC20Address(address _address)", type_label=new_variable];
5796 [label="1048_ require(candidateContract.isSaleClockAuctionERC20());\n5796-expression_statement-1049-1049", method="setSaleAuctionERC20Address(address _address)", type_label=expression_statement];
5804 [label="1049_ saleAuctionERC20 = candidateContract;\n5804-expression_statement-1050-1050", method="setSaleAuctionERC20Address(address _address)", type_label=expression_statement];
5808 [label="1051_ function setSiringAuctionAddress(address _address) external onlyCEO {\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\n        require(candidateContract.isSiringClockAuction());\n        siringAuction = candidateContract;\n    }\n5808-function_definition-1052-1056", method="setSiringAuctionAddress(address _address)", type_label=function_definition];
5815 [label="1051_ onlyCEO\n5815-expression_statement-1052-1052", method="setSiringAuctionAddress(address _address)", type_label=expression_statement];
5818 [label="1052_ SiringClockAuction candidateContract = SiringClockAuction(_address);\n5818-new_variable-1053-1053", method="setSiringAuctionAddress(address _address)", type_label=new_variable];
5828 [label="1053_ require(candidateContract.isSiringClockAuction());\n5828-expression_statement-1054-1054", method="setSiringAuctionAddress(address _address)", type_label=expression_statement];
5836 [label="1054_ siringAuction = candidateContract;\n5836-expression_statement-1055-1055", method="setSiringAuctionAddress(address _address)", type_label=expression_statement];
5840 [label="1056_ function createSaleAuction(\n        uint256 _pandaId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _pandaId));\n        require(!isPregnant(_pandaId));\n        _approve(_pandaId, saleAuction);\n        saleAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n5840-function_definition-1057-1076", method="createSaleAuction(uint256 _pandaId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=function_definition];
5859 [label="1063_ whenNotPaused\n5859-expression_statement-1064-1064", method="createSaleAuction(uint256 _pandaId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
5862 [label="1065_ require(_owns(msg.sender, _pandaId));\n5862-expression_statement-1066-1066", method="createSaleAuction(uint256 _pandaId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
5874 [label="1066_ require(!isPregnant(_pandaId));\n5874-expression_statement-1067-1067", method="createSaleAuction(uint256 _pandaId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
5883 [label="1067_ _approve(_pandaId, saleAuction);\n5883-expression_statement-1068-1068", method="createSaleAuction(uint256 _pandaId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
5890 [label="1068_ saleAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n5890-expression_statement-1069-1075", method="createSaleAuction(uint256 _pandaId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
5907 [label="1076_ function createSaleAuctionERC20(\n        uint256 _pandaId,\n        address _erc20address,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _pandaId));\n        require(!isPregnant(_pandaId));\n        _approve(_pandaId, saleAuctionERC20);\n        saleAuctionERC20.createAuction(\n            _pandaId,\n            _erc20address,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n5907-function_definition-1077-1098", method="createSaleAuctionERC20(uint256 _pandaId,address _erc20address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=function_definition];
5930 [label="1084_ whenNotPaused\n5930-expression_statement-1085-1085", method="createSaleAuctionERC20(uint256 _pandaId,address _erc20address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
5933 [label="1086_ require(_owns(msg.sender, _pandaId));\n5933-expression_statement-1087-1087", method="createSaleAuctionERC20(uint256 _pandaId,address _erc20address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
5945 [label="1087_ require(!isPregnant(_pandaId));\n5945-expression_statement-1088-1088", method="createSaleAuctionERC20(uint256 _pandaId,address _erc20address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
5954 [label="1088_ _approve(_pandaId, saleAuctionERC20);\n5954-expression_statement-1089-1089", method="createSaleAuctionERC20(uint256 _pandaId,address _erc20address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
5961 [label="1089_ saleAuctionERC20.createAuction(\n            _pandaId,\n            _erc20address,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n5961-expression_statement-1090-1097", method="createSaleAuctionERC20(uint256 _pandaId,address _erc20address,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
5980 [label="1098_ function switchSaleAuctionERC20For(address _erc20address, uint256 _onoff) external onlyCOO{\n        saleAuctionERC20.erc20ContractSwitch(_erc20address,_onoff);\n    }\n5980-function_definition-1099-1101", method="switchSaleAuctionERC20For(address _erc20address,uint256 _onoff)", type_label=function_definition];
5991 [label="1098_ onlyCOO\n5991-expression_statement-1099-1099", method="switchSaleAuctionERC20For(address _erc20address,uint256 _onoff)", type_label=expression_statement];
5994 [label="1099_ saleAuctionERC20.erc20ContractSwitch(_erc20address,_onoff);\n5994-expression_statement-1100-1100", method="switchSaleAuctionERC20For(address _erc20address,uint256 _onoff)", type_label=expression_statement];
6003 [label="1101_ function createSiringAuction(\n        uint256 _pandaId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _pandaId));\n        require(isReadyToBreed(_pandaId));\n        _approve(_pandaId, siringAuction);\n        siringAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n6003-function_definition-1102-1121", method="createSiringAuction(uint256 _pandaId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=function_definition];
6022 [label="1108_ whenNotPaused\n6022-expression_statement-1109-1109", method="createSiringAuction(uint256 _pandaId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
6025 [label="1110_ require(_owns(msg.sender, _pandaId));\n6025-expression_statement-1111-1111", method="createSiringAuction(uint256 _pandaId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
6037 [label="1111_ require(isReadyToBreed(_pandaId));\n6037-expression_statement-1112-1112", method="createSiringAuction(uint256 _pandaId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
6045 [label="1112_ _approve(_pandaId, siringAuction);\n6045-expression_statement-1113-1113", method="createSiringAuction(uint256 _pandaId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
6052 [label="1113_ siringAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n6052-expression_statement-1114-1120", method="createSiringAuction(uint256 _pandaId,uint256 _startingPrice,uint256 _endingPrice,uint256 _duration)", type_label=expression_statement];
6069 [label="1121_ function bidOnSiringAuction(\n        uint256 _sireId,\n        uint256 _matronId\n    )\n        external\n        payable\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _matronId));\n        require(isReadyToBreed(_matronId));\n        require(_canBreedWithViaAuction(_matronId, _sireId));\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\n        require(msg.value >= currentPrice + autoBirthFee);\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\n        _breedWith(uint32(_matronId), uint32(_sireId), msg.sender);\n    }\n6069-function_definition-1122-1137", method="bidOnSiringAuction(uint256 _sireId,uint256 _matronId)", type_label=function_definition];
6081 [label="1127_ whenNotPaused\n6081-expression_statement-1128-1128", method="bidOnSiringAuction(uint256 _sireId,uint256 _matronId)", type_label=expression_statement];
6084 [label="1129_ require(_owns(msg.sender, _matronId));\n6084-expression_statement-1130-1130", method="bidOnSiringAuction(uint256 _sireId,uint256 _matronId)", type_label=expression_statement];
6096 [label="1130_ require(isReadyToBreed(_matronId));\n6096-expression_statement-1131-1131", method="bidOnSiringAuction(uint256 _sireId,uint256 _matronId)", type_label=expression_statement];
6104 [label="1131_ require(_canBreedWithViaAuction(_matronId, _sireId));\n6104-expression_statement-1132-1132", method="bidOnSiringAuction(uint256 _sireId,uint256 _matronId)", type_label=expression_statement];
6114 [label="1132_ uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\n6114-new_variable-1133-1133", method="bidOnSiringAuction(uint256 _sireId,uint256 _matronId)", type_label=new_variable];
6125 [label="1133_ require(msg.value >= currentPrice + autoBirthFee);\n6125-expression_statement-1134-1134", method="bidOnSiringAuction(uint256 _sireId,uint256 _matronId)", type_label=expression_statement];
6136 [label="1134_ siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\n6136-expression_statement-1135-1135", method="bidOnSiringAuction(uint256 _sireId,uint256 _matronId)", type_label=expression_statement];
6152 [label="1135_ _breedWith(uint32(_matronId), uint32(_sireId), msg.sender);\n6152-expression_statement-1136-1136", method="bidOnSiringAuction(uint256 _sireId,uint256 _matronId)", type_label=expression_statement];
6167 [label="1137_ function withdrawAuctionBalances() external onlyCLevel {\n        saleAuction.withdrawBalance();\n        siringAuction.withdrawBalance();\n    }\n6167-function_definition-1138-1141", method="withdrawAuctionBalances()", type_label=function_definition];
6170 [label="1137_ onlyCLevel\n6170-expression_statement-1138-1138", method="withdrawAuctionBalances()", type_label=expression_statement];
6173 [label="1138_ saleAuction.withdrawBalance();\n6173-expression_statement-1139-1139", method="withdrawAuctionBalances()", type_label=expression_statement];
6178 [label="1139_ siringAuction.withdrawBalance();\n6178-expression_statement-1140-1140", method="withdrawAuctionBalances()", type_label=expression_statement];
6183 [label="1141_ function withdrawERC20Balance(address _erc20Address, address _to) external onlyCLevel {\n        require(saleAuctionERC20 != address(0));\n        saleAuctionERC20.withdrawERC20Balance(_erc20Address,_to);\n    }\n6183-function_definition-1142-1145", method="withdrawERC20Balance(address _erc20Address,address _to)", type_label=function_definition];
6194 [label="1141_ onlyCLevel\n6194-expression_statement-1142-1142", method="withdrawERC20Balance(address _erc20Address,address _to)", type_label=expression_statement];
6197 [label="1142_ require(saleAuctionERC20 != address(0));\n6197-expression_statement-1143-1143", method="withdrawERC20Balance(address _erc20Address,address _to)", type_label=expression_statement];
6206 [label="1143_ saleAuctionERC20.withdrawERC20Balance(_erc20Address,_to);\n6206-expression_statement-1144-1144", method="withdrawERC20Balance(address _erc20Address,address _to)", type_label=expression_statement];
6221 [label="1147_ uint256 public constant GEN0_CREATION_LIMIT = 45000;\n6221-new_variable-1148-1148", method="", type_label=new_variable];
6227 [label="1148_ uint256 public constant GEN0_STARTING_PRICE = 100 finney;\n6227-new_variable-1149-1149", method="", type_label=new_variable];
6234 [label="1149_ uint256 public constant GEN0_AUCTION_DURATION = 1 days;\n6234-new_variable-1150-1150", method="", type_label=new_variable];
6241 [label="1150_ uint256 public constant OPEN_PACKAGE_PRICE = 10 finney;\n6241-new_variable-1151-1151", method="", type_label=new_variable];
6248 [label="1151_ function createWizzPanda(uint256[2] _genes, uint256 _generation, address _owner) external onlyCOO {\n        address pandaOwner = _owner;\n        if (pandaOwner == address(0)) {\n            pandaOwner = cooAddress;\n        }\n        _createPanda(0, 0, _generation, _genes, pandaOwner);\n    }\n6248-function_definition-1152-1158", method="createWizzPanda(uint256[2] _genes,uint256 _generation,address _owner)", type_label=function_definition];
6265 [label="1151_ onlyCOO\n6265-expression_statement-1152-1152", method="createWizzPanda(uint256[2] _genes,uint256 _generation,address _owner)", type_label=expression_statement];
6268 [label="1152_ address pandaOwner = _owner;\n6268-new_variable-1153-1153", method="createWizzPanda(uint256[2] _genes,uint256 _generation,address _owner)", type_label=new_variable];
6274 [label="1153_ if_pandaOwner == address(0)\n6274-if-1154-1156", method="createWizzPanda(uint256[2] _genes,uint256 _generation,address _owner)", type_label=if];
13084 [label="1153_ end_if", method="createWizzPanda(uint256[2] _genes,uint256 _generation,address _owner)", type_label=end_if];
6281 [label="1154_ pandaOwner = cooAddress;\n6281-expression_statement-1155-1155", method="createWizzPanda(uint256[2] _genes,uint256 _generation,address _owner)", type_label=expression_statement];
6285 [label="1156_ _createPanda(0, 0, _generation, _genes, pandaOwner);\n6285-expression_statement-1157-1157", method="createWizzPanda(uint256[2] _genes,uint256 _generation,address _owner)", type_label=expression_statement];
6298 [label="1158_ function createPanda(uint256[2] _genes,uint256 _generation,uint256 _type)\n        external\n        payable\n        onlyCOO\n        whenNotPaused\n    {\n        require(msg.value >= OPEN_PACKAGE_PRICE);\n        uint256 kittenId = _createPanda(0, 0, _generation, _genes, saleAuction);\n        saleAuction.createPanda(kittenId,_type);\n    }\n6298-function_definition-1159-1168", method="createPanda(uint256[2] _genes,uint256 _generation,uint256 _type)", type_label=function_definition];
6316 [label="1161_ onlyCOO\n6316-expression_statement-1162-1162", method="createPanda(uint256[2] _genes,uint256 _generation,uint256 _type)", type_label=expression_statement];
6318 [label="1162_ whenNotPaused\n6318-expression_statement-1163-1163", method="createPanda(uint256[2] _genes,uint256 _generation,uint256 _type)", type_label=expression_statement];
6321 [label="1164_ require(msg.value >= OPEN_PACKAGE_PRICE);\n6321-expression_statement-1165-1165", method="createPanda(uint256[2] _genes,uint256 _generation,uint256 _type)", type_label=expression_statement];
6330 [label="1165_ uint256 kittenId = _createPanda(0, 0, _generation, _genes, saleAuction);\n6330-new_variable-1166-1166", method="createPanda(uint256[2] _genes,uint256 _generation,uint256 _type)", type_label=new_variable];
6347 [label="1166_ saleAuction.createPanda(kittenId,_type);\n6347-expression_statement-1167-1167", method="createPanda(uint256[2] _genes,uint256 _generation,uint256 _type)", type_label=expression_statement];
6356 [label="1168_ function createGen0Auction(uint256 _pandaId) external onlyCOO {\n        require(_owns(msg.sender, _pandaId));\n        _approve(_pandaId, saleAuction);\n        saleAuction.createGen0Auction(\n            _pandaId,\n            _computeNextGen0Price(),\n            0,\n            GEN0_AUCTION_DURATION,\n            msg.sender\n        );\n    }\n6356-function_definition-1169-1179", method="createGen0Auction(uint256 _pandaId)", type_label=function_definition];
6363 [label="1168_ onlyCOO\n6363-expression_statement-1169-1169", method="createGen0Auction(uint256 _pandaId)", type_label=expression_statement];
6366 [label="1169_ require(_owns(msg.sender, _pandaId));\n6366-expression_statement-1170-1170", method="createGen0Auction(uint256 _pandaId)", type_label=expression_statement];
6378 [label="1170_ _approve(_pandaId, saleAuction);\n6378-expression_statement-1171-1171", method="createGen0Auction(uint256 _pandaId)", type_label=expression_statement];
6385 [label="1171_ saleAuction.createGen0Auction(\n            _pandaId,\n            _computeNextGen0Price(),\n            0,\n            GEN0_AUCTION_DURATION,\n            msg.sender\n        );\n6385-expression_statement-1172-1178", method="createGen0Auction(uint256 _pandaId)", type_label=expression_statement];
6403 [label="1179_ function _computeNextGen0Price() internal view returns(uint256) {\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\n        require(avePrice == uint256(uint128(avePrice)));\n        uint256 nextPrice = avePrice + (avePrice / 2);\n        if (nextPrice < GEN0_STARTING_PRICE) {\n            nextPrice = GEN0_STARTING_PRICE;\n        }\n        return nextPrice;\n    }\n6403-function_definition-1180-1188", method="_computeNextGen0Price()", type_label=function_definition];
6412 [label="1180_ uint256 avePrice = saleAuction.averageGen0SalePrice();\n6412-new_variable-1181-1181", method="_computeNextGen0Price()", type_label=new_variable];
6421 [label="1181_ require(avePrice == uint256(uint128(avePrice)));\n6421-expression_statement-1182-1182", method="_computeNextGen0Price()", type_label=expression_statement];
6432 [label="1182_ uint256 nextPrice = avePrice + (avePrice / 2);\n6432-new_variable-1183-1183", method="_computeNextGen0Price()", type_label=new_variable];
6443 [label="1183_ if_nextPrice < GEN0_STARTING_PRICE\n6443-if-1184-1186", method="_computeNextGen0Price()", type_label=if];
13253 [label="1183_ end_if", method="_computeNextGen0Price()", type_label=end_if];
6448 [label="1184_ nextPrice = GEN0_STARTING_PRICE;\n6448-expression_statement-1185-1185", method="_computeNextGen0Price()", type_label=expression_statement];
6452 [label="1186_ return nextPrice;\n6452-return-1187-1187", method="_computeNextGen0Price()", type_label=return];
6460 [label="1190_ address public newContractAddress;\n6460-new_variable-1191-1191", method="", type_label=new_variable];
6465 [label="1191_ function PandaCore() public {\n        paused = true;\n        ceoAddress = msg.sender;\n        cooAddress = msg.sender;\n    }\n6465-function_definition-1192-1196", method="PandaCore()", type_label=function_definition];
6469 [label="1192_ paused = true;\n6469-expression_statement-1193-1193", method="PandaCore()", type_label=expression_statement];
6474 [label="1193_ ceoAddress = msg.sender;\n6474-expression_statement-1194-1194", method="PandaCore()", type_label=expression_statement];
6480 [label="1194_ cooAddress = msg.sender;\n6480-expression_statement-1195-1195", method="PandaCore()", type_label=expression_statement];
6486 [label="1196_ function init() external onlyCEO whenPaused {\n        require(pandas.length == 0);\n        uint256[2] memory _genes = [uint256(-1),uint256(-1)];\n        wizzPandaQuota[1] = 100;\n       _createPanda(0, 0, 0, _genes, address(0));\n    }\n6486-function_definition-1197-1202", method="init()", type_label=function_definition];
6489 [label="1196_ onlyCEO\n6489-expression_statement-1197-1197", method="init()", type_label=expression_statement];
6491 [label="1196_ whenPaused\n6491-expression_statement-1197-1197", method="init()", type_label=expression_statement];
6494 [label="1197_ require(pandas.length == 0);\n6494-expression_statement-1198-1198", method="init()", type_label=expression_statement];
6503 [label="1198_ uint256[2] memory _genes = [uint256(-1),uint256(-1)];\n6503-new_variable-1199-1199", method="init()", type_label=new_variable];
6519 [label="1199_ wizzPandaQuota[1] = 100;\n6519-expression_statement-1200-1200", method="init()", type_label=expression_statement];
6525 [label="1200_ _createPanda(0, 0, 0, _genes, address(0));\n6525-expression_statement-1201-1201", method="init()", type_label=expression_statement];
6540 [label="1202_ function setNewAddress(address _v2Address) external onlyCEO whenPaused {\n        newContractAddress = _v2Address;\n        ContractUpgrade(_v2Address);\n    }\n6540-function_definition-1203-1206", method="setNewAddress(address _v2Address)", type_label=function_definition];
6547 [label="1202_ onlyCEO\n6547-expression_statement-1203-1203", method="setNewAddress(address _v2Address)", type_label=expression_statement];
6549 [label="1202_ whenPaused\n6549-expression_statement-1203-1203", method="setNewAddress(address _v2Address)", type_label=expression_statement];
6552 [label="1203_ newContractAddress = _v2Address;\n6552-expression_statement-1204-1204", method="setNewAddress(address _v2Address)", type_label=expression_statement];
6556 [label="1204_ ContractUpgrade(_v2Address);\n6556-expression_statement-1205-1205", method="setNewAddress(address _v2Address)", type_label=expression_statement];
6565 [label="1207_ require(\n            msg.sender == address(saleAuction) ||\n            msg.sender == address(siringAuction)\n        );\n6565-expression_statement-1208-1211", method="", type_label=expression_statement];
6584 [label="1212_ function getPanda(uint256 _id)\n        external\n        view\n        returns (\n        bool isGestating,\n        bool isReady,\n        uint256 cooldownIndex,\n        uint256 nextActionAt,\n        uint256 siringWithId,\n        uint256 birthTime,\n        uint256 matronId,\n        uint256 sireId,\n        uint256 generation,\n        uint256[2] genes\n    ) {\n        Panda storage kit = pandas[_id];\n        isGestating = (kit.siringWithId != 0);\n        isReady = (kit.cooldownEndBlock <= block.number);\n        cooldownIndex = uint256(kit.cooldownIndex);\n        nextActionAt = uint256(kit.cooldownEndBlock);\n        siringWithId = uint256(kit.siringWithId);\n        birthTime = uint256(kit.birthTime);\n        matronId = uint256(kit.matronId);\n        sireId = uint256(kit.sireId);\n        generation = uint256(kit.generation);\n        genes = kit.genes;\n    }\n6584-function_definition-1213-1239", method="getPanda(uint256 _id)", type_label=function_definition];
6636 [label="1227_ Panda storage kit = pandas[_id];\n6636-new_variable-1228-1228", method="getPanda(uint256 _id)", type_label=new_variable];
6645 [label="1228_ isGestating = (kit.siringWithId != 0);\n6645-expression_statement-1229-1229", method="getPanda(uint256 _id)", type_label=expression_statement];
6654 [label="1229_ isReady = (kit.cooldownEndBlock <= block.number);\n6654-expression_statement-1230-1230", method="getPanda(uint256 _id)", type_label=expression_statement];
6665 [label="1230_ cooldownIndex = uint256(kit.cooldownIndex);\n6665-expression_statement-1231-1231", method="getPanda(uint256 _id)", type_label=expression_statement];
6673 [label="1231_ nextActionAt = uint256(kit.cooldownEndBlock);\n6673-expression_statement-1232-1232", method="getPanda(uint256 _id)", type_label=expression_statement];
6681 [label="1232_ siringWithId = uint256(kit.siringWithId);\n6681-expression_statement-1233-1233", method="getPanda(uint256 _id)", type_label=expression_statement];
6689 [label="1233_ birthTime = uint256(kit.birthTime);\n6689-expression_statement-1234-1234", method="getPanda(uint256 _id)", type_label=expression_statement];
6697 [label="1234_ matronId = uint256(kit.matronId);\n6697-expression_statement-1235-1235", method="getPanda(uint256 _id)", type_label=expression_statement];
6705 [label="1235_ sireId = uint256(kit.sireId);\n6705-expression_statement-1236-1236", method="getPanda(uint256 _id)", type_label=expression_statement];
6713 [label="1236_ generation = uint256(kit.generation);\n6713-expression_statement-1237-1237", method="getPanda(uint256 _id)", type_label=expression_statement];
6721 [label="1237_ genes = kit.genes;\n6721-expression_statement-1238-1238", method="getPanda(uint256 _id)", type_label=expression_statement];
6727 [label="1239_ function unpause() public onlyCEO whenPaused {\n        require(saleAuction != address(0));\n        require(siringAuction != address(0));\n        require(geneScience != address(0));\n        require(newContractAddress == address(0));\n        super.unpause();\n    }\n6727-function_definition-1240-1246", method="unpause()", type_label=function_definition];
6730 [label="1239_ onlyCEO\n6730-expression_statement-1240-1240", method="unpause()", type_label=expression_statement];
6732 [label="1239_ whenPaused\n6732-expression_statement-1240-1240", method="unpause()", type_label=expression_statement];
6735 [label="1240_ require(saleAuction != address(0));\n6735-expression_statement-1241-1241", method="unpause()", type_label=expression_statement];
6744 [label="1241_ require(siringAuction != address(0));\n6744-expression_statement-1242-1242", method="unpause()", type_label=expression_statement];
6753 [label="1242_ require(geneScience != address(0));\n6753-expression_statement-1243-1243", method="unpause()", type_label=expression_statement];
6762 [label="1243_ require(newContractAddress == address(0));\n6762-expression_statement-1244-1244", method="unpause()", type_label=expression_statement];
6771 [label="1244_ super.unpause();\n6771-expression_statement-1245-1245", method="unpause()", type_label=expression_statement];
6776 [label="1246_ function withdrawBalance() external onlyCFO {\n        uint256 balance = this.balance;\n        uint256 subtractFees = (pregnantPandas + 1) * autoBirthFee;\n        if (balance > subtractFees) {\n            cfoAddress.send(balance - subtractFees);\n        }\n    }\n6776-function_definition-1247-1253", method="withdrawBalance()", type_label=function_definition];
6779 [label="1246_ onlyCFO\n6779-expression_statement-1247-1247", method="withdrawBalance()", type_label=expression_statement];
6782 [label="1247_ uint256 balance = this.balance;\n6782-new_variable-1248-1248", method="withdrawBalance()", type_label=new_variable];
6790 [label="1248_ uint256 subtractFees = (pregnantPandas + 1) * autoBirthFee;\n6790-new_variable-1249-1249", method="withdrawBalance()", type_label=new_variable];
6801 [label="1249_ if_balance > subtractFees\n6801-if-1250-1252", method="withdrawBalance()", type_label=if];
13611 [label="1249_ end_if", method="withdrawBalance()", type_label=end_if];
6806 [label="1250_ cfoAddress.send(balance - subtractFees);\n6806-expression_statement-1251-1251", method="withdrawBalance()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
180;
1431;
2003;
137 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 176  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
169 -> 6979  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6979 -> 180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
176 -> 6979  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
405 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
410 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
420 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 441  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
441 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
444 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
495 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
551 -> 560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
578 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 590  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 603  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 752  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 758  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
771 -> 778  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
778 -> 785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
785 -> 791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
791 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
797 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
823 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
840 -> 853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
853 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
857 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
880 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
910 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
928 -> 944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
944 -> 949  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
949 -> 955  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
955 -> 962  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
955 -> 7765  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7765 -> 977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
962 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
967 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 7765  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
986 -> 1016  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1016 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1062  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1055 -> 7865  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1062 -> 1075  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 1080  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1075 -> 7885  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7885 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 7885  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1084 -> 1090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1097  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1090 -> 1104  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7900 -> 1112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 7900  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1104 -> 7900  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1112 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 1123  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1118 -> 7928  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7928 -> 1127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1123 -> 7928  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1127 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1151  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1138 -> 7948  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7948 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1151 -> 1160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 7948  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1164 -> 1169  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1164 -> 7974  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7974 -> 1173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1169 -> 7974  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1173 -> 1178  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1173 -> 7983  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7983 -> 1188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1178 -> 7983  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1188 -> 1197  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1188 -> 7998  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
7998 -> 1207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1197 -> 1204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1204 -> 7998  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1207 -> 1248  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1248 -> 1261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1261 -> 1272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1272 -> 1295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1295 -> 1304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1304 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1306 -> 1316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1316 -> 1325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 1355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1355 -> 1360  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1355 -> 1371  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8165 -> 1431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1360 -> 1367  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1367 -> 8165  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1371 -> 1376  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1371 -> 1394  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1376 -> 1383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1383 -> 1390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1390 -> 8165  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1394 -> 1399  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1394 -> 8165  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1399 -> 1406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1406 -> 1413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1413 -> 1420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1420 -> 1427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1427 -> 8165  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1440 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 1454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1454 -> 1465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1548 -> 1561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1561 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1572 -> 1589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1589 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1595 -> 1612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1612 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1618 -> 1630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1636 -> 1650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1650 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1654 -> 1668  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1668 -> 1677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1677 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 1695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1695 -> 1704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1704 -> 1716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1727 -> 1741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1741 -> 1753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1753 -> 1760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1771 -> 1789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1789 -> 1798  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1798 -> 1807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1807 -> 1819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1819 -> 1829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1838 -> 1847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1847 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1853 -> 1867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1867 -> 1873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1882 -> 1897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1897 -> 1906  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1906 -> 1911  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1906 -> 1920  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8716 -> 1981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1911 -> 8716  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1911 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1920 -> 1933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1933 -> 1940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1940 -> 1946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1946 -> 1951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1951 -> 1963  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1951 -> 8761  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8761 -> 1979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1960 -> 1951  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1963 -> 1970  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1963 -> 8773  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8773 -> 1960  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
8773 -> 1960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
1970 -> 1976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1976 -> 8773  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1979 -> 8716  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1979 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1981 -> 1998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1998 -> 8808  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
8808 -> 2026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2018 -> 2022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2022 -> 2003  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
2081 -> 2100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2100 -> 2111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2111 -> 2116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2139 -> 2148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2148 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2194 -> 2201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2201 -> 2206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2212 -> 2222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2222 -> 2232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2232 -> 2240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2244 -> 2258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2258 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2276 -> 2293  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2293 -> 2301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2301 -> 2309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2309 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2320 -> 2329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2329 -> 2348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2348 -> 2366  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2348 -> 9158  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9158 -> 2372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2366 -> 9158  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2372 -> 2386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2386 -> 2398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2404 -> 2414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2418 -> 2432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2432 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2450 -> 2463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2463 -> 2470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2470 -> 2479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2479 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2484 -> 2497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2497 -> 2504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2504 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2512 -> 2539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2539 -> 2544  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2539 -> 9349  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9349 -> 2547  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2544 -> 9349  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2544 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2547 -> 2560  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2547 -> 9357  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9357 -> 2563  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2560 -> 9357  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2560 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2563 -> 2576  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2563 -> 9373  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9373 -> 2579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2576 -> 9373  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2576 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2579 -> 2592  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2579 -> 9389  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9389 -> 2595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2592 -> 9389  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2592 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2595 -> 2612  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2595 -> 9405  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9405 -> 2615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2612 -> 9405  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2612 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2615 -> 2632  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2615 -> 9425  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9425 -> 2635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2632 -> 9425  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2632 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2635 -> 2656  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2635 -> 9445  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9445 -> 2659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2656 -> 9445  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2656 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2659 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2662 -> 2679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2679 -> 2688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2688 -> 2697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2697 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2708 -> 2725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2725 -> 2732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2732 -> 2739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2739 -> 2748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2748 -> 2757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2757 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2775 -> 2794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2794 -> 2808  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2794 -> 2813  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9604 -> 2817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2808 -> 9604  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2808 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2813 -> 9604  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2813 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2817 -> 2833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2833 -> 2844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2844 -> 2853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2853 -> 2862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2862 -> 2870  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2870 -> 2875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2875 -> 2880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2880 -> 2885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2885 -> 2890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2890 -> 2893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2893 -> 2899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2914 -> 2929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2929 -> 2938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2938 -> 2950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2950 -> 2960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2960 -> 2969  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2969 -> 2977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2977 -> 2986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2986 -> 2994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2994 -> 3008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3019 -> 3047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3038 -> 3040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3047 -> 3056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3056 -> 3065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3065 -> 3073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3073 -> 3081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3081 -> 3090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3090 -> 3098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3098 -> 3107  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3098 -> 9908  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9908 -> 3113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3107 -> 9908  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3113 -> 3121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3121 -> 3127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3127 -> 3156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3156 -> 3168  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3156 -> 3182  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9966 -> 3186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3168 -> 9966  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3182 -> 9966  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3186 -> 3195  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3186 -> 9996  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
9996 -> 3199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3195 -> 9996  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3199 -> 3222  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3199 -> 3250  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10009 -> 3261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3222 -> 3230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3230 -> 10009  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3250 -> 10009  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3261 -> 3266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3266 -> 3269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3269 -> 3278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3278 -> 3283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3283 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3288 -> 3314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3314 -> 3320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3320 -> 3325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3370 -> 3387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3387 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3397 -> 3409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3420 -> 3432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3441 -> 3454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3454 -> 3464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3464 -> 3470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3495 -> 3507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3507 -> 3512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3512 -> 3519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3524 -> 3540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3540 -> 3549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3549 -> 3557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3557 -> 3566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3566 -> 3573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3573 -> 3581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3581 -> 3586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3586 -> 3591  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3586 -> 10396  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10396 -> 3615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3591 -> 3600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3600 -> 3608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3608 -> 10396  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3615 -> 3623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3623 -> 3632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3632 -> 3643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3643 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3645 -> 3653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3658 -> 3672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3672 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3679 -> 3693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3693 -> 3699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3699 -> 3706  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3699 -> 10509  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10509 -> 3714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3706 -> 10509  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3714 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3731 -> 3756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3756 -> 3761  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3756 -> 3764  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
10566 -> 3804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3761 -> 10566  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3761 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3764 -> 3776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3776 -> 3790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3790 -> 3800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3800 -> 10566  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3800 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3804 -> 3817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3817 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3833 -> 3840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3840 -> 3851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3843 -> 3849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3854 -> 3859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3861 -> 3872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3863 -> 3865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3872 -> 3877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3877 -> 3880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3880 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3883 -> 3894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3885 -> 3887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3894 -> 3899  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3899 -> 3902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3902 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3921 -> 3933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3933 -> 3940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3940 -> 3944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3944 -> 3954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3954 -> 3964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3968 -> 3972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3972 -> 3980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3980 -> 3995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4008 -> 4034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4034 -> 4045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4045 -> 4056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4056 -> 4067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4067 -> 4079  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4079 -> 4088  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4088 -> 4116  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4123 -> 4134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4134 -> 4143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4152 -> 4160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4160 -> 4169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4169 -> 4177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4177 -> 4185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4185 -> 4194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4201 -> 4213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4207 -> 4209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4213 -> 4222  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4222 -> 4230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4239 -> 4269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4269 -> 4278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4278 -> 4286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4286 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4303 -> 4316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4316 -> 4325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4325 -> 4333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4333 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
4369 -> 4393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4393 -> 4404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4404 -> 4415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4415 -> 4426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4426 -> 4437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4437 -> 4444  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4444 -> 4472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4479 -> 4488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4488 -> 4499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4499 -> 4509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4509 -> 4518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4531 -> 4538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4538 -> 4543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4543 -> 4550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4550 -> 4557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4557 -> 4562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4562 -> 4567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4567 -> 4571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4575 -> 4593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4593 -> 4597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4601 -> 4625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4625 -> 4636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4636 -> 4647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4647 -> 4658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4658 -> 4669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4669 -> 4676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4676 -> 4704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4711 -> 4735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4735 -> 4746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4746 -> 4757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4757 -> 4768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4768 -> 4779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4779 -> 4786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4786 -> 4814  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4821 -> 4830  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4830 -> 4840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4840 -> 4853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4853 -> 4862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4862 -> 4867  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4862 -> 11672  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
11672 -> 4878  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4867 -> 4875  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4875 -> 11672  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4878 -> 4890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4890 -> 4901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4901 -> 4906  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4901 -> 4914  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
11711 -> 4921  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4906 -> 11711  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4914 -> 11711  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4921 -> 4926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4926 -> 4953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4953 -> 4958  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4958 -> 4965  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
4958 -> 4984  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
11768 -> 5002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4965 -> 4976  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4976 -> 4980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4980 -> 11768  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
4984 -> 4995  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4995 -> 4999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
4999 -> 11768  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5011 -> 5025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5025 -> 5035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5045 -> 5054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5054 -> 5060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5060 -> 5074  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5060 -> 11870  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
11870 -> 5080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5071 -> 5060  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5074 -> 5071  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
5080 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
5112 -> 5119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5119 -> 5126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5126 -> 5133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5158 -> 5170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5170 -> 5181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5181 -> 5190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5196 -> 5224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5224 -> 5235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5235 -> 5246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5246 -> 5257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5257 -> 5268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5268 -> 5277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5277 -> 5284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5284 -> 5312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5312 -> 5321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5327 -> 5344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5344 -> 5354  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5354 -> 5360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5396 -> 5408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5408 -> 5418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5418 -> 5426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5426 -> 5435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5435 -> 5452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5452 -> 5461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5466 -> 5474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5474 -> 5483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5483 -> 5491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5491 -> 5499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5499 -> 5508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5508 -> 5515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5520 -> 5537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5537 -> 5546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5546 -> 5557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5571 -> 5595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5595 -> 5604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5604 -> 5612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5612 -> 5627  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5627 -> 5636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5636 -> 5643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5643 -> 5651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5651 -> 5656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5656 -> 5661  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5656 -> 12466  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5661 -> 5670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5670 -> 5678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5678 -> 5695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5695 -> 5700  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
5695 -> 12505  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
12505 -> 5725  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5700 -> 5719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5719 -> 12505  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
5725 -> 5736  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5736 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
5744 -> 5754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5754 -> 5764  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5764 -> 5772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5776 -> 5786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5786 -> 5796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5796 -> 5804  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5808 -> 5818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5818 -> 5828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5828 -> 5836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5840 -> 5862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5862 -> 5874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5874 -> 5883  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5883 -> 5890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5907 -> 5933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5933 -> 5945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5945 -> 5954  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5954 -> 5961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
5980 -> 5994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6003 -> 6025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6025 -> 6037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6037 -> 6045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6045 -> 6052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6069 -> 6084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6084 -> 6096  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6096 -> 6104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6104 -> 6114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6114 -> 6125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6125 -> 6136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6136 -> 6152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6167 -> 6173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6173 -> 6178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6183 -> 6197  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6197 -> 6206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6221 -> 6227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6227 -> 6234  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6234 -> 6241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6248 -> 6268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6268 -> 6274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6274 -> 6281  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6274 -> 13084  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
13084 -> 6285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6281 -> 13084  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
6298 -> 6321  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6316 -> 6318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6321 -> 6330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6330 -> 6347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6356 -> 6366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6366 -> 6378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6378 -> 6385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6403 -> 6412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6412 -> 6421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6421 -> 6432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6432 -> 6443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6443 -> 6448  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6443 -> 13253  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
13253 -> 6452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6448 -> 13253  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
6452 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
6465 -> 6469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6469 -> 6474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6474 -> 6480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6486 -> 6494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6489 -> 6491  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6494 -> 6503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6503 -> 6519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6519 -> 6525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6540 -> 6552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6547 -> 6549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6552 -> 6556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6584 -> 6636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6636 -> 6645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6645 -> 6654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6654 -> 6665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6665 -> 6673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6673 -> 6681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6681 -> 6689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6689 -> 6697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6697 -> 6705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6705 -> 6713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6713 -> 6721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6727 -> 6735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6730 -> 6732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6735 -> 6744  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6744 -> 6753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6753 -> 6762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6762 -> 6771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6776 -> 6782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6782 -> 6790  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6790 -> 6801  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6801 -> 6806  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
6801 -> 13611  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
13611 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
6806 -> 13611  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2003 -> 1998  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
}
