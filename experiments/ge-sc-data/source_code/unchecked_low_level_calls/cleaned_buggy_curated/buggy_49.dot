digraph  {
13 [label="2_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n13-function_definition-3-4", method="bug_unchk_send20()", type_label=function_definition];
18 [label="3_ msg.sender.transfer(1 ether);\n18-expression_statement-4-4", method="bug_unchk_send20()", type_label=expression_statement];
28 [label="4_ mapping (address => uint256) public balanceOf;\n28-new_variable-5-5", method="", type_label=new_variable];
35 [label="5_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n35-function_definition-6-7", method="bug_unchk_send32()", type_label=function_definition];
40 [label="6_ msg.sender.transfer(1 ether);\n40-expression_statement-7-7", method="bug_unchk_send32()", type_label=expression_statement];
50 [label="7_ string public name = \"TAMC\";\n50-new_variable-8-8", method="", type_label=new_variable];
57 [label="8_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n57-function_definition-9-10", method="bug_unchk_send4()", type_label=function_definition];
62 [label="9_ msg.sender.transfer(1 ether);\n62-expression_statement-10-10", method="bug_unchk_send4()", type_label=expression_statement];
72 [label="10_ string public symbol = \"TAMC\";\n72-new_variable-11-11", method="", type_label=new_variable];
79 [label="11_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n79-function_definition-12-13", method="bug_unchk_send7()", type_label=function_definition];
84 [label="12_ msg.sender.transfer(1 ether);\n84-expression_statement-13-13", method="bug_unchk_send7()", type_label=expression_statement];
94 [label="13_ uint8 public decimals = 18;\n94-new_variable-14-14", method="", type_label=new_variable];
100 [label="14_ uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);\n100-new_variable-15-15", method="", type_label=new_variable];
113 [label="15_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n113-function_definition-16-17", method="bug_unchk_send31()", type_label=function_definition];
118 [label="16_ msg.sender.transfer(1 ether);\n118-expression_statement-17-17", method="bug_unchk_send31()", type_label=expression_statement];
144 [label="19_ balanceOf[msg.sender] = totalSupply;\n144-expression_statement-20-20", method="", type_label=expression_statement];
164 [label="22_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n164-function_definition-23-24", method="bug_unchk_send14()", type_label=function_definition];
169 [label="23_ msg.sender.transfer(1 ether);\n169-expression_statement-24-24", method="bug_unchk_send14()", type_label=expression_statement];
179 [label="24_ function transfer(address to, uint256 value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= value);\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n179-function_definition-25-31", method="transfer(address to,uint256 value)", type_label=function_definition];
196 [label="25_ require(balanceOf[msg.sender] >= value);\n196-expression_statement-26-26", method="transfer(address to,uint256 value)", type_label=expression_statement];
207 [label="26_ balanceOf[msg.sender] -= value;\n207-expression_statement-27-27", method="transfer(address to,uint256 value)", type_label=expression_statement];
215 [label="27_ balanceOf[to] += value;\n215-expression_statement-28-28", method="transfer(address to,uint256 value)", type_label=expression_statement];
231 [label="29_ return true;\n231-return-30-30", method="transfer(address to,uint256 value)", type_label=return];
234 [label="31_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n234-function_definition-32-33", method="bug_unchk_send30()", type_label=function_definition];
239 [label="32_ msg.sender.transfer(1 ether);\n239-expression_statement-33-33", method="bug_unchk_send30()", type_label=expression_statement];
249 [label="33_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n249-function_definition-34-35", method="bug_unchk_send13()", type_label=function_definition];
254 [label="34_ msg.sender.transfer(1 ether);\n254-expression_statement-35-35", method="bug_unchk_send13()", type_label=expression_statement];
278 [label="36_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n278-function_definition-37-38", method="bug_unchk_send23()", type_label=function_definition];
283 [label="37_ msg.sender.transfer(1 ether);\n283-expression_statement-38-38", method="bug_unchk_send23()", type_label=expression_statement];
293 [label="38_ mapping(address => mapping(address => uint256)) public allowance;\n293-new_variable-39-39", method="", type_label=new_variable];
302 [label="39_ function approve(address spender, uint256 value)\n        public\n        returns (bool success)\n    {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n302-function_definition-40-47", method="approve(address spender,uint256 value)", type_label=function_definition];
319 [label="43_ allowance[msg.sender][spender] = value;\n319-expression_statement-44-44", method="approve(address spender,uint256 value)", type_label=expression_statement];
339 [label="45_ return true;\n339-return-46-46", method="approve(address spender,uint256 value)", type_label=return];
342 [label="47_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n342-function_definition-48-49", method="bug_unchk_send8()", type_label=function_definition];
347 [label="48_ msg.sender.transfer(1 ether);\n347-expression_statement-49-49", method="bug_unchk_send8()", type_label=expression_statement];
357 [label="49_ function transferFrom(address from, address to, uint256 value)\n        public\n        returns (bool success)\n    {\n        require(value <= balanceOf[from]);\n        require(value <= allowance[from][msg.sender]);\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n357-function_definition-50-61", method="transferFrom(address from,address to,uint256 value)", type_label=function_definition];
378 [label="53_ require(value <= balanceOf[from]);\n378-expression_statement-54-54", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
387 [label="54_ require(value <= allowance[from][msg.sender]);\n387-expression_statement-55-55", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
400 [label="55_ balanceOf[from] -= value;\n400-expression_statement-56-56", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
406 [label="56_ balanceOf[to] += value;\n406-expression_statement-57-57", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
412 [label="57_ allowance[from][msg.sender] -= value;\n412-expression_statement-58-58", method="transferFrom(address from,address to,uint256 value)", type_label=expression_statement];
430 [label="59_ return true;\n430-return-60-60", method="transferFrom(address from,address to,uint256 value)", type_label=return];
433 [label="61_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n433-function_definition-62-63", method="bug_unchk_send27()", type_label=function_definition];
438 [label="62_ msg.sender.transfer(1 ether);\n438-expression_statement-63-63", method="bug_unchk_send27()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
57 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
179 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
234 -> 239  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 319  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
342 -> 347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
433 -> 438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
