digraph  {
13 [label="2_ getImplementation\n13-function_definition-3-3", type_label=function_definition];
32 [label="6_ address private _owner;\n32-new_variable-7-7", type_label=new_variable];
49 [label="9_ _owner = msg.sender;\n49-expression_statement-10-10", type_label=expression_statement];
63 [label="12_ owner\n63-function_definition-13-15", type_label=function_definition];
72 [label="13_ return _owner;\n72-return-14-14", type_label=return];
74 [label="15_ modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n74-expression_statement-16-19", type_label=expression_statement];
77 [label="16_ require(isOwner());\n77-expression_statement-17-17", type_label=expression_statement];
83 [label="17_ _;\n83-expression_statement-18-18", type_label=expression_statement];
85 [label="19_ isOwner\n85-function_definition-20-22", type_label=function_definition];
94 [label="20_ return msg.sender == _owner;\n94-return-21-21", type_label=return];
100 [label="22_ renounceOwnership\n100-function_definition-23-26", type_label=function_definition];
103 [label="22_ onlyOwner\n103-expression_statement-23-23", type_label=expression_statement];
114 [label="24_ _owner = address(0);\n114-expression_statement-25-25", type_label=expression_statement];
120 [label="26_ transferOwnership\n120-function_definition-27-29", type_label=function_definition];
127 [label="26_ onlyOwner\n127-expression_statement-27-27", type_label=expression_statement];
130 [label="27_ _transferOwnership(newOwner);\n130-expression_statement-28-28", type_label=expression_statement];
135 [label="29_ _transferOwnership\n135-function_definition-30-34", type_label=function_definition];
143 [label="30_ require(newOwner != address(0));\n143-expression_statement-31-31", type_label=expression_statement];
158 [label="32_ _owner = newOwner;\n158-expression_statement-33-33", type_label=expression_statement];
169 [label="37_ isContract\n169-function_definition-38-42", type_label=function_definition];
182 [label="38_ uint256 size;\n182-new_variable-39-39", type_label=new_variable];
197 [label="40_ return size > 0;\n197-return-41-41", type_label=return];
226 [label="47_ mapping (string => address) internal implementations;\n226-new_variable-48-48", type_label=new_variable];
233 [label="48_ bool public frozen;\n233-new_variable-49-49", type_label=new_variable];
238 [label="49_ modifier whenNotFrozen() {\n    require(!frozen, \"Cannot perform action for a frozen implementation directory\");\n    _;\n  }\n238-expression_statement-50-53", type_label=expression_statement];
241 [label="50_ require(!frozen, \"Cannot perform action for a frozen implementation directory\");\n241-expression_statement-51-51", type_label=expression_statement];
250 [label="51_ _;\n250-expression_statement-52-52", type_label=expression_statement];
252 [label="53_ freeze\n252-function_definition-54-57", type_label=function_definition];
254 [label="53_ onlyOwner\n254-expression_statement-54-54", type_label=expression_statement];
256 [label="53_ whenNotFrozen\n256-expression_statement-54-54", type_label=expression_statement];
260 [label="54_ frozen = true;\n260-expression_statement-55-55", type_label=expression_statement];
267 [label="57_ getImplementation\n267-function_definition-58-60", type_label=function_definition];
280 [label="58_ return implementations[contractName];\n280-return-59-59", type_label=return];
284 [label="60_ setImplementation\n284-function_definition-61-65", type_label=function_definition];
295 [label="60_ onlyOwner\n295-expression_statement-61-61", type_label=expression_statement];
297 [label="60_ whenNotFrozen\n297-expression_statement-61-61", type_label=expression_statement];
300 [label="61_ require(ZOSLibAddress.isContract(implementation), \"Cannot set implementation in directory with a non-contract address\");\n300-expression_statement-62-62", type_label=expression_statement];
313 [label="62_ implementations[contractName] = implementation;\n313-expression_statement-63-63", type_label=expression_statement];
325 [label="65_ unsetImplementation\n325-function_definition-66-69", type_label=function_definition];
332 [label="65_ onlyOwner\n332-expression_statement-66-66", type_label=expression_statement];
334 [label="65_ whenNotFrozen\n334-expression_statement-66-66", type_label=expression_statement];
337 [label="66_ implementations[contractName] = address(0);\n337-expression_statement-67-67", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
63 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
77 -> 83  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 94  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
100 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
226 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
254 -> 256  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
267 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
284 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
325 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
332 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
