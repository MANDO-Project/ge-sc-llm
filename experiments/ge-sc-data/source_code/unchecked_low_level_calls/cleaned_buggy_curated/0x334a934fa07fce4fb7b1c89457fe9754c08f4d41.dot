digraph  {
13 [label="2_ address private _owner;\n13-new_variable-3-3", type_label=new_variable];
30 [label="5_ _owner = msg.sender;\n30-expression_statement-6-6", type_label=expression_statement];
44 [label="8_ owner\n44-function_definition-9-11", type_label=function_definition];
53 [label="9_ return _owner;\n53-return-10-10", type_label=return];
55 [label="11_ modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n55-expression_statement-12-15", type_label=expression_statement];
58 [label="12_ require(isOwner(), \"Ownable: caller is not the owner\");\n58-expression_statement-13-13", type_label=expression_statement];
67 [label="13_ _;\n67-expression_statement-14-14", type_label=expression_statement];
69 [label="15_ isOwner\n69-function_definition-16-18", type_label=function_definition];
78 [label="16_ return msg.sender == _owner;\n78-return-17-17", type_label=return];
84 [label="18_ renounceOwnership\n84-function_definition-19-22", type_label=function_definition];
87 [label="18_ onlyOwner\n87-expression_statement-19-19", type_label=expression_statement];
98 [label="20_ _owner = address(0);\n98-expression_statement-21-21", type_label=expression_statement];
104 [label="22_ transferOwnership\n104-function_definition-23-25", type_label=function_definition];
111 [label="22_ onlyOwner\n111-expression_statement-23-23", type_label=expression_statement];
114 [label="23_ _transferOwnership(newOwner);\n114-expression_statement-24-24", type_label=expression_statement];
119 [label="25_ _transferOwnership\n119-function_definition-26-30", type_label=function_definition];
127 [label="26_ require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n127-expression_statement-27-27", type_label=expression_statement];
145 [label="28_ _owner = newOwner;\n145-expression_statement-29-29", type_label=expression_statement];
156 [label="33_ totalSupply\n156-function_definition-34-34", type_label=function_definition];
164 [label="34_ balanceOf\n164-function_definition-35-35", type_label=function_definition];
176 [label="35_ transfer\n176-function_definition-36-36", type_label=function_definition];
191 [label="36_ allowance\n191-function_definition-37-37", type_label=function_definition];
207 [label="37_ approve\n207-function_definition-38-38", type_label=function_definition];
222 [label="38_ transferFrom\n222-function_definition-39-39", type_label=function_definition];
279 [label="44_ string private _name;\n279-new_variable-45-45", type_label=new_variable];
284 [label="45_ string private _symbol;\n284-new_variable-46-46", type_label=new_variable];
289 [label="46_ uint8 private _decimals;\n289-new_variable-47-47", type_label=new_variable];
308 [label="48_ _name = name;\n308-expression_statement-49-49", type_label=expression_statement];
312 [label="49_ _symbol = symbol;\n312-expression_statement-50-50", type_label=expression_statement];
316 [label="50_ _decimals = decimals;\n316-expression_statement-51-51", type_label=expression_statement];
320 [label="52_ name\n320-function_definition-53-55", type_label=function_definition];
329 [label="53_ return _name;\n329-return-54-54", type_label=return];
331 [label="55_ symbol\n331-function_definition-56-58", type_label=function_definition];
340 [label="56_ return _symbol;\n340-return-57-57", type_label=return];
342 [label="58_ decimals\n342-function_definition-59-61", type_label=function_definition];
351 [label="59_ return _decimals;\n351-return-60-60", type_label=return];
360 [label="64_ add\n360-function_definition-65-69", type_label=function_definition];
377 [label="65_ uint256 c = a + b;\n377-new_variable-66-66", type_label=new_variable];
385 [label="66_ require(c >= a, \"SafeMath: addition overflow\");\n385-expression_statement-67-67", type_label=expression_statement];
395 [label="67_ return c;\n395-return-68-68", type_label=return];
397 [label="69_ sub\n397-function_definition-70-74", type_label=function_definition];
414 [label="70_ require(b <= a, \"SafeMath: subtraction overflow\");\n414-expression_statement-71-71", type_label=expression_statement];
424 [label="71_ uint256 c = a - b;\n424-new_variable-72-72", type_label=new_variable];
432 [label="72_ return c;\n432-return-73-73", type_label=return];
434 [label="74_ mul\n434-function_definition-75-82", type_label=function_definition];
451 [label="75_ if_a == 0\n451-if-76-78", type_label=if];
2397 [label="75_ end_if", type_label=end_if];
456 [label="76_ return 0;\n456-return-77-77", type_label=return];
458 [label="78_ uint256 c = a * b;\n458-new_variable-79-79", type_label=new_variable];
466 [label="79_ require(c / a == b, \"SafeMath: multiplication overflow\");\n466-expression_statement-80-80", type_label=expression_statement];
478 [label="80_ return c;\n478-return-81-81", type_label=return];
480 [label="82_ div\n480-function_definition-83-87", type_label=function_definition];
497 [label="83_ require(b > 0, \"SafeMath: division by zero\");\n497-expression_statement-84-84", type_label=expression_statement];
507 [label="84_ uint256 c = a / b;\n507-new_variable-85-85", type_label=new_variable];
515 [label="85_ return c;\n515-return-86-86", type_label=return];
517 [label="87_ mod\n517-function_definition-88-91", type_label=function_definition];
534 [label="88_ require(b != 0, \"SafeMath: modulo by zero\");\n534-expression_statement-89-89", type_label=expression_statement];
544 [label="89_ return a % b;\n544-return-90-90", type_label=return];
563 [label="95_ mapping (address => uint256) private _balances;\n563-new_variable-96-96", type_label=new_variable];
570 [label="96_ mapping (address => mapping (address => uint256)) private _allowances;\n570-new_variable-97-97", type_label=new_variable];
579 [label="97_ uint256 private _totalSupply;\n579-new_variable-98-98", type_label=new_variable];
584 [label="98_ totalSupply\n584-function_definition-99-101", type_label=function_definition];
593 [label="99_ return _totalSupply;\n593-return-100-100", type_label=return];
595 [label="101_ balanceOf\n595-function_definition-102-104", type_label=function_definition];
608 [label="102_ return _balances[account];\n608-return-103-103", type_label=return];
612 [label="104_ transfer\n612-function_definition-105-108", type_label=function_definition];
628 [label="105_ _transfer(msg.sender, recipient, amount);\n628-expression_statement-106-106", type_label=expression_statement];
639 [label="106_ return true;\n639-return-107-107", type_label=return];
642 [label="108_ allowance\n642-function_definition-109-111", type_label=function_definition];
659 [label="109_ return _allowances[owner][spender];\n659-return-110-110", type_label=return];
665 [label="111_ approve\n665-function_definition-112-115", type_label=function_definition];
681 [label="112_ _approve(msg.sender, spender, value);\n681-expression_statement-113-113", type_label=expression_statement];
692 [label="113_ return true;\n692-return-114-114", type_label=return];
695 [label="115_ transferFrom\n695-function_definition-116-120", type_label=function_definition];
715 [label="116_ _transfer(sender, recipient, amount);\n715-expression_statement-117-117", type_label=expression_statement];
724 [label="117_ _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n724-expression_statement-118-118", type_label=expression_statement];
746 [label="118_ return true;\n746-return-119-119", type_label=return];
749 [label="120_ increaseAllowance\n749-function_definition-121-124", type_label=function_definition];
765 [label="121_ _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n765-expression_statement-122-122", type_label=expression_statement];
787 [label="122_ return true;\n787-return-123-123", type_label=return];
790 [label="124_ decreaseAllowance\n790-function_definition-125-128", type_label=function_definition];
806 [label="125_ _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n806-expression_statement-126-126", type_label=expression_statement];
828 [label="126_ return true;\n828-return-127-127", type_label=return];
831 [label="128_ _transfer\n831-function_definition-129-135", type_label=function_definition];
847 [label="129_ require(sender != address(0), \"ERC20: transfer from the zero address\");\n847-expression_statement-130-130", type_label=expression_statement];
859 [label="130_ require(recipient != address(0), \"ERC20: transfer to the zero address\");\n859-expression_statement-131-131", type_label=expression_statement];
871 [label="131_ _balances[sender] = _balances[sender].sub(amount);\n871-expression_statement-132-132", type_label=expression_statement];
884 [label="132_ _balances[recipient] = _balances[recipient].add(amount);\n884-expression_statement-133-133", type_label=expression_statement];
905 [label="135_ _mint\n905-function_definition-136-141", type_label=function_definition];
917 [label="136_ require(account != address(0), \"ERC20: mint to the zero address\");\n917-expression_statement-137-137", type_label=expression_statement];
929 [label="137_ _totalSupply = _totalSupply.add(amount);\n929-expression_statement-138-138", type_label=expression_statement];
938 [label="138_ _balances[account] = _balances[account].add(amount);\n938-expression_statement-139-139", type_label=expression_statement];
961 [label="141_ _burn\n961-function_definition-142-147", type_label=function_definition];
973 [label="142_ require(account != address(0), \"ERC20: burn from the zero address\");\n973-expression_statement-143-143", type_label=expression_statement];
985 [label="143_ _totalSupply = _totalSupply.sub(value);\n985-expression_statement-144-144", type_label=expression_statement];
994 [label="144_ _balances[account] = _balances[account].sub(value);\n994-expression_statement-145-145", type_label=expression_statement];
1017 [label="147_ _approve\n1017-function_definition-148-153", type_label=function_definition];
1033 [label="148_ require(owner != address(0), \"ERC20: approve from the zero address\");\n1033-expression_statement-149-149", type_label=expression_statement];
1045 [label="149_ require(spender != address(0), \"ERC20: approve to the zero address\");\n1045-expression_statement-150-150", type_label=expression_statement];
1057 [label="150_ _allowances[owner][spender] = value;\n1057-expression_statement-151-151", type_label=expression_statement];
1073 [label="153_ _burnFrom\n1073-function_definition-154-157", type_label=function_definition];
1085 [label="154_ _burn(account, amount);\n1085-expression_statement-155-155", type_label=expression_statement];
1092 [label="155_ _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n1092-expression_statement-156-156", type_label=expression_statement];
1121 [label="160_ struct Role {\n        mapping (address => bool) bearer;\n    }\n1121-expression_statement-161-163", type_label=expression_statement];
1129 [label="163_ add\n1129-function_definition-164-167", type_label=function_definition];
1142 [label="164_ require(!has(role, account), \"Roles: account already has role\");\n1142-expression_statement-165-165", type_label=expression_statement];
1156 [label="165_ role.bearer[account] = true;\n1156-expression_statement-166-166", type_label=expression_statement];
1165 [label="167_ remove\n1165-function_definition-168-171", type_label=function_definition];
1178 [label="168_ require(has(role, account), \"Roles: account does not have role\");\n1178-expression_statement-169-169", type_label=expression_statement];
1191 [label="169_ role.bearer[account] = false;\n1191-expression_statement-170-170", type_label=expression_statement];
1200 [label="171_ has\n1200-function_definition-172-175", type_label=function_definition];
1218 [label="172_ require(account != address(0), \"Roles: account is the zero address\");\n1218-expression_statement-173-173", type_label=expression_statement];
1230 [label="173_ return role.bearer[account];\n1230-return-174-174", type_label=return];
1262 [label="181_ Roles.Role private _minters;\n1262-new_variable-182-182", type_label=new_variable];
1271 [label="183_ _addMinter(msg.sender);\n1271-expression_statement-184-184", type_label=expression_statement];
1278 [label="185_ modifier onlyMinter() {\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n1278-expression_statement-186-189", type_label=expression_statement];
1281 [label="186_ require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\n1281-expression_statement-187-187", type_label=expression_statement];
1294 [label="187_ _;\n1294-expression_statement-188-188", type_label=expression_statement];
1296 [label="189_ isMinter\n1296-function_definition-190-192", type_label=function_definition];
1309 [label="190_ return _minters.has(account);\n1309-return-191-191", type_label=return];
1316 [label="192_ addMinter\n1316-function_definition-193-195", type_label=function_definition];
1323 [label="192_ onlyMinter\n1323-expression_statement-193-193", type_label=expression_statement];
1326 [label="193_ _addMinter(account);\n1326-expression_statement-194-194", type_label=expression_statement];
1331 [label="195_ renounceMinter\n1331-function_definition-196-198", type_label=function_definition];
1335 [label="196_ _removeMinter(msg.sender);\n1335-expression_statement-197-197", type_label=expression_statement];
1342 [label="198_ _addMinter\n1342-function_definition-199-202", type_label=function_definition];
1350 [label="199_ _minters.add(account);\n1350-expression_statement-200-200", type_label=expression_statement];
1361 [label="202_ _removeMinter\n1361-function_definition-203-206", type_label=function_definition];
1369 [label="203_ _minters.remove(account);\n1369-expression_statement-204-204", type_label=expression_statement];
1393 [label="209_ mint\n1393-function_definition-210-213", type_label=function_definition];
1404 [label="209_ onlyMinter\n1404-expression_statement-210-210", type_label=expression_statement];
1411 [label="210_ _mint(account, amount);\n1411-expression_statement-211-211", type_label=expression_statement];
1418 [label="211_ return true;\n1418-return-212-212", type_label=return];
1447 [label="219_ Roles.Role private _pausers;\n1447-new_variable-220-220", type_label=new_variable];
1456 [label="221_ _addPauser(msg.sender);\n1456-expression_statement-222-222", type_label=expression_statement];
1463 [label="223_ modifier onlyPauser() {\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n1463-expression_statement-224-227", type_label=expression_statement];
1466 [label="224_ require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n1466-expression_statement-225-225", type_label=expression_statement];
1479 [label="225_ _;\n1479-expression_statement-226-226", type_label=expression_statement];
1481 [label="227_ isPauser\n1481-function_definition-228-230", type_label=function_definition];
1494 [label="228_ return _pausers.has(account);\n1494-return-229-229", type_label=return];
1501 [label="230_ addPauser\n1501-function_definition-231-233", type_label=function_definition];
1508 [label="230_ onlyPauser\n1508-expression_statement-231-231", type_label=expression_statement];
1511 [label="231_ _addPauser(account);\n1511-expression_statement-232-232", type_label=expression_statement];
1516 [label="233_ renouncePauser\n1516-function_definition-234-236", type_label=function_definition];
1520 [label="234_ _removePauser(msg.sender);\n1520-expression_statement-235-235", type_label=expression_statement];
1527 [label="236_ _addPauser\n1527-function_definition-237-240", type_label=function_definition];
1535 [label="237_ _pausers.add(account);\n1535-expression_statement-238-238", type_label=expression_statement];
1546 [label="240_ _removePauser\n1546-function_definition-241-244", type_label=function_definition];
1554 [label="241_ _pausers.remove(account);\n1554-expression_statement-242-242", type_label=expression_statement];
1587 [label="249_ bool private _paused;\n1587-new_variable-250-250", type_label=new_variable];
1594 [label="251_ _paused = false;\n1594-expression_statement-252-252", type_label=expression_statement];
1599 [label="253_ paused\n1599-function_definition-254-256", type_label=function_definition];
1608 [label="254_ return _paused;\n1608-return-255-255", type_label=return];
1610 [label="256_ modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n1610-expression_statement-257-260", type_label=expression_statement];
1613 [label="257_ require(!_paused, \"Pausable: paused\");\n1613-expression_statement-258-258", type_label=expression_statement];
1622 [label="258_ _;\n1622-expression_statement-259-259", type_label=expression_statement];
1624 [label="260_ modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n1624-expression_statement-261-264", type_label=expression_statement];
1627 [label="261_ require(_paused, \"Pausable: not paused\");\n1627-expression_statement-262-262", type_label=expression_statement];
1635 [label="262_ _;\n1635-expression_statement-263-263", type_label=expression_statement];
1637 [label="264_ pause\n1637-function_definition-265-268", type_label=function_definition];
1640 [label="264_ onlyPauser\n1640-expression_statement-265-265", type_label=expression_statement];
1642 [label="264_ whenNotPaused\n1642-expression_statement-265-265", type_label=expression_statement];
1645 [label="265_ _paused = true;\n1645-expression_statement-266-266", type_label=expression_statement];
1656 [label="268_ unpause\n1656-function_definition-269-272", type_label=function_definition];
1659 [label="268_ onlyPauser\n1659-expression_statement-269-269", type_label=expression_statement];
1661 [label="268_ whenPaused\n1661-expression_statement-269-269", type_label=expression_statement];
1664 [label="269_ _paused = false;\n1664-expression_statement-270-270", type_label=expression_statement];
1688 [label="275_ transfer\n1688-function_definition-276-278", type_label=function_definition];
1699 [label="275_ whenNotPaused\n1699-expression_statement-276-276", type_label=expression_statement];
1706 [label="276_ return super.transfer(to, value);\n1706-return-277-277", type_label=return];
1715 [label="278_ transferFrom\n1715-function_definition-279-281", type_label=function_definition];
1730 [label="278_ whenNotPaused\n1730-expression_statement-279-279", type_label=expression_statement];
1737 [label="279_ return super.transferFrom(from, to, value);\n1737-return-280-280", type_label=return];
1748 [label="281_ approve\n1748-function_definition-282-284", type_label=function_definition];
1759 [label="281_ whenNotPaused\n1759-expression_statement-282-282", type_label=expression_statement];
1766 [label="282_ return super.approve(spender, value);\n1766-return-283-283", type_label=return];
1775 [label="284_ increaseAllowance\n1775-function_definition-285-287", type_label=function_definition];
1786 [label="284_ whenNotPaused\n1786-expression_statement-285-285", type_label=expression_statement];
1793 [label="285_ return super.increaseAllowance(spender, addedValue);\n1793-return-286-286", type_label=return];
1802 [label="287_ decreaseAllowance\n1802-function_definition-288-290", type_label=function_definition];
1813 [label="287_ whenNotPaused\n1813-expression_statement-288-288", type_label=expression_statement];
1820 [label="288_ return super.decreaseAllowance(spender, subtractedValue);\n1820-return-289-289", type_label=return];
1847 [label="293_ address[] public investors;\n1847-new_variable-294-294", type_label=new_variable];
1866 [label="294_ ERC20Detailed(_name,_symbol,_decimals)\n1866-expression_statement-295-295", type_label=expression_statement];
1875 [label="296_ mint\n1875-function_definition-297-302", type_label=function_definition];
1886 [label="296_ onlyMinter\n1886-expression_statement-297-297", type_label=expression_statement];
1893 [label="297_ if_balanceOf(account) == 0\n1893-if-298-300", type_label=if];
3839 [label="297_ end_if", type_label=end_if];
1901 [label="298_ investors.push(account);\n1901-expression_statement-299-299", type_label=expression_statement];
1908 [label="300_ return super.mint(account, amount);\n1908-return-301-301", type_label=return];
1917 [label="302_ initToken\n1917-function_definition-303-308", type_label=function_definition];
1928 [label="302_ onlyOwner\n1928-expression_statement-303-303", type_label=expression_statement];
1931 [label="303_ addMinter(_directorsBoard);\n1931-expression_statement-304-304", type_label=expression_statement];
1936 [label="304_ addMinter(_crowdliSTO);\n1936-expression_statement-305-305", type_label=expression_statement];
1941 [label="305_ addPauser(_directorsBoard);\n1941-expression_statement-306-306", type_label=expression_statement];
1946 [label="306_ addPauser(_crowdliSTO);\n1946-expression_statement-307-307", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
58 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 78  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
78 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
84 -> 98  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
119 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
284 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
312 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
331 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
340 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
342 -> 351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
351 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
360 -> 377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
397 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
434 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 456  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
451 -> 2397  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2397 -> 458  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 2397  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
456 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
458 -> 466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
480 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 507  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
507 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
517 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
534 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
563 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
570 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
595 -> 608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
608 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
612 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
628 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
642 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
665 -> 681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
692 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
695 -> 715  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
746 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
749 -> 765  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
765 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
787 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
790 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
806 -> 828  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
828 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
831 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
847 -> 859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
859 -> 871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 884  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 929  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
929 -> 938  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 985  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
985 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1017 -> 1033  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1033 -> 1045  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1045 -> 1057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1073 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1085 -> 1092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1165 -> 1178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1178 -> 1191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1200 -> 1218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1218 -> 1230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1230 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1281 -> 1294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1296 -> 1309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1309 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1316 -> 1326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1335  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1342 -> 1350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1361 -> 1369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1393 -> 1411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1411 -> 1418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1418 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1466 -> 1479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1481 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1494 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1501 -> 1511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1516 -> 1520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1527 -> 1535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1546 -> 1554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1599 -> 1608  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1608 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1610 -> 1624  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1613 -> 1622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1627 -> 1635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1637 -> 1645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 1642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1656 -> 1664  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1659 -> 1661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1688 -> 1706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1706 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1715 -> 1737  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1737 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1748 -> 1766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1766 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1775 -> 1793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1793 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1802 -> 1820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1820 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1875 -> 1893  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1893 -> 1901  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1893 -> 3839  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3839 -> 1908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1901 -> 3839  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1908 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1917 -> 1931  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1931 -> 1936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1936 -> 1941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1941 -> 1946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
