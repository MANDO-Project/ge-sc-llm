digraph  {
13 [label="2_ address public owner;\n13-new_variable-3-3", method="", type_label=new_variable];
20 [label="4_ owner = msg.sender;\n20-expression_statement-5-5", method="", type_label=expression_statement];
26 [label="6_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n26-function_definition-7-8", method="bug_unchk_send5()", type_label=function_definition];
31 [label="7_ msg.sender.transfer(1 ether);\n31-expression_statement-8-8", method="bug_unchk_send5()", type_label=expression_statement];
41 [label="8_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n41-expression_statement-9-12", method="", type_label=expression_statement];
44 [label="9_ require(msg.sender == owner);\n44-expression_statement-10-10", method="", type_label=expression_statement];
53 [label="10_ _;\n53-expression_statement-11-11", method="", type_label=expression_statement];
55 [label="12_ function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n55-function_definition-13-15", method="transferOwnership(address newOwner)", type_label=function_definition];
61 [label="12_ onlyOwner\n61-expression_statement-13-13", method="transferOwnership(address newOwner)", type_label=expression_statement];
65 [label="13_ owner = newOwner;\n65-expression_statement-14-14", method="transferOwnership(address newOwner)", type_label=expression_statement];
69 [label="15_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n69-function_definition-16-17", method="bug_unchk_send15()", type_label=function_definition];
74 [label="16_ msg.sender.transfer(1 ether);\n74-expression_statement-17-17", method="bug_unchk_send15()", type_label=expression_statement];
87 [label="19_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n87-function_definition-20-21", method="bug_unchk_send7()", type_label=function_definition];
92 [label="20_ msg.sender.transfer(1 ether);\n92-expression_statement-21-21", method="bug_unchk_send7()", type_label=expression_statement];
112 [label="22_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n112-function_definition-23-24", method="bug_unchk_send23()", type_label=function_definition];
117 [label="23_ msg.sender.transfer(1 ether);\n117-expression_statement-24-24", method="bug_unchk_send23()", type_label=expression_statement];
145 [label="25_ function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public {\n        Token t = Token(_token);\n        require(t.transferFrom(_from, address(this), _value));\n        emit receivedTokens(_from, _value, _token, _extraData);\n    }\n145-function_definition-26-30", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=function_definition];
165 [label="26_ Token t = Token(_token);\n165-new_variable-27-27", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=new_variable];
175 [label="27_ require(t.transferFrom(_from, address(this), _value));\n175-expression_statement-28-28", method="receiveApproval(address _from,uint256 _value,address _token,bytes memory _extraData)", type_label=expression_statement];
201 [label="30_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n201-function_definition-31-32", method="bug_unchk_send28()", type_label=function_definition];
206 [label="31_ msg.sender.transfer(1 ether);\n206-expression_statement-32-32", method="bug_unchk_send28()", type_label=expression_statement];
230 [label="35_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n230-function_definition-36-37", method="bug_unchk_send21()", type_label=function_definition];
235 [label="36_ msg.sender.transfer(1 ether);\n235-expression_statement-37-37", method="bug_unchk_send21()", type_label=expression_statement];
248 [label="39_ function totalSupply() public view returns (uint256);\n248-function_definition-40-40", method="totalSupply()", type_label=function_definition];
256 [label="40_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n256-function_definition-41-42", method="bug_unchk_send10()", type_label=function_definition];
261 [label="41_ msg.sender.transfer(1 ether);\n261-expression_statement-42-42", method="bug_unchk_send10()", type_label=expression_statement];
271 [label="42_ function actualBalanceOf(address _owner) public view returns (uint256 balance);\n271-function_definition-43-43", method="actualBalanceOf(address _owner)", type_label=function_definition];
284 [label="43_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n284-function_definition-44-45", method="bug_unchk_send22()", type_label=function_definition];
289 [label="44_ msg.sender.transfer(1 ether);\n289-expression_statement-45-45", method="bug_unchk_send22()", type_label=expression_statement];
299 [label="45_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n299-function_definition-46-46", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
319 [label="46_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n319-function_definition-47-48", method="bug_unchk_send12()", type_label=function_definition];
324 [label="47_ msg.sender.transfer(1 ether);\n324-expression_statement-48-48", method="bug_unchk_send12()", type_label=expression_statement];
334 [label="48_ function renounceOwnership() public;\n334-function_definition-49-49", method="renounceOwnership()", type_label=function_definition];
337 [label="49_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n337-function_definition-50-51", method="bug_unchk_send11()", type_label=function_definition];
342 [label="50_ msg.sender.transfer(1 ether);\n342-expression_statement-51-51", method="bug_unchk_send11()", type_label=expression_statement];
352 [label="51_ function transferOwnership(address _newOwner) public;\n352-function_definition-52-52", method="transferOwnership(address _newOwner)", type_label=function_definition];
359 [label="52_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n359-function_definition-53-54", method="bug_unchk_send1()", type_label=function_definition];
364 [label="53_ msg.sender.transfer(1 ether);\n364-expression_statement-54-54", method="bug_unchk_send1()", type_label=expression_statement];
374 [label="54_ function pause() public;\n374-function_definition-55-55", method="pause()", type_label=function_definition];
377 [label="55_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n377-function_definition-56-57", method="bug_unchk_send2()", type_label=function_definition];
382 [label="56_ msg.sender.transfer(1 ether);\n382-expression_statement-57-57", method="bug_unchk_send2()", type_label=expression_statement];
392 [label="57_ function unpause() public;\n392-function_definition-58-58", method="unpause()", type_label=function_definition];
395 [label="58_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n395-function_definition-59-60", method="bug_unchk_send17()", type_label=function_definition];
400 [label="59_ msg.sender.transfer(1 ether);\n400-expression_statement-60-60", method="bug_unchk_send17()", type_label=expression_statement];
413 [label="62_ function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"Safe mul error\");\n        return c;\n    }\n413-function_definition-63-70", method="mul(uint256 a,uint256 b)", type_label=function_definition];
430 [label="63_ if_a == 0\n430-if-64-66", method="mul(uint256 a,uint256 b)", type_label=if];
2294 [label="63_ end_if", method="mul(uint256 a,uint256 b)", type_label=end_if];
435 [label="64_ return 0;\n435-return-65-65", method="mul(uint256 a,uint256 b)", type_label=return];
437 [label="66_ uint256 c = a * b;\n437-new_variable-67-67", method="mul(uint256 a,uint256 b)", type_label=new_variable];
445 [label="67_ require(c / a == b, \"Safe mul error\");\n445-expression_statement-68-68", method="mul(uint256 a,uint256 b)", type_label=expression_statement];
457 [label="68_ return c;\n457-return-69-69", method="mul(uint256 a,uint256 b)", type_label=return];
459 [label="70_ function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"Safe div error\");\n        uint256 c = a / b;\n        return c;\n    }\n459-function_definition-71-75", method="div(uint256 a,uint256 b)", type_label=function_definition];
476 [label="71_ require(b > 0, \"Safe div error\");\n476-expression_statement-72-72", method="div(uint256 a,uint256 b)", type_label=expression_statement];
486 [label="72_ uint256 c = a / b;\n486-new_variable-73-73", method="div(uint256 a,uint256 b)", type_label=new_variable];
494 [label="73_ return c;\n494-return-74-74", method="div(uint256 a,uint256 b)", type_label=return];
496 [label="75_ function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"Safe sub error\");\n        uint256 c = a - b;\n        return c;\n    }\n496-function_definition-76-80", method="sub(uint256 a,uint256 b)", type_label=function_definition];
513 [label="76_ require(b <= a, \"Safe sub error\");\n513-expression_statement-77-77", method="sub(uint256 a,uint256 b)", type_label=expression_statement];
523 [label="77_ uint256 c = a - b;\n523-new_variable-78-78", method="sub(uint256 a,uint256 b)", type_label=new_variable];
531 [label="78_ return c;\n531-return-79-79", method="sub(uint256 a,uint256 b)", type_label=return];
533 [label="80_ function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"Safe add error\");\n        return c;\n    }\n533-function_definition-81-85", method="add(uint256 a,uint256 b)", type_label=function_definition];
550 [label="81_ uint256 c = a + b;\n550-new_variable-82-82", method="add(uint256 a,uint256 b)", type_label=new_variable];
558 [label="82_ require(c >= a, \"Safe add error\");\n558-expression_statement-83-83", method="add(uint256 a,uint256 b)", type_label=expression_statement];
568 [label="83_ return c;\n568-return-84-84", method="add(uint256 a,uint256 b)", type_label=return];
570 [label="85_ function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"Safe mod error\");\n        return a % b;\n    }\n570-function_definition-86-89", method="mod(uint256 a,uint256 b)", type_label=function_definition];
587 [label="86_ require(b != 0, \"Safe mod error\");\n587-expression_statement-87-87", method="mod(uint256 a,uint256 b)", type_label=expression_statement];
597 [label="87_ return a % b;\n597-return-88-88", method="mod(uint256 a,uint256 b)", type_label=return];
615 [label="92_ uint public minimumQuorum;\n615-new_variable-93-93", method="", type_label=new_variable];
620 [label="93_ uint public minimumTokensToVote;\n620-new_variable-94-94", method="", type_label=new_variable];
625 [label="94_ uint public debatingPeriodInMinutes;\n625-new_variable-95-95", method="", type_label=new_variable];
630 [label="95_ function bug_unchk_send18() payable public{\n      msg.sender.transfer(1 ether);}\n630-function_definition-96-97", method="bug_unchk_send18()", type_label=function_definition];
635 [label="96_ msg.sender.transfer(1 ether);\n635-expression_statement-97-97", method="bug_unchk_send18()", type_label=expression_statement];
645 [label="97_ Proposal[] public proposals;\n645-new_variable-98-98", method="", type_label=new_variable];
652 [label="98_ function bug_unchk_send29() payable public{\n      msg.sender.transfer(1 ether);}\n652-function_definition-99-100", method="bug_unchk_send29()", type_label=function_definition];
657 [label="99_ msg.sender.transfer(1 ether);\n657-expression_statement-100-100", method="bug_unchk_send29()", type_label=expression_statement];
667 [label="100_ uint public numProposals;\n667-new_variable-101-101", method="", type_label=new_variable];
672 [label="101_ function bug_unchk_send6() payable public{\n      msg.sender.transfer(1 ether);}\n672-function_definition-102-103", method="bug_unchk_send6()", type_label=function_definition];
677 [label="102_ msg.sender.transfer(1 ether);\n677-expression_statement-103-103", method="bug_unchk_send6()", type_label=expression_statement];
687 [label="103_ Token public tokenAddress;\n687-new_variable-104-104", method="", type_label=new_variable];
693 [label="104_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n693-function_definition-105-106", method="bug_unchk_send16()", type_label=function_definition];
698 [label="105_ msg.sender.transfer(1 ether);\n698-expression_statement-106-106", method="bug_unchk_send16()", type_label=expression_statement];
708 [label="106_ address chairmanAddress;\n708-new_variable-107-107", method="", type_label=new_variable];
712 [label="107_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n712-function_definition-108-109", method="bug_unchk_send24()", type_label=function_definition];
717 [label="108_ msg.sender.transfer(1 ether);\n717-expression_statement-109-109", method="bug_unchk_send24()", type_label=expression_statement];
727 [label="109_ bool public initialized = false;\n727-new_variable-110-110", method="", type_label=new_variable];
734 [label="110_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n734-function_definition-111-112", method="bug_unchk_send14()", type_label=function_definition];
739 [label="111_ msg.sender.transfer(1 ether);\n739-expression_statement-112-112", method="bug_unchk_send14()", type_label=expression_statement];
751 [label="113_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n751-function_definition-114-115", method="bug_unchk_send30()", type_label=function_definition];
756 [label="114_ msg.sender.transfer(1 ether);\n756-expression_statement-115-115", method="bug_unchk_send30()", type_label=expression_statement];
784 [label="116_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n784-function_definition-117-118", method="bug_unchk_send8()", type_label=function_definition];
789 [label="117_ msg.sender.transfer(1 ether);\n789-expression_statement-118-118", method="bug_unchk_send8()", type_label=expression_statement];
813 [label="119_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n813-function_definition-120-121", method="bug_unchk_send27()", type_label=function_definition];
818 [label="120_ msg.sender.transfer(1 ether);\n818-expression_statement-121-121", method="bug_unchk_send27()", type_label=expression_statement];
846 [label="122_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n846-function_definition-123-124", method="bug_unchk_send31()", type_label=function_definition];
851 [label="123_ msg.sender.transfer(1 ether);\n851-expression_statement-124-124", method="bug_unchk_send31()", type_label=expression_statement];
883 [label="125_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n883-function_definition-126-127", method="bug_unchk_send13()", type_label=function_definition];
888 [label="126_ msg.sender.transfer(1 ether);\n888-expression_statement-127-127", method="bug_unchk_send13()", type_label=expression_statement];
912 [label="128_ struct Proposal {\n        address recipient;\n        uint amount;\n        string description;\n        bool signedByChairman;\n        uint minExecutionDate;\n        bool executed;\n        bool proposalPassed;\n        uint numberOfVotes;\n        bytes32 proposalHash;\n        Vote[] votes;\n        mapping (address => bool) voted;\n    }\n912-expression_statement-129-141", method="Proposal()", type_label=expression_statement];
962 [label="141_ struct Vote {\n        bool inSupport;\n        address voter;\n    }\n962-expression_statement-142-145", method="Vote()", type_label=expression_statement];
972 [label="145_ modifier onlyTokenholders {\n        require(tokenAddress.actualBalanceOf(msg.sender) > minimumTokensToVote);\n        _;\n    }\n972-expression_statement-146-149", method="", type_label=expression_statement];
975 [label="146_ require(tokenAddress.actualBalanceOf(msg.sender) > minimumTokensToVote);\n975-expression_statement-147-147", method="", type_label=expression_statement];
989 [label="147_ _;\n989-expression_statement-148-148", method="", type_label=expression_statement];
991 [label="149_ modifier onlyChairman {\n        require(msg.sender == chairmanAddress);\n        _;\n    }\n991-expression_statement-150-153", method="", type_label=expression_statement];
994 [label="150_ require(msg.sender == chairmanAddress);\n994-expression_statement-151-151", method="", type_label=expression_statement];
1003 [label="151_ _;\n1003-expression_statement-152-152", method="", type_label=expression_statement];
1007 [label="155_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n1007-function_definition-156-157", method="bug_unchk_send3()", type_label=function_definition];
1012 [label="156_ msg.sender.transfer(1 ether);\n1012-expression_statement-157-157", method="bug_unchk_send3()", type_label=expression_statement];
1022 [label="157_ function init(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {\n        require(!initialized);\n        initialized = true;\n        changeVotingRules(_tokenAddress, _chairmanAddress, _minimumTokensToVote, _minimumPercentToPassAVote, _minutesForDebate);\n        emit Initialized();\n    }\n1022-function_definition-158-163", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=function_definition];
1045 [label="157_ onlyOwner\n1045-expression_statement-158-158", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1049 [label="158_ require(!initialized);\n1049-expression_statement-159-159", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1055 [label="159_ initialized = true;\n1055-expression_statement-160-160", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1060 [label="160_ changeVotingRules(_tokenAddress, _chairmanAddress, _minimumTokensToVote, _minimumPercentToPassAVote, _minutesForDebate);\n1060-expression_statement-161-161", method="init(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1075 [label="163_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n1075-function_definition-164-165", method="bug_unchk_send9()", type_label=function_definition];
1080 [label="164_ msg.sender.transfer(1 ether);\n1080-expression_statement-165-165", method="bug_unchk_send9()", type_label=expression_statement];
1090 [label="165_ function changeVotingRules(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {\n        require(_chairmanAddress != address(0));\n        require(_minimumPercentToPassAVote <= 51);\n        tokenAddress = Token(_tokenAddress);\n        chairmanAddress = _chairmanAddress;\n        if (_minimumTokensToVote == 0 ) _minimumTokensToVote = 1;\n        minimumTokensToVote = _minimumTokensToVote;\n        if (_minimumPercentToPassAVote == 0 ) _minimumPercentToPassAVote = 51;\n        minimumQuorum = _minimumPercentToPassAVote;\n        debatingPeriodInMinutes = _minutesForDebate;\n        emit ChangeOfRules(_minimumTokensToVote, minimumQuorum, debatingPeriodInMinutes, address(tokenAddress), chairmanAddress);\n    }\n1090-function_definition-166-177", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=function_definition];
1113 [label="165_ onlyOwner\n1113-expression_statement-166-166", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1117 [label="166_ require(_chairmanAddress != address(0));\n1117-expression_statement-167-167", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1126 [label="167_ require(_minimumPercentToPassAVote <= 51);\n1126-expression_statement-168-168", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1133 [label="168_ tokenAddress = Token(_tokenAddress);\n1133-expression_statement-169-169", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1140 [label="169_ chairmanAddress = _chairmanAddress;\n1140-expression_statement-170-170", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1144 [label="170_ if__minimumTokensToVote == 0\n1144-if-171-171", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=if];
3008 [label="170_ end_if", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=end_if];
1148 [label="170_ _minimumTokensToVote = 1;\n1148-expression_statement-171-171", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1152 [label="171_ minimumTokensToVote = _minimumTokensToVote;\n1152-expression_statement-172-172", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1156 [label="172_ if__minimumPercentToPassAVote == 0\n1156-if-173-173", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=if];
3020 [label="172_ end_if", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=end_if];
1160 [label="172_ _minimumPercentToPassAVote = 51;\n1160-expression_statement-173-173", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1164 [label="173_ minimumQuorum = _minimumPercentToPassAVote;\n1164-expression_statement-174-174", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1168 [label="174_ debatingPeriodInMinutes = _minutesForDebate;\n1168-expression_statement-175-175", method="changeVotingRules(Token _tokenAddress,address _chairmanAddress,uint _minimumTokensToVote,uint _minimumPercentToPassAVote,uint _minutesForDebate)", type_label=expression_statement];
1186 [label="177_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n1186-function_definition-178-179", method="bug_unchk_send25()", type_label=function_definition];
1191 [label="178_ msg.sender.transfer(1 ether);\n1191-expression_statement-179-179", method="bug_unchk_send25()", type_label=expression_statement];
1201 [label="179_ function newProposal(\n        address destination,\n        uint weiAmount,\n        string memory transactionDescription,\n        bytes memory transactionBytecode\n    )\n        onlyTokenholders public\n        returns (uint proposalID)\n    {\n        proposalID = proposals.length++;\n        Proposal storage p = proposals[proposalID];\n        p.recipient = destination;\n        p.signedByChairman = false;\n        p.amount = weiAmount;\n        p.description = transactionDescription;\n        p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n        p.minExecutionDate = now + debatingPeriodInMinutes * 1 minutes;\n        p.executed = false;\n        p.proposalPassed = false;\n        p.numberOfVotes = 0;\n        emit ProposalAdded(proposalID, destination, weiAmount, transactionDescription);\n        numProposals = proposalID+1;\n        return proposalID;\n    }\n1201-function_definition-180-203", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=function_definition];
1219 [label="185_ onlyTokenholders\n1219-expression_statement-186-186", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1228 [label="188_ proposalID = proposals.length++;\n1228-expression_statement-189-189", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1231 [label="188_ proposals.length++\n1231-expression_statement-189-189", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1235 [label="189_ Proposal storage p = proposals[proposalID];\n1235-new_variable-190-190", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=new_variable];
1244 [label="190_ p.recipient = destination;\n1244-expression_statement-191-191", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1250 [label="191_ p.signedByChairman = false;\n1250-expression_statement-192-192", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1257 [label="192_ p.amount = weiAmount;\n1257-expression_statement-193-193", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1263 [label="193_ p.description = transactionDescription;\n1263-expression_statement-194-194", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1269 [label="194_ p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n1269-expression_statement-195-195", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1287 [label="195_ p.minExecutionDate = now + debatingPeriodInMinutes * 1 minutes;\n1287-expression_statement-196-196", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1298 [label="196_ p.executed = false;\n1298-expression_statement-197-197", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1305 [label="197_ p.proposalPassed = false;\n1305-expression_statement-198-198", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1312 [label="198_ p.numberOfVotes = 0;\n1312-expression_statement-199-199", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1328 [label="200_ numProposals = proposalID+1;\n1328-expression_statement-201-201", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=expression_statement];
1334 [label="201_ return proposalID;\n1334-return-202-202", method="newProposal(address destination,uint weiAmount,string memory transactionDescription,bytes memory transactionBytecode)", type_label=return];
1336 [label="203_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n1336-function_definition-204-205", method="bug_unchk_send19()", type_label=function_definition];
1341 [label="204_ msg.sender.transfer(1 ether);\n1341-expression_statement-205-205", method="bug_unchk_send19()", type_label=expression_statement];
1351 [label="205_ function checkProposalCode(\n        uint proposalNumber,\n        address destination,\n        uint weiAmount,\n        bytes memory transactionBytecode\n    )\n        view public\n        returns (bool codeChecksOut)\n    {\n        Proposal storage p = proposals[proposalNumber];\n        return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n    }\n1351-function_definition-206-217", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=function_definition];
1377 [label="214_ Proposal storage p = proposals[proposalNumber];\n1377-new_variable-215-215", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=new_variable];
1386 [label="215_ return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\n1386-return-216-216", method="checkProposalCode(uint proposalNumber,address destination,uint weiAmount,bytes memory transactionBytecode)", type_label=return];
1404 [label="217_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n1404-function_definition-218-219", method="bug_unchk_send26()", type_label=function_definition];
1409 [label="218_ msg.sender.transfer(1 ether);\n1409-expression_statement-219-219", method="bug_unchk_send26()", type_label=expression_statement];
1419 [label="219_ function sign(\n        uint proposalNumber,\n        bool signProposal\n    )\n        onlyTokenholders public\n        returns (uint voteID)\n    {\n        require(initialized);\n        Proposal storage p = proposals[proposalNumber];\n        require(msg.sender == chairmanAddress);\n        require(signProposal == true);\n        p.signedByChairman = signProposal;\n        emit ProposalSignedByChairman(proposalNumber,  signProposal, msg.sender);\n        return proposalNumber;\n    }\n1419-function_definition-220-234", method="sign(uint proposalNumber,bool signProposal)", type_label=function_definition];
1429 [label="223_ onlyTokenholders\n1429-expression_statement-224-224", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
1438 [label="226_ require(initialized);\n1438-expression_statement-227-227", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
1443 [label="227_ Proposal storage p = proposals[proposalNumber];\n1443-new_variable-228-228", method="sign(uint proposalNumber,bool signProposal)", type_label=new_variable];
1452 [label="228_ require(msg.sender == chairmanAddress);\n1452-expression_statement-229-229", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
1461 [label="229_ require(signProposal == true);\n1461-expression_statement-230-230", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
1469 [label="230_ p.signedByChairman = signProposal;\n1469-expression_statement-231-231", method="sign(uint proposalNumber,bool signProposal)", type_label=expression_statement];
1485 [label="232_ return proposalNumber;\n1485-return-233-233", method="sign(uint proposalNumber,bool signProposal)", type_label=return];
1487 [label="234_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n1487-function_definition-235-236", method="bug_unchk_send20()", type_label=function_definition];
1492 [label="235_ msg.sender.transfer(1 ether);\n1492-expression_statement-236-236", method="bug_unchk_send20()", type_label=expression_statement];
1502 [label="236_ function vote(\n        uint proposalNumber,\n        bool supportsProposal\n    )\n        onlyTokenholders public\n        returns (uint voteID)\n    {\n        Proposal storage p = proposals[proposalNumber];\n        require(p.voted[msg.sender] != true);\n        voteID = p.votes.length++;\n        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\n        p.voted[msg.sender] = true;\n        p.numberOfVotes = voteID +1;\n        emit Voted(proposalNumber,  supportsProposal, msg.sender);\n        return voteID;\n    }\n1502-function_definition-237-252", method="vote(uint proposalNumber,bool supportsProposal)", type_label=function_definition];
1512 [label="240_ onlyTokenholders\n1512-expression_statement-241-241", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
1521 [label="243_ Proposal storage p = proposals[proposalNumber];\n1521-new_variable-244-244", method="vote(uint proposalNumber,bool supportsProposal)", type_label=new_variable];
1530 [label="244_ require(p.voted[msg.sender] != true);\n1530-expression_statement-245-245", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
1544 [label="245_ voteID = p.votes.length++;\n1544-expression_statement-246-246", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
1547 [label="245_ p.votes.length++\n1547-expression_statement-246-246", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
1553 [label="246_ p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\n1553-expression_statement-247-247", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
1571 [label="247_ p.voted[msg.sender] = true;\n1571-expression_statement-248-248", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
1582 [label="248_ p.numberOfVotes = voteID +1;\n1582-expression_statement-249-249", method="vote(uint proposalNumber,bool supportsProposal)", type_label=expression_statement];
1600 [label="250_ return voteID;\n1600-return-251-251", method="vote(uint proposalNumber,bool supportsProposal)", type_label=return];
1602 [label="252_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n1602-function_definition-253-254", method="bug_unchk_send32()", type_label=function_definition];
1607 [label="253_ msg.sender.transfer(1 ether);\n1607-expression_statement-254-254", method="bug_unchk_send32()", type_label=expression_statement];
1617 [label="254_ function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public {\n        Proposal storage p = proposals[proposalNumber];\n        require(initialized);\n        require(now > p.minExecutionDate                                              \n            && !p.executed                                                           \n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)));  \n        uint quorum = 0;\n        uint yea = 0;\n        uint nay = 0;\n        for (uint i = 0; i <  p.votes.length; ++i) {\n            Vote storage v = p.votes[i];\n            uint voteWeight = tokenAddress.actualBalanceOf(v.voter);\n            quorum += voteWeight;\n            if (v.inSupport) {\n                yea += voteWeight;\n            } else {\n                nay += voteWeight;\n            }\n        }\n        Token t = Token(tokenAddress);\n        require(quorum >= t.totalSupply().mul(minimumQuorum).div(100));  \n        if (yea > nay ) {\n            p.executed = true;\n            (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);\n            require(success);\n            p.proposalPassed = true;\n        } else {\n            p.proposalPassed = false;\n        }\n        emit ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed);\n    }\n1617-function_definition-255-285", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=function_definition];
1629 [label="255_ Proposal storage p = proposals[proposalNumber];\n1629-new_variable-256-256", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
1638 [label="256_ require(initialized);\n1638-expression_statement-257-257", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
1643 [label="257_ require(now > p.minExecutionDate                                              \n            && !p.executed                                                           \n            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode)));\n1643-expression_statement-258-260", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
1679 [label="260_ uint quorum = 0;\n1679-new_variable-261-261", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
1685 [label="261_ uint yea = 0;\n1685-new_variable-262-262", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
1691 [label="262_ uint nay = 0;\n1691-new_variable-263-263", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
1697 [label="263_ for(i <  p.votes.length;;++i)\n1697-for-264-273", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=for];
3561 [label="263_ end_loop", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_loop];
1712 [label="263_ ++i\n1712-expression_statement-264-264", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
1715 [label="264_ Vote storage v = p.votes[i];\n1715-new_variable-265-265", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
1726 [label="265_ uint voteWeight = tokenAddress.actualBalanceOf(v.voter);\n1726-new_variable-266-266", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
1739 [label="266_ quorum += voteWeight;\n1739-expression_statement-267-267", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
1743 [label="267_ if\n1743-if-268-272", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=if];
3607 [label="267_ end_if", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_if];
1748 [label="268_ yea += voteWeight;\n1748-expression_statement-269-269", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
1753 [label="270_ nay += voteWeight;\n1753-expression_statement-271-271", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
1757 [label="273_ Token t = Token(tokenAddress);\n1757-new_variable-274-274", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
1767 [label="274_ require(quorum >= t.totalSupply().mul(minimumQuorum).div(100));\n1767-expression_statement-275-275", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
1787 [label="275_ if_yea > nay\n1787-if-276-283", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=if];
3651 [label="275_ end_if", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=end_if];
1792 [label="276_ p.executed = true;\n1792-expression_statement-277-277", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
1799 [label="277_ (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);\n1799-new_variable-278-278", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=new_variable];
1820 [label="278_ require(success);\n1820-expression_statement-279-279", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
1825 [label="279_ p.proposalPassed = true;\n1825-expression_statement-280-280", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
1833 [label="281_ p.proposalPassed = false;\n1833-expression_statement-282-282", method="executeProposal(uint proposalNumber,bytes memory transactionBytecode)", type_label=expression_statement];
1854 [label="285_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n1854-function_definition-286-287", method="bug_unchk_send4()", type_label=function_definition];
1859 [label="286_ msg.sender.transfer(1 ether);\n1859-expression_statement-287-287", method="bug_unchk_send4()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1840;
26 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 65  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 74  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 92  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
145 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
201 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
230 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
256 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
284 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
319 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 342  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
377 -> 382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 435  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
430 -> 2294  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2294 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 2294  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
435 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
437 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
445 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
459 -> 476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 486  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
494 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
496 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 531  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
531 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
533 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
570 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
615 -> 620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
620 -> 625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
652 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
672 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 698  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 717  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
751 -> 756  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
784 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
813 -> 818  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 851  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
883 -> 888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 962  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
962 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
972 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
975 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
994 -> 1003  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1007 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1022 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1055  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 1060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 1080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1090 -> 1117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1126 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1133 -> 1140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1140 -> 1144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1148  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1144 -> 3008  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3008 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1148 -> 3008  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1152 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1156 -> 1160  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1156 -> 3020  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3020 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1160 -> 3020  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1164 -> 1168  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 1244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1244 -> 1250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 1257  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1257 -> 1263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1263 -> 1269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1269 -> 1287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1287 -> 1298  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1298 -> 1305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1305 -> 1312  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 1334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1334 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1336 -> 1341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1351 -> 1377  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1377 -> 1386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1386 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1404 -> 1409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1419 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 1443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1443 -> 1452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1452 -> 1461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1461 -> 1469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1485 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1487 -> 1492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1502 -> 1521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1521 -> 1530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1530 -> 1544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1544 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1553 -> 1571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1571 -> 1582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1600 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1602 -> 1607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1617 -> 1629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1629 -> 1638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1638 -> 1643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1643 -> 1679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1679 -> 1685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1685 -> 1691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1691 -> 1697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1697 -> 1715  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1697 -> 3561  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3561 -> 1757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1712 -> 1697  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1715 -> 1726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1726 -> 1739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1739 -> 1743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1743 -> 1748  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1743 -> 1753  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3607 -> 1712  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
3607 -> 1712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=1, label=next_line];
1748 -> 3607  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1753 -> 3607  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1757 -> 1767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1767 -> 1787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1787 -> 1792  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1787 -> 1833  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3651 -> 1840  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1792 -> 1799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1799 -> 1820  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1820 -> 1825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1825 -> 3651  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1833 -> 3651  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1854 -> 1859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
