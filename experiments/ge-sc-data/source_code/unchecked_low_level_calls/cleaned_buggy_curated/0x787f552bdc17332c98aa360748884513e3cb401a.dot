digraph  {
16 [label="3_ mul\n16-function_definition-4-11", type_label=function_definition];
33 [label="4_ if_a == 0\n33-if-5-7", type_label=if];
3141 [label="4_ end_if", type_label=end_if];
38 [label="5_ return 0;\n38-return-6-6", type_label=return];
40 [label="7_ uint256 c = a * b;\n40-new_variable-8-8", type_label=new_variable];
48 [label="8_ require(c / a == b);\n48-expression_statement-9-9", type_label=expression_statement];
57 [label="9_ return c;\n57-return-10-10", type_label=return];
59 [label="11_ div\n59-function_definition-12-16", type_label=function_definition];
76 [label="12_ require(b > 0);\n76-expression_statement-13-13", type_label=expression_statement];
83 [label="13_ uint256 c = a / b;\n83-new_variable-14-14", type_label=new_variable];
91 [label="14_ return c;\n91-return-15-15", type_label=return];
93 [label="16_ sub\n93-function_definition-17-21", type_label=function_definition];
110 [label="17_ require(b <= a);\n110-expression_statement-18-18", type_label=expression_statement];
117 [label="18_ uint256 c = a - b;\n117-new_variable-19-19", type_label=new_variable];
125 [label="19_ return c;\n125-return-20-20", type_label=return];
127 [label="21_ add\n127-function_definition-22-26", type_label=function_definition];
144 [label="22_ uint256 c = a + b;\n144-new_variable-23-23", type_label=new_variable];
152 [label="23_ require(c >= a);\n152-expression_statement-24-24", type_label=expression_statement];
159 [label="24_ return c;\n159-return-25-25", type_label=return];
161 [label="26_ mod\n161-function_definition-27-30", type_label=function_definition];
178 [label="27_ require(b != 0);\n178-expression_statement-28-28", type_label=expression_statement];
185 [label="28_ return a % b;\n185-return-29-29", type_label=return];
192 [label="32_ address private _owner;\n192-new_variable-33-33", type_label=new_variable];
209 [label="35_ _owner = msg.sender;\n209-expression_statement-36-36", type_label=expression_statement];
223 [label="38_ owner\n223-function_definition-39-41", type_label=function_definition];
232 [label="39_ return _owner;\n232-return-40-40", type_label=return];
234 [label="41_ modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n234-expression_statement-42-45", type_label=expression_statement];
237 [label="42_ require(isOwner());\n237-expression_statement-43-43", type_label=expression_statement];
243 [label="43_ _;\n243-expression_statement-44-44", type_label=expression_statement];
245 [label="45_ isOwner\n245-function_definition-46-48", type_label=function_definition];
254 [label="46_ return msg.sender == _owner;\n254-return-47-47", type_label=return];
260 [label="48_ renounceOwnership\n260-function_definition-49-52", type_label=function_definition];
263 [label="48_ onlyOwner\n263-expression_statement-49-49", type_label=expression_statement];
274 [label="50_ _owner = address(0);\n274-expression_statement-51-51", type_label=expression_statement];
280 [label="52_ transferOwnership\n280-function_definition-53-55", type_label=function_definition];
287 [label="52_ onlyOwner\n287-expression_statement-53-53", type_label=expression_statement];
290 [label="53_ _transferOwnership(newOwner);\n290-expression_statement-54-54", type_label=expression_statement];
295 [label="55_ _transferOwnership\n295-function_definition-56-60", type_label=function_definition];
303 [label="56_ require(newOwner != address(0));\n303-expression_statement-57-57", type_label=expression_statement];
318 [label="58_ _owner = newOwner;\n318-expression_statement-59-59", type_label=expression_statement];
353 [label="72_ totalSupply\n353-function_definition-73-77", type_label=function_definition];
361 [label="77_ balanceOf\n361-function_definition-78-83", type_label=function_definition];
373 [label="83_ allowance\n373-function_definition-84-90", type_label=function_definition];
389 [label="90_ transfer\n389-function_definition-91-95", type_label=function_definition];
400 [label="95_ transferFrom\n400-function_definition-96-101", type_label=function_definition];
415 [label="101_ approve\n415-function_definition-102-106", type_label=function_definition];
426 [label="106_ name\n426-function_definition-107-110", type_label=function_definition];
434 [label="110_ symbol\n434-function_definition-111-114", type_label=function_definition];
442 [label="114_ decimals\n442-function_definition-115-118", type_label=function_definition];
453 [label="120_ struct Price {\n        uint256 value;\n    }\n453-expression_statement-121-123", type_label=expression_statement];
459 [label="123_ struct Value {\n        uint256 value;\n    }\n459-expression_statement-124-126", type_label=expression_statement];
468 [label="128_ uint256 public constant ONE_DOLLAR = 10 ** 36;\n468-new_variable-129-129", type_label=new_variable];
476 [label="129_ getPrice\n476-function_definition-130-135", type_label=function_definition];
493 [label="137_ uint256 constant ASCII_ZERO = 48;\n493-new_variable-138-138", type_label=new_variable];
498 [label="138_ uint256 constant ASCII_RELATIVE_ZERO = 87;\n498-new_variable-139-139", type_label=new_variable];
503 [label="139_ uint256 constant ASCII_LOWER_EX = 120;\n503-new_variable-140-140", type_label=new_variable];
508 [label="140_ bytes2 constant COLON = 0x3a20;\n508-new_variable-141-141", type_label=new_variable];
513 [label="141_ bytes2 constant COMMA = 0x2c20;\n513-new_variable-142-142", type_label=new_variable];
518 [label="142_ bytes2 constant LPAREN = 0x203c;\n518-new_variable-143-143", type_label=new_variable];
523 [label="143_ byte constant RPAREN = 0x3e;\n523-new_variable-144-144", type_label=new_variable];
528 [label="144_ uint256 constant FOUR_BIT_MASK = 0xf;\n528-new_variable-145-145", type_label=new_variable];
533 [label="145_ that\n533-function_definition-146-165", type_label=function_definition];
550 [label="153_ if\n550-if-154-164", type_label=if];
3658 [label="153_ end_if", type_label=end_if];
574 [label="165_ that\n574-function_definition-166-189", type_label=function_definition];
595 [label="174_ if\n595-if-175-188", type_label=if];
3703 [label="174_ end_if", type_label=end_if];
628 [label="189_ that\n628-function_definition-190-216", type_label=function_definition];
653 [label="199_ if\n653-if-200-215", type_label=if];
3761 [label="199_ end_if", type_label=end_if];
693 [label="216_ that\n693-function_definition-217-240", type_label=function_definition];
714 [label="225_ if\n714-if-226-239", type_label=if];
3822 [label="225_ end_if", type_label=end_if];
747 [label="240_ that\n747-function_definition-241-267", type_label=function_definition];
772 [label="250_ if\n772-if-251-266", type_label=if];
3880 [label="250_ end_if", type_label=end_if];
812 [label="267_ that\n812-function_definition-268-297", type_label=function_definition];
841 [label="278_ if\n841-if-279-296", type_label=if];
3949 [label="278_ end_if", type_label=end_if];
888 [label="297_ stringify\n888-function_definition-298-317", type_label=function_definition];
901 [label="304_ bytes memory result = abi.encodePacked(input);\n901-new_variable-305-305", type_label=new_variable];
912 [label="305_ for(i > 0;;)\n912-for-306-315", type_label=for];
4020 [label="305_ end_for", type_label=end_for];
924 [label="306_ i--;\n924-expression_statement-307-307", type_label=expression_statement];
925 [label="306_ i--\n925-expression_statement-307-307", type_label=expression_statement];
927 [label="307_ if_result[i] != 0\n927-if-308-314", type_label=if];
4035 [label="307_ end_if", type_label=end_if];
934 [label="308_ uint256 length = i + 1;\n934-new_variable-309-309", type_label=new_variable];
951 [label="312_ return result;\n951-return-313-313", type_label=return];
953 [label="315_ return new bytes(0);\n953-return-316-316", type_label=return];
960 [label="317_ stringify\n960-function_definition-318-342", type_label=function_definition];
973 [label="324_ if_input == 0\n973-if-325-327", type_label=if];
4081 [label="324_ end_if", type_label=end_if];
978 [label="325_ return \"0\";\n978-return-326-326", type_label=return];
981 [label="327_ uint256 j = input;\n981-new_variable-328-328", type_label=new_variable];
987 [label="328_ uint256 length;\n987-new_variable-329-329", type_label=new_variable];
992 [label="329_ while\n992-while-330-333", type_label=while];
4100 [label="329_ end_while", type_label=end_while];
997 [label="330_ length++;\n997-expression_statement-331-331", type_label=expression_statement];
998 [label="330_ length++\n998-expression_statement-331-331", type_label=expression_statement];
1000 [label="331_ j /= 10;\n1000-expression_statement-332-332", type_label=expression_statement];
1004 [label="333_ bytes memory bstr = new bytes(length);\n1004-new_variable-334-334", type_label=new_variable];
1015 [label="334_ j = input;\n1015-expression_statement-335-335", type_label=expression_statement];
1019 [label="335_ for(i > 0;;)\n1019-for-336-340", type_label=for];
4127 [label="335_ end_for", type_label=end_for];
1031 [label="336_ i--;\n1031-expression_statement-337-337", type_label=expression_statement];
1032 [label="336_ i--\n1032-expression_statement-337-337", type_label=expression_statement];
1034 [label="337_ bstr[i] = byte(uint8(ASCII_ZERO + (j % 10)));\n1034-expression_statement-338-338", type_label=expression_statement];
1049 [label="338_ j /= 10;\n1049-expression_statement-339-339", type_label=expression_statement];
1053 [label="340_ return bstr;\n1053-return-341-341", type_label=return];
1055 [label="342_ stringify\n1055-function_definition-343-362", type_label=function_definition];
1068 [label="349_ uint256 z = uint256(input);\n1068-new_variable-350-350", type_label=new_variable];
1076 [label="350_ bytes memory result = new bytes(42);\n1076-new_variable-351-351", type_label=new_variable];
1087 [label="351_ result[0] = byte(uint8(ASCII_ZERO));\n1087-expression_statement-352-352", type_label=expression_statement];
1097 [label="352_ result[1] = byte(uint8(ASCII_LOWER_EX));\n1097-expression_statement-353-353", type_label=expression_statement];
1107 [label="353_ for(i < 20;;i++)\n1107-for-354-360", type_label=for];
4215 [label="353_ end_for", type_label=end_for];
1118 [label="353_ i++\n1118-expression_statement-354-354", type_label=expression_statement];
1121 [label="354_ uint256 shift = i * 2;\n1121-new_variable-355-355", type_label=new_variable];
1129 [label="355_ result[41 - shift] = char(z & FOUR_BIT_MASK);\n1129-expression_statement-356-356", type_label=expression_statement];
1142 [label="356_ z = z >> 4;\n1142-expression_statement-357-357", type_label=expression_statement];
1148 [label="357_ result[40 - shift] = char(z & FOUR_BIT_MASK);\n1148-expression_statement-358-358", type_label=expression_statement];
1161 [label="358_ z = z >> 4;\n1161-expression_statement-359-359", type_label=expression_statement];
1167 [label="360_ return result;\n1167-return-361-361", type_label=return];
1169 [label="362_ char\n1169-function_definition-363-374", type_label=function_definition];
1182 [label="369_ if_input < 10\n1182-if-370-372", type_label=if];
4290 [label="369_ end_if", type_label=end_if];
1187 [label="370_ return byte(uint8(input + ASCII_ZERO));\n1187-return-371-371", type_label=return];
1195 [label="372_ return byte(uint8(input + ASCII_RELATIVE_ZERO));\n1195-return-373-373", type_label=return];
1211 [label="377_ bytes32 constant FILE = \"Math\";\n1211-new_variable-378-378", type_label=new_variable];
1217 [label="378_ getPartial\n1217-function_definition-379-389", type_label=function_definition];
1238 [label="387_ return target.mul(numerator).div(denominator);\n1238-return-388-388", type_label=return];
1250 [label="389_ getPartialRoundUp\n1250-function_definition-390-403", type_label=function_definition];
1271 [label="398_ if_target == 0 || numerator == 0\n1271-if-399-401", type_label=if];
4379 [label="398_ end_if", type_label=end_if];
1280 [label="399_ return SafeMath.div(0, denominator);\n1280-return-400-400", type_label=return];
1289 [label="401_ return target.mul(numerator).sub(1).div(denominator).add(1);\n1289-return-402-402", type_label=return];
1311 [label="403_ to128\n1311-function_definition-404-418", type_label=function_definition];
1324 [label="410_ uint128 result = uint128(number);\n1324-new_variable-411-411", type_label=new_variable];
1332 [label="411_ Require.that(\n            result == number,\n            FILE,\n            \"Unsafe cast to uint128\"\n        );\n1332-expression_statement-412-416", type_label=expression_statement];
1346 [label="416_ return result;\n1346-return-417-417", type_label=return];
1348 [label="418_ to96\n1348-function_definition-419-433", type_label=function_definition];
1361 [label="425_ uint96 result = uint96(number);\n1361-new_variable-426-426", type_label=new_variable];
1369 [label="426_ Require.that(\n            result == number,\n            FILE,\n            \"Unsafe cast to uint96\"\n        );\n1369-expression_statement-427-431", type_label=expression_statement];
1383 [label="431_ return result;\n1383-return-432-432", type_label=return];
1385 [label="433_ to32\n1385-function_definition-434-448", type_label=function_definition];
1398 [label="440_ uint32 result = uint32(number);\n1398-new_variable-441-441", type_label=new_variable];
1406 [label="441_ Require.that(\n            result == number,\n            FILE,\n            \"Unsafe cast to uint32\"\n        );\n1406-expression_statement-442-446", type_label=expression_statement];
1420 [label="446_ return result;\n1420-return-447-447", type_label=return];
1422 [label="448_ min\n1422-function_definition-449-458", type_label=function_definition];
1439 [label="456_ return a < b ? a : b;\n1439-return-457-457", type_label=return];
1446 [label="458_ max\n1446-function_definition-459-468", type_label=function_definition];
1463 [label="466_ return a > b ? a : b;\n1463-return-467-467", type_label=return];
1473 [label="470_ currentTime\n1473-function_definition-471-477", type_label=function_definition];
1482 [label="475_ return Math.to32(block.timestamp);\n1482-return-476-476", type_label=return];
1520 [label="487_ peek\n1520-function_definition-488-491", type_label=function_definition];
1531 [label="491_ read\n1531-function_definition-492-495", type_label=function_definition];
1542 [label="497_ struct OfferInfo {\n        uint256 pay_amt;\n        address pay_gem;\n        uint256 buy_amt;\n        address buy_gem;\n        address owner;\n        uint64 timestamp;\n    }\n1542-expression_statement-498-505", type_label=expression_statement];
1568 [label="505_ struct SortInfo {\n        uint256 next;   \n        uint256 prev;   \n        uint256 delb;   \n    }\n1568-expression_statement-506-510", type_label=expression_statement];
1582 [label="510_ last_offer_id\n1582-function_definition-511-514", type_label=function_definition];
1590 [label="514_ offers\n1590-function_definition-515-520", type_label=function_definition];
1603 [label="520_ close_time\n1603-function_definition-521-524", type_label=function_definition];
1611 [label="524_ stopped\n1611-function_definition-525-528", type_label=function_definition];
1619 [label="528_ buyEnabled\n1619-function_definition-529-532", type_label=function_definition];
1627 [label="532_ matchingEnabled\n1627-function_definition-533-536", type_label=function_definition];
1635 [label="536_ _rank\n1635-function_definition-537-542", type_label=function_definition];
1648 [label="542_ _best\n1648-function_definition-543-549", type_label=function_definition];
1664 [label="549_ _span\n1664-function_definition-550-556", type_label=function_definition];
1680 [label="556_ _dust\n1680-function_definition-557-562", type_label=function_definition];
1692 [label="562_ _near\n1692-function_definition-563-568", type_label=function_definition];
1704 [label="568_ isActive\n1704-function_definition-569-574", type_label=function_definition];
1716 [label="574_ getOwner\n1716-function_definition-575-580", type_label=function_definition];
1728 [label="580_ getOffer\n1728-function_definition-581-586", type_label=function_definition];
1749 [label="586_ getMinSell\n1749-function_definition-587-592", type_label=function_definition];
1761 [label="592_ getBestOffer\n1761-function_definition-593-599", type_label=function_definition];
1777 [label="599_ getWorseOffer\n1777-function_definition-600-605", type_label=function_definition];
1789 [label="605_ getBetterOffer\n1789-function_definition-606-611", type_label=function_definition];
1801 [label="611_ getOfferCount\n1801-function_definition-612-618", type_label=function_definition];
1817 [label="618_ getFirstUnsortedOffer\n1817-function_definition-619-622", type_label=function_definition];
1825 [label="622_ getNextUnsortedOffer\n1825-function_definition-623-628", type_label=function_definition];
1837 [label="628_ isOfferSorted\n1837-function_definition-629-634", type_label=function_definition];
1849 [label="634_ getBuyAmount\n1849-function_definition-635-642", type_label=function_definition];
1869 [label="642_ getPayAmount\n1869-function_definition-643-650", type_label=function_definition];
1889 [label="650_ isClosed\n1889-function_definition-651-654", type_label=function_definition];
1897 [label="654_ getTime\n1897-function_definition-655-658", type_label=function_definition];
1905 [label="658_ bump\n1905-function_definition-659-662", type_label=function_definition];
1912 [label="662_ buy\n1912-function_definition-663-668", type_label=function_definition];
1927 [label="668_ cancel\n1927-function_definition-669-673", type_label=function_definition];
1938 [label="673_ kill\n1938-function_definition-674-677", type_label=function_definition];
1945 [label="677_ make\n1945-function_definition-678-685", type_label=function_definition];
1968 [label="685_ take\n1968-function_definition-686-690", type_label=function_definition];
1979 [label="690_ offer\n1979-function_definition-691-698", type_label=function_definition];
2002 [label="698_ offer\n2002-function_definition-699-707", type_label=function_definition];
2029 [label="707_ offer\n2029-function_definition-708-717", type_label=function_definition];
2060 [label="717_ insert\n2060-function_definition-718-723", type_label=function_definition];
2075 [label="723_ del_rank\n2075-function_definition-724-728", type_label=function_definition];
2086 [label="728_ sellAllAmount\n2086-function_definition-729-736", type_label=function_definition];
2109 [label="736_ buyAllAmount\n2109-function_definition-737-744", type_label=function_definition];
2146 [label="750_ bytes32 constant FILE = \"DaiPriceOracle\";\n2146-new_variable-751-751", type_label=new_variable];
2152 [label="751_ uint256 constant DECIMALS = 18;\n2152-new_variable-752-752", type_label=new_variable];
2157 [label="752_ uint256 constant EXPECTED_PRICE = ONE_DOLLAR / (10 ** DECIMALS);\n2157-new_variable-753-753", type_label=new_variable];
2167 [label="753_ struct PriceInfo {\n        uint128 price;\n        uint32 lastUpdate;\n    }\n2167-expression_statement-754-757", type_label=expression_statement];
2177 [label="757_ struct DeviationParams {\n        uint64 denominator;\n        uint64 maximumPerSecond;\n        uint64 maximumAbsolute;\n    }\n2177-expression_statement-758-762", type_label=expression_statement];
2198 [label="765_ PriceInfo public g_priceInfo;\n2198-new_variable-766-766", type_label=new_variable];
2204 [label="766_ address public g_poker;\n2204-new_variable-767-767", type_label=new_variable];
2209 [label="767_ DeviationParams public DEVIATION_PARAMS;\n2209-new_variable-768-768", type_label=new_variable];
2215 [label="768_ uint256 public OASIS_ETH_AMOUNT;\n2215-new_variable-769-769", type_label=new_variable];
2220 [label="769_ IErc20 public WETH;\n2220-new_variable-770-770", type_label=new_variable];
2226 [label="770_ IErc20 public DAI;\n2226-new_variable-771-771", type_label=new_variable];
2232 [label="771_ IMakerOracle public MEDIANIZER;\n2232-new_variable-772-772", type_label=new_variable];
2238 [label="772_ IOasisDex public OASIS;\n2238-new_variable-773-773", type_label=new_variable];
2244 [label="773_ address public UNISWAP;\n2244-new_variable-774-774", type_label=new_variable];
2284 [label="786_ g_poker = poker;\n2284-expression_statement-787-787", type_label=expression_statement];
2288 [label="787_ MEDIANIZER = IMakerOracle(medianizer);\n2288-expression_statement-788-788", type_label=expression_statement];
2295 [label="788_ WETH = IErc20(weth);\n2295-expression_statement-789-789", type_label=expression_statement];
2302 [label="789_ DAI = IErc20(dai);\n2302-expression_statement-790-790", type_label=expression_statement];
2309 [label="790_ OASIS = IOasisDex(oasis);\n2309-expression_statement-791-791", type_label=expression_statement];
2316 [label="791_ UNISWAP = uniswap;\n2316-expression_statement-792-792", type_label=expression_statement];
2320 [label="792_ DEVIATION_PARAMS = deviationParams;\n2320-expression_statement-793-793", type_label=expression_statement];
2324 [label="793_ OASIS_ETH_AMOUNT = oasisEthAmount;\n2324-expression_statement-794-794", type_label=expression_statement];
2328 [label="794_ g_priceInfo = PriceInfo({\n            lastUpdate: uint32(block.timestamp),\n            price: uint128(EXPECTED_PRICE)\n        });\n2328-expression_statement-795-798", type_label=expression_statement];
2346 [label="799_ ownerSetPokerAddress\n2346-function_definition-800-807", type_label=function_definition];
2353 [label="803_ onlyOwner\n2353-expression_statement-804-804", type_label=expression_statement];
2356 [label="805_ g_poker = newPoker;\n2356-expression_statement-806-806", type_label=expression_statement];
2360 [label="807_ updatePrice\n2360-function_definition-808-842", type_label=function_definition];
2381 [label="814_ Require.that(\n            msg.sender == g_poker,\n            FILE,\n            \"Only poker can call updatePrice\",\n            msg.sender\n        );\n2381-expression_statement-815-820", type_label=expression_statement];
2401 [label="820_ Monetary.Price memory newPrice = getBoundedTargetPrice();\n2401-new_variable-821-821", type_label=new_variable];
2410 [label="821_ Require.that(\n            newPrice.value >= minimum.value,\n            FILE,\n            \"newPrice below minimum\",\n            newPrice.value,\n            minimum.value\n        );\n2410-expression_statement-822-828", type_label=expression_statement];
2436 [label="828_ Require.that(\n            newPrice.value <= maximum.value,\n            FILE,\n            \"newPrice above maximum\",\n            newPrice.value,\n            maximum.value\n        );\n2436-expression_statement-829-835", type_label=expression_statement];
2462 [label="835_ g_priceInfo = PriceInfo({\n            price: Math.to128(newPrice.value),\n            lastUpdate: Time.currentTime()\n        });\n2462-expression_statement-836-839", type_label=expression_statement];
2488 [label="840_ return g_priceInfo;\n2488-return-841-841", type_label=return];
2490 [label="842_ getPrice\n2490-function_definition-843-853", type_label=function_definition];
2504 [label="849_ return Monetary.Price({\n            value: g_priceInfo.price\n        });\n2504-return-850-852", type_label=return];
2515 [label="853_ getBoundedTargetPrice\n2515-function_definition-854-867", type_label=function_definition];
2526 [label="858_ Monetary.Price memory targetPrice = getTargetPrice();\n2526-new_variable-859-859", type_label=new_variable];
2535 [label="859_ PriceInfo memory oldInfo = g_priceInfo;\n2535-new_variable-860-860", type_label=new_variable];
2542 [label="860_ uint256 timeDelta = uint256(Time.currentTime()).sub(oldInfo.lastUpdate);\n2542-new_variable-861-861", type_label=new_variable];
2560 [label="861_ (uint256 minPrice, uint256 maxPrice) = getPriceBounds(oldInfo.price, timeDelta);\n2560-new_variable-862-862", type_label=new_variable];
2578 [label="862_ uint256 boundedTargetPrice = boundValue(targetPrice.value, minPrice, maxPrice);\n2578-new_variable-863-863", type_label=new_variable];
2593 [label="863_ return Monetary.Price({\n            value: boundedTargetPrice\n        });\n2593-return-864-866", type_label=return];
2602 [label="867_ getTargetPrice\n2602-function_definition-868-882", type_label=function_definition];
2613 [label="872_ Monetary.Price memory ethUsd = getMedianizerPrice();\n2613-new_variable-873-873", type_label=new_variable];
2622 [label="873_ uint256 targetPrice = getMidValue(\n            EXPECTED_PRICE,\n            getOasisPrice(ethUsd).value,\n            getUniswapPrice(ethUsd).value\n        );\n2622-new_variable-874-878", type_label=new_variable];
2645 [label="878_ return Monetary.Price({\n            value: targetPrice\n        });\n2645-return-879-881", type_label=return];
2654 [label="882_ getMedianizerPrice\n2654-function_definition-883-891", type_label=function_definition];
2665 [label="887_ return Monetary.Price({\n            value: uint256(MEDIANIZER.read())\n        });\n2665-return-888-890", type_label=return];
2679 [label="891_ getOasisPrice\n2679-function_definition-892-920", type_label=function_definition];
2696 [label="898_ IOasisDex oasis = OASIS;\n2696-new_variable-899-899", type_label=new_variable];
2703 [label="899_ if\n2703-if-900-908", type_label=if];
5811 [label="899_ end_if", type_label=end_if];
2721 [label="904_ return Monetary.Price({\n                value: g_priceInfo.price\n            });\n2721-return-905-907", type_label=return];
2732 [label="908_ uint256 numWei = OASIS_ETH_AMOUNT;\n2732-new_variable-909-909", type_label=new_variable];
2738 [label="909_ address dai = address(DAI);\n2738-new_variable-910-910", type_label=new_variable];
2746 [label="910_ address weth = address(WETH);\n2746-new_variable-911-911", type_label=new_variable];
2754 [label="911_ uint256 daiAmt1 = oasis.getBuyAmount(dai, weth, numWei);\n2754-new_variable-912-912", type_label=new_variable];
2769 [label="912_ uint256 daiAmt2 = oasis.getPayAmount(dai, weth, numWei);\n2769-new_variable-913-913", type_label=new_variable];
2784 [label="913_ uint256 num = numWei.mul(daiAmt2).add(numWei.mul(daiAmt1));\n2784-new_variable-914-914", type_label=new_variable];
2805 [label="914_ uint256 den = daiAmt1.mul(daiAmt2).mul(2);\n2805-new_variable-915-915", type_label=new_variable];
2821 [label="915_ uint256 oasisPrice = Math.getPartial(ethUsd.value, num, den);\n2821-new_variable-916-916", type_label=new_variable];
2838 [label="916_ return Monetary.Price({\n            value: oasisPrice\n        });\n2838-return-917-919", type_label=return];
2847 [label="920_ getUniswapPrice\n2847-function_definition-921-935", type_label=function_definition];
2864 [label="927_ address uniswap = address(UNISWAP);\n2864-new_variable-928-928", type_label=new_variable];
2872 [label="928_ uint256 ethAmt = uniswap.balance;\n2872-new_variable-929-929", type_label=new_variable];
2880 [label="929_ uint256 daiAmt = DAI.balanceOf(uniswap);\n2880-new_variable-930-930", type_label=new_variable];
2891 [label="930_ uint256 uniswapPrice = Math.getPartial(ethUsd.value, ethAmt, daiAmt);\n2891-new_variable-931-931", type_label=new_variable];
2908 [label="931_ return Monetary.Price({\n            value: uniswapPrice\n        });\n2908-return-932-934", type_label=return];
2917 [label="935_ getPriceBounds\n2917-function_definition-936-954", type_label=function_definition];
2937 [label="943_ DeviationParams memory deviation = DEVIATION_PARAMS;\n2937-new_variable-944-944", type_label=new_variable];
2944 [label="944_ uint256 maxDeviation = Math.getPartial(\n            oldPrice,\n            Math.min(deviation.maximumAbsolute, timeDelta.mul(deviation.maximumPerSecond)),\n            deviation.denominator\n        );\n2944-new_variable-945-949", type_label=new_variable];
2977 [label="949_ return (\n            oldPrice.sub(maxDeviation),\n            oldPrice.add(maxDeviation)\n        );\n2977-return-950-953", type_label=return];
2991 [label="954_ getMidValue\n2991-function_definition-955-972", type_label=function_definition];
3012 [label="963_ uint256 maximum = Math.max(valueA, Math.max(valueB, valueC));\n3012-new_variable-964-964", type_label=new_variable];
3032 [label="964_ if_maximum == valueA\n3032-if-965-967", type_label=if];
6140 [label="964_ end_if", type_label=end_if];
3037 [label="965_ return Math.max(valueB, valueC);\n3037-return-966-966", type_label=return];
3046 [label="967_ if_maximum == valueB\n3046-if-968-970", type_label=if];
6154 [label="967_ end_if", type_label=end_if];
3051 [label="968_ return Math.max(valueA, valueC);\n3051-return-969-969", type_label=return];
3060 [label="970_ return Math.max(valueA, valueB);\n3060-return-971-971", type_label=return];
3069 [label="972_ boundValue\n3069-function_definition-973-984", type_label=function_definition];
3090 [label="981_ assert(minimum <= maximum);\n3090-expression_statement-982-982", type_label=expression_statement];
3097 [label="982_ return Math.max(minimum, Math.min(maximum, value));\n3097-return-983-983", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
"(4035, (307, 12), (313, 13))";
16 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 38  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
33 -> 3141  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3141 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 3141  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
38 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
40 -> 48  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
48 -> 57  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
57 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
59 -> 76  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
76 -> 83  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
83 -> 91  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
91 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
93 -> 110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
110 -> 117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
117 -> 125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
125 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
127 -> 144  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
152 -> 159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
161 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
223 -> 232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
232 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
237 -> 243  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
254 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
260 -> 274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
295 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 498  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
498 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
533 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 3658  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
574 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 3703  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
628 -> 653  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 3761  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
693 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
714 -> 3822  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
747 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 3880  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
812 -> 841  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 3949  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
888 -> 901  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 912  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 924  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
912 -> 4020  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
912 -> 912  [color=red, controlflow_type=loop_control, edge_type=CFG_edge, key=0, label=loop_control];
4020 -> 953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
924 -> 927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
927 -> 934  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
927 -> 4035  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4035 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
951 -> 4035  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
951 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
953 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
960 -> 973  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
973 -> 978  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
973 -> 4081  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4081 -> 981  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
978 -> 4081  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
978 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
981 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 992  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 997  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
992 -> 4100  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4100 -> 1004  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
997 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 992  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1004 -> 1015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1015 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1031  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1019 -> 4127  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1019 -> 1019  [color=red, controlflow_type=loop_control, edge_type=CFG_edge, key=0, label=loop_control];
4127 -> 1053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1031 -> 1034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1034 -> 1049  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1019  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1053 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1055 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1068 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 1097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1097 -> 1107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1107 -> 1121  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1107 -> 4215  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4215 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1118 -> 1107  [color=red, controlflow_type=loop_control, edge_type=CFG_edge, key=0, label=loop_control];
1121 -> 1129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1129 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1142 -> 1148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1148 -> 1161  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1161 -> 1118  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1167 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1169 -> 1182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1182 -> 1187  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1182 -> 4290  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4290 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1187 -> 4290  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1187 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1195 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1217 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1238 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1250 -> 1271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1271 -> 1280  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1271 -> 4379  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4379 -> 1289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1280 -> 4379  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1280 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1289 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1311 -> 1324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1324 -> 1332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1332 -> 1346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1346 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1348 -> 1361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1361 -> 1369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1369 -> 1383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1383 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1385 -> 1398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1398 -> 1406  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1406 -> 1420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1420 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1422 -> 1439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1439 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1446 -> 1463  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1463 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1473 -> 1482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1482 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1542 -> 1568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2146 -> 2152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2152 -> 2157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2157 -> 2167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2167 -> 2177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2198 -> 2204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2204 -> 2209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2209 -> 2215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2215 -> 2220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2220 -> 2226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2226 -> 2232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2232 -> 2238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2238 -> 2244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2284 -> 2288  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2288 -> 2295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2295 -> 2302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2302 -> 2309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2309 -> 2316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2316 -> 2320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2320 -> 2324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2324 -> 2328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2346 -> 2356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2360 -> 2381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2381 -> 2401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2401 -> 2410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2410 -> 2436  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2436 -> 2462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2488 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2490 -> 2504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2504 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2515 -> 2526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2526 -> 2535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2535 -> 2542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2542 -> 2560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2560 -> 2578  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2578 -> 2593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2593 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2602 -> 2613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2613 -> 2622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2622 -> 2645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2645 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2654 -> 2665  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2665 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2679 -> 2696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2696 -> 2703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2703 -> 2721  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2703 -> 5811  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
5811 -> 2732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2721 -> 5811  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2721 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2732 -> 2738  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2738 -> 2746  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2746 -> 2754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2754 -> 2769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2769 -> 2784  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2784 -> 2805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2805 -> 2821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2821 -> 2838  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2838 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2847 -> 2864  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2864 -> 2872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2872 -> 2880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2880 -> 2891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2891 -> 2908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2908 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2917 -> 2937  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2937 -> 2944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2944 -> 2977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2977 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
2991 -> 3012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3012 -> 3032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3032 -> 3037  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3032 -> 6140  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6140 -> 3046  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3037 -> 6140  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3037 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3046 -> 3051  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
3046 -> 6154  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
6154 -> 3060  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3051 -> 6154  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
3051 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3060 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
3069 -> 3090  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3090 -> 3097  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
3097 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
"(4035, (307, 12), (313, 13))" -> 912  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
}
