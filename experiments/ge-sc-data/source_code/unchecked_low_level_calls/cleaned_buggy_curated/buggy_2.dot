digraph  {
13 [label="2_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n13-function_definition-3-4", method="bug_unchk_send27()", type_label=function_definition];
18 [label="3_ msg.sender.transfer(1 ether);\n18-expression_statement-4-4", method="bug_unchk_send27()", type_label=expression_statement];
42 [label="5_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n42-function_definition-6-7", method="bug_unchk_send31()", type_label=function_definition];
47 [label="6_ msg.sender.transfer(1 ether);\n47-expression_statement-7-7", method="bug_unchk_send31()", type_label=expression_statement];
71 [label="8_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n71-function_definition-9-10", method="bug_unchk_send13()", type_label=function_definition];
76 [label="9_ msg.sender.transfer(1 ether);\n76-expression_statement-10-10", method="bug_unchk_send13()", type_label=expression_statement];
100 [label="11_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n100-function_definition-12-13", method="bug_unchk_send11()", type_label=function_definition];
105 [label="12_ msg.sender.transfer(1 ether);\n105-expression_statement-13-13", method="bug_unchk_send11()", type_label=expression_statement];
115 [label="13_ uint256 public totalSupply;\n115-new_variable-14-14", method="", type_label=new_variable];
120 [label="14_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n120-function_definition-15-16", method="bug_unchk_send1()", type_label=function_definition];
125 [label="15_ msg.sender.transfer(1 ether);\n125-expression_statement-16-16", method="bug_unchk_send1()", type_label=expression_statement];
135 [label="16_ string public name;\n135-new_variable-17-17", method="", type_label=new_variable];
140 [label="17_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n140-function_definition-18-19", method="bug_unchk_send2()", type_label=function_definition];
145 [label="18_ msg.sender.transfer(1 ether);\n145-expression_statement-19-19", method="bug_unchk_send2()", type_label=expression_statement];
155 [label="19_ uint8 public decimals;\n155-new_variable-20-20", method="", type_label=new_variable];
160 [label="20_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n160-function_definition-21-22", method="bug_unchk_send17()", type_label=function_definition];
165 [label="21_ msg.sender.transfer(1 ether);\n165-expression_statement-22-22", method="bug_unchk_send17()", type_label=expression_statement];
175 [label="22_ string public symbol;\n175-new_variable-23-23", method="", type_label=new_variable];
180 [label="23_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n180-function_definition-24-25", method="bug_unchk_send3()", type_label=function_definition];
185 [label="24_ msg.sender.transfer(1 ether);\n185-expression_statement-25-25", method="bug_unchk_send3()", type_label=expression_statement];
195 [label="25_ address public owner;\n195-new_variable-26-26", method="", type_label=new_variable];
200 [label="26_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n200-function_definition-27-28", method="bug_unchk_send9()", type_label=function_definition];
205 [label="27_ msg.sender.transfer(1 ether);\n205-expression_statement-28-28", method="bug_unchk_send9()", type_label=expression_statement];
215 [label="28_ mapping (address => uint256) public balances;\n215-new_variable-29-29", method="", type_label=new_variable];
222 [label="29_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n222-function_definition-30-31", method="bug_unchk_send25()", type_label=function_definition];
227 [label="30_ msg.sender.transfer(1 ether);\n227-expression_statement-31-31", method="bug_unchk_send25()", type_label=expression_statement];
237 [label="31_ mapping (address => mapping (address => uint256)) public allowed;\n237-new_variable-32-32", method="", type_label=new_variable];
246 [label="32_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n246-function_definition-33-34", method="bug_unchk_send19()", type_label=function_definition];
251 [label="33_ msg.sender.transfer(1 ether);\n251-expression_statement-34-34", method="bug_unchk_send19()", type_label=expression_statement];
261 [label="34_ bool isTransPaused=false;\n261-new_variable-35-35", method="", type_label=new_variable];
277 [label="39_ owner=msg.sender;\n277-expression_statement-40-40", method="", type_label=expression_statement];
283 [label="40_ if__initialAmount<=0\n283-if-41-47", method="", type_label=if];
1134 [label="40_ end_if", method="", type_label=end_if];
288 [label="41_ totalSupply = 100000000000000000;\n288-expression_statement-42-42", method="", type_label=expression_statement];
292 [label="42_ balances[owner]=totalSupply;\n292-expression_statement-43-43", method="", type_label=expression_statement];
299 [label="44_ totalSupply = _initialAmount;\n299-expression_statement-45-45", method="", type_label=expression_statement];
303 [label="45_ balances[owner]=_initialAmount;\n303-expression_statement-46-46", method="", type_label=expression_statement];
309 [label="47_ if__decimalUnits<=0\n309-if-48-52", method="", type_label=if];
1160 [label="47_ end_if", method="", type_label=end_if];
314 [label="48_ decimals=2;\n314-expression_statement-49-49", method="", type_label=expression_statement];
319 [label="50_ decimals = _decimalUnits;\n319-expression_statement-51-51", method="", type_label=expression_statement];
323 [label="52_ name = \"CareerOn Chain Token\";\n323-expression_statement-53-53", method="", type_label=expression_statement];
328 [label="53_ symbol = \"COT\";\n328-expression_statement-54-54", method="", type_label=expression_statement];
333 [label="55_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n333-function_definition-56-57", method="bug_unchk_send26()", type_label=function_definition];
338 [label="56_ msg.sender.transfer(1 ether);\n338-expression_statement-57-57", method="bug_unchk_send26()", type_label=expression_statement];
348 [label="57_ function transfer(\n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n        balances[msg.sender] -= _value; \n        balances[_to] += _value; \n		if(msg.sender==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(msg.sender, _to, _value); \n		}\n        return true;\n    }\n348-function_definition-58-75", method="transfer(address _to,uint256 _value)", type_label=function_definition];
365 [label="61_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to]\n        );\n365-expression_statement-62-66", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
395 [label="66_ balances[msg.sender] -= _value;\n395-expression_statement-67-67", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
403 [label="67_ balances[_to] += _value;\n403-expression_statement-68-68", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
409 [label="68_ if_msg.sender==owner\n409-if-69-73", method="transfer(address _to,uint256 _value)", type_label=if];
1260 [label="68_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
437 [label="73_ return true;\n437-return-74-74", method="transfer(address _to,uint256 _value)", type_label=return];
440 [label="75_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n440-function_definition-76-77", method="bug_unchk_send20()", type_label=function_definition];
445 [label="76_ msg.sender.transfer(1 ether);\n445-expression_statement-77-77", method="bug_unchk_send20()", type_label=expression_statement];
455 [label="77_ function transferFrom(\n        address _from, \n        address _to, \n        uint256 _value) public returns (bool success) \n    {\n        assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n        balances[_to] += _value; \n        balances[_from] -= _value;  \n        allowed[_from][msg.sender] -= _value; \n        if(_from==owner){\n			emit Transfer(address(this), _to, _value); \n		}else{\n			emit Transfer(_from, _to, _value); \n		}\n        return true;\n    }\n455-function_definition-78-98", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
476 [label="82_ assert(_to!=address(this) && \n                !isTransPaused &&\n                balances[msg.sender] >= _value &&\n                balances[_to] + _value > balances[_to] &&\n                allowed[_from][msg.sender] >= _value\n        );\n476-expression_statement-83-88", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
516 [label="88_ balances[_to] += _value;\n516-expression_statement-89-89", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
522 [label="89_ balances[_from] -= _value;\n522-expression_statement-90-90", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
528 [label="90_ allowed[_from][msg.sender] -= _value;\n528-expression_statement-91-91", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
538 [label="91_ if__from==owner\n538-if-92-96", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
1389 [label="91_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
562 [label="96_ return true;\n562-return-97-97", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
565 [label="98_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n565-function_definition-99-100", method="bug_unchk_send32()", type_label=function_definition];
570 [label="99_ msg.sender.transfer(1 ether);\n570-expression_statement-100-100", method="bug_unchk_send32()", type_label=expression_statement];
580 [label="100_ function approve(address _spender, uint256 _value) public returns (bool success) \n    { \n        assert(msg.sender!=_spender && _value>0);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n580-function_definition-101-107", method="approve(address _spender,uint256 _value)", type_label=function_definition];
597 [label="102_ assert(msg.sender!=_spender && _value>0);\n597-expression_statement-103-103", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
610 [label="103_ allowed[msg.sender][_spender] = _value;\n610-expression_statement-104-104", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
630 [label="105_ return true;\n630-return-106-106", method="approve(address _spender,uint256 _value)", type_label=return];
633 [label="107_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n633-function_definition-108-109", method="bug_unchk_send4()", type_label=function_definition];
638 [label="108_ msg.sender.transfer(1 ether);\n638-expression_statement-109-109", method="bug_unchk_send4()", type_label=expression_statement];
648 [label="109_ function allowance(\n        address _owner, \n        address _spender) public view returns (uint256 remaining) \n    {\n        return allowed[_owner][_spender]; \n    }\n648-function_definition-110-115", method="allowance(address _owner,address _spender)", type_label=function_definition];
666 [label="113_ return allowed[_owner][_spender];\n666-return-114-114", method="allowance(address _owner,address _spender)", type_label=return];
672 [label="115_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n672-function_definition-116-117", method="bug_unchk_send7()", type_label=function_definition];
677 [label="116_ msg.sender.transfer(1 ether);\n677-expression_statement-117-117", method="bug_unchk_send7()", type_label=expression_statement];
687 [label="117_ function changeOwner(address newOwner) public{\n        assert(msg.sender==owner && msg.sender!=newOwner);\n        balances[newOwner]=balances[owner];\n        balances[owner]=0;\n        owner=newOwner;\n        emit OwnerChang(msg.sender,newOwner,balances[owner]); \n    }\n687-function_definition-118-124", method="changeOwner(address newOwner)", type_label=function_definition];
695 [label="118_ assert(msg.sender==owner && msg.sender!=newOwner);\n695-expression_statement-119-119", method="changeOwner(address newOwner)", type_label=expression_statement];
710 [label="119_ balances[newOwner]=balances[owner];\n710-expression_statement-120-120", method="changeOwner(address newOwner)", type_label=expression_statement];
718 [label="120_ balances[owner]=0;\n718-expression_statement-121-121", method="changeOwner(address newOwner)", type_label=expression_statement];
724 [label="121_ owner=newOwner;\n724-expression_statement-122-122", method="changeOwner(address newOwner)", type_label=expression_statement];
740 [label="124_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n740-function_definition-125-126", method="bug_unchk_send23()", type_label=function_definition];
745 [label="125_ msg.sender.transfer(1 ether);\n745-expression_statement-126-126", method="bug_unchk_send23()", type_label=expression_statement];
755 [label="126_ function setPauseStatus(bool isPaused)public{\n        assert(msg.sender==owner);\n        isTransPaused=isPaused;\n    }\n755-function_definition-127-130", method="setPauseStatus(bool isPaused)", type_label=function_definition];
763 [label="127_ assert(msg.sender==owner);\n763-expression_statement-128-128", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
772 [label="128_ isTransPaused=isPaused;\n772-expression_statement-129-129", method="setPauseStatus(bool isPaused)", type_label=expression_statement];
776 [label="130_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n776-function_definition-131-132", method="bug_unchk_send14()", type_label=function_definition];
781 [label="131_ msg.sender.transfer(1 ether);\n781-expression_statement-132-132", method="bug_unchk_send14()", type_label=expression_statement];
791 [label="132_ function changeContractName(string memory _newName,string memory _newSymbol) public {\n        assert(msg.sender==owner);\n        name=_newName;\n        symbol=_newSymbol;\n    }\n791-function_definition-133-137", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=function_definition];
803 [label="133_ assert(msg.sender==owner);\n803-expression_statement-134-134", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
812 [label="134_ name=_newName;\n812-expression_statement-135-135", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
816 [label="135_ symbol=_newSymbol;\n816-expression_statement-136-136", method="changeContractName(string memory _newName,string memory _newSymbol)", type_label=expression_statement];
820 [label="137_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n820-function_definition-138-139", method="bug_unchk_send30()", type_label=function_definition];
825 [label="138_ msg.sender.transfer(1 ether);\n825-expression_statement-139-139", method="bug_unchk_send30()", type_label=expression_statement];
841 [label="142_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n841-function_definition-143-144", method="bug_unchk_send8()", type_label=function_definition];
846 [label="143_ msg.sender.transfer(1 ether);\n846-expression_statement-144-144", method="bug_unchk_send8()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
427;
554;
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
42 -> 47  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
71 -> 76  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
160 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
180 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
200 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
222 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 288  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
283 -> 299  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1134 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
288 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 1134  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
299 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
303 -> 1134  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
309 -> 314  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
309 -> 319  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1160 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
314 -> 1160  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
319 -> 1160  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
323 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 395  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
395 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
437 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
440 -> 445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
455 -> 476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 516  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 522  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 528  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
565 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
633 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
648 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
672 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
687 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 710  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
710 -> 718  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
740 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
755 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 781  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
791 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
820 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 1260  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
554 -> 1389  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
