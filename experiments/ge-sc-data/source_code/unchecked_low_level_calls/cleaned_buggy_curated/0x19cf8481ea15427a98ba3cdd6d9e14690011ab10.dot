digraph  {
13 [label="1_ function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n13-function_definition-2-2", method="receiveApproval(address _from,uint256 _value,address _token,bytes _extraData)", type_label=function_definition];
35 [label="3_ function migrateFrom(address _from, uint256 _value);\n35-function_definition-4-4", method="migrateFrom(address _from,uint256 _value)", type_label=function_definition];
48 [label="6_ uint public totalSupply;\n48-new_variable-7-7", method="", type_label=new_variable];
53 [label="7_ function balanceOf(address who) constant returns (uint);\n53-function_definition-8-8", method="balanceOf(address who)", type_label=function_definition];
59 [label="7_ constant\n59-expression_statement-8-8", method="balanceOf(address who)", type_label=expression_statement];
65 [label="8_ function allowance(address owner, address spender) constant returns (uint);\n65-function_definition-9-9", method="allowance(address owner,address spender)", type_label=function_definition];
75 [label="8_ constant\n75-expression_statement-9-9", method="allowance(address owner,address spender)", type_label=expression_statement];
81 [label="9_ function transfer(address to, uint value) returns (bool ok);\n81-function_definition-10-10", method="transfer(address to,uint value)", type_label=function_definition];
96 [label="10_ function transferFrom(address from, address to, uint value) returns (bool ok);\n96-function_definition-11-11", method="transferFrom(address from,address to,uint value)", type_label=function_definition];
115 [label="11_ function approve(address spender, uint value) returns (bool ok);\n115-function_definition-12-12", method="approve(address spender,uint value)", type_label=function_definition];
161 [label="16_ function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n161-function_definition-17-21", method="safeMul(uint a,uint b)", type_label=function_definition];
177 [label="17_ uint c = a * b;\n177-new_variable-18-18", method="safeMul(uint a,uint b)", type_label=new_variable];
185 [label="18_ assert(a == 0 || c / a == b);\n185-expression_statement-19-19", method="safeMul(uint a,uint b)", type_label=expression_statement];
198 [label="19_ return c;\n198-return-20-20", method="safeMul(uint a,uint b)", type_label=return];
200 [label="21_ function safeDiv(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n200-function_definition-22-27", method="safeDiv(uint a,uint b)", type_label=function_definition];
216 [label="22_ assert(b > 0);\n216-expression_statement-23-23", method="safeDiv(uint a,uint b)", type_label=expression_statement];
223 [label="23_ uint c = a / b;\n223-new_variable-24-24", method="safeDiv(uint a,uint b)", type_label=new_variable];
231 [label="24_ assert(a == b * c + a % b);\n231-expression_statement-25-25", method="safeDiv(uint a,uint b)", type_label=expression_statement];
244 [label="25_ return c;\n244-return-26-26", method="safeDiv(uint a,uint b)", type_label=return];
246 [label="27_ function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n246-function_definition-28-31", method="safeSub(uint a,uint b)", type_label=function_definition];
262 [label="28_ assert(b <= a);\n262-expression_statement-29-29", method="safeSub(uint a,uint b)", type_label=expression_statement];
269 [label="29_ return a - b;\n269-return-30-30", method="safeSub(uint a,uint b)", type_label=return];
273 [label="31_ function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n273-function_definition-32-36", method="safeAdd(uint a,uint b)", type_label=function_definition];
289 [label="32_ uint c = a + b;\n289-new_variable-33-33", method="safeAdd(uint a,uint b)", type_label=new_variable];
297 [label="33_ assert(c>=a && c>=b);\n297-expression_statement-34-34", method="safeAdd(uint a,uint b)", type_label=expression_statement];
308 [label="34_ return c;\n308-return-35-35", method="safeAdd(uint a,uint b)", type_label=return];
310 [label="36_ function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n310-function_definition-37-39", method="max64(uint64 a,uint64 b)", type_label=function_definition];
321 [label="36_ constant\n321-expression_statement-37-37", method="max64(uint64 a,uint64 b)", type_label=expression_statement];
328 [label="37_ return a >= b ? a : b;\n328-return-38-38", method="max64(uint64 a,uint64 b)", type_label=return];
335 [label="39_ function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n335-function_definition-40-42", method="min64(uint64 a,uint64 b)", type_label=function_definition];
346 [label="39_ constant\n346-expression_statement-40-40", method="min64(uint64 a,uint64 b)", type_label=expression_statement];
353 [label="40_ return a < b ? a : b;\n353-return-41-41", method="min64(uint64 a,uint64 b)", type_label=return];
360 [label="42_ function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n360-function_definition-43-45", method="max256(uint256 a,uint256 b)", type_label=function_definition];
371 [label="42_ constant\n371-expression_statement-43-43", method="max256(uint256 a,uint256 b)", type_label=expression_statement];
378 [label="43_ return a >= b ? a : b;\n378-return-44-44", method="max256(uint256 a,uint256 b)", type_label=return];
385 [label="45_ function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n385-function_definition-46-48", method="min256(uint256 a,uint256 b)", type_label=function_definition];
396 [label="45_ constant\n396-expression_statement-46-46", method="min256(uint256 a,uint256 b)", type_label=expression_statement];
403 [label="46_ return a < b ? a : b;\n403-return-47-47", method="min256(uint256 a,uint256 b)", type_label=return];
410 [label="48_ function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n410-function_definition-49-53", method="assert(bool assertion)", type_label=function_definition];
418 [label="49_ if\n418-if-50-52", method="assert(bool assertion)", type_label=if];
2553 [label="49_ end_if", method="assert(bool assertion)", type_label=end_if];
422 [label="50_ throw;\n422-expression_statement-51-51", method="assert(bool assertion)", type_label=expression_statement];
443 [label="56_ mapping(address => uint) balances;\n443-new_variable-57-57", method="", type_label=new_variable];
449 [label="57_ mapping(address => uint) balancesRAW;\n449-new_variable-58-58", method="", type_label=new_variable];
455 [label="58_ mapping (address => mapping (address => uint)) allowed;\n455-new_variable-59-59", method="", type_label=new_variable];
463 [label="59_ function isToken() public constant returns (bool weAre) {\n    return true;\n  }\n463-function_definition-60-62", method="isToken()", type_label=function_definition];
466 [label="59_ constant\n466-expression_statement-60-60", method="isToken()", type_label=expression_statement];
474 [label="60_ return true;\n474-return-61-61", method="isToken()", type_label=return];
477 [label="62_ function transfer(address _to, uint _value) returns (bool success) {\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n477-function_definition-63-68", method="transfer(address _to,uint _value)", type_label=function_definition];
493 [label="63_ balances[msg.sender] = safeSub(balances[msg.sender], _value);\n493-expression_statement-64-64", method="transfer(address _to,uint _value)", type_label=expression_statement];
510 [label="64_ balances[_to] = safeAdd(balances[_to], _value);\n510-expression_statement-65-65", method="transfer(address _to,uint _value)", type_label=expression_statement];
523 [label="65_ Transfer(msg.sender, _to, _value);\n523-expression_statement-66-66", method="transfer(address _to,uint _value)", type_label=expression_statement];
534 [label="66_ return true;\n534-return-67-67", method="transfer(address _to,uint _value)", type_label=return];
537 [label="68_ function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n    uint _allowance = allowed[_from][msg.sender];\n    balances[_to] = safeAdd(balances[_to], _value);\n    balances[_from] = safeSub(balances[_from], _value);\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n537-function_definition-69-76", method="transferFrom(address _from,address _to,uint _value)", type_label=function_definition];
557 [label="69_ uint _allowance = allowed[_from][msg.sender];\n557-new_variable-70-70", method="transferFrom(address _from,address _to,uint _value)", type_label=new_variable];
569 [label="70_ balances[_to] = safeAdd(balances[_to], _value);\n569-expression_statement-71-71", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
582 [label="71_ balances[_from] = safeSub(balances[_from], _value);\n582-expression_statement-72-72", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
595 [label="72_ allowed[_from][msg.sender] = safeSub(_allowance, _value);\n595-expression_statement-73-73", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
610 [label="73_ Transfer(_from, _to, _value);\n610-expression_statement-74-74", method="transferFrom(address _from,address _to,uint _value)", type_label=expression_statement];
619 [label="74_ return true;\n619-return-75-75", method="transferFrom(address _from,address _to,uint _value)", type_label=return];
622 [label="76_ function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n622-function_definition-77-79", method="balanceOf(address _owner)", type_label=function_definition];
628 [label="76_ constant\n628-expression_statement-77-77", method="balanceOf(address _owner)", type_label=expression_statement];
636 [label="77_ return balances[_owner];\n636-return-78-78", method="balanceOf(address _owner)", type_label=return];
640 [label="79_ function approve(address _spender, uint _value) returns (bool success) {\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n640-function_definition-80-85", method="approve(address _spender,uint _value)", type_label=function_definition];
656 [label="80_ if_(_value != 0) && (allowed[msg.sender][_spender] != 0)\n656-if-81-81", method="approve(address _spender,uint _value)", type_label=if];
2791 [label="80_ end_if", method="approve(address _spender,uint _value)", type_label=end_if];
672 [label="80_ throw;\n672-expression_statement-81-81", method="approve(address _spender,uint _value)", type_label=expression_statement];
674 [label="81_ allowed[msg.sender][_spender] = _value;\n674-expression_statement-82-82", method="approve(address _spender,uint _value)", type_label=expression_statement];
684 [label="82_ Approval(msg.sender, _spender, _value);\n684-expression_statement-83-83", method="approve(address _spender,uint _value)", type_label=expression_statement];
695 [label="83_ return true;\n695-return-84-84", method="approve(address _spender,uint _value)", type_label=return];
698 [label="85_ function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n698-function_definition-86-88", method="allowance(address _owner,address _spender)", type_label=function_definition];
708 [label="85_ constant\n708-expression_statement-86-86", method="allowance(address _owner,address _spender)", type_label=expression_statement];
716 [label="86_ return allowed[_owner][_spender];\n716-return-87-87", method="allowance(address _owner,address _spender)", type_label=return];
725 [label="90_ string public name = \"DAO POLSKA TOKEN version 1\";\n725-new_variable-91-91", method="", type_label=new_variable];
732 [label="91_ string public symbol = \"DPL\";\n732-new_variable-92-92", method="", type_label=new_variable];
739 [label="92_ uint8 public constant decimals = 18;\n739-new_variable-93-93", method="", type_label=new_variable];
745 [label="93_ address public owner;\n745-new_variable-94-94", method="", type_label=new_variable];
750 [label="94_ address public migrationMaster;\n750-new_variable-95-95", method="", type_label=new_variable];
755 [label="95_ uint256 public otherchainstotalsupply =1.0 ether;\n755-new_variable-96-96", method="", type_label=new_variable];
762 [label="96_ uint256 public supplylimit      = 10000.0 ether;\n762-new_variable-97-97", method="", type_label=new_variable];
769 [label="97_ uint256 public  totalSupply      = 0.0 ether;\n769-new_variable-98-98", method="", type_label=new_variable];
776 [label="98_ address public Chain1 = 0x0;\n776-new_variable-99-99", method="", type_label=new_variable];
782 [label="99_ address public Chain2 = 0x0;\n782-new_variable-100-100", method="", type_label=new_variable];
788 [label="100_ address public Chain3 = 0x0;\n788-new_variable-101-101", method="", type_label=new_variable];
794 [label="101_ address public Chain4 = 0x0;\n794-new_variable-102-102", method="", type_label=new_variable];
800 [label="102_ address public migrationAgent=0x8585D5A25b1FA2A0E6c3BcfC098195bac9789BE2;\n800-new_variable-103-103", method="", type_label=new_variable];
806 [label="103_ uint256 public totalMigrated;\n806-new_variable-104-104", method="", type_label=new_variable];
835 [label="106_ struct sendTokenAway{\n		StandardToken coinContract;\n		uint amount;\n		address recipient;\n	}\n835-expression_statement-107-111", method="sendTokenAway()", type_label=expression_statement];
850 [label="111_ mapping(uint => sendTokenAway) transfers;\n850-new_variable-112-112", method="", type_label=new_variable];
857 [label="112_ uint numTransfers=0;\n857-new_variable-113-113", method="", type_label=new_variable];
862 [label="113_ mapping (address => uint256) balances;\n862-new_variable-114-114", method="", type_label=new_variable];
868 [label="114_ mapping (address => uint256) balancesRAW;\n868-new_variable-115-115", method="", type_label=new_variable];
874 [label="115_ mapping (address => mapping (address => uint256)) allowed;\n874-new_variable-116-116", method="", type_label=new_variable];
940 [label="121_ bool public supplylimitset = false;\n940-new_variable-122-122", method="", type_label=new_variable];
947 [label="122_ bool public otherchainstotalset = false;\n947-new_variable-123-123", method="", type_label=new_variable];
954 [label="123_ function daoPOLSKAtokens() {\nowner=msg.sender;\nmigrationMaster=msg.sender;\n}\n954-function_definition-124-127", method="daoPOLSKAtokens()", type_label=function_definition];
957 [label="124_ owner=msg.sender;\n957-expression_statement-125-125", method="daoPOLSKAtokens()", type_label=expression_statement];
963 [label="125_ migrationMaster=msg.sender;\n963-expression_statement-126-126", method="daoPOLSKAtokens()", type_label=expression_statement];
969 [label="127_ function  setSupply(uint256 supplyLOCKER) public {\n    	   if (msg.sender != owner) {\n      throw;\n    }\n		    	   if (supplylimitset != false) {\n      throw;\n    }\n	supplylimitset = true;\n	supplylimit = supplyLOCKER ** uint256(decimals);\n  }\n969-function_definition-128-137", method="setSupply(uint256 supplyLOCKER)", type_label=function_definition];
977 [label="128_ if_msg.sender != owner\n977-if-129-131", method="setSupply(uint256 supplyLOCKER)", type_label=if];
3112 [label="128_ end_if", method="setSupply(uint256 supplyLOCKER)", type_label=end_if];
984 [label="129_ throw;\n984-expression_statement-130-130", method="setSupply(uint256 supplyLOCKER)", type_label=expression_statement];
986 [label="131_ if_supplylimitset != false\n986-if-132-134", method="setSupply(uint256 supplyLOCKER)", type_label=if];
3121 [label="131_ end_if", method="setSupply(uint256 supplyLOCKER)", type_label=end_if];
992 [label="132_ throw;\n992-expression_statement-133-133", method="setSupply(uint256 supplyLOCKER)", type_label=expression_statement];
994 [label="134_ supplylimitset = true;\n994-expression_statement-135-135", method="setSupply(uint256 supplyLOCKER)", type_label=expression_statement];
999 [label="135_ supplylimit = supplyLOCKER ** uint256(decimals);\n999-expression_statement-136-136", method="setSupply(uint256 supplyLOCKER)", type_label=expression_statement];
1007 [label="137_ function setotherchainstotalsupply(uint256 supplyLOCKER) public {\n    	   if (msg.sender != owner) {\n      throw;\n    }\n	    	   if (supplylimitset != false) {\n      throw;\n    }\n	otherchainstotalset = true;\n	otherchainstotalsupply = supplyLOCKER ** uint256(decimals);\n  }\n1007-function_definition-138-147", method="setotherchainstotalsupply(uint256 supplyLOCKER)", type_label=function_definition];
1015 [label="138_ if_msg.sender != owner\n1015-if-139-141", method="setotherchainstotalsupply(uint256 supplyLOCKER)", type_label=if];
3150 [label="138_ end_if", method="setotherchainstotalsupply(uint256 supplyLOCKER)", type_label=end_if];
1022 [label="139_ throw;\n1022-expression_statement-140-140", method="setotherchainstotalsupply(uint256 supplyLOCKER)", type_label=expression_statement];
1024 [label="141_ if_supplylimitset != false\n1024-if-142-144", method="setotherchainstotalsupply(uint256 supplyLOCKER)", type_label=if];
3159 [label="141_ end_if", method="setotherchainstotalsupply(uint256 supplyLOCKER)", type_label=end_if];
1030 [label="142_ throw;\n1030-expression_statement-143-143", method="setotherchainstotalsupply(uint256 supplyLOCKER)", type_label=expression_statement];
1032 [label="144_ otherchainstotalset = true;\n1032-expression_statement-145-145", method="setotherchainstotalsupply(uint256 supplyLOCKER)", type_label=expression_statement];
1037 [label="145_ otherchainstotalsupply = supplyLOCKER ** uint256(decimals);\n1037-expression_statement-146-146", method="setotherchainstotalsupply(uint256 supplyLOCKER)", type_label=expression_statement];
1045 [label="147_ function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n1045-function_definition-148-156", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=function_definition];
1066 [label="150_ tokenRecipient spender = tokenRecipient(_spender);\n1066-new_variable-151-151", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=new_variable];
1076 [label="151_ if\n1076-if-152-155", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=if];
3211 [label="151_ end_if", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=end_if];
1084 [label="152_ spender.receiveApproval(msg.sender, _value, this, _extraData);\n1084-expression_statement-153-153", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=expression_statement];
1099 [label="153_ return true;\n1099-return-154-154", method="approveAndCall(address _spender,uint256 _value,bytes _extraData)", type_label=return];
1102 [label="156_ function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);    \n        balances[msg.sender] -= _value;             \n        totalSupply -= _value;                       \n        Burn(msg.sender, _value);\n        return true;\n    }\n1102-function_definition-157-163", method="burn(uint256 _value)", type_label=function_definition];
1115 [label="157_ require(balances[msg.sender] >= _value);\n1115-expression_statement-158-158", method="burn(uint256 _value)", type_label=expression_statement];
1126 [label="158_ balances[msg.sender] -= _value;\n1126-expression_statement-159-159", method="burn(uint256 _value)", type_label=expression_statement];
1134 [label="159_ totalSupply -= _value;\n1134-expression_statement-160-160", method="burn(uint256 _value)", type_label=expression_statement];
1138 [label="160_ Burn(msg.sender, _value);\n1138-expression_statement-161-161", method="burn(uint256 _value)", type_label=expression_statement];
1147 [label="161_ return true;\n1147-return-162-162", method="burn(uint256 _value)", type_label=return];
1150 [label="163_ function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);                 \n        require(_value <= allowed[_from][msg.sender]);     \n        balances[_from] -= _value;                          \n        allowed[_from][msg.sender] -= _value;              \n        totalSupply -= _value;                               \n        Burn(_from, _value);\n        return true;\n    }\n1150-function_definition-164-172", method="burnFrom(address _from,uint256 _value)", type_label=function_definition];
1167 [label="164_ require(balances[_from] >= _value);\n1167-expression_statement-165-165", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1176 [label="165_ require(_value <= allowed[_from][msg.sender]);\n1176-expression_statement-166-166", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1189 [label="166_ balances[_from] -= _value;\n1189-expression_statement-167-167", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1195 [label="167_ allowed[_from][msg.sender] -= _value;\n1195-expression_statement-168-168", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1205 [label="168_ totalSupply -= _value;\n1205-expression_statement-169-169", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1209 [label="169_ Burn(_from, _value);\n1209-expression_statement-170-170", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
1216 [label="170_ return true;\n1216-return-171-171", method="burnFrom(address _from,uint256 _value)", type_label=return];
1219 [label="172_ function transfer(address _to, uint256 _value) returns (bool success) {\n    if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n      balances[msg.sender] -= _value;\n      balances[_to] += _value;\n      Transfer(msg.sender, _to, _value);\n      return true;\n    } else { return false; }\n  }\n1219-function_definition-173-180", method="transfer(address _to,uint256 _value)", type_label=function_definition];
1235 [label="173_ if\n1235-if-174-179", method="transfer(address _to,uint256 _value)", type_label=if];
3370 [label="173_ end_if", method="transfer(address _to,uint256 _value)", type_label=end_if];
1254 [label="174_ balances[msg.sender] -= _value;\n1254-expression_statement-175-175", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
1262 [label="175_ balances[_to] += _value;\n1262-expression_statement-176-176", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
1268 [label="176_ Transfer(msg.sender, _to, _value);\n1268-expression_statement-177-177", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
1279 [label="177_ return true;\n1279-return-178-178", method="transfer(address _to,uint256 _value)", type_label=return];
1283 [label="178_ return false;\n1283-return-179-179", method="transfer(address _to,uint256 _value)", type_label=return];
1286 [label="180_ function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n      balances[_to] += _value;\n      balances[_from] -= _value;\n      allowed[_from][msg.sender] -= _value;\n      Transfer(_from, _to, _value);\n      return true;\n    } else { return false; }\n  }\n1286-function_definition-181-189", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
1306 [label="181_ if\n1306-if-182-188", method="transferFrom(address _from,address _to,uint256 _value)", type_label=if];
3441 [label="181_ end_if", method="transferFrom(address _from,address _to,uint256 _value)", type_label=end_if];
1333 [label="182_ balances[_to] += _value;\n1333-expression_statement-183-183", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1339 [label="183_ balances[_from] -= _value;\n1339-expression_statement-184-184", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1345 [label="184_ allowed[_from][msg.sender] -= _value;\n1345-expression_statement-185-185", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1355 [label="185_ Transfer(_from, _to, _value);\n1355-expression_statement-186-186", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
1364 [label="186_ return true;\n1364-return-187-187", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
1368 [label="187_ return false;\n1368-return-188-188", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
1371 [label="189_ function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n1371-function_definition-190-192", method="balanceOf(address _owner)", type_label=function_definition];
1377 [label="189_ constant\n1377-expression_statement-190-190", method="balanceOf(address _owner)", type_label=expression_statement];
1385 [label="190_ return balances[_owner];\n1385-return-191-191", method="balanceOf(address _owner)", type_label=return];
1389 [label="192_ function approve(address _spender, uint256 _value) returns (bool success) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n1389-function_definition-193-197", method="approve(address _spender,uint256 _value)", type_label=function_definition];
1405 [label="193_ allowed[msg.sender][_spender] = _value;\n1405-expression_statement-194-194", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
1415 [label="194_ Approval(msg.sender, _spender, _value);\n1415-expression_statement-195-195", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
1426 [label="195_ return true;\n1426-return-196-196", method="approve(address _spender,uint256 _value)", type_label=return];
1429 [label="197_ function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n1429-function_definition-198-200", method="allowance(address _owner,address _spender)", type_label=function_definition];
1439 [label="197_ constant\n1439-expression_statement-198-198", method="allowance(address _owner,address _spender)", type_label=expression_statement];
1447 [label="198_ return allowed[_owner][_spender];\n1447-return-199-199", method="allowance(address _owner,address _spender)", type_label=return];
1457 [label="201_ if\n1457-if-202-205", method="", type_label=if];
3592 [label="201_ end_if", method="", type_label=end_if];
1460 [label="202_ receivedEther(msg.sender, msg.value);\n1460-expression_statement-203-203", method="", type_label=expression_statement];
1471 [label="203_ balances[msg.sender]=balances[msg.sender]+msg.value;\n1471-expression_statement-204-204", method="", type_label=expression_statement];
1487 [label="204_ throw;\n1487-expression_statement-205-205", method="", type_label=expression_statement];
1489 [label="206_ function setTokenInformation(string _name, string _symbol) {\n	   if (msg.sender != owner) {\n      throw;\n    }\n	name = _name;\n    symbol = _symbol;\n    UpdatedTokenInformation(name, symbol);\n  }\n1489-function_definition-207-214", method="setTokenInformation(string _name,string _symbol)", type_label=function_definition];
1500 [label="207_ if_msg.sender != owner\n1500-if-208-210", method="setTokenInformation(string _name,string _symbol)", type_label=if];
3635 [label="207_ end_if", method="setTokenInformation(string _name,string _symbol)", type_label=end_if];
1507 [label="208_ throw;\n1507-expression_statement-209-209", method="setTokenInformation(string _name,string _symbol)", type_label=expression_statement];
1509 [label="210_ name = _name;\n1509-expression_statement-211-211", method="setTokenInformation(string _name,string _symbol)", type_label=expression_statement];
1513 [label="211_ symbol = _symbol;\n1513-expression_statement-212-212", method="setTokenInformation(string _name,string _symbol)", type_label=expression_statement];
1517 [label="212_ UpdatedTokenInformation(name, symbol);\n1517-expression_statement-213-213", method="setTokenInformation(string _name,string _symbol)", type_label=expression_statement];
1524 [label="214_ function setChainsAddresses(address chainAd, int chainnumber) {\n	   if (msg.sender != owner) {\n      throw;\n    }\n	if(chainnumber==1){Chain1=chainAd;}\n	if(chainnumber==2){Chain2=chainAd;}\n	if(chainnumber==3){Chain3=chainAd;}\n	if(chainnumber==4){Chain4=chainAd;}		\n  }\n1524-function_definition-215-223", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=function_definition];
1535 [label="215_ if_msg.sender != owner\n1535-if-216-218", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=if];
3670 [label="215_ end_if", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=end_if];
1542 [label="216_ throw;\n1542-expression_statement-217-217", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=expression_statement];
1544 [label="218_ if_chainnumber==1\n1544-if-219-219", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=if];
3679 [label="218_ end_if", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=end_if];
1549 [label="218_ Chain1=chainAd;\n1549-expression_statement-219-219", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=expression_statement];
1553 [label="219_ if_chainnumber==2\n1553-if-220-220", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=if];
3688 [label="219_ end_if", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=end_if];
1558 [label="219_ Chain2=chainAd;\n1558-expression_statement-220-220", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=expression_statement];
1562 [label="220_ if_chainnumber==3\n1562-if-221-221", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=if];
3697 [label="220_ end_if", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=end_if];
1567 [label="220_ Chain3=chainAd;\n1567-expression_statement-221-221", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=expression_statement];
1571 [label="221_ if_chainnumber==4\n1571-if-222-222", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=if];
3706 [label="221_ end_if", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=end_if];
1576 [label="221_ Chain4=chainAd;\n1576-expression_statement-222-222", method="setChainsAddresses(address chainAd,int chainnumber)", type_label=expression_statement];
1580 [label="223_ function DAOPolskaTokenICOregulations() external returns(string wow) {\n	return 'Regulations of preICO and ICO are present at website  DAO Polska Token.network and by using this smartcontract and blockchains you commit that you accept and will follow those rules';\n}\n1580-function_definition-224-226", method="DAOPolskaTokenICOregulations()", type_label=function_definition];
1589 [label="224_ return 'Regulations of preICO and ICO are present at website  DAO Polska Token.network and by using this smartcontract and blockchains you commit that you accept and will follow those rules';\n1589-return-225-225", method="DAOPolskaTokenICOregulations()", type_label=return];
1592 [label="226_ function sendTokenAw(address StandardTokenAddress, address receiver, uint amount){\n		if (msg.sender != owner) {\n		throw;\n		}\n		sendTokenAway t = transfers[numTransfers];\n		t.coinContract = StandardToken(StandardTokenAddress);\n		t.amount = amount;\n		t.recipient = receiver;\n		t.coinContract.transfer(receiver, amount);\n		numTransfers++;\n	}\n1592-function_definition-227-237", method="sendTokenAw(address StandardTokenAddress,address receiver,uint amount)", type_label=function_definition];
1607 [label="227_ if_msg.sender != owner\n1607-if-228-230", method="sendTokenAw(address StandardTokenAddress,address receiver,uint amount)", type_label=if];
3742 [label="227_ end_if", method="sendTokenAw(address StandardTokenAddress,address receiver,uint amount)", type_label=end_if];
1614 [label="228_ throw;\n1614-expression_statement-229-229", method="sendTokenAw(address StandardTokenAddress,address receiver,uint amount)", type_label=expression_statement];
1616 [label="230_ sendTokenAway t = transfers[numTransfers];\n1616-new_variable-231-231", method="sendTokenAw(address StandardTokenAddress,address receiver,uint amount)", type_label=new_variable];
1625 [label="231_ t.coinContract = StandardToken(StandardTokenAddress);\n1625-expression_statement-232-232", method="sendTokenAw(address StandardTokenAddress,address receiver,uint amount)", type_label=expression_statement];
1634 [label="232_ t.amount = amount;\n1634-expression_statement-233-233", method="sendTokenAw(address StandardTokenAddress,address receiver,uint amount)", type_label=expression_statement];
1640 [label="233_ t.recipient = receiver;\n1640-expression_statement-234-234", method="sendTokenAw(address StandardTokenAddress,address receiver,uint amount)", type_label=expression_statement];
1646 [label="234_ t.coinContract.transfer(receiver, amount);\n1646-expression_statement-235-235", method="sendTokenAw(address StandardTokenAddress,address receiver,uint amount)", type_label=expression_statement];
1657 [label="235_ numTransfers++;\n1657-expression_statement-236-236", method="sendTokenAw(address StandardTokenAddress,address receiver,uint amount)", type_label=expression_statement];
1658 [label="235_ numTransfers++\n1658-expression_statement-236-236", method="sendTokenAw(address StandardTokenAddress,address receiver,uint amount)", type_label=expression_statement];
1660 [label="237_ uint public tokenCreationRate=1000;\n1660-new_variable-238-238", method="", type_label=new_variable];
1666 [label="238_ uint public bonusCreationRate=1000;\n1666-new_variable-239-239", method="", type_label=new_variable];
1672 [label="239_ uint public CreationRate=1761;\n1672-new_variable-240-240", method="", type_label=new_variable];
1678 [label="240_ uint256 public constant oneweek = 36000;\n1678-new_variable-241-241", method="", type_label=new_variable];
1684 [label="241_ uint256 public fundingEndBlock = 5433616;\n1684-new_variable-242-242", method="", type_label=new_variable];
1690 [label="242_ bool public funding = true;\n1690-new_variable-243-243", method="", type_label=new_variable];
1697 [label="243_ bool public refundstate = false;\n1697-new_variable-244-244", method="", type_label=new_variable];
1704 [label="244_ bool public migratestate= false;\n1704-new_variable-245-245", method="", type_label=new_variable];
1711 [label="245_ function createDaoPOLSKAtokens(address holder) payable {\n        if (!funding) throw;\n        if (msg.value == 0) throw;\n        if (msg.value > (supplylimit - totalSupply) / CreationRate)\n          throw;\n	 var numTokensRAW = msg.value;\n        var numTokens = msg.value * CreationRate;\n        totalSupply += numTokens;\n        balances[holder] += numTokens;\n        balancesRAW[holder] += numTokensRAW;\n        Transfer(0, holder, numTokens);\n        uint256 percentOfTotal = 12;\n        uint256 additionalTokens = 	numTokens * percentOfTotal / (100);\n        totalSupply += additionalTokens;\n        balances[migrationMaster] += additionalTokens;\n        Transfer(0, migrationMaster, additionalTokens);\n	}\n1711-function_definition-246-262", method="createDaoPOLSKAtokens(address holder)", type_label=function_definition];
1719 [label="246_ if\n1719-if-247-247", method="createDaoPOLSKAtokens(address holder)", type_label=if];
3854 [label="246_ end_if", method="createDaoPOLSKAtokens(address holder)", type_label=end_if];
1722 [label="246_ throw;\n1722-expression_statement-247-247", method="createDaoPOLSKAtokens(address holder)", type_label=expression_statement];
1724 [label="247_ if_msg.value == 0\n1724-if-248-248", method="createDaoPOLSKAtokens(address holder)", type_label=if];
3859 [label="247_ end_if", method="createDaoPOLSKAtokens(address holder)", type_label=end_if];
1730 [label="247_ throw;\n1730-expression_statement-248-248", method="createDaoPOLSKAtokens(address holder)", type_label=expression_statement];
1732 [label="248_ if_msg.value > (supplylimit - totalSupply) / CreationRate\n1732-if-249-250", method="createDaoPOLSKAtokens(address holder)", type_label=if];
3867 [label="248_ end_if", method="createDaoPOLSKAtokens(address holder)", type_label=end_if];
1743 [label="249_ throw;\n1743-expression_statement-250-250", method="createDaoPOLSKAtokens(address holder)", type_label=expression_statement];
1745 [label="250_ var numTokensRAW = msg.value;\n1745-new_variable-251-251", method="createDaoPOLSKAtokens(address holder)", type_label=new_variable];
1753 [label="251_ var numTokens = msg.value * CreationRate;\n1753-new_variable-252-252", method="createDaoPOLSKAtokens(address holder)", type_label=new_variable];
1763 [label="252_ totalSupply += numTokens;\n1763-expression_statement-253-253", method="createDaoPOLSKAtokens(address holder)", type_label=expression_statement];
1767 [label="253_ balances[holder] += numTokens;\n1767-expression_statement-254-254", method="createDaoPOLSKAtokens(address holder)", type_label=expression_statement];
1773 [label="254_ balancesRAW[holder] += numTokensRAW;\n1773-expression_statement-255-255", method="createDaoPOLSKAtokens(address holder)", type_label=expression_statement];
1779 [label="255_ Transfer(0, holder, numTokens);\n1779-expression_statement-256-256", method="createDaoPOLSKAtokens(address holder)", type_label=expression_statement];
1788 [label="256_ uint256 percentOfTotal = 12;\n1788-new_variable-257-257", method="createDaoPOLSKAtokens(address holder)", type_label=new_variable];
1794 [label="257_ uint256 additionalTokens = 	numTokens * percentOfTotal / (100);\n1794-new_variable-258-258", method="createDaoPOLSKAtokens(address holder)", type_label=new_variable];
1805 [label="258_ totalSupply += additionalTokens;\n1805-expression_statement-259-259", method="createDaoPOLSKAtokens(address holder)", type_label=expression_statement];
1809 [label="259_ balances[migrationMaster] += additionalTokens;\n1809-expression_statement-260-260", method="createDaoPOLSKAtokens(address holder)", type_label=expression_statement];
1815 [label="260_ Transfer(0, migrationMaster, additionalTokens);\n1815-expression_statement-261-261", method="createDaoPOLSKAtokens(address holder)", type_label=expression_statement];
1824 [label="262_ function setBonusCreationRate(uint newRate){\n	if(msg.sender == owner) {\n	bonusCreationRate=newRate;\n	CreationRate=tokenCreationRate+bonusCreationRate;\n	}\n	}\n1824-function_definition-263-268", method="setBonusCreationRate(uint newRate)", type_label=function_definition];
1831 [label="263_ if_msg.sender == owner\n1831-if-264-267", method="setBonusCreationRate(uint newRate)", type_label=if];
3966 [label="263_ end_if", method="setBonusCreationRate(uint newRate)", type_label=end_if];
1838 [label="264_ bonusCreationRate=newRate;\n1838-expression_statement-265-265", method="setBonusCreationRate(uint newRate)", type_label=expression_statement];
1842 [label="265_ CreationRate=tokenCreationRate+bonusCreationRate;\n1842-expression_statement-266-266", method="setBonusCreationRate(uint newRate)", type_label=expression_statement];
1848 [label="268_ function FundsTransfer() external {\n	if(funding==true) throw;\n		 	if (!owner.send(this.balance)) throw;\n    }\n1848-function_definition-269-272", method="FundsTransfer()", type_label=function_definition];
1852 [label="269_ if_funding==true\n1852-if-270-270", method="FundsTransfer()", type_label=if];
3987 [label="269_ end_if", method="FundsTransfer()", type_label=end_if];
1857 [label="269_ throw;\n1857-expression_statement-270-270", method="FundsTransfer()", type_label=expression_statement];
1859 [label="270_ if\n1859-if-271-271", method="FundsTransfer()", type_label=if];
3994 [label="270_ end_if", method="FundsTransfer()", type_label=end_if];
1869 [label="270_ throw;\n1869-expression_statement-271-271", method="FundsTransfer()", type_label=expression_statement];
1871 [label="272_ function PartialFundsTransfer(uint SubX) external {\n	      if (msg.sender != owner) throw;\n        owner.send(this.balance - SubX);\n	}\n1871-function_definition-273-276", method="PartialFundsTransfer(uint SubX)", type_label=function_definition];
1879 [label="273_ if_msg.sender != owner\n1879-if-274-274", method="PartialFundsTransfer(uint SubX)", type_label=if];
4014 [label="273_ end_if", method="PartialFundsTransfer(uint SubX)", type_label=end_if];
1885 [label="273_ throw;\n1885-expression_statement-274-274", method="PartialFundsTransfer(uint SubX)", type_label=expression_statement];
1887 [label="274_ owner.send(this.balance - SubX);\n1887-expression_statement-275-275", method="PartialFundsTransfer(uint SubX)", type_label=expression_statement];
1898 [label="276_ function turnrefund() external {\n	      if (msg.sender != owner) throw;\n	refundstate=!refundstate;\n        }\n1898-function_definition-277-280", method="turnrefund()", type_label=function_definition];
1902 [label="277_ if_msg.sender != owner\n1902-if-278-278", method="turnrefund()", type_label=if];
4037 [label="277_ end_if", method="turnrefund()", type_label=end_if];
1908 [label="277_ throw;\n1908-expression_statement-278-278", method="turnrefund()", type_label=expression_statement];
1910 [label="278_ refundstate=!refundstate;\n1910-expression_statement-279-279", method="turnrefund()", type_label=expression_statement];
1915 [label="280_ function fundingState() external {\n	      if (msg.sender != owner) throw;\n	funding=!funding;\n        }\n1915-function_definition-281-284", method="fundingState()", type_label=function_definition];
1919 [label="281_ if_msg.sender != owner\n1919-if-282-282", method="fundingState()", type_label=if];
4054 [label="281_ end_if", method="fundingState()", type_label=end_if];
1925 [label="281_ throw;\n1925-expression_statement-282-282", method="fundingState()", type_label=expression_statement];
1927 [label="282_ funding=!funding;\n1927-expression_statement-283-283", method="fundingState()", type_label=expression_statement];
1932 [label="284_ function turnmigrate() external {\n	      if (msg.sender != migrationMaster) throw;\n	migratestate=!migratestate;\n}\n1932-function_definition-285-288", method="turnmigrate()", type_label=function_definition];
1936 [label="285_ if_msg.sender != migrationMaster\n1936-if-286-286", method="turnmigrate()", type_label=if];
4071 [label="285_ end_if", method="turnmigrate()", type_label=end_if];
1942 [label="285_ throw;\n1942-expression_statement-286-286", method="turnmigrate()", type_label=expression_statement];
1944 [label="286_ migratestate=!migratestate;\n1944-expression_statement-287-287", method="turnmigrate()", type_label=expression_statement];
1949 [label="288_ function finalize() external {\n        if (block.number <= fundingEndBlock+8*oneweek) throw;\n        funding = false;	\n		refundstate=!refundstate;\n        if (msg.sender==owner)\n		owner.send(this.balance);\n    }\n1949-function_definition-289-295", method="finalize()", type_label=function_definition];
1953 [label="289_ if_block.number <= fundingEndBlock+8*oneweek\n1953-if-290-290", method="finalize()", type_label=if];
4088 [label="289_ end_if", method="finalize()", type_label=end_if];
1963 [label="289_ throw;\n1963-expression_statement-290-290", method="finalize()", type_label=expression_statement];
1965 [label="290_ funding = false;\n1965-expression_statement-291-291", method="finalize()", type_label=expression_statement];
1970 [label="291_ refundstate=!refundstate;\n1970-expression_statement-292-292", method="finalize()", type_label=expression_statement];
1975 [label="292_ if_msg.sender==owner\n1975-if-293-294", method="finalize()", type_label=if];
4110 [label="292_ end_if", method="finalize()", type_label=end_if];
1981 [label="293_ owner.send(this.balance);\n1981-expression_statement-294-294", method="finalize()", type_label=expression_statement];
1990 [label="295_ function migrate(uint256 _value) external {\n        if (migratestate) throw;\n        if (_value == 0) throw;\n        if (_value > balances[msg.sender]) throw;\n        balances[msg.sender] -= _value;\n        totalSupply -= _value;\n        totalMigrated += _value;\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\n        Migrate(msg.sender, migrationAgent, _value);\n    }\n1990-function_definition-296-305", method="migrate(uint256 _value)", type_label=function_definition];
1998 [label="296_ if\n1998-if-297-297", method="migrate(uint256 _value)", type_label=if];
4133 [label="296_ end_if", method="migrate(uint256 _value)", type_label=end_if];
2000 [label="296_ throw;\n2000-expression_statement-297-297", method="migrate(uint256 _value)", type_label=expression_statement];
2002 [label="297_ if__value == 0\n2002-if-298-298", method="migrate(uint256 _value)", type_label=if];
4137 [label="297_ end_if", method="migrate(uint256 _value)", type_label=end_if];
2006 [label="297_ throw;\n2006-expression_statement-298-298", method="migrate(uint256 _value)", type_label=expression_statement];
2008 [label="298_ if\n2008-if-299-299", method="migrate(uint256 _value)", type_label=if];
4143 [label="298_ end_if", method="migrate(uint256 _value)", type_label=end_if];
2016 [label="298_ throw;\n2016-expression_statement-299-299", method="migrate(uint256 _value)", type_label=expression_statement];
2018 [label="299_ balances[msg.sender] -= _value;\n2018-expression_statement-300-300", method="migrate(uint256 _value)", type_label=expression_statement];
2026 [label="300_ totalSupply -= _value;\n2026-expression_statement-301-301", method="migrate(uint256 _value)", type_label=expression_statement];
2030 [label="301_ totalMigrated += _value;\n2030-expression_statement-302-302", method="migrate(uint256 _value)", type_label=expression_statement];
2034 [label="302_ MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\n2034-expression_statement-303-303", method="migrate(uint256 _value)", type_label=expression_statement];
2048 [label="303_ Migrate(msg.sender, migrationAgent, _value);\n2048-expression_statement-304-304", method="migrate(uint256 _value)", type_label=expression_statement];
2059 [label="305_ function refundTRA() external {\n        if (funding) throw;\n        if (!refundstate) throw;\n        var DAOPLTokenValue = balances[msg.sender];\n        var ETHValue = balancesRAW[msg.sender];\n        if (ETHValue == 0) throw;\n        balancesRAW[msg.sender] = 0;\n        totalSupply -= DAOPLTokenValue;\n        Refund(msg.sender, ETHValue);\n        msg.sender.transfer(ETHValue);\n}\n2059-function_definition-306-316", method="refundTRA()", type_label=function_definition];
2063 [label="306_ if\n2063-if-307-307", method="refundTRA()", type_label=if];
4198 [label="306_ end_if", method="refundTRA()", type_label=end_if];
2065 [label="306_ throw;\n2065-expression_statement-307-307", method="refundTRA()", type_label=expression_statement];
2067 [label="307_ if\n2067-if-308-308", method="refundTRA()", type_label=if];
4202 [label="307_ end_if", method="refundTRA()", type_label=end_if];
2070 [label="307_ throw;\n2070-expression_statement-308-308", method="refundTRA()", type_label=expression_statement];
2072 [label="308_ var DAOPLTokenValue = balances[msg.sender];\n2072-new_variable-309-309", method="refundTRA()", type_label=new_variable];
2082 [label="309_ var ETHValue = balancesRAW[msg.sender];\n2082-new_variable-310-310", method="refundTRA()", type_label=new_variable];
2092 [label="310_ if_ETHValue == 0\n2092-if-311-311", method="refundTRA()", type_label=if];
4227 [label="310_ end_if", method="refundTRA()", type_label=end_if];
2096 [label="310_ throw;\n2096-expression_statement-311-311", method="refundTRA()", type_label=expression_statement];
2098 [label="311_ balancesRAW[msg.sender] = 0;\n2098-expression_statement-312-312", method="refundTRA()", type_label=expression_statement];
2106 [label="312_ totalSupply -= DAOPLTokenValue;\n2106-expression_statement-313-313", method="refundTRA()", type_label=expression_statement];
2110 [label="313_ Refund(msg.sender, ETHValue);\n2110-expression_statement-314-314", method="refundTRA()", type_label=expression_statement];
2119 [label="314_ msg.sender.transfer(ETHValue);\n2119-expression_statement-315-315", method="refundTRA()", type_label=expression_statement];
2128 [label="316_ function preICOregulations() external returns(string wow) {\n	return 'Regulations of preICO are present at website  daopolska.pl and by using this smartcontract you commit that you accept and will follow those rules';\n}\n2128-function_definition-317-319", method="preICOregulations()", type_label=function_definition];
2137 [label="317_ return 'Regulations of preICO are present at website  daopolska.pl and by using this smartcontract you commit that you accept and will follow those rules';\n2137-return-318-318", method="preICOregulations()", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
424;
1488;
161 -> 177  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
177 -> 185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
185 -> 198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
198 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
200 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
244 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
246 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
273 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
297 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
310 -> 328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
328 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
335 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
360 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
385 -> 403  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
403 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
410 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 422  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
418 -> 2553  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2553 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
422 -> 2553  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
443 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
463 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
477 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 510  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
510 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
534 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
537 -> 557  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
557 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
569 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
619 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
622 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
640 -> 656  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
656 -> 672  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
656 -> 2791  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2791 -> 674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
672 -> 2791  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
674 -> 684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
698 -> 716  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
716 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
725 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
745 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 755  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
755 -> 762  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
762 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
782 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
788 -> 794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
794 -> 800  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
800 -> 806  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
850 -> 857  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
857 -> 862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 868  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
868 -> 874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 947  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
954 -> 957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
957 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
969 -> 977  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
977 -> 984  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
977 -> 3112  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3112 -> 986  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 3112  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
986 -> 992  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
986 -> 3121  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3121 -> 994  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 3121  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
994 -> 999  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1007 -> 1015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1015 -> 1022  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1015 -> 3150  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3150 -> 1024  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1022 -> 3150  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1024 -> 1030  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1024 -> 3159  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3159 -> 1032  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1030 -> 3159  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1032 -> 1037  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1045 -> 1066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1066 -> 1076  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1084  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1076 -> 3211  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3211 -> 1102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 3211  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1099 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1102 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1115 -> 1126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1126 -> 1134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1134 -> 1138  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1147 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1150 -> 1167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 1176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1176 -> 1189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1189 -> 1195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1195 -> 1205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1205 -> 1209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1209 -> 1216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1216 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1219 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 1254  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1235 -> 1283  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3370 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1254 -> 1262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1262 -> 1268  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1268 -> 1279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1279 -> 3370  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1279 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1283 -> 3370  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1283 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1286 -> 1306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1306 -> 1333  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1306 -> 1368  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3441 -> 1371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1333 -> 1339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1339 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1345 -> 1355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1355 -> 1364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1364 -> 3441  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1364 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1368 -> 3441  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1368 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1371 -> 1385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1385 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1389 -> 1405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1405 -> 1415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1415 -> 1426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1426 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1429 -> 1447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1447 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1457 -> 1460  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1457 -> 1487  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3592 -> 1489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1471 -> 3592  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1489 -> 1500  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1500 -> 1507  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1500 -> 3635  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3635 -> 1509  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1507 -> 3635  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1509 -> 1513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1513 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1524 -> 1535  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1535 -> 1542  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1535 -> 3670  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3670 -> 1544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1542 -> 3670  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1544 -> 1549  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1544 -> 3679  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3679 -> 1553  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1549 -> 3679  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1553 -> 1558  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1553 -> 3688  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3688 -> 1562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1558 -> 3688  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1562 -> 1567  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1562 -> 3697  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3697 -> 1571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1567 -> 3697  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1571 -> 1576  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1571 -> 3706  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3706 -> 1580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1576 -> 3706  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1580 -> 1589  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1589 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1592 -> 1607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 1614  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1607 -> 3742  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3742 -> 1616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1614 -> 3742  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1616 -> 1625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1625 -> 1634  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1634 -> 1640  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1640 -> 1646  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1646 -> 1657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1660 -> 1666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1666 -> 1672  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1672 -> 1678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1678 -> 1684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1684 -> 1690  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1690 -> 1697  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1697 -> 1704  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1711 -> 1719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1719 -> 1722  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1719 -> 3854  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3854 -> 1724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1722 -> 3854  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1724 -> 1730  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1724 -> 3859  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3859 -> 1732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1730 -> 3859  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1732 -> 1743  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1732 -> 3867  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3867 -> 1745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1743 -> 3867  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1745 -> 1753  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1753 -> 1763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1763 -> 1767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1767 -> 1773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1773 -> 1779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1779 -> 1788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1788 -> 1794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1794 -> 1805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1805 -> 1809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1809 -> 1815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1824 -> 1831  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1831 -> 1838  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1831 -> 3966  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3966 -> 1848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1838 -> 1842  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1842 -> 3966  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1848 -> 1852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1852 -> 1857  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1852 -> 3987  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3987 -> 1859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1857 -> 3987  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1859 -> 1869  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1859 -> 3994  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3994 -> 1871  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1869 -> 3994  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1871 -> 1879  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1879 -> 1885  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1879 -> 4014  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4014 -> 1887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1885 -> 4014  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1898 -> 1902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1902 -> 1908  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1902 -> 4037  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4037 -> 1910  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1908 -> 4037  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1915 -> 1919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1919 -> 1925  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1919 -> 4054  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4054 -> 1927  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1925 -> 4054  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1932 -> 1936  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1936 -> 1942  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1936 -> 4071  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4071 -> 1944  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1942 -> 4071  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1949 -> 1953  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1953 -> 1963  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1953 -> 4088  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4088 -> 1965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1963 -> 4088  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1965 -> 1970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1970 -> 1975  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1975 -> 1981  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1975 -> 4110  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4110 -> 1990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1981 -> 4110  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1990 -> 1998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1998 -> 2000  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1998 -> 4133  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4133 -> 2002  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2000 -> 4133  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2002 -> 2006  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2002 -> 4137  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4137 -> 2008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2006 -> 4137  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2008 -> 2016  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2008 -> 4143  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4143 -> 2018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2016 -> 4143  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2018 -> 2026  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2026 -> 2030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2030 -> 2034  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2034 -> 2048  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2059 -> 2063  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2063 -> 2065  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2063 -> 4198  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4198 -> 2067  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2065 -> 4198  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2067 -> 2070  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2067 -> 4202  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4202 -> 2072  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2070 -> 4202  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2072 -> 2082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2082 -> 2092  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2092 -> 2096  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2092 -> 4227  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4227 -> 2098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2096 -> 4227  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2098 -> 2106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2106 -> 2110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2110 -> 2119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2128 -> 2137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2137 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1488 -> 3592  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
