digraph  {
13 [label="2_ plus\n13-function_definition-3-8", type_label=function_definition];
31 [label="6_ sum = addendA + addendB;\n31-expression_statement-7-7", type_label=expression_statement];
37 [label="8_ minus\n37-function_definition-9-15", type_label=function_definition];
55 [label="12_ assert(minuend >= subtrahend);\n55-expression_statement-13-13", type_label=expression_statement];
62 [label="13_ difference = minuend - subtrahend;\n62-expression_statement-14-14", type_label=expression_statement];
68 [label="15_ mul\n68-function_definition-16-23", type_label=function_definition];
86 [label="19_ if_factorA == 0 || factorB == 0\n86-if-20-20", type_label=if];
1339 [label="19_ end_if", type_label=end_if];
94 [label="19_ return 0;\n94-return-20-20", type_label=return];
96 [label="20_ product = factorA * factorB;\n96-expression_statement-21-21", type_label=expression_statement];
102 [label="21_ assert(product / factorA == factorB);\n102-expression_statement-22-22", type_label=expression_statement];
111 [label="23_ times\n111-function_definition-24-29", type_label=function_definition];
129 [label="27_ return mul(factorA, factorB);\n129-return-28-28", type_label=return];
136 [label="29_ div\n136-function_definition-30-36", type_label=function_definition];
154 [label="33_ quotient = dividend / divisor;\n154-expression_statement-34-34", type_label=expression_statement];
160 [label="34_ assert(quotient * divisor == dividend);\n160-expression_statement-35-35", type_label=expression_statement];
169 [label="36_ dividedBy\n169-function_definition-37-42", type_label=function_definition];
187 [label="40_ return div(dividend, divisor);\n187-return-41-41", type_label=return];
194 [label="42_ divideSafely\n194-function_definition-43-49", type_label=function_definition];
216 [label="46_ quotient = div(dividend, divisor);\n216-expression_statement-47-47", type_label=expression_statement];
225 [label="47_ remainder = dividend % divisor;\n225-expression_statement-48-48", type_label=expression_statement];
231 [label="49_ min\n231-function_definition-50-55", type_label=function_definition];
249 [label="53_ result = a <= b ? a : b;\n249-expression_statement-54-54", type_label=expression_statement];
258 [label="55_ max\n258-function_definition-56-61", type_label=function_definition];
276 [label="59_ result = a >= b ? a : b;\n276-expression_statement-60-60", type_label=expression_statement];
285 [label="61_ isLessThan\n285-function_definition-62-64", type_label=function_definition];
303 [label="62_ isTrue = a < b;\n303-expression_statement-63-63", type_label=expression_statement];
309 [label="64_ isAtMost\n309-function_definition-65-67", type_label=function_definition];
327 [label="65_ isTrue = a <= b;\n327-expression_statement-66-66", type_label=expression_statement];
333 [label="67_ isGreaterThan\n333-function_definition-68-70", type_label=function_definition];
351 [label="68_ isTrue = a > b;\n351-expression_statement-69-69", type_label=expression_statement];
357 [label="70_ isAtLeast\n357-function_definition-71-73", type_label=function_definition];
375 [label="71_ isTrue = a >= b;\n375-expression_statement-72-72", type_label=expression_statement];
384 [label="75_ address public owner;\n384-new_variable-76-76", type_label=new_variable];
389 [label="76_ address public manager;\n389-new_variable-77-77", type_label=new_variable];
414 [label="79_ Manageable\n414-function_definition-80-83", type_label=function_definition];
418 [label="80_ owner = msg.sender;\n418-expression_statement-81-81", type_label=expression_statement];
424 [label="81_ manager = msg.sender;\n424-expression_statement-82-82", type_label=expression_statement];
430 [label="83_ modifier onlyManagement() {\n    require(msg.sender == owner || msg.sender == manager);\n    _;\n  }\n430-expression_statement-84-87", type_label=expression_statement];
433 [label="84_ require(msg.sender == owner || msg.sender == manager);\n433-expression_statement-85-85", type_label=expression_statement];
448 [label="85_ _;\n448-expression_statement-86-86", type_label=expression_statement];
450 [label="87_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n450-expression_statement-88-91", type_label=expression_statement];
453 [label="88_ require(msg.sender == owner);\n453-expression_statement-89-89", type_label=expression_statement];
462 [label="89_ _;\n462-expression_statement-90-90", type_label=expression_statement];
464 [label="91_ transferOwnership\n464-function_definition-92-96", type_label=function_definition];
471 [label="91_ onlyOwner\n471-expression_statement-92-92", type_label=expression_statement];
474 [label="92_ require(newOwner != address(0));\n474-expression_statement-93-93", type_label=expression_statement];
489 [label="94_ owner = newOwner;\n489-expression_statement-95-95", type_label=expression_statement];
493 [label="96_ replaceManager\n493-function_definition-97-101", type_label=function_definition];
500 [label="96_ onlyManagement\n500-expression_statement-97-97", type_label=expression_statement];
503 [label="97_ require(newManager != address(0));\n503-expression_statement-98-98", type_label=expression_statement];
518 [label="99_ manager = newManager;\n518-expression_statement-100-100", type_label=expression_statement];
525 [label="103_ totalSupply\n525-function_definition-104-104", type_label=function_definition];
533 [label="104_ balanceOf\n533-function_definition-105-105", type_label=function_definition];
545 [label="105_ transfer\n545-function_definition-106-106", type_label=function_definition];
580 [label="109_ allowance\n580-function_definition-110-110", type_label=function_definition];
596 [label="110_ transferFrom\n596-function_definition-111-111", type_label=function_definition];
615 [label="111_ approve\n615-function_definition-112-112", type_label=function_definition];
655 [label="116_ mapping(address => uint256) balances;\n655-new_variable-117-117", type_label=new_variable];
661 [label="117_ uint256 totalSupply_;\n661-new_variable-118-118", type_label=new_variable];
665 [label="118_ totalSupply\n665-function_definition-119-121", type_label=function_definition];
674 [label="119_ return totalSupply_;\n674-return-120-120", type_label=return];
676 [label="121_ transfer\n676-function_definition-122-129", type_label=function_definition];
692 [label="122_ require(_to != address(0));\n692-expression_statement-123-123", type_label=expression_statement];
701 [label="123_ require(_value <= balances[msg.sender]);\n701-expression_statement-124-124", type_label=expression_statement];
712 [label="124_ balances[msg.sender] = balances[msg.sender].minus(_value);\n712-expression_statement-125-125", type_label=expression_statement];
729 [label="125_ balances[_to] = balances[_to].plus(_value);\n729-expression_statement-126-126", type_label=expression_statement];
752 [label="127_ return true;\n752-return-128-128", type_label=return];
755 [label="129_ balanceOf\n755-function_definition-130-132", type_label=function_definition];
768 [label="130_ return balances[_owner];\n768-return-131-131", type_label=return];
786 [label="135_ mapping (address => mapping (address => uint256)) internal allowed;\n786-new_variable-136-136", type_label=new_variable];
795 [label="136_ transferFrom\n795-function_definition-137-146", type_label=function_definition];
815 [label="137_ require(_to != address(0));\n815-expression_statement-138-138", type_label=expression_statement];
824 [label="138_ require(_value <= balances[_from]);\n824-expression_statement-139-139", type_label=expression_statement];
833 [label="139_ require(_value <= allowed[_from][msg.sender]);\n833-expression_statement-140-140", type_label=expression_statement];
846 [label="140_ balances[_from] = balances[_from].minus(_value);\n846-expression_statement-141-141", type_label=expression_statement];
859 [label="141_ balances[_to] = balances[_to].plus(_value);\n859-expression_statement-142-142", type_label=expression_statement];
872 [label="142_ allowed[_from][msg.sender] = allowed[_from][msg.sender].minus(_value);\n872-expression_statement-143-143", type_label=expression_statement];
901 [label="144_ return true;\n901-return-145-145", type_label=return];
904 [label="146_ approve\n904-function_definition-147-151", type_label=function_definition];
920 [label="147_ allowed[msg.sender][_spender] = _value;\n920-expression_statement-148-148", type_label=expression_statement];
940 [label="149_ return true;\n940-return-150-150", type_label=return];
943 [label="151_ allowance\n943-function_definition-152-154", type_label=function_definition];
960 [label="152_ return allowed[_owner][_spender];\n960-return-153-153", type_label=return];
966 [label="154_ increaseApproval\n966-function_definition-155-159", type_label=function_definition];
982 [label="155_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].plus(_addedValue);\n982-expression_statement-156-156", type_label=expression_statement];
1019 [label="157_ return true;\n1019-return-158-158", type_label=return];
1022 [label="159_ decreaseApproval\n1022-function_definition-160-169", type_label=function_definition];
1038 [label="160_ uint oldValue = allowed[msg.sender][_spender];\n1038-new_variable-161-161", type_label=new_variable];
1050 [label="161_ if__subtractedValue > oldValue\n1050-if-162-166", type_label=if];
2303 [label="161_ end_if", type_label=end_if];
1055 [label="162_ allowed[msg.sender][_spender] = 0;\n1055-expression_statement-163-163", type_label=expression_statement];
1066 [label="164_ allowed[msg.sender][_spender] = oldValue.minus(_subtractedValue);\n1066-expression_statement-165-165", type_label=expression_statement];
1097 [label="167_ return true;\n1097-return-168-168", type_label=return];
1126 [label="174_ bool public mintingFinished = false;\n1126-new_variable-175-175", type_label=new_variable];
1133 [label="175_ modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n1133-expression_statement-176-179", type_label=expression_statement];
1136 [label="176_ require(!mintingFinished);\n1136-expression_statement-177-177", type_label=expression_statement];
1142 [label="177_ _;\n1142-expression_statement-178-178", type_label=expression_statement];
1144 [label="179_ mint\n1144-function_definition-180-186", type_label=function_definition];
1154 [label="179_ onlyManagement\n1154-expression_statement-180-180", type_label=expression_statement];
1156 [label="179_ canMint\n1156-expression_statement-180-180", type_label=expression_statement];
1164 [label="180_ totalSupply_ = totalSupply_.plus(_amount);\n1164-expression_statement-181-181", type_label=expression_statement];
1173 [label="181_ balances[_to] = balances[_to].plus(_amount);\n1173-expression_statement-182-182", type_label=expression_statement];
1202 [label="184_ return true;\n1202-return-185-185", type_label=return];
1205 [label="186_ finishMinting\n1205-function_definition-187-191", type_label=function_definition];
1207 [label="186_ onlyManagement\n1207-expression_statement-187-187", type_label=expression_statement];
1209 [label="186_ canMint\n1209-expression_statement-187-187", type_label=expression_statement];
1217 [label="187_ mintingFinished = true;\n1217-expression_statement-188-188", type_label=expression_statement];
1224 [label="189_ return true;\n1224-return-190-190", type_label=return];
1238 [label="194_ string public constant name     = \"Mythereum XP\";\n1238-new_variable-195-195", type_label=new_variable];
1245 [label="195_ string public constant symbol   = \"XP\";\n1245-new_variable-196-196", type_label=new_variable];
1252 [label="196_ uint8  public constant decimals = 0;\n1252-new_variable-197-197", type_label=new_variable];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
1081;
13 -> 31  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 55  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 86  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
86 -> 94  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
86 -> 1339  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1339 -> 96  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 1339  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
94 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
96 -> 102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
111 -> 129  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
136 -> 154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 160  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
194 -> 216  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
216 -> 225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
258 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 303  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 375  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 389  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
414 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 450  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
655 -> 661  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 674  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
676 -> 692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
692 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
755 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
795 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 824  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
824 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
833 -> 846  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
846 -> 859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
859 -> 872  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
901 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
904 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
943 -> 960  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
966 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1022 -> 1038  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1038 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1050 -> 1055  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1050 -> 1066  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2303 -> 1081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1055 -> 2303  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1066 -> 2303  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1097 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1126 -> 1133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1136 -> 1142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1144 -> 1164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1154 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1164 -> 1173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1202 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1205 -> 1217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1207 -> 1209  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1238 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1245 -> 1252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
