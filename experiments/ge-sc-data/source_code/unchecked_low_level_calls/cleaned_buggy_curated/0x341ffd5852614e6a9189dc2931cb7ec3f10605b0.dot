digraph  {
13 [label="2_ address private _owner;\n13-new_variable-3-3", type_label=new_variable];
30 [label="5_ _owner = msg.sender;\n30-expression_statement-6-6", type_label=expression_statement];
44 [label="8_ owner\n44-function_definition-9-11", type_label=function_definition];
53 [label="9_ return _owner;\n53-return-10-10", type_label=return];
55 [label="11_ modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n55-expression_statement-12-15", type_label=expression_statement];
58 [label="12_ require(isOwner());\n58-expression_statement-13-13", type_label=expression_statement];
64 [label="13_ _;\n64-expression_statement-14-14", type_label=expression_statement];
66 [label="15_ isOwner\n66-function_definition-16-18", type_label=function_definition];
75 [label="16_ return msg.sender == _owner;\n75-return-17-17", type_label=return];
81 [label="18_ renounceOwnership\n81-function_definition-19-22", type_label=function_definition];
84 [label="18_ onlyOwner\n84-expression_statement-19-19", type_label=expression_statement];
95 [label="20_ _owner = address(0);\n95-expression_statement-21-21", type_label=expression_statement];
101 [label="22_ transferOwnership\n101-function_definition-23-25", type_label=function_definition];
108 [label="22_ onlyOwner\n108-expression_statement-23-23", type_label=expression_statement];
111 [label="23_ _transferOwnership(newOwner);\n111-expression_statement-24-24", type_label=expression_statement];
116 [label="25_ _transferOwnership\n116-function_definition-26-30", type_label=function_definition];
124 [label="26_ require(newOwner != address(0));\n124-expression_statement-27-27", type_label=expression_statement];
139 [label="28_ _owner = newOwner;\n139-expression_statement-29-29", type_label=expression_statement];
146 [label="32_ mul\n146-function_definition-33-40", type_label=function_definition];
163 [label="33_ if_a == 0\n163-if-34-36", type_label=if];
2609 [label="33_ end_if", type_label=end_if];
168 [label="34_ return 0;\n168-return-35-35", type_label=return];
170 [label="36_ uint256 c = a * b;\n170-new_variable-37-37", type_label=new_variable];
178 [label="37_ assert(c / a == b);\n178-expression_statement-38-38", type_label=expression_statement];
187 [label="38_ return c;\n187-return-39-39", type_label=return];
189 [label="40_ div\n189-function_definition-41-44", type_label=function_definition];
206 [label="41_ uint256 c = a / b;\n206-new_variable-42-42", type_label=new_variable];
214 [label="42_ return c;\n214-return-43-43", type_label=return];
216 [label="44_ sub\n216-function_definition-45-48", type_label=function_definition];
233 [label="45_ assert(b <= a);\n233-expression_statement-46-46", type_label=expression_statement];
240 [label="46_ return a - b;\n240-return-47-47", type_label=return];
244 [label="48_ add\n244-function_definition-49-53", type_label=function_definition];
261 [label="49_ uint256 c = a + b;\n261-new_variable-50-50", type_label=new_variable];
269 [label="50_ assert(c >= a);\n269-expression_statement-51-51", type_label=expression_statement];
276 [label="51_ return c;\n276-return-52-52", type_label=return];
289 [label="56_ mapping (address => Holding) public holdings;\n289-new_variable-57-57", type_label=new_variable];
297 [label="57_ uint256 constant public MinimumHoldingPeriod = 90 days;\n297-new_variable-58-58", type_label=new_variable];
304 [label="58_ uint256 constant public Interval = 90 days;\n304-new_variable-59-59", type_label=new_variable];
311 [label="59_ uint256 constant public MaximumHoldingPeriod = 360 days;\n311-new_variable-60-60", type_label=new_variable];
318 [label="60_ uint256 constant public CommunityCap = 14300000 ether;\n318-new_variable-61-61", type_label=new_variable];
325 [label="61_ uint256 public totalCommunityTokensCommitted;\n325-new_variable-62-62", type_label=new_variable];
330 [label="62_ struct Holding {\n        uint256 tokensCommitted;\n        uint256 tokensRemaining;\n        uint256 startTime;\n    }\n330-expression_statement-63-67", type_label=expression_statement];
372 [label="69_ claimTokens\n372-function_definition-70-89", type_label=function_definition];
379 [label="71_ onlyOwner\n379-expression_statement-72-72", type_label=expression_statement];
387 [label="74_ uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\n387-new_variable-75-75", type_label=new_variable];
397 [label="75_ uint256 startTime = holdings[beneficiary].startTime;\n397-new_variable-76-76", type_label=new_variable];
407 [label="76_ require(tokensRemaining > 0, \"All tokens claimed\");\n407-expression_statement-77-77", type_label=expression_statement];
417 [label="77_ require(now.sub(startTime) > MinimumHoldingPeriod, \"Claiming period not started yet\");\n417-expression_statement-78-78", type_label=expression_statement];
432 [label="78_ if_now.sub(startTime) >= MaximumHoldingPeriod\n432-if-79-88", type_label=if];
2878 [label="78_ end_if", type_label=end_if];
442 [label="79_ tokensToClaim = tokensRemaining;\n442-expression_statement-80-80", type_label=expression_statement];
446 [label="80_ delete holdings[beneficiary];\n446-expression_statement-81-81", type_label=expression_statement];
452 [label="82_ uint256 percentage = calculatePercentageToRelease(startTime);\n452-new_variable-83-83", type_label=new_variable];
461 [label="83_ uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(100 - percentage)).div(100);\n461-new_variable-84-84", type_label=new_variable];
484 [label="84_ tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\n484-expression_statement-85-85", type_label=expression_statement];
493 [label="85_ tokensRemaining = tokensNotToClaim;\n493-expression_statement-86-86", type_label=expression_statement];
497 [label="86_ holdings[beneficiary].tokensRemaining = tokensRemaining;\n497-expression_statement-87-87", type_label=expression_statement];
505 [label="89_ calculatePercentageToRelease\n505-function_definition-90-93", type_label=function_definition];
519 [label="90_ uint periodsPassed = ((now.sub(_startTime)).div(Interval));\n519-new_variable-91-91", type_label=new_variable];
537 [label="91_ percentage = periodsPassed.mul(25);\n537-expression_statement-92-92", type_label=expression_statement];
546 [label="93_ initializeVesting\n546-function_definition-94-120", type_label=function_definition];
561 [label="99_ onlyOwner\n561-expression_statement-100-100", type_label=expression_statement];
564 [label="101_ totalCommunityTokensCommitted = totalCommunityTokensCommitted.add(_tokens);\n564-expression_statement-102-102", type_label=expression_statement];
573 [label="102_ require(totalCommunityTokensCommitted <= CommunityCap);\n573-expression_statement-103-103", type_label=expression_statement];
580 [label="103_ if_holdings[_beneficiary].tokensCommitted != 0\n580-if-104-119", type_label=if];
3026 [label="103_ end_if", type_label=end_if];
589 [label="104_ holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\n589-expression_statement-105-105", type_label=expression_statement];
606 [label="105_ holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\n606-expression_statement-106-106", type_label=expression_statement];
640 [label="112_ holdings[_beneficiary] = Holding(\n                _tokens,\n                _tokens,\n                _startTime\n            );\n640-expression_statement-113-117", type_label=expression_statement];
672 [label="123_ mapping (address => Holding) public holdings;\n672-new_variable-124-124", type_label=new_variable];
680 [label="124_ uint256 constant public Interval = 90 days;\n680-new_variable-125-125", type_label=new_variable];
687 [label="125_ uint256 constant public MaximumHoldingPeriod = 630 days;\n687-new_variable-126-126", type_label=new_variable];
694 [label="126_ uint256 constant public EcosystemCap = 54100000 ether;\n694-new_variable-127-127", type_label=new_variable];
701 [label="127_ uint256 public totalEcosystemTokensCommitted;\n701-new_variable-128-128", type_label=new_variable];
706 [label="128_ struct Holding {\n        uint256 tokensCommitted;\n        uint256 tokensRemaining;\n        uint256 startTime;\n    }\n706-expression_statement-129-133", type_label=expression_statement];
748 [label="135_ claimTokens\n748-function_definition-136-154", type_label=function_definition];
755 [label="137_ onlyOwner\n755-expression_statement-138-138", type_label=expression_statement];
763 [label="140_ uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\n763-new_variable-141-141", type_label=new_variable];
773 [label="141_ uint256 startTime = holdings[beneficiary].startTime;\n773-new_variable-142-142", type_label=new_variable];
783 [label="142_ require(tokensRemaining > 0, \"All tokens claimed\");\n783-expression_statement-143-143", type_label=expression_statement];
793 [label="143_ if_now.sub(startTime) >= MaximumHoldingPeriod\n793-if-144-153", type_label=if];
3239 [label="143_ end_if", type_label=end_if];
803 [label="144_ tokensToClaim = tokensRemaining;\n803-expression_statement-145-145", type_label=expression_statement];
807 [label="145_ delete holdings[beneficiary];\n807-expression_statement-146-146", type_label=expression_statement];
813 [label="147_ uint256 permill = calculatePermillToRelease(startTime);\n813-new_variable-148-148", type_label=new_variable];
822 [label="148_ uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(1000 - permill)).div(1000);\n822-new_variable-149-149", type_label=new_variable];
845 [label="149_ tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\n845-expression_statement-150-150", type_label=expression_statement];
854 [label="150_ tokensRemaining = tokensNotToClaim;\n854-expression_statement-151-151", type_label=expression_statement];
858 [label="151_ holdings[beneficiary].tokensRemaining = tokensRemaining;\n858-expression_statement-152-152", type_label=expression_statement];
866 [label="154_ calculatePermillToRelease\n866-function_definition-155-158", type_label=function_definition];
880 [label="155_ uint periodsPassed = ((now.sub(_startTime)).div(Interval)).add(1);\n880-new_variable-156-156", type_label=new_variable];
903 [label="156_ permill = periodsPassed.mul(125);\n903-expression_statement-157-157", type_label=expression_statement];
912 [label="158_ initializeVesting\n912-function_definition-159-185", type_label=function_definition];
927 [label="164_ onlyOwner\n927-expression_statement-165-165", type_label=expression_statement];
930 [label="166_ totalEcosystemTokensCommitted = totalEcosystemTokensCommitted.add(_tokens);\n930-expression_statement-167-167", type_label=expression_statement];
939 [label="167_ require(totalEcosystemTokensCommitted <= EcosystemCap);\n939-expression_statement-168-168", type_label=expression_statement];
946 [label="168_ if_holdings[_beneficiary].tokensCommitted != 0\n946-if-169-184", type_label=if];
3392 [label="168_ end_if", type_label=end_if];
955 [label="169_ holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\n955-expression_statement-170-170", type_label=expression_statement];
972 [label="170_ holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\n972-expression_statement-171-171", type_label=expression_statement];
1006 [label="177_ holdings[_beneficiary] = Holding(\n                _tokens,\n                _tokens,\n                _startTime\n            );\n1006-expression_statement-178-182", type_label=expression_statement];
1044 [label="189_ mapping (address => Holding) public holdings;\n1044-new_variable-190-190", type_label=new_variable];
1052 [label="190_ uint256 constant public MinimumHoldingPeriod = 90 days;\n1052-new_variable-191-191", type_label=new_variable];
1059 [label="191_ uint256 constant public Interval = 30 days;\n1059-new_variable-192-192", type_label=new_variable];
1066 [label="192_ uint256 constant public MaximumHoldingPeriod = 180 days;\n1066-new_variable-193-193", type_label=new_variable];
1073 [label="193_ uint256 constant public SeedCap = 28000000 ether;\n1073-new_variable-194-194", type_label=new_variable];
1080 [label="194_ uint256 constant public PrivateCap = 9000000 ether;\n1080-new_variable-195-195", type_label=new_variable];
1087 [label="195_ uint256 constant public AdvisorCap = 7400000 ether;\n1087-new_variable-196-196", type_label=new_variable];
1094 [label="196_ uint256 public totalSeedTokensCommitted;\n1094-new_variable-197-197", type_label=new_variable];
1099 [label="197_ uint256 public totalPrivateTokensCommitted;\n1099-new_variable-198-198", type_label=new_variable];
1104 [label="198_ uint256 public totalAdvisorTokensCommitted;\n1104-new_variable-199-199", type_label=new_variable];
1109 [label="199_ struct Holding {\n        uint256 tokensCommitted;\n        uint256 tokensRemaining;\n        uint256 startTime;\n        User user;\n    }\n1109-expression_statement-200-205", type_label=expression_statement];
1166 [label="207_ claimTokens\n1166-function_definition-208-227", type_label=function_definition];
1173 [label="209_ onlyOwner\n1173-expression_statement-210-210", type_label=expression_statement];
1181 [label="212_ uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\n1181-new_variable-213-213", type_label=new_variable];
1191 [label="213_ uint256 startTime = holdings[beneficiary].startTime;\n1191-new_variable-214-214", type_label=new_variable];
1201 [label="214_ require(tokensRemaining > 0, \"All tokens claimed\");\n1201-expression_statement-215-215", type_label=expression_statement];
1211 [label="215_ require(now.sub(startTime) > MinimumHoldingPeriod, \"Claiming period not started yet\");\n1211-expression_statement-216-216", type_label=expression_statement];
1226 [label="216_ if_now.sub(startTime) >= MaximumHoldingPeriod\n1226-if-217-226", type_label=if];
3672 [label="216_ end_if", type_label=end_if];
1236 [label="217_ tokensToClaim = tokensRemaining;\n1236-expression_statement-218-218", type_label=expression_statement];
1240 [label="218_ delete holdings[beneficiary];\n1240-expression_statement-219-219", type_label=expression_statement];
1246 [label="220_ uint256 percentage = calculatePercentageToRelease(startTime);\n1246-new_variable-221-221", type_label=new_variable];
1255 [label="221_ uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(100 - percentage)).div(100);\n1255-new_variable-222-222", type_label=new_variable];
1278 [label="222_ tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\n1278-expression_statement-223-223", type_label=expression_statement];
1287 [label="223_ tokensRemaining = tokensNotToClaim;\n1287-expression_statement-224-224", type_label=expression_statement];
1291 [label="224_ holdings[beneficiary].tokensRemaining = tokensRemaining;\n1291-expression_statement-225-225", type_label=expression_statement];
1299 [label="227_ calculatePercentageToRelease\n1299-function_definition-228-231", type_label=function_definition];
1313 [label="228_ uint periodsPassed = ((now.sub(_startTime.add(MinimumHoldingPeriod))).div(Interval)).add(1);\n1313-new_variable-229-229", type_label=new_variable];
1341 [label="229_ percentage = periodsPassed.mul(25);\n1341-expression_statement-230-230", type_label=expression_statement];
1350 [label="231_ initializeVesting\n1350-function_definition-232-275", type_label=function_definition];
1369 [label="238_ onlyOwner\n1369-expression_statement-239-239", type_label=expression_statement];
1372 [label="240_ User _user;\n1372-new_variable-241-241", type_label=new_variable];
1378 [label="241_ if_user == uint8(User.Seed)\n1378-if-242-256", type_label=if];
3824 [label="241_ end_if", type_label=end_if];
1387 [label="242_ _user = User.Seed;\n1387-expression_statement-243-243", type_label=expression_statement];
1393 [label="243_ totalSeedTokensCommitted = totalSeedTokensCommitted.add(_tokens);\n1393-expression_statement-244-244", type_label=expression_statement];
1402 [label="244_ require(totalSeedTokensCommitted <= SeedCap);\n1402-expression_statement-245-245", type_label=expression_statement];
1409 [label="245_ if_user == uint8(User.Private)\n1409-if-246-256", type_label=if];
1418 [label="246_ _user = User.Private;\n1418-expression_statement-247-247", type_label=expression_statement];
1424 [label="247_ totalPrivateTokensCommitted = totalPrivateTokensCommitted.add(_tokens);\n1424-expression_statement-248-248", type_label=expression_statement];
1433 [label="248_ require(totalPrivateTokensCommitted <= PrivateCap);\n1433-expression_statement-249-249", type_label=expression_statement];
1440 [label="249_ if_user == uint8(User.Advisor)\n1440-if-250-256", type_label=if];
1449 [label="250_ _user = User.Advisor;\n1449-expression_statement-251-251", type_label=expression_statement];
1455 [label="251_ totalAdvisorTokensCommitted = totalAdvisorTokensCommitted.add(_tokens);\n1455-expression_statement-252-252", type_label=expression_statement];
1464 [label="252_ require(totalAdvisorTokensCommitted <= AdvisorCap);\n1464-expression_statement-253-253", type_label=expression_statement];
1476 [label="256_ if_holdings[_beneficiary].tokensCommitted != 0\n1476-if-257-274", type_label=if];
3922 [label="256_ end_if", type_label=end_if];
1485 [label="257_ holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\n1485-expression_statement-258-258", type_label=expression_statement];
1502 [label="258_ holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\n1502-expression_statement-259-259", type_label=expression_statement];
1542 [label="266_ holdings[_beneficiary] = Holding(\n                _tokens,\n                _tokens,\n                _startTime,\n                _user\n            );\n1542-expression_statement-267-272", type_label=expression_statement];
1578 [label="278_ mapping (address => Holding) public holdings;\n1578-new_variable-279-279", type_label=new_variable];
1586 [label="279_ uint256 constant public MinimumHoldingPeriod = 180 days;\n1586-new_variable-280-280", type_label=new_variable];
1593 [label="280_ uint256 constant public Interval = 180 days;\n1593-new_variable-281-281", type_label=new_variable];
1600 [label="281_ uint256 constant public MaximumHoldingPeriod = 720 days;\n1600-new_variable-282-282", type_label=new_variable];
1607 [label="282_ uint256 constant public TeamCap = 12200000 ether;\n1607-new_variable-283-283", type_label=new_variable];
1614 [label="283_ uint256 public totalTeamTokensCommitted;\n1614-new_variable-284-284", type_label=new_variable];
1619 [label="284_ struct Holding {\n        uint256 tokensCommitted;\n        uint256 tokensRemaining;\n        uint256 startTime;\n    }\n1619-expression_statement-285-289", type_label=expression_statement];
1661 [label="291_ claimTokens\n1661-function_definition-292-311", type_label=function_definition];
1668 [label="293_ onlyOwner\n1668-expression_statement-294-294", type_label=expression_statement];
1676 [label="296_ uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\n1676-new_variable-297-297", type_label=new_variable];
1686 [label="297_ uint256 startTime = holdings[beneficiary].startTime;\n1686-new_variable-298-298", type_label=new_variable];
1696 [label="298_ require(tokensRemaining > 0, \"All tokens claimed\");\n1696-expression_statement-299-299", type_label=expression_statement];
1706 [label="299_ require(now.sub(startTime) > MinimumHoldingPeriod, \"Claiming period not started yet\");\n1706-expression_statement-300-300", type_label=expression_statement];
1721 [label="300_ if_now.sub(startTime) >= MaximumHoldingPeriod\n1721-if-301-310", type_label=if];
4167 [label="300_ end_if", type_label=end_if];
1731 [label="301_ tokensToClaim = tokensRemaining;\n1731-expression_statement-302-302", type_label=expression_statement];
1735 [label="302_ delete holdings[beneficiary];\n1735-expression_statement-303-303", type_label=expression_statement];
1741 [label="304_ uint256 percentage = calculatePercentageToRelease(startTime);\n1741-new_variable-305-305", type_label=new_variable];
1750 [label="305_ uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(100 - percentage)).div(100);\n1750-new_variable-306-306", type_label=new_variable];
1773 [label="306_ tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\n1773-expression_statement-307-307", type_label=expression_statement];
1782 [label="307_ tokensRemaining = tokensNotToClaim;\n1782-expression_statement-308-308", type_label=expression_statement];
1786 [label="308_ holdings[beneficiary].tokensRemaining = tokensRemaining;\n1786-expression_statement-309-309", type_label=expression_statement];
1794 [label="311_ calculatePercentageToRelease\n1794-function_definition-312-315", type_label=function_definition];
1808 [label="312_ uint periodsPassed = ((now.sub(_startTime)).div(Interval));\n1808-new_variable-313-313", type_label=new_variable];
1826 [label="313_ percentage = periodsPassed.mul(25);\n1826-expression_statement-314-314", type_label=expression_statement];
1835 [label="315_ initializeVesting\n1835-function_definition-316-342", type_label=function_definition];
1850 [label="321_ onlyOwner\n1850-expression_statement-322-322", type_label=expression_statement];
1853 [label="323_ totalTeamTokensCommitted = totalTeamTokensCommitted.add(_tokens);\n1853-expression_statement-324-324", type_label=expression_statement];
1862 [label="324_ require(totalTeamTokensCommitted <= TeamCap);\n1862-expression_statement-325-325", type_label=expression_statement];
1869 [label="325_ if_holdings[_beneficiary].tokensCommitted != 0\n1869-if-326-341", type_label=if];
4315 [label="325_ end_if", type_label=end_if];
1878 [label="326_ holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\n1878-expression_statement-327-327", type_label=expression_statement];
1895 [label="327_ holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\n1895-expression_statement-328-328", type_label=expression_statement];
1929 [label="334_ holdings[_beneficiary] = Holding(\n                _tokens,\n                _tokens,\n                _startTime\n            );\n1929-expression_statement-335-339", type_label=expression_statement];
1953 [label="344_ totalSupply\n1953-function_definition-345-345", type_label=function_definition];
1961 [label="345_ balanceOf\n1961-function_definition-346-346", type_label=function_definition];
1974 [label="346_ transfer\n1974-function_definition-347-347", type_label=function_definition];
2023 [label="352_ TokenInterface public token;\n2023-new_variable-353-353", type_label=new_variable];
2029 [label="353_ CommunityVesting public communityVesting;\n2029-new_variable-354-354", type_label=new_variable];
2035 [label="354_ TeamVesting public teamVesting;\n2035-new_variable-355-355", type_label=new_variable];
2041 [label="355_ EcosystemVesting public ecosystemVesting;\n2041-new_variable-356-356", type_label=new_variable];
2047 [label="356_ SeedPrivateAdvisorVesting public seedPrivateAdvisorVesting;\n2047-new_variable-357-357", type_label=new_variable];
2053 [label="357_ mapping (address => VestingUser) public userCategory;\n2053-new_variable-358-358", type_label=new_variable];
2061 [label="358_ uint256 public totalAllocated;\n2061-new_variable-359-359", type_label=new_variable];
2087 [label="361_ token = TokenInterface(_token);\n2087-expression_statement-362-362", type_label=expression_statement];
2094 [label="362_ communityVesting = new CommunityVesting();\n2094-expression_statement-363-363", type_label=expression_statement];
2102 [label="363_ teamVesting = new TeamVesting();\n2102-expression_statement-364-364", type_label=expression_statement];
2110 [label="364_ ecosystemVesting = new EcosystemVesting();\n2110-expression_statement-365-365", type_label=expression_statement];
2118 [label="365_ seedPrivateAdvisorVesting = new SeedPrivateAdvisorVesting();\n2118-expression_statement-366-366", type_label=expression_statement];
2126 [label="367_ claimTokens\n2126-function_definition-368-385", type_label=function_definition];
2130 [label="368_ uint8 category = uint8(userCategory[msg.sender]);\n2130-new_variable-369-369", type_label=new_variable];
2142 [label="369_ uint256 tokensToClaim;\n2142-new_variable-370-370", type_label=new_variable];
2147 [label="370_ if_category == 1 || category == 2 || category == 3\n2147-if-371-381", type_label=if];
4593 [label="370_ end_if", type_label=end_if];
2160 [label="371_ tokensToClaim = seedPrivateAdvisorVesting.claimTokens(msg.sender);\n2160-expression_statement-372-372", type_label=expression_statement];
2171 [label="372_ if_category == 4\n2171-if-373-381", type_label=if];
2176 [label="373_ tokensToClaim = teamVesting.claimTokens(msg.sender);\n2176-expression_statement-374-374", type_label=expression_statement];
2187 [label="374_ if_category == 5\n2187-if-375-381", type_label=if];
2192 [label="375_ tokensToClaim = communityVesting.claimTokens(msg.sender);\n2192-expression_statement-376-376", type_label=expression_statement];
2203 [label="376_ if_category == 6\n2203-if-377-381", type_label=if];
2208 [label="377_ tokensToClaim = ecosystemVesting.claimTokens(msg.sender);\n2208-expression_statement-378-378", type_label=expression_statement];
2224 [label="381_ totalAllocated = totalAllocated.sub(tokensToClaim);\n2224-expression_statement-382-382", type_label=expression_statement];
2233 [label="382_ require(token.transfer(msg.sender, tokensToClaim), \"Insufficient balance in vesting contract\");\n2233-expression_statement-383-383", type_label=expression_statement];
2264 [label="385_ initializeVesting\n2264-function_definition-386-411", type_label=function_definition];
2284 [label="392_ onlyOwner\n2284-expression_statement-393-393", type_label=expression_statement];
2287 [label="394_ uint8 category = uint8(user);\n2287-new_variable-395-395", type_label=new_variable];
2295 [label="395_ require(category != 0, \"Not eligible for vesting\");\n2295-expression_statement-396-396", type_label=expression_statement];
2305 [label="396_ require( uint8(userCategory[_beneficiary]) == 0 || userCategory[_beneficiary] == user, \"cannot change user category\" );\n2305-expression_statement-397-397", type_label=expression_statement];
2325 [label="397_ userCategory[_beneficiary] = user;\n2325-expression_statement-398-398", type_label=expression_statement];
2331 [label="398_ totalAllocated = totalAllocated.add(_tokens);\n2331-expression_statement-399-399", type_label=expression_statement];
2340 [label="399_ if_category == 1 || category == 2 || category == 3\n2340-if-400-410", type_label=if];
4786 [label="399_ end_if", type_label=end_if];
2353 [label="400_ seedPrivateAdvisorVesting.initializeVesting(_beneficiary, _tokens, _startTime, category);\n2353-expression_statement-401-401", type_label=expression_statement];
2366 [label="401_ if_category == 4\n2366-if-402-410", type_label=if];
2371 [label="402_ teamVesting.initializeVesting(_beneficiary, _tokens, _startTime);\n2371-expression_statement-403-403", type_label=expression_statement];
2382 [label="403_ if_category == 5\n2382-if-404-410", type_label=if];
2387 [label="404_ communityVesting.initializeVesting(_beneficiary, _tokens, _startTime);\n2387-expression_statement-405-405", type_label=expression_statement];
2398 [label="405_ if_category == 6\n2398-if-406-410", type_label=if];
2403 [label="406_ ecosystemVesting.initializeVesting(_beneficiary, _tokens, _startTime);\n2403-expression_statement-407-407", type_label=expression_statement];
2419 [label="411_ claimUnallocated\n2419-function_definition-412-415", type_label=function_definition];
2426 [label="411_ onlyOwner\n2426-expression_statement-412-412", type_label=expression_statement];
2429 [label="412_ uint256 allTokens = token.balanceOf(address(this));\n2429-new_variable-413-413", type_label=new_variable];
2442 [label="413_ token.transfer(_sendTo, allTokens);\n2442-expression_statement-414-414", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
653;
1019;
1472;
1557;
1942;
2220;
2415;
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
58 -> 64  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
66 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
81 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
101 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
116 -> 124  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 168  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
163 -> 2609  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2609 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
168 -> 2609  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
168 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
170 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
187 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
189 -> 206  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 214  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
214 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
216 -> 233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
233 -> 240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
240 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
244 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
276 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
289 -> 297  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
297 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 311  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
311 -> 318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
325 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
372 -> 387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
397 -> 407  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 432  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
432 -> 442  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
432 -> 452  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2878 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
442 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 2878  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
452 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
461 -> 484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
484 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 2878  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
505 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 573  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
573 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 589  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
580 -> 640  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
589 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
672 -> 680  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
680 -> 687  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
687 -> 694  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
694 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 763  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 783  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
783 -> 793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
793 -> 803  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
793 -> 813  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3239 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
803 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 3239  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
813 -> 822  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
822 -> 845  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
845 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 858  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
858 -> 3239  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
866 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
880 -> 903  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
912 -> 930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
930 -> 939  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
939 -> 946  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
946 -> 955  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
946 -> 1006  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
955 -> 972  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1052  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 1059  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1059 -> 1066  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1066 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1073 -> 1080  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1080 -> 1087  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 1094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1094 -> 1099  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1099 -> 1104  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1104 -> 1109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 1191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1191 -> 1201  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1201 -> 1211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1211 -> 1226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1226 -> 1236  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1226 -> 1246  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3672 -> 1299  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1236 -> 1240  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1240 -> 3672  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1246 -> 1255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1255 -> 1278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1278 -> 1287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1287 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1291 -> 3672  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1299 -> 1313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1313 -> 1341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1350 -> 1372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1372 -> 1378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1378 -> 1387  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1378 -> 1409  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3824 -> 1476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1387 -> 1393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1393 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1402 -> 3824  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1409 -> 1418  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1409 -> 1440  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1418 -> 1424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1424 -> 1433  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1433 -> 3824  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1440 -> 1449  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1449 -> 1455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1455 -> 1464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1464 -> 3824  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1476 -> 1485  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1476 -> 1542  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1485 -> 1502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1578 -> 1586  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1586 -> 1593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1593 -> 1600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1600 -> 1607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1607 -> 1614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1614 -> 1619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1661 -> 1676  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1676 -> 1686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1686 -> 1696  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1696 -> 1706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1706 -> 1721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1721 -> 1731  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1721 -> 1741  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4167 -> 1794  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1731 -> 1735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1735 -> 4167  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1741 -> 1750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1750 -> 1773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1773 -> 1782  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1782 -> 1786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1786 -> 4167  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1794 -> 1808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1808 -> 1826  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1835 -> 1853  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1853 -> 1862  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1862 -> 1869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1869 -> 1878  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1869 -> 1929  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1878 -> 1895  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2023 -> 2029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2029 -> 2035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2035 -> 2041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2041 -> 2047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2047 -> 2053  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2053 -> 2061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2087 -> 2094  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2094 -> 2102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2102 -> 2110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2110 -> 2118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2126 -> 2130  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2130 -> 2142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2142 -> 2147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2147 -> 2160  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2147 -> 2171  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4593 -> 2224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2160 -> 4593  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2171 -> 2176  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2171 -> 2187  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2176 -> 4593  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2187 -> 2192  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2187 -> 2203  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2192 -> 4593  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2203 -> 2208  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2208 -> 4593  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2224 -> 2233  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2264 -> 2287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2287 -> 2295  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2295 -> 2305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2305 -> 2325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2325 -> 2331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2331 -> 2340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2340 -> 2353  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2340 -> 2366  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
4786 -> 2419  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2353 -> 4786  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2366 -> 2371  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2366 -> 2382  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2371 -> 4786  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2382 -> 2387  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2382 -> 2398  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2387 -> 4786  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2398 -> 2403  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2403 -> 4786  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2419 -> 2429  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
2429 -> 2442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 3026  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1019 -> 3392  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1472 -> 3824  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1557 -> 3922  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1942 -> 4315  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2220 -> 4593  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
2415 -> 4786  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
