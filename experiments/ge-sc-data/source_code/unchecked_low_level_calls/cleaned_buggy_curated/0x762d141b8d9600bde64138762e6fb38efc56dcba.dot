digraph  {
16 [label="3_ transfer\n16-function_definition-4-4", type_label=function_definition];
31 [label="4_ approve\n31-function_definition-5-5", type_label=function_definition];
46 [label="5_ transferFrom\n46-function_definition-6-6", type_label=function_definition];
65 [label="6_ totalSupply\n65-function_definition-7-7", type_label=function_definition];
73 [label="7_ balanceOf\n73-function_definition-8-8", type_label=function_definition];
85 [label="8_ allowance\n85-function_definition-9-9", type_label=function_definition];
132 [label="13_ mul\n132-function_definition-14-21", type_label=function_definition];
149 [label="14_ if_a == 0\n149-if-15-17", type_label=if];
847 [label="14_ end_if", type_label=end_if];
154 [label="15_ return 0;\n154-return-16-16", type_label=return];
156 [label="17_ uint256 c = a * b;\n156-new_variable-18-18", type_label=new_variable];
164 [label="18_ require(c / a == b, \"SafeMath::mul: Integer overflow\");\n164-expression_statement-19-19", type_label=expression_statement];
176 [label="19_ return c;\n176-return-20-20", type_label=return];
178 [label="21_ div\n178-function_definition-22-26", type_label=function_definition];
195 [label="22_ require(b > 0, \"SafeMath::div: Invalid divisor zero\");\n195-expression_statement-23-23", type_label=expression_statement];
205 [label="23_ uint256 c = a / b;\n205-new_variable-24-24", type_label=new_variable];
213 [label="24_ return c;\n213-return-25-25", type_label=return];
215 [label="26_ sub\n215-function_definition-27-31", type_label=function_definition];
232 [label="27_ require(b <= a, \"SafeMath::sub: Integer underflow\");\n232-expression_statement-28-28", type_label=expression_statement];
242 [label="28_ uint256 c = a - b;\n242-new_variable-29-29", type_label=new_variable];
250 [label="29_ return c;\n250-return-30-30", type_label=return];
252 [label="31_ add\n252-function_definition-32-36", type_label=function_definition];
269 [label="32_ uint256 c = a + b;\n269-new_variable-33-33", type_label=new_variable];
277 [label="33_ require(c >= a, \"SafeMath::add: Integer overflow\");\n277-expression_statement-34-34", type_label=expression_statement];
287 [label="34_ return c;\n287-return-35-35", type_label=return];
289 [label="36_ mod\n289-function_definition-37-40", type_label=function_definition];
306 [label="37_ require(b != 0, \"SafeMath::mod: Invalid divisor zero\");\n306-expression_statement-38-38", type_label=expression_statement];
316 [label="38_ return a % b;\n316-return-39-39", type_label=return];
323 [label="42_ mint\n323-function_definition-43-43", type_label=function_definition];
334 [label="43_ totalSupply\n334-function_definition-44-44", type_label=function_definition];
345 [label="46_ mapping (address => bool) public humans;\n345-new_variable-47-47", type_label=new_variable];
352 [label="47_ IHumanity public humanity;\n352-new_variable-48-48", type_label=new_variable];
358 [label="48_ address public governance;\n358-new_variable-49-49", type_label=new_variable];
374 [label="50_ humanity = _humanity;\n374-expression_statement-51-51", type_label=expression_statement];
378 [label="51_ governance = _governance;\n378-expression_statement-52-52", type_label=expression_statement];
382 [label="53_ add\n382-function_definition-54-59", type_label=function_definition];
390 [label="54_ require(msg.sender == governance, \"HumanityRegistry::add: Only governance can add an identity\");\n390-expression_statement-55-55", type_label=expression_statement];
402 [label="55_ require(humans[who] == false, \"HumanityRegistry::add: Address is already on the registry\");\n402-expression_statement-56-56", type_label=expression_statement];
415 [label="56_ _reward(who);\n415-expression_statement-57-57", type_label=expression_statement];
420 [label="57_ humans[who] = true;\n420-expression_statement-58-58", type_label=expression_statement];
427 [label="59_ remove\n427-function_definition-60-66", type_label=function_definition];
435 [label="60_ require(\n            msg.sender == governance || msg.sender == who,\n            \"HumanityRegistry::remove: Only governance or the identity owner can remove an identity\"\n        );\n435-expression_statement-61-64", type_label=expression_statement];
453 [label="64_ delete humans[who];\n453-expression_statement-65-65", type_label=expression_statement];
458 [label="66_ isHuman\n458-function_definition-67-69", type_label=function_definition];
471 [label="67_ return humans[who];\n471-return-68-68", type_label=return];
475 [label="69_ _reward\n475-function_definition-70-79", type_label=function_definition];
483 [label="70_ uint totalSupply = humanity.totalSupply();\n483-new_variable-71-71", type_label=new_variable];
492 [label="71_ if_totalSupply < 28000000e18\n492-if-72-78", type_label=if];
1190 [label="71_ end_if", type_label=end_if];
497 [label="72_ humanity.mint(who, 30000e18);\n497-expression_statement-73-73", type_label=expression_statement];
506 [label="73_ if_totalSupply < 46000000e18\n506-if-74-78", type_label=if];
511 [label="74_ humanity.mint(who, 20000e18);\n511-expression_statement-75-75", type_label=expression_statement];
520 [label="75_ if_totalSupply < 100000000e18\n520-if-76-78", type_label=if];
525 [label="76_ humanity.mint(who, 6000e18);\n525-expression_statement-77-77", type_label=expression_statement];
542 [label="82_ HumanityRegistry public registry;\n542-new_variable-83-83", type_label=new_variable];
548 [label="83_ IERC20 public dai;\n548-new_variable-84-84", type_label=new_variable];
554 [label="84_ uint public constant MONTHLY_INCOME = 1e18;\n554-new_variable-85-85", type_label=new_variable];
560 [label="85_ uint public constant INCOME_PER_SECOND = MONTHLY_INCOME / 30 days;\n560-new_variable-86-86", type_label=new_variable];
569 [label="86_ mapping (address => uint) public claimTimes;\n569-new_variable-87-87", type_label=new_variable];
588 [label="88_ registry = _registry;\n588-expression_statement-89-89", type_label=expression_statement];
592 [label="89_ dai = _dai;\n592-expression_statement-90-90", type_label=expression_statement];
596 [label="91_ claim\n596-function_definition-92-105", type_label=function_definition];
600 [label="92_ require(registry.isHuman(msg.sender), \"UniversalBasicIncome::claim: You must be on the Humanity registry to claim income\");\n600-expression_statement-93-93", type_label=expression_statement];
615 [label="93_ uint income;\n615-new_variable-94-94", type_label=new_variable];
620 [label="94_ uint time = block.timestamp;\n620-new_variable-95-95", type_label=new_variable];
628 [label="95_ if_claimTimes[msg.sender] == 0\n628-if-96-100", type_label=if];
1326 [label="95_ end_if", type_label=end_if];
637 [label="96_ income = MONTHLY_INCOME;\n637-expression_statement-97-97", type_label=expression_statement];
642 [label="98_ income = time.sub(claimTimes[msg.sender]).mul(INCOME_PER_SECOND);\n642-expression_statement-99-99", type_label=expression_statement];
660 [label="100_ uint balance = dai.balanceOf(address(this));\n660-new_variable-101-101", type_label=new_variable];
673 [label="101_ uint actualIncome = balance < income ? balance : income;\n673-new_variable-102-102", type_label=new_variable];
684 [label="102_ dai.transfer(msg.sender, actualIncome);\n684-expression_statement-103-103", type_label=expression_statement];
695 [label="103_ claimTimes[msg.sender] = time;\n695-expression_statement-104-104", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
534;
132 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 154  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
149 -> 847  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
847 -> 156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
154 -> 847  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
154 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
156 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 176  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
176 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
178 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
215 -> 232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
232 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 250  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
250 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
252 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
289 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
345 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
352 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
390 -> 402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
402 -> 415  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
415 -> 420  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
458 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
475 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 492  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
492 -> 497  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
492 -> 506  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1190 -> 534  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 1190  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
506 -> 511  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
506 -> 520  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
511 -> 1190  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
520 -> 525  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
520 -> 1190  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
525 -> 1190  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
542 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
548 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
554 -> 560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
620 -> 628  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
628 -> 637  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
628 -> 642  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1326 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
637 -> 1326  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
642 -> 1326  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
660 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
673 -> 684  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
684 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
