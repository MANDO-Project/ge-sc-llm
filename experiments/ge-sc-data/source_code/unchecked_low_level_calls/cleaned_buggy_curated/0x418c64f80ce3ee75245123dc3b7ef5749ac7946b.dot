digraph  {
12 [label="2_ mul\n12-function_definition-3-10", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", type_label=if];
902 [label="3_ end_if", type_label=end_if];
34 [label="4_ return 0;\n34-return-5-5", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", type_label=new_variable];
44 [label="7_ assert(c / a == b);\n44-expression_statement-8-8", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", type_label=return];
55 [label="10_ div\n55-function_definition-11-14", type_label=function_definition];
72 [label="11_ uint256 c = a / b;\n72-new_variable-12-12", type_label=new_variable];
80 [label="12_ return c;\n80-return-13-13", type_label=return];
82 [label="14_ sub\n82-function_definition-15-18", type_label=function_definition];
99 [label="15_ assert(b <= a);\n99-expression_statement-16-16", type_label=expression_statement];
106 [label="16_ return a - b;\n106-return-17-17", type_label=return];
110 [label="18_ add\n110-function_definition-19-23", type_label=function_definition];
127 [label="19_ uint256 c = a + b;\n127-new_variable-20-20", type_label=new_variable];
135 [label="20_ assert(c >= a);\n135-expression_statement-21-21", type_label=expression_statement];
142 [label="21_ return c;\n142-return-22-22", type_label=return];
147 [label="25_ address public owner;\n147-new_variable-26-26", type_label=new_variable];
164 [label="28_ owner = msg.sender;\n164-expression_statement-29-29", type_label=expression_statement];
170 [label="30_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n170-expression_statement-31-34", type_label=expression_statement];
173 [label="31_ require(msg.sender == owner);\n173-expression_statement-32-32", type_label=expression_statement];
182 [label="32_ _;\n182-expression_statement-33-33", type_label=expression_statement];
184 [label="34_ transferOwnership\n184-function_definition-35-39", type_label=function_definition];
191 [label="34_ onlyOwner\n191-expression_statement-35-35", type_label=expression_statement];
194 [label="35_ require(newOwner != address(0));\n194-expression_statement-36-36", type_label=expression_statement];
209 [label="37_ owner = newOwner;\n209-expression_statement-38-38", type_label=expression_statement];
216 [label="41_ transfer\n216-function_definition-42-42", type_label=function_definition];
242 [label="45_ mapping (address => uint256) public balances;\n242-new_variable-46-46", type_label=new_variable];
249 [label="46_ mapping (address => mapping (address => uint256)) internal allowed;\n249-new_variable-47-47", type_label=new_variable];
258 [label="47_ string public constant standard = \"SpaceImpulse ERC20\";\n258-new_variable-48-48", type_label=new_variable];
265 [label="48_ uint256 public constant decimals = 18;\n265-new_variable-49-49", type_label=new_variable];
271 [label="49_ string public name = \"Plasma\";\n271-new_variable-50-50", type_label=new_variable];
278 [label="50_ string public symbol = \"SPI\";\n278-new_variable-51-51", type_label=new_variable];
285 [label="51_ uint256 public totalSupply;\n285-new_variable-52-52", type_label=new_variable];
318 [label="54_ balanceOf\n318-function_definition-55-57", type_label=function_definition];
331 [label="55_ return balances[_owner];\n331-return-56-56", type_label=return];
335 [label="57_ transfer\n335-function_definition-58-65", type_label=function_definition];
351 [label="58_ require(_to != address(0));\n351-expression_statement-59-59", type_label=expression_statement];
360 [label="59_ require(_value <= balances[msg.sender]);\n360-expression_statement-60-60", type_label=expression_statement];
371 [label="60_ balances[msg.sender] = balances[msg.sender].sub(_value);\n371-expression_statement-61-61", type_label=expression_statement];
388 [label="61_ balances[_to] = balances[_to].add(_value);\n388-expression_statement-62-62", type_label=expression_statement];
411 [label="63_ return true;\n411-return-64-64", type_label=return];
414 [label="65_ transferFrom\n414-function_definition-66-75", type_label=function_definition];
434 [label="66_ require(_to != address(0));\n434-expression_statement-67-67", type_label=expression_statement];
443 [label="67_ require(_value <= balances[_from]);\n443-expression_statement-68-68", type_label=expression_statement];
452 [label="68_ require(_value <= allowed[_from][msg.sender]);\n452-expression_statement-69-69", type_label=expression_statement];
465 [label="69_ balances[_from] = balances[_from].sub(_value);\n465-expression_statement-70-70", type_label=expression_statement];
478 [label="70_ allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n478-expression_statement-71-71", type_label=expression_statement];
499 [label="71_ balances[_to] = balances[_to].add(_value);\n499-expression_statement-72-72", type_label=expression_statement];
520 [label="73_ return true;\n520-return-74-74", type_label=return];
523 [label="75_ approve\n523-function_definition-76-80", type_label=function_definition];
539 [label="76_ allowed[msg.sender][_spender] = _value;\n539-expression_statement-77-77", type_label=expression_statement];
559 [label="78_ return true;\n559-return-79-79", type_label=return];
562 [label="80_ allowance\n562-function_definition-81-83", type_label=function_definition];
579 [label="81_ return allowed[_owner][_spender];\n579-return-82-82", type_label=return];
585 [label="83_ increaseApproval\n585-function_definition-84-88", type_label=function_definition];
601 [label="84_ allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n601-expression_statement-85-85", type_label=expression_statement];
638 [label="86_ return true;\n638-return-87-87", type_label=return];
641 [label="88_ decreaseApproval\n641-function_definition-89-98", type_label=function_definition];
657 [label="89_ uint oldValue = allowed[msg.sender][_spender];\n657-new_variable-90-90", type_label=new_variable];
669 [label="90_ if__subtractedValue > oldValue\n669-if-91-95", type_label=if];
1542 [label="90_ end_if", type_label=end_if];
674 [label="91_ allowed[msg.sender][_spender] = 0;\n674-expression_statement-92-92", type_label=expression_statement];
685 [label="93_ allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n685-expression_statement-94-94", type_label=expression_statement];
716 [label="96_ return true;\n716-return-97-97", type_label=return];
719 [label="98_ approveAndCall\n719-function_definition-99-105", type_label=function_definition];
740 [label="99_ tokenRecipient spender = tokenRecipient(_spender);\n740-new_variable-100-100", type_label=new_variable];
750 [label="100_ if\n750-if-101-104", type_label=if];
1623 [label="100_ end_if", type_label=end_if];
758 [label="101_ spender.receiveApproval(msg.sender, _value, this, _extraData);\n758-expression_statement-102-102", type_label=expression_statement];
773 [label="102_ return true;\n773-return-103-103", type_label=return];
779 [label="107_ receiveApproval\n779-function_definition-108-108", type_label=function_definition];
804 [label="110_ address public A;\n804-new_variable-111-111", type_label=new_variable];
811 [label="113_ A = 0x69587ed6f526f8B3FD9eB01d4F1FCC86f0394c8f;\n811-expression_statement-114-114", type_label=expression_statement];
815 [label="114_ balances[A] = balances[A].add(246000000*(uint256(10)**decimals));\n815-expression_statement-115-115", type_label=expression_statement];
835 [label="115_ totalSupply = balances[A];\n835-expression_statement-116-116", type_label=expression_statement];
841 [label="117_ sweep\n841-function_definition-118-123", type_label=function_definition];
852 [label="117_ onlyOwner\n852-expression_statement-118-118", type_label=expression_statement];
855 [label="118_ TokenCHK token = TokenCHK(_token);\n855-new_variable-119-119", type_label=new_variable];
865 [label="119_ if\n865-if-120-122", type_label=if];
1738 [label="119_ end_if", type_label=end_if];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
700;
776;
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 902  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
902 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 902  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
82 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
110 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 142  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
142 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
173 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 249  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
249 -> 258  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
258 -> 265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
265 -> 271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
271 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
331 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
335 -> 351  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
351 -> 360  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
360 -> 371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 388  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
411 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
414 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
452 -> 465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 478  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
478 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
520 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
523 -> 539  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
562 -> 579  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
585 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
638 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
641 -> 657  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
657 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 674  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
669 -> 685  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1542 -> 700  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
674 -> 1542  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
685 -> 1542  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
716 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
719 -> 740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
740 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 758  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
750 -> 1623  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1623 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
758 -> 773  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
773 -> 1623  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
773 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
811 -> 815  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 835  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 1738  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
}
