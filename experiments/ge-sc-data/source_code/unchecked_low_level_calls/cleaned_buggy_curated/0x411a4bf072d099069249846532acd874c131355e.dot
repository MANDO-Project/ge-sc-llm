digraph  {
40 [label="4_ transfer\n40-function_definition-5-5", type_label=function_definition];
55 [label="5_ approve\n55-function_definition-6-6", type_label=function_definition];
70 [label="6_ transferFrom\n70-function_definition-7-7", type_label=function_definition];
89 [label="7_ totalSupply\n89-function_definition-8-8", type_label=function_definition];
97 [label="8_ balanceOf\n97-function_definition-9-9", type_label=function_definition];
109 [label="9_ allowance\n109-function_definition-10-10", type_label=function_definition];
149 [label="13_ transfer\n149-function_definition-14-14", type_label=function_definition];
169 [label="14_ contractFallback\n169-function_definition-15-15", type_label=function_definition];
189 [label="15_ isContract\n189-function_definition-16-16", type_label=function_definition];
204 [label="18_ address private owner_;\n204-new_variable-19-19", type_label=new_variable];
227 [label="22_ owner_ = msg.sender;\n227-expression_statement-23-23", type_label=expression_statement];
233 [label="24_ owner\n233-function_definition-25-27", type_label=function_definition];
242 [label="25_ return owner_;\n242-return-26-26", type_label=return];
244 [label="27_ modifier onlyOwner() {\n        require(msg.sender == owner_, \"Only the owner can call this function.\");\n        _;\n    }\n244-expression_statement-28-31", type_label=expression_statement];
247 [label="28_ require(msg.sender == owner_, \"Only the owner can call this function.\");\n247-expression_statement-29-29", type_label=expression_statement];
259 [label="29_ _;\n259-expression_statement-30-30", type_label=expression_statement];
261 [label="31_ renounceOwnership\n261-function_definition-32-35", type_label=function_definition];
264 [label="31_ onlyOwner\n264-expression_statement-32-32", type_label=expression_statement];
271 [label="33_ owner_ = address(0);\n271-expression_statement-34-34", type_label=expression_statement];
277 [label="35_ transferOwnership\n277-function_definition-36-38", type_label=function_definition];
284 [label="35_ onlyOwner\n284-expression_statement-36-36", type_label=expression_statement];
287 [label="36_ _transferOwnership(_newOwner);\n287-expression_statement-37-37", type_label=expression_statement];
292 [label="38_ _transferOwnership\n292-function_definition-39-43", type_label=function_definition];
300 [label="39_ require(_newOwner != address(0), \"Cannot transfer ownership to zero address.\");\n300-expression_statement-40-40", type_label=expression_statement];
318 [label="41_ owner_ = _newOwner;\n318-expression_statement-42-42", type_label=expression_statement];
325 [label="45_ mul\n325-function_definition-46-53", type_label=function_definition];
343 [label="46_ if__a == 0\n343-if-47-49", type_label=if];
1877 [label="46_ end_if", type_label=end_if];
348 [label="47_ return 0;\n348-return-48-48", type_label=return];
350 [label="49_ c = _a * _b;\n350-expression_statement-50-50", type_label=expression_statement];
356 [label="50_ assert(c / _a == _b);\n356-expression_statement-51-51", type_label=expression_statement];
365 [label="51_ return c;\n365-return-52-52", type_label=return];
367 [label="53_ div\n367-function_definition-54-56", type_label=function_definition];
384 [label="54_ return _a / _b;\n384-return-55-55", type_label=return];
388 [label="56_ sub\n388-function_definition-57-60", type_label=function_definition];
405 [label="57_ assert(_b <= _a);\n405-expression_statement-58-58", type_label=expression_statement];
412 [label="58_ return _a - _b;\n412-return-59-59", type_label=return];
416 [label="60_ add\n416-function_definition-61-65", type_label=function_definition];
434 [label="61_ c = _a + _b;\n434-expression_statement-62-62", type_label=expression_statement];
440 [label="62_ assert(c >= _a);\n440-expression_statement-63-63", type_label=expression_statement];
447 [label="63_ return c;\n447-return-64-64", type_label=return];
452 [label="67_ uint public sentValue;\n452-new_variable-68-68", type_label=new_variable];
457 [label="68_ address public tokenAddr;\n457-new_variable-69-69", type_label=new_variable];
462 [label="69_ address public tokenSender;\n462-new_variable-70-70", type_label=new_variable];
467 [label="70_ bool public calledFoo;\n467-new_variable-71-71", type_label=new_variable];
472 [label="71_ bytes public tokenData;\n472-new_variable-72-72", type_label=new_variable];
477 [label="72_ bytes4 public tokenSig;\n477-new_variable-73-73", type_label=new_variable];
482 [label="73_ Tkn private tkn;\n482-new_variable-74-74", type_label=new_variable];
488 [label="74_ bool private __isTokenFallback;\n488-new_variable-75-75", type_label=new_variable];
493 [label="75_ struct Tkn {\n        address addr;\n        address sender;\n        uint256 value;\n        bytes data;\n        bytes4 sig;\n    }\n493-expression_statement-76-82", type_label=expression_statement];
515 [label="82_ modifier tokenPayable {\n        assert(__isTokenFallback);\n        _;\n    }\n515-expression_statement-83-86", type_label=expression_statement];
518 [label="83_ assert(__isTokenFallback);\n518-expression_statement-84-84", type_label=expression_statement];
523 [label="84_ _;\n523-expression_statement-85-85", type_label=expression_statement];
525 [label="86_ tokenFallback\n525-function_definition-87-93", type_label=function_definition];
546 [label="87_ tkn = Tkn(msg.sender, _sender, _value, _data, getSig(_data));\n546-expression_statement-88-88", type_label=expression_statement];
566 [label="88_ __isTokenFallback = true;\n566-expression_statement-89-89", type_label=expression_statement];
571 [label="89_ address(this).delegatecall(_data);\n571-expression_statement-90-90", type_label=expression_statement];
580 [label="90_ __isTokenFallback = false;\n580-expression_statement-91-91", type_label=expression_statement];
585 [label="91_ return true;\n585-return-92-92", type_label=return];
588 [label="93_ foo\n588-function_definition-94-97", type_label=function_definition];
591 [label="93_ tokenPayable\n591-expression_statement-94-94", type_label=expression_statement];
594 [label="94_ saveTokenValues();\n594-expression_statement-95-95", type_label=expression_statement];
597 [label="95_ calledFoo = true;\n597-expression_statement-96-96", type_label=expression_statement];
602 [label="97_ getSig\n602-function_definition-98-103", type_label=function_definition];
616 [label="98_ uint lngth = _data.length < 4 ? _data.length : 4;\n616-new_variable-99-99", type_label=new_variable];
631 [label="99_ for(i < lngth;;i++)\n631-for-100-102", type_label=for];
2165 [label="99_ end_for", type_label=end_for];
642 [label="99_ i++\n642-expression_statement-100-100", type_label=expression_statement];
645 [label="100_ sig = bytes4(uint(sig) + uint(_data[i]) * (2 ** (8 * (lngth - 1 - i))));\n645-expression_statement-101-101", type_label=expression_statement];
673 [label="103_ saveTokenValues\n673-function_definition-104-110", type_label=function_definition];
677 [label="104_ tokenAddr = tkn.addr;\n677-expression_statement-105-105", type_label=expression_statement];
683 [label="105_ tokenSender = tkn.sender;\n683-expression_statement-106-106", type_label=expression_statement];
689 [label="106_ sentValue = tkn.value;\n689-expression_statement-107-107", type_label=expression_statement];
695 [label="107_ tokenSig = tkn.sig;\n695-expression_statement-108-108", type_label=expression_statement];
701 [label="108_ tokenData = tkn.data;\n701-expression_statement-109-109", type_label=expression_statement];
721 [label="113_ string private name_ = \"FISH\";\n721-new_variable-114-114", type_label=new_variable];
728 [label="114_ string private symbol_ = \"FISH\";\n728-new_variable-115-115", type_label=new_variable];
735 [label="115_ uint256 private decimals_ = 18;\n735-new_variable-116-116", type_label=new_variable];
741 [label="116_ uint256 public totalSupply = 77000000000 * (10 ** decimals_);\n741-new_variable-117-117", type_label=new_variable];
780 [label="119_ mapping (address => uint256) internal balances_;\n780-new_variable-120-120", type_label=new_variable];
787 [label="120_ mapping (address => mapping (address => uint256)) private allowed_;\n787-new_variable-121-121", type_label=new_variable];
798 [label="122_ balances_[msg.sender] = balances_[msg.sender].add(totalSupply);\n798-expression_statement-123-123", type_label=expression_statement];
835 [label="126_ name\n835-function_definition-127-129", type_label=function_definition];
844 [label="127_ return name_;\n844-return-128-128", type_label=return];
846 [label="129_ symbol\n846-function_definition-130-132", type_label=function_definition];
855 [label="130_ return symbol_;\n855-return-131-131", type_label=return];
857 [label="132_ decimals\n857-function_definition-133-135", type_label=function_definition];
866 [label="133_ return decimals_;\n866-return-134-134", type_label=return];
868 [label="135_ totalSupply\n868-function_definition-136-138", type_label=function_definition];
877 [label="136_ return totalSupply;\n877-return-137-137", type_label=return];
879 [label="138_ safeTransfer\n879-function_definition-139-141", type_label=function_definition];
891 [label="139_ require(transfer(_to, _value), \"Transfer failed.\");\n891-expression_statement-140-140", type_label=expression_statement];
904 [label="141_ safeTransferFrom\n904-function_definition-142-144", type_label=function_definition];
920 [label="142_ require(transferFrom(_from, _to, _value), \"Transfer failed.\");\n920-expression_statement-143-143", type_label=expression_statement];
935 [label="144_ safeApprove\n935-function_definition-145-148", type_label=function_definition];
951 [label="145_ require(allowed_[msg.sender][_spender] == _currentValue, \"Current allowance value does not match.\");\n951-expression_statement-146-146", type_label=expression_statement];
967 [label="146_ approve(_spender, _value);\n967-expression_statement-147-147", type_label=expression_statement];
974 [label="148_ balanceOf\n974-function_definition-149-151", type_label=function_definition];
987 [label="149_ return balances_[_owner];\n987-return-150-150", type_label=return];
991 [label="151_ allowance\n991-function_definition-152-154", type_label=function_definition];
1008 [label="152_ return allowed_[_owner][_spender];\n1008-return-153-153", type_label=return];
1014 [label="154_ transfer\n1014-function_definition-155-162", type_label=function_definition];
1030 [label="155_ require(_value <= balances_[msg.sender], \"Value exceeds balance of msg.sender.\");\n1030-expression_statement-156-156", type_label=expression_statement];
1044 [label="156_ require(_to != address(0), \"Cannot send tokens to zero address.\");\n1044-expression_statement-157-157", type_label=expression_statement];
1056 [label="157_ balances_[msg.sender] = balances_[msg.sender].sub(_value);\n1056-expression_statement-158-158", type_label=expression_statement];
1073 [label="158_ balances_[_to] = balances_[_to].add(_value);\n1073-expression_statement-159-159", type_label=expression_statement];
1096 [label="160_ return true;\n1096-return-161-161", type_label=return];
1099 [label="162_ approve\n1099-function_definition-163-167", type_label=function_definition];
1115 [label="163_ allowed_[msg.sender][_spender] = _value;\n1115-expression_statement-164-164", type_label=expression_statement];
1135 [label="165_ return true;\n1135-return-166-166", type_label=return];
1138 [label="167_ transferFrom\n1138-function_definition-168-177", type_label=function_definition];
1158 [label="168_ require(_value <= balances_[_from], \"Value exceeds balance of msg.sender.\");\n1158-expression_statement-169-169", type_label=expression_statement];
1170 [label="169_ require(_value <= allowed_[_from][msg.sender], \"Value exceeds allowance of msg.sender for this owner.\");\n1170-expression_statement-170-170", type_label=expression_statement];
1186 [label="170_ require(_to != address(0), \"Cannot send tokens to zero address.\");\n1186-expression_statement-171-171", type_label=expression_statement];
1198 [label="171_ balances_[_from] = balances_[_from].sub(_value);\n1198-expression_statement-172-172", type_label=expression_statement];
1211 [label="172_ balances_[_to] = balances_[_to].add(_value);\n1211-expression_statement-173-173", type_label=expression_statement];
1224 [label="173_ allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\n1224-expression_statement-174-174", type_label=expression_statement];
1253 [label="175_ return true;\n1253-return-176-176", type_label=return];
1256 [label="177_ increaseApproval\n1256-function_definition-178-182", type_label=function_definition];
1272 [label="178_ allowed_[msg.sender][_spender] = allowed_[msg.sender][_spender].add(_addedValue);\n1272-expression_statement-179-179", type_label=expression_statement];
1309 [label="180_ return true;\n1309-return-181-181", type_label=return];
1312 [label="182_ decreaseApproval\n1312-function_definition-183-192", type_label=function_definition];
1328 [label="183_ uint256 oldValue = allowed_[msg.sender][_spender];\n1328-new_variable-184-184", type_label=new_variable];
1340 [label="184_ if__subtractedValue >= oldValue\n1340-if-185-189", type_label=if];
2874 [label="184_ end_if", type_label=end_if];
1345 [label="185_ allowed_[msg.sender][_spender] = 0;\n1345-expression_statement-186-186", type_label=expression_statement];
1356 [label="187_ allowed_[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n1356-expression_statement-188-188", type_label=expression_statement];
1387 [label="190_ return true;\n1387-return-191-191", type_label=return];
1390 [label="192_ transfer\n1390-function_definition-193-201", type_label=function_definition];
1411 [label="193_ require(_to != address(0), \"Cannot transfer token to zero address.\");\n1411-expression_statement-194-194", type_label=expression_statement];
1423 [label="194_ require(_value <= balanceOf(msg.sender), \"Value exceeds balance of msg.sender.\");\n1423-expression_statement-195-195", type_label=expression_statement];
1438 [label="195_ transfer(_to, _value);\n1438-expression_statement-196-196", type_label=expression_statement];
1445 [label="196_ if\n1445-if-197-199", type_label=if];
2979 [label="196_ end_if", type_label=end_if];
1451 [label="197_ return contractFallback(_to, _value, _data);\n1451-return-198-198", type_label=return];
1460 [label="199_ return true;\n1460-return-200-200", type_label=return];
1463 [label="201_ contractFallback\n1463-function_definition-202-205", type_label=function_definition];
1484 [label="202_ Generic223Receiver receiver = Generic223Receiver(_to);\n1484-new_variable-203-203", type_label=new_variable];
1494 [label="203_ return receiver.tokenFallback(msg.sender, _value, _data);\n1494-return-204-204", type_label=return];
1507 [label="205_ isContract\n1507-function_definition-206-210", type_label=function_definition];
1520 [label="206_ uint length;\n1520-new_variable-207-207", type_label=new_variable];
1535 [label="208_ return length > 0;\n1535-return-209-209", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
1371;
233 -> 242  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
247 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 300  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
325 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 348  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
343 -> 1877  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1877 -> 350  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 1877  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
348 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
350 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
365 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
367 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
388 -> 405  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
405 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
416 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
452 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 462  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
462 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 472  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
472 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 493  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
493 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
525 -> 546  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
546 -> 566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
566 -> 571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 585  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
585 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
588 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 616  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
616 -> 631  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
631 -> 645  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
631 -> 2165  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2165 -> 673  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 631  [color=red, controlflow_type=loop_control, edge_type=CFG_edge, key=0, label=loop_control];
645 -> 642  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
673 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 683  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
683 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
721 -> 728  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
728 -> 735  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
735 -> 741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 787  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
835 -> 844  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
844 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
846 -> 855  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
855 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
857 -> 866  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
866 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
868 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
879 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 920  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
951 -> 967  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
974 -> 987  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
987 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
991 -> 1008  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1008 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1014 -> 1030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1030 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1044 -> 1056  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1073  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1096 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1099 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1135 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1138 -> 1158  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1158 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1170 -> 1186  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1186 -> 1198  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1198 -> 1211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1211 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1256 -> 1272  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1309 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1312 -> 1328  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1328 -> 1340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1340 -> 1345  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1340 -> 1356  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2874 -> 1371  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1345 -> 2874  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1356 -> 2874  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1387 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1390 -> 1411  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1411 -> 1423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1423 -> 1438  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1438 -> 1445  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1445 -> 1451  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1445 -> 2979  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2979 -> 1460  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1451 -> 2979  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1451 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1460 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1463 -> 1484  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1484 -> 1494  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1494 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1507 -> 1520  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1535 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
