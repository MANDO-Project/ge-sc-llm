digraph  {
62 [label="21_ modifier onlyTokenHolders() \n    {\n        require(myTokens() > 0);\n        _;\n    }\n62-expression_statement-22-26", type_label=expression_statement];
65 [label="23_ require(myTokens() > 0);\n65-expression_statement-24-24", type_label=expression_statement];
73 [label="24_ _;\n73-expression_statement-25-25", type_label=expression_statement];
75 [label="26_ modifier onlyEthBankHolders()\n    {\n        require(myEthBank() > 0);\n        _;\n    }\n75-expression_statement-27-31", type_label=expression_statement];
78 [label="28_ require(myEthBank() > 0);\n78-expression_statement-29-29", type_label=expression_statement];
86 [label="29_ _;\n86-expression_statement-30-30", type_label=expression_statement];
88 [label="31_ string public name = \"SKY token\";\n88-new_variable-32-32", type_label=new_variable];
95 [label="32_ string public symbol = \"SKY\";\n95-new_variable-33-33", type_label=new_variable];
102 [label="33_ uint256 constant public decimals = 18;\n102-new_variable-34-34", type_label=new_variable];
108 [label="34_ uint256 constant internal buyInFee = 10;\n108-new_variable-35-35", type_label=new_variable];
114 [label="35_ uint256 constant internal sellOutFee = 10;\n114-new_variable-36-36", type_label=new_variable];
120 [label="36_ mapping(address => uint256) public balanceOf;\n120-new_variable-37-37", type_label=new_variable];
127 [label="37_ mapping(address => uint256) public ethBank;\n127-new_variable-38-38", type_label=new_variable];
134 [label="38_ uint256 public totalSupply = 0;\n134-new_variable-39-39", type_label=new_variable];
140 [label="39_ uint256 public coinMC = 0;\n140-new_variable-40-40", type_label=new_variable];
146 [label="40_ uint256 public tokenPrice = .001 ether;\n146-new_variable-41-41", type_label=new_variable];
153 [label="41_ uint256 public ethJackpot = 0;\n153-new_variable-42-42", type_label=new_variable];
159 [label="42_ address public leader;\n159-new_variable-43-43", type_label=new_variable];
164 [label="43_ uint256 public jpTimer = now + 1 weeks;\n164-new_variable-44-44", type_label=new_variable];
173 [label="44_ uint256 public jpRound = 0;\n173-new_variable-45-45", type_label=new_variable];
183 [label="49_ buy();\n183-expression_statement-50-50", type_label=expression_statement];
186 [label="51_ buy\n186-function_definition-52-77", type_label=function_definition];
191 [label="55_ address _customerAddress = msg.sender;\n191-new_variable-56-56", type_label=new_variable];
199 [label="56_ uint256 _eth = msg.value;\n199-new_variable-57-57", type_label=new_variable];
207 [label="57_ if_now>=jpTimer\n207-if-58-63", type_label=if];
1258 [label="57_ end_if", type_label=end_if];
212 [label="58_ uint256 jpwinnings = ethJackpot/2;\n212-new_variable-59-59", type_label=new_variable];
220 [label="59_ ethJackpot = 0;\n220-expression_statement-60-60", type_label=expression_statement];
224 [label="60_ ethBank[leader] = ethBank[leader].add(jpwinnings);\n224-expression_statement-61-61", type_label=expression_statement];
237 [label="61_ jpRound += 1;\n237-expression_statement-62-62", type_label=expression_statement];
241 [label="63_ uint256 _tokens = _eth.mul(1e18)/buyingPrice();\n241-new_variable-64-64", type_label=new_variable];
255 [label="64_ uint256 fee = _eth/buyInFee;\n255-new_variable-65-65", type_label=new_variable];
263 [label="65_ uint256 splitFee = fee/2;\n263-new_variable-66-66", type_label=new_variable];
271 [label="66_ balanceOf[_customerAddress] =  balanceOf[_customerAddress].add(_tokens);\n271-expression_statement-67-67", type_label=expression_statement];
284 [label="67_ totalSupply = totalSupply.add(_tokens);\n284-expression_statement-68-68", type_label=expression_statement];
299 [label="69_ ethJackpot = ethJackpot.add(splitFee);\n299-expression_statement-70-70", type_label=expression_statement];
308 [label="70_ coinMC = coinMC.add(_eth.sub(splitFee));\n308-expression_statement-71-71", type_label=expression_statement];
322 [label="71_ if\n322-if-72-75", type_label=if];
1373 [label="71_ end_if", type_label=end_if];
330 [label="72_ jpTimer = now + 1 days;\n330-expression_statement-73-73", type_label=expression_statement];
337 [label="73_ leader = _customerAddress;\n337-expression_statement-74-74", type_label=expression_statement];
341 [label="75_ tokenPrice = coinMC / (totalSupply / 1e18);\n341-expression_statement-76-76", type_label=expression_statement];
350 [label="77_ reinvest\n350-function_definition-78-102", type_label=function_definition];
353 [label="79_ onlyEthBankHolders\n353-expression_statement-80-80", type_label=expression_statement];
356 [label="81_ address _customerAddress = msg.sender;\n356-new_variable-82-82", type_label=new_variable];
364 [label="82_ uint256 _eth = ethBank[_customerAddress];\n364-new_variable-83-83", type_label=new_variable];
372 [label="83_ ethBank[_customerAddress] = 0;\n372-expression_statement-84-84", type_label=expression_statement];
378 [label="84_ require(_eth >= buyingPrice());\n378-expression_statement-85-85", type_label=expression_statement];
386 [label="85_ if_now>=jpTimer\n386-if-86-90", type_label=if];
1437 [label="85_ end_if", type_label=end_if];
391 [label="86_ uint256 jpwinnings = ((ethJackpot/2)/buyingPrice());\n391-new_variable-87-87", type_label=new_variable];
404 [label="87_ ethJackpot = 0;\n404-expression_statement-88-88", type_label=expression_statement];
408 [label="88_ ethBank[leader] = ethBank[leader].add(jpwinnings);\n408-expression_statement-89-89", type_label=expression_statement];
421 [label="90_ uint256 _tokens = _eth.mul(1e18)/buyingPrice();\n421-new_variable-91-91", type_label=new_variable];
435 [label="91_ uint256 fee = _eth/buyInFee;\n435-new_variable-92-92", type_label=new_variable];
443 [label="92_ uint256 splitFee = fee/2;\n443-new_variable-93-93", type_label=new_variable];
451 [label="93_ balanceOf[_customerAddress] =  balanceOf[_customerAddress].add(_tokens);\n451-expression_statement-94-94", type_label=expression_statement];
464 [label="94_ totalSupply = totalSupply.add(_tokens);\n464-expression_statement-95-95", type_label=expression_statement];
479 [label="96_ ethJackpot = ethJackpot.add(splitFee);\n479-expression_statement-97-97", type_label=expression_statement];
488 [label="97_ coinMC = coinMC.add(_eth.sub(splitFee));\n488-expression_statement-98-98", type_label=expression_statement];
502 [label="98_ tokenPrice = coinMC / (totalSupply / 1e18);\n502-expression_statement-99-99", type_label=expression_statement];
511 [label="99_ jpTimer = now + 1 days;\n511-expression_statement-100-100", type_label=expression_statement];
518 [label="100_ leader = _customerAddress;\n518-expression_statement-101-101", type_label=expression_statement];
522 [label="102_ sell\n522-function_definition-103-124", type_label=function_definition];
529 [label="104_ onlyTokenHolders\n529-expression_statement-105-105", type_label=expression_statement];
532 [label="106_ address _customerAddress = msg.sender;\n532-new_variable-107-107", type_label=new_variable];
540 [label="107_ require(_amount <= balanceOf[_customerAddress]);\n540-expression_statement-108-108", type_label=expression_statement];
549 [label="108_ uint256 _eth = _amount.mul(tokenPrice);\n549-new_variable-109-109", type_label=new_variable];
560 [label="109_ _eth = _eth/(1e18);\n560-expression_statement-110-110", type_label=expression_statement];
567 [label="110_ uint256 _fee = _eth/buyInFee;\n567-new_variable-111-111", type_label=new_variable];
575 [label="111_ _eth = _eth.sub(_fee);\n575-expression_statement-112-112", type_label=expression_statement];
584 [label="112_ totalSupply = totalSupply.sub(_amount);\n584-expression_statement-113-113", type_label=expression_statement];
593 [label="113_ balanceOf[_customerAddress] = balanceOf[_customerAddress].sub(_amount);\n593-expression_statement-114-114", type_label=expression_statement];
606 [label="114_ uint256 splitFee = _fee/2;\n606-new_variable-115-115", type_label=new_variable];
614 [label="115_ ethJackpot = ethJackpot.add(splitFee);\n614-expression_statement-116-116", type_label=expression_statement];
623 [label="116_ ethBank[leader] = ethBank[leader].add(splitFee/2);\n623-expression_statement-117-117", type_label=expression_statement];
644 [label="118_ coinMC = coinMC.sub(_eth + splitFee + (splitFee/2));\n644-expression_statement-119-119", type_label=expression_statement];
660 [label="119_ if_totalSupply > 0\n660-if-120-122", type_label=if];
1711 [label="119_ end_if", type_label=end_if];
665 [label="120_ tokenPrice = coinMC.mul(1e18)/totalSupply;\n665-expression_statement-121-121", type_label=expression_statement];
677 [label="121_ (tokenPrice = buyingPrice().add(coinMC));\n677-expression_statement-122-122", type_label=expression_statement];
688 [label="122_ ethBank[_customerAddress] = ethBank[_customerAddress].add(_eth);\n688-expression_statement-123-123", type_label=expression_statement];
701 [label="124_ sellAll\n701-function_definition-125-130", type_label=function_definition];
704 [label="126_ onlyTokenHolders\n704-expression_statement-127-127", type_label=expression_statement];
707 [label="128_ sell(balanceOf[msg.sender]);\n707-expression_statement-129-129", type_label=expression_statement];
716 [label="130_ withdraw\n716-function_definition-131-140", type_label=function_definition];
720 [label="133_ onlyEthBankHolders\n720-expression_statement-134-134", type_label=expression_statement];
723 [label="135_ address payable _customerAddress = msg.sender;\n723-new_variable-136-136", type_label=new_variable];
731 [label="136_ uint256 eth = ethBank[_customerAddress];\n731-new_variable-137-137", type_label=new_variable];
739 [label="137_ ethBank[_customerAddress] = 0;\n739-expression_statement-138-138", type_label=expression_statement];
745 [label="138_ _customerAddress.transfer(eth);\n745-expression_statement-139-139", type_label=expression_statement];
752 [label="140_ panic\n752-function_definition-141-149", type_label=function_definition];
757 [label="144_ if_myTokens() > 0\n757-if-145-147", type_label=if];
1808 [label="144_ end_if", type_label=end_if];
763 [label="145_ sellAll();\n763-expression_statement-146-146", type_label=expression_statement];
766 [label="147_ withdraw();\n766-expression_statement-148-148", type_label=expression_statement];
769 [label="149_ transfer\n769-function_definition-150-165", type_label=function_definition];
785 [label="153_ address _customerAddress = msg.sender;\n785-new_variable-154-154", type_label=new_variable];
793 [label="154_ require( _amountOfTokens <= balanceOf[_customerAddress] );\n793-expression_statement-155-155", type_label=expression_statement];
802 [label="155_ if__amountOfTokens>0\n802-if-156-162", type_label=if];
1853 [label="155_ end_if", type_label=end_if];
808 [label="158_ balanceOf[_customerAddress] = balanceOf[_customerAddress].sub( _amountOfTokens );\n808-expression_statement-159-159", type_label=expression_statement];
821 [label="159_ balanceOf[ _toAddress] = balanceOf[ _toAddress].add( _amountOfTokens );\n821-expression_statement-160-160", type_label=expression_statement];
842 [label="163_ return true;\n842-return-164-164", type_label=return];
845 [label="165_ totalEthereumBalance\n845-function_definition-166-172", type_label=function_definition];
854 [label="170_ return address(this).balance;\n854-return-171-171", type_label=return];
860 [label="172_ myEthBank\n860-function_definition-173-180", type_label=function_definition];
869 [label="177_ address _customerAddress = msg.sender;\n869-new_variable-178-178", type_label=new_variable];
877 [label="178_ return ethBank[_customerAddress];\n877-return-179-179", type_label=return];
881 [label="180_ myTokens\n881-function_definition-181-188", type_label=function_definition];
890 [label="185_ address _customerAddress = msg.sender;\n890-new_variable-186-186", type_label=new_variable];
898 [label="186_ return balanceOf[_customerAddress];\n898-return-187-187", type_label=return];
902 [label="188_ sellingPrice\n902-function_definition-189-196", type_label=function_definition];
911 [label="193_ uint256 _fee = tokenPrice/sellOutFee;\n911-new_variable-194-194", type_label=new_variable];
919 [label="194_ return tokenPrice.sub(_fee);\n919-return-195-195", type_label=return];
926 [label="196_ buyingPrice\n926-function_definition-197-204", type_label=function_definition];
935 [label="201_ uint256 _fee = tokenPrice/buyInFee;\n935-new_variable-202-202", type_label=new_variable];
943 [label="202_ return tokenPrice.add(_fee) ;\n943-return-203-203", type_label=return];
953 [label="206_ mul\n953-function_definition-207-218", type_label=function_definition];
971 [label="211_ if_a == 0\n971-if-212-214", type_label=if];
2022 [label="211_ end_if", type_label=end_if];
976 [label="212_ return 0;\n976-return-213-213", type_label=return];
978 [label="214_ c = a * b;\n978-expression_statement-215-215", type_label=expression_statement];
984 [label="215_ require(c / a == b);\n984-expression_statement-216-216", type_label=expression_statement];
993 [label="216_ return c;\n993-return-217-217", type_label=return];
995 [label="218_ sub\n995-function_definition-219-226", type_label=function_definition];
1012 [label="223_ require(b <= a);\n1012-expression_statement-224-224", type_label=expression_statement];
1019 [label="224_ return a - b;\n1019-return-225-225", type_label=return];
1023 [label="226_ add\n1023-function_definition-227-235", type_label=function_definition];
1041 [label="231_ c = a + b;\n1041-expression_statement-232-232", type_label=expression_statement];
1047 [label="232_ require(c >= a);\n1047-expression_statement-233-233", type_label=expression_statement];
1054 [label="233_ return c;\n1054-return-234-234", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
834;
62 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
65 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
78 -> 86  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 102  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
102 -> 108  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
108 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
120 -> 127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
127 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 146  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
146 -> 153  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
153 -> 159  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
159 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 173  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
186 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 212  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
207 -> 1258  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1258 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
212 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
224 -> 237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 1258  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
241 -> 255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
255 -> 263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 271  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
271 -> 284  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
299 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 330  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
322 -> 1373  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1373 -> 341  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 337  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
337 -> 1373  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
350 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 364  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
372 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 391  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
386 -> 1437  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1437 -> 421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 1437  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
421 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
479 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
522 -> 532  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
532 -> 540  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
540 -> 549  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 560  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
560 -> 567  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
567 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 584  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
584 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 614  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
614 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
644 -> 660  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
660 -> 665  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
660 -> 677  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1711 -> 688  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
665 -> 1711  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
677 -> 1711  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
701 -> 707  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
716 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
723 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 745  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
757 -> 763  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
757 -> 1808  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1808 -> 766  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
763 -> 1808  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
769 -> 785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
785 -> 793  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
793 -> 802  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
802 -> 1853  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1853 -> 834  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 821  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 1853  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
842 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
845 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
860 -> 869  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
869 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
881 -> 890  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
890 -> 898  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
898 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
902 -> 911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
926 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 943  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
953 -> 971  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
971 -> 976  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
971 -> 2022  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2022 -> 978  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
976 -> 2022  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
976 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
978 -> 984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
995 -> 1012  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1012 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1023 -> 1041  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1041 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1047 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
