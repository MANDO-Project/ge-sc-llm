digraph  {
13 [label="2_ mul\n13-function_definition-3-10", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", type_label=if];
1101 [label="3_ end_if", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", type_label=new_variable];
45 [label="7_ assert(c / a == b);\n45-expression_statement-8-8", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", type_label=return];
56 [label="10_ safeDiv\n56-function_definition-11-14", type_label=function_definition];
73 [label="11_ uint256 c = a / b;\n73-new_variable-12-12", type_label=new_variable];
81 [label="12_ return c;\n81-return-13-13", type_label=return];
83 [label="14_ safeSub\n83-function_definition-15-18", type_label=function_definition];
100 [label="15_ assert(b <= a);\n100-expression_statement-16-16", type_label=expression_statement];
107 [label="16_ return a - b;\n107-return-17-17", type_label=return];
111 [label="18_ safeAdd\n111-function_definition-19-23", type_label=function_definition];
128 [label="19_ uint256 c = a + b;\n128-new_variable-20-20", type_label=new_variable];
136 [label="20_ assert(c >= a);\n136-expression_statement-21-21", type_label=expression_statement];
143 [label="21_ return c;\n143-return-22-22", type_label=return];
148 [label="25_ totalSupply\n148-function_definition-26-26", type_label=function_definition];
157 [label="26_ balanceOf\n157-function_definition-27-27", type_label=function_definition];
170 [label="27_ transfer\n170-function_definition-28-28", type_label=function_definition];
186 [label="28_ transferFrom\n186-function_definition-29-29", type_label=function_definition];
206 [label="29_ approve\n206-function_definition-30-30", type_label=function_definition];
222 [label="30_ allowance\n222-function_definition-31-31", type_label=function_definition];
278 [label="37_ balanceOf\n278-function_definition-38-40", type_label=function_definition];
292 [label="38_ return accounts [_owner];\n292-return-39-39", type_label=return];
296 [label="40_ transfer\n296-function_definition-41-50", type_label=function_definition];
313 [label="41_ require(_to != address(0));\n313-expression_statement-42-42", type_label=expression_statement];
322 [label="42_ if_accounts [msg.sender] < _value\n322-if-43-43", type_label=if];
1393 [label="42_ end_if", type_label=end_if];
330 [label="42_ return false;\n330-return-43-43", type_label=return];
333 [label="43_ if__value > 0 && msg.sender != _to\n333-if-44-47", type_label=if];
1404 [label="43_ end_if", type_label=end_if];
344 [label="44_ accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n344-expression_statement-45-45", type_label=expression_statement];
361 [label="45_ accounts [_to] = safeAdd (accounts [_to], _value);\n361-expression_statement-46-46", type_label=expression_statement];
384 [label="48_ return true;\n384-return-49-49", type_label=return];
387 [label="50_ transferFrom\n387-function_definition-51-63", type_label=function_definition];
408 [label="52_ require(_to != address(0));\n408-expression_statement-53-53", type_label=expression_statement];
417 [label="53_ if_allowances [_from][msg.sender] < _value\n417-if-54-54", type_label=if];
1488 [label="53_ end_if", type_label=end_if];
427 [label="53_ return false;\n427-return-54-54", type_label=return];
430 [label="54_ if_accounts [_from] < _value\n430-if-55-55", type_label=if];
1501 [label="54_ end_if", type_label=end_if];
436 [label="54_ return false;\n436-return-55-55", type_label=return];
439 [label="55_ if__value > 0 && _from != _to\n439-if-56-60", type_label=if];
1510 [label="55_ end_if", type_label=end_if];
448 [label="56_ allowances [_from][msg.sender] = safeSub (allowances [_from][msg.sender], _value);\n448-expression_statement-57-57", type_label=expression_statement];
469 [label="57_ accounts [_from] = safeSub (accounts [_from], _value);\n469-expression_statement-58-58", type_label=expression_statement];
482 [label="58_ accounts [_to] = safeAdd (accounts [_to], _value);\n482-expression_statement-59-59", type_label=expression_statement];
503 [label="61_ return true;\n503-return-62-62", type_label=return];
506 [label="63_ approve\n506-function_definition-64-68", type_label=function_definition];
523 [label="64_ allowances [msg.sender][_spender] = _value;\n523-expression_statement-65-65", type_label=expression_statement];
543 [label="66_ return true;\n543-return-67-67", type_label=return];
546 [label="68_ allowance\n546-function_definition-69-72", type_label=function_definition];
564 [label="70_ return allowances [_owner][_spender];\n564-return-71-71", type_label=return];
570 [label="72_ mapping (address => uint256) accounts;\n570-new_variable-73-73", type_label=new_variable];
576 [label="73_ mapping (address => mapping (address => uint256)) private allowances;\n576-new_variable-74-74", type_label=new_variable];
591 [label="76_ uint256 constant MAX_TOKEN_COUNT = 100000000 * (10**0);\n591-new_variable-77-77", type_label=new_variable];
601 [label="77_ address private owner;\n601-new_variable-78-78", type_label=new_variable];
606 [label="78_ mapping (address => bool) private frozenAccount;\n606-new_variable-79-79", type_label=new_variable];
613 [label="79_ uint256 tokenCount = 0;\n613-new_variable-80-80", type_label=new_variable];
618 [label="80_ bool frozen = false;\n618-new_variable-81-81", type_label=new_variable];
626 [label="82_ owner = msg.sender;\n626-expression_statement-83-83", type_label=expression_statement];
632 [label="84_ totalSupply\n632-function_definition-85-87", type_label=function_definition];
642 [label="85_ return tokenCount;\n642-return-86-86", type_label=return];
644 [label="87_ string constant public name = \"primerainvest\";\n644-new_variable-88-88", type_label=new_variable];
651 [label="88_ string constant public symbol = \"PRIN\";\n651-new_variable-89-89", type_label=new_variable];
658 [label="89_ uint8 constant public decimals = 0;\n658-new_variable-90-90", type_label=new_variable];
664 [label="90_ transfer\n664-function_definition-91-95", type_label=function_definition];
681 [label="91_ require(!frozenAccount[msg.sender]);\n681-expression_statement-92-92", type_label=expression_statement];
691 [label="92_ if\n691-if-93-94", type_label=if];
1762 [label="92_ end_if", type_label=end_if];
693 [label="92_ return false;\n693-return-93-93", type_label=return];
696 [label="93_ return AbstractToken.transfer (_to, _value);\n696-return-94-94", type_label=return];
705 [label="95_ transferFrom\n705-function_definition-96-101", type_label=function_definition];
726 [label="97_ require(!frozenAccount[_from]);\n726-expression_statement-98-98", type_label=expression_statement];
734 [label="98_ if\n734-if-99-100", type_label=if];
1805 [label="98_ end_if", type_label=end_if];
736 [label="98_ return false;\n736-return-99-99", type_label=return];
739 [label="99_ return AbstractToken.transferFrom (_from, _to, _value);\n739-return-100-100", type_label=return];
750 [label="101_ approve\n750-function_definition-102-106", type_label=function_definition];
767 [label="103_ require(allowance (msg.sender, _spender) == 0 || _value == 0);\n767-expression_statement-104-104", type_label=expression_statement];
785 [label="104_ return AbstractToken.approve (_spender, _value);\n785-return-105-105", type_label=return];
794 [label="106_ createTokens\n794-function_definition-107-118", type_label=function_definition];
807 [label="108_ require (msg.sender == owner);\n807-expression_statement-109-109", type_label=expression_statement];
816 [label="109_ if__value > 0\n816-if-110-116", type_label=if];
1887 [label="109_ end_if", type_label=end_if];
821 [label="110_ if\n821-if-111-111", type_label=if];
1892 [label="110_ end_if", type_label=end_if];
830 [label="110_ return false;\n830-return-111-111", type_label=return];
833 [label="111_ accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);\n833-expression_statement-112-112", type_label=expression_statement];
850 [label="112_ tokenCount = safeAdd (tokenCount, _value);\n850-expression_statement-113-113", type_label=expression_statement];
871 [label="114_ return true;\n871-return-115-115", type_label=return];
874 [label="116_ return false;\n874-return-117-117", type_label=return];
877 [label="118_ setOwner\n877-function_definition-119-122", type_label=function_definition];
885 [label="119_ require (msg.sender == owner);\n885-expression_statement-120-120", type_label=expression_statement];
894 [label="120_ owner = _newOwner;\n894-expression_statement-121-121", type_label=expression_statement];
898 [label="122_ freezeTransfers\n898-function_definition-123-129", type_label=function_definition];
902 [label="123_ require (msg.sender == owner);\n902-expression_statement-124-124", type_label=expression_statement];
911 [label="124_ if\n911-if-125-128", type_label=if];
1982 [label="124_ end_if", type_label=end_if];
915 [label="125_ frozen = true;\n915-expression_statement-126-126", type_label=expression_statement];
922 [label="129_ unfreezeTransfers\n922-function_definition-130-136", type_label=function_definition];
926 [label="130_ require (msg.sender == owner);\n926-expression_statement-131-131", type_label=expression_statement];
935 [label="131_ if\n935-if-132-135", type_label=if];
2006 [label="131_ end_if", type_label=end_if];
938 [label="132_ frozen = false;\n938-expression_statement-133-133", type_label=expression_statement];
945 [label="136_ refundTokens\n945-function_definition-137-143", type_label=function_definition];
961 [label="137_ require (msg.sender == owner);\n961-expression_statement-138-138", type_label=expression_statement];
970 [label="138_ require(_token != address(this));\n970-expression_statement-139-139", type_label=expression_statement];
979 [label="139_ AbstractToken token = AbstractToken(_token);\n979-new_variable-140-140", type_label=new_variable];
989 [label="140_ token.transfer(_refund, _value);\n989-expression_statement-141-141", type_label=expression_statement];
1006 [label="143_ freezeAccount\n1006-function_definition-144-149", type_label=function_definition];
1018 [label="144_ require (msg.sender == owner);\n1018-expression_statement-145-145", type_label=expression_statement];
1027 [label="145_ require (msg.sender != _target);\n1027-expression_statement-146-146", type_label=expression_statement];
1036 [label="146_ frozenAccount[_target] = freeze;\n1036-expression_statement-147-147", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
374;
495;
697;
740;
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 1101  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1101 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 1101  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 81  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
81 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
83 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
111 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 136  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
136 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
143 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
278 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
292 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
296 -> 313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 330  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
322 -> 1393  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1393 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 1393  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
330 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
333 -> 344  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
333 -> 1404  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1404 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
344 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 1404  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
384 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
387 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 427  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
417 -> 1488  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1488 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 1488  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
427 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
430 -> 436  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
430 -> 1501  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1501 -> 439  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
436 -> 1501  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
436 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
439 -> 448  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
439 -> 1510  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1510 -> 495  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
448 -> 469  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
469 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 1510  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
503 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
506 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
543 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
546 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
570 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
591 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 613  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
613 -> 618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
644 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
651 -> 658  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
664 -> 681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
681 -> 691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
691 -> 693  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
691 -> 696  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1762 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 1762  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
693 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
696 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
705 -> 726  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
726 -> 734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
734 -> 736  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
734 -> 739  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1805 -> 750  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
736 -> 1805  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
736 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
739 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
750 -> 767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
767 -> 785  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
785 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
794 -> 807  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
807 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
816 -> 821  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
816 -> 1887  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1887 -> 874  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
821 -> 830  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
821 -> 1892  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1892 -> 833  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
830 -> 1892  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
830 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
833 -> 850  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
871 -> 1887  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
871 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
874 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
877 -> 885  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
898 -> 902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
902 -> 911  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 915  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
911 -> 1982  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
922 -> 926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
926 -> 935  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 938  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
935 -> 2006  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
945 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 979  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
979 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1006 -> 1018  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1018 -> 1027  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1027 -> 1036  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 1762  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
740 -> 1805  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
