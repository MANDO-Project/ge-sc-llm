digraph  {
12 [label="2_ balanceOf\n12-function_definition-3-3", type_label=function_definition];
19 [label="2_ constant\n19-expression_statement-3-3", type_label=expression_statement];
25 [label="3_ transfer\n25-function_definition-4-4", type_label=function_definition];
40 [label="4_ allowance\n40-function_definition-5-5", type_label=function_definition];
51 [label="4_ constant\n51-expression_statement-5-5", type_label=expression_statement];
57 [label="5_ transferFrom\n57-function_definition-6-6", type_label=function_definition];
76 [label="6_ approve\n76-function_definition-7-7", type_label=function_definition];
125 [label="11_ uint256  public  totalSupply = 100000000 * 1 ether;\n125-new_variable-12-12", type_label=new_variable];
134 [label="12_ mapping  (address => uint256)             public          _balances;\n134-new_variable-13-13", type_label=new_variable];
141 [label="13_ mapping  (address => mapping (address => uint256)) public  _approvals;\n141-new_variable-14-14", type_label=new_variable];
150 [label="14_ string   public  name = \"CoinCasso Exchange Token\";\n150-new_variable-15-15", type_label=new_variable];
157 [label="15_ string   public  symbol = \"CCX\";\n157-new_variable-16-16", type_label=new_variable];
164 [label="16_ uint256  public  decimals = 18;\n164-new_variable-17-17", type_label=new_variable];
170 [label="17_ address  public  owner ;\n170-new_variable-18-18", type_label=new_variable];
211 [label="22_ owner = msg.sender;\n211-expression_statement-23-23", type_label=expression_statement];
217 [label="23_ _balances[owner] = totalSupply;\n217-expression_statement-24-24", type_label=expression_statement];
223 [label="25_ modifier onlyOwner() {\n	    require(msg.sender == owner);\n	    _;\n	}\n223-expression_statement-26-29", type_label=expression_statement];
226 [label="26_ require(msg.sender == owner);\n226-expression_statement-27-27", type_label=expression_statement];
235 [label="27_ _;\n235-expression_statement-28-28", type_label=expression_statement];
237 [label="29_ totalSupply\n237-function_definition-30-32", type_label=function_definition];
240 [label="29_ constant\n240-expression_statement-30-30", type_label=expression_statement];
247 [label="30_ return totalSupply;\n247-return-31-31", type_label=return];
249 [label="32_ balanceOf\n249-function_definition-33-35", type_label=function_definition];
256 [label="32_ constant\n256-expression_statement-33-33", type_label=expression_statement];
263 [label="33_ return _balances[src];\n263-return-34-34", type_label=return];
267 [label="35_ allowance\n267-function_definition-36-38", type_label=function_definition];
278 [label="35_ constant\n278-expression_statement-36-36", type_label=expression_statement];
285 [label="36_ return _approvals[src][guy];\n285-return-37-37", type_label=return];
291 [label="38_ transfer\n291-function_definition-39-47", type_label=function_definition];
307 [label="39_ require (dst != address(0));\n307-expression_statement-40-40", type_label=expression_statement];
316 [label="40_ require (wad > 0);\n316-expression_statement-41-41", type_label=expression_statement];
323 [label="41_ assert(_balances[msg.sender] >= wad);\n323-expression_statement-42-42", type_label=expression_statement];
334 [label="42_ _balances[msg.sender] = _balances[msg.sender] - wad;\n334-expression_statement-43-43", type_label=expression_statement];
348 [label="43_ _balances[dst] = _balances[dst] + wad;\n348-expression_statement-44-44", type_label=expression_statement];
368 [label="45_ return true;\n368-return-46-46", type_label=return];
371 [label="47_ transferFrom\n371-function_definition-48-58", type_label=function_definition];
391 [label="48_ require (src != address(0));\n391-expression_statement-49-49", type_label=expression_statement];
400 [label="49_ require (dst != address(0));\n400-expression_statement-50-50", type_label=expression_statement];
409 [label="50_ assert(_balances[src] >= wad);\n409-expression_statement-51-51", type_label=expression_statement];
418 [label="51_ assert(_approvals[src][msg.sender] >= wad);\n418-expression_statement-52-52", type_label=expression_statement];
431 [label="52_ _approvals[src][msg.sender] = _approvals[src][msg.sender] - wad;\n431-expression_statement-53-53", type_label=expression_statement];
449 [label="53_ _balances[src] = _balances[src] - wad;\n449-expression_statement-54-54", type_label=expression_statement];
459 [label="54_ _balances[dst] = _balances[dst] + wad;\n459-expression_statement-55-55", type_label=expression_statement];
477 [label="56_ return true;\n477-return-57-57", type_label=return];
480 [label="58_ approve\n480-function_definition-59-65", type_label=function_definition];
496 [label="59_ require (guy != address(0));\n496-expression_statement-60-60", type_label=expression_statement];
505 [label="60_ require (wad > 0);\n505-expression_statement-61-61", type_label=expression_statement];
512 [label="61_ _approvals[msg.sender][guy] = wad;\n512-expression_statement-62-62", type_label=expression_statement];
532 [label="63_ return true;\n532-return-64-64", type_label=return];
535 [label="65_ burn\n535-function_definition-66-71", type_label=function_definition];
542 [label="65_ onlyOwner\n542-expression_statement-66-66", type_label=expression_statement];
545 [label="66_ require (wad > 0);\n545-expression_statement-67-67", type_label=expression_statement];
552 [label="67_ _balances[msg.sender] = _balances[msg.sender] - wad;\n552-expression_statement-68-68", type_label=expression_statement];
566 [label="68_ totalSupply = totalSupply - wad;\n566-expression_statement-69-69", type_label=expression_statement];
579 [label="73_ mul\n579-function_definition-74-78", type_label=function_definition];
596 [label="74_ uint256 c = a * b;\n596-new_variable-75-75", type_label=new_variable];
604 [label="75_ assert(a == 0 || c / a == b);\n604-expression_statement-76-76", type_label=expression_statement];
617 [label="76_ return c;\n617-return-77-77", type_label=return];
619 [label="78_ div\n619-function_definition-79-82", type_label=function_definition];
636 [label="79_ uint256 c = a / b;\n636-new_variable-80-80", type_label=new_variable];
644 [label="80_ return c;\n644-return-81-81", type_label=return];
646 [label="82_ sub\n646-function_definition-83-86", type_label=function_definition];
663 [label="83_ assert(b <= a);\n663-expression_statement-84-84", type_label=expression_statement];
670 [label="84_ return a - b;\n670-return-85-85", type_label=return];
674 [label="86_ add\n674-function_definition-87-91", type_label=function_definition];
691 [label="87_ uint256 c = a + b;\n691-new_variable-88-88", type_label=new_variable];
699 [label="88_ assert(c >= a);\n699-expression_statement-89-89", type_label=expression_statement];
706 [label="89_ return c;\n706-return-90-90", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
125 -> 134  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
134 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
157 -> 164  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
237 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
249 -> 263  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
263 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
267 -> 285  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
291 -> 307  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
307 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 323  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
371 -> 391  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
391 -> 400  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
400 -> 409  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
409 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
431 -> 449  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
449 -> 459  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
480 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 505  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
505 -> 512  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
532 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
535 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
552 -> 566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 617  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
617 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
619 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 644  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
644 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
646 -> 663  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
663 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
674 -> 691  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
691 -> 699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 706  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
706 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
