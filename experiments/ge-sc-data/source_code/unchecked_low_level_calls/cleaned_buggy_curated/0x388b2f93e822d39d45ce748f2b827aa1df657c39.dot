digraph  {
13 [label="2_ times\n13-function_definition-3-7", type_label=function_definition];
28 [label="3_ uint c = a * b;\n28-new_variable-4-4", type_label=new_variable];
36 [label="4_ assert(a == 0 || c / a == b);\n36-expression_statement-5-5", type_label=expression_statement];
49 [label="5_ return c;\n49-return-6-6", type_label=return];
51 [label="7_ minus\n51-function_definition-8-11", type_label=function_definition];
66 [label="8_ assert(b <= a);\n66-expression_statement-9-9", type_label=expression_statement];
73 [label="9_ return a - b;\n73-return-10-10", type_label=return];
77 [label="11_ plus\n77-function_definition-12-16", type_label=function_definition];
92 [label="12_ uint c = a + b;\n92-new_variable-13-13", type_label=new_variable];
100 [label="13_ assert(c>=a && c>=b);\n100-expression_statement-14-14", type_label=expression_statement];
111 [label="14_ return c;\n111-return-15-15", type_label=return];
113 [label="16_ assert\n113-function_definition-17-19", type_label=function_definition];
121 [label="17_ if\n121-if-18-18", type_label=if];
839 [label="17_ end_if", type_label=end_if];
124 [label="17_ throw;\n124-expression_statement-18-18", type_label=expression_statement];
134 [label="22_ struct TokenStorage {\n    mapping (address => uint) balances;\n    mapping (address => mapping (address => uint)) allowed;\n    uint totalSupply;\n  }\n134-expression_statement-23-27", type_label=expression_statement];
182 [label="29_ init\n182-function_definition-30-33", type_label=function_definition];
194 [label="30_ self.totalSupply = _initial_supply;\n194-expression_statement-31-31", type_label=expression_statement];
200 [label="31_ self.balances[msg.sender] = _initial_supply;\n200-expression_statement-32-32", type_label=expression_statement];
210 [label="33_ transfer\n210-function_definition-34-39", type_label=function_definition];
231 [label="34_ self.balances[msg.sender] = self.balances[msg.sender].minus(_value);\n231-expression_statement-35-35", type_label=expression_statement];
252 [label="35_ self.balances[_to] = self.balances[_to].plus(_value);\n252-expression_statement-36-36", type_label=expression_statement];
269 [label="36_ Transfer(msg.sender, _to, _value);\n269-expression_statement-37-37", type_label=expression_statement];
280 [label="37_ return true;\n280-return-38-38", type_label=return];
283 [label="39_ transferFrom\n283-function_definition-40-47", type_label=function_definition];
308 [label="40_ var _allowance = self.allowed[_from][msg.sender];\n308-new_variable-41-41", type_label=new_variable];
322 [label="41_ self.balances[_to] = self.balances[_to].plus(_value);\n322-expression_statement-42-42", type_label=expression_statement];
339 [label="42_ self.balances[_from] = self.balances[_from].minus(_value);\n339-expression_statement-43-43", type_label=expression_statement];
356 [label="43_ self.allowed[_from][msg.sender] = _allowance.minus(_value);\n356-expression_statement-44-44", type_label=expression_statement];
373 [label="44_ Transfer(_from, _to, _value);\n373-expression_statement-45-45", type_label=expression_statement];
382 [label="45_ return true;\n382-return-46-46", type_label=return];
385 [label="47_ balanceOf\n385-function_definition-48-50", type_label=function_definition];
396 [label="47_ constant\n396-expression_statement-48-48", type_label=expression_statement];
404 [label="48_ return self.balances[_owner];\n404-return-49-49", type_label=return];
410 [label="50_ approve\n410-function_definition-51-55", type_label=function_definition];
431 [label="51_ self.allowed[msg.sender][_spender] = _value;\n431-expression_statement-52-52", type_label=expression_statement];
443 [label="52_ Approval(msg.sender, _spender, _value);\n443-expression_statement-53-53", type_label=expression_statement];
454 [label="53_ return true;\n454-return-54-54", type_label=return];
457 [label="55_ allowance\n457-function_definition-56-58", type_label=function_definition];
472 [label="55_ constant\n472-expression_statement-56-56", type_label=expression_statement];
480 [label="56_ return self.allowed[_owner][_spender];\n480-return-57-57", type_label=return];
498 [label="61_ ERC20Lib.TokenStorage token;\n498-new_variable-62-62", type_label=new_variable];
504 [label="62_ string public name = \"JOJOCoin\";\n504-new_variable-63-63", type_label=new_variable];
511 [label="63_ string public symbol = \"JJC\";\n511-new_variable-64-64", type_label=new_variable];
518 [label="64_ uint public decimals = 18;\n518-new_variable-65-65", type_label=new_variable];
524 [label="65_ uint public INITIAL_SUPPLY = 10000000000;\n524-new_variable-66-66", type_label=new_variable];
530 [label="66_ uint256 public totalSupply;\n530-new_variable-67-67", type_label=new_variable];
535 [label="67_ FQCoin\n535-function_definition-68-71", type_label=function_definition];
538 [label="68_ totalSupply = INITIAL_SUPPLY * 10 ** uint256(decimals);\n538-expression_statement-69-69", type_label=expression_statement];
548 [label="69_ token.init(totalSupply);\n548-expression_statement-70-70", type_label=expression_statement];
555 [label="71_ totalSupply\n555-function_definition-72-74", type_label=function_definition];
557 [label="71_ constant\n557-expression_statement-72-72", type_label=expression_statement];
564 [label="72_ return token.totalSupply;\n564-return-73-73", type_label=return];
568 [label="74_ balanceOf\n568-function_definition-75-77", type_label=function_definition];
574 [label="74_ constant\n574-expression_statement-75-75", type_label=expression_statement];
581 [label="75_ return token.balanceOf(who);\n581-return-76-76", type_label=return];
588 [label="77_ allowance\n588-function_definition-78-80", type_label=function_definition];
598 [label="77_ constant\n598-expression_statement-78-78", type_label=expression_statement];
605 [label="78_ return token.allowance(owner, spender);\n605-return-79-79", type_label=return];
614 [label="80_ transfer\n614-function_definition-81-83", type_label=function_definition];
630 [label="81_ return token.transfer(to, value);\n630-return-82-82", type_label=return];
639 [label="83_ transferFrom\n639-function_definition-84-86", type_label=function_definition];
659 [label="84_ return token.transferFrom(from, to, value);\n659-return-85-85", type_label=return];
670 [label="86_ approve\n670-function_definition-87-89", type_label=function_definition];
686 [label="87_ return token.approve(spender, value);\n686-return-88-88", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
126;
13 -> 28  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
28 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
36 -> 49  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
49 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
51 -> 66  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
66 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
77 -> 92  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
92 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 111  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
111 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
113 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 124  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
121 -> 839  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
839 -> 126  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
124 -> 839  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
182 -> 194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
194 -> 200  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
231 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
252 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
283 -> 308  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
308 -> 322  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
322 -> 339  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
339 -> 356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 382  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
385 -> 404  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
404 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
410 -> 431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
431 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 454  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
454 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
457 -> 480  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
480 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
498 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
504 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 518  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
518 -> 524  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
535 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
538 -> 548  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
555 -> 564  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
564 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
568 -> 581  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
581 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
588 -> 605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
605 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
614 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
639 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
670 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
