digraph  {
12 [label="2_ isValidIPFSMultihash\n12-function_definition-3-10", type_label=function_definition];
25 [label="3_ require(_multihashBytes.length > 2);\n25-expression_statement-4-4", type_label=expression_statement];
34 [label="4_ uint8 _size;\n34-new_variable-5-5", type_label=new_variable];
55 [label="8_ return (_multihashBytes.length == _size + 2);\n55-return-9-9", type_label=return];
70 [label="12_ bytes public pollDataMultihash;\n70-new_variable-13-13", type_label=new_variable];
75 [label="13_ uint16 public numChoices;\n75-new_variable-14-14", type_label=new_variable];
80 [label="14_ uint256 public startTime;\n80-new_variable-15-15", type_label=new_variable];
85 [label="15_ uint256 public endTime;\n85-new_variable-16-16", type_label=new_variable];
90 [label="16_ address public author;\n90-new_variable-17-17", type_label=new_variable];
95 [label="17_ address public pollAdmin;\n95-new_variable-18-18", type_label=new_variable];
100 [label="18_ AccountRegistryInterface public registry;\n100-new_variable-19-19", type_label=new_variable];
106 [label="19_ SigningLogicInterface public signingLogic;\n106-new_variable-20-20", type_label=new_variable];
112 [label="20_ mapping(uint256 => uint16) public votes;\n112-new_variable-21-21", type_label=new_variable];
119 [label="21_ mapping (bytes32 => bool) public usedSignatures;\n119-new_variable-22-22", type_label=new_variable];
172 [label="33_ require(_startTime >= now && _endTime > _startTime);\n172-expression_statement-34-34", type_label=expression_statement];
183 [label="34_ require(isValidIPFSMultihash(_ipfsHash));\n183-expression_statement-35-35", type_label=expression_statement];
191 [label="35_ numChoices = _numChoices;\n191-expression_statement-36-36", type_label=expression_statement];
195 [label="36_ startTime = _startTime;\n195-expression_statement-37-37", type_label=expression_statement];
199 [label="37_ endTime = _endTime;\n199-expression_statement-38-38", type_label=expression_statement];
203 [label="38_ pollDataMultihash = _ipfsHash;\n203-expression_statement-39-39", type_label=expression_statement];
207 [label="39_ author = _author;\n207-expression_statement-40-40", type_label=expression_statement];
211 [label="40_ registry = _registry;\n211-expression_statement-41-41", type_label=expression_statement];
215 [label="41_ signingLogic = _signingLogic;\n215-expression_statement-42-42", type_label=expression_statement];
219 [label="42_ pollAdmin = _pollAdmin;\n219-expression_statement-43-43", type_label=expression_statement];
223 [label="44_ vote\n223-function_definition-45-47", type_label=function_definition];
231 [label="45_ voteForUser(_choice, msg.sender);\n231-expression_statement-46-46", type_label=expression_statement];
240 [label="47_ voteFor\n240-function_definition-48-59", type_label=function_definition];
259 [label="47_ onlyPollAdmin\n259-expression_statement-48-48", type_label=expression_statement];
262 [label="48_ require(!usedSignatures[keccak256(abi.encodePacked(_delegationSig))], \"Signature not unique\");\n262-expression_statement-49-49", type_label=expression_statement];
281 [label="49_ usedSignatures[keccak256(abi.encodePacked(_delegationSig))] = true;\n281-expression_statement-50-50", type_label=expression_statement];
296 [label="50_ bytes32 _delegationDigest = signingLogic.generateVoteForDelegationSchemaHash(\n      _choice,\n      _voter,\n      _nonce,\n      this\n    );\n296-new_variable-51-56", type_label=new_variable];
313 [label="56_ require(_voter == signingLogic.recoverSigner(_delegationDigest, _delegationSig));\n313-expression_statement-57-57", type_label=expression_statement];
327 [label="57_ voteForUser(_choice, _voter);\n327-expression_statement-58-58", type_label=expression_statement];
334 [label="59_ voteForUser\n334-function_definition-60-65", type_label=function_definition];
345 [label="59_ duringPoll\n345-expression_statement-60-60", type_label=expression_statement];
348 [label="60_ require(_choice <= numChoices && _choice > 0);\n348-expression_statement-61-61", type_label=expression_statement];
359 [label="61_ uint256 _voterId = registry.accountIdForAddress(_voter);\n359-new_variable-62-62", type_label=new_variable];
370 [label="62_ votes[_voterId] = _choice;\n370-expression_statement-63-63", type_label=expression_statement];
382 [label="65_ modifier duringPoll {\n    require(now >= startTime && now <= endTime);\n    _;\n  }\n382-expression_statement-66-69", type_label=expression_statement];
385 [label="66_ require(now >= startTime && now <= endTime);\n385-expression_statement-67-67", type_label=expression_statement];
396 [label="67_ _;\n396-expression_statement-68-68", type_label=expression_statement];
398 [label="69_ modifier onlyPollAdmin {\n    require(msg.sender == pollAdmin);\n    _;\n  }\n398-expression_statement-70-73", type_label=expression_statement];
401 [label="70_ require(msg.sender == pollAdmin);\n401-expression_statement-71-71", type_label=expression_statement];
410 [label="71_ _;\n410-expression_statement-72-72", type_label=expression_statement];
415 [label="75_ accountIdForAddress\n415-function_definition-76-76", type_label=function_definition];
427 [label="76_ addressBelongsToAccount\n427-function_definition-77-77", type_label=function_definition];
439 [label="77_ createNewAccount\n439-function_definition-78-78", type_label=function_definition];
446 [label="78_ addAddressToAccount\n446-function_definition-79-82", type_label=function_definition];
457 [label="82_ removeAddressFromAccount\n457-function_definition-83-83", type_label=function_definition];
467 [label="85_ recoverSigner\n467-function_definition-86-86", type_label=function_definition];
483 [label="86_ generateRequestAttestationSchemaHash\n483-function_definition-87-94", type_label=function_definition];
516 [label="94_ generateAttestForDelegationSchemaHash\n516-function_definition-95-103", type_label=function_definition];
553 [label="103_ generateContestForDelegationSchemaHash\n553-function_definition-104-108", type_label=function_definition];
573 [label="108_ generateStakeForDelegationSchemaHash\n573-function_definition-109-117", type_label=function_definition];
610 [label="117_ generateRevokeStakeForDelegationSchemaHash\n610-function_definition-118-121", type_label=function_definition];
626 [label="121_ generateAddAddressSchemaHash\n626-function_definition-122-125", type_label=function_definition];
642 [label="125_ generateVoteForDelegationSchemaHash\n642-function_definition-126-131", type_label=function_definition];
666 [label="131_ generateReleaseTokensSchemaHash\n666-function_definition-132-137", type_label=function_definition];
690 [label="137_ generateLockupTokensDelegationSchemaHash\n690-function_definition-138-142", type_label=function_definition];
713 [label="144_ Poll[] public polls;\n713-new_variable-145-145", type_label=new_variable];
730 [label="146_ createPoll\n730-function_definition-147-169", type_label=function_definition];
768 [label="155_ Poll newPoll = new Poll(\n      _ipfsHash,\n      _numOptions,\n      _startTime,\n      _endTime,\n      msg.sender,\n      _registry,\n      _signingLogic,\n      _pollAdmin\n      );\n768-new_variable-156-165", type_label=new_variable];
797 [label="165_ polls.push(newPoll);\n797-expression_statement-166-166", type_label=expression_statement];
812 [label="167_ return newPoll;\n812-return-168-168", type_label=return];
814 [label="169_ allPolls\n814-function_definition-170-172", type_label=function_definition];
825 [label="170_ return polls;\n825-return-171-171", type_label=return];
827 [label="172_ numPolls\n827-function_definition-173-175", type_label=function_definition];
836 [label="173_ return polls.length;\n836-return-174-174", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
12 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
25 -> 34  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
70 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 100  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
100 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 112  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
112 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
172 -> 183  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
183 -> 191  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
195 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
203 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
207 -> 211  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
211 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 219  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
223 -> 231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
240 -> 262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
262 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
281 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
313 -> 327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
382 -> 398  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
730 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 797  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
814 -> 825  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
825 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
827 -> 836  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
836 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
