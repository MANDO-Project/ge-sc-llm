digraph  {
13 [label="2_ uint constant DONATING_X = 20;\n13-new_variable-3-3", method="", type_label=new_variable];
18 [label="3_ uint constant JACKPOT_FEE = 10;\n18-new_variable-4-4", method="", type_label=new_variable];
23 [label="4_ uint constant JACKPOT_MODULO = 1000;\n23-new_variable-5-5", method="", type_label=new_variable];
28 [label="5_ uint constant DEV_FEE = 20;\n28-new_variable-6-6", method="", type_label=new_variable];
33 [label="6_ uint constant WIN_X = 1900;\n33-new_variable-7-7", method="", type_label=new_variable];
38 [label="7_ uint constant MIN_BET = 0.01 ether;\n38-new_variable-8-8", method="", type_label=new_variable];
44 [label="8_ uint constant MAX_BET = 1 ether;\n44-new_variable-9-9", method="", type_label=new_variable];
50 [label="9_ uint constant BET_EXPIRATION_BLOCKS = 250;\n50-new_variable-10-10", method="", type_label=new_variable];
55 [label="10_ address public owner;\n55-new_variable-11-11", method="", type_label=new_variable];
60 [label="11_ address public autoPlayBot;\n60-new_variable-12-12", method="", type_label=new_variable];
65 [label="12_ address public secretSigner;\n65-new_variable-13-13", method="", type_label=new_variable];
70 [label="13_ address private whale;\n70-new_variable-14-14", method="", type_label=new_variable];
75 [label="14_ uint256 public jackpotSize;\n75-new_variable-15-15", method="", type_label=new_variable];
80 [label="15_ uint256 public devFeeSize;\n80-new_variable-16-16", method="", type_label=new_variable];
85 [label="16_ uint256 public lockedInBets;\n85-new_variable-17-17", method="", type_label=new_variable];
90 [label="17_ uint256 public totalAmountToWhale;\n90-new_variable-18-18", method="", type_label=new_variable];
95 [label="18_ struct Bet {\n        uint amount;\n        uint256 blockNumber;\n        bool betMask;\n        address player;\n    }\n95-expression_statement-19-24", method="Bet()", type_label=expression_statement];
113 [label="24_ mapping (uint => Bet) bets;\n113-new_variable-25-25", method="", type_label=new_variable];
120 [label="25_ mapping (address => uint) donateAmount;\n120-new_variable-26-26", method="", type_label=new_variable];
264 [label="35_ owner = msg.sender;\n264-expression_statement-36-36", method="", type_label=expression_statement];
270 [label="36_ autoPlayBot = autoPlayBotAddress;\n270-expression_statement-37-37", method="", type_label=expression_statement];
274 [label="37_ whale = whaleAddress;\n274-expression_statement-38-38", method="", type_label=expression_statement];
278 [label="38_ secretSigner = secretSignerAddress;\n278-expression_statement-39-39", method="", type_label=expression_statement];
282 [label="39_ jackpotSize = 0;\n282-expression_statement-40-40", method="", type_label=expression_statement];
286 [label="40_ devFeeSize = 0;\n286-expression_statement-41-41", method="", type_label=expression_statement];
290 [label="41_ lockedInBets = 0;\n290-expression_statement-42-42", method="", type_label=expression_statement];
294 [label="42_ totalAmountToWhale = 0;\n294-expression_statement-43-43", method="", type_label=expression_statement];
298 [label="44_ modifier onlyOwner() {\n        require (msg.sender == owner, \"You are not the owner of this contract!\");\n        _;\n    }\n298-expression_statement-45-48", method="", type_label=expression_statement];
301 [label="45_ require (msg.sender == owner, \"You are not the owner of this contract!\");\n301-expression_statement-46-46", method="", type_label=expression_statement];
313 [label="46_ _;\n313-expression_statement-47-47", method="", type_label=expression_statement];
315 [label="48_ modifier onlyBot() {\n        require (msg.sender == autoPlayBot, \"You are not the bot of this contract!\");\n        _;\n    }\n315-expression_statement-49-52", method="", type_label=expression_statement];
318 [label="49_ require (msg.sender == autoPlayBot, \"You are not the bot of this contract!\");\n318-expression_statement-50-50", method="", type_label=expression_statement];
330 [label="50_ _;\n330-expression_statement-51-51", method="", type_label=expression_statement];
332 [label="52_ modifier checkContractHealth() {\n        require (address(this).balance >= lockedInBets + jackpotSize + devFeeSize, \"This contract doesn't have enough balance, it is stopped till someone donate to this game!\");\n        _;\n    }\n332-expression_statement-53-56", method="", type_label=expression_statement];
335 [label="53_ require (address(this).balance >= lockedInBets + jackpotSize + devFeeSize, \"This contract doesn't have enough balance, it is stopped till someone donate to this game!\");\n335-expression_statement-54-54", method="", type_label=expression_statement];
353 [label="54_ _;\n353-expression_statement-55-55", method="", type_label=expression_statement];
359 [label="57_ function setBotAddress(address autoPlayBotAddress)\n    onlyOwner() \n    external \n    {\n        autoPlayBot = autoPlayBotAddress;\n    }\n359-function_definition-58-63", method="setBotAddress(address autoPlayBotAddress)", type_label=function_definition];
365 [label="58_ onlyOwner()\n365-expression_statement-59-59", method="setBotAddress(address autoPlayBotAddress)", type_label=expression_statement];
369 [label="61_ autoPlayBot = autoPlayBotAddress;\n369-expression_statement-62-62", method="setBotAddress(address autoPlayBotAddress)", type_label=expression_statement];
373 [label="63_ function setSecretSigner(address _secretSigner)\n    onlyOwner()  \n    external\n    {\n        secretSigner = _secretSigner;\n    }\n373-function_definition-64-69", method="setSecretSigner(address _secretSigner)", type_label=function_definition];
379 [label="64_ onlyOwner()\n379-expression_statement-65-65", method="setSecretSigner(address _secretSigner)", type_label=expression_statement];
383 [label="67_ secretSigner = _secretSigner;\n383-expression_statement-68-68", method="setSecretSigner(address _secretSigner)", type_label=expression_statement];
387 [label="69_ function wager(bool bMask, uint ticketID, uint ticketLastBlock, uint8 v, bytes32 r, bytes32 s)  \n    checkContractHealth()\n    external\n    payable { \n        Bet storage bet = bets[ticketID];\n        uint amount = msg.value;\n        address player = msg.sender;\n        require (bet.player == address(0), \"Ticket is not new one!\");\n        require (amount >= MIN_BET, \"Your bet is lower than minimum bet amount\");\n        require (amount <= MAX_BET, \"Your bet is higher than maximum bet amount\");\n        require (getCollateralBalance() >= 2 * amount, \"If we accept this, this contract will be in danger!\");\n        require (block.number <= ticketLastBlock, \"Ticket has expired.\");\n        bytes32 signatureHash = keccak256(abi.encodePacked('\x19Ethereum Signed Message:\n37', uint40(ticketLastBlock), ticketID));\n        require (secretSigner == ecrecover(signatureHash, v, r, s), \"web3 vrs signature is not valid.\");\n        jackpotSize += amount * JACKPOT_FEE / 1000;\n        devFeeSize += amount * DEV_FEE / 1000;\n        lockedInBets += amount * WIN_X / 1000;\n        uint donate_amount = amount * DONATING_X / 1000;\n        whale.call.value(donate_amount)(bytes4(keccak256(\"donate()\")));\n        totalAmountToWhale += donate_amount;\n        bet.amount = amount;\n        bet.blockNumber = block.number;\n        bet.betMask = bMask;\n        bet.player = player;\n        emit Wager(ticketID, bet.amount, bet.blockNumber, bet.betMask, bet.player);\n    }\n387-function_definition-70-95", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=function_definition];
413 [label="70_ checkContractHealth()\n413-expression_statement-71-71", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
418 [label="73_ Bet storage bet = bets[ticketID];\n418-new_variable-74-74", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
427 [label="74_ uint amount = msg.value;\n427-new_variable-75-75", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
435 [label="75_ address player = msg.sender;\n435-new_variable-76-76", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
443 [label="76_ require (bet.player == address(0), \"Ticket is not new one!\");\n443-expression_statement-77-77", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
457 [label="77_ require (amount >= MIN_BET, \"Your bet is lower than minimum bet amount\");\n457-expression_statement-78-78", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
467 [label="78_ require (amount <= MAX_BET, \"Your bet is higher than maximum bet amount\");\n467-expression_statement-79-79", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
477 [label="79_ require (getCollateralBalance() >= 2 * amount, \"If we accept this, this contract will be in danger!\");\n477-expression_statement-80-80", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
490 [label="80_ require (block.number <= ticketLastBlock, \"Ticket has expired.\");\n490-expression_statement-81-81", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
502 [label="81_ bytes32 signatureHash = keccak256(abi.encodePacked('\x19Ethereum Signed Message:\n37', uint40(ticketLastBlock), ticketID));\n502-new_variable-82-82", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
523 [label="82_ require (secretSigner == ecrecover(signatureHash, v, r, s), \"web3 vrs signature is not valid.\");\n523-expression_statement-83-83", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
542 [label="83_ jackpotSize += amount * JACKPOT_FEE / 1000;\n542-expression_statement-84-84", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
550 [label="84_ devFeeSize += amount * DEV_FEE / 1000;\n550-expression_statement-85-85", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
558 [label="85_ lockedInBets += amount * WIN_X / 1000;\n558-expression_statement-86-86", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
566 [label="86_ uint donate_amount = amount * DONATING_X / 1000;\n566-new_variable-87-87", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=new_variable];
576 [label="87_ whale.call.value(donate_amount)(bytes4(keccak256(\"donate()\")));\n576-expression_statement-88-88", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
594 [label="88_ totalAmountToWhale += donate_amount;\n594-expression_statement-89-89", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
598 [label="89_ bet.amount = amount;\n598-expression_statement-90-90", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
604 [label="90_ bet.blockNumber = block.number;\n604-expression_statement-91-91", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
612 [label="91_ bet.betMask = bMask;\n612-expression_statement-92-92", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
618 [label="92_ bet.player = player;\n618-expression_statement-93-93", method="wager(bool bMask,uint ticketID,uint ticketLastBlock,uint8 v,bytes32 r,bytes32 s)", type_label=expression_statement];
644 [label="95_ function play(uint ticketReveal)\n    checkContractHealth()\n    external\n    {\n        uint ticketID = uint(keccak256(abi.encodePacked(ticketReveal)));\n        Bet storage bet = bets[ticketID];\n        require (bet.player != address(0), \"TicketID is not correct!\");\n        require (bet.amount != 0, \"Ticket is already used one!\");\n        uint256 blockNumber = bet.blockNumber;\n        if(blockNumber < block.number && blockNumber >= block.number - BET_EXPIRATION_BLOCKS)\n        {\n            uint256 random = uint256(keccak256(abi.encodePacked(blockhash(blockNumber),  ticketReveal)));\n            bool maskRes = (random % 2) !=0;\n            uint jackpotRes = random % JACKPOT_MODULO;\n            uint tossWinAmount = bet.amount * WIN_X / 1000;\n            uint tossWin = 0;\n            uint jackpotWin = 0;\n            if(bet.betMask == maskRes) {\n                tossWin = tossWinAmount;\n            }\n            if(jackpotRes == 0) {\n                jackpotWin = jackpotSize;\n                jackpotSize = 0;\n            }\n            if (jackpotWin > 0) {\n                emit JackpotPayment(bet.player, ticketID, jackpotWin);\n            }\n            if(tossWin + jackpotWin > 0)\n            {\n                payout(bet.player, tossWin + jackpotWin, ticketID, maskRes, jackpotRes);\n            }\n            else \n            {\n                loseWager(bet.player, bet.amount, ticketID, maskRes, jackpotRes);\n            }\n            lockedInBets -= tossWinAmount;\n            bet.amount = 0;\n        }\n        else\n        {\n            revert();\n        }\n    }\n644-function_definition-96-138", method="play(uint ticketReveal)", type_label=function_definition];
650 [label="96_ checkContractHealth()\n650-expression_statement-97-97", method="play(uint ticketReveal)", type_label=expression_statement];
654 [label="99_ uint ticketID = uint(keccak256(abi.encodePacked(ticketReveal)));\n654-new_variable-100-100", method="play(uint ticketReveal)", type_label=new_variable];
670 [label="100_ Bet storage bet = bets[ticketID];\n670-new_variable-101-101", method="play(uint ticketReveal)", type_label=new_variable];
679 [label="101_ require (bet.player != address(0), \"TicketID is not correct!\");\n679-expression_statement-102-102", method="play(uint ticketReveal)", type_label=expression_statement];
693 [label="102_ require (bet.amount != 0, \"Ticket is already used one!\");\n693-expression_statement-103-103", method="play(uint ticketReveal)", type_label=expression_statement];
705 [label="103_ uint256 blockNumber = bet.blockNumber;\n705-new_variable-104-104", method="play(uint ticketReveal)", type_label=new_variable];
713 [label="104_ if_blockNumber < block.number && blockNumber >= block.number - BET_EXPIRATION_BLOCKS\n713-if-105-137", method="play(uint ticketReveal)", type_label=if];
2300 [label="104_ end_if", method="play(uint ticketReveal)", type_label=end_if];
728 [label="106_ uint256 random = uint256(keccak256(abi.encodePacked(blockhash(blockNumber),  ticketReveal)));\n728-new_variable-107-107", method="play(uint ticketReveal)", type_label=new_variable];
749 [label="107_ bool maskRes = (random % 2) !=0;\n749-new_variable-108-108", method="play(uint ticketReveal)", type_label=new_variable];
760 [label="108_ uint jackpotRes = random % JACKPOT_MODULO;\n760-new_variable-109-109", method="play(uint ticketReveal)", type_label=new_variable];
768 [label="109_ uint tossWinAmount = bet.amount * WIN_X / 1000;\n768-new_variable-110-110", method="play(uint ticketReveal)", type_label=new_variable];
780 [label="110_ uint tossWin = 0;\n780-new_variable-111-111", method="play(uint ticketReveal)", type_label=new_variable];
786 [label="111_ uint jackpotWin = 0;\n786-new_variable-112-112", method="play(uint ticketReveal)", type_label=new_variable];
792 [label="112_ if_bet.betMask == maskRes\n792-if-113-115", method="play(uint ticketReveal)", type_label=if];
2379 [label="112_ end_if", method="play(uint ticketReveal)", type_label=end_if];
799 [label="113_ tossWin = tossWinAmount;\n799-expression_statement-114-114", method="play(uint ticketReveal)", type_label=expression_statement];
803 [label="115_ if_jackpotRes == 0\n803-if-116-119", method="play(uint ticketReveal)", type_label=if];
2390 [label="115_ end_if", method="play(uint ticketReveal)", type_label=end_if];
808 [label="116_ jackpotWin = jackpotSize;\n808-expression_statement-117-117", method="play(uint ticketReveal)", type_label=expression_statement];
812 [label="117_ jackpotSize = 0;\n812-expression_statement-118-118", method="play(uint ticketReveal)", type_label=expression_statement];
816 [label="119_ if_jackpotWin > 0\n816-if-120-122", method="play(uint ticketReveal)", type_label=if];
2403 [label="119_ end_if", method="play(uint ticketReveal)", type_label=end_if];
831 [label="122_ if_tossWin + jackpotWin > 0\n831-if-123-130", method="play(uint ticketReveal)", type_label=if];
2418 [label="122_ end_if", method="play(uint ticketReveal)", type_label=end_if];
838 [label="124_ payout(bet.player, tossWin + jackpotWin, ticketID, maskRes, jackpotRes);\n838-expression_statement-125-125", method="play(uint ticketReveal)", type_label=expression_statement];
856 [label="128_ loseWager(bet.player, bet.amount, ticketID, maskRes, jackpotRes);\n856-expression_statement-129-129", method="play(uint ticketReveal)", type_label=expression_statement];
873 [label="130_ lockedInBets -= tossWinAmount;\n873-expression_statement-131-131", method="play(uint ticketReveal)", type_label=expression_statement];
877 [label="131_ bet.amount = 0;\n877-expression_statement-132-132", method="play(uint ticketReveal)", type_label=expression_statement];
886 [label="138_ function donateForContractHealth()\n    external \n    payable\n    {\n        donateAmount[msg.sender] += msg.value;\n        emit Donate(msg.value, msg.sender);\n    }\n886-function_definition-139-145", method="donateForContractHealth()", type_label=function_definition];
891 [label="142_ donateAmount[msg.sender] += msg.value;\n891-expression_statement-143-143", method="donateForContractHealth()", type_label=expression_statement];
911 [label="145_ function withdrawDonation(uint amount)\n    external \n    {\n        require(donateAmount[msg.sender] >= amount, \"You are going to withdraw more than you donated!\");\n        if (sendFunds(msg.sender, amount)){\n            donateAmount[msg.sender] -= amount;\n        }\n    }\n911-function_definition-146-153", method="withdrawDonation(uint amount)", type_label=function_definition];
919 [label="148_ require(donateAmount[msg.sender] >= amount, \"You are going to withdraw more than you donated!\");\n919-expression_statement-149-149", method="withdrawDonation(uint amount)", type_label=expression_statement];
933 [label="149_ if\n933-if-150-152", method="withdrawDonation(uint amount)", type_label=if];
2520 [label="149_ end_if", method="withdrawDonation(uint amount)", type_label=end_if];
943 [label="150_ donateAmount[msg.sender] -= amount;\n943-expression_statement-151-151", method="withdrawDonation(uint amount)", type_label=expression_statement];
951 [label="153_ function refund(uint ticketID)\n    checkContractHealth()\n    external {\n        Bet storage bet = bets[ticketID];\n        require (bet.amount != 0, \"this ticket has no balance\");\n        require (block.number > bet.blockNumber + BET_EXPIRATION_BLOCKS, \"this ticket is expired.\");\n        sendRefund(ticketID);\n    }\n951-function_definition-154-161", method="refund(uint ticketID)", type_label=function_definition];
957 [label="154_ checkContractHealth()\n957-expression_statement-155-155", method="refund(uint ticketID)", type_label=expression_statement];
961 [label="156_ Bet storage bet = bets[ticketID];\n961-new_variable-157-157", method="refund(uint ticketID)", type_label=new_variable];
970 [label="157_ require (bet.amount != 0, \"this ticket has no balance\");\n970-expression_statement-158-158", method="refund(uint ticketID)", type_label=expression_statement];
982 [label="158_ require (block.number > bet.blockNumber + BET_EXPIRATION_BLOCKS, \"this ticket is expired.\");\n982-expression_statement-159-159", method="refund(uint ticketID)", type_label=expression_statement];
998 [label="159_ sendRefund(ticketID);\n998-expression_statement-160-160", method="refund(uint ticketID)", type_label=expression_statement];
1003 [label="161_ function withdrawDevFee(address withdrawAddress, uint withdrawAmount)\n    onlyOwner()\n    checkContractHealth() \n    external {\n        require (devFeeSize >= withdrawAmount, \"You are trying to withdraw more amount than developer fee.\");\n        require (withdrawAmount <= address(this).balance, \"Contract balance is lower than withdrawAmount\");\n        require (devFeeSize <= address(this).balance, \"Not enough funds to withdraw.\");\n        if (sendFunds(withdrawAddress, withdrawAmount)){\n            devFeeSize -= withdrawAmount;\n        }\n    }\n1003-function_definition-162-172", method="withdrawDevFee(address withdrawAddress,uint withdrawAmount)", type_label=function_definition];
1013 [label="162_ onlyOwner()\n1013-expression_statement-163-163", method="withdrawDevFee(address withdrawAddress,uint withdrawAmount)", type_label=expression_statement];
1015 [label="163_ checkContractHealth()\n1015-expression_statement-164-164", method="withdrawDevFee(address withdrawAddress,uint withdrawAmount)", type_label=expression_statement];
1019 [label="165_ require (devFeeSize >= withdrawAmount, \"You are trying to withdraw more amount than developer fee.\");\n1019-expression_statement-166-166", method="withdrawDevFee(address withdrawAddress,uint withdrawAmount)", type_label=expression_statement];
1029 [label="166_ require (withdrawAmount <= address(this).balance, \"Contract balance is lower than withdrawAmount\");\n1029-expression_statement-167-167", method="withdrawDevFee(address withdrawAddress,uint withdrawAmount)", type_label=expression_statement];
1043 [label="167_ require (devFeeSize <= address(this).balance, \"Not enough funds to withdraw.\");\n1043-expression_statement-168-168", method="withdrawDevFee(address withdrawAddress,uint withdrawAmount)", type_label=expression_statement];
1057 [label="168_ if\n1057-if-169-171", method="withdrawDevFee(address withdrawAddress,uint withdrawAmount)", type_label=if];
2644 [label="168_ end_if", method="withdrawDevFee(address withdrawAddress,uint withdrawAmount)", type_label=end_if];
1065 [label="169_ devFeeSize -= withdrawAmount;\n1065-expression_statement-170-170", method="withdrawDevFee(address withdrawAddress,uint withdrawAmount)", type_label=expression_statement];
1069 [label="172_ function withdrawBotFee(uint withdrawAmount)\n    onlyBot()\n    checkContractHealth() \n    external {\n        require (devFeeSize >= withdrawAmount, \"You are trying to withdraw more amount than developer fee.\");\n        require (withdrawAmount <= address(this).balance, \"Contract balance is lower than withdrawAmount\");\n        require (devFeeSize <= address(this).balance, \"Not enough funds to withdraw.\");\n        if (sendFunds(autoPlayBot, withdrawAmount)){\n            devFeeSize -= withdrawAmount;\n        }\n    }\n1069-function_definition-173-183", method="withdrawBotFee(uint withdrawAmount)", type_label=function_definition];
1075 [label="173_ onlyBot()\n1075-expression_statement-174-174", method="withdrawBotFee(uint withdrawAmount)", type_label=expression_statement];
1077 [label="174_ checkContractHealth()\n1077-expression_statement-175-175", method="withdrawBotFee(uint withdrawAmount)", type_label=expression_statement];
1081 [label="176_ require (devFeeSize >= withdrawAmount, \"You are trying to withdraw more amount than developer fee.\");\n1081-expression_statement-177-177", method="withdrawBotFee(uint withdrawAmount)", type_label=expression_statement];
1091 [label="177_ require (withdrawAmount <= address(this).balance, \"Contract balance is lower than withdrawAmount\");\n1091-expression_statement-178-178", method="withdrawBotFee(uint withdrawAmount)", type_label=expression_statement];
1105 [label="178_ require (devFeeSize <= address(this).balance, \"Not enough funds to withdraw.\");\n1105-expression_statement-179-179", method="withdrawBotFee(uint withdrawAmount)", type_label=expression_statement];
1119 [label="179_ if\n1119-if-180-182", method="withdrawBotFee(uint withdrawAmount)", type_label=if];
2706 [label="179_ end_if", method="withdrawBotFee(uint withdrawAmount)", type_label=end_if];
1127 [label="180_ devFeeSize -= withdrawAmount;\n1127-expression_statement-181-181", method="withdrawBotFee(uint withdrawAmount)", type_label=expression_statement];
1131 [label="183_ function getBetInfo(uint ticketID) \n    constant\n    external \n    returns (uint, uint256, bool, address){\n        Bet storage bet = bets[ticketID];\n        return (bet.amount, bet.blockNumber, bet.betMask, bet.player);\n    }\n1131-function_definition-184-190", method="getBetInfo(uint ticketID)", type_label=function_definition];
1137 [label="184_ constant\n1137-expression_statement-185-185", method="getBetInfo(uint ticketID)", type_label=expression_statement];
1154 [label="187_ Bet storage bet = bets[ticketID];\n1154-new_variable-188-188", method="getBetInfo(uint ticketID)", type_label=new_variable];
1163 [label="188_ return (bet.amount, bet.blockNumber, bet.betMask, bet.player);\n1163-return-189-189", method="getBetInfo(uint ticketID)", type_label=return];
1177 [label="190_ function getContractBalance() \n    constant\n    external \n    returns (uint){\n        return address(this).balance;\n    }\n1177-function_definition-191-196", method="getContractBalance()", type_label=function_definition];
1179 [label="191_ constant\n1179-expression_statement-192-192", method="getContractBalance()", type_label=expression_statement];
1187 [label="194_ return address(this).balance;\n1187-return-195-195", method="getContractBalance()", type_label=return];
1193 [label="196_ function getCollateralBalance() \n    constant\n    public \n    returns (uint){\n        if (address(this).balance > lockedInBets + jackpotSize + devFeeSize)\n            return address(this).balance - lockedInBets - jackpotSize - devFeeSize;\n        return 0;\n    }\n1193-function_definition-197-204", method="getCollateralBalance()", type_label=function_definition];
1195 [label="197_ constant\n1195-expression_statement-198-198", method="getCollateralBalance()", type_label=expression_statement];
1203 [label="200_ if_address(this).balance > lockedInBets + jackpotSize + devFeeSize\n1203-if-201-202", method="getCollateralBalance()", type_label=if];
2790 [label="200_ end_if", method="getCollateralBalance()", type_label=end_if];
1215 [label="201_ return address(this).balance - lockedInBets - jackpotSize - devFeeSize;\n1215-return-202-202", method="getCollateralBalance()", type_label=return];
1227 [label="202_ return 0;\n1227-return-203-203", method="getCollateralBalance()", type_label=return];
1229 [label="204_ function kill() external onlyOwner() {\n        require (lockedInBets == 0, \"All bets should be processed (settled or refunded) before self-destruct.\");\n        selfdestruct(owner);\n    }\n1229-function_definition-205-208", method="kill()", type_label=function_definition];
1232 [label="204_ onlyOwner()\n1232-expression_statement-205-205", method="kill()", type_label=expression_statement];
1235 [label="205_ require (lockedInBets == 0, \"All bets should be processed (settled or refunded) before self-destruct.\");\n1235-expression_statement-206-206", method="kill()", type_label=expression_statement];
1245 [label="206_ selfdestruct(owner);\n1245-expression_statement-207-207", method="kill()", type_label=expression_statement];
1250 [label="208_ function payout(address winner, uint ethToTransfer, uint ticketID, bool maskRes, uint jackpotRes) \n    internal \n    {        \n        winner.transfer(ethToTransfer);\n        emit Win(winner, ethToTransfer, ticketID, maskRes, jackpotRes);\n    }\n1250-function_definition-209-214", method="payout(address winner,uint ethToTransfer,uint ticketID,bool maskRes,uint jackpotRes)", type_label=function_definition];
1274 [label="211_ winner.transfer(ethToTransfer);\n1274-expression_statement-212-212", method="payout(address winner,uint ethToTransfer,uint ticketID,bool maskRes,uint jackpotRes)", type_label=expression_statement];
1293 [label="214_ function sendRefund(uint ticketID) \n    internal \n    {\n        Bet storage bet = bets[ticketID];\n        address requester = bet.player;\n        uint256 ethToTransfer = bet.amount;        \n        requester.transfer(ethToTransfer);\n        uint tossWinAmount = bet.amount * WIN_X / 1000;\n        lockedInBets -= tossWinAmount;\n        bet.amount = 0;\n        emit Refund(ticketID, ethToTransfer, requester);\n    }\n1293-function_definition-215-226", method="sendRefund(uint ticketID)", type_label=function_definition];
1301 [label="217_ Bet storage bet = bets[ticketID];\n1301-new_variable-218-218", method="sendRefund(uint ticketID)", type_label=new_variable];
1310 [label="218_ address requester = bet.player;\n1310-new_variable-219-219", method="sendRefund(uint ticketID)", type_label=new_variable];
1318 [label="219_ uint256 ethToTransfer = bet.amount;\n1318-new_variable-220-220", method="sendRefund(uint ticketID)", type_label=new_variable];
1326 [label="220_ requester.transfer(ethToTransfer);\n1326-expression_statement-221-221", method="sendRefund(uint ticketID)", type_label=expression_statement];
1333 [label="221_ uint tossWinAmount = bet.amount * WIN_X / 1000;\n1333-new_variable-222-222", method="sendRefund(uint ticketID)", type_label=new_variable];
1345 [label="222_ lockedInBets -= tossWinAmount;\n1345-expression_statement-223-223", method="sendRefund(uint ticketID)", type_label=expression_statement];
1349 [label="223_ bet.amount = 0;\n1349-expression_statement-224-224", method="sendRefund(uint ticketID)", type_label=expression_statement];
1363 [label="226_ function sendFunds(address paidUser, uint amount) private returns (bool){\n        bool success = paidUser.send(amount);\n        if (success) {\n            emit Payment(paidUser, amount);\n        } else {\n            emit FailedPayment(paidUser, amount);\n        }\n        return success;\n    }\n1363-function_definition-227-235", method="sendFunds(address paidUser,uint amount)", type_label=function_definition];
1379 [label="227_ bool success = paidUser.send(amount);\n1379-new_variable-228-228", method="sendFunds(address paidUser,uint amount)", type_label=new_variable];
1390 [label="228_ if\n1390-if-229-233", method="sendFunds(address paidUser,uint amount)", type_label=if];
2977 [label="228_ end_if", method="sendFunds(address paidUser,uint amount)", type_label=end_if];
1406 [label="233_ return success;\n1406-return-234-234", method="sendFunds(address paidUser,uint amount)", type_label=return];
1408 [label="235_ function loseWager(address player, uint amount, uint ticketID, bool maskRes, uint jackpotRes) \n    internal \n    {\n        emit Lose(player, amount, ticketID, maskRes, jackpotRes);\n    }\n1408-function_definition-236-240", method="loseWager(address player,uint amount,uint ticketID,bool maskRes,uint jackpotRes)", type_label=function_definition];
1444 [label="240_ function clearStorage(uint[] toCleanTicketIDs) external {\n        uint length = toCleanTicketIDs.length;\n        for (uint i = 0; i < length; i++) {\n            clearProcessedBet(toCleanTicketIDs[i]);\n        }\n    }\n1444-function_definition-241-246", method="clearStorage(uint[] toCleanTicketIDs)", type_label=function_definition];
1453 [label="241_ uint length = toCleanTicketIDs.length;\n1453-new_variable-242-242", method="clearStorage(uint[] toCleanTicketIDs)", type_label=new_variable];
1461 [label="242_ for(i < length;;i++)\n1461-for-243-245", method="clearStorage(uint[] toCleanTicketIDs)", type_label=for];
3048 [label="242_ end_loop", method="clearStorage(uint[] toCleanTicketIDs)", type_label=end_loop];
1472 [label="242_ i++\n1472-expression_statement-243-243", method="clearStorage(uint[] toCleanTicketIDs)", type_label=expression_statement];
1475 [label="243_ clearProcessedBet(toCleanTicketIDs[i]);\n1475-expression_statement-244-244", method="clearStorage(uint[] toCleanTicketIDs)", type_label=expression_statement];
1482 [label="246_ function clearProcessedBet(uint ticketID) private {\n        Bet storage bet = bets[ticketID];\n        if (bet.amount != 0 || block.number <= bet.blockNumber + BET_EXPIRATION_BLOCKS) {\n            return;\n        }\n        bet.blockNumber = 0;\n        bet.betMask = false;\n        bet.player = address(0);\n    }\n1482-function_definition-247-255", method="clearProcessedBet(uint ticketID)", type_label=function_definition];
1490 [label="247_ Bet storage bet = bets[ticketID];\n1490-new_variable-248-248", method="clearProcessedBet(uint ticketID)", type_label=new_variable];
1499 [label="248_ if_bet.amount != 0 || block.number <= bet.blockNumber + BET_EXPIRATION_BLOCKS\n1499-if-249-251", method="clearProcessedBet(uint ticketID)", type_label=if];
3086 [label="248_ end_if", method="clearProcessedBet(uint ticketID)", type_label=end_if];
1516 [label="249_ return;\n1516-return-250-250", method="clearProcessedBet(uint ticketID)", type_label=return];
1517 [label="251_ bet.blockNumber = 0;\n1517-expression_statement-252-252", method="clearProcessedBet(uint ticketID)", type_label=expression_statement];
1523 [label="252_ bet.betMask = false;\n1523-expression_statement-253-253", method="clearProcessedBet(uint ticketID)", type_label=expression_statement];
1530 [label="253_ bet.player = address(0);\n1530-expression_statement-254-254", method="clearProcessedBet(uint ticketID)", type_label=expression_statement];
1538 [label="255_ function transferAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens) \n    public \n    onlyOwner() \n    returns (bool success) \n    {\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\n    }\n1538-function_definition-256-262", method="transferAnyERC20Token(address tokenAddress,address tokenOwner,uint tokens)", type_label=function_definition];
1553 [label="257_ onlyOwner()\n1553-expression_statement-258-258", method="transferAnyERC20Token(address tokenAddress,address tokenOwner,uint tokens)", type_label=expression_statement];
1561 [label="260_ return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\n1561-return-261-261", method="transferAnyERC20Token(address tokenAddress,address tokenOwner,uint tokens)", type_label=return];
1576 [label="265_ function transfer(address to, uint256 tokens) public returns (bool success);\n1576-function_definition-266-266", method="transfer(address to,uint256 tokens)", type_label=function_definition];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
884;
1400;
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
18 -> 23  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
23 -> 28  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
28 -> 33  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
33 -> 38  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
38 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 55  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 60  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
60 -> 65  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
65 -> 70  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
70 -> 75  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 85  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
85 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
90 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 120  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
264 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
270 -> 274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
274 -> 278  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
278 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
286 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
290 -> 294  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
298 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
301 -> 313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
315 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
318 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 383  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
387 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 467  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
467 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 542  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
542 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
550 -> 558  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
558 -> 566  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
566 -> 576  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
576 -> 594  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
594 -> 598  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
598 -> 604  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
604 -> 612  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
612 -> 618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
644 -> 654  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 670  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 693  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
693 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
705 -> 713  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
713 -> 728  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
2300 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
728 -> 749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
760 -> 768  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
768 -> 780  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 786  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
786 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 799  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
792 -> 2379  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2379 -> 803  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 2379  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
803 -> 808  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
803 -> 2390  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2390 -> 816  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 812  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
812 -> 2390  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
816 -> 2403  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
831 -> 838  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
831 -> 856  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2418 -> 873  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
838 -> 2418  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
856 -> 2418  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
873 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 2300  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
886 -> 891  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
911 -> 919  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
919 -> 933  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
933 -> 943  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
933 -> 2520  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2520 -> 951  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
943 -> 2520  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
951 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 970  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
970 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
982 -> 998  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1019  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1013 -> 1015  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1019 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1043  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1043 -> 1057  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1057 -> 1065  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1057 -> 2644  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2644 -> 1069  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1065 -> 2644  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1069 -> 1081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1075 -> 1077  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1081 -> 1091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1091 -> 1105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1105 -> 1119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1119 -> 1127  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1119 -> 2706  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2706 -> 1131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1127 -> 2706  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1131 -> 1154  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1154 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1177 -> 1187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1187 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1193 -> 1203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 1215  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1203 -> 2790  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2790 -> 1227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1215 -> 2790  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1215 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1227 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1229 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1235 -> 1245  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1250 -> 1274  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1293 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1301 -> 1310  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1310 -> 1318  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1318 -> 1326  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1326 -> 1333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1333 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1345 -> 1349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1363 -> 1379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1379 -> 1390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1406 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1444 -> 1453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1453 -> 1461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1461 -> 1475  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1461 -> 3048  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3048 -> 1482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1472 -> 1461  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1475 -> 1472  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1482 -> 1490  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1490 -> 1499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1499 -> 1516  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1499 -> 3086  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
3086 -> 1517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1516 -> 3086  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1516 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1517 -> 1523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1523 -> 1530  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1538 -> 1561  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1561 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
884 -> 2300  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1400 -> 2977  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
