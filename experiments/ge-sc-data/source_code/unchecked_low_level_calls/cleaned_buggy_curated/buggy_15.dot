digraph  {
13 [label="2_ function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n13-function_definition-3-3", method="receiveApproval(address _from,uint256 _value,address _token,bytes calldata _extraData)", type_label=function_definition];
35 [label="5_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n35-function_definition-6-7", method="bug_unchk_send17()", type_label=function_definition];
40 [label="6_ msg.sender.transfer(1 ether);\n40-expression_statement-7-7", method="bug_unchk_send17()", type_label=expression_statement];
50 [label="7_ string public name;\n50-new_variable-8-8", method="", type_label=new_variable];
55 [label="8_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n55-function_definition-9-10", method="bug_unchk_send3()", type_label=function_definition];
60 [label="9_ msg.sender.transfer(1 ether);\n60-expression_statement-10-10", method="bug_unchk_send3()", type_label=expression_statement];
70 [label="10_ string public symbol;\n70-new_variable-11-11", method="", type_label=new_variable];
75 [label="11_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n75-function_definition-12-13", method="bug_unchk_send9()", type_label=function_definition];
80 [label="12_ msg.sender.transfer(1 ether);\n80-expression_statement-13-13", method="bug_unchk_send9()", type_label=expression_statement];
90 [label="13_ uint8 public decimals = 18;\n90-new_variable-14-14", method="", type_label=new_variable];
96 [label="14_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n96-function_definition-15-16", method="bug_unchk_send25()", type_label=function_definition];
101 [label="15_ msg.sender.transfer(1 ether);\n101-expression_statement-16-16", method="bug_unchk_send25()", type_label=expression_statement];
111 [label="16_ uint256 public totalSupply;\n111-new_variable-17-17", method="", type_label=new_variable];
116 [label="17_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n116-function_definition-18-19", method="bug_unchk_send19()", type_label=function_definition];
121 [label="18_ msg.sender.transfer(1 ether);\n121-expression_statement-19-19", method="bug_unchk_send19()", type_label=expression_statement];
131 [label="19_ mapping (address => uint256) public balanceOf;\n131-new_variable-20-20", method="", type_label=new_variable];
138 [label="20_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n138-function_definition-21-22", method="bug_unchk_send26()", type_label=function_definition];
143 [label="21_ msg.sender.transfer(1 ether);\n143-expression_statement-22-22", method="bug_unchk_send26()", type_label=expression_statement];
153 [label="22_ mapping (address => mapping (address => uint256)) public allowance;\n153-new_variable-23-23", method="", type_label=new_variable];
162 [label="23_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n162-function_definition-24-25", method="bug_unchk_send27()", type_label=function_definition];
167 [label="24_ msg.sender.transfer(1 ether);\n167-expression_statement-25-25", method="bug_unchk_send27()", type_label=expression_statement];
191 [label="26_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n191-function_definition-27-28", method="bug_unchk_send31()", type_label=function_definition];
196 [label="27_ msg.sender.transfer(1 ether);\n196-expression_statement-28-28", method="bug_unchk_send31()", type_label=expression_statement];
220 [label="29_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n220-function_definition-30-31", method="bug_unchk_send13()", type_label=function_definition];
225 [label="30_ msg.sender.transfer(1 ether);\n225-expression_statement-31-31", method="bug_unchk_send13()", type_label=expression_statement];
259 [label="37_ totalSupply = initialSupply * 10 ** uint256(decimals);\n259-expression_statement-38-38", method="", type_label=expression_statement];
269 [label="38_ balanceOf[msg.sender] = totalSupply;\n269-expression_statement-39-39", method="", type_label=expression_statement];
277 [label="39_ name = tokenName;\n277-expression_statement-40-40", method="", type_label=expression_statement];
281 [label="40_ symbol = tokenSymbol;\n281-expression_statement-41-41", method="", type_label=expression_statement];
285 [label="42_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n285-function_definition-43-44", method="bug_unchk_send20()", type_label=function_definition];
290 [label="43_ msg.sender.transfer(1 ether);\n290-expression_statement-44-44", method="bug_unchk_send20()", type_label=expression_statement];
300 [label="44_ function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0x0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n300-function_definition-45-54", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
316 [label="45_ require(_to != address(0x0));\n316-expression_statement-46-46", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
325 [label="46_ require(balanceOf[_from] >= _value);\n325-expression_statement-47-47", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
334 [label="47_ require(balanceOf[_to] + _value >= balanceOf[_to]);\n334-expression_statement-48-48", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
347 [label="48_ uint previousBalances = balanceOf[_from] + balanceOf[_to];\n347-new_variable-49-49", method="_transfer(address _from,address _to,uint _value)", type_label=new_variable];
359 [label="49_ balanceOf[_from] -= _value;\n359-expression_statement-50-50", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
365 [label="50_ balanceOf[_to] += _value;\n365-expression_statement-51-51", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
379 [label="52_ assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n379-expression_statement-53-53", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
392 [label="54_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n392-function_definition-55-56", method="bug_unchk_send32()", type_label=function_definition];
397 [label="55_ msg.sender.transfer(1 ether);\n397-expression_statement-56-56", method="bug_unchk_send32()", type_label=expression_statement];
407 [label="56_ function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n407-function_definition-57-60", method="transfer(address _to,uint256 _value)", type_label=function_definition];
424 [label="57_ _transfer(msg.sender, _to, _value);\n424-expression_statement-58-58", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
435 [label="58_ return true;\n435-return-59-59", method="transfer(address _to,uint256 _value)", type_label=return];
438 [label="60_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n438-function_definition-61-62", method="bug_unchk_send4()", type_label=function_definition];
443 [label="61_ msg.sender.transfer(1 ether);\n443-expression_statement-62-62", method="bug_unchk_send4()", type_label=expression_statement];
453 [label="62_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);      \n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n453-function_definition-63-68", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
474 [label="63_ require(_value <= allowance[_from][msg.sender]);\n474-expression_statement-64-64", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
487 [label="64_ allowance[_from][msg.sender] -= _value;\n487-expression_statement-65-65", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
497 [label="65_ _transfer(_from, _to, _value);\n497-expression_statement-66-66", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
506 [label="66_ return true;\n506-return-67-67", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
509 [label="68_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n509-function_definition-69-70", method="bug_unchk_send7()", type_label=function_definition];
514 [label="69_ msg.sender.transfer(1 ether);\n514-expression_statement-70-70", method="bug_unchk_send7()", type_label=expression_statement];
524 [label="70_ function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n524-function_definition-71-76", method="approve(address _spender,uint256 _value)", type_label=function_definition];
541 [label="72_ allowance[msg.sender][_spender] = _value;\n541-expression_statement-73-73", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
561 [label="74_ return true;\n561-return-75-75", method="approve(address _spender,uint256 _value)", type_label=return];
564 [label="76_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n564-function_definition-77-78", method="bug_unchk_send23()", type_label=function_definition];
569 [label="77_ msg.sender.transfer(1 ether);\n569-expression_statement-78-78", method="bug_unchk_send23()", type_label=expression_statement];
579 [label="78_ function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n579-function_definition-79-87", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=function_definition];
600 [label="81_ tokenRecipient spender = tokenRecipient(_spender);\n600-new_variable-82-82", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=new_variable];
610 [label="82_ if\n610-if-83-86", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=if];
1403 [label="82_ end_if", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=end_if];
618 [label="83_ spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n618-expression_statement-84-84", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=expression_statement];
635 [label="84_ return true;\n635-return-85-85", method="approveAndCall(address _spender,uint256 _value,bytes memory _extraData)", type_label=return];
638 [label="87_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n638-function_definition-88-89", method="bug_unchk_send14()", type_label=function_definition];
643 [label="88_ msg.sender.transfer(1 ether);\n643-expression_statement-89-89", method="bug_unchk_send14()", type_label=expression_statement];
653 [label="89_ function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);    \n        balanceOf[msg.sender] -= _value;             \n        totalSupply -= _value;                       \n        emit Burn(msg.sender, _value);\n        return true;\n    }\n653-function_definition-90-96", method="burn(uint256 _value)", type_label=function_definition];
666 [label="90_ require(balanceOf[msg.sender] >= _value);\n666-expression_statement-91-91", method="burn(uint256 _value)", type_label=expression_statement];
677 [label="91_ balanceOf[msg.sender] -= _value;\n677-expression_statement-92-92", method="burn(uint256 _value)", type_label=expression_statement];
685 [label="92_ totalSupply -= _value;\n685-expression_statement-93-93", method="burn(uint256 _value)", type_label=expression_statement];
697 [label="94_ return true;\n697-return-95-95", method="burn(uint256 _value)", type_label=return];
700 [label="96_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n700-function_definition-97-98", method="bug_unchk_send30()", type_label=function_definition];
705 [label="97_ msg.sender.transfer(1 ether);\n705-expression_statement-98-98", method="bug_unchk_send30()", type_label=expression_statement];
715 [label="98_ function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                 \n        require(_value <= allowance[_from][msg.sender]);     \n        balanceOf[_from] -= _value;                          \n        allowance[_from][msg.sender] -= _value;              \n        totalSupply -= _value;                               \n        emit Burn(_from, _value);\n        return true;\n    }\n715-function_definition-99-107", method="burnFrom(address _from,uint256 _value)", type_label=function_definition];
732 [label="99_ require(balanceOf[_from] >= _value);\n732-expression_statement-100-100", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
741 [label="100_ require(_value <= allowance[_from][msg.sender]);\n741-expression_statement-101-101", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
754 [label="101_ balanceOf[_from] -= _value;\n754-expression_statement-102-102", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
760 [label="102_ allowance[_from][msg.sender] -= _value;\n760-expression_statement-103-103", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
770 [label="103_ totalSupply -= _value;\n770-expression_statement-104-104", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
780 [label="105_ return true;\n780-return-106-106", method="burnFrom(address _from,uint256 _value)", type_label=return];
783 [label="107_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n783-function_definition-108-109", method="bug_unchk_send8()", type_label=function_definition];
788 [label="108_ msg.sender.transfer(1 ether);\n788-expression_statement-109-109", method="bug_unchk_send8()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
35 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 60  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
96 -> 101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
116 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
138 -> 143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 167  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
191 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
259 -> 269  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
269 -> 277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
277 -> 281  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
285 -> 290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 316  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
316 -> 325  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
325 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 347  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
347 -> 359  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
359 -> 365  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
392 -> 397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 424  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
424 -> 435  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
435 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
438 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
453 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 487  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
487 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
506 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
509 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
524 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
561 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
564 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 600  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
600 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 618  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
610 -> 1403  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1403 -> 638  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 635  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
635 -> 1403  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
635 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
638 -> 643  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
653 -> 666  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
666 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 685  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
697 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
700 -> 705  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
715 -> 732  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
741 -> 754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
754 -> 760  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
760 -> 770  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
783 -> 788  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
