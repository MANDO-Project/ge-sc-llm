digraph  {
12 [label="2_ mul\n12-function_definition-3-10", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", type_label=if];
749 [label="3_ end_if", type_label=end_if];
34 [label="4_ return 0;\n34-return-5-5", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", type_label=new_variable];
44 [label="7_ require(c / a == b);\n44-expression_statement-8-8", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", type_label=return];
55 [label="10_ div\n55-function_definition-11-15", type_label=function_definition];
72 [label="11_ require(b > 0);\n72-expression_statement-12-12", type_label=expression_statement];
79 [label="12_ uint256 c = a / b;\n79-new_variable-13-13", type_label=new_variable];
87 [label="13_ return c;\n87-return-14-14", type_label=return];
89 [label="15_ sub\n89-function_definition-16-20", type_label=function_definition];
106 [label="16_ require(b <= a);\n106-expression_statement-17-17", type_label=expression_statement];
113 [label="17_ uint256 c = a - b;\n113-new_variable-18-18", type_label=new_variable];
121 [label="18_ return c;\n121-return-19-19", type_label=return];
123 [label="20_ add\n123-function_definition-21-25", type_label=function_definition];
140 [label="21_ uint256 c = a + b;\n140-new_variable-22-22", type_label=new_variable];
148 [label="22_ require(c >= a);\n148-expression_statement-23-23", type_label=expression_statement];
155 [label="23_ return c;\n155-return-24-24", type_label=return];
157 [label="25_ mod\n157-function_definition-26-29", type_label=function_definition];
174 [label="26_ require(b != 0);\n174-expression_statement-27-27", type_label=expression_statement];
181 [label="27_ return a % b;\n181-return-28-28", type_label=return];
188 [label="31_ transfer\n188-function_definition-32-32", type_label=function_definition];
203 [label="32_ approve\n203-function_definition-33-33", type_label=function_definition];
218 [label="33_ transferFrom\n218-function_definition-34-34", type_label=function_definition];
237 [label="34_ totalSupply\n237-function_definition-35-35", type_label=function_definition];
245 [label="35_ balanceOf\n245-function_definition-36-36", type_label=function_definition];
257 [label="36_ allowance\n257-function_definition-37-37", type_label=function_definition];
304 [label="41_ address public owner;\n304-new_variable-42-42", type_label=new_variable];
309 [label="42_ address public pendingOwner;\n309-new_variable-43-43", type_label=new_variable];
326 [label="48_ owner = msg.sender;\n326-expression_statement-49-49", type_label=expression_statement];
332 [label="50_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n332-expression_statement-51-54", type_label=expression_statement];
335 [label="51_ require(msg.sender == owner);\n335-expression_statement-52-52", type_label=expression_statement];
344 [label="52_ _;\n344-expression_statement-53-53", type_label=expression_statement];
346 [label="54_ modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner);\n        _;\n    }\n346-expression_statement-55-58", type_label=expression_statement];
349 [label="55_ require(msg.sender == pendingOwner);\n349-expression_statement-56-56", type_label=expression_statement];
358 [label="56_ _;\n358-expression_statement-57-57", type_label=expression_statement];
360 [label="58_ transferOwnership\n360-function_definition-59-61", type_label=function_definition];
367 [label="58_ onlyOwner\n367-expression_statement-59-59", type_label=expression_statement];
370 [label="59_ pendingOwner = newOwner;\n370-expression_statement-60-60", type_label=expression_statement];
374 [label="61_ claimOwnership\n374-function_definition-62-66", type_label=function_definition];
377 [label="61_ onlyPendingOwner\n377-expression_statement-62-62", type_label=expression_statement];
386 [label="63_ owner = pendingOwner;\n386-expression_statement-64-64", type_label=expression_statement];
390 [label="64_ pendingOwner = address(0);\n390-expression_statement-65-65", type_label=expression_statement];
407 [label="69_ IERC20 public token;\n407-new_variable-70-70", type_label=new_variable];
413 [label="70_ uint256 public unFreezeStartDate;\n413-new_variable-71-71", type_label=new_variable];
418 [label="71_ uint256 public totalUnFreezeDate;\n418-new_variable-72-72", type_label=new_variable];
423 [label="72_ mapping(address => uint256) public balances;\n423-new_variable-73-73", type_label=new_variable];
430 [label="73_ mapping(address => uint256) public withdrawnBalances;\n430-new_variable-74-74", type_label=new_variable];
437 [label="74_ uint256 public totalBalance;\n437-new_variable-75-75", type_label=new_variable];
457 [label="80_ require(_unFreezeStartDate >= block.timestamp);\n457-expression_statement-81-81", type_label=expression_statement];
466 [label="81_ require(_totalUnFreezeDate > _unFreezeStartDate);\n466-expression_statement-82-82", type_label=expression_statement];
473 [label="82_ token = _token;\n473-expression_statement-83-83", type_label=expression_statement];
477 [label="83_ unFreezeStartDate = _unFreezeStartDate;\n477-expression_statement-84-84", type_label=expression_statement];
481 [label="84_ totalUnFreezeDate = _totalUnFreezeDate;\n481-expression_statement-85-85", type_label=expression_statement];
485 [label="86_ addBalance\n485-function_definition-87-94", type_label=function_definition];
496 [label="86_ onlyOwner\n496-expression_statement-87-87", type_label=expression_statement];
499 [label="87_ require(_to != address(0));\n499-expression_statement-88-88", type_label=expression_statement];
508 [label="88_ require(_value > 0);\n508-expression_statement-89-89", type_label=expression_statement];
515 [label="89_ require(totalBalance.add(_value)\n                <= token.balanceOf(address(this)), \"not enough tokens\");\n515-expression_statement-90-91", type_label=expression_statement];
537 [label="91_ balances[_to] = balances[_to].add(_value);\n537-expression_statement-92-92", type_label=expression_statement];
550 [label="92_ totalBalance = totalBalance.add(_value);\n550-expression_statement-93-93", type_label=expression_statement];
559 [label="94_ withdraw\n559-function_definition-95-106", type_label=function_definition];
571 [label="95_ require(_to != address(0));\n571-expression_statement-96-96", type_label=expression_statement];
580 [label="96_ require(_value > 0);\n580-expression_statement-97-97", type_label=expression_statement];
587 [label="97_ require(unFreezeStartDate < now, \"not unfrozen yet\");\n587-expression_statement-98-98", type_label=expression_statement];
597 [label="98_ require(\n            (getUnfrozenAmount(msg.sender).sub(withdrawnBalances[msg.sender]))\n            >= _value\n        );\n597-expression_statement-99-102", type_label=expression_statement];
619 [label="102_ withdrawnBalances[msg.sender] = withdrawnBalances[msg.sender].add(_value);\n619-expression_statement-103-103", type_label=expression_statement];
636 [label="103_ totalBalance = totalBalance.sub(_value);\n636-expression_statement-104-104", type_label=expression_statement];
645 [label="104_ token.transfer(_to, _value);\n645-expression_statement-105-105", type_label=expression_statement];
654 [label="106_ getUnfrozenAmount\n654-function_definition-107-121", type_label=function_definition];
667 [label="107_ if_now > unFreezeStartDate\n667-if-108-119", type_label=if];
1387 [label="107_ end_if", type_label=end_if];
672 [label="108_ if_now > totalUnFreezeDate\n672-if-109-111", type_label=if];
1392 [label="108_ end_if", type_label=end_if];
677 [label="109_ return balances[_holder];\n677-return-110-110", type_label=return];
681 [label="111_ uint256 partialFreezePeriodLen =\n                totalUnFreezeDate.sub(unFreezeStartDate);\n681-new_variable-112-113", type_label=new_variable];
692 [label="113_ uint256 secondsSincePeriodStart = now.sub(unFreezeStartDate);\n692-new_variable-114-114", type_label=new_variable];
703 [label="114_ uint256 amount = balances[_holder]\n                .mul(secondsSincePeriodStart)\n                .div(partialFreezePeriodLen);\n703-new_variable-115-117", type_label=new_variable];
721 [label="117_ return amount;\n721-return-118-118", type_label=return];
723 [label="119_ return 0;\n723-return-120-120", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 749  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
749 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 749  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 79  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 87  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
89 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
123 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
148 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
157 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
304 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
332 -> 346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
335 -> 344  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
360 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
407 -> 413  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
413 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
423 -> 430  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
430 -> 437  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 466  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
466 -> 473  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
473 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
477 -> 481  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
485 -> 499  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
499 -> 508  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
508 -> 515  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
515 -> 537  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
537 -> 550  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
559 -> 571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 580  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
580 -> 587  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 597  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
619 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
654 -> 667  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
667 -> 672  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
667 -> 1387  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1387 -> 723  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
672 -> 677  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
672 -> 1392  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1392 -> 681  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 1392  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
677 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
681 -> 692  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
692 -> 703  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
703 -> 721  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
721 -> 1387  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
721 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
723 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
