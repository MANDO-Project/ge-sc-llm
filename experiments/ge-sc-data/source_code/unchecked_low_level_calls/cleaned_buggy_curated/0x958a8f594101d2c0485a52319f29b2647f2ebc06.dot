digraph  {
13 [label="2_ modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n13-expression_statement-3-6", method="", type_label=expression_statement];
16 [label="3_ require(msg.sender == owner);\n16-expression_statement-4-4", method="", type_label=expression_statement];
25 [label="4_ _;\n25-expression_statement-5-5", method="", type_label=expression_statement];
27 [label="6_ address public owner;\n27-new_variable-7-7", method="", type_label=new_variable];
32 [label="7_ function Owned() {\n        owner = msg.sender;\n    }\n32-function_definition-8-10", method="Owned()", type_label=function_definition];
35 [label="8_ owner = msg.sender;\n35-expression_statement-9-9", method="Owned()", type_label=expression_statement];
41 [label="10_ address public newOwner;\n41-new_variable-11-11", method="", type_label=new_variable];
46 [label="11_ function changeOwner(address _newOwner) onlyOwner {\n        newOwner = _newOwner;\n    }\n46-function_definition-12-14", method="changeOwner(address _newOwner)", type_label=function_definition];
52 [label="11_ onlyOwner\n52-expression_statement-12-12", method="changeOwner(address _newOwner)", type_label=expression_statement];
55 [label="12_ newOwner = _newOwner;\n55-expression_statement-13-13", method="changeOwner(address _newOwner)", type_label=expression_statement];
59 [label="14_ function acceptOwnership() {\n        if (msg.sender == newOwner) {\n            owner = newOwner;\n        }\n    }\n59-function_definition-15-19", method="acceptOwnership()", type_label=function_definition];
62 [label="15_ if_msg.sender == newOwner\n62-if-16-18", method="acceptOwnership()", type_label=if];
550 [label="15_ end_if", method="acceptOwnership()", type_label=end_if];
69 [label="16_ owner = newOwner;\n69-expression_statement-17-17", method="acceptOwnership()", type_label=expression_statement];
73 [label="19_ function execute(address _dst, uint _value, bytes _data) onlyOwner {\n        _dst.call.value(_value)(_data);\n    }\n73-function_definition-20-22", method="execute(address _dst,uint _value,bytes _data)", type_label=function_definition];
87 [label="19_ onlyOwner\n87-expression_statement-20-20", method="execute(address _dst,uint _value,bytes _data)", type_label=expression_statement];
90 [label="20_ _dst.call.value(_value)(_data);\n90-expression_statement-21-21", method="execute(address _dst,uint _value,bytes _data)", type_label=expression_statement];
108 [label="25_ string public partner1;\n108-new_variable-26-26", method="", type_label=new_variable];
113 [label="26_ string public partner2;\n113-new_variable-27-27", method="", type_label=new_variable];
118 [label="27_ uint public marriageDate;\n118-new_variable-28-28", method="", type_label=new_variable];
123 [label="28_ string public marriageStatus;\n123-new_variable-29-29", method="", type_label=new_variable];
128 [label="29_ string public vows;\n128-new_variable-30-30", method="", type_label=new_variable];
133 [label="30_ Event[] public majorEvents;\n133-new_variable-31-31", method="", type_label=new_variable];
140 [label="31_ Message[] public messages;\n140-new_variable-32-32", method="", type_label=new_variable];
147 [label="32_ struct Event {\n        uint date;\n        string name;\n        string description;\n        string url;\n    }\n147-expression_statement-33-38", method="Event()", type_label=expression_statement];
165 [label="38_ struct Message {\n        uint date;\n        string nameFrom;\n        string text;\n        string url;\n        uint value;\n    }\n165-expression_statement-39-45", method="Message()", type_label=expression_statement];
187 [label="45_ modifier areMarried {\n        require(sha3(marriageStatus) == sha3(\"Married\"));\n        _;\n    }\n187-expression_statement-46-49", method="", type_label=expression_statement];
190 [label="46_ require(sha3(marriageStatus) == sha3(\"Married\"));\n190-expression_statement-47-47", method="", type_label=expression_statement];
204 [label="47_ _;\n204-expression_statement-48-48", method="", type_label=expression_statement];
206 [label="49_ function Marriage(address _owner) {\n        owner = _owner;\n    }\n206-function_definition-50-52", method="Marriage(address _owner)", type_label=function_definition];
213 [label="50_ owner = _owner;\n213-expression_statement-51-51", method="Marriage(address _owner)", type_label=expression_statement];
217 [label="52_ function numberOfMajorEvents() constant public returns (uint) {\n        return majorEvents.length;\n    }\n217-function_definition-53-55", method="numberOfMajorEvents()", type_label=function_definition];
219 [label="52_ constant\n219-expression_statement-53-53", method="numberOfMajorEvents()", type_label=expression_statement];
227 [label="53_ return majorEvents.length;\n227-return-54-54", method="numberOfMajorEvents()", type_label=return];
231 [label="55_ function numberOfMessages() constant public returns (uint) {\n        return messages.length;\n    }\n231-function_definition-56-58", method="numberOfMessages()", type_label=function_definition];
233 [label="55_ constant\n233-expression_statement-56-56", method="numberOfMessages()", type_label=expression_statement];
241 [label="56_ return messages.length;\n241-return-57-57", method="numberOfMessages()", type_label=return];
245 [label="58_ function createMarriage(\n        string _partner1,\n        string _partner2,\n        string _vows,\n        string url) onlyOwner\n    {\n        require(majorEvents.length == 0);\n        partner1 = _partner1;\n        partner2 = _partner2;\n        marriageDate = now;\n        vows = _vows;\n        marriageStatus = \"Married\";\n        majorEvents.push(Event(now, \"Marriage\", vows, url));\n        MajorEvent(\"Marrigage\", vows, url);\n    }\n245-function_definition-59-73", method="createMarriage(string _partner1,string _partner2,string _vows,string url)", type_label=function_definition];
263 [label="62_ onlyOwner\n263-expression_statement-63-63", method="createMarriage(string _partner1,string _partner2,string _vows,string url)", type_label=expression_statement];
266 [label="64_ require(majorEvents.length == 0);\n266-expression_statement-65-65", method="createMarriage(string _partner1,string _partner2,string _vows,string url)", type_label=expression_statement];
275 [label="65_ partner1 = _partner1;\n275-expression_statement-66-66", method="createMarriage(string _partner1,string _partner2,string _vows,string url)", type_label=expression_statement];
279 [label="66_ partner2 = _partner2;\n279-expression_statement-67-67", method="createMarriage(string _partner1,string _partner2,string _vows,string url)", type_label=expression_statement];
283 [label="67_ marriageDate = now;\n283-expression_statement-68-68", method="createMarriage(string _partner1,string _partner2,string _vows,string url)", type_label=expression_statement];
287 [label="68_ vows = _vows;\n287-expression_statement-69-69", method="createMarriage(string _partner1,string _partner2,string _vows,string url)", type_label=expression_statement];
291 [label="69_ marriageStatus = \"Married\";\n291-expression_statement-70-70", method="createMarriage(string _partner1,string _partner2,string _vows,string url)", type_label=expression_statement];
296 [label="70_ majorEvents.push(Event(now, \"Marriage\", vows, url));\n296-expression_statement-71-71", method="createMarriage(string _partner1,string _partner2,string _vows,string url)", type_label=expression_statement];
313 [label="71_ MajorEvent(\"Marrigage\", vows, url);\n313-expression_statement-72-72", method="createMarriage(string _partner1,string _partner2,string _vows,string url)", type_label=expression_statement];
323 [label="73_ function setStatus(string status, string url) onlyOwner\n    {\n        marriageStatus = status;\n        setMajorEvent(\"Changed Status\", status, url);\n    }\n323-function_definition-74-78", method="setStatus(string status,string url)", type_label=function_definition];
333 [label="73_ onlyOwner\n333-expression_statement-74-74", method="setStatus(string status,string url)", type_label=expression_statement];
336 [label="75_ marriageStatus = status;\n336-expression_statement-76-76", method="setStatus(string status,string url)", type_label=expression_statement];
340 [label="76_ setMajorEvent(\"Changed Status\", status, url);\n340-expression_statement-77-77", method="setStatus(string status,string url)", type_label=expression_statement];
350 [label="78_ function setMajorEvent(string name, string description, string url) onlyOwner areMarried\n    {\n        majorEvents.push(Event(now, name, description, url));\n        MajorEvent(name, description, url);\n    }\n350-function_definition-79-83", method="setMajorEvent(string name,string description,string url)", type_label=function_definition];
364 [label="78_ onlyOwner\n364-expression_statement-79-79", method="setMajorEvent(string name,string description,string url)", type_label=expression_statement];
366 [label="78_ areMarried\n366-expression_statement-79-79", method="setMajorEvent(string name,string description,string url)", type_label=expression_statement];
369 [label="80_ majorEvents.push(Event(now, name, description, url));\n369-expression_statement-81-81", method="setMajorEvent(string name,string description,string url)", type_label=expression_statement];
385 [label="81_ MajorEvent(name, description, url);\n385-expression_statement-82-82", method="setMajorEvent(string name,string description,string url)", type_label=expression_statement];
394 [label="83_ function sendMessage(string nameFrom, string text, string url) payable areMarried {\n        if (msg.value > 0) {\n            owner.transfer(this.balance);\n        }\n        messages.push(Message(now, nameFrom, text, url, msg.value));\n        MessageSent(nameFrom, text, url, msg.value);\n    }\n394-function_definition-84-90", method="sendMessage(string nameFrom,string text,string url)", type_label=function_definition];
409 [label="83_ areMarried\n409-expression_statement-84-84", method="sendMessage(string nameFrom,string text,string url)", type_label=expression_statement];
412 [label="84_ if_msg.value > 0\n412-if-85-87", method="sendMessage(string nameFrom,string text,string url)", type_label=if];
900 [label="84_ end_if", method="sendMessage(string nameFrom,string text,string url)", type_label=end_if];
419 [label="85_ owner.transfer(this.balance);\n419-expression_statement-86-86", method="sendMessage(string nameFrom,string text,string url)", type_label=expression_statement];
428 [label="87_ messages.push(Message(now, nameFrom, text, url, msg.value));\n428-expression_statement-88-88", method="sendMessage(string nameFrom,string text,string url)", type_label=expression_statement];
448 [label="88_ MessageSent(nameFrom, text, url, msg.value);\n448-expression_statement-89-89", method="sendMessage(string nameFrom,string text,string url)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 27  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
16 -> 25  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
32 -> 35  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
46 -> 55  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
59 -> 62  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
62 -> 69  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
62 -> 550  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
550 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 550  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
73 -> 90  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
108 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
118 -> 123  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 128  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
128 -> 133  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
133 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
147 -> 165  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
165 -> 187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
190 -> 204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
206 -> 213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
217 -> 227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
227 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
231 -> 241  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
241 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
245 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
275 -> 279  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
279 -> 283  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
283 -> 287  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
291 -> 296  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
296 -> 313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
323 -> 336  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
336 -> 340  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
350 -> 369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
364 -> 366  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
369 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
394 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 419  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
412 -> 900  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
900 -> 428  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
419 -> 900  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
428 -> 448  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
