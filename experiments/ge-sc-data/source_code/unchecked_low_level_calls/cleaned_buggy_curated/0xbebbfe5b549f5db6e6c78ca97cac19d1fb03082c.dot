digraph  {
13 [label="2_ modifier onlyOwner { if (msg.sender == Owner) _; }\n13-expression_statement-3-3", method="", type_label=expression_statement];
16 [label="2_ if_msg.sender == Owner\n16-if-3-3", method="", type_label=if];
183 [label="2_ end_if", method="", type_label=end_if];
22 [label="2_ _;\n22-expression_statement-3-3", method="", type_label=expression_statement];
24 [label="2_ address Owner = msg.sender;\n24-new_variable-3-3", method="", type_label=new_variable];
31 [label="3_ function transferOwner(address _owner) public onlyOwner { Owner = _owner; }\n31-function_definition-4-4", method="transferOwner(address _owner)", type_label=function_definition];
38 [label="3_ onlyOwner\n38-expression_statement-4-4", method="transferOwner(address _owner)", type_label=expression_statement];
41 [label="3_ Owner = _owner;\n41-expression_statement-4-4", method="transferOwner(address _owner)", type_label=expression_statement];
45 [label="4_ function proxy(address target, bytes data) public payable {\n        target.call.value(msg.value)(data);\n    }\n45-function_definition-5-7", method="proxy(address target,bytes data)", type_label=function_definition];
58 [label="5_ target.call.value(msg.value)(data);\n58-expression_statement-6-6", method="proxy(address target,bytes data)", type_label=expression_statement];
78 [label="9_ address public Owner;\n78-new_variable-10-10", method="", type_label=new_variable];
83 [label="10_ mapping (address => uint256) public Deposits;\n83-new_variable-11-11", method="", type_label=new_variable];
94 [label="12_ function Vault() public payable {\n        if (msg.sender == tx.origin) {\n            Owner = msg.sender;\n            deposit();\n        }\n    }\n94-function_definition-13-18", method="Vault()", type_label=function_definition];
99 [label="13_ if_msg.sender == tx.origin\n99-if-14-17", method="Vault()", type_label=if];
266 [label="13_ end_if", method="Vault()", type_label=end_if];
108 [label="14_ Owner = msg.sender;\n108-expression_statement-15-15", method="Vault()", type_label=expression_statement];
114 [label="15_ deposit();\n114-expression_statement-16-16", method="Vault()", type_label=expression_statement];
117 [label="18_ function deposit() public payable {\n        if (msg.value > 0.5 ether) {\n            Deposits[msg.sender] += msg.value;\n        }\n    }\n117-function_definition-19-23", method="deposit()", type_label=function_definition];
122 [label="19_ if_msg.value > 0.5 ether\n122-if-20-22", method="deposit()", type_label=if];
289 [label="19_ end_if", method="deposit()", type_label=end_if];
130 [label="20_ Deposits[msg.sender] += msg.value;\n130-expression_statement-21-21", method="deposit()", type_label=expression_statement];
140 [label="23_ function withdraw(uint256 amount) public onlyOwner {\n        if (amount>0 && Deposits[msg.sender]>=amount) {\n            msg.sender.transfer(amount);\n        }\n    }\n140-function_definition-24-28", method="withdraw(uint256 amount)", type_label=function_definition];
147 [label="23_ onlyOwner\n147-expression_statement-24-24", method="withdraw(uint256 amount)", type_label=expression_statement];
150 [label="24_ if_amount>0 && Deposits[msg.sender]>=amount\n150-if-25-27", method="withdraw(uint256 amount)", type_label=if];
317 [label="24_ end_if", method="withdraw(uint256 amount)", type_label=end_if];
163 [label="25_ msg.sender.transfer(amount);\n163-expression_statement-26-26", method="withdraw(uint256 amount)", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
13 -> 24  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
16 -> 22  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
16 -> 183  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
183 -> 24  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
22 -> 183  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
31 -> 41  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 58  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
78 -> 83  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
94 -> 99  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
99 -> 108  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
99 -> 266  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
266 -> 117  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
108 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 266  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
117 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 130  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
122 -> 289  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
289 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
130 -> 289  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
140 -> 150  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
150 -> 163  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
150 -> 317  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
317 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
163 -> 317  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
