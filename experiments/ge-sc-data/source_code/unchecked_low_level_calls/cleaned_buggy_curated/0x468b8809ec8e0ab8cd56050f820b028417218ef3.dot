digraph  {
12 [label="2_ address private _owner;\n12-new_variable-3-3", type_label=new_variable];
17 [label="3_ address private _pendingOwner;\n17-new_variable-4-4", type_label=new_variable];
34 [label="6_ setOwner(msg.sender);\n34-expression_statement-7-7", type_label=expression_statement];
41 [label="8_ modifier onlyPendingOwner() {\n        require(msg.sender == _pendingOwner, \"msg.sender should be onlyPendingOwner\");\n        _;\n    }\n41-expression_statement-9-12", type_label=expression_statement];
44 [label="9_ require(msg.sender == _pendingOwner, \"msg.sender should be onlyPendingOwner\");\n44-expression_statement-10-10", type_label=expression_statement];
56 [label="10_ _;\n56-expression_statement-11-11", type_label=expression_statement];
58 [label="12_ modifier onlyOwner() {\n        require(msg.sender == _owner, \"msg.sender should be owner\");\n        _;\n    }\n58-expression_statement-13-16", type_label=expression_statement];
61 [label="13_ require(msg.sender == _owner, \"msg.sender should be owner\");\n61-expression_statement-14-14", type_label=expression_statement];
73 [label="14_ _;\n73-expression_statement-15-15", type_label=expression_statement];
75 [label="16_ pendingOwner\n75-function_definition-17-19", type_label=function_definition];
84 [label="17_ return _pendingOwner;\n84-return-18-18", type_label=return];
86 [label="19_ owner\n86-function_definition-20-22", type_label=function_definition];
95 [label="20_ return _owner;\n95-return-21-21", type_label=return];
97 [label="22_ setOwner\n97-function_definition-23-25", type_label=function_definition];
105 [label="23_ _owner = _newOwner;\n105-expression_statement-24-24", type_label=expression_statement];
109 [label="25_ transferOwnership\n109-function_definition-26-28", type_label=function_definition];
116 [label="25_ onlyOwner\n116-expression_statement-26-26", type_label=expression_statement];
119 [label="26_ _pendingOwner = _newOwner;\n119-expression_statement-27-27", type_label=expression_statement];
123 [label="28_ claimOwnership\n123-function_definition-29-33", type_label=function_definition];
126 [label="28_ onlyPendingOwner\n126-expression_statement-29-29", type_label=expression_statement];
135 [label="30_ _owner = _pendingOwner;\n135-expression_statement-31-31", type_label=expression_statement];
139 [label="31_ _pendingOwner = address(0);\n139-expression_statement-32-32", type_label=expression_statement];
154 [label="36_ address private _operator;\n154-new_variable-37-37", type_label=new_variable];
169 [label="38_ operator\n169-function_definition-39-41", type_label=function_definition];
178 [label="39_ return _operator;\n178-return-40-40", type_label=return];
180 [label="41_ modifier onlyOperator() {\n        require(msg.sender == _operator, \"msg.sender should be operator\");\n        _;\n    }\n180-expression_statement-42-45", type_label=expression_statement];
183 [label="42_ require(msg.sender == _operator, \"msg.sender should be operator\");\n183-expression_statement-43-43", type_label=expression_statement];
195 [label="43_ _;\n195-expression_statement-44-44", type_label=expression_statement];
197 [label="45_ updateOperator\n197-function_definition-46-50", type_label=function_definition];
204 [label="45_ onlyOwner\n204-expression_statement-46-46", type_label=expression_statement];
207 [label="46_ require(_newOperator != address(0), \"Cannot change the newOperator to the zero address\");\n207-expression_statement-47-47", type_label=expression_statement];
225 [label="48_ _operator = _newOperator;\n225-expression_statement-49-49", type_label=expression_statement];
238 [label="53_ mapping (address => uint256) public blacklisted;\n238-new_variable-54-54", type_label=new_variable];
245 [label="54_ setBlacklist\n245-function_definition-55-57", type_label=function_definition];
256 [label="54_ onlyOperator\n256-expression_statement-55-55", type_label=expression_statement];
259 [label="55_ blacklisted[_account] = _status;\n259-expression_statement-56-56", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
12 -> 17  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
41 -> 58  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 56  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
61 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
75 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
84 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
86 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
95 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
97 -> 105  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
109 -> 119  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
123 -> 135  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
135 -> 139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
169 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
183 -> 195  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
197 -> 207  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
245 -> 259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
