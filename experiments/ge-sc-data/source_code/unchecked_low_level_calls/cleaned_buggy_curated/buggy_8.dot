digraph  {
15 [label="2_ function bug_unchk_send29() payable public{\n      msg.sender.transfer(1 ether);}\n15-function_definition-3-4", method="bug_unchk_send29()", type_label=function_definition];
20 [label="3_ msg.sender.transfer(1 ether);\n20-expression_statement-4-4", method="bug_unchk_send29()", type_label=expression_statement];
30 [label="4_ address public owner;\n30-new_variable-5-5", method="", type_label=new_variable];
35 [label="5_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n35-function_definition-6-7", method="bug_unchk_send30()", type_label=function_definition];
40 [label="6_ msg.sender.transfer(1 ether);\n40-expression_statement-7-7", method="bug_unchk_send30()", type_label=expression_statement];
62 [label="9_ owner = msg.sender;\n62-expression_statement-10-10", method="", type_label=expression_statement];
68 [label="11_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n68-function_definition-12-13", method="bug_unchk_send12()", type_label=function_definition];
73 [label="12_ msg.sender.transfer(1 ether);\n73-expression_statement-13-13", method="bug_unchk_send12()", type_label=expression_statement];
83 [label="13_ modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n83-expression_statement-14-17", method="", type_label=expression_statement];
86 [label="14_ require(msg.sender == owner);\n86-expression_statement-15-15", method="", type_label=expression_statement];
95 [label="15_ _;\n95-expression_statement-16-16", method="", type_label=expression_statement];
97 [label="17_ function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n97-function_definition-18-22", method="transferOwnership(address newOwner)", type_label=function_definition];
104 [label="17_ onlyOwner\n104-expression_statement-18-18", method="transferOwnership(address newOwner)", type_label=expression_statement];
107 [label="18_ require(newOwner != address(0));\n107-expression_statement-19-19", method="transferOwnership(address newOwner)", type_label=expression_statement];
122 [label="20_ owner = newOwner;\n122-expression_statement-21-21", method="transferOwnership(address newOwner)", type_label=expression_statement];
126 [label="22_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n126-function_definition-23-24", method="bug_unchk_send11()", type_label=function_definition];
131 [label="23_ msg.sender.transfer(1 ether);\n131-expression_statement-24-24", method="bug_unchk_send11()", type_label=expression_statement];
144 [label="26_ function bug_unchk_send6() payable public{\n      msg.sender.transfer(1 ether);}\n144-function_definition-27-28", method="bug_unchk_send6()", type_label=function_definition];
149 [label="27_ msg.sender.transfer(1 ether);\n149-expression_statement-28-28", method="bug_unchk_send6()", type_label=expression_statement];
159 [label="28_ string public name;\n159-new_variable-29-29", method="", type_label=new_variable];
164 [label="29_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n164-function_definition-30-31", method="bug_unchk_send16()", type_label=function_definition];
169 [label="30_ msg.sender.transfer(1 ether);\n169-expression_statement-31-31", method="bug_unchk_send16()", type_label=expression_statement];
179 [label="31_ string public symbol;\n179-new_variable-32-32", method="", type_label=new_variable];
184 [label="32_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n184-function_definition-33-34", method="bug_unchk_send24()", type_label=function_definition];
189 [label="33_ msg.sender.transfer(1 ether);\n189-expression_statement-34-34", method="bug_unchk_send24()", type_label=expression_statement];
199 [label="34_ uint8 public decimals = 18;\n199-new_variable-35-35", method="", type_label=new_variable];
205 [label="35_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n205-function_definition-36-37", method="bug_unchk_send5()", type_label=function_definition];
210 [label="36_ msg.sender.transfer(1 ether);\n210-expression_statement-37-37", method="bug_unchk_send5()", type_label=expression_statement];
220 [label="37_ uint256 public totalSupply;\n220-new_variable-38-38", method="", type_label=new_variable];
225 [label="38_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n225-function_definition-39-40", method="bug_unchk_send15()", type_label=function_definition];
230 [label="39_ msg.sender.transfer(1 ether);\n230-expression_statement-40-40", method="bug_unchk_send15()", type_label=expression_statement];
240 [label="40_ mapping (address => uint256) public balanceOf;\n240-new_variable-41-41", method="", type_label=new_variable];
247 [label="41_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n247-function_definition-42-43", method="bug_unchk_send28()", type_label=function_definition];
252 [label="42_ msg.sender.transfer(1 ether);\n252-expression_statement-43-43", method="bug_unchk_send28()", type_label=expression_statement];
262 [label="43_ mapping (address => mapping (address => uint256)) public allowance;\n262-new_variable-44-44", method="", type_label=new_variable];
271 [label="44_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n271-function_definition-45-46", method="bug_unchk_send8()", type_label=function_definition];
276 [label="45_ msg.sender.transfer(1 ether);\n276-expression_statement-46-46", method="bug_unchk_send8()", type_label=expression_statement];
300 [label="47_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n300-function_definition-48-49", method="bug_unchk_send27()", type_label=function_definition];
305 [label="48_ msg.sender.transfer(1 ether);\n305-expression_statement-49-49", method="bug_unchk_send27()", type_label=expression_statement];
329 [label="50_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n329-function_definition-51-52", method="bug_unchk_send31()", type_label=function_definition];
334 [label="51_ msg.sender.transfer(1 ether);\n334-expression_statement-52-52", method="bug_unchk_send31()", type_label=expression_statement];
368 [label="58_ totalSupply = initialSupply * 10 ** uint256(decimals);\n368-expression_statement-59-59", method="", type_label=expression_statement];
378 [label="59_ balanceOf[msg.sender] = totalSupply;\n378-expression_statement-60-60", method="", type_label=expression_statement];
386 [label="60_ name = tokenName;\n386-expression_statement-61-61", method="", type_label=expression_statement];
390 [label="61_ symbol = tokenSymbol;\n390-expression_statement-62-62", method="", type_label=expression_statement];
394 [label="63_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n394-function_definition-64-65", method="bug_unchk_send1()", type_label=function_definition];
399 [label="64_ msg.sender.transfer(1 ether);\n399-expression_statement-65-65", method="bug_unchk_send1()", type_label=expression_statement];
409 [label="65_ function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0x0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n409-function_definition-66-75", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
425 [label="66_ require(_to != address(0x0));\n425-expression_statement-67-67", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
434 [label="67_ require(balanceOf[_from] >= _value);\n434-expression_statement-68-68", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
443 [label="68_ require(balanceOf[_to] + _value > balanceOf[_to]);\n443-expression_statement-69-69", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
456 [label="69_ uint previousBalances = balanceOf[_from] + balanceOf[_to];\n456-new_variable-70-70", method="_transfer(address _from,address _to,uint _value)", type_label=new_variable];
468 [label="70_ balanceOf[_from] -= _value;\n468-expression_statement-71-71", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
474 [label="71_ balanceOf[_to] += _value;\n474-expression_statement-72-72", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
488 [label="73_ assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n488-expression_statement-74-74", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
501 [label="75_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n501-function_definition-76-77", method="bug_unchk_send2()", type_label=function_definition];
506 [label="76_ msg.sender.transfer(1 ether);\n506-expression_statement-77-77", method="bug_unchk_send2()", type_label=expression_statement];
516 [label="77_ function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n516-function_definition-78-81", method="transfer(address _to,uint256 _value)", type_label=function_definition];
533 [label="78_ _transfer(msg.sender, _to, _value);\n533-expression_statement-79-79", method="transfer(address _to,uint256 _value)", type_label=expression_statement];
544 [label="79_ return true;\n544-return-80-80", method="transfer(address _to,uint256 _value)", type_label=return];
547 [label="81_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n547-function_definition-82-83", method="bug_unchk_send17()", type_label=function_definition];
552 [label="82_ msg.sender.transfer(1 ether);\n552-expression_statement-83-83", method="bug_unchk_send17()", type_label=expression_statement];
562 [label="83_ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);      \n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n562-function_definition-84-89", method="transferFrom(address _from,address _to,uint256 _value)", type_label=function_definition];
583 [label="84_ require(_value <= allowance[_from][msg.sender]);\n583-expression_statement-85-85", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
596 [label="85_ allowance[_from][msg.sender] -= _value;\n596-expression_statement-86-86", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
606 [label="86_ _transfer(_from, _to, _value);\n606-expression_statement-87-87", method="transferFrom(address _from,address _to,uint256 _value)", type_label=expression_statement];
615 [label="87_ return true;\n615-return-88-88", method="transferFrom(address _from,address _to,uint256 _value)", type_label=return];
618 [label="89_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n618-function_definition-90-91", method="bug_unchk_send3()", type_label=function_definition];
623 [label="90_ msg.sender.transfer(1 ether);\n623-expression_statement-91-91", method="bug_unchk_send3()", type_label=expression_statement];
633 [label="91_ function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n633-function_definition-92-97", method="approve(address _spender,uint256 _value)", type_label=function_definition];
650 [label="93_ allowance[msg.sender][_spender] = _value;\n650-expression_statement-94-94", method="approve(address _spender,uint256 _value)", type_label=expression_statement];
670 [label="95_ return true;\n670-return-96-96", method="approve(address _spender,uint256 _value)", type_label=return];
673 [label="97_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n673-function_definition-98-99", method="bug_unchk_send9()", type_label=function_definition];
678 [label="98_ msg.sender.transfer(1 ether);\n678-expression_statement-99-99", method="bug_unchk_send9()", type_label=expression_statement];
688 [label="99_ function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);    \n        balanceOf[msg.sender] -= _value;             \n        totalSupply -= _value;                       \n        emit Burn(msg.sender, _value);\n        return true;\n    }\n688-function_definition-100-106", method="burn(uint256 _value)", type_label=function_definition];
701 [label="100_ require(balanceOf[msg.sender] >= _value);\n701-expression_statement-101-101", method="burn(uint256 _value)", type_label=expression_statement];
712 [label="101_ balanceOf[msg.sender] -= _value;\n712-expression_statement-102-102", method="burn(uint256 _value)", type_label=expression_statement];
720 [label="102_ totalSupply -= _value;\n720-expression_statement-103-103", method="burn(uint256 _value)", type_label=expression_statement];
732 [label="104_ return true;\n732-return-105-105", method="burn(uint256 _value)", type_label=return];
735 [label="106_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n735-function_definition-107-108", method="bug_unchk_send25()", type_label=function_definition];
740 [label="107_ msg.sender.transfer(1 ether);\n740-expression_statement-108-108", method="bug_unchk_send25()", type_label=expression_statement];
750 [label="108_ function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                 \n        require(_value <= allowance[_from][msg.sender]);     \n        balanceOf[_from] -= _value;                          \n        allowance[_from][msg.sender] -= _value;              \n        totalSupply -= _value;                               \n        emit Burn(_from, _value);\n        return true;\n    }\n750-function_definition-109-117", method="burnFrom(address _from,uint256 _value)", type_label=function_definition];
767 [label="109_ require(balanceOf[_from] >= _value);\n767-expression_statement-110-110", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
776 [label="110_ require(_value <= allowance[_from][msg.sender]);\n776-expression_statement-111-111", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
789 [label="111_ balanceOf[_from] -= _value;\n789-expression_statement-112-112", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
795 [label="112_ allowance[_from][msg.sender] -= _value;\n795-expression_statement-113-113", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
805 [label="113_ totalSupply -= _value;\n805-expression_statement-114-114", method="burnFrom(address _from,uint256 _value)", type_label=expression_statement];
815 [label="115_ return true;\n815-return-116-116", method="burnFrom(address _from,uint256 _value)", type_label=return];
818 [label="117_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n818-function_definition-118-119", method="bug_unchk_send19()", type_label=function_definition];
823 [label="118_ msg.sender.transfer(1 ether);\n823-expression_statement-119-119", method="bug_unchk_send19()", type_label=expression_statement];
842 [label="121_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n842-function_definition-122-123", method="bug_unchk_send21()", type_label=function_definition];
847 [label="122_ msg.sender.transfer(1 ether);\n847-expression_statement-123-123", method="bug_unchk_send21()", type_label=expression_statement];
857 [label="123_ uint256 public sellPrice;\n857-new_variable-124-124", method="", type_label=new_variable];
862 [label="124_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n862-function_definition-125-126", method="bug_unchk_send10()", type_label=function_definition];
867 [label="125_ msg.sender.transfer(1 ether);\n867-expression_statement-126-126", method="bug_unchk_send10()", type_label=expression_statement];
877 [label="126_ uint256 public buyPrice;\n877-new_variable-127-127", method="", type_label=new_variable];
882 [label="127_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n882-function_definition-128-129", method="bug_unchk_send22()", type_label=function_definition];
887 [label="128_ msg.sender.transfer(1 ether);\n887-expression_statement-129-129", method="bug_unchk_send22()", type_label=expression_statement];
897 [label="129_ mapping (address => bool) public frozenAccount;\n897-new_variable-130-130", method="", type_label=new_variable];
904 [label="130_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n904-function_definition-131-132", method="bug_unchk_send13()", type_label=function_definition];
909 [label="131_ msg.sender.transfer(1 ether);\n909-expression_statement-132-132", method="bug_unchk_send13()", type_label=expression_statement];
942 [label="137_ TokenERC20(initialSupply, tokenName, tokenSymbol)\n942-expression_statement-138-138", method="", type_label=expression_statement];
951 [label="138_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n951-function_definition-139-140", method="bug_unchk_send26()", type_label=function_definition];
956 [label="139_ msg.sender.transfer(1 ether);\n956-expression_statement-140-140", method="bug_unchk_send26()", type_label=expression_statement];
966 [label="140_ function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != address(0x0));                           \n        require (balanceOf[_from] >= _value);                    \n        require (balanceOf[_to] + _value >= balanceOf[_to]);     \n        require(!frozenAccount[_from]);                          \n        require(!frozenAccount[_to]);                            \n        balanceOf[_from] -= _value;                              \n        balanceOf[_to] += _value;                                \n        emit Transfer(_from, _to, _value);\n    }\n966-function_definition-141-150", method="_transfer(address _from,address _to,uint _value)", type_label=function_definition];
982 [label="141_ require (_to != address(0x0));\n982-expression_statement-142-142", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
991 [label="142_ require (balanceOf[_from] >= _value);\n991-expression_statement-143-143", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1000 [label="143_ require (balanceOf[_to] + _value >= balanceOf[_to]);\n1000-expression_statement-144-144", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1013 [label="144_ require(!frozenAccount[_from]);\n1013-expression_statement-145-145", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1021 [label="145_ require(!frozenAccount[_to]);\n1021-expression_statement-146-146", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1029 [label="146_ balanceOf[_from] -= _value;\n1029-expression_statement-147-147", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1035 [label="147_ balanceOf[_to] += _value;\n1035-expression_statement-148-148", method="_transfer(address _from,address _to,uint _value)", type_label=expression_statement];
1049 [label="150_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n1049-function_definition-151-152", method="bug_unchk_send20()", type_label=function_definition];
1054 [label="151_ msg.sender.transfer(1 ether);\n1054-expression_statement-152-152", method="bug_unchk_send20()", type_label=expression_statement];
1064 [label="152_ function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        emit Transfer(address(0), address(this), mintedAmount);\n        emit Transfer(address(this), target, mintedAmount);\n    }\n1064-function_definition-153-158", method="mintToken(address target,uint256 mintedAmount)", type_label=function_definition];
1074 [label="152_ onlyOwner\n1074-expression_statement-153-153", method="mintToken(address target,uint256 mintedAmount)", type_label=expression_statement];
1078 [label="153_ balanceOf[target] += mintedAmount;\n1078-expression_statement-154-154", method="mintToken(address target,uint256 mintedAmount)", type_label=expression_statement];
1084 [label="154_ totalSupply += mintedAmount;\n1084-expression_statement-155-155", method="mintToken(address target,uint256 mintedAmount)", type_label=expression_statement];
1110 [label="158_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n1110-function_definition-159-160", method="bug_unchk_send32()", type_label=function_definition];
1115 [label="159_ msg.sender.transfer(1 ether);\n1115-expression_statement-160-160", method="bug_unchk_send32()", type_label=expression_statement];
1125 [label="160_ function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n1125-function_definition-161-164", method="freezeAccount(address target,bool freeze)", type_label=function_definition];
1135 [label="160_ onlyOwner\n1135-expression_statement-161-161", method="freezeAccount(address target,bool freeze)", type_label=expression_statement];
1139 [label="161_ frozenAccount[target] = freeze;\n1139-expression_statement-162-162", method="freezeAccount(address target,bool freeze)", type_label=expression_statement];
1151 [label="164_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n1151-function_definition-165-166", method="bug_unchk_send4()", type_label=function_definition];
1156 [label="165_ msg.sender.transfer(1 ether);\n1156-expression_statement-166-166", method="bug_unchk_send4()", type_label=expression_statement];
1166 [label="166_ function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n1166-function_definition-167-170", method="setPrices(uint256 newSellPrice,uint256 newBuyPrice)", type_label=function_definition];
1176 [label="166_ onlyOwner\n1176-expression_statement-167-167", method="setPrices(uint256 newSellPrice,uint256 newBuyPrice)", type_label=expression_statement];
1180 [label="167_ sellPrice = newSellPrice;\n1180-expression_statement-168-168", method="setPrices(uint256 newSellPrice,uint256 newBuyPrice)", type_label=expression_statement];
1184 [label="168_ buyPrice = newBuyPrice;\n1184-expression_statement-169-169", method="setPrices(uint256 newSellPrice,uint256 newBuyPrice)", type_label=expression_statement];
1188 [label="170_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1188-function_definition-171-172", method="bug_unchk_send7()", type_label=function_definition];
1193 [label="171_ msg.sender.transfer(1 ether);\n1193-expression_statement-172-172", method="bug_unchk_send7()", type_label=expression_statement];
1203 [label="172_ function buy() payable public {\n        uint amount = msg.value / buyPrice;                  \n        _transfer(address(this), msg.sender, amount);        \n    }\n1203-function_definition-173-176", method="buy()", type_label=function_definition];
1208 [label="173_ uint amount = msg.value / buyPrice;\n1208-new_variable-174-174", method="buy()", type_label=new_variable];
1218 [label="174_ _transfer(address(this), msg.sender, amount);\n1218-expression_statement-175-175", method="buy()", type_label=expression_statement];
1231 [label="176_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n1231-function_definition-177-178", method="bug_unchk_send23()", type_label=function_definition];
1236 [label="177_ msg.sender.transfer(1 ether);\n1236-expression_statement-178-178", method="bug_unchk_send23()", type_label=expression_statement];
1246 [label="178_ function sell(uint256 amount) public {\n        address myAddress = address(this);\n        require(myAddress.balance >= amount * sellPrice);    \n        _transfer(msg.sender, address(this), amount);        \n        msg.sender.transfer(amount * sellPrice);             \n    }\n1246-function_definition-179-184", method="sell(uint256 amount)", type_label=function_definition];
1254 [label="179_ address myAddress = address(this);\n1254-new_variable-180-180", method="sell(uint256 amount)", type_label=new_variable];
1262 [label="180_ require(myAddress.balance >= amount * sellPrice);\n1262-expression_statement-181-181", method="sell(uint256 amount)", type_label=expression_statement];
1273 [label="181_ _transfer(msg.sender, address(this), amount);\n1273-expression_statement-182-182", method="sell(uint256 amount)", type_label=expression_statement];
1286 [label="182_ msg.sender.transfer(amount * sellPrice);\n1286-expression_statement-183-183", method="sell(uint256 amount)", type_label=expression_statement];
1297 [label="184_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n1297-function_definition-185-186", method="bug_unchk_send14()", type_label=function_definition];
1302 [label="185_ msg.sender.transfer(1 ether);\n1302-expression_statement-186-186", method="bug_unchk_send14()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
15 -> 20  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 40  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
68 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
86 -> 95  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
97 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
126 -> 131  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
144 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
164 -> 169  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 189  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 230  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 252  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
271 -> 276  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
300 -> 305  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 334  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
368 -> 378  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
378 -> 386  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
386 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
394 -> 399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
409 -> 425  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
425 -> 434  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
434 -> 443  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
443 -> 456  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
456 -> 468  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
468 -> 474  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
501 -> 506  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
516 -> 533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
533 -> 544  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
544 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
547 -> 552  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
562 -> 583  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
583 -> 596  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
596 -> 606  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
606 -> 615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
618 -> 623  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
633 -> 650  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
670 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
673 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 701  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
701 -> 712  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
712 -> 720  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
732 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
735 -> 740  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
750 -> 767  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
767 -> 776  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
776 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 795  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
795 -> 805  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
815 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
818 -> 823  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
842 -> 847  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
862 -> 867  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 887  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 909  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
951 -> 956  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
966 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
982 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
991 -> 1000  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1013 -> 1021  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1021 -> 1029  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1029 -> 1035  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1049 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1064 -> 1078  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1078 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1110 -> 1115  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1125 -> 1139  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1151 -> 1156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1166 -> 1180  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1180 -> 1184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1188 -> 1193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1203 -> 1208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1208 -> 1218  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1236  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1254  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1254 -> 1262  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1262 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 1286  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1297 -> 1302  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
