digraph  {
13 [label="2_ struct Request {  \n        address requester;  \n        uint fee;  \n        address callbackAddr;  \n        bytes4 callbackFID;  \n        bytes32 paramsHash;  \n    }\n13-expression_statement-3-9", method="Request()", type_label=expression_statement];
146 [label="14_ address public constant SGX_ADDRESS = 0x18513702cCd928F2A3eb63d900aDf03c9cc81593;\n146-new_variable-15-15", method="", type_label=new_variable];
152 [label="15_ uint public GAS_PRICE = 5 * 10**10;\n152-new_variable-16-16", method="", type_label=new_variable];
162 [label="16_ uint public MIN_FEE = 30000 * GAS_PRICE;\n162-new_variable-17-17", method="", type_label=new_variable];
170 [label="17_ uint public CANCELLATION_FEE = 25000 * GAS_PRICE;\n170-new_variable-18-18", method="", type_label=new_variable];
178 [label="18_ uint public constant CANCELLED_FEE_FLAG = 1;\n178-new_variable-19-19", method="", type_label=new_variable];
184 [label="19_ uint public constant DELIVERED_FEE_FLAG = 0;\n184-new_variable-20-20", method="", type_label=new_variable];
190 [label="20_ int public constant FAIL_FLAG = -2 ** 250;\n190-new_variable-21-21", method="", type_label=new_variable];
199 [label="21_ int public constant SUCCESS_FLAG = 1;\n199-new_variable-22-22", method="", type_label=new_variable];
205 [label="22_ bool public killswitch;\n205-new_variable-23-23", method="", type_label=new_variable];
210 [label="23_ bool public externalCallFlag;\n210-new_variable-24-24", method="", type_label=new_variable];
215 [label="24_ uint64 public requestCnt;\n215-new_variable-25-25", method="", type_label=new_variable];
220 [label="25_ uint64 public unrespondedCnt;\n220-new_variable-26-26", method="", type_label=new_variable];
225 [label="26_ Request[2**64] public requests;\n225-new_variable-27-27", method="", type_label=new_variable];
235 [label="27_ int public newVersion = 0;\n235-new_variable-28-28", method="", type_label=new_variable];
243 [label="29_ function TownCrier() public {\n        requestCnt = 1;\n        requests[0].requester = msg.sender;\n        killswitch = false;\n        unrespondedCnt = 0;\n        externalCallFlag = false;\n    }\n243-function_definition-30-36", method="TownCrier()", type_label=function_definition];
247 [label="30_ requestCnt = 1;\n247-expression_statement-31-31", method="TownCrier()", type_label=expression_statement];
251 [label="31_ requests[0].requester = msg.sender;\n251-expression_statement-32-32", method="TownCrier()", type_label=expression_statement];
261 [label="32_ killswitch = false;\n261-expression_statement-33-33", method="TownCrier()", type_label=expression_statement];
266 [label="33_ unrespondedCnt = 0;\n266-expression_statement-34-34", method="TownCrier()", type_label=expression_statement];
270 [label="34_ externalCallFlag = false;\n270-expression_statement-35-35", method="TownCrier()", type_label=expression_statement];
275 [label="36_ function upgrade(address newAddr) {\n        if (msg.sender == requests[0].requester && unrespondedCnt == 0) {\n            newVersion = -int(newAddr);\n            killswitch = true;\n            Upgrade(newAddr);\n        }\n    }\n275-function_definition-37-43", method="upgrade(address newAddr)", type_label=function_definition];
282 [label="37_ if_msg.sender == requests[0].requester && unrespondedCnt == 0\n282-if-38-42", method="upgrade(address newAddr)", type_label=if];
1293 [label="37_ end_if", method="upgrade(address newAddr)", type_label=end_if];
297 [label="38_ newVersion = -int(newAddr);\n297-expression_statement-39-39", method="upgrade(address newAddr)", type_label=expression_statement];
304 [label="39_ killswitch = true;\n304-expression_statement-40-40", method="upgrade(address newAddr)", type_label=expression_statement];
309 [label="40_ Upgrade(newAddr);\n309-expression_statement-41-41", method="upgrade(address newAddr)", type_label=expression_statement];
314 [label="43_ function reset(uint price, uint minGas, uint cancellationGas) public {\n        if (msg.sender == requests[0].requester && unrespondedCnt == 0) {\n            GAS_PRICE = price;\n            MIN_FEE = price * minGas;\n            CANCELLATION_FEE = price * cancellationGas;\n            Reset(GAS_PRICE, MIN_FEE, CANCELLATION_FEE);\n        }\n    }\n314-function_definition-44-51", method="reset(uint price,uint minGas,uint cancellationGas)", type_label=function_definition];
330 [label="44_ if_msg.sender == requests[0].requester && unrespondedCnt == 0\n330-if-45-50", method="reset(uint price,uint minGas,uint cancellationGas)", type_label=if];
1341 [label="44_ end_if", method="reset(uint price,uint minGas,uint cancellationGas)", type_label=end_if];
345 [label="45_ GAS_PRICE = price;\n345-expression_statement-46-46", method="reset(uint price,uint minGas,uint cancellationGas)", type_label=expression_statement];
349 [label="46_ MIN_FEE = price * minGas;\n349-expression_statement-47-47", method="reset(uint price,uint minGas,uint cancellationGas)", type_label=expression_statement];
355 [label="47_ CANCELLATION_FEE = price * cancellationGas;\n355-expression_statement-48-48", method="reset(uint price,uint minGas,uint cancellationGas)", type_label=expression_statement];
361 [label="48_ Reset(GAS_PRICE, MIN_FEE, CANCELLATION_FEE);\n361-expression_statement-49-49", method="reset(uint price,uint minGas,uint cancellationGas)", type_label=expression_statement];
370 [label="51_ function suspend() public {\n        if (msg.sender == requests[0].requester) {\n            killswitch = true;\n        }\n    }\n370-function_definition-52-56", method="suspend()", type_label=function_definition];
374 [label="52_ if\n374-if-53-55", method="suspend()", type_label=if];
1385 [label="52_ end_if", method="suspend()", type_label=end_if];
385 [label="53_ killswitch = true;\n385-expression_statement-54-54", method="suspend()", type_label=expression_statement];
390 [label="56_ function restart() public {\n        if (msg.sender == requests[0].requester && newVersion == 0) {\n            killswitch = false;\n        }\n    }\n390-function_definition-57-61", method="restart()", type_label=function_definition];
394 [label="57_ if_msg.sender == requests[0].requester && newVersion == 0\n394-if-58-60", method="restart()", type_label=if];
1405 [label="57_ end_if", method="restart()", type_label=end_if];
409 [label="58_ killswitch = false;\n409-expression_statement-59-59", method="restart()", type_label=expression_statement];
414 [label="61_ function withdraw() public {\n        if (msg.sender == requests[0].requester && unrespondedCnt == 0) {\n            if (!requests[0].requester.call.value(this.balance)()) {\n                throw;\n            }\n        }\n    }\n414-function_definition-62-68", method="withdraw()", type_label=function_definition];
418 [label="62_ if_msg.sender == requests[0].requester && unrespondedCnt == 0\n418-if-63-67", method="withdraw()", type_label=if];
1429 [label="62_ end_if", method="withdraw()", type_label=end_if];
433 [label="63_ if\n433-if-64-66", method="withdraw()", type_label=if];
1444 [label="63_ end_if", method="withdraw()", type_label=end_if];
451 [label="64_ throw;\n451-expression_statement-65-65", method="withdraw()", type_label=expression_statement];
453 [label="68_ function request(uint8 requestType, address callbackAddr, bytes4 callbackFID, uint timestamp, bytes32[] requestData) public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            uint64 requestId = requestCnt;\n            requestCnt++;\n            unrespondedCnt++;\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n453-function_definition-69-101", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=function_definition];
483 [label="69_ if\n483-if-70-72", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=if];
1494 [label="69_ end_if", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=end_if];
486 [label="70_ throw;\n486-expression_statement-71-71", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
488 [label="72_ if\n488-if-73-80", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=if];
1499 [label="72_ end_if", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=end_if];
491 [label="73_ externalCallFlag = true;\n491-expression_statement-74-74", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
496 [label="74_ if\n496-if-75-77", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=if];
1507 [label="74_ end_if", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=end_if];
512 [label="75_ throw;\n512-expression_statement-76-76", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
514 [label="77_ externalCallFlag = false;\n514-expression_statement-78-78", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
519 [label="78_ return newVersion;\n519-return-79-79", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=return];
521 [label="80_ if_msg.value < MIN_FEE\n521-if-81-100", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=if];
1532 [label="80_ end_if", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=end_if];
528 [label="81_ externalCallFlag = true;\n528-expression_statement-82-82", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
533 [label="82_ if\n533-if-83-85", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=if];
1544 [label="82_ end_if", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=end_if];
549 [label="83_ throw;\n549-expression_statement-84-84", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
551 [label="85_ externalCallFlag = false;\n551-expression_statement-86-86", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
556 [label="86_ return FAIL_FLAG;\n556-return-87-87", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=return];
559 [label="88_ uint64 requestId = requestCnt;\n559-new_variable-89-89", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=new_variable];
565 [label="89_ requestCnt++;\n565-expression_statement-90-90", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
566 [label="89_ requestCnt++\n566-expression_statement-90-90", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
568 [label="90_ unrespondedCnt++;\n568-expression_statement-91-91", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
569 [label="90_ unrespondedCnt++\n569-expression_statement-91-91", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
571 [label="91_ bytes32 paramsHash = sha3(requestType, requestData);\n571-new_variable-92-92", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=new_variable];
582 [label="92_ requests[requestId].requester = msg.sender;\n582-expression_statement-93-93", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
592 [label="93_ requests[requestId].fee = msg.value;\n592-expression_statement-94-94", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
602 [label="94_ requests[requestId].callbackAddr = callbackAddr;\n602-expression_statement-95-95", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
610 [label="95_ requests[requestId].callbackFID = callbackFID;\n610-expression_statement-96-96", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
618 [label="96_ requests[requestId].paramsHash = paramsHash;\n618-expression_statement-97-97", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
626 [label="97_ RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n626-expression_statement-98-98", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=expression_statement];
649 [label="98_ return requestId;\n649-return-99-99", method="request(uint8 requestType,address callbackAddr,bytes4 callbackFID,uint timestamp,bytes32[] requestData)", type_label=return];
651 [label="101_ function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\n        if (msg.sender != SGX_ADDRESS ||\n                requestId <= 0 ||\n                requests[requestId].requester == 0 ||\n                requests[requestId].fee == DELIVERED_FEE_FLAG) {\n            return;\n        }\n        uint fee = requests[requestId].fee;\n        if (requests[requestId].paramsHash != paramsHash) {\n            return;\n        } else if (fee == CANCELLED_FEE_FLAG) {\n            SGX_ADDRESS.send(CANCELLATION_FEE);\n            requests[requestId].fee = DELIVERED_FEE_FLAG;\n            unrespondedCnt--;\n            return;\n        }\n        requests[requestId].fee = DELIVERED_FEE_FLAG;\n        unrespondedCnt--;\n        if (error < 2) {\n            SGX_ADDRESS.send(fee);         \n        } else {\n            externalCallFlag = true;\n            requests[requestId].requester.call.gas(2300).value(fee)();\n            externalCallFlag = false;\n        }\n        uint callbackGas = (fee - MIN_FEE) / tx.gasprice;  \n        DeliverInfo(requestId, fee, tx.gasprice, msg.gas, callbackGas, paramsHash, error, respData);  \n        if (callbackGas > msg.gas - 5000) {\n            callbackGas = msg.gas - 5000;\n        }\n        externalCallFlag = true;\n        requests[requestId].callbackAddr.call.gas(callbackGas)(requests[requestId].callbackFID, requestId, error, respData);  \n        externalCallFlag = false;\n    }\n651-function_definition-102-135", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=function_definition];
671 [label="102_ if_msg.sender != SGX_ADDRESS ||\n                requestId <= 0 ||\n                requests[requestId].requester == 0 ||\n                requests[requestId].fee == DELIVERED_FEE_FLAG\n671-if-103-108", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=if];
1682 [label="102_ end_if", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=end_if];
698 [label="106_ return;\n698-return-107-107", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=return];
699 [label="108_ uint fee = requests[requestId].fee;\n699-new_variable-109-109", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=new_variable];
709 [label="109_ if_requests[requestId].paramsHash != paramsHash\n709-if-110-117", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=if];
1720 [label="109_ end_if", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=end_if];
718 [label="110_ return;\n718-return-111-111", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=return];
719 [label="111_ if_fee == CANCELLED_FEE_FLAG\n719-if-112-117", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=if];
724 [label="112_ SGX_ADDRESS.send(CANCELLATION_FEE);\n724-expression_statement-113-113", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
731 [label="113_ requests[requestId].fee = DELIVERED_FEE_FLAG;\n731-expression_statement-114-114", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
739 [label="114_ unrespondedCnt--;\n739-expression_statement-115-115", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
740 [label="114_ unrespondedCnt--\n740-expression_statement-115-115", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
742 [label="115_ return;\n742-return-116-116", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=return];
743 [label="117_ requests[requestId].fee = DELIVERED_FEE_FLAG;\n743-expression_statement-118-118", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
751 [label="118_ unrespondedCnt--;\n751-expression_statement-119-119", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
752 [label="118_ unrespondedCnt--\n752-expression_statement-119-119", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
754 [label="119_ if_error < 2\n754-if-120-126", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=if];
1765 [label="119_ end_if", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=end_if];
759 [label="120_ SGX_ADDRESS.send(fee);\n759-expression_statement-121-121", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
767 [label="122_ externalCallFlag = true;\n767-expression_statement-123-123", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
772 [label="123_ requests[requestId].requester.call.gas(2300).value(fee)();\n772-expression_statement-124-124", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
791 [label="124_ externalCallFlag = false;\n791-expression_statement-125-125", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
796 [label="126_ uint callbackGas = (fee - MIN_FEE) / tx.gasprice;\n796-new_variable-127-127", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=new_variable];
809 [label="127_ DeliverInfo(requestId, fee, tx.gasprice, msg.gas, callbackGas, paramsHash, error, respData);\n809-expression_statement-128-128", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
832 [label="128_ if_callbackGas > msg.gas - 5000\n832-if-129-131", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=if];
1843 [label="128_ end_if", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=end_if];
841 [label="129_ callbackGas = msg.gas - 5000;\n841-expression_statement-130-130", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
849 [label="131_ externalCallFlag = true;\n849-expression_statement-132-132", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
854 [label="132_ requests[requestId].callbackAddr.call.gas(callbackGas)(requests[requestId].callbackFID, requestId, error, respData);\n854-expression_statement-133-133", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
880 [label="133_ externalCallFlag = false;\n880-expression_statement-134-134", method="deliver(uint64 requestId,bytes32 paramsHash,uint64 error,bytes32 respData)", type_label=expression_statement];
885 [label="135_ function cancel(uint64 requestId) public returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n        if (killswitch) {\n            return 0;\n        }\n        uint fee = requests[requestId].fee;\n        if (requests[requestId].requester == msg.sender && fee >= CANCELLATION_FEE) {\n            requests[requestId].fee = CANCELLED_FEE_FLAG;\n            externalCallFlag = true;\n            if (!msg.sender.call.value(fee - CANCELLATION_FEE)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            Cancel(requestId, msg.sender, requests[requestId].requester, requests[requestId].fee, 1);\n            return SUCCESS_FLAG;\n        } else {\n            Cancel(requestId, msg.sender, requests[requestId].requester, fee, -1);\n            return FAIL_FLAG;\n        }\n    }\n885-function_definition-136-157", method="cancel(uint64 requestId)", type_label=function_definition];
897 [label="136_ if\n897-if-137-139", method="cancel(uint64 requestId)", type_label=if];
1908 [label="136_ end_if", method="cancel(uint64 requestId)", type_label=end_if];
900 [label="137_ throw;\n900-expression_statement-138-138", method="cancel(uint64 requestId)", type_label=expression_statement];
902 [label="139_ if\n902-if-140-142", method="cancel(uint64 requestId)", type_label=if];
1913 [label="139_ end_if", method="cancel(uint64 requestId)", type_label=end_if];
905 [label="140_ return 0;\n905-return-141-141", method="cancel(uint64 requestId)", type_label=return];
907 [label="142_ uint fee = requests[requestId].fee;\n907-new_variable-143-143", method="cancel(uint64 requestId)", type_label=new_variable];
917 [label="143_ if_requests[requestId].requester == msg.sender && fee >= CANCELLATION_FEE\n917-if-144-156", method="cancel(uint64 requestId)", type_label=if];
1928 [label="143_ end_if", method="cancel(uint64 requestId)", type_label=end_if];
932 [label="144_ requests[requestId].fee = CANCELLED_FEE_FLAG;\n932-expression_statement-145-145", method="cancel(uint64 requestId)", type_label=expression_statement];
940 [label="145_ externalCallFlag = true;\n940-expression_statement-146-146", method="cancel(uint64 requestId)", type_label=expression_statement];
945 [label="146_ if\n945-if-147-149", method="cancel(uint64 requestId)", type_label=if];
1956 [label="146_ end_if", method="cancel(uint64 requestId)", type_label=end_if];
961 [label="147_ throw;\n961-expression_statement-148-148", method="cancel(uint64 requestId)", type_label=expression_statement];
963 [label="149_ externalCallFlag = false;\n963-expression_statement-150-150", method="cancel(uint64 requestId)", type_label=expression_statement];
968 [label="150_ Cancel(requestId, msg.sender, requests[requestId].requester, requests[requestId].fee, 1);\n968-expression_statement-151-151", method="cancel(uint64 requestId)", type_label=expression_statement];
991 [label="151_ return SUCCESS_FLAG;\n991-return-152-152", method="cancel(uint64 requestId)", type_label=return];
994 [label="153_ Cancel(requestId, msg.sender, requests[requestId].requester, fee, -1);\n994-expression_statement-154-154", method="cancel(uint64 requestId)", type_label=expression_statement];
1014 [label="154_ return FAIL_FLAG;\n1014-return-155-155", method="cancel(uint64 requestId)", type_label=return];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
146 -> 152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
152 -> 162  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
162 -> 170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
170 -> 178  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
178 -> 184  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
184 -> 190  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
190 -> 199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
199 -> 205  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
205 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
210 -> 215  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
215 -> 220  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
220 -> 225  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
243 -> 247  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
247 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
251 -> 261  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 266  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
266 -> 270  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
275 -> 282  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
282 -> 297  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
282 -> 1293  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1293 -> 314  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
297 -> 304  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
304 -> 309  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
309 -> 1293  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
314 -> 330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
330 -> 345  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
330 -> 1341  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1341 -> 370  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
345 -> 349  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
349 -> 355  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
355 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
361 -> 1341  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
370 -> 374  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
374 -> 385  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
374 -> 1385  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1385 -> 390  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 1385  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
390 -> 394  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
394 -> 409  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
394 -> 1405  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1405 -> 414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
409 -> 1405  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
414 -> 418  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
418 -> 433  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
418 -> 1429  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
433 -> 451  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
433 -> 1444  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1444 -> 453  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
451 -> 1444  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
453 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 486  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
483 -> 1494  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1494 -> 488  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
486 -> 1494  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
488 -> 491  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
488 -> 1499  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1499 -> 521  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
491 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 512  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
496 -> 1507  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1507 -> 514  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
512 -> 1507  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
514 -> 519  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
519 -> 1499  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
519 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
521 -> 528  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
521 -> 559  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1532 -> 651  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
528 -> 533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
533 -> 549  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
533 -> 1544  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1544 -> 551  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
549 -> 1544  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
551 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 1532  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
556 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
559 -> 565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 568  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
568 -> 571  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
571 -> 582  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
582 -> 592  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 602  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
602 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
610 -> 618  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
618 -> 626  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
626 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 1532  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
649 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
651 -> 671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
671 -> 698  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
671 -> 1682  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1682 -> 699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
698 -> 1682  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
698 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
699 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 718  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
709 -> 719  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1720 -> 743  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
718 -> 1720  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
718 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
719 -> 724  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
719 -> 1720  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
724 -> 731  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
731 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 742  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
742 -> 1720  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
742 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
743 -> 751  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
751 -> 754  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
754 -> 759  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
754 -> 767  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1765 -> 796  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 1765  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
767 -> 772  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
772 -> 791  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
791 -> 1765  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
796 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 832  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
832 -> 841  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
832 -> 1843  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1843 -> 849  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
841 -> 1843  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
849 -> 854  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
885 -> 897  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
897 -> 900  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
897 -> 1908  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1908 -> 902  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 1908  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
902 -> 905  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
902 -> 1913  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1913 -> 907  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 1913  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
905 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
907 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 932  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
917 -> 994  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1928 -> 2  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 940  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 945  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
945 -> 961  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
945 -> 1956  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1956 -> 963  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 1956  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
963 -> 968  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
968 -> 991  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
991 -> 1928  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
991 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
994 -> 1014  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 1928  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1014 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
