digraph  {
13 [label="2_ forked\n13-function_definition-3-3", type_label=function_definition];
16 [label="2_ constant\n16-expression_statement-3-3", type_label=expression_statement];
25 [label="5_ bool public isForked;\n25-new_variable-6-6", type_label=new_variable];
32 [label="7_ isForked = AmIOnTheFork(0x2BD2326c993DFaeF84f696526064FF22eba5b362).forked();\n32-expression_statement-8-8", type_label=expression_statement];
42 [label="9_ redirect\n42-function_definition-10-17", type_label=function_definition];
55 [label="10_ if\n55-if-11-14", type_label=if];
128 [label="10_ end_if", type_label=end_if];
58 [label="11_ ethAddress.transfer(msg.value);\n58-expression_statement-12-12", type_label=expression_statement];
67 [label="12_ return;\n67-return-13-13", type_label=return];
68 [label="14_ etcAddress.transfer(msg.value);\n68-expression_statement-15-15", type_label=expression_statement];
77 [label="15_ return;\n77-return-16-16", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
42 -> 55  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
55 -> 58  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
55 -> 128  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
128 -> 68  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
58 -> 67  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
67 -> 128  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
67 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
68 -> 77  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
77 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
