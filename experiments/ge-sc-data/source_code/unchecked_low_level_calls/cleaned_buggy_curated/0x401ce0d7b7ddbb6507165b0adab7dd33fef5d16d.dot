digraph  {
12 [label="2_ mul\n12-function_definition-3-7", type_label=function_definition];
29 [label="3_ uint256 c = a * b;\n29-new_variable-4-4", type_label=new_variable];
37 [label="4_ require(a == 0 || c / a == b);\n37-expression_statement-5-5", type_label=expression_statement];
50 [label="5_ return c;\n50-return-6-6", type_label=return];
52 [label="7_ div\n52-function_definition-8-12", type_label=function_definition];
69 [label="8_ require(b > 0);\n69-expression_statement-9-9", type_label=expression_statement];
76 [label="9_ uint256 c = a / b;\n76-new_variable-10-10", type_label=new_variable];
84 [label="10_ return c;\n84-return-11-11", type_label=return];
86 [label="12_ sub\n86-function_definition-13-17", type_label=function_definition];
103 [label="13_ require(b <= a);\n103-expression_statement-14-14", type_label=expression_statement];
110 [label="14_ uint256 c = a - b;\n110-new_variable-15-15", type_label=new_variable];
118 [label="15_ return c;\n118-return-16-16", type_label=return];
120 [label="17_ add\n120-function_definition-18-22", type_label=function_definition];
137 [label="18_ uint256 c = a + b;\n137-new_variable-19-19", type_label=new_variable];
145 [label="19_ require(c >= a);\n145-expression_statement-20-20", type_label=expression_statement];
152 [label="20_ return c;\n152-return-21-21", type_label=return];
157 [label="24_ transfer\n157-function_definition-25-25", type_label=function_definition];
180 [label="28_ address public Exchange = address(0x9E832A9CEaDf1E97D6d8da6922b87b59d25eEee0);\n180-new_variable-29-29", type_label=new_variable];
188 [label="29_ address public Foundation = address(0x5a403e651EC2cD3b6B385dC639f1A90ea01017f7);\n188-new_variable-30-30", type_label=new_variable];
196 [label="30_ uint256 public ProposalID = 0;\n196-new_variable-31-31", type_label=new_variable];
202 [label="31_ mapping(uint => Proposal) public Proposals;\n202-new_variable-32-32", type_label=new_variable];
210 [label="32_ struct Proposal {\n        uint256 id;\n        address to;\n        bool close;  \n        address tokenContractAddress;  \n        uint256 amount;\n        uint256 approvalByExchange;  \n        uint256 approvalByFoundation;\n    }\n210-expression_statement-33-41", type_label=expression_statement];
242 [label="43_ lookProposal\n242-function_definition-44-47", type_label=function_definition];
280 [label="44_ Proposal memory p = Proposals[id];\n280-new_variable-45-45", type_label=new_variable];
289 [label="45_ return (p.id, p.to, p.close, p.tokenContractAddress, p.amount, p.approvalByExchange, p.approvalByFoundation);\n289-return-46-46", type_label=return];
312 [label="47_ proposal\n312-function_definition-48-53", type_label=function_definition];
333 [label="48_ require(msg.sender == Foundation || msg.sender == Exchange);\n333-expression_statement-49-49", type_label=expression_statement];
348 [label="49_ ProposalID = ProposalID.add(1);\n348-expression_statement-50-50", type_label=expression_statement];
357 [label="50_ Proposals[ProposalID] = Proposal(ProposalID, _to, false, _tokenContractAddress, _amount, 0, 0);\n357-expression_statement-51-51", type_label=expression_statement];
379 [label="51_ return id;\n379-return-52-52", type_label=return];
381 [label="53_ approval\n381-function_definition-54-72", type_label=function_definition];
393 [label="54_ require(msg.sender == Foundation || msg.sender == Exchange);\n393-expression_statement-55-55", type_label=expression_statement];
408 [label="55_ Proposal storage p = Proposals[id];\n408-new_variable-56-56", type_label=new_variable];
417 [label="56_ require(p.close == false);\n417-expression_statement-57-57", type_label=expression_statement];
427 [label="57_ if_msg.sender == Foundation && p.approvalByFoundation == 0\n427-if-58-61", type_label=if];
1073 [label="57_ end_if", type_label=end_if];
440 [label="58_ p.approvalByFoundation = 1;\n440-expression_statement-59-59", type_label=expression_statement];
446 [label="59_ Proposals[ProposalID] = p;\n446-expression_statement-60-60", type_label=expression_statement];
452 [label="61_ if_msg.sender == Exchange && p.approvalByExchange == 0\n452-if-62-65", type_label=if];
1098 [label="61_ end_if", type_label=end_if];
465 [label="62_ p.approvalByExchange = 1;\n465-expression_statement-63-63", type_label=expression_statement];
471 [label="63_ Proposals[ProposalID] = p;\n471-expression_statement-64-64", type_label=expression_statement];
477 [label="65_ if_p.approvalByExchange == 1 && p.approvalByFoundation == 1\n477-if-66-70", type_label=if];
1123 [label="65_ end_if", type_label=end_if];
490 [label="66_ p.close = true;\n490-expression_statement-67-67", type_label=expression_statement];
497 [label="67_ Proposals[ProposalID] = p;\n497-expression_statement-68-68", type_label=expression_statement];
503 [label="68_ ERC20(p.tokenContractAddress).transfer(p.to, p.amount.mul(1e18));\n503-expression_statement-69-69", type_label=expression_statement];
526 [label="70_ return true;\n526-return-71-71", type_label=return];
529 [label="72_ refuse\n529-function_definition-73-89", type_label=function_definition];
541 [label="73_ require(msg.sender == Foundation || msg.sender == Exchange);\n541-expression_statement-74-74", type_label=expression_statement];
556 [label="74_ Proposal storage p = Proposals[id];\n556-new_variable-75-75", type_label=new_variable];
565 [label="75_ require(p.close == false);\n565-expression_statement-76-76", type_label=expression_statement];
575 [label="76_ if_msg.sender == Foundation && p.approvalByFoundation == 0\n575-if-77-82", type_label=if];
1221 [label="76_ end_if", type_label=end_if];
588 [label="77_ p.close = true;\n588-expression_statement-78-78", type_label=expression_statement];
595 [label="78_ p.approvalByFoundation = 2;\n595-expression_statement-79-79", type_label=expression_statement];
601 [label="79_ Proposals[ProposalID] = p;\n601-expression_statement-80-80", type_label=expression_statement];
607 [label="80_ return true;\n607-return-81-81", type_label=return];
610 [label="82_ if_msg.sender == Exchange && p.approvalByExchange == 0\n610-if-83-88", type_label=if];
1256 [label="82_ end_if", type_label=end_if];
623 [label="83_ p.close = true;\n623-expression_statement-84-84", type_label=expression_statement];
630 [label="84_ p.approvalByExchange = 2;\n630-expression_statement-85-85", type_label=expression_statement];
636 [label="85_ Proposals[ProposalID] = p;\n636-expression_statement-86-86", type_label=expression_statement];
642 [label="86_ return true;\n642-return-87-87", type_label=return];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
645;
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
37 -> 50  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
50 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
52 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
69 -> 76  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
76 -> 84  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
84 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
86 -> 103  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
103 -> 110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
110 -> 118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
118 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
120 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
137 -> 145  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
145 -> 152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
152 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
180 -> 188  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
188 -> 196  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
196 -> 202  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
202 -> 210  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
242 -> 280  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
280 -> 289  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
289 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
312 -> 333  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
333 -> 348  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
348 -> 357  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
357 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
381 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 408  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
408 -> 417  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
417 -> 427  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
427 -> 440  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
427 -> 1073  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1073 -> 452  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
440 -> 446  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
446 -> 1073  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
452 -> 465  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
452 -> 1098  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1098 -> 477  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
465 -> 471  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
471 -> 1098  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
477 -> 490  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
477 -> 1123  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1123 -> 526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
490 -> 497  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
497 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 1123  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
526 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
529 -> 541  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
541 -> 556  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
556 -> 565  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 575  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
575 -> 588  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
575 -> 1221  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1221 -> 610  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
588 -> 595  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
595 -> 601  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
601 -> 607  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
607 -> 1221  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
607 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
610 -> 623  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
610 -> 1256  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1256 -> 645  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
623 -> 630  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
630 -> 636  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
636 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 1256  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
642 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
}
