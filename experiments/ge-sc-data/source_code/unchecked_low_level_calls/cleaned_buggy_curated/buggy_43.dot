digraph  {
13 [label="2_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n13-function_definition-3-4", method="bug_unchk_send8()", type_label=function_definition];
18 [label="3_ msg.sender.transfer(1 ether);\n18-expression_statement-4-4", method="bug_unchk_send8()", type_label=expression_statement];
34 [label="5_ function _setMetadata(bytes memory metadata) internal {\n        emit MetadataSet(metadata);\n    }\n34-function_definition-6-8", method="_setMetadata(bytes memory metadata)", type_label=function_definition];
46 [label="8_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n46-function_definition-9-10", method="bug_unchk_send28()", type_label=function_definition];
51 [label="9_ msg.sender.transfer(1 ether);\n51-expression_statement-10-10", method="bug_unchk_send28()", type_label=expression_statement];
64 [label="12_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n64-function_definition-13-14", method="bug_unchk_send16()", type_label=function_definition];
69 [label="13_ msg.sender.transfer(1 ether);\n69-expression_statement-14-14", method="bug_unchk_send16()", type_label=expression_statement];
79 [label="14_ address private _operator;\n79-new_variable-15-15", method="", type_label=new_variable];
84 [label="15_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n84-function_definition-16-17", method="bug_unchk_send24()", type_label=function_definition];
89 [label="16_ msg.sender.transfer(1 ether);\n89-expression_statement-17-17", method="bug_unchk_send24()", type_label=expression_statement];
99 [label="17_ bool private _status;\n99-new_variable-18-18", method="", type_label=new_variable];
104 [label="18_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n104-function_definition-19-20", method="bug_unchk_send27()", type_label=function_definition];
109 [label="19_ msg.sender.transfer(1 ether);\n109-expression_statement-20-20", method="bug_unchk_send27()", type_label=expression_statement];
129 [label="21_ function _setOperator(address operator) internal {\n        require(_operator != operator, \"cannot set same operator\");\n        _operator = operator;\n        emit OperatorUpdated(operator, hasActiveOperator());\n    }\n129-function_definition-22-26", method="_setOperator(address operator)", type_label=function_definition];
137 [label="22_ require(_operator != operator, \"cannot set same operator\");\n137-expression_statement-23-23", method="_setOperator(address operator)", type_label=expression_statement];
147 [label="23_ _operator = operator;\n147-expression_statement-24-24", method="_setOperator(address operator)", type_label=expression_statement];
158 [label="26_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n158-function_definition-27-28", method="bug_unchk_send21()", type_label=function_definition];
163 [label="27_ msg.sender.transfer(1 ether);\n163-expression_statement-28-28", method="bug_unchk_send21()", type_label=expression_statement];
173 [label="28_ function _transferOperator(address operator) internal {\n        require(_operator != address(0), \"operator not set\");\n        _setOperator(operator);\n    }\n173-function_definition-29-32", method="_transferOperator(address operator)", type_label=function_definition];
181 [label="29_ require(_operator != address(0), \"operator not set\");\n181-expression_statement-30-30", method="_transferOperator(address operator)", type_label=expression_statement];
193 [label="30_ _setOperator(operator);\n193-expression_statement-31-31", method="_transferOperator(address operator)", type_label=expression_statement];
198 [label="32_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n198-function_definition-33-34", method="bug_unchk_send10()", type_label=function_definition];
203 [label="33_ msg.sender.transfer(1 ether);\n203-expression_statement-34-34", method="bug_unchk_send10()", type_label=expression_statement];
213 [label="34_ function _renounceOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _operator = address(0);\n        _status = false;\n        emit OperatorUpdated(address(0), false);\n    }\n213-function_definition-35-40", method="_renounceOperator()", type_label=function_definition];
217 [label="35_ require(hasActiveOperator(), \"only when operator active\");\n217-expression_statement-36-36", method="_renounceOperator()", type_label=expression_statement];
226 [label="36_ _operator = address(0);\n226-expression_statement-37-37", method="_renounceOperator()", type_label=expression_statement];
232 [label="37_ _status = false;\n232-expression_statement-38-38", method="_renounceOperator()", type_label=expression_statement];
246 [label="40_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n246-function_definition-41-42", method="bug_unchk_send22()", type_label=function_definition];
251 [label="41_ msg.sender.transfer(1 ether);\n251-expression_statement-42-42", method="bug_unchk_send22()", type_label=expression_statement];
261 [label="42_ function _activateOperator() internal {\n        require(!hasActiveOperator(), \"only when operator not active\");\n        _status = true;\n        emit OperatorUpdated(_operator, true);\n    }\n261-function_definition-43-47", method="_activateOperator()", type_label=function_definition];
265 [label="43_ require(!hasActiveOperator(), \"only when operator not active\");\n265-expression_statement-44-44", method="_activateOperator()", type_label=expression_statement];
275 [label="44_ _status = true;\n275-expression_statement-45-45", method="_activateOperator()", type_label=expression_statement];
287 [label="47_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n287-function_definition-48-49", method="bug_unchk_send12()", type_label=function_definition];
292 [label="48_ msg.sender.transfer(1 ether);\n292-expression_statement-49-49", method="bug_unchk_send12()", type_label=expression_statement];
302 [label="49_ function _deactivateOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _status = false;\n        emit OperatorUpdated(_operator, false);\n    }\n302-function_definition-50-54", method="_deactivateOperator()", type_label=function_definition];
306 [label="50_ require(hasActiveOperator(), \"only when operator active\");\n306-expression_statement-51-51", method="_deactivateOperator()", type_label=expression_statement];
315 [label="51_ _status = false;\n315-expression_statement-52-52", method="_deactivateOperator()", type_label=expression_statement];
327 [label="54_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n327-function_definition-55-56", method="bug_unchk_send11()", type_label=function_definition];
332 [label="55_ msg.sender.transfer(1 ether);\n332-expression_statement-56-56", method="bug_unchk_send11()", type_label=expression_statement];
342 [label="56_ function getOperator() public view returns (address operator) {\n        operator = _operator;\n    }\n342-function_definition-57-59", method="getOperator()", type_label=function_definition];
352 [label="57_ operator = _operator;\n352-expression_statement-58-58", method="getOperator()", type_label=expression_statement];
356 [label="59_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n356-function_definition-60-61", method="bug_unchk_send1()", type_label=function_definition];
361 [label="60_ msg.sender.transfer(1 ether);\n361-expression_statement-61-61", method="bug_unchk_send1()", type_label=expression_statement];
371 [label="61_ function isOperator(address caller) public view returns (bool ok) {\n        return (caller == getOperator());\n    }\n371-function_definition-62-64", method="isOperator(address caller)", type_label=function_definition];
385 [label="62_ return (caller == getOperator());\n385-return-63-63", method="isOperator(address caller)", type_label=return];
391 [label="64_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n391-function_definition-65-66", method="bug_unchk_send2()", type_label=function_definition];
396 [label="65_ msg.sender.transfer(1 ether);\n396-expression_statement-66-66", method="bug_unchk_send2()", type_label=expression_statement];
406 [label="66_ function hasActiveOperator() public view returns (bool ok) {\n        return _status;\n    }\n406-function_definition-67-69", method="hasActiveOperator()", type_label=function_definition];
416 [label="67_ return _status;\n416-return-68-68", method="hasActiveOperator()", type_label=return];
418 [label="69_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n418-function_definition-70-71", method="bug_unchk_send17()", type_label=function_definition];
423 [label="70_ msg.sender.transfer(1 ether);\n423-expression_statement-71-71", method="bug_unchk_send17()", type_label=expression_statement];
433 [label="71_ function isActiveOperator(address caller) public view returns (bool ok) {\n        return (isOperator(caller) && hasActiveOperator());\n    }\n433-function_definition-72-74", method="isActiveOperator(address caller)", type_label=function_definition];
447 [label="72_ return (isOperator(caller) && hasActiveOperator());\n447-return-73-73", method="isActiveOperator(address caller)", type_label=return];
456 [label="74_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n456-function_definition-75-76", method="bug_unchk_send3()", type_label=function_definition];
461 [label="75_ msg.sender.transfer(1 ether);\n461-expression_statement-76-76", method="bug_unchk_send3()", type_label=expression_statement];
474 [label="78_ struct MultiHash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 digestSize;\n    }\n474-expression_statement-79-83", method="MultiHash()", type_label=expression_statement];
488 [label="83_ function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {\n        bytes memory out = new bytes(34);\n        out[0] = byte(multihash.hashFunction);\n        out[1] = byte(multihash.digestSize);\n        uint8 i;\n        for (i = 0; i < 32; i++) {\n          out[i+2] = multihash.hash[i];\n        }\n        return out;\n    }\n488-function_definition-84-93", method="_combineMultiHash(MultiHash memory multihash)", type_label=function_definition];
502 [label="84_ bytes memory out = new bytes(34);\n502-new_variable-85-85", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
513 [label="85_ out[0] = byte(multihash.hashFunction);\n513-expression_statement-86-86", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
523 [label="86_ out[1] = byte(multihash.digestSize);\n523-expression_statement-87-87", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
533 [label="87_ uint8 i;\n533-new_variable-88-88", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
538 [label="88_ for(i < 32;;i++)\n538-for-89-91", method="_combineMultiHash(MultiHash memory multihash)", type_label=for];
1940 [label="88_ end_loop", method="_combineMultiHash(MultiHash memory multihash)", type_label=end_loop];
547 [label="88_ i++\n547-expression_statement-89-89", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
550 [label="89_ out[i+2] = multihash.hash[i];\n550-expression_statement-90-90", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
562 [label="91_ return out;\n562-return-92-92", method="_combineMultiHash(MultiHash memory multihash)", type_label=return];
564 [label="93_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n564-function_definition-94-95", method="bug_unchk_send9()", type_label=function_definition];
569 [label="94_ msg.sender.transfer(1 ether);\n569-expression_statement-95-95", method="bug_unchk_send9()", type_label=expression_statement];
579 [label="95_ function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {\n        require(source.length == 34, \"length of source must be 34\");\n        uint8 hashFunction = uint8(source[0]);\n        uint8 digestSize = uint8(source[1]);\n        bytes32 hash;\n        assembly {\n          hash := mload(add(source, 34))\n        }\n        return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n    }\n579-function_definition-96-109", method="_splitMultiHash(bytes memory source)", type_label=function_definition];
593 [label="96_ require(source.length == 34, \"length of source must be 34\");\n593-expression_statement-97-97", method="_splitMultiHash(bytes memory source)", type_label=expression_statement];
605 [label="97_ uint8 hashFunction = uint8(source[0]);\n605-new_variable-98-98", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
615 [label="98_ uint8 digestSize = uint8(source[1]);\n615-new_variable-99-99", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
625 [label="99_ bytes32 hash;\n625-new_variable-100-100", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
643 [label="103_ return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n643-return-104-108", method="_splitMultiHash(bytes memory source)", type_label=return];
657 [label="109_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n657-function_definition-110-111", method="bug_unchk_send25()", type_label=function_definition];
662 [label="110_ msg.sender.transfer(1 ether);\n662-expression_statement-111-111", method="bug_unchk_send25()", type_label=expression_statement];
693 [label="114_ function create(bytes calldata initData) external returns (address instance);\n693-function_definition-115-115", method="create(bytes calldata initData)", type_label=function_definition];
705 [label="115_ function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);\n705-function_definition-116-116", method="createSalty(bytes calldata initData,bytes32 salt)", type_label=function_definition];
721 [label="116_ function getInitSelector() external view returns (bytes4 initSelector);\n721-function_definition-117-117", method="getInitSelector()", type_label=function_definition];
730 [label="117_ function getInstanceRegistry() external view returns (address instanceRegistry);\n730-function_definition-118-118", method="getInstanceRegistry()", type_label=function_definition];
739 [label="118_ function getTemplate() external view returns (address template);\n739-function_definition-119-119", method="getTemplate()", type_label=function_definition];
748 [label="119_ function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);\n748-function_definition-120-120", method="getSaltyInstance(bytes calldata,bytes32 salt)", type_label=function_definition];
764 [label="120_ function getNextInstance(bytes calldata) external view returns (address instance);\n764-function_definition-121-121", method="getNextInstance(bytes calldata)", type_label=function_definition];
776 [label="121_ function getInstanceCreator(address instance) external view returns (address creator);\n776-function_definition-122-122", method="getInstanceCreator(address instance)", type_label=function_definition];
789 [label="122_ function getInstanceType() external view returns (bytes4 instanceType);\n789-function_definition-123-123", method="getInstanceType()", type_label=function_definition];
798 [label="123_ function getInstanceCount() external view returns (uint256 count);\n798-function_definition-124-124", method="getInstanceCount()", type_label=function_definition];
807 [label="124_ function getInstance(uint256 index) external view returns (address instance);\n807-function_definition-125-125", method="getInstance(uint256 index)", type_label=function_definition];
820 [label="125_ function getInstances() external view returns (address[] memory instances);\n820-function_definition-126-126", method="getInstances()", type_label=function_definition];
830 [label="126_ function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n830-function_definition-127-127", method="getPaginatedInstances(uint256 startIndex,uint256 endIndex)", type_label=function_definition];
854 [label="129_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n854-function_definition-130-131", method="bug_unchk_send5()", type_label=function_definition];
859 [label="130_ msg.sender.transfer(1 ether);\n859-expression_statement-131-131", method="bug_unchk_send5()", type_label=expression_statement];
869 [label="131_ MultiHash private _proofHash;\n869-new_variable-132-132", method="", type_label=new_variable];
875 [label="132_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n875-function_definition-133-134", method="bug_unchk_send31()", type_label=function_definition];
880 [label="133_ msg.sender.transfer(1 ether);\n880-expression_statement-134-134", method="bug_unchk_send31()", type_label=expression_statement];
900 [label="135_ function _setProofHash(bytes memory proofHash) internal {\n        _proofHash = MultiHashWrapper._splitMultiHash(proofHash);\n        emit ProofHashSet(msg.sender, proofHash);\n    }\n900-function_definition-136-139", method="_setProofHash(bytes memory proofHash)", type_label=function_definition];
908 [label="136_ _proofHash = MultiHashWrapper._splitMultiHash(proofHash);\n908-expression_statement-137-137", method="_setProofHash(bytes memory proofHash)", type_label=expression_statement];
925 [label="139_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n925-function_definition-140-141", method="bug_unchk_send19()", type_label=function_definition];
930 [label="140_ msg.sender.transfer(1 ether);\n930-expression_statement-141-141", method="bug_unchk_send19()", type_label=expression_statement];
940 [label="141_ function getProofHash() public view returns (bytes memory proofHash) {\n        proofHash = MultiHashWrapper._combineMultiHash(_proofHash);\n    }\n940-function_definition-142-144", method="getProofHash()", type_label=function_definition];
950 [label="142_ proofHash = MultiHashWrapper._combineMultiHash(_proofHash);\n950-expression_statement-143-143", method="getProofHash()", type_label=expression_statement];
959 [label="144_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n959-function_definition-145-146", method="bug_unchk_send26()", type_label=function_definition];
964 [label="145_ msg.sender.transfer(1 ether);\n964-expression_statement-146-146", method="bug_unchk_send26()", type_label=expression_statement];
977 [label="148_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n977-function_definition-149-150", method="bug_unchk_send15()", type_label=function_definition];
982 [label="149_ msg.sender.transfer(1 ether);\n982-expression_statement-150-150", method="bug_unchk_send15()", type_label=expression_statement];
992 [label="150_ address private _factory;\n992-new_variable-151-151", method="", type_label=new_variable];
997 [label="151_ modifier initializeTemplate() {\n        _factory = msg.sender;\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n997-expression_statement-152-158", method="", type_label=expression_statement];
1000 [label="152_ _factory = msg.sender;\n1000-expression_statement-153-153", method="", type_label=expression_statement];
1006 [label="153_ uint32 codeSize;\n1006-new_variable-154-154", method="", type_label=new_variable];
1020 [label="155_ require(codeSize == 0, \"must be called within contract constructor\");\n1020-expression_statement-156-156", method="", type_label=expression_statement];
1030 [label="156_ _;\n1030-expression_statement-157-157", method="", type_label=expression_statement];
1032 [label="158_ function getCreator() public view returns (address creator) {\n        creator = iFactory(_factory).getInstanceCreator(address(this));\n    }\n1032-function_definition-159-161", method="getCreator()", type_label=function_definition];
1042 [label="159_ creator = iFactory(_factory).getInstanceCreator(address(this));\n1042-expression_statement-160-160", method="getCreator()", type_label=expression_statement];
1056 [label="161_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n1056-function_definition-162-163", method="bug_unchk_send20()", type_label=function_definition];
1061 [label="162_ msg.sender.transfer(1 ether);\n1061-expression_statement-163-163", method="bug_unchk_send20()", type_label=expression_statement];
1071 [label="163_ function isCreator(address caller) public view returns (bool ok) {\n        ok = (caller == getCreator());\n    }\n1071-function_definition-164-166", method="isCreator(address caller)", type_label=function_definition];
1085 [label="164_ ok = (caller == getCreator());\n1085-expression_statement-165-165", method="isCreator(address caller)", type_label=expression_statement];
1093 [label="166_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n1093-function_definition-167-168", method="bug_unchk_send32()", type_label=function_definition];
1098 [label="167_ msg.sender.transfer(1 ether);\n1098-expression_statement-168-168", method="bug_unchk_send32()", type_label=expression_statement];
1108 [label="168_ function getFactory() public view returns (address factory) {\n        factory = _factory;\n    }\n1108-function_definition-169-171", method="getFactory()", type_label=function_definition];
1118 [label="169_ factory = _factory;\n1118-expression_statement-170-170", method="getFactory()", type_label=expression_statement];
1122 [label="171_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n1122-function_definition-172-173", method="bug_unchk_send4()", type_label=function_definition];
1127 [label="172_ msg.sender.transfer(1 ether);\n1127-expression_statement-173-173", method="bug_unchk_send4()", type_label=expression_statement];
1152 [label="175_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n1152-function_definition-176-177", method="bug_unchk_send13()", type_label=function_definition];
1157 [label="176_ msg.sender.transfer(1 ether);\n1157-expression_statement-177-177", method="bug_unchk_send13()", type_label=expression_statement];
1181 [label="178_ function initialize(\n        address operator,\n        bytes memory multihash,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        if (multihash.length != 0) {\n            ProofHash._setProofHash(multihash);\n        }\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n        emit Initialized(operator, multihash, metadata);\n    }\n1181-function_definition-179-195", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=function_definition];
1196 [label="182_ initializeTemplate()\n1196-expression_statement-183-183", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1199 [label="183_ if_multihash.length != 0\n1199-if-184-186", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
2601 [label="183_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1206 [label="184_ ProofHash._setProofHash(multihash);\n1206-expression_statement-185-185", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1213 [label="186_ if_operator != address(0)\n1213-if-187-190", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
2615 [label="186_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1220 [label="187_ Operated._setOperator(operator);\n1220-expression_statement-188-188", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1227 [label="188_ Operated._activateOperator();\n1227-expression_statement-189-189", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1232 [label="190_ if_metadata.length != 0\n1232-if-191-193", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
2634 [label="190_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1239 [label="191_ EventMetadata._setMetadata(metadata);\n1239-expression_statement-192-192", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1254 [label="195_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1254-function_definition-196-197", method="bug_unchk_send7()", type_label=function_definition];
1259 [label="196_ msg.sender.transfer(1 ether);\n1259-expression_statement-197-197", method="bug_unchk_send7()", type_label=expression_statement];
1269 [label="197_ function setMetadata(bytes memory metadata) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        EventMetadata._setMetadata(metadata);\n    }\n1269-function_definition-198-201", method="setMetadata(bytes memory metadata)", type_label=function_definition];
1277 [label="198_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1277-expression_statement-199-199", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1301 [label="199_ EventMetadata._setMetadata(metadata);\n1301-expression_statement-200-200", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1308 [label="201_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n1308-function_definition-202-203", method="bug_unchk_send23()", type_label=function_definition];
1313 [label="202_ msg.sender.transfer(1 ether);\n1313-expression_statement-203-203", method="bug_unchk_send23()", type_label=expression_statement];
1323 [label="203_ function transferOperator(address operator) public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._transferOperator(operator);\n    }\n1323-function_definition-204-207", method="transferOperator(address operator)", type_label=function_definition];
1331 [label="204_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1331-expression_statement-205-205", method="transferOperator(address operator)", type_label=expression_statement];
1346 [label="205_ Operated._transferOperator(operator);\n1346-expression_statement-206-206", method="transferOperator(address operator)", type_label=expression_statement];
1353 [label="207_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n1353-function_definition-208-209", method="bug_unchk_send14()", type_label=function_definition];
1358 [label="208_ msg.sender.transfer(1 ether);\n1358-expression_statement-209-209", method="bug_unchk_send14()", type_label=expression_statement];
1368 [label="209_ function renounceOperator() public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._renounceOperator();\n    }\n1368-function_definition-210-213", method="renounceOperator()", type_label=function_definition];
1372 [label="210_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1372-expression_statement-211-211", method="renounceOperator()", type_label=expression_statement];
1387 [label="211_ Operated._renounceOperator();\n1387-expression_statement-212-212", method="renounceOperator()", type_label=expression_statement];
1392 [label="213_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n1392-function_definition-214-215", method="bug_unchk_send30()", type_label=function_definition];
1397 [label="214_ msg.sender.transfer(1 ether);\n1397-expression_statement-215-215", method="bug_unchk_send30()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1246;
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
46 -> 51  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
84 -> 89  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
137 -> 147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
198 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
217 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
265 -> 275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
391 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
416 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
418 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
456 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
488 -> 502  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
502 -> 513  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
513 -> 523  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
523 -> 533  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
533 -> 538  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
538 -> 550  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
538 -> 1940  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1940 -> 562  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
547 -> 538  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
550 -> 547  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
562 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
564 -> 569  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
579 -> 593  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
593 -> 605  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
605 -> 615  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
615 -> 625  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
643 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
657 -> 662  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
854 -> 859  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
875 -> 880  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 908  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
925 -> 930  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
940 -> 950  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
959 -> 964  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
977 -> 982  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
992 -> 997  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1000 -> 1006  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1020 -> 1030  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1032 -> 1042  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1056 -> 1061  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1071 -> 1085  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1093 -> 1098  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1108 -> 1118  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1122 -> 1127  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1152 -> 1157  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1181 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 1206  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1199 -> 2601  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2601 -> 1213  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1206 -> 2601  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1213 -> 1220  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1213 -> 2615  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2615 -> 1232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1220 -> 1227  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1227 -> 2615  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1232 -> 1239  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1232 -> 2634  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2634 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1239 -> 2634  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1254 -> 1259  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1269 -> 1277  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1277 -> 1301  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1308 -> 1313  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1323 -> 1331  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1331 -> 1346  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1353 -> 1358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1368 -> 1372  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1372 -> 1387  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1392 -> 1397  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
