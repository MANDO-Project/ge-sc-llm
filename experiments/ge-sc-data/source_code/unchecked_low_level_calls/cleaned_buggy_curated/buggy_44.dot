digraph  {
13 [label="2_ function bug_unchk_send30() payable public{\n      msg.sender.transfer(1 ether);}\n13-function_definition-3-4", method="bug_unchk_send30()", type_label=function_definition];
18 [label="3_ msg.sender.transfer(1 ether);\n18-expression_statement-4-4", method="bug_unchk_send30()", type_label=expression_statement];
34 [label="5_ function _setMetadata(bytes memory metadata) internal {\n        emit MetadataSet(metadata);\n    }\n34-function_definition-6-8", method="_setMetadata(bytes memory metadata)", type_label=function_definition];
46 [label="8_ function bug_unchk_send5() payable public{\n      msg.sender.transfer(1 ether);}\n46-function_definition-9-10", method="bug_unchk_send5()", type_label=function_definition];
51 [label="9_ msg.sender.transfer(1 ether);\n51-expression_statement-10-10", method="bug_unchk_send5()", type_label=expression_statement];
64 [label="12_ function bug_unchk_send6() payable public{\n      msg.sender.transfer(1 ether);}\n64-function_definition-13-14", method="bug_unchk_send6()", type_label=function_definition];
69 [label="13_ msg.sender.transfer(1 ether);\n69-expression_statement-14-14", method="bug_unchk_send6()", type_label=expression_statement];
79 [label="14_ address private _operator;\n79-new_variable-15-15", method="", type_label=new_variable];
84 [label="15_ function bug_unchk_send16() payable public{\n      msg.sender.transfer(1 ether);}\n84-function_definition-16-17", method="bug_unchk_send16()", type_label=function_definition];
89 [label="16_ msg.sender.transfer(1 ether);\n89-expression_statement-17-17", method="bug_unchk_send16()", type_label=expression_statement];
99 [label="17_ bool private _status;\n99-new_variable-18-18", method="", type_label=new_variable];
104 [label="18_ function bug_unchk_send8() payable public{\n      msg.sender.transfer(1 ether);}\n104-function_definition-19-20", method="bug_unchk_send8()", type_label=function_definition];
109 [label="19_ msg.sender.transfer(1 ether);\n109-expression_statement-20-20", method="bug_unchk_send8()", type_label=expression_statement];
129 [label="21_ function _setOperator(address operator) internal {\n        require(_operator != operator, \"cannot set same operator\");\n        _operator = operator;\n        emit OperatorUpdated(operator, hasActiveOperator());\n    }\n129-function_definition-22-26", method="_setOperator(address operator)", type_label=function_definition];
137 [label="22_ require(_operator != operator, \"cannot set same operator\");\n137-expression_statement-23-23", method="_setOperator(address operator)", type_label=expression_statement];
147 [label="23_ _operator = operator;\n147-expression_statement-24-24", method="_setOperator(address operator)", type_label=expression_statement];
158 [label="26_ function bug_unchk_send15() payable public{\n      msg.sender.transfer(1 ether);}\n158-function_definition-27-28", method="bug_unchk_send15()", type_label=function_definition];
163 [label="27_ msg.sender.transfer(1 ether);\n163-expression_statement-28-28", method="bug_unchk_send15()", type_label=expression_statement];
173 [label="28_ function _transferOperator(address operator) internal {\n        require(_operator != address(0), \"operator not set\");\n        _setOperator(operator);\n    }\n173-function_definition-29-32", method="_transferOperator(address operator)", type_label=function_definition];
181 [label="29_ require(_operator != address(0), \"operator not set\");\n181-expression_statement-30-30", method="_transferOperator(address operator)", type_label=expression_statement];
193 [label="30_ _setOperator(operator);\n193-expression_statement-31-31", method="_transferOperator(address operator)", type_label=expression_statement];
198 [label="32_ function bug_unchk_send28() payable public{\n      msg.sender.transfer(1 ether);}\n198-function_definition-33-34", method="bug_unchk_send28()", type_label=function_definition];
203 [label="33_ msg.sender.transfer(1 ether);\n203-expression_statement-34-34", method="bug_unchk_send28()", type_label=expression_statement];
213 [label="34_ function _renounceOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _operator = address(0);\n        _status = false;\n        emit OperatorUpdated(address(0), false);\n    }\n213-function_definition-35-40", method="_renounceOperator()", type_label=function_definition];
217 [label="35_ require(hasActiveOperator(), \"only when operator active\");\n217-expression_statement-36-36", method="_renounceOperator()", type_label=expression_statement];
226 [label="36_ _operator = address(0);\n226-expression_statement-37-37", method="_renounceOperator()", type_label=expression_statement];
232 [label="37_ _status = false;\n232-expression_statement-38-38", method="_renounceOperator()", type_label=expression_statement];
246 [label="40_ function bug_unchk_send21() payable public{\n      msg.sender.transfer(1 ether);}\n246-function_definition-41-42", method="bug_unchk_send21()", type_label=function_definition];
251 [label="41_ msg.sender.transfer(1 ether);\n251-expression_statement-42-42", method="bug_unchk_send21()", type_label=expression_statement];
261 [label="42_ function _activateOperator() internal {\n        require(!hasActiveOperator(), \"only when operator not active\");\n        _status = true;\n        emit OperatorUpdated(_operator, true);\n    }\n261-function_definition-43-47", method="_activateOperator()", type_label=function_definition];
265 [label="43_ require(!hasActiveOperator(), \"only when operator not active\");\n265-expression_statement-44-44", method="_activateOperator()", type_label=expression_statement];
275 [label="44_ _status = true;\n275-expression_statement-45-45", method="_activateOperator()", type_label=expression_statement];
287 [label="47_ function bug_unchk_send10() payable public{\n      msg.sender.transfer(1 ether);}\n287-function_definition-48-49", method="bug_unchk_send10()", type_label=function_definition];
292 [label="48_ msg.sender.transfer(1 ether);\n292-expression_statement-49-49", method="bug_unchk_send10()", type_label=expression_statement];
302 [label="49_ function _deactivateOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _status = false;\n        emit OperatorUpdated(_operator, false);\n    }\n302-function_definition-50-54", method="_deactivateOperator()", type_label=function_definition];
306 [label="50_ require(hasActiveOperator(), \"only when operator active\");\n306-expression_statement-51-51", method="_deactivateOperator()", type_label=expression_statement];
315 [label="51_ _status = false;\n315-expression_statement-52-52", method="_deactivateOperator()", type_label=expression_statement];
327 [label="54_ function bug_unchk_send22() payable public{\n      msg.sender.transfer(1 ether);}\n327-function_definition-55-56", method="bug_unchk_send22()", type_label=function_definition];
332 [label="55_ msg.sender.transfer(1 ether);\n332-expression_statement-56-56", method="bug_unchk_send22()", type_label=expression_statement];
342 [label="56_ function getOperator() public view returns (address operator) {\n        operator = _operator;\n    }\n342-function_definition-57-59", method="getOperator()", type_label=function_definition];
352 [label="57_ operator = _operator;\n352-expression_statement-58-58", method="getOperator()", type_label=expression_statement];
356 [label="59_ function bug_unchk_send12() payable public{\n      msg.sender.transfer(1 ether);}\n356-function_definition-60-61", method="bug_unchk_send12()", type_label=function_definition];
361 [label="60_ msg.sender.transfer(1 ether);\n361-expression_statement-61-61", method="bug_unchk_send12()", type_label=expression_statement];
371 [label="61_ function isOperator(address caller) public view returns (bool ok) {\n        return (caller == getOperator());\n    }\n371-function_definition-62-64", method="isOperator(address caller)", type_label=function_definition];
385 [label="62_ return (caller == getOperator());\n385-return-63-63", method="isOperator(address caller)", type_label=return];
391 [label="64_ function bug_unchk_send11() payable public{\n      msg.sender.transfer(1 ether);}\n391-function_definition-65-66", method="bug_unchk_send11()", type_label=function_definition];
396 [label="65_ msg.sender.transfer(1 ether);\n396-expression_statement-66-66", method="bug_unchk_send11()", type_label=expression_statement];
406 [label="66_ function hasActiveOperator() public view returns (bool ok) {\n        return _status;\n    }\n406-function_definition-67-69", method="hasActiveOperator()", type_label=function_definition];
416 [label="67_ return _status;\n416-return-68-68", method="hasActiveOperator()", type_label=return];
418 [label="69_ function bug_unchk_send1() payable public{\n      msg.sender.transfer(1 ether);}\n418-function_definition-70-71", method="bug_unchk_send1()", type_label=function_definition];
423 [label="70_ msg.sender.transfer(1 ether);\n423-expression_statement-71-71", method="bug_unchk_send1()", type_label=expression_statement];
433 [label="71_ function isActiveOperator(address caller) public view returns (bool ok) {\n        return (isOperator(caller) && hasActiveOperator());\n    }\n433-function_definition-72-74", method="isActiveOperator(address caller)", type_label=function_definition];
447 [label="72_ return (isOperator(caller) && hasActiveOperator());\n447-return-73-73", method="isActiveOperator(address caller)", type_label=return];
456 [label="74_ function bug_unchk_send2() payable public{\n      msg.sender.transfer(1 ether);}\n456-function_definition-75-76", method="bug_unchk_send2()", type_label=function_definition];
461 [label="75_ msg.sender.transfer(1 ether);\n461-expression_statement-76-76", method="bug_unchk_send2()", type_label=expression_statement];
474 [label="78_ function bug_unchk_send27() payable public{\n      msg.sender.transfer(1 ether);}\n474-function_definition-79-80", method="bug_unchk_send27()", type_label=function_definition];
479 [label="79_ msg.sender.transfer(1 ether);\n479-expression_statement-80-80", method="bug_unchk_send27()", type_label=expression_statement];
499 [label="81_ function bug_unchk_send31() payable public{\n      msg.sender.transfer(1 ether);}\n499-function_definition-82-83", method="bug_unchk_send31()", type_label=function_definition];
504 [label="82_ msg.sender.transfer(1 ether);\n504-expression_statement-83-83", method="bug_unchk_send31()", type_label=expression_statement];
520 [label="84_ function _setMultiHashFormat(uint8 hashFunction, uint8 digestSize) internal {\n        emit HashFormatSet(hashFunction, digestSize);\n    }\n520-function_definition-85-87", method="_setMultiHashFormat(uint8 hashFunction,uint8 digestSize)", type_label=function_definition];
538 [label="87_ function bug_unchk_send17() payable public{\n      msg.sender.transfer(1 ether);}\n538-function_definition-88-89", method="bug_unchk_send17()", type_label=function_definition];
543 [label="88_ msg.sender.transfer(1 ether);\n543-expression_statement-89-89", method="bug_unchk_send17()", type_label=expression_statement];
553 [label="89_ function _submitHash(bytes32 hash) internal {\n        emit HashSubmitted(hash);\n    }\n553-function_definition-90-92", method="_submitHash(bytes32 hash)", type_label=function_definition];
565 [label="92_ function bug_unchk_send3() payable public{\n      msg.sender.transfer(1 ether);}\n565-function_definition-93-94", method="bug_unchk_send3()", type_label=function_definition];
570 [label="93_ msg.sender.transfer(1 ether);\n570-expression_statement-94-94", method="bug_unchk_send3()", type_label=expression_statement];
583 [label="96_ struct MultiHash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 digestSize;\n    }\n583-expression_statement-97-101", method="MultiHash()", type_label=expression_statement];
597 [label="101_ function _combineMultiHash(MultiHash memory multihash) internal pure returns (bytes memory) {\n        bytes memory out = new bytes(34);\n        out[0] = byte(multihash.hashFunction);\n        out[1] = byte(multihash.digestSize);\n        uint8 i;\n        for (i = 0; i < 32; i++) {\n          out[i+2] = multihash.hash[i];\n        }\n        return out;\n    }\n597-function_definition-102-111", method="_combineMultiHash(MultiHash memory multihash)", type_label=function_definition];
611 [label="102_ bytes memory out = new bytes(34);\n611-new_variable-103-103", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
622 [label="103_ out[0] = byte(multihash.hashFunction);\n622-expression_statement-104-104", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
632 [label="104_ out[1] = byte(multihash.digestSize);\n632-expression_statement-105-105", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
642 [label="105_ uint8 i;\n642-new_variable-106-106", method="_combineMultiHash(MultiHash memory multihash)", type_label=new_variable];
647 [label="106_ for(i < 32;;i++)\n647-for-107-109", method="_combineMultiHash(MultiHash memory multihash)", type_label=for];
2117 [label="106_ end_loop", method="_combineMultiHash(MultiHash memory multihash)", type_label=end_loop];
656 [label="106_ i++\n656-expression_statement-107-107", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
659 [label="107_ out[i+2] = multihash.hash[i];\n659-expression_statement-108-108", method="_combineMultiHash(MultiHash memory multihash)", type_label=expression_statement];
671 [label="109_ return out;\n671-return-110-110", method="_combineMultiHash(MultiHash memory multihash)", type_label=return];
673 [label="111_ function bug_unchk_send9() payable public{\n      msg.sender.transfer(1 ether);}\n673-function_definition-112-113", method="bug_unchk_send9()", type_label=function_definition];
678 [label="112_ msg.sender.transfer(1 ether);\n678-expression_statement-113-113", method="bug_unchk_send9()", type_label=expression_statement];
688 [label="113_ function _splitMultiHash(bytes memory source) internal pure returns (MultiHash memory) {\n        require(source.length == 34, \"length of source must be 34\");\n        uint8 hashFunction = uint8(source[0]);\n        uint8 digestSize = uint8(source[1]);\n        bytes32 hash;\n        assembly {\n          hash := mload(add(source, 34))\n        }\n        return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n    }\n688-function_definition-114-127", method="_splitMultiHash(bytes memory source)", type_label=function_definition];
702 [label="114_ require(source.length == 34, \"length of source must be 34\");\n702-expression_statement-115-115", method="_splitMultiHash(bytes memory source)", type_label=expression_statement];
714 [label="115_ uint8 hashFunction = uint8(source[0]);\n714-new_variable-116-116", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
724 [label="116_ uint8 digestSize = uint8(source[1]);\n724-new_variable-117-117", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
734 [label="117_ bytes32 hash;\n734-new_variable-118-118", method="_splitMultiHash(bytes memory source)", type_label=new_variable];
752 [label="121_ return (MultiHash({\n          hashFunction: hashFunction,\n          digestSize: digestSize,\n          hash: hash\n        }));\n752-return-122-126", method="_splitMultiHash(bytes memory source)", type_label=return];
766 [label="127_ function bug_unchk_send25() payable public{\n      msg.sender.transfer(1 ether);}\n766-function_definition-128-129", method="bug_unchk_send25()", type_label=function_definition];
771 [label="128_ msg.sender.transfer(1 ether);\n771-expression_statement-129-129", method="bug_unchk_send25()", type_label=expression_statement];
802 [label="132_ function create(bytes calldata initData) external returns (address instance);\n802-function_definition-133-133", method="create(bytes calldata initData)", type_label=function_definition];
814 [label="133_ function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);\n814-function_definition-134-134", method="createSalty(bytes calldata initData,bytes32 salt)", type_label=function_definition];
830 [label="134_ function getInitSelector() external view returns (bytes4 initSelector);\n830-function_definition-135-135", method="getInitSelector()", type_label=function_definition];
839 [label="135_ function getInstanceRegistry() external view returns (address instanceRegistry);\n839-function_definition-136-136", method="getInstanceRegistry()", type_label=function_definition];
848 [label="136_ function getTemplate() external view returns (address template);\n848-function_definition-137-137", method="getTemplate()", type_label=function_definition];
857 [label="137_ function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);\n857-function_definition-138-138", method="getSaltyInstance(bytes calldata,bytes32 salt)", type_label=function_definition];
873 [label="138_ function getNextInstance(bytes calldata) external view returns (address instance);\n873-function_definition-139-139", method="getNextInstance(bytes calldata)", type_label=function_definition];
885 [label="139_ function getInstanceCreator(address instance) external view returns (address creator);\n885-function_definition-140-140", method="getInstanceCreator(address instance)", type_label=function_definition];
898 [label="140_ function getInstanceType() external view returns (bytes4 instanceType);\n898-function_definition-141-141", method="getInstanceType()", type_label=function_definition];
907 [label="141_ function getInstanceCount() external view returns (uint256 count);\n907-function_definition-142-142", method="getInstanceCount()", type_label=function_definition];
916 [label="142_ function getInstance(uint256 index) external view returns (address instance);\n916-function_definition-143-143", method="getInstance(uint256 index)", type_label=function_definition];
929 [label="143_ function getInstances() external view returns (address[] memory instances);\n929-function_definition-144-144", method="getInstances()", type_label=function_definition];
939 [label="144_ function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n939-function_definition-145-145", method="getPaginatedInstances(uint256 startIndex,uint256 endIndex)", type_label=function_definition];
960 [label="147_ function bug_unchk_send24() payable public{\n      msg.sender.transfer(1 ether);}\n960-function_definition-148-149", method="bug_unchk_send24()", type_label=function_definition];
965 [label="148_ msg.sender.transfer(1 ether);\n965-expression_statement-149-149", method="bug_unchk_send24()", type_label=expression_statement];
975 [label="149_ address private _factory;\n975-new_variable-150-150", method="", type_label=new_variable];
980 [label="150_ modifier initializeTemplate() {\n        _factory = msg.sender;\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n980-expression_statement-151-157", method="", type_label=expression_statement];
983 [label="151_ _factory = msg.sender;\n983-expression_statement-152-152", method="", type_label=expression_statement];
989 [label="152_ uint32 codeSize;\n989-new_variable-153-153", method="", type_label=new_variable];
1003 [label="154_ require(codeSize == 0, \"must be called within contract constructor\");\n1003-expression_statement-155-155", method="", type_label=expression_statement];
1013 [label="155_ _;\n1013-expression_statement-156-156", method="", type_label=expression_statement];
1015 [label="157_ function getCreator() public view returns (address creator) {\n        creator = iFactory(_factory).getInstanceCreator(address(this));\n    }\n1015-function_definition-158-160", method="getCreator()", type_label=function_definition];
1025 [label="158_ creator = iFactory(_factory).getInstanceCreator(address(this));\n1025-expression_statement-159-159", method="getCreator()", type_label=expression_statement];
1039 [label="160_ function bug_unchk_send19() payable public{\n      msg.sender.transfer(1 ether);}\n1039-function_definition-161-162", method="bug_unchk_send19()", type_label=function_definition];
1044 [label="161_ msg.sender.transfer(1 ether);\n1044-expression_statement-162-162", method="bug_unchk_send19()", type_label=expression_statement];
1054 [label="162_ function isCreator(address caller) public view returns (bool ok) {\n        ok = (caller == getCreator());\n    }\n1054-function_definition-163-165", method="isCreator(address caller)", type_label=function_definition];
1068 [label="163_ ok = (caller == getCreator());\n1068-expression_statement-164-164", method="isCreator(address caller)", type_label=expression_statement];
1076 [label="165_ function bug_unchk_send26() payable public{\n      msg.sender.transfer(1 ether);}\n1076-function_definition-166-167", method="bug_unchk_send26()", type_label=function_definition];
1081 [label="166_ msg.sender.transfer(1 ether);\n1081-expression_statement-167-167", method="bug_unchk_send26()", type_label=expression_statement];
1091 [label="167_ function getFactory() public view returns (address factory) {\n        factory = _factory;\n    }\n1091-function_definition-168-170", method="getFactory()", type_label=function_definition];
1101 [label="168_ factory = _factory;\n1101-expression_statement-169-169", method="getFactory()", type_label=expression_statement];
1105 [label="170_ function bug_unchk_send20() payable public{\n      msg.sender.transfer(1 ether);}\n1105-function_definition-171-172", method="bug_unchk_send20()", type_label=function_definition];
1110 [label="171_ msg.sender.transfer(1 ether);\n1110-expression_statement-172-172", method="bug_unchk_send20()", type_label=expression_statement];
1138 [label="174_ function bug_unchk_send13() payable public{\n      msg.sender.transfer(1 ether);}\n1138-function_definition-175-176", method="bug_unchk_send13()", type_label=function_definition];
1143 [label="175_ msg.sender.transfer(1 ether);\n1143-expression_statement-176-176", method="bug_unchk_send13()", type_label=expression_statement];
1167 [label="177_ function initialize(\n        address operator,\n        bytes memory multihash,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n        if (multihash.length != 0) {\n            MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);\n            ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);\n            ProofHashes._submitHash(multihashObj.hash);\n        }\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n        emit Initialized(operator, multihash, metadata);\n    }\n1167-function_definition-178-196", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=function_definition];
1182 [label="181_ initializeTemplate()\n1182-expression_statement-182-182", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1185 [label="182_ if_operator != address(0)\n1185-if-183-186", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
2655 [label="182_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1192 [label="183_ Operated._setOperator(operator);\n1192-expression_statement-184-184", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1199 [label="184_ Operated._activateOperator();\n1199-expression_statement-185-185", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1204 [label="186_ if_multihash.length != 0\n1204-if-187-191", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
2674 [label="186_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1211 [label="187_ MultiHashWrapper.MultiHash memory multihashObj = MultiHashWrapper._splitMultiHash(multihash);\n1211-new_variable-188-188", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=new_variable];
1224 [label="188_ ProofHashes._setMultiHashFormat(multihashObj.hashFunction, multihashObj.digestSize);\n1224-expression_statement-189-189", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1237 [label="189_ ProofHashes._submitHash(multihashObj.hash);\n1237-expression_statement-190-190", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1246 [label="191_ if_metadata.length != 0\n1246-if-192-194", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=if];
2716 [label="191_ end_if", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=end_if];
1253 [label="192_ EventMetadata._setMetadata(metadata);\n1253-expression_statement-193-193", method="initialize(address operator,bytes memory multihash,bytes memory metadata)", type_label=expression_statement];
1268 [label="196_ function bug_unchk_send32() payable public{\n      msg.sender.transfer(1 ether);}\n1268-function_definition-197-198", method="bug_unchk_send32()", type_label=function_definition];
1273 [label="197_ msg.sender.transfer(1 ether);\n1273-expression_statement-198-198", method="bug_unchk_send32()", type_label=expression_statement];
1283 [label="198_ function submitHash(bytes32 multihash) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        ProofHashes._submitHash(multihash);\n    }\n1283-function_definition-199-202", method="submitHash(bytes32 multihash)", type_label=function_definition];
1291 [label="199_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1291-expression_statement-200-200", method="submitHash(bytes32 multihash)", type_label=expression_statement];
1315 [label="200_ ProofHashes._submitHash(multihash);\n1315-expression_statement-201-201", method="submitHash(bytes32 multihash)", type_label=expression_statement];
1322 [label="202_ function bug_unchk_send4() payable public{\n      msg.sender.transfer(1 ether);}\n1322-function_definition-203-204", method="bug_unchk_send4()", type_label=function_definition];
1327 [label="203_ msg.sender.transfer(1 ether);\n1327-expression_statement-204-204", method="bug_unchk_send4()", type_label=expression_statement];
1337 [label="204_ function setMetadata(bytes memory metadata) public {\n        require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n        EventMetadata._setMetadata(metadata);\n    }\n1337-function_definition-205-208", method="setMetadata(bytes memory metadata)", type_label=function_definition];
1345 [label="205_ require(Template.isCreator(msg.sender) || Operated.isActiveOperator(msg.sender), \"only active operator or creator\");\n1345-expression_statement-206-206", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1369 [label="206_ EventMetadata._setMetadata(metadata);\n1369-expression_statement-207-207", method="setMetadata(bytes memory metadata)", type_label=expression_statement];
1376 [label="208_ function bug_unchk_send7() payable public{\n      msg.sender.transfer(1 ether);}\n1376-function_definition-209-210", method="bug_unchk_send7()", type_label=function_definition];
1381 [label="209_ msg.sender.transfer(1 ether);\n1381-expression_statement-210-210", method="bug_unchk_send7()", type_label=expression_statement];
1391 [label="210_ function transferOperator(address operator) public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._transferOperator(operator);\n    }\n1391-function_definition-211-214", method="transferOperator(address operator)", type_label=function_definition];
1399 [label="211_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1399-expression_statement-212-212", method="transferOperator(address operator)", type_label=expression_statement];
1414 [label="212_ Operated._transferOperator(operator);\n1414-expression_statement-213-213", method="transferOperator(address operator)", type_label=expression_statement];
1421 [label="214_ function bug_unchk_send23() payable public{\n      msg.sender.transfer(1 ether);}\n1421-function_definition-215-216", method="bug_unchk_send23()", type_label=function_definition];
1426 [label="215_ msg.sender.transfer(1 ether);\n1426-expression_statement-216-216", method="bug_unchk_send23()", type_label=expression_statement];
1436 [label="216_ function renounceOperator() public {\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n        Operated._renounceOperator();\n    }\n1436-function_definition-217-220", method="renounceOperator()", type_label=function_definition];
1440 [label="217_ require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n1440-expression_statement-218-218", method="renounceOperator()", type_label=expression_statement];
1455 [label="218_ Operated._renounceOperator();\n1455-expression_statement-219-219", method="renounceOperator()", type_label=expression_statement];
1460 [label="220_ function bug_unchk_send14() payable public{\n      msg.sender.transfer(1 ether);}\n1460-function_definition-221-222", method="bug_unchk_send14()", type_label=function_definition];
1465 [label="221_ msg.sender.transfer(1 ether);\n1465-expression_statement-222-222", method="bug_unchk_send14()", type_label=expression_statement];
1 [label="0_ start_node", method="", type_label=start];
2 [label="0_ exit_node", method="", type_label=exit];
1260;
13 -> 18  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
46 -> 51  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
64 -> 69  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
84 -> 89  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
104 -> 109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
129 -> 137  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
137 -> 147  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
158 -> 163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
173 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 193  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
198 -> 203  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
213 -> 217  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
217 -> 226  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
226 -> 232  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
246 -> 251  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
261 -> 265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
265 -> 275  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
287 -> 292  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
302 -> 306  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
306 -> 315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
327 -> 332  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
342 -> 352  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
356 -> 361  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
371 -> 385  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
385 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
391 -> 396  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
406 -> 416  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
416 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
418 -> 423  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 447  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
447 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
456 -> 461  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
474 -> 479  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
499 -> 504  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
538 -> 543  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
565 -> 570  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
597 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 622  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
622 -> 632  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
632 -> 642  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
642 -> 647  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
647 -> 659  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
647 -> 2117  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2117 -> 671  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
656 -> 647  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
659 -> 656  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
671 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
673 -> 678  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
688 -> 702  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
702 -> 714  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
714 -> 724  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
724 -> 734  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
752 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
766 -> 771  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
960 -> 965  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
975 -> 980  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
983 -> 989  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1003 -> 1013  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1015 -> 1025  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1039 -> 1044  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1068  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1076 -> 1081  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1091 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1105 -> 1110  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1138 -> 1143  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1167 -> 1185  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1185 -> 1192  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1185 -> 2655  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2655 -> 1204  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1192 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 2655  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1204 -> 1211  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1204 -> 2674  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2674 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1211 -> 1224  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 1237  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1237 -> 2674  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1246 -> 1253  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1246 -> 2716  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2716 -> 1260  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1253 -> 2716  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1268 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1283 -> 1291  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1291 -> 1315  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1322 -> 1327  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1337 -> 1345  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1345 -> 1369  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1376 -> 1381  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1391 -> 1399  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1399 -> 1414  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1421 -> 1426  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1436 -> 1440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1440 -> 1455  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1460 -> 1465  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
