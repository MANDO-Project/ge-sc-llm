digraph  {
12 [label="2_ mul\n12-function_definition-3-10", type_label=function_definition];
29 [label="3_ if_a == 0\n29-if-4-6", type_label=if];
1503 [label="3_ end_if", type_label=end_if];
34 [label="4_ return 0;\n34-return-5-5", type_label=return];
36 [label="6_ uint256 c = a * b;\n36-new_variable-7-7", type_label=new_variable];
44 [label="7_ require(c / a == b);\n44-expression_statement-8-8", type_label=expression_statement];
53 [label="8_ return c;\n53-return-9-9", type_label=return];
55 [label="10_ div\n55-function_definition-11-15", type_label=function_definition];
72 [label="11_ require(b > 0);\n72-expression_statement-12-12", type_label=expression_statement];
79 [label="12_ uint256 c = a / b;\n79-new_variable-13-13", type_label=new_variable];
87 [label="13_ return c;\n87-return-14-14", type_label=return];
89 [label="15_ sub\n89-function_definition-16-20", type_label=function_definition];
106 [label="16_ require(b <= a);\n106-expression_statement-17-17", type_label=expression_statement];
113 [label="17_ uint256 c = a - b;\n113-new_variable-18-18", type_label=new_variable];
121 [label="18_ return c;\n121-return-19-19", type_label=return];
123 [label="20_ add\n123-function_definition-21-25", type_label=function_definition];
140 [label="21_ uint256 c = a + b;\n140-new_variable-22-22", type_label=new_variable];
148 [label="22_ require(c >= a);\n148-expression_statement-23-23", type_label=expression_statement];
155 [label="23_ return c;\n155-return-24-24", type_label=return];
157 [label="25_ mod\n157-function_definition-26-29", type_label=function_definition];
174 [label="26_ require(b != 0);\n174-expression_statement-27-27", type_label=expression_statement];
181 [label="27_ return a % b;\n181-return-28-28", type_label=return];
188 [label="31_ address public owner;\n188-new_variable-32-32", type_label=new_variable];
205 [label="37_ owner = msg.sender;\n205-expression_statement-38-38", type_label=expression_statement];
211 [label="39_ modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n211-expression_statement-40-43", type_label=expression_statement];
214 [label="40_ require(msg.sender == owner);\n214-expression_statement-41-41", type_label=expression_statement];
223 [label="41_ _;\n223-expression_statement-42-42", type_label=expression_statement];
225 [label="43_ transferOwnership\n225-function_definition-44-48", type_label=function_definition];
232 [label="43_ onlyOwner\n232-expression_statement-44-44", type_label=expression_statement];
235 [label="44_ require(newOwner != address(0));\n235-expression_statement-45-45", type_label=expression_statement];
250 [label="46_ owner = newOwner;\n250-expression_statement-47-47", type_label=expression_statement];
257 [label="50_ totalSupply\n257-function_definition-51-51", type_label=function_definition];
265 [label="51_ balanceOf\n265-function_definition-52-52", type_label=function_definition];
277 [label="52_ transfer\n277-function_definition-53-53", type_label=function_definition];
317 [label="61_ mapping(address => uint256) internal balances;\n317-new_variable-62-62", type_label=new_variable];
324 [label="62_ uint256 internal totalSupply_;\n324-new_variable-63-63", type_label=new_variable];
329 [label="63_ totalSupply\n329-function_definition-64-66", type_label=function_definition];
338 [label="64_ return totalSupply_;\n338-return-65-65", type_label=return];
340 [label="66_ balanceOf\n340-function_definition-67-69", type_label=function_definition];
353 [label="67_ return balances[_owner];\n353-return-68-68", type_label=return];
357 [label="69_ transfer\n357-function_definition-70-77", type_label=function_definition];
373 [label="70_ require(_value <= balances[msg.sender]);\n373-expression_statement-71-71", type_label=expression_statement];
384 [label="71_ require(_to != address(0));\n384-expression_statement-72-72", type_label=expression_statement];
393 [label="72_ balances[msg.sender] = balances[msg.sender].sub(_value);\n393-expression_statement-73-73", type_label=expression_statement];
410 [label="73_ balances[_to] = balances[_to].add(_value);\n410-expression_statement-74-74", type_label=expression_statement];
433 [label="75_ return true;\n433-return-76-76", type_label=return];
450 [label="80_ bytes internal name_ = \"Internet of Everything X\";\n450-new_variable-81-81", type_label=new_variable];
457 [label="81_ bytes internal symbol_ = \"IOEX\";\n457-new_variable-82-82", type_label=new_variable];
464 [label="82_ uint256 public decimals = 8;\n464-new_variable-83-83", type_label=new_variable];
470 [label="83_ uint256 private constant LOCK_TYPE_MAX = 3;\n470-new_variable-84-84", type_label=new_variable];
476 [label="84_ uint256 private constant LOCK_STAGE_MAX = 4;\n476-new_variable-85-85", type_label=new_variable];
482 [label="85_ mapping (address => bool) public frozenAccount;\n482-new_variable-86-86", type_label=new_variable];
489 [label="86_ struct StructLockAccountInfo {\n        uint256 lockType;\n        uint256 initBalance;\n        uint256 startTime;\n    }\n489-expression_statement-87-91", type_label=expression_statement];
503 [label="91_ mapping (address => StructLockAccountInfo) public lockAccountInfo;\n503-new_variable-92-92", type_label=new_variable];
511 [label="92_ struct StructLockType {\n        uint256[LOCK_STAGE_MAX] time;\n        uint256[LOCK_STAGE_MAX] freePercent;\n    }\n511-expression_statement-93-96", type_label=expression_statement];
525 [label="96_ StructLockType[LOCK_TYPE_MAX] private lockType;\n525-new_variable-97-97", type_label=new_variable];
587 [label="102_ totalSupply_ = 20000000000000000;\n587-expression_statement-103-103", type_label=expression_statement];
591 [label="103_ balances[msg.sender] = totalSupply_;\n591-expression_statement-104-104", type_label=expression_statement];
599 [label="104_ lockType[0].time[0] = 30;\n599-expression_statement-105-105", type_label=expression_statement];
609 [label="105_ lockType[0].freePercent[0] = 40;\n609-expression_statement-106-106", type_label=expression_statement];
619 [label="106_ lockType[0].time[1] = 60;\n619-expression_statement-107-107", type_label=expression_statement];
629 [label="107_ lockType[0].freePercent[1] = 20;\n629-expression_statement-108-108", type_label=expression_statement];
639 [label="108_ lockType[0].time[2] = 120;\n639-expression_statement-109-109", type_label=expression_statement];
649 [label="109_ lockType[0].freePercent[2] = 20;\n649-expression_statement-110-110", type_label=expression_statement];
659 [label="110_ lockType[0].time[3] = 180;\n659-expression_statement-111-111", type_label=expression_statement];
669 [label="111_ lockType[0].freePercent[3] = 20;\n669-expression_statement-112-112", type_label=expression_statement];
679 [label="112_ lockType[1].time[0] = 30;\n679-expression_statement-113-113", type_label=expression_statement];
689 [label="113_ lockType[1].freePercent[0] = 25;\n689-expression_statement-114-114", type_label=expression_statement];
699 [label="114_ lockType[1].time[1] = 60;\n699-expression_statement-115-115", type_label=expression_statement];
709 [label="115_ lockType[1].freePercent[1] = 25;\n709-expression_statement-116-116", type_label=expression_statement];
719 [label="116_ lockType[1].time[2] = 120;\n719-expression_statement-117-117", type_label=expression_statement];
729 [label="117_ lockType[1].freePercent[2] = 25;\n729-expression_statement-118-118", type_label=expression_statement];
739 [label="118_ lockType[1].time[3] = 180;\n739-expression_statement-119-119", type_label=expression_statement];
749 [label="119_ lockType[1].freePercent[3] = 25;\n749-expression_statement-120-120", type_label=expression_statement];
759 [label="120_ lockType[2].time[0] = 180;\n759-expression_statement-121-121", type_label=expression_statement];
769 [label="121_ lockType[2].freePercent[0] = 25;\n769-expression_statement-122-122", type_label=expression_statement];
779 [label="122_ lockType[2].time[1] = 360;\n779-expression_statement-123-123", type_label=expression_statement];
789 [label="123_ lockType[2].freePercent[1] = 25;\n789-expression_statement-124-124", type_label=expression_statement];
799 [label="124_ lockType[2].time[2] = 540;\n799-expression_statement-125-125", type_label=expression_statement];
809 [label="125_ lockType[2].freePercent[2] = 25;\n809-expression_statement-126-126", type_label=expression_statement];
819 [label="126_ lockType[2].time[3] = 720;\n819-expression_statement-127-127", type_label=expression_statement];
829 [label="127_ lockType[2].freePercent[3] = 25;\n829-expression_statement-128-128", type_label=expression_statement];
839 [label="129_ name\n839-function_definition-130-132", type_label=function_definition];
848 [label="130_ return string(name_);\n848-return-131-131", type_label=return];
852 [label="132_ symbol\n852-function_definition-133-135", type_label=function_definition];
861 [label="133_ return string(symbol_);\n861-return-134-134", type_label=return];
865 [label="135_ getLockBalance\n865-function_definition-136-159", type_label=function_definition];
877 [label="136_ uint256 lockTypeIndex;\n877-new_variable-137-137", type_label=new_variable];
882 [label="137_ uint256 amountLockedTokens = 0;\n882-new_variable-138-138", type_label=new_variable];
888 [label="138_ uint256 resultFreePercent = 0;\n888-new_variable-139-139", type_label=new_variable];
894 [label="139_ uint256 duration = 0;\n894-new_variable-140-140", type_label=new_variable];
900 [label="140_ uint256 i;\n900-new_variable-141-141", type_label=new_variable];
905 [label="141_ lockTypeIndex = lockAccountInfo[account].lockType;\n905-expression_statement-142-142", type_label=expression_statement];
913 [label="142_ if_lockTypeIndex >= 1\n913-if-143-157", type_label=if];
2387 [label="142_ end_if", type_label=end_if];
918 [label="143_ if_lockTypeIndex <= LOCK_TYPE_MAX\n918-if-144-152", type_label=if];
2392 [label="143_ end_if", type_label=end_if];
923 [label="144_ lockTypeIndex = lockTypeIndex.sub(1);\n923-expression_statement-145-145", type_label=expression_statement];
932 [label="145_ for(i < LOCK_STAGE_MAX;;i++)\n932-for-146-151", type_label=for];
2406 [label="145_ end_for", type_label=end_for];
941 [label="145_ i++\n941-expression_statement-146-146", type_label=expression_statement];
944 [label="146_ duration = (lockType[lockTypeIndex].time[i]).mul(1 days);\n944-expression_statement-147-147", type_label=expression_statement];
961 [label="147_ if_lockAccountInfo[account].startTime.add(duration) >= now\n961-if-148-150", type_label=if];
2435 [label="147_ end_if", type_label=end_if];
975 [label="148_ resultFreePercent = resultFreePercent.add(lockType[lockTypeIndex].freePercent[i]);\n975-expression_statement-149-149", type_label=expression_statement];
990 [label="152_ amountLockedTokens = (lockAccountInfo[account].initBalance.mul(resultFreePercent)).div(100);\n990-expression_statement-153-153", type_label=expression_statement];
1009 [label="153_ if_amountLockedTokens == 0\n1009-if-154-156", type_label=if];
2483 [label="153_ end_if", type_label=end_if];
1014 [label="154_ lockAccountInfo[account].lockType = 0;\n1014-expression_statement-155-155", type_label=expression_statement];
1022 [label="157_ return amountLockedTokens;\n1022-return-158-158", type_label=return];
1024 [label="159_ _transferForLock\n1024-function_definition-160-177", type_label=function_definition];
1040 [label="160_ require(selectType >= 1);\n1040-expression_statement-161-161", type_label=expression_statement];
1047 [label="161_ require(selectType <= LOCK_TYPE_MAX);\n1047-expression_statement-162-162", type_label=expression_statement];
1054 [label="162_ if_(lockAccountInfo[_to].lockType == 0) && \n            (lockAccountInfo[_to].initBalance == 0)\n1054-if-163-176", type_label=if];
2528 [label="162_ end_if", type_label=end_if];
1073 [label="164_ require(_value <= balances[msg.sender]);\n1073-expression_statement-165-165", type_label=expression_statement];
1084 [label="165_ require(_to != address(0));\n1084-expression_statement-166-166", type_label=expression_statement];
1093 [label="166_ lockAccountInfo[_to].lockType = selectType;\n1093-expression_statement-167-167", type_label=expression_statement];
1101 [label="167_ lockAccountInfo[_to].initBalance = _value;\n1101-expression_statement-168-168", type_label=expression_statement];
1109 [label="168_ lockAccountInfo[_to].startTime = now;\n1109-expression_statement-169-169", type_label=expression_statement];
1135 [label="170_ balances[msg.sender] = balances[msg.sender].sub(_value);\n1135-expression_statement-171-171", type_label=expression_statement];
1152 [label="171_ balances[_to] = balances[_to].add(_value);\n1152-expression_statement-172-172", type_label=expression_statement];
1178 [label="177_ transfer\n1178-function_definition-178-192", type_label=function_definition];
1194 [label="178_ uint256 freeBalance;\n1194-new_variable-179-179", type_label=new_variable];
1199 [label="179_ if_lockAccountInfo[msg.sender].lockType > 0\n1199-if-180-183", type_label=if];
2673 [label="179_ end_if", type_label=end_if];
1210 [label="180_ freeBalance = balances[msg.sender].sub(getLockBalance(msg.sender));\n1210-expression_statement-181-181", type_label=expression_statement];
1228 [label="181_ require(freeBalance >=_value);\n1228-expression_statement-182-182", type_label=expression_statement];
1235 [label="183_ require(_value <= balances[msg.sender]);\n1235-expression_statement-184-184", type_label=expression_statement];
1246 [label="184_ require(_to != address(0));\n1246-expression_statement-185-185", type_label=expression_statement];
1255 [label="185_ require(!frozenAccount[msg.sender]);\n1255-expression_statement-186-186", type_label=expression_statement];
1265 [label="186_ require(!frozenAccount[_to]);\n1265-expression_statement-187-187", type_label=expression_statement];
1273 [label="187_ balances[msg.sender] = balances[msg.sender].sub(_value);\n1273-expression_statement-188-188", type_label=expression_statement];
1290 [label="188_ balances[_to] = balances[_to].add(_value);\n1290-expression_statement-189-189", type_label=expression_statement];
1313 [label="190_ return true;\n1313-return-191-191", type_label=return];
1316 [label="192_ freezeAccount\n1316-function_definition-193-196", type_label=function_definition];
1327 [label="192_ onlyOwner\n1327-expression_statement-193-193", type_label=expression_statement];
1330 [label="193_ frozenAccount[target] = freeze;\n1330-expression_statement-194-194", type_label=expression_statement];
1342 [label="196_ transferLockBalance_1\n1342-function_definition-197-199", type_label=function_definition];
1353 [label="196_ onlyOwner\n1353-expression_statement-197-197", type_label=expression_statement];
1356 [label="197_ _transferForLock(_to, _value, 1);\n1356-expression_statement-198-198", type_label=expression_statement];
1365 [label="199_ transferLockBalance_2\n1365-function_definition-200-202", type_label=function_definition];
1376 [label="199_ onlyOwner\n1376-expression_statement-200-200", type_label=expression_statement];
1379 [label="200_ _transferForLock(_to, _value, 2);\n1379-expression_statement-201-201", type_label=expression_statement];
1388 [label="202_ transferLockBalance_3\n1388-function_definition-203-205", type_label=function_definition];
1399 [label="202_ onlyOwner\n1399-expression_statement-203-203", type_label=expression_statement];
1402 [label="203_ _transferForLock(_to, _value, 3);\n1402-expression_statement-204-204", type_label=expression_statement];
1411 [label="205_ burn\n1411-function_definition-206-208", type_label=function_definition];
1418 [label="205_ onlyOwner\n1418-expression_statement-206-206", type_label=expression_statement];
1421 [label="206_ _burn(msg.sender, _value);\n1421-expression_statement-207-207", type_label=expression_statement];
1430 [label="208_ _burn\n1430-function_definition-209-214", type_label=function_definition];
1442 [label="209_ require(_value <= balances[_who]);\n1442-expression_statement-210-210", type_label=expression_statement];
1451 [label="210_ balances[_who] = balances[_who].sub(_value);\n1451-expression_statement-211-211", type_label=expression_statement];
1464 [label="211_ totalSupply_ = totalSupply_.sub(_value);\n1464-expression_statement-212-212", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
"(2435, (147, 20), (149, 21))";
1176;
12 -> 29  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
29 -> 34  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
29 -> 1503  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1503 -> 36  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
34 -> 1503  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
34 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
36 -> 44  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
44 -> 53  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
53 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
55 -> 72  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
72 -> 79  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
79 -> 87  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
87 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
89 -> 106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
106 -> 113  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
113 -> 121  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
121 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
123 -> 140  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
140 -> 148  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
148 -> 155  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
155 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
157 -> 174  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
174 -> 181  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
181 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
214 -> 223  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
225 -> 235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
317 -> 324  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
329 -> 338  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
338 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
340 -> 353  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
353 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
357 -> 373  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
373 -> 384  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
384 -> 393  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
393 -> 410  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
433 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
450 -> 457  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
457 -> 464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
464 -> 470  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
470 -> 476  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
476 -> 482  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
482 -> 489  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
489 -> 503  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
503 -> 511  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
511 -> 525  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
587 -> 591  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
591 -> 599  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
599 -> 609  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
609 -> 619  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
619 -> 629  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
629 -> 639  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
639 -> 649  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
649 -> 659  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
659 -> 669  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
669 -> 679  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
679 -> 689  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
689 -> 699  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
699 -> 709  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
709 -> 719  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
719 -> 729  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 739  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
739 -> 749  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
749 -> 759  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
759 -> 769  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
769 -> 779  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
779 -> 789  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
789 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 809  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
809 -> 819  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
819 -> 829  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
839 -> 848  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
848 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
852 -> 861  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
861 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
865 -> 877  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
877 -> 882  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
882 -> 888  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
888 -> 894  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
894 -> 900  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
900 -> 905  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
905 -> 913  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
913 -> 918  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
913 -> 2387  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
918 -> 923  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
918 -> 2392  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
923 -> 932  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
932 -> 944  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
932 -> 2406  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2406 -> 990  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
941 -> 932  [color=red, controlflow_type=loop_control, edge_type=CFG_edge, key=0, label=loop_control];
944 -> 961  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
961 -> 975  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
961 -> 2435  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2435 -> 941  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
975 -> 2435  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
990 -> 1009  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1009 -> 1014  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1009 -> 2483  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2483 -> 1022  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1014 -> 2483  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1022 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1024 -> 1040  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1040 -> 1047  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1047 -> 1054  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1054 -> 1073  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1073 -> 1084  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1084 -> 1093  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1093 -> 1101  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1101 -> 1109  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1135 -> 1152  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1178 -> 1194  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1194 -> 1199  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1199 -> 1210  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
1199 -> 2673  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
2673 -> 1235  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1210 -> 1228  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1228 -> 2673  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
1235 -> 1246  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1246 -> 1255  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1255 -> 1265  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1265 -> 1273  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1273 -> 1290  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1313 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1316 -> 1330  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1342 -> 1356  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1365 -> 1379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1388 -> 1402  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1411 -> 1421  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1430 -> 1442  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1442 -> 1451  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1451 -> 1464  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
"(2435, (147, 20), (149, 21))" -> 941  [color=red, controlflow_type=loop_update, edge_type=CFG_edge, key=0, label=loop_update];
1176 -> 2528  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
}
