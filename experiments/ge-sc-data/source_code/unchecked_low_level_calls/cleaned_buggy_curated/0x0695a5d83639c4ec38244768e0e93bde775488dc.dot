digraph  {
13 [label="2_ mul\n13-function_definition-3-10", type_label=function_definition];
30 [label="3_ if_a == 0\n30-if-4-6", type_label=if];
1295 [label="3_ end_if", type_label=end_if];
35 [label="4_ return 0;\n35-return-5-5", type_label=return];
37 [label="6_ uint256 c = a * b;\n37-new_variable-7-7", type_label=new_variable];
45 [label="7_ require(c / a == b);\n45-expression_statement-8-8", type_label=expression_statement];
54 [label="8_ return c;\n54-return-9-9", type_label=return];
56 [label="10_ div\n56-function_definition-11-15", type_label=function_definition];
73 [label="11_ require(b > 0);\n73-expression_statement-12-12", type_label=expression_statement];
80 [label="12_ uint256 c = a / b;\n80-new_variable-13-13", type_label=new_variable];
88 [label="13_ return c;\n88-return-14-14", type_label=return];
90 [label="15_ sub\n90-function_definition-16-20", type_label=function_definition];
107 [label="16_ require(b <= a);\n107-expression_statement-17-17", type_label=expression_statement];
114 [label="17_ uint256 c = a - b;\n114-new_variable-18-18", type_label=new_variable];
122 [label="18_ return c;\n122-return-19-19", type_label=return];
124 [label="20_ add\n124-function_definition-21-25", type_label=function_definition];
141 [label="21_ uint256 c = a + b;\n141-new_variable-22-22", type_label=new_variable];
149 [label="22_ require(c >= a);\n149-expression_statement-23-23", type_label=expression_statement];
156 [label="23_ return c;\n156-return-24-24", type_label=return];
158 [label="25_ mod\n158-function_definition-26-29", type_label=function_definition];
175 [label="26_ require(b != 0);\n175-expression_statement-27-27", type_label=expression_statement];
182 [label="27_ return a % b;\n182-return-28-28", type_label=return];
189 [label="31_ totalSupply\n189-function_definition-32-32", type_label=function_definition];
197 [label="32_ balanceOf\n197-function_definition-33-33", type_label=function_definition];
209 [label="33_ allowance\n209-function_definition-34-35", type_label=function_definition];
225 [label="35_ transfer\n225-function_definition-36-36", type_label=function_definition];
240 [label="36_ approve\n240-function_definition-37-38", type_label=function_definition];
255 [label="38_ transferFrom\n255-function_definition-39-40", type_label=function_definition];
313 [label="53_ mapping (address => uint256) private _balances;\n313-new_variable-54-54", type_label=new_variable];
320 [label="54_ mapping (address => mapping (address => uint256)) private _allowed;\n320-new_variable-55-55", type_label=new_variable];
329 [label="55_ uint256 private _totalSupply;\n329-new_variable-56-56", type_label=new_variable];
334 [label="56_ totalSupply\n334-function_definition-57-59", type_label=function_definition];
343 [label="57_ return _totalSupply;\n343-return-58-58", type_label=return];
345 [label="59_ balanceOf\n345-function_definition-60-62", type_label=function_definition];
358 [label="60_ return _balances[owner];\n358-return-61-61", type_label=return];
362 [label="62_ allowance\n362-function_definition-63-72", type_label=function_definition];
379 [label="70_ return _allowed[owner][spender];\n379-return-71-71", type_label=return];
385 [label="72_ transfer\n385-function_definition-73-76", type_label=function_definition];
401 [label="73_ _transfer(msg.sender, to, value);\n401-expression_statement-74-74", type_label=expression_statement];
412 [label="74_ return true;\n412-return-75-75", type_label=return];
415 [label="76_ approve\n415-function_definition-77-82", type_label=function_definition];
431 [label="77_ require(spender != address(0));\n431-expression_statement-78-78", type_label=expression_statement];
440 [label="78_ _allowed[msg.sender][spender] = value;\n440-expression_statement-79-79", type_label=expression_statement];
460 [label="80_ return true;\n460-return-81-81", type_label=return];
463 [label="82_ transferFrom\n463-function_definition-83-95", type_label=function_definition];
483 [label="90_ require(value <= _allowed[from][msg.sender]);\n483-expression_statement-91-91", type_label=expression_statement];
496 [label="91_ _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n496-expression_statement-92-92", type_label=expression_statement];
517 [label="92_ _transfer(from, to, value);\n517-expression_statement-93-93", type_label=expression_statement];
526 [label="93_ return true;\n526-return-94-94", type_label=return];
529 [label="95_ increaseAllowance\n529-function_definition-96-108", type_label=function_definition];
545 [label="102_ require(spender != address(0));\n545-expression_statement-103-103", type_label=expression_statement];
554 [label="103_ _allowed[msg.sender][spender] = (\n    _allowed[msg.sender][spender].add(addedValue));\n554-expression_statement-104-105", type_label=expression_statement];
592 [label="106_ return true;\n592-return-107-107", type_label=return];
595 [label="108_ decreaseAllowance\n595-function_definition-109-121", type_label=function_definition];
611 [label="115_ require(spender != address(0));\n611-expression_statement-116-116", type_label=expression_statement];
620 [label="116_ _allowed[msg.sender][spender] = (\n    _allowed[msg.sender][spender].sub(subtractedValue));\n620-expression_statement-117-118", type_label=expression_statement];
658 [label="119_ return true;\n658-return-120-120", type_label=return];
661 [label="121_ _transfer\n661-function_definition-122-128", type_label=function_definition];
677 [label="122_ require(value <= _balances[from]);\n677-expression_statement-123-123", type_label=expression_statement];
686 [label="123_ require(to != address(0));\n686-expression_statement-124-124", type_label=expression_statement];
695 [label="124_ _balances[from] = _balances[from].sub(value);\n695-expression_statement-125-125", type_label=expression_statement];
708 [label="125_ _balances[to] = _balances[to].add(value);\n708-expression_statement-126-126", type_label=expression_statement];
729 [label="128_ _mint\n729-function_definition-129-134", type_label=function_definition];
741 [label="129_ require(account != 0);\n741-expression_statement-130-130", type_label=expression_statement];
748 [label="130_ _totalSupply = _totalSupply.add(value);\n748-expression_statement-131-131", type_label=expression_statement];
757 [label="131_ _balances[account] = _balances[account].add(value);\n757-expression_statement-132-132", type_label=expression_statement];
780 [label="134_ _burn\n780-function_definition-135-141", type_label=function_definition];
792 [label="135_ require(account != 0);\n792-expression_statement-136-136", type_label=expression_statement];
799 [label="136_ require(value <= _balances[account]);\n799-expression_statement-137-137", type_label=expression_statement];
808 [label="137_ _totalSupply = _totalSupply.sub(value);\n808-expression_statement-138-138", type_label=expression_statement];
817 [label="138_ _balances[account] = _balances[account].sub(value);\n817-expression_statement-139-139", type_label=expression_statement];
840 [label="141_ _burnFrom\n840-function_definition-142-147", type_label=function_definition];
852 [label="142_ require(value <= _allowed[account][msg.sender]);\n852-expression_statement-143-143", type_label=expression_statement];
865 [label="143_ _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n865-expression_statement-144-145", type_label=expression_statement];
886 [label="145_ _burn(account, value);\n886-expression_statement-146-146", type_label=expression_statement];
896 [label="149_ struct Role {\n    mapping (address => bool) bearer;\n  }\n896-expression_statement-150-152", type_label=expression_statement];
904 [label="152_ add\n904-function_definition-153-156", type_label=function_definition];
917 [label="153_ require(account != address(0));\n917-expression_statement-154-154", type_label=expression_statement];
926 [label="154_ role.bearer[account] = true;\n926-expression_statement-155-155", type_label=expression_statement];
935 [label="156_ remove\n935-function_definition-157-160", type_label=function_definition];
948 [label="157_ require(account != address(0));\n948-expression_statement-158-158", type_label=expression_statement];
957 [label="158_ role.bearer[account] = false;\n957-expression_statement-159-159", type_label=expression_statement];
966 [label="160_ has\n966-function_definition-161-168", type_label=function_definition];
984 [label="165_ require(account != address(0));\n984-expression_statement-166-166", type_label=expression_statement];
993 [label="166_ return role.bearer[account];\n993-return-167-167", type_label=return];
1021 [label="173_ Roles.Role private minters;\n1021-new_variable-174-174", type_label=new_variable];
1030 [label="175_ _addMinter(msg.sender);\n1030-expression_statement-176-176", type_label=expression_statement];
1037 [label="177_ modifier onlyMinter() {\n    require(isMinter(msg.sender));\n    _;\n  }\n1037-expression_statement-178-181", type_label=expression_statement];
1040 [label="178_ require(isMinter(msg.sender));\n1040-expression_statement-179-179", type_label=expression_statement];
1050 [label="179_ _;\n1050-expression_statement-180-180", type_label=expression_statement];
1052 [label="181_ isMinter\n1052-function_definition-182-184", type_label=function_definition];
1065 [label="182_ return minters.has(account);\n1065-return-183-183", type_label=return];
1072 [label="184_ addMinter\n1072-function_definition-185-187", type_label=function_definition];
1079 [label="184_ onlyMinter\n1079-expression_statement-185-185", type_label=expression_statement];
1082 [label="185_ _addMinter(account);\n1082-expression_statement-186-186", type_label=expression_statement];
1087 [label="187_ renounceMinter\n1087-function_definition-188-190", type_label=function_definition];
1091 [label="188_ _removeMinter(msg.sender);\n1091-expression_statement-189-189", type_label=expression_statement];
1098 [label="190_ _addMinter\n1098-function_definition-191-194", type_label=function_definition];
1106 [label="191_ minters.add(account);\n1106-expression_statement-192-192", type_label=expression_statement];
1117 [label="194_ _removeMinter\n1117-function_definition-195-198", type_label=function_definition];
1125 [label="195_ minters.remove(account);\n1125-expression_statement-196-196", type_label=expression_statement];
1145 [label="200_ mint\n1145-function_definition-201-211", type_label=function_definition];
1156 [label="205_ onlyMinter\n1156-expression_statement-206-206", type_label=expression_statement];
1163 [label="208_ _mint(to, value);\n1163-expression_statement-209-209", type_label=expression_statement];
1170 [label="209_ return true;\n1170-return-210-210", type_label=return];
1179 [label="213_ burn\n1179-function_definition-214-216", type_label=function_definition];
1187 [label="214_ _burn(msg.sender, value);\n1187-expression_statement-215-215", type_label=expression_statement];
1196 [label="216_ burnFrom\n1196-function_definition-217-219", type_label=function_definition];
1208 [label="217_ _burnFrom(from, value);\n1208-expression_statement-218-218", type_label=expression_statement];
1224 [label="221_ string public constant name = \"INOMIX\";\n1224-new_variable-222-222", type_label=new_variable];
1231 [label="222_ string public constant symbol = \"INX\";\n1231-new_variable-223-223", type_label=new_variable];
1238 [label="223_ uint8 public constant decimals = 18;\n1238-new_variable-224-224", type_label=new_variable];
1244 [label="224_ uint256 public constant INITIAL_SUPPLY = 7000000000 * (10 ** uint256(decimals));\n1244-new_variable-225-225", type_label=new_variable];
1263 [label="226_ _mint(_owner, INITIAL_SUPPLY);\n1263-expression_statement-227-227", type_label=expression_statement];
1 [label="0_ start_node", type_label=start];
2 [label="0_ exit_node", type_label=exit];
13 -> 30  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
30 -> 35  [color=red, controlflow_type=pos_next, edge_type=CFG_edge, key=0, label=pos_next];
30 -> 1295  [color=red, controlflow_type=neg_next, edge_type=CFG_edge, key=0, label=neg_next];
1295 -> 37  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
35 -> 1295  [color=red, controlflow_type=end_if, edge_type=CFG_edge, key=0, label=end_if];
35 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
37 -> 45  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
45 -> 54  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
54 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
56 -> 73  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
73 -> 80  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
80 -> 88  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
88 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
90 -> 107  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
107 -> 114  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
114 -> 122  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
122 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
124 -> 141  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
141 -> 149  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
149 -> 156  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
156 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
158 -> 175  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
175 -> 182  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
182 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
313 -> 320  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
320 -> 329  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
334 -> 343  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
343 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
345 -> 358  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
358 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
362 -> 379  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
379 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
385 -> 401  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
401 -> 412  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
412 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
415 -> 431  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
431 -> 440  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
460 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
463 -> 483  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
483 -> 496  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
496 -> 517  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
517 -> 526  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
526 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
529 -> 545  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
545 -> 554  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
592 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
595 -> 611  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
611 -> 620  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
658 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
661 -> 677  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
677 -> 686  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
686 -> 695  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
695 -> 708  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
729 -> 741  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
741 -> 748  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
748 -> 757  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
780 -> 792  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
792 -> 799  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
799 -> 808  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
808 -> 817  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
840 -> 852  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
852 -> 865  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
865 -> 886  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
904 -> 917  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
917 -> 926  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
935 -> 948  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
948 -> 957  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
966 -> 984  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
984 -> 993  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
993 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1040 -> 1050  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1052 -> 1065  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1065 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1072 -> 1082  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1087 -> 1091  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1098 -> 1106  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1117 -> 1125  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1145 -> 1163  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1163 -> 1170  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1170 -> 2  [color=red, controlflow_type=return_exit, edge_type=CFG_edge, key=0, label=return_exit];
1179 -> 1187  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1196 -> 1208  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1224 -> 1231  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1231 -> 1238  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
1238 -> 1244  [color=red, controlflow_type=next_line, edge_type=CFG_edge, key=0, label=next_line];
}
